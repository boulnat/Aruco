
MB-synthetiseur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  0800c850  0800c850  0001c850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd4c  0800cd4c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd4c  0800cd4c  0001cd4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd54  0800cd54  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd54  0800cd54  0001cd54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd58  0800cd58  0001cd58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800cd5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000858c  200001e4  0800cf40  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008770  0800cf40  00028770  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028709  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000487e  00000000  00000000  0004891d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ec0  00000000  00000000  0004d1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d08  00000000  00000000  0004f060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264d0  00000000  00000000  00050d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000209a0  00000000  00000000  00077238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb7a1  00000000  00000000  00097bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00183379  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000949c  00000000  00000000  001833cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c838 	.word	0x0800c838

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800c838 	.word	0x0800c838

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <readChannel>:
#include <stdint.h>
#include <stdbool.h>
#include <main.h>
#include <AS7341.h>

uint16_t readChannel(I2C_HandleTypeDef *hi2c1, as7341_adc_channel_t channel) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af02      	add	r7, sp, #8
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	70fb      	strb	r3, [r7, #3]

	uint8_t read[2];
	uint16_t read16bits = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	81fb      	strh	r3, [r7, #14]

	while(HAL_I2C_Master_Transmit(hi2c1, 0x72, &channel, 1, HAL_MAX_DELAY) != HAL_OK);
 8000eb0:	bf00      	nop
 8000eb2:	1cfa      	adds	r2, r7, #3
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	2301      	movs	r3, #1
 8000ebc:	2172      	movs	r1, #114	; 0x72
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f002 fe92 	bl	8003be8 <HAL_I2C_Master_Transmit>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1f3      	bne.n	8000eb2 <readChannel+0x12>
	while(HAL_I2C_IsDeviceReady(hi2c1,0x72,10,200)!=HAL_OK);
 8000eca:	bf00      	nop
 8000ecc:	23c8      	movs	r3, #200	; 0xc8
 8000ece:	220a      	movs	r2, #10
 8000ed0:	2172      	movs	r1, #114	; 0x72
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f003 f872 	bl	8003fbc <HAL_I2C_IsDeviceReady>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f6      	bne.n	8000ecc <readChannel+0x2c>
	while(HAL_I2C_Master_Receive(hi2c1, 0x72, read, sizeof(read), HAL_MAX_DELAY)!= HAL_OK);
 8000ede:	bf00      	nop
 8000ee0:	f107 020c 	add.w	r2, r7, #12
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2302      	movs	r3, #2
 8000eec:	2172      	movs	r1, #114	; 0x72
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f002 ff6e 	bl	8003dd0 <HAL_I2C_Master_Receive>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1f2      	bne.n	8000ee0 <readChannel+0x40>

	read16bits = (read[0] << 8) | read[1];
 8000efa:	7b3b      	ldrb	r3, [r7, #12]
 8000efc:	021b      	lsls	r3, r3, #8
 8000efe:	b21a      	sxth	r2, r3
 8000f00:	7b7b      	ldrb	r3, [r7, #13]
 8000f02:	b21b      	sxth	r3, r3
 8000f04:	4313      	orrs	r3, r2
 8000f06:	b21b      	sxth	r3, r3
 8000f08:	81fb      	strh	r3, [r7, #14]
	return read16bits;
 8000f0a:	89fb      	ldrh	r3, [r7, #14]

}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f18:	f001 f801 	bl	8001f1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1c:	f000 f840 	bl	8000fa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f20:	f000 fb30 	bl	8001584 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f24:	f000 fb08 	bl	8001538 <MX_DMA_Init>
  MX_I2C1_Init();
 8000f28:	f000 f96c 	bl	8001204 <MX_I2C1_Init>
  MX_CAN1_Init();
 8000f2c:	f000 f934 	bl	8001198 <MX_CAN1_Init>
  MX_TIM1_Init();
 8000f30:	f000 f9a6 	bl	8001280 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000f34:	f000 f8cc 	bl	80010d0 <MX_ADC1_Init>
  MX_TIM15_Init();
 8000f38:	f000 fa4a 	bl	80013d0 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 8000f3c:	f000 facc 	bl	80014d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f40:	f006 f958 	bl	80071f4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f44:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <main+0x68>)
 8000f46:	2100      	movs	r1, #0
 8000f48:	480d      	ldr	r0, [pc, #52]	; (8000f80 <main+0x6c>)
 8000f4a:	f006 f99d 	bl	8007288 <osThreadNew>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	4a0c      	ldr	r2, [pc, #48]	; (8000f84 <main+0x70>)
 8000f52:	6013      	str	r3, [r2, #0]

  /* creation of readTempTask */
  readTempTaskHandle = osThreadNew(StartReadTempTask, NULL, &readTempTask_attributes);
 8000f54:	4a0c      	ldr	r2, [pc, #48]	; (8000f88 <main+0x74>)
 8000f56:	2100      	movs	r1, #0
 8000f58:	480c      	ldr	r0, [pc, #48]	; (8000f8c <main+0x78>)
 8000f5a:	f006 f995 	bl	8007288 <osThreadNew>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <main+0x7c>)
 8000f62:	6013      	str	r3, [r2, #0]

  /* creation of readLightTask */
  readLightTaskHandle = osThreadNew(StartReadLightTask, NULL, &readLightTask_attributes);
 8000f64:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <main+0x80>)
 8000f66:	2100      	movs	r1, #0
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <main+0x84>)
 8000f6a:	f006 f98d 	bl	8007288 <osThreadNew>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <main+0x88>)
 8000f72:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f74:	f006 f962 	bl	800723c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <main+0x64>
 8000f7a:	bf00      	nop
 8000f7c:	0800c8b4 	.word	0x0800c8b4
 8000f80:	080015e5 	.word	0x080015e5
 8000f84:	20008440 	.word	0x20008440
 8000f88:	0800c8d8 	.word	0x0800c8d8
 8000f8c:	080016d1 	.word	0x080016d1
 8000f90:	20008524 	.word	0x20008524
 8000f94:	0800c8fc 	.word	0x0800c8fc
 8000f98:	080016e1 	.word	0x080016e1
 8000f9c:	20008620 	.word	0x20008620

08000fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b0ac      	sub	sp, #176	; 0xb0
 8000fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000faa:	2244      	movs	r2, #68	; 0x44
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f008 fdb4 	bl	8009b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	2254      	movs	r2, #84	; 0x54
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f008 fda6 	bl	8009b1c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fd0:	f003 fb74 	bl	80046bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000fd4:	4b3d      	ldr	r3, [pc, #244]	; (80010cc <SystemClock_Config+0x12c>)
 8000fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fda:	4a3c      	ldr	r2, [pc, #240]	; (80010cc <SystemClock_Config+0x12c>)
 8000fdc:	f023 0318 	bic.w	r3, r3, #24
 8000fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000fe4:	2314      	movs	r3, #20
 8000fe6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fec:	2301      	movs	r3, #1
 8000fee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8000ff8:	2390      	movs	r3, #144	; 0x90
 8000ffa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffe:	2302      	movs	r3, #2
 8001000:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001004:	2301      	movs	r3, #1
 8001006:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 5;
 800100a:	2305      	movs	r3, #5
 800100c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001010:	2310      	movs	r3, #16
 8001012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001016:	2307      	movs	r3, #7
 8001018:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800101c:	2302      	movs	r3, #2
 800101e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8001022:	2306      	movs	r3, #6
 8001024:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001028:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800102c:	4618      	mov	r0, r3
 800102e:	f003 fbb9 	bl	80047a4 <HAL_RCC_OscConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001038:	f000 fb6c 	bl	8001714 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103c:	230f      	movs	r3, #15
 800103e:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001040:	2303      	movs	r3, #3
 8001042:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8001044:	23a0      	movs	r3, #160	; 0xa0
 8001046:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001048:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800104c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001052:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f003 ffc3 	bl	8004fe4 <HAL_RCC_ClockConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001064:	f000 fb56 	bl	8001714 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001068:	f244 0342 	movw	r3, #16450	; 0x4042
 800106c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800106e:	2304      	movs	r3, #4
 8001070:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001072:	2300      	movs	r3, #0
 8001074:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001076:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800107a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800107c:	2301      	movs	r3, #1
 800107e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8001080:	2305      	movs	r3, #5
 8001082:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 14;
 8001084:	230e      	movs	r3, #14
 8001086:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001088:	2307      	movs	r3, #7
 800108a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800108c:	2302      	movs	r3, #2
 800108e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001090:	2302      	movs	r3, #2
 8001092:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001094:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001098:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	4618      	mov	r0, r3
 800109e:	f004 f9d7 	bl	8005450 <HAL_RCCEx_PeriphCLKConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80010a8:	f000 fb34 	bl	8001714 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010ac:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010b0:	f003 fb22 	bl	80046f8 <HAL_PWREx_ControlVoltageScaling>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SystemClock_Config+0x11e>
  {
    Error_Handler();
 80010ba:	f000 fb2b 	bl	8001714 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80010be:	f004 fbbb 	bl	8005838 <HAL_RCCEx_EnableMSIPLLMode>
}
 80010c2:	bf00      	nop
 80010c4:	37b0      	adds	r7, #176	; 0xb0
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000

080010d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010d6:	463b      	mov	r3, r7
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
 80010e4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80010e6:	4b29      	ldr	r3, [pc, #164]	; (800118c <MX_ADC1_Init+0xbc>)
 80010e8:	4a29      	ldr	r2, [pc, #164]	; (8001190 <MX_ADC1_Init+0xc0>)
 80010ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010ec:	4b27      	ldr	r3, [pc, #156]	; (800118c <MX_ADC1_Init+0xbc>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010f2:	4b26      	ldr	r3, [pc, #152]	; (800118c <MX_ADC1_Init+0xbc>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010f8:	4b24      	ldr	r3, [pc, #144]	; (800118c <MX_ADC1_Init+0xbc>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010fe:	4b23      	ldr	r3, [pc, #140]	; (800118c <MX_ADC1_Init+0xbc>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001104:	4b21      	ldr	r3, [pc, #132]	; (800118c <MX_ADC1_Init+0xbc>)
 8001106:	2204      	movs	r2, #4
 8001108:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800110a:	4b20      	ldr	r3, [pc, #128]	; (800118c <MX_ADC1_Init+0xbc>)
 800110c:	2200      	movs	r2, #0
 800110e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001110:	4b1e      	ldr	r3, [pc, #120]	; (800118c <MX_ADC1_Init+0xbc>)
 8001112:	2200      	movs	r2, #0
 8001114:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <MX_ADC1_Init+0xbc>)
 8001118:	2201      	movs	r2, #1
 800111a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <MX_ADC1_Init+0xbc>)
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <MX_ADC1_Init+0xbc>)
 8001126:	2200      	movs	r2, #0
 8001128:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <MX_ADC1_Init+0xbc>)
 800112c:	2200      	movs	r2, #0
 800112e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <MX_ADC1_Init+0xbc>)
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <MX_ADC1_Init+0xbc>)
 800113a:	2200      	movs	r2, #0
 800113c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800113e:	4b13      	ldr	r3, [pc, #76]	; (800118c <MX_ADC1_Init+0xbc>)
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001146:	4811      	ldr	r0, [pc, #68]	; (800118c <MX_ADC1_Init+0xbc>)
 8001148:	f001 f8ae 	bl	80022a8 <HAL_ADC_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001152:	f000 fadf 	bl	8001714 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_ADC1_Init+0xc4>)
 8001158:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800115a:	2306      	movs	r3, #6
 800115c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001162:	237f      	movs	r3, #127	; 0x7f
 8001164:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001166:	2304      	movs	r3, #4
 8001168:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116e:	463b      	mov	r3, r7
 8001170:	4619      	mov	r1, r3
 8001172:	4806      	ldr	r0, [pc, #24]	; (800118c <MX_ADC1_Init+0xbc>)
 8001174:	f001 f9e0 	bl	8002538 <HAL_ADC_ConfigChannel>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800117e:	f000 fac9 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20008528 	.word	0x20008528
 8001190:	50040000 	.word	0x50040000
 8001194:	19200040 	.word	0x19200040

08001198 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800119c:	4b17      	ldr	r3, [pc, #92]	; (80011fc <MX_CAN1_Init+0x64>)
 800119e:	4a18      	ldr	r2, [pc, #96]	; (8001200 <MX_CAN1_Init+0x68>)
 80011a0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 80011a2:	4b16      	ldr	r3, [pc, #88]	; (80011fc <MX_CAN1_Init+0x64>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <MX_CAN1_Init+0x64>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <MX_CAN1_Init+0x64>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_CAN1_Init+0x64>)
 80011b6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80011ba:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_CAN1_Init+0x64>)
 80011be:	2200      	movs	r2, #0
 80011c0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_CAN1_Init+0x64>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <MX_CAN1_Init+0x64>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <MX_CAN1_Init+0x64>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80011d4:	4b09      	ldr	r3, [pc, #36]	; (80011fc <MX_CAN1_Init+0x64>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <MX_CAN1_Init+0x64>)
 80011dc:	2200      	movs	r2, #0
 80011de:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <MX_CAN1_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80011e6:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_CAN1_Init+0x64>)
 80011e8:	f001 fd86 	bl	8002cf8 <HAL_CAN_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80011f2:	f000 fa8f 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200086a8 	.word	0x200086a8
 8001200:	40006400 	.word	0x40006400

08001204 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001208:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <MX_I2C1_Init+0x74>)
 800120a:	4a1c      	ldr	r2, [pc, #112]	; (800127c <MX_I2C1_Init+0x78>)
 800120c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000000;
 800120e:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <MX_I2C1_Init+0x74>)
 8001210:	2200      	movs	r2, #0
 8001212:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001214:	4b18      	ldr	r3, [pc, #96]	; (8001278 <MX_I2C1_Init+0x74>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <MX_I2C1_Init+0x74>)
 800121c:	2201      	movs	r2, #1
 800121e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001220:	4b15      	ldr	r3, [pc, #84]	; (8001278 <MX_I2C1_Init+0x74>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_I2C1_Init+0x74>)
 8001228:	2200      	movs	r2, #0
 800122a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <MX_I2C1_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_I2C1_Init+0x74>)
 8001234:	2200      	movs	r2, #0
 8001236:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_I2C1_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800123e:	480e      	ldr	r0, [pc, #56]	; (8001278 <MX_I2C1_Init+0x74>)
 8001240:	f002 fc42 	bl	8003ac8 <HAL_I2C_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800124a:	f000 fa63 	bl	8001714 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800124e:	2100      	movs	r1, #0
 8001250:	4809      	ldr	r0, [pc, #36]	; (8001278 <MX_I2C1_Init+0x74>)
 8001252:	f003 f99b 	bl	800458c <HAL_I2CEx_ConfigAnalogFilter>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800125c:	f000 fa5a 	bl	8001714 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001260:	2100      	movs	r1, #0
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_I2C1_Init+0x74>)
 8001264:	f003 f9dd 	bl	8004622 <HAL_I2CEx_ConfigDigitalFilter>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800126e:	f000 fa51 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2000848c 	.word	0x2000848c
 800127c:	40005400 	.word	0x40005400

08001280 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b096      	sub	sp, #88	; 0x58
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001286:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001292:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]
 80012a2:	615a      	str	r2, [r3, #20]
 80012a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	222c      	movs	r2, #44	; 0x2c
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f008 fc35 	bl	8009b1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012b2:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <MX_TIM1_Init+0x148>)
 80012b4:	4a45      	ldr	r2, [pc, #276]	; (80013cc <MX_TIM1_Init+0x14c>)
 80012b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012b8:	4b43      	ldr	r3, [pc, #268]	; (80013c8 <MX_TIM1_Init+0x148>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012be:	4b42      	ldr	r3, [pc, #264]	; (80013c8 <MX_TIM1_Init+0x148>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <MX_TIM1_Init+0x148>)
 80012c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012cc:	4b3e      	ldr	r3, [pc, #248]	; (80013c8 <MX_TIM1_Init+0x148>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012d2:	4b3d      	ldr	r3, [pc, #244]	; (80013c8 <MX_TIM1_Init+0x148>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d8:	4b3b      	ldr	r3, [pc, #236]	; (80013c8 <MX_TIM1_Init+0x148>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012de:	483a      	ldr	r0, [pc, #232]	; (80013c8 <MX_TIM1_Init+0x148>)
 80012e0:	f004 fc62 	bl	8005ba8 <HAL_TIM_PWM_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80012ea:	f000 fa13 	bl	8001714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ee:	2300      	movs	r3, #0
 80012f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012f2:	2300      	movs	r3, #0
 80012f4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012fe:	4619      	mov	r1, r3
 8001300:	4831      	ldr	r0, [pc, #196]	; (80013c8 <MX_TIM1_Init+0x148>)
 8001302:	f005 f9e1 	bl	80066c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800130c:	f000 fa02 	bl	8001714 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001310:	2360      	movs	r3, #96	; 0x60
 8001312:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001318:	2300      	movs	r3, #0
 800131a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800131c:	2300      	movs	r3, #0
 800131e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001324:	2300      	movs	r3, #0
 8001326:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001328:	2300      	movs	r3, #0
 800132a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800132c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001330:	2200      	movs	r2, #0
 8001332:	4619      	mov	r1, r3
 8001334:	4824      	ldr	r0, [pc, #144]	; (80013c8 <MX_TIM1_Init+0x148>)
 8001336:	f004 fdad 	bl	8005e94 <HAL_TIM_PWM_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001340:	f000 f9e8 	bl	8001714 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001344:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001348:	2204      	movs	r2, #4
 800134a:	4619      	mov	r1, r3
 800134c:	481e      	ldr	r0, [pc, #120]	; (80013c8 <MX_TIM1_Init+0x148>)
 800134e:	f004 fda1 	bl	8005e94 <HAL_TIM_PWM_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001358:	f000 f9dc 	bl	8001714 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800135c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001360:	2208      	movs	r2, #8
 8001362:	4619      	mov	r1, r3
 8001364:	4818      	ldr	r0, [pc, #96]	; (80013c8 <MX_TIM1_Init+0x148>)
 8001366:	f004 fd95 	bl	8005e94 <HAL_TIM_PWM_ConfigChannel>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001370:	f000 f9d0 	bl	8001714 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001396:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	4619      	mov	r1, r3
 80013a8:	4807      	ldr	r0, [pc, #28]	; (80013c8 <MX_TIM1_Init+0x148>)
 80013aa:	f005 f9f3 	bl	8006794 <HAL_TIMEx_ConfigBreakDeadTime>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80013b4:	f000 f9ae 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013b8:	4803      	ldr	r0, [pc, #12]	; (80013c8 <MX_TIM1_Init+0x148>)
 80013ba:	f000 fae3 	bl	8001984 <HAL_TIM_MspPostInit>

}
 80013be:	bf00      	nop
 80013c0:	3758      	adds	r7, #88	; 0x58
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200085d4 	.word	0x200085d4
 80013cc:	40012c00 	.word	0x40012c00

080013d0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b096      	sub	sp, #88	; 0x58
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]
 80013f2:	615a      	str	r2, [r3, #20]
 80013f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	222c      	movs	r2, #44	; 0x2c
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f008 fb8d 	bl	8009b1c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001402:	4b33      	ldr	r3, [pc, #204]	; (80014d0 <MX_TIM15_Init+0x100>)
 8001404:	4a33      	ldr	r2, [pc, #204]	; (80014d4 <MX_TIM15_Init+0x104>)
 8001406:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001408:	4b31      	ldr	r3, [pc, #196]	; (80014d0 <MX_TIM15_Init+0x100>)
 800140a:	2200      	movs	r2, #0
 800140c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140e:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <MX_TIM15_Init+0x100>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001414:	4b2e      	ldr	r3, [pc, #184]	; (80014d0 <MX_TIM15_Init+0x100>)
 8001416:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800141a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141c:	4b2c      	ldr	r3, [pc, #176]	; (80014d0 <MX_TIM15_Init+0x100>)
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001422:	4b2b      	ldr	r3, [pc, #172]	; (80014d0 <MX_TIM15_Init+0x100>)
 8001424:	2200      	movs	r2, #0
 8001426:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001428:	4b29      	ldr	r3, [pc, #164]	; (80014d0 <MX_TIM15_Init+0x100>)
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800142e:	4828      	ldr	r0, [pc, #160]	; (80014d0 <MX_TIM15_Init+0x100>)
 8001430:	f004 fbba 	bl	8005ba8 <HAL_TIM_PWM_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800143a:	f000 f96b 	bl	8001714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143e:	2300      	movs	r3, #0
 8001440:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001442:	2300      	movs	r3, #0
 8001444:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001446:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800144a:	4619      	mov	r1, r3
 800144c:	4820      	ldr	r0, [pc, #128]	; (80014d0 <MX_TIM15_Init+0x100>)
 800144e:	f005 f93b 	bl	80066c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001458:	f000 f95c 	bl	8001714 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800145c:	2360      	movs	r3, #96	; 0x60
 800145e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001464:	2300      	movs	r3, #0
 8001466:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001468:	2300      	movs	r3, #0
 800146a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001470:	2300      	movs	r3, #0
 8001472:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001474:	2300      	movs	r3, #0
 8001476:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001478:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800147c:	2204      	movs	r2, #4
 800147e:	4619      	mov	r1, r3
 8001480:	4813      	ldr	r0, [pc, #76]	; (80014d0 <MX_TIM15_Init+0x100>)
 8001482:	f004 fd07 	bl	8005e94 <HAL_TIM_PWM_ConfigChannel>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 800148c:	f000 f942 	bl	8001714 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	4619      	mov	r1, r3
 80014b2:	4807      	ldr	r0, [pc, #28]	; (80014d0 <MX_TIM15_Init+0x100>)
 80014b4:	f005 f96e 	bl	8006794 <HAL_TIMEx_ConfigBreakDeadTime>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 80014be:	f000 f929 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80014c2:	4803      	ldr	r0, [pc, #12]	; (80014d0 <MX_TIM15_Init+0x100>)
 80014c4:	f000 fa5e 	bl	8001984 <HAL_TIM_MspPostInit>

}
 80014c8:	bf00      	nop
 80014ca:	3758      	adds	r7, #88	; 0x58
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200084d8 	.word	0x200084d8
 80014d4:	40014000 	.word	0x40014000

080014d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <MX_USART2_UART_Init+0x58>)
 80014de:	4a15      	ldr	r2, [pc, #84]	; (8001534 <MX_USART2_UART_Init+0x5c>)
 80014e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014e2:	4b13      	ldr	r3, [pc, #76]	; (8001530 <MX_USART2_UART_Init+0x58>)
 80014e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <MX_USART2_UART_Init+0x58>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <MX_USART2_UART_Init+0x58>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_USART2_UART_Init+0x58>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MX_USART2_UART_Init+0x58>)
 80014fe:	220c      	movs	r2, #12
 8001500:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <MX_USART2_UART_Init+0x58>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_USART2_UART_Init+0x58>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <MX_USART2_UART_Init+0x58>)
 8001510:	2200      	movs	r2, #0
 8001512:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_USART2_UART_Init+0x58>)
 8001516:	2200      	movs	r2, #0
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_USART2_UART_Init+0x58>)
 800151c:	f005 f9d0 	bl	80068c0 <HAL_UART_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001526:	f000 f8f5 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20008624 	.word	0x20008624
 8001534:	40004400 	.word	0x40004400

08001538 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <MX_DMA_Init+0x48>)
 8001540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001542:	4a0f      	ldr	r2, [pc, #60]	; (8001580 <MX_DMA_Init+0x48>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6493      	str	r3, [r2, #72]	; 0x48
 800154a:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <MX_DMA_Init+0x48>)
 800154c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2105      	movs	r1, #5
 800155a:	2010      	movs	r0, #16
 800155c:	f001 ffb8 	bl	80034d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001560:	2010      	movs	r0, #16
 8001562:	f001 ffd1 	bl	8003508 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2105      	movs	r1, #5
 800156a:	2011      	movs	r0, #17
 800156c:	f001 ffb0 	bl	80034d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001570:	2011      	movs	r0, #17
 8001572:	f001 ffc9 	bl	8003508 <HAL_NVIC_EnableIRQ>

}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40021000 	.word	0x40021000

08001584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <MX_GPIO_Init+0x5c>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158e:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <MX_GPIO_Init+0x5c>)
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <MX_GPIO_Init+0x5c>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	f003 0304 	and.w	r3, r3, #4
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <MX_GPIO_Init+0x5c>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <MX_GPIO_Init+0x5c>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MX_GPIO_Init+0x5c>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_GPIO_Init+0x5c>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015be:	4a08      	ldr	r2, [pc, #32]	; (80015e0 <MX_GPIO_Init+0x5c>)
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MX_GPIO_Init+0x5c>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]

}
 80015d2:	bf00      	nop
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000

080015e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b096      	sub	sp, #88	; 0x58
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  char msg[50];
  uint8_t read[2]={0};
 80015ec:	2300      	movs	r3, #0
 80015ee:	82bb      	strh	r3, [r7, #20]
  uint16_t readtest;
  float readfloat=0.0;
 80015f0:	f04f 0300 	mov.w	r3, #0
 80015f4:	653b      	str	r3, [r7, #80]	; 0x50
  uint8_t TH = 0x00;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint8_t TV = 0x01;
 80015fc:	2301      	movs	r3, #1
 80015fe:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  uint8_t TC = 0x02;
 8001602:	2302      	movs	r3, #2
 8001604:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  uint8_t tempReg[] = {TH,TV,TC};
 8001608:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800160c:	743b      	strb	r3, [r7, #16]
 800160e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001612:	747b      	strb	r3, [r7, #17]
 8001614:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001618:	74bb      	strb	r3, [r7, #18]

  uint8_t data[1]={TH};
 800161a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800161e:	733b      	strb	r3, [r7, #12]
  uint8_t MSB = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  uint8_t LSB = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  HAL_StatusTypeDef status;
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 800162c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001630:	f005 febc 	bl	80073ac <osDelay>
    //HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);

    //C1 read CF
    //C0 write CE

    for(int i=0;i<255;i++){
 8001634:	2300      	movs	r3, #0
 8001636:	657b      	str	r3, [r7, #84]	; 0x54
 8001638:	e021      	b.n	800167e <StartDefaultTask+0x9a>
      if(HAL_I2C_IsDeviceReady(&hi2c1,i,10,200)==HAL_OK){
 800163a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800163c:	b299      	uxth	r1, r3
 800163e:	23c8      	movs	r3, #200	; 0xc8
 8001640:	220a      	movs	r2, #10
 8001642:	481f      	ldr	r0, [pc, #124]	; (80016c0 <StartDefaultTask+0xdc>)
 8001644:	f002 fcba 	bl	8003fbc <HAL_I2C_IsDeviceReady>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d114      	bne.n	8001678 <StartDefaultTask+0x94>
    	  sprintf(msg,"id: %d\r\n",i);
 800164e:	f107 0318 	add.w	r3, r7, #24
 8001652:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001654:	491b      	ldr	r1, [pc, #108]	; (80016c4 <StartDefaultTask+0xe0>)
 8001656:	4618      	mov	r0, r3
 8001658:	f008 fed2 	bl	800a400 <siprintf>
    	  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 800165c:	f107 0318 	add.w	r3, r7, #24
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe fdb5 	bl	80001d0 <strlen>
 8001666:	4603      	mov	r3, r0
 8001668:	b29a      	uxth	r2, r3
 800166a:	f107 0118 	add.w	r1, r7, #24
 800166e:	f04f 33ff 	mov.w	r3, #4294967295
 8001672:	4815      	ldr	r0, [pc, #84]	; (80016c8 <StartDefaultTask+0xe4>)
 8001674:	f005 f972 	bl	800695c <HAL_UART_Transmit>
    for(int i=0;i<255;i++){
 8001678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800167a:	3301      	adds	r3, #1
 800167c:	657b      	str	r3, [r7, #84]	; 0x54
 800167e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001680:	2bfe      	cmp	r3, #254	; 0xfe
 8001682:	ddda      	ble.n	800163a <StartDefaultTask+0x56>
      }
    }

    uint8_t a = readChannel(&hi2c1,0x61);
 8001684:	2161      	movs	r1, #97	; 0x61
 8001686:	480e      	ldr	r0, [pc, #56]	; (80016c0 <StartDefaultTask+0xdc>)
 8001688:	f7ff fc0a 	bl	8000ea0 <readChannel>
 800168c:	4603      	mov	r3, r0
 800168e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
    sprintf(msg, "readChannel = %d\r\n", a);
 8001692:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8001696:	f107 0318 	add.w	r3, r7, #24
 800169a:	490c      	ldr	r1, [pc, #48]	; (80016cc <StartDefaultTask+0xe8>)
 800169c:	4618      	mov	r0, r3
 800169e:	f008 feaf 	bl	800a400 <siprintf>
    HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80016a2:	f107 0318 	add.w	r3, r7, #24
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe fd92 	bl	80001d0 <strlen>
 80016ac:	4603      	mov	r3, r0
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	f107 0118 	add.w	r1, r7, #24
 80016b4:	f04f 33ff 	mov.w	r3, #4294967295
 80016b8:	4803      	ldr	r0, [pc, #12]	; (80016c8 <StartDefaultTask+0xe4>)
 80016ba:	f005 f94f 	bl	800695c <HAL_UART_Transmit>
  {
 80016be:	e7b5      	b.n	800162c <StartDefaultTask+0x48>
 80016c0:	2000848c 	.word	0x2000848c
 80016c4:	0800c87c 	.word	0x0800c87c
 80016c8:	20008624 	.word	0x20008624
 80016cc:	0800c888 	.word	0x0800c888

080016d0 <StartReadTempTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadTempTask */
void StartReadTempTask(void *argument)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b090      	sub	sp, #64	; 0x40
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	  char msg[50];

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80016d8:	2001      	movs	r0, #1
 80016da:	f005 fe67 	bl	80073ac <osDelay>
 80016de:	e7fb      	b.n	80016d8 <StartReadTempTask+0x8>

080016e0 <StartReadLightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadLightTask */
void StartReadLightTask(void *argument)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadLightTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80016e8:	2001      	movs	r0, #1
 80016ea:	f005 fe5f 	bl	80073ac <osDelay>
 80016ee:	e7fb      	b.n	80016e8 <StartReadLightTask+0x8>

080016f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a04      	ldr	r2, [pc, #16]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d101      	bne.n	8001706 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001702:	f000 fc25 	bl	8001f50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40001000 	.word	0x40001000

08001714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001718:	b672      	cpsid	i
}
 800171a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800171c:	e7fe      	b.n	800171c <Error_Handler+0x8>
	...

08001720 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <HAL_MspInit+0x4c>)
 8001728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172a:	4a10      	ldr	r2, [pc, #64]	; (800176c <HAL_MspInit+0x4c>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6613      	str	r3, [r2, #96]	; 0x60
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <HAL_MspInit+0x4c>)
 8001734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_MspInit+0x4c>)
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	4a0a      	ldr	r2, [pc, #40]	; (800176c <HAL_MspInit+0x4c>)
 8001744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001748:	6593      	str	r3, [r2, #88]	; 0x58
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <HAL_MspInit+0x4c>)
 800174c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	210f      	movs	r1, #15
 800175a:	f06f 0001 	mvn.w	r0, #1
 800175e:	f001 feb7 	bl	80034d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000

08001770 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a15      	ldr	r2, [pc, #84]	; (80017e4 <HAL_ADC_MspInit+0x74>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d124      	bne.n	80017dc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_ADC_MspInit+0x78>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001796:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <HAL_ADC_MspInit+0x78>)
 8001798:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800179c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800179e:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_ADC_MspInit+0x78>)
 80017a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <HAL_ADC_MspInit+0x78>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ae:	4a0e      	ldr	r2, [pc, #56]	; (80017e8 <HAL_ADC_MspInit+0x78>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b6:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <HAL_ADC_MspInit+0x78>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN6
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80017c2:	2372      	movs	r3, #114	; 0x72
 80017c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017c6:	230b      	movs	r3, #11
 80017c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d8:	f002 f80c 	bl	80037f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017dc:	bf00      	nop
 80017de:	3728      	adds	r7, #40	; 0x28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	50040000 	.word	0x50040000
 80017e8:	40021000 	.word	0x40021000

080017ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a20      	ldr	r2, [pc, #128]	; (800188c <HAL_CAN_MspInit+0xa0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d139      	bne.n	8001882 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800180e:	4b20      	ldr	r3, [pc, #128]	; (8001890 <HAL_CAN_MspInit+0xa4>)
 8001810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001812:	4a1f      	ldr	r2, [pc, #124]	; (8001890 <HAL_CAN_MspInit+0xa4>)
 8001814:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001818:	6593      	str	r3, [r2, #88]	; 0x58
 800181a:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <HAL_CAN_MspInit+0xa4>)
 800181c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <HAL_CAN_MspInit+0xa4>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	4a19      	ldr	r2, [pc, #100]	; (8001890 <HAL_CAN_MspInit+0xa4>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001832:	4b17      	ldr	r3, [pc, #92]	; (8001890 <HAL_CAN_MspInit+0xa4>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800183e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184c:	2303      	movs	r3, #3
 800184e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001850:	2309      	movs	r3, #9
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800185e:	f001 ffc9 	bl	80037f4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2105      	movs	r1, #5
 8001866:	2013      	movs	r0, #19
 8001868:	f001 fe32 	bl	80034d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800186c:	2013      	movs	r0, #19
 800186e:	f001 fe4b 	bl	8003508 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2105      	movs	r1, #5
 8001876:	2014      	movs	r0, #20
 8001878:	f001 fe2a 	bl	80034d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800187c:	2014      	movs	r0, #20
 800187e:	f001 fe43 	bl	8003508 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001882:	bf00      	nop
 8001884:	3728      	adds	r7, #40	; 0x28
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40006400 	.word	0x40006400
 8001890:	40021000 	.word	0x40021000

08001894 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a17      	ldr	r2, [pc, #92]	; (8001910 <HAL_I2C_MspInit+0x7c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d127      	bne.n	8001906 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b6:	4b17      	ldr	r3, [pc, #92]	; (8001914 <HAL_I2C_MspInit+0x80>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ba:	4a16      	ldr	r2, [pc, #88]	; (8001914 <HAL_I2C_MspInit+0x80>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c2:	4b14      	ldr	r3, [pc, #80]	; (8001914 <HAL_I2C_MspInit+0x80>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018ce:	23c0      	movs	r3, #192	; 0xc0
 80018d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018d2:	2312      	movs	r3, #18
 80018d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018d6:	2301      	movs	r3, #1
 80018d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018da:	2303      	movs	r3, #3
 80018dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018de:	2304      	movs	r3, #4
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	4619      	mov	r1, r3
 80018e8:	480b      	ldr	r0, [pc, #44]	; (8001918 <HAL_I2C_MspInit+0x84>)
 80018ea:	f001 ff83 	bl	80037f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_I2C_MspInit+0x80>)
 80018f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f2:	4a08      	ldr	r2, [pc, #32]	; (8001914 <HAL_I2C_MspInit+0x80>)
 80018f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018f8:	6593      	str	r3, [r2, #88]	; 0x58
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_I2C_MspInit+0x80>)
 80018fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001906:	bf00      	nop
 8001908:	3728      	adds	r7, #40	; 0x28
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40005400 	.word	0x40005400
 8001914:	40021000 	.word	0x40021000
 8001918:	48000400 	.word	0x48000400

0800191c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a13      	ldr	r2, [pc, #76]	; (8001978 <HAL_TIM_PWM_MspInit+0x5c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d10c      	bne.n	8001948 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800192e:	4b13      	ldr	r3, [pc, #76]	; (800197c <HAL_TIM_PWM_MspInit+0x60>)
 8001930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001932:	4a12      	ldr	r2, [pc, #72]	; (800197c <HAL_TIM_PWM_MspInit+0x60>)
 8001934:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001938:	6613      	str	r3, [r2, #96]	; 0x60
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <HAL_TIM_PWM_MspInit+0x60>)
 800193c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001946:	e010      	b.n	800196a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM15)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0c      	ldr	r2, [pc, #48]	; (8001980 <HAL_TIM_PWM_MspInit+0x64>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d10b      	bne.n	800196a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_TIM_PWM_MspInit+0x60>)
 8001954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001956:	4a09      	ldr	r2, [pc, #36]	; (800197c <HAL_TIM_PWM_MspInit+0x60>)
 8001958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800195c:	6613      	str	r3, [r2, #96]	; 0x60
 800195e:	4b07      	ldr	r3, [pc, #28]	; (800197c <HAL_TIM_PWM_MspInit+0x60>)
 8001960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
}
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40012c00 	.word	0x40012c00
 800197c:	40021000 	.word	0x40021000
 8001980:	40014000 	.word	0x40014000

08001984 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a23      	ldr	r2, [pc, #140]	; (8001a30 <HAL_TIM_MspPostInit+0xac>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d11e      	bne.n	80019e4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	4b23      	ldr	r3, [pc, #140]	; (8001a34 <HAL_TIM_MspPostInit+0xb0>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	4a22      	ldr	r2, [pc, #136]	; (8001a34 <HAL_TIM_MspPostInit+0xb0>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b2:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <HAL_TIM_MspPostInit+0xb0>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80019be:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80019c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019cc:	2300      	movs	r3, #0
 80019ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019d0:	2301      	movs	r3, #1
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	4619      	mov	r1, r3
 80019da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019de:	f001 ff09 	bl	80037f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80019e2:	e021      	b.n	8001a28 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM15)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a13      	ldr	r2, [pc, #76]	; (8001a38 <HAL_TIM_MspPostInit+0xb4>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d11c      	bne.n	8001a28 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <HAL_TIM_MspPostInit+0xb0>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	4a10      	ldr	r2, [pc, #64]	; (8001a34 <HAL_TIM_MspPostInit+0xb0>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <HAL_TIM_MspPostInit+0xb0>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a06:	2308      	movs	r3, #8
 8001a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001a16:	230e      	movs	r3, #14
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a24:	f001 fee6 	bl	80037f4 <HAL_GPIO_Init>
}
 8001a28:	bf00      	nop
 8001a2a:	3728      	adds	r7, #40	; 0x28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40012c00 	.word	0x40012c00
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40014000 	.word	0x40014000

08001a3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	; 0x28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a4a      	ldr	r2, [pc, #296]	; (8001b84 <HAL_UART_MspInit+0x148>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	f040 808d 	bne.w	8001b7a <HAL_UART_MspInit+0x13e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a60:	4b49      	ldr	r3, [pc, #292]	; (8001b88 <HAL_UART_MspInit+0x14c>)
 8001a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a64:	4a48      	ldr	r2, [pc, #288]	; (8001b88 <HAL_UART_MspInit+0x14c>)
 8001a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a6c:	4b46      	ldr	r3, [pc, #280]	; (8001b88 <HAL_UART_MspInit+0x14c>)
 8001a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a78:	4b43      	ldr	r3, [pc, #268]	; (8001b88 <HAL_UART_MspInit+0x14c>)
 8001a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7c:	4a42      	ldr	r2, [pc, #264]	; (8001b88 <HAL_UART_MspInit+0x14c>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a84:	4b40      	ldr	r3, [pc, #256]	; (8001b88 <HAL_UART_MspInit+0x14c>)
 8001a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a90:	2304      	movs	r3, #4
 8001a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a94:	2302      	movs	r3, #2
 8001a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aa0:	2307      	movs	r3, #7
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aae:	f001 fea1 	bl	80037f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	4619      	mov	r1, r3
 8001ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad2:	f001 fe8f 	bl	80037f4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001ad6:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <HAL_UART_MspInit+0x150>)
 8001ad8:	4a2d      	ldr	r2, [pc, #180]	; (8001b90 <HAL_UART_MspInit+0x154>)
 8001ada:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001adc:	4b2b      	ldr	r3, [pc, #172]	; (8001b8c <HAL_UART_MspInit+0x150>)
 8001ade:	2202      	movs	r2, #2
 8001ae0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ae2:	4b2a      	ldr	r3, [pc, #168]	; (8001b8c <HAL_UART_MspInit+0x150>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ae8:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <HAL_UART_MspInit+0x150>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001aee:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <HAL_UART_MspInit+0x150>)
 8001af0:	2280      	movs	r2, #128	; 0x80
 8001af2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001af4:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <HAL_UART_MspInit+0x150>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001afa:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <HAL_UART_MspInit+0x150>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001b00:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <HAL_UART_MspInit+0x150>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b06:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <HAL_UART_MspInit+0x150>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b0c:	481f      	ldr	r0, [pc, #124]	; (8001b8c <HAL_UART_MspInit+0x150>)
 8001b0e:	f001 fd09 	bl	8003524 <HAL_DMA_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 8001b18:	f7ff fdfc 	bl	8001714 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a1b      	ldr	r2, [pc, #108]	; (8001b8c <HAL_UART_MspInit+0x150>)
 8001b20:	671a      	str	r2, [r3, #112]	; 0x70
 8001b22:	4a1a      	ldr	r2, [pc, #104]	; (8001b8c <HAL_UART_MspInit+0x150>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001b28:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <HAL_UART_MspInit+0x158>)
 8001b2a:	4a1b      	ldr	r2, [pc, #108]	; (8001b98 <HAL_UART_MspInit+0x15c>)
 8001b2c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001b2e:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <HAL_UART_MspInit+0x158>)
 8001b30:	2202      	movs	r2, #2
 8001b32:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b34:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <HAL_UART_MspInit+0x158>)
 8001b36:	2210      	movs	r2, #16
 8001b38:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b3a:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <HAL_UART_MspInit+0x158>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b40:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <HAL_UART_MspInit+0x158>)
 8001b42:	2280      	movs	r2, #128	; 0x80
 8001b44:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b46:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <HAL_UART_MspInit+0x158>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_UART_MspInit+0x158>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <HAL_UART_MspInit+0x158>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b58:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <HAL_UART_MspInit+0x158>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001b5e:	480d      	ldr	r0, [pc, #52]	; (8001b94 <HAL_UART_MspInit+0x158>)
 8001b60:	f001 fce0 	bl	8003524 <HAL_DMA_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 8001b6a:	f7ff fdd3 	bl	8001714 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a08      	ldr	r2, [pc, #32]	; (8001b94 <HAL_UART_MspInit+0x158>)
 8001b72:	66da      	str	r2, [r3, #108]	; 0x6c
 8001b74:	4a07      	ldr	r2, [pc, #28]	; (8001b94 <HAL_UART_MspInit+0x158>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b7a:	bf00      	nop
 8001b7c:	3728      	adds	r7, #40	; 0x28
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40004400 	.word	0x40004400
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	20008444 	.word	0x20008444
 8001b90:	4002006c 	.word	0x4002006c
 8001b94:	2000858c 	.word	0x2000858c
 8001b98:	40020080 	.word	0x40020080

08001b9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08c      	sub	sp, #48	; 0x30
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001bac:	2200      	movs	r2, #0
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	2036      	movs	r0, #54	; 0x36
 8001bb2:	f001 fc8d 	bl	80034d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bb6:	2036      	movs	r0, #54	; 0x36
 8001bb8:	f001 fca6 	bl	8003508 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001bbc:	4b1f      	ldr	r3, [pc, #124]	; (8001c3c <HAL_InitTick+0xa0>)
 8001bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc0:	4a1e      	ldr	r2, [pc, #120]	; (8001c3c <HAL_InitTick+0xa0>)
 8001bc2:	f043 0310 	orr.w	r3, r3, #16
 8001bc6:	6593      	str	r3, [r2, #88]	; 0x58
 8001bc8:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <HAL_InitTick+0xa0>)
 8001bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bcc:	f003 0310 	and.w	r3, r3, #16
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bd4:	f107 0210 	add.w	r2, r7, #16
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f003 fba4 	bl	800532c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001be4:	f003 fb76 	bl	80052d4 <HAL_RCC_GetPCLK1Freq>
 8001be8:	4603      	mov	r3, r0
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf0:	4a13      	ldr	r2, [pc, #76]	; (8001c40 <HAL_InitTick+0xa4>)
 8001bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf6:	0c9b      	lsrs	r3, r3, #18
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <HAL_InitTick+0xa8>)
 8001bfe:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <HAL_InitTick+0xac>)
 8001c00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <HAL_InitTick+0xa8>)
 8001c04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c08:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c0a:	4a0e      	ldr	r2, [pc, #56]	; (8001c44 <HAL_InitTick+0xa8>)
 8001c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <HAL_InitTick+0xa8>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_InitTick+0xa8>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001c1c:	4809      	ldr	r0, [pc, #36]	; (8001c44 <HAL_InitTick+0xa8>)
 8001c1e:	f003 ff0d 	bl	8005a3c <HAL_TIM_Base_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d104      	bne.n	8001c32 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001c28:	4806      	ldr	r0, [pc, #24]	; (8001c44 <HAL_InitTick+0xa8>)
 8001c2a:	f003 ff69 	bl	8005b00 <HAL_TIM_Base_Start_IT>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	e000      	b.n	8001c34 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3730      	adds	r7, #48	; 0x30
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	431bde83 	.word	0x431bde83
 8001c44:	200086d0 	.word	0x200086d0
 8001c48:	40001000 	.word	0x40001000

08001c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <NMI_Handler+0x4>

08001c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c56:	e7fe      	b.n	8001c56 <HardFault_Handler+0x4>

08001c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <MemManage_Handler+0x4>

08001c5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c62:	e7fe      	b.n	8001c62 <BusFault_Handler+0x4>

08001c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <UsageFault_Handler+0x4>

08001c6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c7c:	4802      	ldr	r0, [pc, #8]	; (8001c88 <DMA1_Channel6_IRQHandler+0x10>)
 8001c7e:	f001 fd09 	bl	8003694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20008444 	.word	0x20008444

08001c8c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001c90:	4802      	ldr	r0, [pc, #8]	; (8001c9c <DMA1_Channel7_IRQHandler+0x10>)
 8001c92:	f001 fcff 	bl	8003694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	2000858c 	.word	0x2000858c

08001ca0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <CAN1_TX_IRQHandler+0x10>)
 8001ca6:	f001 f922 	bl	8002eee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200086a8 	.word	0x200086a8

08001cb4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001cb8:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <CAN1_RX0_IRQHandler+0x10>)
 8001cba:	f001 f918 	bl	8002eee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200086a8 	.word	0x200086a8

08001cc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ccc:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <TIM6_DAC_IRQHandler+0x10>)
 8001cce:	f003 ffc2 	bl	8005c56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	200086d0 	.word	0x200086d0

08001cdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
	return 1;
 8001ce0:	2301      	movs	r3, #1
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <_kill>:

int _kill(int pid, int sig)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cf6:	f007 fed9 	bl	8009aac <__errno>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2216      	movs	r2, #22
 8001cfe:	601a      	str	r2, [r3, #0]
	return -1;
 8001d00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <_exit>:

void _exit (int status)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d14:	f04f 31ff 	mov.w	r1, #4294967295
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff ffe7 	bl	8001cec <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d1e:	e7fe      	b.n	8001d1e <_exit+0x12>

08001d20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	e00a      	b.n	8001d48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d32:	f3af 8000 	nop.w
 8001d36:	4601      	mov	r1, r0
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	60ba      	str	r2, [r7, #8]
 8001d3e:	b2ca      	uxtb	r2, r1
 8001d40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	3301      	adds	r3, #1
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	dbf0      	blt.n	8001d32 <_read+0x12>
	}

return len;
 8001d50:	687b      	ldr	r3, [r7, #4]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	e009      	b.n	8001d80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	60ba      	str	r2, [r7, #8]
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	dbf1      	blt.n	8001d6c <_write+0x12>
	}
	return len;
 8001d88:	687b      	ldr	r3, [r7, #4]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <_close>:

int _close(int file)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
	return -1;
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dba:	605a      	str	r2, [r3, #4]
	return 0;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <_isatty>:

int _isatty(int file)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
	return 1;
 8001dd2:	2301      	movs	r3, #1
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
	return 0;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e04:	4a14      	ldr	r2, [pc, #80]	; (8001e58 <_sbrk+0x5c>)
 8001e06:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <_sbrk+0x60>)
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e10:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <_sbrk+0x64>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d102      	bne.n	8001e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e18:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <_sbrk+0x64>)
 8001e1a:	4a12      	ldr	r2, [pc, #72]	; (8001e64 <_sbrk+0x68>)
 8001e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <_sbrk+0x64>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d207      	bcs.n	8001e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e2c:	f007 fe3e 	bl	8009aac <__errno>
 8001e30:	4603      	mov	r3, r0
 8001e32:	220c      	movs	r2, #12
 8001e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3a:	e009      	b.n	8001e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <_sbrk+0x64>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e42:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <_sbrk+0x64>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	4a05      	ldr	r2, [pc, #20]	; (8001e60 <_sbrk+0x64>)
 8001e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20010000 	.word	0x20010000
 8001e5c:	00000400 	.word	0x00000400
 8001e60:	20000200 	.word	0x20000200
 8001e64:	20008770 	.word	0x20008770

08001e68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e6c:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <SystemInit+0x5c>)
 8001e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e72:	4a14      	ldr	r2, [pc, #80]	; (8001ec4 <SystemInit+0x5c>)
 8001e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <SystemInit+0x60>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a11      	ldr	r2, [pc, #68]	; (8001ec8 <SystemInit+0x60>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <SystemInit+0x60>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <SystemInit+0x60>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a0d      	ldr	r2, [pc, #52]	; (8001ec8 <SystemInit+0x60>)
 8001e94:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001e98:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001e9c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <SystemInit+0x60>)
 8001ea0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ea4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <SystemInit+0x60>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a07      	ldr	r2, [pc, #28]	; (8001ec8 <SystemInit+0x60>)
 8001eac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001eb2:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <SystemInit+0x60>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	619a      	str	r2, [r3, #24]
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000ed00 	.word	0xe000ed00
 8001ec8:	40021000 	.word	0x40021000

08001ecc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ecc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ed0:	f7ff ffca 	bl	8001e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ed4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ed6:	e003      	b.n	8001ee0 <LoopCopyDataInit>

08001ed8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001eda:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001edc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001ede:	3104      	adds	r1, #4

08001ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ee0:	480a      	ldr	r0, [pc, #40]	; (8001f0c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ee4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ee6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ee8:	d3f6      	bcc.n	8001ed8 <CopyDataInit>
	ldr	r2, =_sbss
 8001eea:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001eec:	e002      	b.n	8001ef4 <LoopFillZerobss>

08001eee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001eee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ef0:	f842 3b04 	str.w	r3, [r2], #4

08001ef4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ef4:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <LoopForever+0x16>)
	cmp	r2, r3
 8001ef6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ef8:	d3f9      	bcc.n	8001eee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001efa:	f007 fddd 	bl	8009ab8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001efe:	f7ff f809 	bl	8000f14 <main>

08001f02 <LoopForever>:

LoopForever:
    b LoopForever
 8001f02:	e7fe      	b.n	8001f02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f04:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001f08:	0800cd5c 	.word	0x0800cd5c
	ldr	r0, =_sdata
 8001f0c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001f10:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 8001f14:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 8001f18:	20008770 	.word	0x20008770

08001f1c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f1c:	e7fe      	b.n	8001f1c <ADC1_IRQHandler>

08001f1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f28:	2003      	movs	r0, #3
 8001f2a:	f001 fac6 	bl	80034ba <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f7ff fe34 	bl	8001b9c <HAL_InitTick>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d002      	beq.n	8001f40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	71fb      	strb	r3, [r7, #7]
 8001f3e:	e001      	b.n	8001f44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f40:	f7ff fbee 	bl	8001720 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f44:	79fb      	ldrb	r3, [r7, #7]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_IncTick+0x20>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_IncTick+0x24>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4413      	add	r3, r2
 8001f60:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <HAL_IncTick+0x24>)
 8001f62:	6013      	str	r3, [r2, #0]
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000008 	.word	0x20000008
 8001f74:	2000871c 	.word	0x2000871c

08001f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <HAL_GetTick+0x14>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	2000871c 	.word	0x2000871c

08001f90 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	609a      	str	r2, [r3, #8]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
 8002004:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	3360      	adds	r3, #96	; 0x60
 800200a:	461a      	mov	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <LL_ADC_SetOffset+0x44>)
 800201a:	4013      	ands	r3, r2
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	4313      	orrs	r3, r2
 8002028:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002030:	bf00      	nop
 8002032:	371c      	adds	r7, #28
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	03fff000 	.word	0x03fff000

08002040 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3360      	adds	r3, #96	; 0x60
 800204e:	461a      	mov	r2, r3
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002060:	4618      	mov	r0, r3
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800206c:	b480      	push	{r7}
 800206e:	b087      	sub	sp, #28
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	3360      	adds	r3, #96	; 0x60
 800207c:	461a      	mov	r2, r3
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	431a      	orrs	r2, r3
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002096:	bf00      	nop
 8002098:	371c      	adds	r7, #28
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b087      	sub	sp, #28
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	60f8      	str	r0, [r7, #12]
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	3330      	adds	r3, #48	; 0x30
 80020b2:	461a      	mov	r2, r3
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	4413      	add	r3, r2
 80020c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	f003 031f 	and.w	r3, r3, #31
 80020cc:	211f      	movs	r1, #31
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	401a      	ands	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	0e9b      	lsrs	r3, r3, #26
 80020da:	f003 011f 	and.w	r1, r3, #31
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	f003 031f 	and.w	r3, r3, #31
 80020e4:	fa01 f303 	lsl.w	r3, r1, r3
 80020e8:	431a      	orrs	r2, r3
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020ee:	bf00      	nop
 80020f0:	371c      	adds	r7, #28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b087      	sub	sp, #28
 80020fe:	af00      	add	r7, sp, #0
 8002100:	60f8      	str	r0, [r7, #12]
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	3314      	adds	r3, #20
 800210a:	461a      	mov	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	0e5b      	lsrs	r3, r3, #25
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	4413      	add	r3, r2
 8002118:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	0d1b      	lsrs	r3, r3, #20
 8002122:	f003 031f 	and.w	r3, r3, #31
 8002126:	2107      	movs	r1, #7
 8002128:	fa01 f303 	lsl.w	r3, r1, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	401a      	ands	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	0d1b      	lsrs	r3, r3, #20
 8002134:	f003 031f 	and.w	r3, r3, #31
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	fa01 f303 	lsl.w	r3, r1, r3
 800213e:	431a      	orrs	r2, r3
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002144:	bf00      	nop
 8002146:	371c      	adds	r7, #28
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002168:	43db      	mvns	r3, r3
 800216a:	401a      	ands	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f003 0318 	and.w	r3, r3, #24
 8002172:	4908      	ldr	r1, [pc, #32]	; (8002194 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002174:	40d9      	lsrs	r1, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	400b      	ands	r3, r1
 800217a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800217e:	431a      	orrs	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	0007ffff 	.word	0x0007ffff

08002198 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80021a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6093      	str	r3, [r2, #8]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021d0:	d101      	bne.n	80021d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80021f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002220:	d101      	bne.n	8002226 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <LL_ADC_IsEnabled+0x18>
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <LL_ADC_IsEnabled+0x1a>
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	2b04      	cmp	r3, #4
 800226c:	d101      	bne.n	8002272 <LL_ADC_REG_IsConversionOngoing+0x18>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b08      	cmp	r3, #8
 8002292:	d101      	bne.n	8002298 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e12c      	b.n	800251c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d109      	bne.n	80022e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff fa4d 	bl	8001770 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff67 	bl	80021bc <LL_ADC_IsDeepPowerDownEnabled>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d004      	beq.n	80022fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff4d 	bl	8002198 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff ff82 	bl	800220c <LL_ADC_IsInternalRegulatorEnabled>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d115      	bne.n	800233a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff ff66 	bl	80021e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002318:	4b82      	ldr	r3, [pc, #520]	; (8002524 <HAL_ADC_Init+0x27c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	099b      	lsrs	r3, r3, #6
 800231e:	4a82      	ldr	r2, [pc, #520]	; (8002528 <HAL_ADC_Init+0x280>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	099b      	lsrs	r3, r3, #6
 8002326:	3301      	adds	r3, #1
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800232c:	e002      	b.n	8002334 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	3b01      	subs	r3, #1
 8002332:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f9      	bne.n	800232e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff ff64 	bl	800220c <LL_ADC_IsInternalRegulatorEnabled>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10d      	bne.n	8002366 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234e:	f043 0210 	orr.w	r2, r3, #16
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235a:	f043 0201 	orr.w	r2, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff ff75 	bl	800225a <LL_ADC_REG_IsConversionOngoing>
 8002370:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	2b00      	cmp	r3, #0
 800237c:	f040 80c5 	bne.w	800250a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	2b00      	cmp	r3, #0
 8002384:	f040 80c1 	bne.w	800250a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002390:	f043 0202 	orr.w	r2, r3, #2
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff49 	bl	8002234 <LL_ADC_IsEnabled>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10b      	bne.n	80023c0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023a8:	4860      	ldr	r0, [pc, #384]	; (800252c <HAL_ADC_Init+0x284>)
 80023aa:	f7ff ff43 	bl	8002234 <LL_ADC_IsEnabled>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d105      	bne.n	80023c0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	4619      	mov	r1, r3
 80023ba:	485d      	ldr	r0, [pc, #372]	; (8002530 <HAL_ADC_Init+0x288>)
 80023bc:	f7ff fde8 	bl	8001f90 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	7e5b      	ldrb	r3, [r3, #25]
 80023c4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023ca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80023d0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80023d6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023de:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d106      	bne.n	80023fc <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	3b01      	subs	r3, #1
 80023f4:	045b      	lsls	r3, r3, #17
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002400:	2b00      	cmp	r3, #0
 8002402:	d009      	beq.n	8002418 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	4b45      	ldr	r3, [pc, #276]	; (8002534 <HAL_ADC_Init+0x28c>)
 8002420:	4013      	ands	r3, r2
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	69b9      	ldr	r1, [r7, #24]
 8002428:	430b      	orrs	r3, r1
 800242a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff12 	bl	800225a <LL_ADC_REG_IsConversionOngoing>
 8002436:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff1f 	bl	8002280 <LL_ADC_INJ_IsConversionOngoing>
 8002442:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d13d      	bne.n	80024c6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d13a      	bne.n	80024c6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002454:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800245c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800246c:	f023 0302 	bic.w	r3, r3, #2
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	69b9      	ldr	r1, [r7, #24]
 8002476:	430b      	orrs	r3, r1
 8002478:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002480:	2b01      	cmp	r3, #1
 8002482:	d118      	bne.n	80024b6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800248e:	f023 0304 	bic.w	r3, r3, #4
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800249a:	4311      	orrs	r1, r2
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80024a0:	4311      	orrs	r1, r2
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024a6:	430a      	orrs	r2, r1
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	611a      	str	r2, [r3, #16]
 80024b4:	e007      	b.n	80024c6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0201 	bic.w	r2, r2, #1
 80024c4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d10c      	bne.n	80024e8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	f023 010f 	bic.w	r1, r3, #15
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	1e5a      	subs	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	631a      	str	r2, [r3, #48]	; 0x30
 80024e6:	e007      	b.n	80024f8 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 020f 	bic.w	r2, r2, #15
 80024f6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fc:	f023 0303 	bic.w	r3, r3, #3
 8002500:	f043 0201 	orr.w	r2, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	655a      	str	r2, [r3, #84]	; 0x54
 8002508:	e007      	b.n	800251a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250e:	f043 0210 	orr.w	r2, r3, #16
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800251a:	7ffb      	ldrb	r3, [r7, #31]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3720      	adds	r7, #32
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20000000 	.word	0x20000000
 8002528:	053e2d63 	.word	0x053e2d63
 800252c:	50040000 	.word	0x50040000
 8002530:	50040300 	.word	0x50040300
 8002534:	fff0c007 	.word	0xfff0c007

08002538 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b0b6      	sub	sp, #216	; 0xd8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002548:	2300      	movs	r3, #0
 800254a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_ADC_ConfigChannel+0x22>
 8002556:	2302      	movs	r3, #2
 8002558:	e3b9      	b.n	8002cce <HAL_ADC_ConfigChannel+0x796>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fe77 	bl	800225a <LL_ADC_REG_IsConversionOngoing>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	f040 839e 	bne.w	8002cb0 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b05      	cmp	r3, #5
 800257a:	d824      	bhi.n	80025c6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	3b02      	subs	r3, #2
 8002582:	2b03      	cmp	r3, #3
 8002584:	d81b      	bhi.n	80025be <HAL_ADC_ConfigChannel+0x86>
 8002586:	a201      	add	r2, pc, #4	; (adr r2, 800258c <HAL_ADC_ConfigChannel+0x54>)
 8002588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258c:	0800259d 	.word	0x0800259d
 8002590:	080025a5 	.word	0x080025a5
 8002594:	080025ad 	.word	0x080025ad
 8002598:	080025b5 	.word	0x080025b5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	220c      	movs	r2, #12
 80025a0:	605a      	str	r2, [r3, #4]
          break;
 80025a2:	e011      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	2212      	movs	r2, #18
 80025a8:	605a      	str	r2, [r3, #4]
          break;
 80025aa:	e00d      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	2218      	movs	r2, #24
 80025b0:	605a      	str	r2, [r3, #4]
          break;
 80025b2:	e009      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025ba:	605a      	str	r2, [r3, #4]
          break;
 80025bc:	e004      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2206      	movs	r2, #6
 80025c2:	605a      	str	r2, [r3, #4]
          break;
 80025c4:	e000      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80025c6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	6859      	ldr	r1, [r3, #4]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	f7ff fd64 	bl	80020a2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fe3b 	bl	800225a <LL_ADC_REG_IsConversionOngoing>
 80025e4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fe47 	bl	8002280 <LL_ADC_INJ_IsConversionOngoing>
 80025f2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f040 81a6 	bne.w	800294c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002600:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002604:	2b00      	cmp	r3, #0
 8002606:	f040 81a1 	bne.w	800294c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	6819      	ldr	r1, [r3, #0]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	461a      	mov	r2, r3
 8002618:	f7ff fd6f 	bl	80020fa <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	695a      	ldr	r2, [r3, #20]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	08db      	lsrs	r3, r3, #3
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	2b04      	cmp	r3, #4
 800263c:	d00a      	beq.n	8002654 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6919      	ldr	r1, [r3, #16]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800264e:	f7ff fcd3 	bl	8001ff8 <LL_ADC_SetOffset>
 8002652:	e17b      	b.n	800294c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2100      	movs	r1, #0
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fcf0 	bl	8002040 <LL_ADC_GetOffsetChannel>
 8002660:	4603      	mov	r3, r0
 8002662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10a      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x148>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2100      	movs	r1, #0
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fce5 	bl	8002040 <LL_ADC_GetOffsetChannel>
 8002676:	4603      	mov	r3, r0
 8002678:	0e9b      	lsrs	r3, r3, #26
 800267a:	f003 021f 	and.w	r2, r3, #31
 800267e:	e01e      	b.n	80026be <HAL_ADC_ConfigChannel+0x186>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2100      	movs	r1, #0
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fcda 	bl	8002040 <LL_ADC_GetOffsetChannel>
 800268c:	4603      	mov	r3, r0
 800268e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002696:	fa93 f3a3 	rbit	r3, r3
 800269a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800269e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80026a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80026ae:	2320      	movs	r3, #32
 80026b0:	e004      	b.n	80026bc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80026b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026b6:	fab3 f383 	clz	r3, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d105      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x19e>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	0e9b      	lsrs	r3, r3, #26
 80026d0:	f003 031f 	and.w	r3, r3, #31
 80026d4:	e018      	b.n	8002708 <HAL_ADC_ConfigChannel+0x1d0>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80026e2:	fa93 f3a3 	rbit	r3, r3
 80026e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80026ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80026f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80026fa:	2320      	movs	r3, #32
 80026fc:	e004      	b.n	8002708 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80026fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002702:	fab3 f383 	clz	r3, r3
 8002706:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002708:	429a      	cmp	r2, r3
 800270a:	d106      	bne.n	800271a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2200      	movs	r2, #0
 8002712:	2100      	movs	r1, #0
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fca9 	bl	800206c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2101      	movs	r1, #1
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fc8d 	bl	8002040 <LL_ADC_GetOffsetChannel>
 8002726:	4603      	mov	r3, r0
 8002728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10a      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x20e>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2101      	movs	r1, #1
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fc82 	bl	8002040 <LL_ADC_GetOffsetChannel>
 800273c:	4603      	mov	r3, r0
 800273e:	0e9b      	lsrs	r3, r3, #26
 8002740:	f003 021f 	and.w	r2, r3, #31
 8002744:	e01e      	b.n	8002784 <HAL_ADC_ConfigChannel+0x24c>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2101      	movs	r1, #1
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff fc77 	bl	8002040 <LL_ADC_GetOffsetChannel>
 8002752:	4603      	mov	r3, r0
 8002754:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002758:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800275c:	fa93 f3a3 	rbit	r3, r3
 8002760:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002764:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002768:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800276c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002774:	2320      	movs	r3, #32
 8002776:	e004      	b.n	8002782 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002778:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800277c:	fab3 f383 	clz	r3, r3
 8002780:	b2db      	uxtb	r3, r3
 8002782:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278c:	2b00      	cmp	r3, #0
 800278e:	d105      	bne.n	800279c <HAL_ADC_ConfigChannel+0x264>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	0e9b      	lsrs	r3, r3, #26
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	e018      	b.n	80027ce <HAL_ADC_ConfigChannel+0x296>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027a8:	fa93 f3a3 	rbit	r3, r3
 80027ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80027b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80027b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80027c0:	2320      	movs	r3, #32
 80027c2:	e004      	b.n	80027ce <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80027c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027c8:	fab3 f383 	clz	r3, r3
 80027cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d106      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2200      	movs	r2, #0
 80027d8:	2101      	movs	r1, #1
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff fc46 	bl	800206c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2102      	movs	r1, #2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fc2a 	bl	8002040 <LL_ADC_GetOffsetChannel>
 80027ec:	4603      	mov	r3, r0
 80027ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10a      	bne.n	800280c <HAL_ADC_ConfigChannel+0x2d4>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2102      	movs	r1, #2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fc1f 	bl	8002040 <LL_ADC_GetOffsetChannel>
 8002802:	4603      	mov	r3, r0
 8002804:	0e9b      	lsrs	r3, r3, #26
 8002806:	f003 021f 	and.w	r2, r3, #31
 800280a:	e01e      	b.n	800284a <HAL_ADC_ConfigChannel+0x312>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2102      	movs	r1, #2
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff fc14 	bl	8002040 <LL_ADC_GetOffsetChannel>
 8002818:	4603      	mov	r3, r0
 800281a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002822:	fa93 f3a3 	rbit	r3, r3
 8002826:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800282a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800282e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002832:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800283a:	2320      	movs	r3, #32
 800283c:	e004      	b.n	8002848 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800283e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002842:	fab3 f383 	clz	r3, r3
 8002846:	b2db      	uxtb	r3, r3
 8002848:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002852:	2b00      	cmp	r3, #0
 8002854:	d105      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x32a>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	0e9b      	lsrs	r3, r3, #26
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	e016      	b.n	8002890 <HAL_ADC_ConfigChannel+0x358>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800286e:	fa93 f3a3 	rbit	r3, r3
 8002872:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002874:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002876:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800287a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002882:	2320      	movs	r3, #32
 8002884:	e004      	b.n	8002890 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002886:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800288a:	fab3 f383 	clz	r3, r3
 800288e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002890:	429a      	cmp	r2, r3
 8002892:	d106      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2200      	movs	r2, #0
 800289a:	2102      	movs	r1, #2
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fbe5 	bl	800206c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2103      	movs	r1, #3
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff fbc9 	bl	8002040 <LL_ADC_GetOffsetChannel>
 80028ae:	4603      	mov	r3, r0
 80028b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10a      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x396>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2103      	movs	r1, #3
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff fbbe 	bl	8002040 <LL_ADC_GetOffsetChannel>
 80028c4:	4603      	mov	r3, r0
 80028c6:	0e9b      	lsrs	r3, r3, #26
 80028c8:	f003 021f 	and.w	r2, r3, #31
 80028cc:	e017      	b.n	80028fe <HAL_ADC_ConfigChannel+0x3c6>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2103      	movs	r1, #3
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff fbb3 	bl	8002040 <LL_ADC_GetOffsetChannel>
 80028da:	4603      	mov	r3, r0
 80028dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80028e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028e8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80028ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80028f0:	2320      	movs	r3, #32
 80028f2:	e003      	b.n	80028fc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80028f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002906:	2b00      	cmp	r3, #0
 8002908:	d105      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x3de>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	0e9b      	lsrs	r3, r3, #26
 8002910:	f003 031f 	and.w	r3, r3, #31
 8002914:	e011      	b.n	800293a <HAL_ADC_ConfigChannel+0x402>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002924:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002926:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800292e:	2320      	movs	r3, #32
 8002930:	e003      	b.n	800293a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002934:	fab3 f383 	clz	r3, r3
 8002938:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800293a:	429a      	cmp	r2, r3
 800293c:	d106      	bne.n	800294c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2200      	movs	r2, #0
 8002944:	2103      	movs	r1, #3
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff fb90 	bl	800206c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff fc6f 	bl	8002234 <LL_ADC_IsEnabled>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	f040 813f 	bne.w	8002bdc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6818      	ldr	r0, [r3, #0]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	6819      	ldr	r1, [r3, #0]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	461a      	mov	r2, r3
 800296c:	f7ff fbf0 	bl	8002150 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4a8e      	ldr	r2, [pc, #568]	; (8002bb0 <HAL_ADC_ConfigChannel+0x678>)
 8002976:	4293      	cmp	r3, r2
 8002978:	f040 8130 	bne.w	8002bdc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10b      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x46c>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	0e9b      	lsrs	r3, r3, #26
 8002992:	3301      	adds	r3, #1
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	2b09      	cmp	r3, #9
 800299a:	bf94      	ite	ls
 800299c:	2301      	movls	r3, #1
 800299e:	2300      	movhi	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	e019      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x4a0>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ac:	fa93 f3a3 	rbit	r3, r3
 80029b0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80029b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029b4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80029b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80029bc:	2320      	movs	r3, #32
 80029be:	e003      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80029c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	3301      	adds	r3, #1
 80029ca:	f003 031f 	and.w	r3, r3, #31
 80029ce:	2b09      	cmp	r3, #9
 80029d0:	bf94      	ite	ls
 80029d2:	2301      	movls	r3, #1
 80029d4:	2300      	movhi	r3, #0
 80029d6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d079      	beq.n	8002ad0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d107      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x4c0>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	0e9b      	lsrs	r3, r3, #26
 80029ee:	3301      	adds	r3, #1
 80029f0:	069b      	lsls	r3, r3, #26
 80029f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029f6:	e015      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x4ec>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a00:	fa93 f3a3 	rbit	r3, r3
 8002a04:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a08:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002a10:	2320      	movs	r3, #32
 8002a12:	e003      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	069b      	lsls	r3, r3, #26
 8002a20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d109      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x50c>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	0e9b      	lsrs	r3, r3, #26
 8002a36:	3301      	adds	r3, #1
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a42:	e017      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x53c>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a4c:	fa93 f3a3 	rbit	r3, r3
 8002a50:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a54:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002a5c:	2320      	movs	r3, #32
 8002a5e:	e003      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a62:	fab3 f383 	clz	r3, r3
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	3301      	adds	r3, #1
 8002a6a:	f003 031f 	and.w	r3, r3, #31
 8002a6e:	2101      	movs	r1, #1
 8002a70:	fa01 f303 	lsl.w	r3, r1, r3
 8002a74:	ea42 0103 	orr.w	r1, r2, r3
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10a      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x562>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	0e9b      	lsrs	r3, r3, #26
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	f003 021f 	and.w	r2, r3, #31
 8002a90:	4613      	mov	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	051b      	lsls	r3, r3, #20
 8002a98:	e018      	b.n	8002acc <HAL_ADC_ConfigChannel+0x594>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa2:	fa93 f3a3 	rbit	r3, r3
 8002aa6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002ab2:	2320      	movs	r3, #32
 8002ab4:	e003      	b.n	8002abe <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ab8:	fab3 f383 	clz	r3, r3
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	f003 021f 	and.w	r2, r3, #31
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	4413      	add	r3, r2
 8002aca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002acc:	430b      	orrs	r3, r1
 8002ace:	e080      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d107      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x5b4>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	0e9b      	lsrs	r3, r3, #26
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	069b      	lsls	r3, r3, #26
 8002ae6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aea:	e015      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x5e0>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af4:	fa93 f3a3 	rbit	r3, r3
 8002af8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002b04:	2320      	movs	r3, #32
 8002b06:	e003      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0a:	fab3 f383 	clz	r3, r3
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	3301      	adds	r3, #1
 8002b12:	069b      	lsls	r3, r3, #26
 8002b14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d109      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x600>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	0e9b      	lsrs	r3, r3, #26
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	f003 031f 	and.w	r3, r3, #31
 8002b30:	2101      	movs	r1, #1
 8002b32:	fa01 f303 	lsl.w	r3, r1, r3
 8002b36:	e017      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x630>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	fa93 f3a3 	rbit	r3, r3
 8002b44:	61fb      	str	r3, [r7, #28]
  return result;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002b50:	2320      	movs	r3, #32
 8002b52:	e003      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	fab3 f383 	clz	r3, r3
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	f003 031f 	and.w	r3, r3, #31
 8002b62:	2101      	movs	r1, #1
 8002b64:	fa01 f303 	lsl.w	r3, r1, r3
 8002b68:	ea42 0103 	orr.w	r1, r2, r3
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10d      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x65c>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	0e9b      	lsrs	r3, r3, #26
 8002b7e:	3301      	adds	r3, #1
 8002b80:	f003 021f 	and.w	r2, r3, #31
 8002b84:	4613      	mov	r3, r2
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	4413      	add	r3, r2
 8002b8a:	3b1e      	subs	r3, #30
 8002b8c:	051b      	lsls	r3, r3, #20
 8002b8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b92:	e01d      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x698>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	fa93 f3a3 	rbit	r3, r3
 8002ba0:	613b      	str	r3, [r7, #16]
  return result;
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d103      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002bac:	2320      	movs	r3, #32
 8002bae:	e005      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x684>
 8002bb0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	f003 021f 	and.w	r2, r3, #31
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3b1e      	subs	r3, #30
 8002bca:	051b      	lsls	r3, r3, #20
 8002bcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	6892      	ldr	r2, [r2, #8]
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	f7ff fa8f 	bl	80020fa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4b3d      	ldr	r3, [pc, #244]	; (8002cd8 <HAL_ADC_ConfigChannel+0x7a0>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d06c      	beq.n	8002cc2 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002be8:	483c      	ldr	r0, [pc, #240]	; (8002cdc <HAL_ADC_ConfigChannel+0x7a4>)
 8002bea:	f7ff f9f7 	bl	8001fdc <LL_ADC_GetCommonPathInternalCh>
 8002bee:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a3a      	ldr	r2, [pc, #232]	; (8002ce0 <HAL_ADC_ConfigChannel+0x7a8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d127      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d121      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a35      	ldr	r2, [pc, #212]	; (8002ce4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d157      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	482f      	ldr	r0, [pc, #188]	; (8002cdc <HAL_ADC_ConfigChannel+0x7a4>)
 8002c1e:	f7ff f9ca 	bl	8001fb6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c22:	4b31      	ldr	r3, [pc, #196]	; (8002ce8 <HAL_ADC_ConfigChannel+0x7b0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	099b      	lsrs	r3, r3, #6
 8002c28:	4a30      	ldr	r2, [pc, #192]	; (8002cec <HAL_ADC_ConfigChannel+0x7b4>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	099b      	lsrs	r3, r3, #6
 8002c30:	1c5a      	adds	r2, r3, #1
 8002c32:	4613      	mov	r3, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c3c:	e002      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	3b01      	subs	r3, #1
 8002c42:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f9      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c4a:	e03a      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a27      	ldr	r2, [pc, #156]	; (8002cf0 <HAL_ADC_ConfigChannel+0x7b8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d113      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x746>
 8002c56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10d      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a1f      	ldr	r2, [pc, #124]	; (8002ce4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d12a      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c74:	4619      	mov	r1, r3
 8002c76:	4819      	ldr	r0, [pc, #100]	; (8002cdc <HAL_ADC_ConfigChannel+0x7a4>)
 8002c78:	f7ff f99d 	bl	8001fb6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c7c:	e021      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a1c      	ldr	r2, [pc, #112]	; (8002cf4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d11c      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d116      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a12      	ldr	r2, [pc, #72]	; (8002ce4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d111      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ca2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	480c      	ldr	r0, [pc, #48]	; (8002cdc <HAL_ADC_ConfigChannel+0x7a4>)
 8002caa:	f7ff f984 	bl	8001fb6 <LL_ADC_SetCommonPathInternalCh>
 8002cae:	e008      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb4:	f043 0220 	orr.w	r2, r3, #32
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cca:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	37d8      	adds	r7, #216	; 0xd8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	80080000 	.word	0x80080000
 8002cdc:	50040300 	.word	0x50040300
 8002ce0:	c7520000 	.word	0xc7520000
 8002ce4:	50040000 	.word	0x50040000
 8002ce8:	20000000 	.word	0x20000000
 8002cec:	053e2d63 	.word	0x053e2d63
 8002cf0:	cb840000 	.word	0xcb840000
 8002cf4:	80000001 	.word	0x80000001

08002cf8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e0ed      	b.n	8002ee6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d102      	bne.n	8002d1c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7fe fd68 	bl	80017ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0202 	bic.w	r2, r2, #2
 8002d2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d2c:	f7ff f924 	bl	8001f78 <HAL_GetTick>
 8002d30:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d32:	e012      	b.n	8002d5a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d34:	f7ff f920 	bl	8001f78 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b0a      	cmp	r3, #10
 8002d40:	d90b      	bls.n	8002d5a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2205      	movs	r2, #5
 8002d52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e0c5      	b.n	8002ee6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1e5      	bne.n	8002d34 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d78:	f7ff f8fe 	bl	8001f78 <HAL_GetTick>
 8002d7c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d7e:	e012      	b.n	8002da6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d80:	f7ff f8fa 	bl	8001f78 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b0a      	cmp	r3, #10
 8002d8c:	d90b      	bls.n	8002da6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2205      	movs	r2, #5
 8002d9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e09f      	b.n	8002ee6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0e5      	beq.n	8002d80 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	7e1b      	ldrb	r3, [r3, #24]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d108      	bne.n	8002dce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	e007      	b.n	8002dde <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ddc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	7e5b      	ldrb	r3, [r3, #25]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d108      	bne.n	8002df8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	e007      	b.n	8002e08 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	7e9b      	ldrb	r3, [r3, #26]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d108      	bne.n	8002e22 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0220 	orr.w	r2, r2, #32
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	e007      	b.n	8002e32 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0220 	bic.w	r2, r2, #32
 8002e30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	7edb      	ldrb	r3, [r3, #27]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d108      	bne.n	8002e4c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0210 	bic.w	r2, r2, #16
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	e007      	b.n	8002e5c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0210 	orr.w	r2, r2, #16
 8002e5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	7f1b      	ldrb	r3, [r3, #28]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d108      	bne.n	8002e76 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0208 	orr.w	r2, r2, #8
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	e007      	b.n	8002e86 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0208 	bic.w	r2, r2, #8
 8002e84:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	7f5b      	ldrb	r3, [r3, #29]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d108      	bne.n	8002ea0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f042 0204 	orr.w	r2, r2, #4
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	e007      	b.n	8002eb0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0204 	bic.w	r2, r2, #4
 8002eae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	ea42 0103 	orr.w	r1, r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	1e5a      	subs	r2, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b08a      	sub	sp, #40	; 0x28
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d07c      	beq.n	800302e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d023      	beq.n	8002f86 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2201      	movs	r2, #1
 8002f44:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f983 	bl	800325c <HAL_CAN_TxMailbox0CompleteCallback>
 8002f56:	e016      	b.n	8002f86 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d004      	beq.n	8002f6c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f68:	627b      	str	r3, [r7, #36]	; 0x24
 8002f6a:	e00c      	b.n	8002f86 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d004      	beq.n	8002f80 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f7e:	e002      	b.n	8002f86 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f989 	bl	8003298 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d024      	beq.n	8002fda <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f963 	bl	8003270 <HAL_CAN_TxMailbox1CompleteCallback>
 8002faa:	e016      	b.n	8002fda <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d004      	beq.n	8002fc0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fbe:	e00c      	b.n	8002fda <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d004      	beq.n	8002fd4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd2:	e002      	b.n	8002fda <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f969 	bl	80032ac <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d024      	beq.n	800302e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f943 	bl	8003284 <HAL_CAN_TxMailbox2CompleteCallback>
 8002ffe:	e016      	b.n	800302e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d004      	beq.n	8003014 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
 8003012:	e00c      	b.n	800302e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d004      	beq.n	8003028 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
 8003026:	e002      	b.n	800302e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f949 	bl	80032c0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00c      	beq.n	8003052 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f003 0310 	and.w	r3, r3, #16
 800303e:	2b00      	cmp	r3, #0
 8003040:	d007      	beq.n	8003052 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003048:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2210      	movs	r2, #16
 8003050:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00b      	beq.n	8003074 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d006      	beq.n	8003074 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2208      	movs	r2, #8
 800306c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f93a 	bl	80032e8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d009      	beq.n	8003092 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f921 	bl	80032d4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00c      	beq.n	80030b6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f003 0310 	and.w	r3, r3, #16
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d007      	beq.n	80030b6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2210      	movs	r2, #16
 80030b4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00b      	beq.n	80030d8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d006      	beq.n	80030d8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2208      	movs	r2, #8
 80030d0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f91c 	bl	8003310 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d002      	beq.n	80030f6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f903 	bl	80032fc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80030f6:	6a3b      	ldr	r3, [r7, #32]
 80030f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00b      	beq.n	8003118 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f003 0310 	and.w	r3, r3, #16
 8003106:	2b00      	cmp	r3, #0
 8003108:	d006      	beq.n	8003118 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2210      	movs	r2, #16
 8003110:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f906 	bl	8003324 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00b      	beq.n	800313a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	d006      	beq.n	800313a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2208      	movs	r2, #8
 8003132:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f8ff 	bl	8003338 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d07b      	beq.n	800323c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b00      	cmp	r3, #0
 800314c:	d072      	beq.n	8003234 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003154:	2b00      	cmp	r3, #0
 8003156:	d008      	beq.n	800316a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003170:	2b00      	cmp	r3, #0
 8003172:	d008      	beq.n	8003186 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	f043 0302 	orr.w	r3, r3, #2
 8003184:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	f043 0304 	orr.w	r3, r3, #4
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d043      	beq.n	8003234 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d03e      	beq.n	8003234 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031bc:	2b60      	cmp	r3, #96	; 0x60
 80031be:	d02b      	beq.n	8003218 <HAL_CAN_IRQHandler+0x32a>
 80031c0:	2b60      	cmp	r3, #96	; 0x60
 80031c2:	d82e      	bhi.n	8003222 <HAL_CAN_IRQHandler+0x334>
 80031c4:	2b50      	cmp	r3, #80	; 0x50
 80031c6:	d022      	beq.n	800320e <HAL_CAN_IRQHandler+0x320>
 80031c8:	2b50      	cmp	r3, #80	; 0x50
 80031ca:	d82a      	bhi.n	8003222 <HAL_CAN_IRQHandler+0x334>
 80031cc:	2b40      	cmp	r3, #64	; 0x40
 80031ce:	d019      	beq.n	8003204 <HAL_CAN_IRQHandler+0x316>
 80031d0:	2b40      	cmp	r3, #64	; 0x40
 80031d2:	d826      	bhi.n	8003222 <HAL_CAN_IRQHandler+0x334>
 80031d4:	2b30      	cmp	r3, #48	; 0x30
 80031d6:	d010      	beq.n	80031fa <HAL_CAN_IRQHandler+0x30c>
 80031d8:	2b30      	cmp	r3, #48	; 0x30
 80031da:	d822      	bhi.n	8003222 <HAL_CAN_IRQHandler+0x334>
 80031dc:	2b10      	cmp	r3, #16
 80031de:	d002      	beq.n	80031e6 <HAL_CAN_IRQHandler+0x2f8>
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d005      	beq.n	80031f0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80031e4:	e01d      	b.n	8003222 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	f043 0308 	orr.w	r3, r3, #8
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031ee:	e019      	b.n	8003224 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	f043 0310 	orr.w	r3, r3, #16
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031f8:	e014      	b.n	8003224 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	f043 0320 	orr.w	r3, r3, #32
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003202:	e00f      	b.n	8003224 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800320c:	e00a      	b.n	8003224 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003216:	e005      	b.n	8003224 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003220:	e000      	b.n	8003224 <HAL_CAN_IRQHandler+0x336>
            break;
 8003222:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003232:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2204      	movs	r2, #4
 800323a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	2b00      	cmp	r3, #0
 8003240:	d008      	beq.n	8003254 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	431a      	orrs	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f87c 	bl	800334c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003254:	bf00      	nop
 8003256:	3728      	adds	r7, #40	; 0x28
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003370:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800337c:	4013      	ands	r3, r2
 800337e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800338c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003392:	4a04      	ldr	r2, [pc, #16]	; (80033a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	60d3      	str	r3, [r2, #12]
}
 8003398:	bf00      	nop
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033ac:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <__NVIC_GetPriorityGrouping+0x18>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	0a1b      	lsrs	r3, r3, #8
 80033b2:	f003 0307 	and.w	r3, r3, #7
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	db0b      	blt.n	80033ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	f003 021f 	and.w	r2, r3, #31
 80033dc:	4907      	ldr	r1, [pc, #28]	; (80033fc <__NVIC_EnableIRQ+0x38>)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	2001      	movs	r0, #1
 80033e6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	e000e100 	.word	0xe000e100

08003400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	6039      	str	r1, [r7, #0]
 800340a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800340c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003410:	2b00      	cmp	r3, #0
 8003412:	db0a      	blt.n	800342a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	b2da      	uxtb	r2, r3
 8003418:	490c      	ldr	r1, [pc, #48]	; (800344c <__NVIC_SetPriority+0x4c>)
 800341a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341e:	0112      	lsls	r2, r2, #4
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	440b      	add	r3, r1
 8003424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003428:	e00a      	b.n	8003440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	4908      	ldr	r1, [pc, #32]	; (8003450 <__NVIC_SetPriority+0x50>)
 8003430:	79fb      	ldrb	r3, [r7, #7]
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	3b04      	subs	r3, #4
 8003438:	0112      	lsls	r2, r2, #4
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	440b      	add	r3, r1
 800343e:	761a      	strb	r2, [r3, #24]
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	e000e100 	.word	0xe000e100
 8003450:	e000ed00 	.word	0xe000ed00

08003454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003454:	b480      	push	{r7}
 8003456:	b089      	sub	sp, #36	; 0x24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f1c3 0307 	rsb	r3, r3, #7
 800346e:	2b04      	cmp	r3, #4
 8003470:	bf28      	it	cs
 8003472:	2304      	movcs	r3, #4
 8003474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	3304      	adds	r3, #4
 800347a:	2b06      	cmp	r3, #6
 800347c:	d902      	bls.n	8003484 <NVIC_EncodePriority+0x30>
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	3b03      	subs	r3, #3
 8003482:	e000      	b.n	8003486 <NVIC_EncodePriority+0x32>
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003488:	f04f 32ff 	mov.w	r2, #4294967295
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43da      	mvns	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	401a      	ands	r2, r3
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800349c:	f04f 31ff 	mov.w	r1, #4294967295
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	fa01 f303 	lsl.w	r3, r1, r3
 80034a6:	43d9      	mvns	r1, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ac:	4313      	orrs	r3, r2
         );
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3724      	adds	r7, #36	; 0x24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff ff4c 	bl	8003360 <__NVIC_SetPriorityGrouping>
}
 80034c8:	bf00      	nop
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
 80034dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034de:	2300      	movs	r3, #0
 80034e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034e2:	f7ff ff61 	bl	80033a8 <__NVIC_GetPriorityGrouping>
 80034e6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	68b9      	ldr	r1, [r7, #8]
 80034ec:	6978      	ldr	r0, [r7, #20]
 80034ee:	f7ff ffb1 	bl	8003454 <NVIC_EncodePriority>
 80034f2:	4602      	mov	r2, r0
 80034f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034f8:	4611      	mov	r1, r2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff ff80 	bl	8003400 <__NVIC_SetPriority>
}
 8003500:	bf00      	nop
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff ff54 	bl	80033c4 <__NVIC_EnableIRQ>
}
 800351c:	bf00      	nop
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e098      	b.n	8003668 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	4b4d      	ldr	r3, [pc, #308]	; (8003674 <HAL_DMA_Init+0x150>)
 800353e:	429a      	cmp	r2, r3
 8003540:	d80f      	bhi.n	8003562 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	4b4b      	ldr	r3, [pc, #300]	; (8003678 <HAL_DMA_Init+0x154>)
 800354a:	4413      	add	r3, r2
 800354c:	4a4b      	ldr	r2, [pc, #300]	; (800367c <HAL_DMA_Init+0x158>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	091b      	lsrs	r3, r3, #4
 8003554:	009a      	lsls	r2, r3, #2
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a48      	ldr	r2, [pc, #288]	; (8003680 <HAL_DMA_Init+0x15c>)
 800355e:	641a      	str	r2, [r3, #64]	; 0x40
 8003560:	e00e      	b.n	8003580 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	4b46      	ldr	r3, [pc, #280]	; (8003684 <HAL_DMA_Init+0x160>)
 800356a:	4413      	add	r3, r2
 800356c:	4a43      	ldr	r2, [pc, #268]	; (800367c <HAL_DMA_Init+0x158>)
 800356e:	fba2 2303 	umull	r2, r3, r2, r3
 8003572:	091b      	lsrs	r3, r3, #4
 8003574:	009a      	lsls	r2, r3, #2
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a42      	ldr	r2, [pc, #264]	; (8003688 <HAL_DMA_Init+0x164>)
 800357e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80035a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035da:	d039      	beq.n	8003650 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	4a27      	ldr	r2, [pc, #156]	; (8003680 <HAL_DMA_Init+0x15c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d11a      	bne.n	800361c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80035e6:	4b29      	ldr	r3, [pc, #164]	; (800368c <HAL_DMA_Init+0x168>)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	f003 031c 	and.w	r3, r3, #28
 80035f2:	210f      	movs	r1, #15
 80035f4:	fa01 f303 	lsl.w	r3, r1, r3
 80035f8:	43db      	mvns	r3, r3
 80035fa:	4924      	ldr	r1, [pc, #144]	; (800368c <HAL_DMA_Init+0x168>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003600:	4b22      	ldr	r3, [pc, #136]	; (800368c <HAL_DMA_Init+0x168>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6859      	ldr	r1, [r3, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360c:	f003 031c 	and.w	r3, r3, #28
 8003610:	fa01 f303 	lsl.w	r3, r1, r3
 8003614:	491d      	ldr	r1, [pc, #116]	; (800368c <HAL_DMA_Init+0x168>)
 8003616:	4313      	orrs	r3, r2
 8003618:	600b      	str	r3, [r1, #0]
 800361a:	e019      	b.n	8003650 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800361c:	4b1c      	ldr	r3, [pc, #112]	; (8003690 <HAL_DMA_Init+0x16c>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003624:	f003 031c 	and.w	r3, r3, #28
 8003628:	210f      	movs	r1, #15
 800362a:	fa01 f303 	lsl.w	r3, r1, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	4917      	ldr	r1, [pc, #92]	; (8003690 <HAL_DMA_Init+0x16c>)
 8003632:	4013      	ands	r3, r2
 8003634:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003636:	4b16      	ldr	r3, [pc, #88]	; (8003690 <HAL_DMA_Init+0x16c>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6859      	ldr	r1, [r3, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003642:	f003 031c 	and.w	r3, r3, #28
 8003646:	fa01 f303 	lsl.w	r3, r1, r3
 800364a:	4911      	ldr	r1, [pc, #68]	; (8003690 <HAL_DMA_Init+0x16c>)
 800364c:	4313      	orrs	r3, r2
 800364e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	40020407 	.word	0x40020407
 8003678:	bffdfff8 	.word	0xbffdfff8
 800367c:	cccccccd 	.word	0xcccccccd
 8003680:	40020000 	.word	0x40020000
 8003684:	bffdfbf8 	.word	0xbffdfbf8
 8003688:	40020400 	.word	0x40020400
 800368c:	400200a8 	.word	0x400200a8
 8003690:	400204a8 	.word	0x400204a8

08003694 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b0:	f003 031c 	and.w	r3, r3, #28
 80036b4:	2204      	movs	r2, #4
 80036b6:	409a      	lsls	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d026      	beq.n	800370e <HAL_DMA_IRQHandler+0x7a>
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d021      	beq.n	800370e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0320 	and.w	r3, r3, #32
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d107      	bne.n	80036e8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0204 	bic.w	r2, r2, #4
 80036e6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ec:	f003 021c 	and.w	r2, r3, #28
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	2104      	movs	r1, #4
 80036f6:	fa01 f202 	lsl.w	r2, r1, r2
 80036fa:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	2b00      	cmp	r3, #0
 8003702:	d071      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800370c:	e06c      	b.n	80037e8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	f003 031c 	and.w	r3, r3, #28
 8003716:	2202      	movs	r2, #2
 8003718:	409a      	lsls	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4013      	ands	r3, r2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d02e      	beq.n	8003780 <HAL_DMA_IRQHandler+0xec>
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d029      	beq.n	8003780 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0320 	and.w	r3, r3, #32
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10b      	bne.n	8003752 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 020a 	bic.w	r2, r2, #10
 8003748:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	f003 021c 	and.w	r2, r3, #28
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	2102      	movs	r1, #2
 8003760:	fa01 f202 	lsl.w	r2, r1, r2
 8003764:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003772:	2b00      	cmp	r3, #0
 8003774:	d038      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800377e:	e033      	b.n	80037e8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003784:	f003 031c 	and.w	r3, r3, #28
 8003788:	2208      	movs	r2, #8
 800378a:	409a      	lsls	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4013      	ands	r3, r2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d02a      	beq.n	80037ea <HAL_DMA_IRQHandler+0x156>
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d025      	beq.n	80037ea <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 020e 	bic.w	r2, r2, #14
 80037ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	f003 021c 	and.w	r2, r3, #28
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	2101      	movs	r1, #1
 80037bc:	fa01 f202 	lsl.w	r2, r1, r2
 80037c0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d004      	beq.n	80037ea <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
}
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037fe:	2300      	movs	r3, #0
 8003800:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003802:	e148      	b.n	8003a96 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	2101      	movs	r1, #1
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	fa01 f303 	lsl.w	r3, r1, r3
 8003810:	4013      	ands	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 813a 	beq.w	8003a90 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d00b      	beq.n	800383c <HAL_GPIO_Init+0x48>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2b02      	cmp	r3, #2
 800382a:	d007      	beq.n	800383c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003830:	2b11      	cmp	r3, #17
 8003832:	d003      	beq.n	800383c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b12      	cmp	r3, #18
 800383a:	d130      	bne.n	800389e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	2203      	movs	r2, #3
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43db      	mvns	r3, r3
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4013      	ands	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003872:	2201      	movs	r2, #1
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	43db      	mvns	r3, r3
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4013      	ands	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	091b      	lsrs	r3, r3, #4
 8003888:	f003 0201 	and.w	r2, r3, #1
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	2203      	movs	r2, #3
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	43db      	mvns	r3, r3
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	4013      	ands	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	689a      	ldr	r2, [r3, #8]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d003      	beq.n	80038de <HAL_GPIO_Init+0xea>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b12      	cmp	r3, #18
 80038dc:	d123      	bne.n	8003926 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	08da      	lsrs	r2, r3, #3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3208      	adds	r2, #8
 80038e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	220f      	movs	r2, #15
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	43db      	mvns	r3, r3
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4013      	ands	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	691a      	ldr	r2, [r3, #16]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	08da      	lsrs	r2, r3, #3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3208      	adds	r2, #8
 8003920:	6939      	ldr	r1, [r7, #16]
 8003922:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	2203      	movs	r2, #3
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43db      	mvns	r3, r3
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4013      	ands	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f003 0203 	and.w	r2, r3, #3
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 8094 	beq.w	8003a90 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003968:	4b52      	ldr	r3, [pc, #328]	; (8003ab4 <HAL_GPIO_Init+0x2c0>)
 800396a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800396c:	4a51      	ldr	r2, [pc, #324]	; (8003ab4 <HAL_GPIO_Init+0x2c0>)
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	6613      	str	r3, [r2, #96]	; 0x60
 8003974:	4b4f      	ldr	r3, [pc, #316]	; (8003ab4 <HAL_GPIO_Init+0x2c0>)
 8003976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	60bb      	str	r3, [r7, #8]
 800397e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003980:	4a4d      	ldr	r2, [pc, #308]	; (8003ab8 <HAL_GPIO_Init+0x2c4>)
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	089b      	lsrs	r3, r3, #2
 8003986:	3302      	adds	r3, #2
 8003988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800398c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f003 0303 	and.w	r3, r3, #3
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	220f      	movs	r2, #15
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	43db      	mvns	r3, r3
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4013      	ands	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80039aa:	d00d      	beq.n	80039c8 <HAL_GPIO_Init+0x1d4>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a43      	ldr	r2, [pc, #268]	; (8003abc <HAL_GPIO_Init+0x2c8>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d007      	beq.n	80039c4 <HAL_GPIO_Init+0x1d0>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a42      	ldr	r2, [pc, #264]	; (8003ac0 <HAL_GPIO_Init+0x2cc>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d101      	bne.n	80039c0 <HAL_GPIO_Init+0x1cc>
 80039bc:	2302      	movs	r3, #2
 80039be:	e004      	b.n	80039ca <HAL_GPIO_Init+0x1d6>
 80039c0:	2307      	movs	r3, #7
 80039c2:	e002      	b.n	80039ca <HAL_GPIO_Init+0x1d6>
 80039c4:	2301      	movs	r3, #1
 80039c6:	e000      	b.n	80039ca <HAL_GPIO_Init+0x1d6>
 80039c8:	2300      	movs	r3, #0
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	f002 0203 	and.w	r2, r2, #3
 80039d0:	0092      	lsls	r2, r2, #2
 80039d2:	4093      	lsls	r3, r2
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039da:	4937      	ldr	r1, [pc, #220]	; (8003ab8 <HAL_GPIO_Init+0x2c4>)
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	089b      	lsrs	r3, r3, #2
 80039e0:	3302      	adds	r3, #2
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80039e8:	4b36      	ldr	r3, [pc, #216]	; (8003ac4 <HAL_GPIO_Init+0x2d0>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	43db      	mvns	r3, r3
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4013      	ands	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a0c:	4a2d      	ldr	r2, [pc, #180]	; (8003ac4 <HAL_GPIO_Init+0x2d0>)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003a12:	4b2c      	ldr	r3, [pc, #176]	; (8003ac4 <HAL_GPIO_Init+0x2d0>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a36:	4a23      	ldr	r2, [pc, #140]	; (8003ac4 <HAL_GPIO_Init+0x2d0>)
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a3c:	4b21      	ldr	r3, [pc, #132]	; (8003ac4 <HAL_GPIO_Init+0x2d0>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	43db      	mvns	r3, r3
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a60:	4a18      	ldr	r2, [pc, #96]	; (8003ac4 <HAL_GPIO_Init+0x2d0>)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a66:	4b17      	ldr	r3, [pc, #92]	; (8003ac4 <HAL_GPIO_Init+0x2d0>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4013      	ands	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a8a:	4a0e      	ldr	r2, [pc, #56]	; (8003ac4 <HAL_GPIO_Init+0x2d0>)
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	3301      	adds	r3, #1
 8003a94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f47f aeaf 	bne.w	8003804 <HAL_GPIO_Init+0x10>
  }
}
 8003aa6:	bf00      	nop
 8003aa8:	bf00      	nop
 8003aaa:	371c      	adds	r7, #28
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	40010000 	.word	0x40010000
 8003abc:	48000400 	.word	0x48000400
 8003ac0:	48000800 	.word	0x48000800
 8003ac4:	40010400 	.word	0x40010400

08003ac8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e081      	b.n	8003bde <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d106      	bne.n	8003af4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7fd fed0 	bl	8001894 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2224      	movs	r2, #36	; 0x24
 8003af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0201 	bic.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d107      	bne.n	8003b42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689a      	ldr	r2, [r3, #8]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b3e:	609a      	str	r2, [r3, #8]
 8003b40:	e006      	b.n	8003b50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d104      	bne.n	8003b62 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6812      	ldr	r2, [r2, #0]
 8003b6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	ea42 0103 	orr.w	r1, r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	021a      	lsls	r2, r3, #8
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	69d9      	ldr	r1, [r3, #28]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1a      	ldr	r2, [r3, #32]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	607a      	str	r2, [r7, #4]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	817b      	strh	r3, [r7, #10]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	f040 80da 	bne.w	8003dbe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_I2C_Master_Transmit+0x30>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e0d3      	b.n	8003dc0 <HAL_I2C_Master_Transmit+0x1d8>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c20:	f7fe f9aa 	bl	8001f78 <HAL_GetTick>
 8003c24:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	2319      	movs	r3, #25
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 faed 	bl	8004212 <I2C_WaitOnFlagUntilTimeout>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e0be      	b.n	8003dc0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2221      	movs	r2, #33	; 0x21
 8003c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2210      	movs	r2, #16
 8003c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	893a      	ldrh	r2, [r7, #8]
 8003c62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2bff      	cmp	r3, #255	; 0xff
 8003c72:	d90e      	bls.n	8003c92 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	22ff      	movs	r2, #255	; 0xff
 8003c78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	8979      	ldrh	r1, [r7, #10]
 8003c82:	4b51      	ldr	r3, [pc, #324]	; (8003dc8 <HAL_I2C_Master_Transmit+0x1e0>)
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 fc50 	bl	8004530 <I2C_TransferConfig>
 8003c90:	e06c      	b.n	8003d6c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	8979      	ldrh	r1, [r7, #10]
 8003ca4:	4b48      	ldr	r3, [pc, #288]	; (8003dc8 <HAL_I2C_Master_Transmit+0x1e0>)
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 fc3f 	bl	8004530 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003cb2:	e05b      	b.n	8003d6c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	6a39      	ldr	r1, [r7, #32]
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 faea 	bl	8004292 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e07b      	b.n	8003dc0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	781a      	ldrb	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d034      	beq.n	8003d6c <HAL_I2C_Master_Transmit+0x184>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d130      	bne.n	8003d6c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	2200      	movs	r2, #0
 8003d12:	2180      	movs	r1, #128	; 0x80
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 fa7c 	bl	8004212 <I2C_WaitOnFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e04d      	b.n	8003dc0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	2bff      	cmp	r3, #255	; 0xff
 8003d2c:	d90e      	bls.n	8003d4c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	22ff      	movs	r2, #255	; 0xff
 8003d32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	8979      	ldrh	r1, [r7, #10]
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 fbf3 	bl	8004530 <I2C_TransferConfig>
 8003d4a:	e00f      	b.n	8003d6c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	8979      	ldrh	r1, [r7, #10]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 fbe2 	bl	8004530 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d19e      	bne.n	8003cb4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	6a39      	ldr	r1, [r7, #32]
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 fac9 	bl	8004312 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e01a      	b.n	8003dc0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6859      	ldr	r1, [r3, #4]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <HAL_I2C_Master_Transmit+0x1e4>)
 8003d9e:	400b      	ands	r3, r1
 8003da0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e000      	b.n	8003dc0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003dbe:	2302      	movs	r3, #2
  }
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	80002000 	.word	0x80002000
 8003dcc:	fe00e800 	.word	0xfe00e800

08003dd0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	607a      	str	r2, [r7, #4]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	460b      	mov	r3, r1
 8003dde:	817b      	strh	r3, [r7, #10]
 8003de0:	4613      	mov	r3, r2
 8003de2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b20      	cmp	r3, #32
 8003dee:	f040 80db 	bne.w	8003fa8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_I2C_Master_Receive+0x30>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e0d4      	b.n	8003faa <HAL_I2C_Master_Receive+0x1da>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e08:	f7fe f8b6 	bl	8001f78 <HAL_GetTick>
 8003e0c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	2319      	movs	r3, #25
 8003e14:	2201      	movs	r2, #1
 8003e16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f9f9 	bl	8004212 <I2C_WaitOnFlagUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e0bf      	b.n	8003faa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2222      	movs	r2, #34	; 0x22
 8003e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2210      	movs	r2, #16
 8003e36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	893a      	ldrh	r2, [r7, #8]
 8003e4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2bff      	cmp	r3, #255	; 0xff
 8003e5a:	d90e      	bls.n	8003e7a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	22ff      	movs	r2, #255	; 0xff
 8003e60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	8979      	ldrh	r1, [r7, #10]
 8003e6a:	4b52      	ldr	r3, [pc, #328]	; (8003fb4 <HAL_I2C_Master_Receive+0x1e4>)
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 fb5c 	bl	8004530 <I2C_TransferConfig>
 8003e78:	e06d      	b.n	8003f56 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	8979      	ldrh	r1, [r7, #10]
 8003e8c:	4b49      	ldr	r3, [pc, #292]	; (8003fb4 <HAL_I2C_Master_Receive+0x1e4>)
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 fb4b 	bl	8004530 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003e9a:	e05c      	b.n	8003f56 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	6a39      	ldr	r1, [r7, #32]
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 fa73 	bl	800438c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e07c      	b.n	8003faa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	1c5a      	adds	r2, r3, #1
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d034      	beq.n	8003f56 <HAL_I2C_Master_Receive+0x186>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d130      	bne.n	8003f56 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	2200      	movs	r2, #0
 8003efc:	2180      	movs	r1, #128	; 0x80
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 f987 	bl	8004212 <I2C_WaitOnFlagUntilTimeout>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e04d      	b.n	8003faa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	2bff      	cmp	r3, #255	; 0xff
 8003f16:	d90e      	bls.n	8003f36 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	22ff      	movs	r2, #255	; 0xff
 8003f1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	8979      	ldrh	r1, [r7, #10]
 8003f26:	2300      	movs	r3, #0
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 fafe 	bl	8004530 <I2C_TransferConfig>
 8003f34:	e00f      	b.n	8003f56 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	8979      	ldrh	r1, [r7, #10]
 8003f48:	2300      	movs	r3, #0
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 faed 	bl	8004530 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d19d      	bne.n	8003e9c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	6a39      	ldr	r1, [r7, #32]
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f9d4 	bl	8004312 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e01a      	b.n	8003faa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6859      	ldr	r1, [r3, #4]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	4b0c      	ldr	r3, [pc, #48]	; (8003fb8 <HAL_I2C_Master_Receive+0x1e8>)
 8003f88:	400b      	ands	r3, r1
 8003f8a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	e000      	b.n	8003faa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003fa8:	2302      	movs	r3, #2
  }
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	80002400 	.word	0x80002400
 8003fb8:	fe00e800 	.word	0xfe00e800

08003fbc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08a      	sub	sp, #40	; 0x28
 8003fc0:	af02      	add	r7, sp, #8
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	607a      	str	r2, [r7, #4]
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b20      	cmp	r3, #32
 8003fda:	f040 80f1 	bne.w	80041c0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fec:	d101      	bne.n	8003ff2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003fee:	2302      	movs	r3, #2
 8003ff0:	e0e7      	b.n	80041c2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d101      	bne.n	8004000 <HAL_I2C_IsDeviceReady+0x44>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e0e0      	b.n	80041c2 <HAL_I2C_IsDeviceReady+0x206>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2224      	movs	r2, #36	; 0x24
 800400c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d107      	bne.n	800402e <HAL_I2C_IsDeviceReady+0x72>
 800401e:	897b      	ldrh	r3, [r7, #10]
 8004020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004024:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004028:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800402c:	e004      	b.n	8004038 <HAL_I2C_IsDeviceReady+0x7c>
 800402e:	897b      	ldrh	r3, [r7, #10]
 8004030:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004034:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800403e:	f7fd ff9b 	bl	8001f78 <HAL_GetTick>
 8004042:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b20      	cmp	r3, #32
 8004050:	bf0c      	ite	eq
 8004052:	2301      	moveq	r3, #1
 8004054:	2300      	movne	r3, #0
 8004056:	b2db      	uxtb	r3, r3
 8004058:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	f003 0310 	and.w	r3, r3, #16
 8004064:	2b10      	cmp	r3, #16
 8004066:	bf0c      	ite	eq
 8004068:	2301      	moveq	r3, #1
 800406a:	2300      	movne	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004070:	e034      	b.n	80040dc <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004078:	d01a      	beq.n	80040b0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800407a:	f7fd ff7d 	bl	8001f78 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d302      	bcc.n	8004090 <HAL_I2C_IsDeviceReady+0xd4>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10f      	bne.n	80040b0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409c:	f043 0220 	orr.w	r2, r3, #32
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e088      	b.n	80041c2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b20      	cmp	r3, #32
 80040bc:	bf0c      	ite	eq
 80040be:	2301      	moveq	r3, #1
 80040c0:	2300      	movne	r3, #0
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	f003 0310 	and.w	r3, r3, #16
 80040d0:	2b10      	cmp	r3, #16
 80040d2:	bf0c      	ite	eq
 80040d4:	2301      	moveq	r3, #1
 80040d6:	2300      	movne	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80040dc:	7ffb      	ldrb	r3, [r7, #31]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d102      	bne.n	80040e8 <HAL_I2C_IsDeviceReady+0x12c>
 80040e2:	7fbb      	ldrb	r3, [r7, #30]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0c4      	beq.n	8004072 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	f003 0310 	and.w	r3, r3, #16
 80040f2:	2b10      	cmp	r3, #16
 80040f4:	d01a      	beq.n	800412c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2200      	movs	r2, #0
 80040fe:	2120      	movs	r1, #32
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 f886 	bl	8004212 <I2C_WaitOnFlagUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e058      	b.n	80041c2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2220      	movs	r2, #32
 8004116:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	e04a      	b.n	80041c2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2200      	movs	r2, #0
 8004134:	2120      	movs	r1, #32
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 f86b 	bl	8004212 <I2C_WaitOnFlagUntilTimeout>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e03d      	b.n	80041c2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2210      	movs	r2, #16
 800414c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2220      	movs	r2, #32
 8004154:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	429a      	cmp	r2, r3
 800415c:	d118      	bne.n	8004190 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800416c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2200      	movs	r2, #0
 8004176:	2120      	movs	r1, #32
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f84a 	bl	8004212 <I2C_WaitOnFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e01c      	b.n	80041c2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2220      	movs	r2, #32
 800418e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	3301      	adds	r3, #1
 8004194:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	429a      	cmp	r2, r3
 800419c:	f63f af3b 	bhi.w	8004016 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ac:	f043 0220 	orr.w	r2, r3, #32
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e000      	b.n	80041c2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80041c0:	2302      	movs	r3, #2
  }
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3720      	adds	r7, #32
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d103      	bne.n	80041e8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2200      	movs	r2, #0
 80041e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d007      	beq.n	8004206 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699a      	ldr	r2, [r3, #24]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f042 0201 	orr.w	r2, r2, #1
 8004204:	619a      	str	r2, [r3, #24]
  }
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b084      	sub	sp, #16
 8004216:	af00      	add	r7, sp, #0
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	603b      	str	r3, [r7, #0]
 800421e:	4613      	mov	r3, r2
 8004220:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004222:	e022      	b.n	800426a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422a:	d01e      	beq.n	800426a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422c:	f7fd fea4 	bl	8001f78 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d302      	bcc.n	8004242 <I2C_WaitOnFlagUntilTimeout+0x30>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d113      	bne.n	800426a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004246:	f043 0220 	orr.w	r2, r3, #32
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e00f      	b.n	800428a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	699a      	ldr	r2, [r3, #24]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	4013      	ands	r3, r2
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	429a      	cmp	r2, r3
 8004278:	bf0c      	ite	eq
 800427a:	2301      	moveq	r3, #1
 800427c:	2300      	movne	r3, #0
 800427e:	b2db      	uxtb	r3, r3
 8004280:	461a      	mov	r2, r3
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	429a      	cmp	r2, r3
 8004286:	d0cd      	beq.n	8004224 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b084      	sub	sp, #16
 8004296:	af00      	add	r7, sp, #0
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800429e:	e02c      	b.n	80042fa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	68b9      	ldr	r1, [r7, #8]
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 f8dd 	bl	8004464 <I2C_IsAcknowledgeFailed>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e02a      	b.n	800430a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ba:	d01e      	beq.n	80042fa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042bc:	f7fd fe5c 	bl	8001f78 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d302      	bcc.n	80042d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d113      	bne.n	80042fa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d6:	f043 0220 	orr.w	r2, r3, #32
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e007      	b.n	800430a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b02      	cmp	r3, #2
 8004306:	d1cb      	bne.n	80042a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b084      	sub	sp, #16
 8004316:	af00      	add	r7, sp, #0
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800431e:	e028      	b.n	8004372 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	68b9      	ldr	r1, [r7, #8]
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 f89d 	bl	8004464 <I2C_IsAcknowledgeFailed>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e026      	b.n	8004382 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004334:	f7fd fe20 	bl	8001f78 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	429a      	cmp	r2, r3
 8004342:	d302      	bcc.n	800434a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d113      	bne.n	8004372 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434e:	f043 0220 	orr.w	r2, r3, #32
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2220      	movs	r2, #32
 800435a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e007      	b.n	8004382 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	f003 0320 	and.w	r3, r3, #32
 800437c:	2b20      	cmp	r3, #32
 800437e:	d1cf      	bne.n	8004320 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004398:	e055      	b.n	8004446 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	68b9      	ldr	r1, [r7, #8]
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 f860 	bl	8004464 <I2C_IsAcknowledgeFailed>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e053      	b.n	8004456 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	d129      	bne.n	8004410 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	f003 0304 	and.w	r3, r3, #4
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d105      	bne.n	80043d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	e03f      	b.n	8004456 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2220      	movs	r2, #32
 80043dc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6859      	ldr	r1, [r3, #4]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	4b1d      	ldr	r3, [pc, #116]	; (8004460 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80043ea:	400b      	ands	r3, r1
 80043ec:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e022      	b.n	8004456 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004410:	f7fd fdb2 	bl	8001f78 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	429a      	cmp	r2, r3
 800441e:	d302      	bcc.n	8004426 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10f      	bne.n	8004446 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442a:	f043 0220 	orr.w	r2, r3, #32
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e007      	b.n	8004456 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b04      	cmp	r3, #4
 8004452:	d1a2      	bne.n	800439a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	fe00e800 	.word	0xfe00e800

08004464 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	f003 0310 	and.w	r3, r3, #16
 800447a:	2b10      	cmp	r3, #16
 800447c:	d151      	bne.n	8004522 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800447e:	e022      	b.n	80044c6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004486:	d01e      	beq.n	80044c6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004488:	f7fd fd76 	bl	8001f78 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	429a      	cmp	r2, r3
 8004496:	d302      	bcc.n	800449e <I2C_IsAcknowledgeFailed+0x3a>
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d113      	bne.n	80044c6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a2:	f043 0220 	orr.w	r2, r3, #32
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e02e      	b.n	8004524 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	f003 0320 	and.w	r3, r3, #32
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	d1d5      	bne.n	8004480 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2210      	movs	r2, #16
 80044da:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2220      	movs	r2, #32
 80044e2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f7ff fe70 	bl	80041ca <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6859      	ldr	r1, [r3, #4]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	4b0d      	ldr	r3, [pc, #52]	; (800452c <I2C_IsAcknowledgeFailed+0xc8>)
 80044f6:	400b      	ands	r3, r1
 80044f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fe:	f043 0204 	orr.w	r2, r3, #4
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e000      	b.n	8004524 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	fe00e800 	.word	0xfe00e800

08004530 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	607b      	str	r3, [r7, #4]
 800453a:	460b      	mov	r3, r1
 800453c:	817b      	strh	r3, [r7, #10]
 800453e:	4613      	mov	r3, r2
 8004540:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	0d5b      	lsrs	r3, r3, #21
 800454c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004550:	4b0d      	ldr	r3, [pc, #52]	; (8004588 <I2C_TransferConfig+0x58>)
 8004552:	430b      	orrs	r3, r1
 8004554:	43db      	mvns	r3, r3
 8004556:	ea02 0103 	and.w	r1, r2, r3
 800455a:	897b      	ldrh	r3, [r7, #10]
 800455c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004560:	7a7b      	ldrb	r3, [r7, #9]
 8004562:	041b      	lsls	r3, r3, #16
 8004564:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	431a      	orrs	r2, r3
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	431a      	orrs	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800457a:	bf00      	nop
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	03ff63ff 	.word	0x03ff63ff

0800458c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b20      	cmp	r3, #32
 80045a0:	d138      	bne.n	8004614 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e032      	b.n	8004616 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2224      	movs	r2, #36	; 0x24
 80045bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0201 	bic.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6819      	ldr	r1, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0201 	orr.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2220      	movs	r2, #32
 8004604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	e000      	b.n	8004616 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004614:	2302      	movs	r3, #2
  }
}
 8004616:	4618      	mov	r0, r3
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004622:	b480      	push	{r7}
 8004624:	b085      	sub	sp, #20
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
 800462a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b20      	cmp	r3, #32
 8004636:	d139      	bne.n	80046ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004642:	2302      	movs	r3, #2
 8004644:	e033      	b.n	80046ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2224      	movs	r2, #36	; 0x24
 8004652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0201 	bic.w	r2, r2, #1
 8004664:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004674:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	021b      	lsls	r3, r3, #8
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4313      	orrs	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0201 	orr.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046a8:	2300      	movs	r3, #0
 80046aa:	e000      	b.n	80046ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80046ac:	2302      	movs	r3, #2
  }
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
	...

080046bc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046c0:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a04      	ldr	r2, [pc, #16]	; (80046d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80046c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ca:	6013      	str	r3, [r2, #0]
}
 80046cc:	bf00      	nop
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40007000 	.word	0x40007000

080046dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80046e0:	4b04      	ldr	r3, [pc, #16]	; (80046f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	40007000 	.word	0x40007000

080046f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004706:	d130      	bne.n	800476a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004708:	4b23      	ldr	r3, [pc, #140]	; (8004798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004714:	d038      	beq.n	8004788 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004716:	4b20      	ldr	r3, [pc, #128]	; (8004798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800471e:	4a1e      	ldr	r2, [pc, #120]	; (8004798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004720:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004724:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004726:	4b1d      	ldr	r3, [pc, #116]	; (800479c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2232      	movs	r2, #50	; 0x32
 800472c:	fb02 f303 	mul.w	r3, r2, r3
 8004730:	4a1b      	ldr	r2, [pc, #108]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004732:	fba2 2303 	umull	r2, r3, r2, r3
 8004736:	0c9b      	lsrs	r3, r3, #18
 8004738:	3301      	adds	r3, #1
 800473a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800473c:	e002      	b.n	8004744 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	3b01      	subs	r3, #1
 8004742:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004744:	4b14      	ldr	r3, [pc, #80]	; (8004798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800474c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004750:	d102      	bne.n	8004758 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1f2      	bne.n	800473e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004758:	4b0f      	ldr	r3, [pc, #60]	; (8004798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004764:	d110      	bne.n	8004788 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e00f      	b.n	800478a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800476a:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004776:	d007      	beq.n	8004788 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004778:	4b07      	ldr	r3, [pc, #28]	; (8004798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004780:	4a05      	ldr	r2, [pc, #20]	; (8004798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004782:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004786:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40007000 	.word	0x40007000
 800479c:	20000000 	.word	0x20000000
 80047a0:	431bde83 	.word	0x431bde83

080047a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b088      	sub	sp, #32
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d102      	bne.n	80047b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	f000 bc11 	b.w	8004fda <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047b8:	4ba0      	ldr	r3, [pc, #640]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 030c 	and.w	r3, r3, #12
 80047c0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047c2:	4b9e      	ldr	r3, [pc, #632]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0310 	and.w	r3, r3, #16
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 80e4 	beq.w	80049a2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d007      	beq.n	80047f0 <HAL_RCC_OscConfig+0x4c>
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	2b0c      	cmp	r3, #12
 80047e4:	f040 808b 	bne.w	80048fe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	f040 8087 	bne.w	80048fe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047f0:	4b92      	ldr	r3, [pc, #584]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d005      	beq.n	8004808 <HAL_RCC_OscConfig+0x64>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e3e8      	b.n	8004fda <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a1a      	ldr	r2, [r3, #32]
 800480c:	4b8b      	ldr	r3, [pc, #556]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0308 	and.w	r3, r3, #8
 8004814:	2b00      	cmp	r3, #0
 8004816:	d004      	beq.n	8004822 <HAL_RCC_OscConfig+0x7e>
 8004818:	4b88      	ldr	r3, [pc, #544]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004820:	e005      	b.n	800482e <HAL_RCC_OscConfig+0x8a>
 8004822:	4b86      	ldr	r3, [pc, #536]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 8004824:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004828:	091b      	lsrs	r3, r3, #4
 800482a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800482e:	4293      	cmp	r3, r2
 8004830:	d223      	bcs.n	800487a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fdaa 	bl	8005390 <RCC_SetFlashLatencyFromMSIRange>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e3c9      	b.n	8004fda <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004846:	4b7d      	ldr	r3, [pc, #500]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a7c      	ldr	r2, [pc, #496]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 800484c:	f043 0308 	orr.w	r3, r3, #8
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	4b7a      	ldr	r3, [pc, #488]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	4977      	ldr	r1, [pc, #476]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 8004860:	4313      	orrs	r3, r2
 8004862:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004864:	4b75      	ldr	r3, [pc, #468]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	021b      	lsls	r3, r3, #8
 8004872:	4972      	ldr	r1, [pc, #456]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 8004874:	4313      	orrs	r3, r2
 8004876:	604b      	str	r3, [r1, #4]
 8004878:	e025      	b.n	80048c6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800487a:	4b70      	ldr	r3, [pc, #448]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a6f      	ldr	r2, [pc, #444]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 8004880:	f043 0308 	orr.w	r3, r3, #8
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	4b6d      	ldr	r3, [pc, #436]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	496a      	ldr	r1, [pc, #424]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 8004894:	4313      	orrs	r3, r2
 8004896:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004898:	4b68      	ldr	r3, [pc, #416]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	021b      	lsls	r3, r3, #8
 80048a6:	4965      	ldr	r1, [pc, #404]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d109      	bne.n	80048c6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fd6a 	bl	8005390 <RCC_SetFlashLatencyFromMSIRange>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e389      	b.n	8004fda <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048c6:	f000 fc6f 	bl	80051a8 <HAL_RCC_GetSysClockFreq>
 80048ca:	4602      	mov	r2, r0
 80048cc:	4b5b      	ldr	r3, [pc, #364]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	091b      	lsrs	r3, r3, #4
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	495a      	ldr	r1, [pc, #360]	; (8004a40 <HAL_RCC_OscConfig+0x29c>)
 80048d8:	5ccb      	ldrb	r3, [r1, r3]
 80048da:	f003 031f 	and.w	r3, r3, #31
 80048de:	fa22 f303 	lsr.w	r3, r2, r3
 80048e2:	4a58      	ldr	r2, [pc, #352]	; (8004a44 <HAL_RCC_OscConfig+0x2a0>)
 80048e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80048e6:	4b58      	ldr	r3, [pc, #352]	; (8004a48 <HAL_RCC_OscConfig+0x2a4>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fd f956 	bl	8001b9c <HAL_InitTick>
 80048f0:	4603      	mov	r3, r0
 80048f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d052      	beq.n	80049a0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80048fa:	7bfb      	ldrb	r3, [r7, #15]
 80048fc:	e36d      	b.n	8004fda <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d032      	beq.n	800496c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004906:	4b4d      	ldr	r3, [pc, #308]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a4c      	ldr	r2, [pc, #304]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 800490c:	f043 0301 	orr.w	r3, r3, #1
 8004910:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004912:	f7fd fb31 	bl	8001f78 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800491a:	f7fd fb2d 	bl	8001f78 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e356      	b.n	8004fda <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800492c:	4b43      	ldr	r3, [pc, #268]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0f0      	beq.n	800491a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004938:	4b40      	ldr	r3, [pc, #256]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a3f      	ldr	r2, [pc, #252]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 800493e:	f043 0308 	orr.w	r3, r3, #8
 8004942:	6013      	str	r3, [r2, #0]
 8004944:	4b3d      	ldr	r3, [pc, #244]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	493a      	ldr	r1, [pc, #232]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 8004952:	4313      	orrs	r3, r2
 8004954:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004956:	4b39      	ldr	r3, [pc, #228]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	021b      	lsls	r3, r3, #8
 8004964:	4935      	ldr	r1, [pc, #212]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 8004966:	4313      	orrs	r3, r2
 8004968:	604b      	str	r3, [r1, #4]
 800496a:	e01a      	b.n	80049a2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800496c:	4b33      	ldr	r3, [pc, #204]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a32      	ldr	r2, [pc, #200]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 8004972:	f023 0301 	bic.w	r3, r3, #1
 8004976:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004978:	f7fd fafe 	bl	8001f78 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004980:	f7fd fafa 	bl	8001f78 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e323      	b.n	8004fda <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004992:	4b2a      	ldr	r3, [pc, #168]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f0      	bne.n	8004980 <HAL_RCC_OscConfig+0x1dc>
 800499e:	e000      	b.n	80049a2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d073      	beq.n	8004a96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d005      	beq.n	80049c0 <HAL_RCC_OscConfig+0x21c>
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	2b0c      	cmp	r3, #12
 80049b8:	d10e      	bne.n	80049d8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2b03      	cmp	r3, #3
 80049be:	d10b      	bne.n	80049d8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c0:	4b1e      	ldr	r3, [pc, #120]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d063      	beq.n	8004a94 <HAL_RCC_OscConfig+0x2f0>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d15f      	bne.n	8004a94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e300      	b.n	8004fda <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e0:	d106      	bne.n	80049f0 <HAL_RCC_OscConfig+0x24c>
 80049e2:	4b16      	ldr	r3, [pc, #88]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a15      	ldr	r2, [pc, #84]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 80049e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ec:	6013      	str	r3, [r2, #0]
 80049ee:	e01d      	b.n	8004a2c <HAL_RCC_OscConfig+0x288>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049f8:	d10c      	bne.n	8004a14 <HAL_RCC_OscConfig+0x270>
 80049fa:	4b10      	ldr	r3, [pc, #64]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a0f      	ldr	r2, [pc, #60]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 8004a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	4b0d      	ldr	r3, [pc, #52]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a0c      	ldr	r2, [pc, #48]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 8004a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	e00b      	b.n	8004a2c <HAL_RCC_OscConfig+0x288>
 8004a14:	4b09      	ldr	r3, [pc, #36]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a08      	ldr	r2, [pc, #32]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 8004a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a1e:	6013      	str	r3, [r2, #0]
 8004a20:	4b06      	ldr	r3, [pc, #24]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a05      	ldr	r2, [pc, #20]	; (8004a3c <HAL_RCC_OscConfig+0x298>)
 8004a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d01b      	beq.n	8004a6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a34:	f7fd faa0 	bl	8001f78 <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a3a:	e010      	b.n	8004a5e <HAL_RCC_OscConfig+0x2ba>
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	0800c920 	.word	0x0800c920
 8004a44:	20000000 	.word	0x20000000
 8004a48:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a4c:	f7fd fa94 	bl	8001f78 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b64      	cmp	r3, #100	; 0x64
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e2bd      	b.n	8004fda <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a5e:	4baf      	ldr	r3, [pc, #700]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0f0      	beq.n	8004a4c <HAL_RCC_OscConfig+0x2a8>
 8004a6a:	e014      	b.n	8004a96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6c:	f7fd fa84 	bl	8001f78 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a74:	f7fd fa80 	bl	8001f78 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b64      	cmp	r3, #100	; 0x64
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e2a9      	b.n	8004fda <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a86:	4ba5      	ldr	r3, [pc, #660]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f0      	bne.n	8004a74 <HAL_RCC_OscConfig+0x2d0>
 8004a92:	e000      	b.n	8004a96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d060      	beq.n	8004b64 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	d005      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x310>
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	2b0c      	cmp	r3, #12
 8004aac:	d119      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d116      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ab4:	4b99      	ldr	r3, [pc, #612]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d005      	beq.n	8004acc <HAL_RCC_OscConfig+0x328>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e286      	b.n	8004fda <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004acc:	4b93      	ldr	r3, [pc, #588]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	061b      	lsls	r3, r3, #24
 8004ada:	4990      	ldr	r1, [pc, #576]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ae0:	e040      	b.n	8004b64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d023      	beq.n	8004b32 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aea:	4b8c      	ldr	r3, [pc, #560]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a8b      	ldr	r2, [pc, #556]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af6:	f7fd fa3f 	bl	8001f78 <HAL_GetTick>
 8004afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004afc:	e008      	b.n	8004b10 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004afe:	f7fd fa3b 	bl	8001f78 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e264      	b.n	8004fda <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b10:	4b82      	ldr	r3, [pc, #520]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0f0      	beq.n	8004afe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b1c:	4b7f      	ldr	r3, [pc, #508]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	061b      	lsls	r3, r3, #24
 8004b2a:	497c      	ldr	r1, [pc, #496]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	604b      	str	r3, [r1, #4]
 8004b30:	e018      	b.n	8004b64 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b32:	4b7a      	ldr	r3, [pc, #488]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a79      	ldr	r2, [pc, #484]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3e:	f7fd fa1b 	bl	8001f78 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b44:	e008      	b.n	8004b58 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b46:	f7fd fa17 	bl	8001f78 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e240      	b.n	8004fda <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b58:	4b70      	ldr	r3, [pc, #448]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1f0      	bne.n	8004b46 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0308 	and.w	r3, r3, #8
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d03c      	beq.n	8004bea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01c      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b78:	4b68      	ldr	r3, [pc, #416]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b7e:	4a67      	ldr	r2, [pc, #412]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004b80:	f043 0301 	orr.w	r3, r3, #1
 8004b84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b88:	f7fd f9f6 	bl	8001f78 <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b90:	f7fd f9f2 	bl	8001f78 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e21b      	b.n	8004fda <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ba2:	4b5e      	ldr	r3, [pc, #376]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0ef      	beq.n	8004b90 <HAL_RCC_OscConfig+0x3ec>
 8004bb0:	e01b      	b.n	8004bea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bb2:	4b5a      	ldr	r3, [pc, #360]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bb8:	4a58      	ldr	r2, [pc, #352]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004bba:	f023 0301 	bic.w	r3, r3, #1
 8004bbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc2:	f7fd f9d9 	bl	8001f78 <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bca:	f7fd f9d5 	bl	8001f78 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e1fe      	b.n	8004fda <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bdc:	4b4f      	ldr	r3, [pc, #316]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1ef      	bne.n	8004bca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0304 	and.w	r3, r3, #4
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 80a6 	beq.w	8004d44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004bfc:	4b47      	ldr	r3, [pc, #284]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10d      	bne.n	8004c24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c08:	4b44      	ldr	r3, [pc, #272]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0c:	4a43      	ldr	r2, [pc, #268]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c12:	6593      	str	r3, [r2, #88]	; 0x58
 8004c14:	4b41      	ldr	r3, [pc, #260]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1c:	60bb      	str	r3, [r7, #8]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c20:	2301      	movs	r3, #1
 8004c22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c24:	4b3e      	ldr	r3, [pc, #248]	; (8004d20 <HAL_RCC_OscConfig+0x57c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d118      	bne.n	8004c62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c30:	4b3b      	ldr	r3, [pc, #236]	; (8004d20 <HAL_RCC_OscConfig+0x57c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a3a      	ldr	r2, [pc, #232]	; (8004d20 <HAL_RCC_OscConfig+0x57c>)
 8004c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c3c:	f7fd f99c 	bl	8001f78 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c44:	f7fd f998 	bl	8001f78 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e1c1      	b.n	8004fda <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c56:	4b32      	ldr	r3, [pc, #200]	; (8004d20 <HAL_RCC_OscConfig+0x57c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0f0      	beq.n	8004c44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d108      	bne.n	8004c7c <HAL_RCC_OscConfig+0x4d8>
 8004c6a:	4b2c      	ldr	r3, [pc, #176]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c70:	4a2a      	ldr	r2, [pc, #168]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c7a:	e024      	b.n	8004cc6 <HAL_RCC_OscConfig+0x522>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	2b05      	cmp	r3, #5
 8004c82:	d110      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x502>
 8004c84:	4b25      	ldr	r3, [pc, #148]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8a:	4a24      	ldr	r2, [pc, #144]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004c8c:	f043 0304 	orr.w	r3, r3, #4
 8004c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c94:	4b21      	ldr	r3, [pc, #132]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9a:	4a20      	ldr	r2, [pc, #128]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004c9c:	f043 0301 	orr.w	r3, r3, #1
 8004ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ca4:	e00f      	b.n	8004cc6 <HAL_RCC_OscConfig+0x522>
 8004ca6:	4b1d      	ldr	r3, [pc, #116]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cac:	4a1b      	ldr	r2, [pc, #108]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004cae:	f023 0301 	bic.w	r3, r3, #1
 8004cb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cb6:	4b19      	ldr	r3, [pc, #100]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cbc:	4a17      	ldr	r2, [pc, #92]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004cbe:	f023 0304 	bic.w	r3, r3, #4
 8004cc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d016      	beq.n	8004cfc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cce:	f7fd f953 	bl	8001f78 <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cd4:	e00a      	b.n	8004cec <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd6:	f7fd f94f 	bl	8001f78 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e176      	b.n	8004fda <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cec:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <HAL_RCC_OscConfig+0x578>)
 8004cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0ed      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x532>
 8004cfa:	e01a      	b.n	8004d32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cfc:	f7fd f93c 	bl	8001f78 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d02:	e00f      	b.n	8004d24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d04:	f7fd f938 	bl	8001f78 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d906      	bls.n	8004d24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e15f      	b.n	8004fda <HAL_RCC_OscConfig+0x836>
 8004d1a:	bf00      	nop
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d24:	4baa      	ldr	r3, [pc, #680]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1e8      	bne.n	8004d04 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d32:	7ffb      	ldrb	r3, [r7, #31]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d105      	bne.n	8004d44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d38:	4ba5      	ldr	r3, [pc, #660]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3c:	4aa4      	ldr	r2, [pc, #656]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004d3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d42:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0320 	and.w	r3, r3, #32
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d03c      	beq.n	8004dca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d01c      	beq.n	8004d92 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d58:	4b9d      	ldr	r3, [pc, #628]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004d5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d5e:	4a9c      	ldr	r2, [pc, #624]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004d60:	f043 0301 	orr.w	r3, r3, #1
 8004d64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d68:	f7fd f906 	bl	8001f78 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d70:	f7fd f902 	bl	8001f78 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e12b      	b.n	8004fda <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d82:	4b93      	ldr	r3, [pc, #588]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004d84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0ef      	beq.n	8004d70 <HAL_RCC_OscConfig+0x5cc>
 8004d90:	e01b      	b.n	8004dca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d92:	4b8f      	ldr	r3, [pc, #572]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004d94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d98:	4a8d      	ldr	r2, [pc, #564]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004d9a:	f023 0301 	bic.w	r3, r3, #1
 8004d9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da2:	f7fd f8e9 	bl	8001f78 <HAL_GetTick>
 8004da6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004da8:	e008      	b.n	8004dbc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004daa:	f7fd f8e5 	bl	8001f78 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e10e      	b.n	8004fda <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004dbc:	4b84      	ldr	r3, [pc, #528]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004dbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1ef      	bne.n	8004daa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 8102 	beq.w	8004fd8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	f040 80c5 	bne.w	8004f68 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004dde:	4b7c      	ldr	r3, [pc, #496]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f003 0203 	and.w	r2, r3, #3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d12c      	bne.n	8004e4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d123      	bne.n	8004e4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d11b      	bne.n	8004e4c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d113      	bne.n	8004e4c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2e:	085b      	lsrs	r3, r3, #1
 8004e30:	3b01      	subs	r3, #1
 8004e32:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d109      	bne.n	8004e4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e42:	085b      	lsrs	r3, r3, #1
 8004e44:	3b01      	subs	r3, #1
 8004e46:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d067      	beq.n	8004f1c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	2b0c      	cmp	r3, #12
 8004e50:	d062      	beq.n	8004f18 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e52:	4b5f      	ldr	r3, [pc, #380]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e0bb      	b.n	8004fda <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e62:	4b5b      	ldr	r3, [pc, #364]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a5a      	ldr	r2, [pc, #360]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004e68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e6c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e6e:	f7fd f883 	bl	8001f78 <HAL_GetTick>
 8004e72:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e74:	e008      	b.n	8004e88 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e76:	f7fd f87f 	bl	8001f78 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e0a8      	b.n	8004fda <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e88:	4b51      	ldr	r3, [pc, #324]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1f0      	bne.n	8004e76 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e94:	4b4e      	ldr	r3, [pc, #312]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004e96:	68da      	ldr	r2, [r3, #12]
 8004e98:	4b4e      	ldr	r3, [pc, #312]	; (8004fd4 <HAL_RCC_OscConfig+0x830>)
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ea4:	3a01      	subs	r2, #1
 8004ea6:	0112      	lsls	r2, r2, #4
 8004ea8:	4311      	orrs	r1, r2
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004eae:	0212      	lsls	r2, r2, #8
 8004eb0:	4311      	orrs	r1, r2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004eb6:	0852      	lsrs	r2, r2, #1
 8004eb8:	3a01      	subs	r2, #1
 8004eba:	0552      	lsls	r2, r2, #21
 8004ebc:	4311      	orrs	r1, r2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004ec2:	0852      	lsrs	r2, r2, #1
 8004ec4:	3a01      	subs	r2, #1
 8004ec6:	0652      	lsls	r2, r2, #25
 8004ec8:	4311      	orrs	r1, r2
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ece:	06d2      	lsls	r2, r2, #27
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	493f      	ldr	r1, [pc, #252]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ed8:	4b3d      	ldr	r3, [pc, #244]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a3c      	ldr	r2, [pc, #240]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004ede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ee2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ee4:	4b3a      	ldr	r3, [pc, #232]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	4a39      	ldr	r2, [pc, #228]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ef0:	f7fd f842 	bl	8001f78 <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef8:	f7fd f83e 	bl	8001f78 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e067      	b.n	8004fda <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f0a:	4b31      	ldr	r3, [pc, #196]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0f0      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f16:	e05f      	b.n	8004fd8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e05e      	b.n	8004fda <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f1c:	4b2c      	ldr	r3, [pc, #176]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d157      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f28:	4b29      	ldr	r3, [pc, #164]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a28      	ldr	r2, [pc, #160]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f34:	4b26      	ldr	r3, [pc, #152]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	4a25      	ldr	r2, [pc, #148]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f40:	f7fd f81a 	bl	8001f78 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f48:	f7fd f816 	bl	8001f78 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e03f      	b.n	8004fda <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f5a:	4b1d      	ldr	r3, [pc, #116]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0f0      	beq.n	8004f48 <HAL_RCC_OscConfig+0x7a4>
 8004f66:	e037      	b.n	8004fd8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	2b0c      	cmp	r3, #12
 8004f6c:	d02d      	beq.n	8004fca <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f6e:	4b18      	ldr	r3, [pc, #96]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a17      	ldr	r2, [pc, #92]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004f74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f78:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f7a:	4b15      	ldr	r3, [pc, #84]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d105      	bne.n	8004f92 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004f86:	4b12      	ldr	r3, [pc, #72]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	4a11      	ldr	r2, [pc, #68]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004f8c:	f023 0303 	bic.w	r3, r3, #3
 8004f90:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004f92:	4b0f      	ldr	r3, [pc, #60]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	4a0e      	ldr	r2, [pc, #56]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004f98:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fa0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa2:	f7fc ffe9 	bl	8001f78 <HAL_GetTick>
 8004fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004faa:	f7fc ffe5 	bl	8001f78 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e00e      	b.n	8004fda <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fbc:	4b04      	ldr	r3, [pc, #16]	; (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1f0      	bne.n	8004faa <HAL_RCC_OscConfig+0x806>
 8004fc8:	e006      	b.n	8004fd8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e005      	b.n	8004fda <HAL_RCC_OscConfig+0x836>
 8004fce:	bf00      	nop
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3720      	adds	r7, #32
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop

08004fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e0c8      	b.n	800518a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ff8:	4b66      	ldr	r3, [pc, #408]	; (8005194 <HAL_RCC_ClockConfig+0x1b0>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d910      	bls.n	8005028 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005006:	4b63      	ldr	r3, [pc, #396]	; (8005194 <HAL_RCC_ClockConfig+0x1b0>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f023 0207 	bic.w	r2, r3, #7
 800500e:	4961      	ldr	r1, [pc, #388]	; (8005194 <HAL_RCC_ClockConfig+0x1b0>)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	4313      	orrs	r3, r2
 8005014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005016:	4b5f      	ldr	r3, [pc, #380]	; (8005194 <HAL_RCC_ClockConfig+0x1b0>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	429a      	cmp	r2, r3
 8005022:	d001      	beq.n	8005028 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e0b0      	b.n	800518a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b00      	cmp	r3, #0
 8005032:	d04c      	beq.n	80050ce <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	2b03      	cmp	r3, #3
 800503a:	d107      	bne.n	800504c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800503c:	4b56      	ldr	r3, [pc, #344]	; (8005198 <HAL_RCC_ClockConfig+0x1b4>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d121      	bne.n	800508c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e09e      	b.n	800518a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d107      	bne.n	8005064 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005054:	4b50      	ldr	r3, [pc, #320]	; (8005198 <HAL_RCC_ClockConfig+0x1b4>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d115      	bne.n	800508c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e092      	b.n	800518a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d107      	bne.n	800507c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800506c:	4b4a      	ldr	r3, [pc, #296]	; (8005198 <HAL_RCC_ClockConfig+0x1b4>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d109      	bne.n	800508c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e086      	b.n	800518a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800507c:	4b46      	ldr	r3, [pc, #280]	; (8005198 <HAL_RCC_ClockConfig+0x1b4>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e07e      	b.n	800518a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800508c:	4b42      	ldr	r3, [pc, #264]	; (8005198 <HAL_RCC_ClockConfig+0x1b4>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f023 0203 	bic.w	r2, r3, #3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	493f      	ldr	r1, [pc, #252]	; (8005198 <HAL_RCC_ClockConfig+0x1b4>)
 800509a:	4313      	orrs	r3, r2
 800509c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800509e:	f7fc ff6b 	bl	8001f78 <HAL_GetTick>
 80050a2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050a4:	e00a      	b.n	80050bc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050a6:	f7fc ff67 	bl	8001f78 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e066      	b.n	800518a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050bc:	4b36      	ldr	r3, [pc, #216]	; (8005198 <HAL_RCC_ClockConfig+0x1b4>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f003 020c 	and.w	r2, r3, #12
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d1eb      	bne.n	80050a6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d008      	beq.n	80050ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050da:	4b2f      	ldr	r3, [pc, #188]	; (8005198 <HAL_RCC_ClockConfig+0x1b4>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	492c      	ldr	r1, [pc, #176]	; (8005198 <HAL_RCC_ClockConfig+0x1b4>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050ec:	4b29      	ldr	r3, [pc, #164]	; (8005194 <HAL_RCC_ClockConfig+0x1b0>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0307 	and.w	r3, r3, #7
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d210      	bcs.n	800511c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fa:	4b26      	ldr	r3, [pc, #152]	; (8005194 <HAL_RCC_ClockConfig+0x1b0>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f023 0207 	bic.w	r2, r3, #7
 8005102:	4924      	ldr	r1, [pc, #144]	; (8005194 <HAL_RCC_ClockConfig+0x1b0>)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	4313      	orrs	r3, r2
 8005108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800510a:	4b22      	ldr	r3, [pc, #136]	; (8005194 <HAL_RCC_ClockConfig+0x1b0>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	429a      	cmp	r2, r3
 8005116:	d001      	beq.n	800511c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e036      	b.n	800518a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	d008      	beq.n	800513a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005128:	4b1b      	ldr	r3, [pc, #108]	; (8005198 <HAL_RCC_ClockConfig+0x1b4>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	4918      	ldr	r1, [pc, #96]	; (8005198 <HAL_RCC_ClockConfig+0x1b4>)
 8005136:	4313      	orrs	r3, r2
 8005138:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0308 	and.w	r3, r3, #8
 8005142:	2b00      	cmp	r3, #0
 8005144:	d009      	beq.n	800515a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005146:	4b14      	ldr	r3, [pc, #80]	; (8005198 <HAL_RCC_ClockConfig+0x1b4>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	4910      	ldr	r1, [pc, #64]	; (8005198 <HAL_RCC_ClockConfig+0x1b4>)
 8005156:	4313      	orrs	r3, r2
 8005158:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800515a:	f000 f825 	bl	80051a8 <HAL_RCC_GetSysClockFreq>
 800515e:	4602      	mov	r2, r0
 8005160:	4b0d      	ldr	r3, [pc, #52]	; (8005198 <HAL_RCC_ClockConfig+0x1b4>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	091b      	lsrs	r3, r3, #4
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	490c      	ldr	r1, [pc, #48]	; (800519c <HAL_RCC_ClockConfig+0x1b8>)
 800516c:	5ccb      	ldrb	r3, [r1, r3]
 800516e:	f003 031f 	and.w	r3, r3, #31
 8005172:	fa22 f303 	lsr.w	r3, r2, r3
 8005176:	4a0a      	ldr	r2, [pc, #40]	; (80051a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800517a:	4b0a      	ldr	r3, [pc, #40]	; (80051a4 <HAL_RCC_ClockConfig+0x1c0>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4618      	mov	r0, r3
 8005180:	f7fc fd0c 	bl	8001b9c <HAL_InitTick>
 8005184:	4603      	mov	r3, r0
 8005186:	72fb      	strb	r3, [r7, #11]

  return status;
 8005188:	7afb      	ldrb	r3, [r7, #11]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	40022000 	.word	0x40022000
 8005198:	40021000 	.word	0x40021000
 800519c:	0800c920 	.word	0x0800c920
 80051a0:	20000000 	.word	0x20000000
 80051a4:	20000004 	.word	0x20000004

080051a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b089      	sub	sp, #36	; 0x24
 80051ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80051ae:	2300      	movs	r3, #0
 80051b0:	61fb      	str	r3, [r7, #28]
 80051b2:	2300      	movs	r3, #0
 80051b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051b6:	4b3e      	ldr	r3, [pc, #248]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 030c 	and.w	r3, r3, #12
 80051be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051c0:	4b3b      	ldr	r3, [pc, #236]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f003 0303 	and.w	r3, r3, #3
 80051c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_RCC_GetSysClockFreq+0x34>
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	2b0c      	cmp	r3, #12
 80051d4:	d121      	bne.n	800521a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d11e      	bne.n	800521a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80051dc:	4b34      	ldr	r3, [pc, #208]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d107      	bne.n	80051f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80051e8:	4b31      	ldr	r3, [pc, #196]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80051ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051ee:	0a1b      	lsrs	r3, r3, #8
 80051f0:	f003 030f 	and.w	r3, r3, #15
 80051f4:	61fb      	str	r3, [r7, #28]
 80051f6:	e005      	b.n	8005204 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80051f8:	4b2d      	ldr	r3, [pc, #180]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	091b      	lsrs	r3, r3, #4
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005204:	4a2b      	ldr	r2, [pc, #172]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800520c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10d      	bne.n	8005230 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005218:	e00a      	b.n	8005230 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	2b04      	cmp	r3, #4
 800521e:	d102      	bne.n	8005226 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005220:	4b25      	ldr	r3, [pc, #148]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005222:	61bb      	str	r3, [r7, #24]
 8005224:	e004      	b.n	8005230 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	2b08      	cmp	r3, #8
 800522a:	d101      	bne.n	8005230 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800522c:	4b22      	ldr	r3, [pc, #136]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x110>)
 800522e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	2b0c      	cmp	r3, #12
 8005234:	d134      	bne.n	80052a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005236:	4b1e      	ldr	r3, [pc, #120]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b02      	cmp	r3, #2
 8005244:	d003      	beq.n	800524e <HAL_RCC_GetSysClockFreq+0xa6>
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2b03      	cmp	r3, #3
 800524a:	d003      	beq.n	8005254 <HAL_RCC_GetSysClockFreq+0xac>
 800524c:	e005      	b.n	800525a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800524e:	4b1a      	ldr	r3, [pc, #104]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005250:	617b      	str	r3, [r7, #20]
      break;
 8005252:	e005      	b.n	8005260 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005254:	4b18      	ldr	r3, [pc, #96]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005256:	617b      	str	r3, [r7, #20]
      break;
 8005258:	e002      	b.n	8005260 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	617b      	str	r3, [r7, #20]
      break;
 800525e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005260:	4b13      	ldr	r3, [pc, #76]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	091b      	lsrs	r3, r3, #4
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	3301      	adds	r3, #1
 800526c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800526e:	4b10      	ldr	r3, [pc, #64]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	0a1b      	lsrs	r3, r3, #8
 8005274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	fb02 f203 	mul.w	r2, r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	fbb2 f3f3 	udiv	r3, r2, r3
 8005284:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005286:	4b0a      	ldr	r3, [pc, #40]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	0e5b      	lsrs	r3, r3, #25
 800528c:	f003 0303 	and.w	r3, r3, #3
 8005290:	3301      	adds	r3, #1
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	fbb2 f3f3 	udiv	r3, r2, r3
 800529e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80052a0:	69bb      	ldr	r3, [r7, #24]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3724      	adds	r7, #36	; 0x24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	40021000 	.word	0x40021000
 80052b4:	0800c938 	.word	0x0800c938
 80052b8:	00f42400 	.word	0x00f42400

080052bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052c0:	4b03      	ldr	r3, [pc, #12]	; (80052d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80052c2:	681b      	ldr	r3, [r3, #0]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	20000000 	.word	0x20000000

080052d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80052d8:	f7ff fff0 	bl	80052bc <HAL_RCC_GetHCLKFreq>
 80052dc:	4602      	mov	r2, r0
 80052de:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	0a1b      	lsrs	r3, r3, #8
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	4904      	ldr	r1, [pc, #16]	; (80052fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80052ea:	5ccb      	ldrb	r3, [r1, r3]
 80052ec:	f003 031f 	and.w	r3, r3, #31
 80052f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	40021000 	.word	0x40021000
 80052fc:	0800c930 	.word	0x0800c930

08005300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005304:	f7ff ffda 	bl	80052bc <HAL_RCC_GetHCLKFreq>
 8005308:	4602      	mov	r2, r0
 800530a:	4b06      	ldr	r3, [pc, #24]	; (8005324 <HAL_RCC_GetPCLK2Freq+0x24>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	0adb      	lsrs	r3, r3, #11
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	4904      	ldr	r1, [pc, #16]	; (8005328 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005316:	5ccb      	ldrb	r3, [r1, r3]
 8005318:	f003 031f 	and.w	r3, r3, #31
 800531c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005320:	4618      	mov	r0, r3
 8005322:	bd80      	pop	{r7, pc}
 8005324:	40021000 	.word	0x40021000
 8005328:	0800c930 	.word	0x0800c930

0800532c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	220f      	movs	r2, #15
 800533a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800533c:	4b12      	ldr	r3, [pc, #72]	; (8005388 <HAL_RCC_GetClockConfig+0x5c>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f003 0203 	and.w	r2, r3, #3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005348:	4b0f      	ldr	r3, [pc, #60]	; (8005388 <HAL_RCC_GetClockConfig+0x5c>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005354:	4b0c      	ldr	r3, [pc, #48]	; (8005388 <HAL_RCC_GetClockConfig+0x5c>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005360:	4b09      	ldr	r3, [pc, #36]	; (8005388 <HAL_RCC_GetClockConfig+0x5c>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	08db      	lsrs	r3, r3, #3
 8005366:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800536e:	4b07      	ldr	r3, [pc, #28]	; (800538c <HAL_RCC_GetClockConfig+0x60>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0207 	and.w	r2, r3, #7
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	601a      	str	r2, [r3, #0]
}
 800537a:	bf00      	nop
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	40021000 	.word	0x40021000
 800538c:	40022000 	.word	0x40022000

08005390 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005398:	2300      	movs	r3, #0
 800539a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800539c:	4b2a      	ldr	r3, [pc, #168]	; (8005448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800539e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053a8:	f7ff f998 	bl	80046dc <HAL_PWREx_GetVoltageRange>
 80053ac:	6178      	str	r0, [r7, #20]
 80053ae:	e014      	b.n	80053da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053b0:	4b25      	ldr	r3, [pc, #148]	; (8005448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b4:	4a24      	ldr	r2, [pc, #144]	; (8005448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ba:	6593      	str	r3, [r2, #88]	; 0x58
 80053bc:	4b22      	ldr	r3, [pc, #136]	; (8005448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80053c8:	f7ff f988 	bl	80046dc <HAL_PWREx_GetVoltageRange>
 80053cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80053ce:	4b1e      	ldr	r3, [pc, #120]	; (8005448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d2:	4a1d      	ldr	r2, [pc, #116]	; (8005448 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053e0:	d10b      	bne.n	80053fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b80      	cmp	r3, #128	; 0x80
 80053e6:	d919      	bls.n	800541c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2ba0      	cmp	r3, #160	; 0xa0
 80053ec:	d902      	bls.n	80053f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053ee:	2302      	movs	r3, #2
 80053f0:	613b      	str	r3, [r7, #16]
 80053f2:	e013      	b.n	800541c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053f4:	2301      	movs	r3, #1
 80053f6:	613b      	str	r3, [r7, #16]
 80053f8:	e010      	b.n	800541c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b80      	cmp	r3, #128	; 0x80
 80053fe:	d902      	bls.n	8005406 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005400:	2303      	movs	r3, #3
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	e00a      	b.n	800541c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b80      	cmp	r3, #128	; 0x80
 800540a:	d102      	bne.n	8005412 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800540c:	2302      	movs	r3, #2
 800540e:	613b      	str	r3, [r7, #16]
 8005410:	e004      	b.n	800541c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b70      	cmp	r3, #112	; 0x70
 8005416:	d101      	bne.n	800541c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005418:	2301      	movs	r3, #1
 800541a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800541c:	4b0b      	ldr	r3, [pc, #44]	; (800544c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f023 0207 	bic.w	r2, r3, #7
 8005424:	4909      	ldr	r1, [pc, #36]	; (800544c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800542c:	4b07      	ldr	r3, [pc, #28]	; (800544c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0307 	and.w	r3, r3, #7
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	429a      	cmp	r2, r3
 8005438:	d001      	beq.n	800543e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e000      	b.n	8005440 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40021000 	.word	0x40021000
 800544c:	40022000 	.word	0x40022000

08005450 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005458:	2300      	movs	r3, #0
 800545a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800545c:	2300      	movs	r3, #0
 800545e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005468:	2b00      	cmp	r3, #0
 800546a:	d031      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005470:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005474:	d01a      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005476:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800547a:	d814      	bhi.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800547c:	2b00      	cmp	r3, #0
 800547e:	d009      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005480:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005484:	d10f      	bne.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005486:	4bac      	ldr	r3, [pc, #688]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	4aab      	ldr	r2, [pc, #684]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800548c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005490:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005492:	e00c      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	3304      	adds	r3, #4
 8005498:	2100      	movs	r1, #0
 800549a:	4618      	mov	r0, r3
 800549c:	f000 f9dc 	bl	8005858 <RCCEx_PLLSAI1_Config>
 80054a0:	4603      	mov	r3, r0
 80054a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054a4:	e003      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	74fb      	strb	r3, [r7, #19]
      break;
 80054aa:	e000      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80054ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054ae:	7cfb      	ldrb	r3, [r7, #19]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10b      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054b4:	4ba0      	ldr	r3, [pc, #640]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80054b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c2:	499d      	ldr	r1, [pc, #628]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80054ca:	e001      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054cc:	7cfb      	ldrb	r3, [r7, #19]
 80054ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 8099 	beq.w	8005610 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054de:	2300      	movs	r3, #0
 80054e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80054e2:	4b95      	ldr	r3, [pc, #596]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80054e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80054ee:	2301      	movs	r3, #1
 80054f0:	e000      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80054f2:	2300      	movs	r3, #0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00d      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054f8:	4b8f      	ldr	r3, [pc, #572]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80054fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054fc:	4a8e      	ldr	r2, [pc, #568]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80054fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005502:	6593      	str	r3, [r2, #88]	; 0x58
 8005504:	4b8c      	ldr	r3, [pc, #560]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800550c:	60bb      	str	r3, [r7, #8]
 800550e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005510:	2301      	movs	r3, #1
 8005512:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005514:	4b89      	ldr	r3, [pc, #548]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a88      	ldr	r2, [pc, #544]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800551a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800551e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005520:	f7fc fd2a 	bl	8001f78 <HAL_GetTick>
 8005524:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005526:	e009      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005528:	f7fc fd26 	bl	8001f78 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d902      	bls.n	800553c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	74fb      	strb	r3, [r7, #19]
        break;
 800553a:	e005      	b.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800553c:	4b7f      	ldr	r3, [pc, #508]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0ef      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005548:	7cfb      	ldrb	r3, [r7, #19]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d155      	bne.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800554e:	4b7a      	ldr	r3, [pc, #488]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005554:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005558:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d01e      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	429a      	cmp	r2, r3
 8005568:	d019      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800556a:	4b73      	ldr	r3, [pc, #460]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800556c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005574:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005576:	4b70      	ldr	r3, [pc, #448]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557c:	4a6e      	ldr	r2, [pc, #440]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800557e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005582:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005586:	4b6c      	ldr	r3, [pc, #432]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558c:	4a6a      	ldr	r2, [pc, #424]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800558e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005592:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005596:	4a68      	ldr	r2, [pc, #416]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d016      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a8:	f7fc fce6 	bl	8001f78 <HAL_GetTick>
 80055ac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055ae:	e00b      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055b0:	f7fc fce2 	bl	8001f78 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80055be:	4293      	cmp	r3, r2
 80055c0:	d902      	bls.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	74fb      	strb	r3, [r7, #19]
            break;
 80055c6:	e006      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055c8:	4b5b      	ldr	r3, [pc, #364]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80055ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d0ec      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80055d6:	7cfb      	ldrb	r3, [r7, #19]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10b      	bne.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055dc:	4b56      	ldr	r3, [pc, #344]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80055de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ea:	4953      	ldr	r1, [pc, #332]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80055f2:	e004      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055f4:	7cfb      	ldrb	r3, [r7, #19]
 80055f6:	74bb      	strb	r3, [r7, #18]
 80055f8:	e001      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055fa:	7cfb      	ldrb	r3, [r7, #19]
 80055fc:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055fe:	7c7b      	ldrb	r3, [r7, #17]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d105      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005604:	4b4c      	ldr	r3, [pc, #304]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005608:	4a4b      	ldr	r2, [pc, #300]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800560a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800560e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00a      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800561c:	4b46      	ldr	r3, [pc, #280]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800561e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005622:	f023 0203 	bic.w	r2, r3, #3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	4943      	ldr	r1, [pc, #268]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800562c:	4313      	orrs	r3, r2
 800562e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00a      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800563e:	4b3e      	ldr	r3, [pc, #248]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005644:	f023 020c 	bic.w	r2, r3, #12
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	493a      	ldr	r1, [pc, #232]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800564e:	4313      	orrs	r3, r2
 8005650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0320 	and.w	r3, r3, #32
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00a      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005660:	4b35      	ldr	r3, [pc, #212]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005666:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566e:	4932      	ldr	r1, [pc, #200]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005670:	4313      	orrs	r3, r2
 8005672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00a      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005682:	4b2d      	ldr	r3, [pc, #180]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005688:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005690:	4929      	ldr	r1, [pc, #164]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005692:	4313      	orrs	r3, r2
 8005694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00a      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056a4:	4b24      	ldr	r3, [pc, #144]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80056a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b2:	4921      	ldr	r1, [pc, #132]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00a      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056c6:	4b1c      	ldr	r3, [pc, #112]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80056c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	4918      	ldr	r1, [pc, #96]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00a      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056e8:	4b13      	ldr	r3, [pc, #76]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80056ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f6:	4910      	ldr	r1, [pc, #64]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d02c      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800570a:	4b0b      	ldr	r3, [pc, #44]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800570c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005710:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005718:	4907      	ldr	r1, [pc, #28]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800571a:	4313      	orrs	r3, r2
 800571c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005724:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005728:	d10a      	bne.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800572a:	4b03      	ldr	r3, [pc, #12]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	4a02      	ldr	r2, [pc, #8]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005730:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005734:	60d3      	str	r3, [r2, #12]
 8005736:	e015      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8005738:	40021000 	.word	0x40021000
 800573c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005744:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005748:	d10c      	bne.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	3304      	adds	r3, #4
 800574e:	2101      	movs	r1, #1
 8005750:	4618      	mov	r0, r3
 8005752:	f000 f881 	bl	8005858 <RCCEx_PLLSAI1_Config>
 8005756:	4603      	mov	r3, r0
 8005758:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800575a:	7cfb      	ldrb	r3, [r7, #19]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8005760:	7cfb      	ldrb	r3, [r7, #19]
 8005762:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d028      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005770:	4b30      	ldr	r3, [pc, #192]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005776:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800577e:	492d      	ldr	r1, [pc, #180]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005780:	4313      	orrs	r3, r2
 8005782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800578e:	d106      	bne.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005790:	4b28      	ldr	r3, [pc, #160]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	4a27      	ldr	r2, [pc, #156]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005796:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800579a:	60d3      	str	r3, [r2, #12]
 800579c:	e011      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057a6:	d10c      	bne.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3304      	adds	r3, #4
 80057ac:	2101      	movs	r1, #1
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 f852 	bl	8005858 <RCCEx_PLLSAI1_Config>
 80057b4:	4603      	mov	r3, r0
 80057b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057b8:	7cfb      	ldrb	r3, [r7, #19]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 80057be:	7cfb      	ldrb	r3, [r7, #19]
 80057c0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d01c      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057ce:	4b19      	ldr	r3, [pc, #100]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057dc:	4915      	ldr	r1, [pc, #84]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057ec:	d10c      	bne.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	3304      	adds	r3, #4
 80057f2:	2102      	movs	r1, #2
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 f82f 	bl	8005858 <RCCEx_PLLSAI1_Config>
 80057fa:	4603      	mov	r3, r0
 80057fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057fe:	7cfb      	ldrb	r3, [r7, #19]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005804:	7cfb      	ldrb	r3, [r7, #19]
 8005806:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00a      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005814:	4b07      	ldr	r3, [pc, #28]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005822:	4904      	ldr	r1, [pc, #16]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005824:	4313      	orrs	r3, r2
 8005826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800582a:	7cbb      	ldrb	r3, [r7, #18]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	40021000 	.word	0x40021000

08005838 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800583c:	4b05      	ldr	r3, [pc, #20]	; (8005854 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a04      	ldr	r2, [pc, #16]	; (8005854 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005842:	f043 0304 	orr.w	r3, r3, #4
 8005846:	6013      	str	r3, [r2, #0]
}
 8005848:	bf00      	nop
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	40021000 	.word	0x40021000

08005858 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005866:	4b74      	ldr	r3, [pc, #464]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	f003 0303 	and.w	r3, r3, #3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d018      	beq.n	80058a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005872:	4b71      	ldr	r3, [pc, #452]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	f003 0203 	and.w	r2, r3, #3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	429a      	cmp	r2, r3
 8005880:	d10d      	bne.n	800589e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
       ||
 8005886:	2b00      	cmp	r3, #0
 8005888:	d009      	beq.n	800589e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800588a:	4b6b      	ldr	r3, [pc, #428]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	091b      	lsrs	r3, r3, #4
 8005890:	f003 0307 	and.w	r3, r3, #7
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
       ||
 800589a:	429a      	cmp	r2, r3
 800589c:	d047      	beq.n	800592e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	73fb      	strb	r3, [r7, #15]
 80058a2:	e044      	b.n	800592e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b03      	cmp	r3, #3
 80058aa:	d018      	beq.n	80058de <RCCEx_PLLSAI1_Config+0x86>
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	d825      	bhi.n	80058fc <RCCEx_PLLSAI1_Config+0xa4>
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d002      	beq.n	80058ba <RCCEx_PLLSAI1_Config+0x62>
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d009      	beq.n	80058cc <RCCEx_PLLSAI1_Config+0x74>
 80058b8:	e020      	b.n	80058fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058ba:	4b5f      	ldr	r3, [pc, #380]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d11d      	bne.n	8005902 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058ca:	e01a      	b.n	8005902 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058cc:	4b5a      	ldr	r3, [pc, #360]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d116      	bne.n	8005906 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058dc:	e013      	b.n	8005906 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058de:	4b56      	ldr	r3, [pc, #344]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10f      	bne.n	800590a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058ea:	4b53      	ldr	r3, [pc, #332]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d109      	bne.n	800590a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058fa:	e006      	b.n	800590a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005900:	e004      	b.n	800590c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005902:	bf00      	nop
 8005904:	e002      	b.n	800590c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005906:	bf00      	nop
 8005908:	e000      	b.n	800590c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800590a:	bf00      	nop
    }

    if(status == HAL_OK)
 800590c:	7bfb      	ldrb	r3, [r7, #15]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10d      	bne.n	800592e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005912:	4b49      	ldr	r3, [pc, #292]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6819      	ldr	r1, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	3b01      	subs	r3, #1
 8005924:	011b      	lsls	r3, r3, #4
 8005926:	430b      	orrs	r3, r1
 8005928:	4943      	ldr	r1, [pc, #268]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800592a:	4313      	orrs	r3, r2
 800592c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800592e:	7bfb      	ldrb	r3, [r7, #15]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d17c      	bne.n	8005a2e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005934:	4b40      	ldr	r3, [pc, #256]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a3f      	ldr	r2, [pc, #252]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800593a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800593e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005940:	f7fc fb1a 	bl	8001f78 <HAL_GetTick>
 8005944:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005946:	e009      	b.n	800595c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005948:	f7fc fb16 	bl	8001f78 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d902      	bls.n	800595c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	73fb      	strb	r3, [r7, #15]
        break;
 800595a:	e005      	b.n	8005968 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800595c:	4b36      	ldr	r3, [pc, #216]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1ef      	bne.n	8005948 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005968:	7bfb      	ldrb	r3, [r7, #15]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d15f      	bne.n	8005a2e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d110      	bne.n	8005996 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005974:	4b30      	ldr	r3, [pc, #192]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800597c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6892      	ldr	r2, [r2, #8]
 8005984:	0211      	lsls	r1, r2, #8
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	68d2      	ldr	r2, [r2, #12]
 800598a:	06d2      	lsls	r2, r2, #27
 800598c:	430a      	orrs	r2, r1
 800598e:	492a      	ldr	r1, [pc, #168]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005990:	4313      	orrs	r3, r2
 8005992:	610b      	str	r3, [r1, #16]
 8005994:	e027      	b.n	80059e6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d112      	bne.n	80059c2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800599c:	4b26      	ldr	r3, [pc, #152]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80059a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	6892      	ldr	r2, [r2, #8]
 80059ac:	0211      	lsls	r1, r2, #8
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6912      	ldr	r2, [r2, #16]
 80059b2:	0852      	lsrs	r2, r2, #1
 80059b4:	3a01      	subs	r2, #1
 80059b6:	0552      	lsls	r2, r2, #21
 80059b8:	430a      	orrs	r2, r1
 80059ba:	491f      	ldr	r1, [pc, #124]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	610b      	str	r3, [r1, #16]
 80059c0:	e011      	b.n	80059e6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059c2:	4b1d      	ldr	r3, [pc, #116]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80059ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	6892      	ldr	r2, [r2, #8]
 80059d2:	0211      	lsls	r1, r2, #8
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6952      	ldr	r2, [r2, #20]
 80059d8:	0852      	lsrs	r2, r2, #1
 80059da:	3a01      	subs	r2, #1
 80059dc:	0652      	lsls	r2, r2, #25
 80059de:	430a      	orrs	r2, r1
 80059e0:	4915      	ldr	r1, [pc, #84]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80059e6:	4b14      	ldr	r3, [pc, #80]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a13      	ldr	r2, [pc, #76]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059f2:	f7fc fac1 	bl	8001f78 <HAL_GetTick>
 80059f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059f8:	e009      	b.n	8005a0e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059fa:	f7fc fabd 	bl	8001f78 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d902      	bls.n	8005a0e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	73fb      	strb	r3, [r7, #15]
          break;
 8005a0c:	e005      	b.n	8005a1a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a0e:	4b0a      	ldr	r3, [pc, #40]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d0ef      	beq.n	80059fa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d106      	bne.n	8005a2e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a20:	4b05      	ldr	r3, [pc, #20]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a22:	691a      	ldr	r2, [r3, #16]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	4903      	ldr	r1, [pc, #12]	; (8005a38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	40021000 	.word	0x40021000

08005a3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e049      	b.n	8005ae2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d106      	bne.n	8005a68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f841 	bl	8005aea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	3304      	adds	r3, #4
 8005a78:	4619      	mov	r1, r3
 8005a7a:	4610      	mov	r0, r2
 8005a7c:	f000 fb42 	bl	8006104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
	...

08005b00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d001      	beq.n	8005b18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e03b      	b.n	8005b90 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0201 	orr.w	r2, r2, #1
 8005b2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a19      	ldr	r2, [pc, #100]	; (8005b9c <HAL_TIM_Base_Start_IT+0x9c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d009      	beq.n	8005b4e <HAL_TIM_Base_Start_IT+0x4e>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b42:	d004      	beq.n	8005b4e <HAL_TIM_Base_Start_IT+0x4e>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a15      	ldr	r2, [pc, #84]	; (8005ba0 <HAL_TIM_Base_Start_IT+0xa0>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d115      	bne.n	8005b7a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	4b13      	ldr	r3, [pc, #76]	; (8005ba4 <HAL_TIM_Base_Start_IT+0xa4>)
 8005b56:	4013      	ands	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2b06      	cmp	r3, #6
 8005b5e:	d015      	beq.n	8005b8c <HAL_TIM_Base_Start_IT+0x8c>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b66:	d011      	beq.n	8005b8c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f042 0201 	orr.w	r2, r2, #1
 8005b76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b78:	e008      	b.n	8005b8c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f042 0201 	orr.w	r2, r2, #1
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	e000      	b.n	8005b8e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	40012c00 	.word	0x40012c00
 8005ba0:	40014000 	.word	0x40014000
 8005ba4:	00010007 	.word	0x00010007

08005ba8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e049      	b.n	8005c4e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d106      	bne.n	8005bd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7fb fea4 	bl	800191c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	3304      	adds	r3, #4
 8005be4:	4619      	mov	r1, r3
 8005be6:	4610      	mov	r0, r2
 8005be8:	f000 fa8c 	bl	8006104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b082      	sub	sp, #8
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d122      	bne.n	8005cb2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	f003 0302 	and.w	r3, r3, #2
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d11b      	bne.n	8005cb2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f06f 0202 	mvn.w	r2, #2
 8005c82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	f003 0303 	and.w	r3, r3, #3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d003      	beq.n	8005ca0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fa15 	bl	80060c8 <HAL_TIM_IC_CaptureCallback>
 8005c9e:	e005      	b.n	8005cac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fa07 	bl	80060b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 fa18 	bl	80060dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	f003 0304 	and.w	r3, r3, #4
 8005cbc:	2b04      	cmp	r3, #4
 8005cbe:	d122      	bne.n	8005d06 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f003 0304 	and.w	r3, r3, #4
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	d11b      	bne.n	8005d06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f06f 0204 	mvn.w	r2, #4
 8005cd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f9eb 	bl	80060c8 <HAL_TIM_IC_CaptureCallback>
 8005cf2:	e005      	b.n	8005d00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f9dd 	bl	80060b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f9ee 	bl	80060dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	f003 0308 	and.w	r3, r3, #8
 8005d10:	2b08      	cmp	r3, #8
 8005d12:	d122      	bne.n	8005d5a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	f003 0308 	and.w	r3, r3, #8
 8005d1e:	2b08      	cmp	r3, #8
 8005d20:	d11b      	bne.n	8005d5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f06f 0208 	mvn.w	r2, #8
 8005d2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2204      	movs	r2, #4
 8005d30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	f003 0303 	and.w	r3, r3, #3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f9c1 	bl	80060c8 <HAL_TIM_IC_CaptureCallback>
 8005d46:	e005      	b.n	8005d54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f9b3 	bl	80060b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f9c4 	bl	80060dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	f003 0310 	and.w	r3, r3, #16
 8005d64:	2b10      	cmp	r3, #16
 8005d66:	d122      	bne.n	8005dae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	f003 0310 	and.w	r3, r3, #16
 8005d72:	2b10      	cmp	r3, #16
 8005d74:	d11b      	bne.n	8005dae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f06f 0210 	mvn.w	r2, #16
 8005d7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2208      	movs	r2, #8
 8005d84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	69db      	ldr	r3, [r3, #28]
 8005d8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d003      	beq.n	8005d9c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 f997 	bl	80060c8 <HAL_TIM_IC_CaptureCallback>
 8005d9a:	e005      	b.n	8005da8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f989 	bl	80060b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f99a 	bl	80060dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d10e      	bne.n	8005dda <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d107      	bne.n	8005dda <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f06f 0201 	mvn.w	r2, #1
 8005dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f7fb fc8b 	bl	80016f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de4:	2b80      	cmp	r3, #128	; 0x80
 8005de6:	d10e      	bne.n	8005e06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df2:	2b80      	cmp	r3, #128	; 0x80
 8005df4:	d107      	bne.n	8005e06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 fd49 	bl	8006898 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e14:	d10e      	bne.n	8005e34 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e20:	2b80      	cmp	r3, #128	; 0x80
 8005e22:	d107      	bne.n	8005e34 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fd3c 	bl	80068ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3e:	2b40      	cmp	r3, #64	; 0x40
 8005e40:	d10e      	bne.n	8005e60 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4c:	2b40      	cmp	r3, #64	; 0x40
 8005e4e:	d107      	bne.n	8005e60 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f948 	bl	80060f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	f003 0320 	and.w	r3, r3, #32
 8005e6a:	2b20      	cmp	r3, #32
 8005e6c:	d10e      	bne.n	8005e8c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	f003 0320 	and.w	r3, r3, #32
 8005e78:	2b20      	cmp	r3, #32
 8005e7a:	d107      	bne.n	8005e8c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f06f 0220 	mvn.w	r2, #32
 8005e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fcfc 	bl	8006884 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e8c:	bf00      	nop
 8005e8e:	3708      	adds	r7, #8
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d101      	bne.n	8005eae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005eaa:	2302      	movs	r3, #2
 8005eac:	e0fd      	b.n	80060aa <HAL_TIM_PWM_ConfigChannel+0x216>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2b14      	cmp	r3, #20
 8005eba:	f200 80f0 	bhi.w	800609e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005ebe:	a201      	add	r2, pc, #4	; (adr r2, 8005ec4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec4:	08005f19 	.word	0x08005f19
 8005ec8:	0800609f 	.word	0x0800609f
 8005ecc:	0800609f 	.word	0x0800609f
 8005ed0:	0800609f 	.word	0x0800609f
 8005ed4:	08005f59 	.word	0x08005f59
 8005ed8:	0800609f 	.word	0x0800609f
 8005edc:	0800609f 	.word	0x0800609f
 8005ee0:	0800609f 	.word	0x0800609f
 8005ee4:	08005f9b 	.word	0x08005f9b
 8005ee8:	0800609f 	.word	0x0800609f
 8005eec:	0800609f 	.word	0x0800609f
 8005ef0:	0800609f 	.word	0x0800609f
 8005ef4:	08005fdb 	.word	0x08005fdb
 8005ef8:	0800609f 	.word	0x0800609f
 8005efc:	0800609f 	.word	0x0800609f
 8005f00:	0800609f 	.word	0x0800609f
 8005f04:	0800601d 	.word	0x0800601d
 8005f08:	0800609f 	.word	0x0800609f
 8005f0c:	0800609f 	.word	0x0800609f
 8005f10:	0800609f 	.word	0x0800609f
 8005f14:	0800605d 	.word	0x0800605d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68b9      	ldr	r1, [r7, #8]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 f954 	bl	80061cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699a      	ldr	r2, [r3, #24]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 0208 	orr.w	r2, r2, #8
 8005f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699a      	ldr	r2, [r3, #24]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0204 	bic.w	r2, r2, #4
 8005f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6999      	ldr	r1, [r3, #24]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	691a      	ldr	r2, [r3, #16]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	619a      	str	r2, [r3, #24]
      break;
 8005f56:	e0a3      	b.n	80060a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68b9      	ldr	r1, [r7, #8]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 f9b0 	bl	80062c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	699a      	ldr	r2, [r3, #24]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	699a      	ldr	r2, [r3, #24]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6999      	ldr	r1, [r3, #24]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	021a      	lsls	r2, r3, #8
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	430a      	orrs	r2, r1
 8005f96:	619a      	str	r2, [r3, #24]
      break;
 8005f98:	e082      	b.n	80060a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68b9      	ldr	r1, [r7, #8]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 fa09 	bl	80063b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	69da      	ldr	r2, [r3, #28]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f042 0208 	orr.w	r2, r2, #8
 8005fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	69da      	ldr	r2, [r3, #28]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 0204 	bic.w	r2, r2, #4
 8005fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	69d9      	ldr	r1, [r3, #28]
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	691a      	ldr	r2, [r3, #16]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	61da      	str	r2, [r3, #28]
      break;
 8005fd8:	e062      	b.n	80060a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68b9      	ldr	r1, [r7, #8]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 fa61 	bl	80064a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	69da      	ldr	r2, [r3, #28]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	69da      	ldr	r2, [r3, #28]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	69d9      	ldr	r1, [r3, #28]
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	021a      	lsls	r2, r3, #8
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	61da      	str	r2, [r3, #28]
      break;
 800601a:	e041      	b.n	80060a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68b9      	ldr	r1, [r7, #8]
 8006022:	4618      	mov	r0, r3
 8006024:	f000 fa9e 	bl	8006564 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0208 	orr.w	r2, r2, #8
 8006036:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 0204 	bic.w	r2, r2, #4
 8006046:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	691a      	ldr	r2, [r3, #16]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800605a:	e021      	b.n	80060a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68b9      	ldr	r1, [r7, #8]
 8006062:	4618      	mov	r0, r3
 8006064:	f000 fad6 	bl	8006614 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006076:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006086:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	021a      	lsls	r2, r3, #8
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	430a      	orrs	r2, r1
 800609a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800609c:	e000      	b.n	80060a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800609e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop

080060b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a2a      	ldr	r2, [pc, #168]	; (80061c0 <TIM_Base_SetConfig+0xbc>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d003      	beq.n	8006124 <TIM_Base_SetConfig+0x20>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006122:	d108      	bne.n	8006136 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800612a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	4313      	orrs	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a21      	ldr	r2, [pc, #132]	; (80061c0 <TIM_Base_SetConfig+0xbc>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d00b      	beq.n	8006156 <TIM_Base_SetConfig+0x52>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006144:	d007      	beq.n	8006156 <TIM_Base_SetConfig+0x52>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a1e      	ldr	r2, [pc, #120]	; (80061c4 <TIM_Base_SetConfig+0xc0>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d003      	beq.n	8006156 <TIM_Base_SetConfig+0x52>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a1d      	ldr	r2, [pc, #116]	; (80061c8 <TIM_Base_SetConfig+0xc4>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d108      	bne.n	8006168 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800615c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	4313      	orrs	r3, r2
 8006166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a0c      	ldr	r2, [pc, #48]	; (80061c0 <TIM_Base_SetConfig+0xbc>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d007      	beq.n	80061a4 <TIM_Base_SetConfig+0xa0>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a0b      	ldr	r2, [pc, #44]	; (80061c4 <TIM_Base_SetConfig+0xc0>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d003      	beq.n	80061a4 <TIM_Base_SetConfig+0xa0>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a0a      	ldr	r2, [pc, #40]	; (80061c8 <TIM_Base_SetConfig+0xc4>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d103      	bne.n	80061ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	691a      	ldr	r2, [r3, #16]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	615a      	str	r2, [r3, #20]
}
 80061b2:	bf00      	nop
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	40012c00 	.word	0x40012c00
 80061c4:	40014000 	.word	0x40014000
 80061c8:	40014400 	.word	0x40014400

080061cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	f023 0201 	bic.w	r2, r3, #1
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f023 0303 	bic.w	r3, r3, #3
 8006206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	4313      	orrs	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f023 0302 	bic.w	r3, r3, #2
 8006218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	4313      	orrs	r3, r2
 8006222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a24      	ldr	r2, [pc, #144]	; (80062b8 <TIM_OC1_SetConfig+0xec>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d007      	beq.n	800623c <TIM_OC1_SetConfig+0x70>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a23      	ldr	r2, [pc, #140]	; (80062bc <TIM_OC1_SetConfig+0xf0>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d003      	beq.n	800623c <TIM_OC1_SetConfig+0x70>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a22      	ldr	r2, [pc, #136]	; (80062c0 <TIM_OC1_SetConfig+0xf4>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d10c      	bne.n	8006256 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f023 0308 	bic.w	r3, r3, #8
 8006242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	4313      	orrs	r3, r2
 800624c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f023 0304 	bic.w	r3, r3, #4
 8006254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a17      	ldr	r2, [pc, #92]	; (80062b8 <TIM_OC1_SetConfig+0xec>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d007      	beq.n	800626e <TIM_OC1_SetConfig+0xa2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a16      	ldr	r2, [pc, #88]	; (80062bc <TIM_OC1_SetConfig+0xf0>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d003      	beq.n	800626e <TIM_OC1_SetConfig+0xa2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a15      	ldr	r2, [pc, #84]	; (80062c0 <TIM_OC1_SetConfig+0xf4>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d111      	bne.n	8006292 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006274:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800627c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	4313      	orrs	r3, r2
 8006286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	4313      	orrs	r3, r2
 8006290:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	621a      	str	r2, [r3, #32]
}
 80062ac:	bf00      	nop
 80062ae:	371c      	adds	r7, #28
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	40012c00 	.word	0x40012c00
 80062bc:	40014000 	.word	0x40014000
 80062c0:	40014400 	.word	0x40014400

080062c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	f023 0210 	bic.w	r2, r3, #16
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	021b      	lsls	r3, r3, #8
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	4313      	orrs	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f023 0320 	bic.w	r3, r3, #32
 8006312:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	011b      	lsls	r3, r3, #4
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4313      	orrs	r3, r2
 800631e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a22      	ldr	r2, [pc, #136]	; (80063ac <TIM_OC2_SetConfig+0xe8>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d10d      	bne.n	8006344 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800632e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	011b      	lsls	r3, r3, #4
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	4313      	orrs	r3, r2
 800633a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006342:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a19      	ldr	r2, [pc, #100]	; (80063ac <TIM_OC2_SetConfig+0xe8>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d007      	beq.n	800635c <TIM_OC2_SetConfig+0x98>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a18      	ldr	r2, [pc, #96]	; (80063b0 <TIM_OC2_SetConfig+0xec>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d003      	beq.n	800635c <TIM_OC2_SetConfig+0x98>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a17      	ldr	r2, [pc, #92]	; (80063b4 <TIM_OC2_SetConfig+0xf0>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d113      	bne.n	8006384 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006362:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800636a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	4313      	orrs	r3, r2
 8006376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	4313      	orrs	r3, r2
 8006382:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	621a      	str	r2, [r3, #32]
}
 800639e:	bf00      	nop
 80063a0:	371c      	adds	r7, #28
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	40012c00 	.word	0x40012c00
 80063b0:	40014000 	.word	0x40014000
 80063b4:	40014400 	.word	0x40014400

080063b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0303 	bic.w	r3, r3, #3
 80063f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	021b      	lsls	r3, r3, #8
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	4313      	orrs	r3, r2
 8006410:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a21      	ldr	r2, [pc, #132]	; (800649c <TIM_OC3_SetConfig+0xe4>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d10d      	bne.n	8006436 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006420:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	021b      	lsls	r3, r3, #8
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	4313      	orrs	r3, r2
 800642c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a18      	ldr	r2, [pc, #96]	; (800649c <TIM_OC3_SetConfig+0xe4>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d007      	beq.n	800644e <TIM_OC3_SetConfig+0x96>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a17      	ldr	r2, [pc, #92]	; (80064a0 <TIM_OC3_SetConfig+0xe8>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d003      	beq.n	800644e <TIM_OC3_SetConfig+0x96>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a16      	ldr	r2, [pc, #88]	; (80064a4 <TIM_OC3_SetConfig+0xec>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d113      	bne.n	8006476 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800645c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	011b      	lsls	r3, r3, #4
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	4313      	orrs	r3, r2
 8006468:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	011b      	lsls	r3, r3, #4
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	4313      	orrs	r3, r2
 8006474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	621a      	str	r2, [r3, #32]
}
 8006490:	bf00      	nop
 8006492:	371c      	adds	r7, #28
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	40012c00 	.word	0x40012c00
 80064a0:	40014000 	.word	0x40014000
 80064a4:	40014400 	.word	0x40014400

080064a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	69db      	ldr	r3, [r3, #28]
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	021b      	lsls	r3, r3, #8
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	031b      	lsls	r3, r3, #12
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	4313      	orrs	r3, r2
 8006502:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a14      	ldr	r2, [pc, #80]	; (8006558 <TIM_OC4_SetConfig+0xb0>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d007      	beq.n	800651c <TIM_OC4_SetConfig+0x74>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a13      	ldr	r2, [pc, #76]	; (800655c <TIM_OC4_SetConfig+0xb4>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d003      	beq.n	800651c <TIM_OC4_SetConfig+0x74>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a12      	ldr	r2, [pc, #72]	; (8006560 <TIM_OC4_SetConfig+0xb8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d109      	bne.n	8006530 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006522:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	019b      	lsls	r3, r3, #6
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	4313      	orrs	r3, r2
 800652e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	621a      	str	r2, [r3, #32]
}
 800654a:	bf00      	nop
 800654c:	371c      	adds	r7, #28
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	40012c00 	.word	0x40012c00
 800655c:	40014000 	.word	0x40014000
 8006560:	40014400 	.word	0x40014400

08006564 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800658a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80065a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	041b      	lsls	r3, r3, #16
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a13      	ldr	r2, [pc, #76]	; (8006608 <TIM_OC5_SetConfig+0xa4>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d007      	beq.n	80065ce <TIM_OC5_SetConfig+0x6a>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a12      	ldr	r2, [pc, #72]	; (800660c <TIM_OC5_SetConfig+0xa8>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d003      	beq.n	80065ce <TIM_OC5_SetConfig+0x6a>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a11      	ldr	r2, [pc, #68]	; (8006610 <TIM_OC5_SetConfig+0xac>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d109      	bne.n	80065e2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	021b      	lsls	r3, r3, #8
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	4313      	orrs	r3, r2
 80065e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	621a      	str	r2, [r3, #32]
}
 80065fc:	bf00      	nop
 80065fe:	371c      	adds	r7, #28
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	40012c00 	.word	0x40012c00
 800660c:	40014000 	.word	0x40014000
 8006610:	40014400 	.word	0x40014400

08006614 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006614:	b480      	push	{r7}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800663a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	021b      	lsls	r3, r3, #8
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	4313      	orrs	r3, r2
 8006652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800665a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	051b      	lsls	r3, r3, #20
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	4313      	orrs	r3, r2
 8006666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a14      	ldr	r2, [pc, #80]	; (80066bc <TIM_OC6_SetConfig+0xa8>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d007      	beq.n	8006680 <TIM_OC6_SetConfig+0x6c>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a13      	ldr	r2, [pc, #76]	; (80066c0 <TIM_OC6_SetConfig+0xac>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d003      	beq.n	8006680 <TIM_OC6_SetConfig+0x6c>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a12      	ldr	r2, [pc, #72]	; (80066c4 <TIM_OC6_SetConfig+0xb0>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d109      	bne.n	8006694 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006686:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	695b      	ldr	r3, [r3, #20]
 800668c:	029b      	lsls	r3, r3, #10
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	4313      	orrs	r3, r2
 8006692:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	621a      	str	r2, [r3, #32]
}
 80066ae:	bf00      	nop
 80066b0:	371c      	adds	r7, #28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	40012c00 	.word	0x40012c00
 80066c0:	40014000 	.word	0x40014000
 80066c4:	40014400 	.word	0x40014400

080066c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d101      	bne.n	80066e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066dc:	2302      	movs	r3, #2
 80066de:	e04f      	b.n	8006780 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a21      	ldr	r2, [pc, #132]	; (800678c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d108      	bne.n	800671c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006710:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	4313      	orrs	r3, r2
 800671a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006722:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	4313      	orrs	r3, r2
 800672c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a14      	ldr	r2, [pc, #80]	; (800678c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d009      	beq.n	8006754 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006748:	d004      	beq.n	8006754 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a10      	ldr	r2, [pc, #64]	; (8006790 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d10c      	bne.n	800676e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800675a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	4313      	orrs	r3, r2
 8006764:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3714      	adds	r7, #20
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr
 800678c:	40012c00 	.word	0x40012c00
 8006790:	40014000 	.word	0x40014000

08006794 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800679e:	2300      	movs	r3, #0
 80067a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d101      	bne.n	80067b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80067ac:	2302      	movs	r3, #2
 80067ae:	e060      	b.n	8006872 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	4313      	orrs	r3, r2
 80067e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	4313      	orrs	r3, r2
 800680a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006816:	4313      	orrs	r3, r2
 8006818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	041b      	lsls	r3, r3, #16
 8006826:	4313      	orrs	r3, r2
 8006828:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a14      	ldr	r2, [pc, #80]	; (8006880 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d115      	bne.n	8006860 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683e:	051b      	lsls	r3, r3, #20
 8006840:	4313      	orrs	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	4313      	orrs	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	6a1b      	ldr	r3, [r3, #32]
 800685c:	4313      	orrs	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3714      	adds	r7, #20
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	40012c00 	.word	0x40012c00

08006884 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e040      	b.n	8006954 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d106      	bne.n	80068e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7fb f8aa 	bl	8001a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2224      	movs	r2, #36	; 0x24
 80068ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f022 0201 	bic.w	r2, r2, #1
 80068fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f8c0 	bl	8006a84 <UART_SetConfig>
 8006904:	4603      	mov	r3, r0
 8006906:	2b01      	cmp	r3, #1
 8006908:	d101      	bne.n	800690e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e022      	b.n	8006954 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006912:	2b00      	cmp	r3, #0
 8006914:	d002      	beq.n	800691c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fac0 	bl	8006e9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800692a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	689a      	ldr	r2, [r3, #8]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800693a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f042 0201 	orr.w	r2, r2, #1
 800694a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fb47 	bl	8006fe0 <UART_CheckIdleState>
 8006952:	4603      	mov	r3, r0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3708      	adds	r7, #8
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b08a      	sub	sp, #40	; 0x28
 8006960:	af02      	add	r7, sp, #8
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	603b      	str	r3, [r7, #0]
 8006968:	4613      	mov	r3, r2
 800696a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006970:	2b20      	cmp	r3, #32
 8006972:	f040 8082 	bne.w	8006a7a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d002      	beq.n	8006982 <HAL_UART_Transmit+0x26>
 800697c:	88fb      	ldrh	r3, [r7, #6]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e07a      	b.n	8006a7c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800698c:	2b01      	cmp	r3, #1
 800698e:	d101      	bne.n	8006994 <HAL_UART_Transmit+0x38>
 8006990:	2302      	movs	r3, #2
 8006992:	e073      	b.n	8006a7c <HAL_UART_Transmit+0x120>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2221      	movs	r2, #33	; 0x21
 80069a8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069aa:	f7fb fae5 	bl	8001f78 <HAL_GetTick>
 80069ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	88fa      	ldrh	r2, [r7, #6]
 80069b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	88fa      	ldrh	r2, [r7, #6]
 80069bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c8:	d108      	bne.n	80069dc <HAL_UART_Transmit+0x80>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d104      	bne.n	80069dc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80069d2:	2300      	movs	r3, #0
 80069d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	61bb      	str	r3, [r7, #24]
 80069da:	e003      	b.n	80069e4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069e0:	2300      	movs	r3, #0
 80069e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80069ec:	e02d      	b.n	8006a4a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2200      	movs	r2, #0
 80069f6:	2180      	movs	r1, #128	; 0x80
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f000 fb3a 	bl	8007072 <UART_WaitOnFlagUntilTimeout>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d001      	beq.n	8006a08 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e039      	b.n	8006a7c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10b      	bne.n	8006a26 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	881a      	ldrh	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a1a:	b292      	uxth	r2, r2
 8006a1c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	3302      	adds	r3, #2
 8006a22:	61bb      	str	r3, [r7, #24]
 8006a24:	e008      	b.n	8006a38 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	781a      	ldrb	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	b292      	uxth	r2, r2
 8006a30:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	3301      	adds	r3, #1
 8006a36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	3b01      	subs	r3, #1
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1cb      	bne.n	80069ee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	2140      	movs	r1, #64	; 0x40
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f000 fb06 	bl	8007072 <UART_WaitOnFlagUntilTimeout>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d001      	beq.n	8006a70 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e005      	b.n	8006a7c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2220      	movs	r2, #32
 8006a74:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006a76:	2300      	movs	r3, #0
 8006a78:	e000      	b.n	8006a7c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006a7a:	2302      	movs	r3, #2
  }
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3720      	adds	r7, #32
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a84:	b5b0      	push	{r4, r5, r7, lr}
 8006a86:	b088      	sub	sp, #32
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689a      	ldr	r2, [r3, #8]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	69db      	ldr	r3, [r3, #28]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	4baf      	ldr	r3, [pc, #700]	; (8006d6c <UART_SetConfig+0x2e8>)
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	6812      	ldr	r2, [r2, #0]
 8006ab6:	69f9      	ldr	r1, [r7, #28]
 8006ab8:	430b      	orrs	r3, r1
 8006aba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68da      	ldr	r2, [r3, #12]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4aa4      	ldr	r2, [pc, #656]	; (8006d70 <UART_SetConfig+0x2ec>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d004      	beq.n	8006aec <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	69fa      	ldr	r2, [r7, #28]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	69fa      	ldr	r2, [r7, #28]
 8006afc:	430a      	orrs	r2, r1
 8006afe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a9b      	ldr	r2, [pc, #620]	; (8006d74 <UART_SetConfig+0x2f0>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d121      	bne.n	8006b4e <UART_SetConfig+0xca>
 8006b0a:	4b9b      	ldr	r3, [pc, #620]	; (8006d78 <UART_SetConfig+0x2f4>)
 8006b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b10:	f003 0303 	and.w	r3, r3, #3
 8006b14:	2b03      	cmp	r3, #3
 8006b16:	d817      	bhi.n	8006b48 <UART_SetConfig+0xc4>
 8006b18:	a201      	add	r2, pc, #4	; (adr r2, 8006b20 <UART_SetConfig+0x9c>)
 8006b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1e:	bf00      	nop
 8006b20:	08006b31 	.word	0x08006b31
 8006b24:	08006b3d 	.word	0x08006b3d
 8006b28:	08006b37 	.word	0x08006b37
 8006b2c:	08006b43 	.word	0x08006b43
 8006b30:	2301      	movs	r3, #1
 8006b32:	76fb      	strb	r3, [r7, #27]
 8006b34:	e070      	b.n	8006c18 <UART_SetConfig+0x194>
 8006b36:	2302      	movs	r3, #2
 8006b38:	76fb      	strb	r3, [r7, #27]
 8006b3a:	e06d      	b.n	8006c18 <UART_SetConfig+0x194>
 8006b3c:	2304      	movs	r3, #4
 8006b3e:	76fb      	strb	r3, [r7, #27]
 8006b40:	e06a      	b.n	8006c18 <UART_SetConfig+0x194>
 8006b42:	2308      	movs	r3, #8
 8006b44:	76fb      	strb	r3, [r7, #27]
 8006b46:	e067      	b.n	8006c18 <UART_SetConfig+0x194>
 8006b48:	2310      	movs	r3, #16
 8006b4a:	76fb      	strb	r3, [r7, #27]
 8006b4c:	e064      	b.n	8006c18 <UART_SetConfig+0x194>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a8a      	ldr	r2, [pc, #552]	; (8006d7c <UART_SetConfig+0x2f8>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d132      	bne.n	8006bbe <UART_SetConfig+0x13a>
 8006b58:	4b87      	ldr	r3, [pc, #540]	; (8006d78 <UART_SetConfig+0x2f4>)
 8006b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b5e:	f003 030c 	and.w	r3, r3, #12
 8006b62:	2b0c      	cmp	r3, #12
 8006b64:	d828      	bhi.n	8006bb8 <UART_SetConfig+0x134>
 8006b66:	a201      	add	r2, pc, #4	; (adr r2, 8006b6c <UART_SetConfig+0xe8>)
 8006b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6c:	08006ba1 	.word	0x08006ba1
 8006b70:	08006bb9 	.word	0x08006bb9
 8006b74:	08006bb9 	.word	0x08006bb9
 8006b78:	08006bb9 	.word	0x08006bb9
 8006b7c:	08006bad 	.word	0x08006bad
 8006b80:	08006bb9 	.word	0x08006bb9
 8006b84:	08006bb9 	.word	0x08006bb9
 8006b88:	08006bb9 	.word	0x08006bb9
 8006b8c:	08006ba7 	.word	0x08006ba7
 8006b90:	08006bb9 	.word	0x08006bb9
 8006b94:	08006bb9 	.word	0x08006bb9
 8006b98:	08006bb9 	.word	0x08006bb9
 8006b9c:	08006bb3 	.word	0x08006bb3
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	76fb      	strb	r3, [r7, #27]
 8006ba4:	e038      	b.n	8006c18 <UART_SetConfig+0x194>
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	76fb      	strb	r3, [r7, #27]
 8006baa:	e035      	b.n	8006c18 <UART_SetConfig+0x194>
 8006bac:	2304      	movs	r3, #4
 8006bae:	76fb      	strb	r3, [r7, #27]
 8006bb0:	e032      	b.n	8006c18 <UART_SetConfig+0x194>
 8006bb2:	2308      	movs	r3, #8
 8006bb4:	76fb      	strb	r3, [r7, #27]
 8006bb6:	e02f      	b.n	8006c18 <UART_SetConfig+0x194>
 8006bb8:	2310      	movs	r3, #16
 8006bba:	76fb      	strb	r3, [r7, #27]
 8006bbc:	e02c      	b.n	8006c18 <UART_SetConfig+0x194>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a6b      	ldr	r2, [pc, #428]	; (8006d70 <UART_SetConfig+0x2ec>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d125      	bne.n	8006c14 <UART_SetConfig+0x190>
 8006bc8:	4b6b      	ldr	r3, [pc, #428]	; (8006d78 <UART_SetConfig+0x2f4>)
 8006bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006bd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bd6:	d017      	beq.n	8006c08 <UART_SetConfig+0x184>
 8006bd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bdc:	d817      	bhi.n	8006c0e <UART_SetConfig+0x18a>
 8006bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006be2:	d00b      	beq.n	8006bfc <UART_SetConfig+0x178>
 8006be4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006be8:	d811      	bhi.n	8006c0e <UART_SetConfig+0x18a>
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d003      	beq.n	8006bf6 <UART_SetConfig+0x172>
 8006bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bf2:	d006      	beq.n	8006c02 <UART_SetConfig+0x17e>
 8006bf4:	e00b      	b.n	8006c0e <UART_SetConfig+0x18a>
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	76fb      	strb	r3, [r7, #27]
 8006bfa:	e00d      	b.n	8006c18 <UART_SetConfig+0x194>
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	76fb      	strb	r3, [r7, #27]
 8006c00:	e00a      	b.n	8006c18 <UART_SetConfig+0x194>
 8006c02:	2304      	movs	r3, #4
 8006c04:	76fb      	strb	r3, [r7, #27]
 8006c06:	e007      	b.n	8006c18 <UART_SetConfig+0x194>
 8006c08:	2308      	movs	r3, #8
 8006c0a:	76fb      	strb	r3, [r7, #27]
 8006c0c:	e004      	b.n	8006c18 <UART_SetConfig+0x194>
 8006c0e:	2310      	movs	r3, #16
 8006c10:	76fb      	strb	r3, [r7, #27]
 8006c12:	e001      	b.n	8006c18 <UART_SetConfig+0x194>
 8006c14:	2310      	movs	r3, #16
 8006c16:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a54      	ldr	r2, [pc, #336]	; (8006d70 <UART_SetConfig+0x2ec>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d173      	bne.n	8006d0a <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c22:	7efb      	ldrb	r3, [r7, #27]
 8006c24:	2b08      	cmp	r3, #8
 8006c26:	d824      	bhi.n	8006c72 <UART_SetConfig+0x1ee>
 8006c28:	a201      	add	r2, pc, #4	; (adr r2, 8006c30 <UART_SetConfig+0x1ac>)
 8006c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2e:	bf00      	nop
 8006c30:	08006c55 	.word	0x08006c55
 8006c34:	08006c73 	.word	0x08006c73
 8006c38:	08006c5d 	.word	0x08006c5d
 8006c3c:	08006c73 	.word	0x08006c73
 8006c40:	08006c63 	.word	0x08006c63
 8006c44:	08006c73 	.word	0x08006c73
 8006c48:	08006c73 	.word	0x08006c73
 8006c4c:	08006c73 	.word	0x08006c73
 8006c50:	08006c6b 	.word	0x08006c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c54:	f7fe fb3e 	bl	80052d4 <HAL_RCC_GetPCLK1Freq>
 8006c58:	6178      	str	r0, [r7, #20]
        break;
 8006c5a:	e00f      	b.n	8006c7c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c5c:	4b48      	ldr	r3, [pc, #288]	; (8006d80 <UART_SetConfig+0x2fc>)
 8006c5e:	617b      	str	r3, [r7, #20]
        break;
 8006c60:	e00c      	b.n	8006c7c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c62:	f7fe faa1 	bl	80051a8 <HAL_RCC_GetSysClockFreq>
 8006c66:	6178      	str	r0, [r7, #20]
        break;
 8006c68:	e008      	b.n	8006c7c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c6e:	617b      	str	r3, [r7, #20]
        break;
 8006c70:	e004      	b.n	8006c7c <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	76bb      	strb	r3, [r7, #26]
        break;
 8006c7a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f000 80fe 	beq.w	8006e80 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685a      	ldr	r2, [r3, #4]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	005b      	lsls	r3, r3, #1
 8006c8c:	4413      	add	r3, r2
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d305      	bcc.n	8006ca0 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d902      	bls.n	8006ca6 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	76bb      	strb	r3, [r7, #26]
 8006ca4:	e0ec      	b.n	8006e80 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f04f 0100 	mov.w	r1, #0
 8006cae:	f04f 0200 	mov.w	r2, #0
 8006cb2:	f04f 0300 	mov.w	r3, #0
 8006cb6:	020b      	lsls	r3, r1, #8
 8006cb8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006cbc:	0202      	lsls	r2, r0, #8
 8006cbe:	6879      	ldr	r1, [r7, #4]
 8006cc0:	6849      	ldr	r1, [r1, #4]
 8006cc2:	0849      	lsrs	r1, r1, #1
 8006cc4:	4608      	mov	r0, r1
 8006cc6:	f04f 0100 	mov.w	r1, #0
 8006cca:	1814      	adds	r4, r2, r0
 8006ccc:	eb43 0501 	adc.w	r5, r3, r1
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	f04f 0300 	mov.w	r3, #0
 8006cda:	4620      	mov	r0, r4
 8006cdc:	4629      	mov	r1, r5
 8006cde:	f7f9 ff63 	bl	8000ba8 <__aeabi_uldivmod>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cf0:	d308      	bcc.n	8006d04 <UART_SetConfig+0x280>
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cf8:	d204      	bcs.n	8006d04 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	60da      	str	r2, [r3, #12]
 8006d02:	e0bd      	b.n	8006e80 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	76bb      	strb	r3, [r7, #26]
 8006d08:	e0ba      	b.n	8006e80 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d12:	d168      	bne.n	8006de6 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8006d14:	7efb      	ldrb	r3, [r7, #27]
 8006d16:	2b08      	cmp	r3, #8
 8006d18:	d834      	bhi.n	8006d84 <UART_SetConfig+0x300>
 8006d1a:	a201      	add	r2, pc, #4	; (adr r2, 8006d20 <UART_SetConfig+0x29c>)
 8006d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d20:	08006d45 	.word	0x08006d45
 8006d24:	08006d4d 	.word	0x08006d4d
 8006d28:	08006d55 	.word	0x08006d55
 8006d2c:	08006d85 	.word	0x08006d85
 8006d30:	08006d5b 	.word	0x08006d5b
 8006d34:	08006d85 	.word	0x08006d85
 8006d38:	08006d85 	.word	0x08006d85
 8006d3c:	08006d85 	.word	0x08006d85
 8006d40:	08006d63 	.word	0x08006d63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d44:	f7fe fac6 	bl	80052d4 <HAL_RCC_GetPCLK1Freq>
 8006d48:	6178      	str	r0, [r7, #20]
        break;
 8006d4a:	e020      	b.n	8006d8e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d4c:	f7fe fad8 	bl	8005300 <HAL_RCC_GetPCLK2Freq>
 8006d50:	6178      	str	r0, [r7, #20]
        break;
 8006d52:	e01c      	b.n	8006d8e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d54:	4b0a      	ldr	r3, [pc, #40]	; (8006d80 <UART_SetConfig+0x2fc>)
 8006d56:	617b      	str	r3, [r7, #20]
        break;
 8006d58:	e019      	b.n	8006d8e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d5a:	f7fe fa25 	bl	80051a8 <HAL_RCC_GetSysClockFreq>
 8006d5e:	6178      	str	r0, [r7, #20]
        break;
 8006d60:	e015      	b.n	8006d8e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d66:	617b      	str	r3, [r7, #20]
        break;
 8006d68:	e011      	b.n	8006d8e <UART_SetConfig+0x30a>
 8006d6a:	bf00      	nop
 8006d6c:	efff69f3 	.word	0xefff69f3
 8006d70:	40008000 	.word	0x40008000
 8006d74:	40013800 	.word	0x40013800
 8006d78:	40021000 	.word	0x40021000
 8006d7c:	40004400 	.word	0x40004400
 8006d80:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006d84:	2300      	movs	r3, #0
 8006d86:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	76bb      	strb	r3, [r7, #26]
        break;
 8006d8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d075      	beq.n	8006e80 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	005a      	lsls	r2, r3, #1
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	085b      	lsrs	r3, r3, #1
 8006d9e:	441a      	add	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	2b0f      	cmp	r3, #15
 8006db0:	d916      	bls.n	8006de0 <UART_SetConfig+0x35c>
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006db8:	d212      	bcs.n	8006de0 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	f023 030f 	bic.w	r3, r3, #15
 8006dc2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	085b      	lsrs	r3, r3, #1
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	f003 0307 	and.w	r3, r3, #7
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	89fb      	ldrh	r3, [r7, #14]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	89fa      	ldrh	r2, [r7, #14]
 8006ddc:	60da      	str	r2, [r3, #12]
 8006dde:	e04f      	b.n	8006e80 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	76bb      	strb	r3, [r7, #26]
 8006de4:	e04c      	b.n	8006e80 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006de6:	7efb      	ldrb	r3, [r7, #27]
 8006de8:	2b08      	cmp	r3, #8
 8006dea:	d828      	bhi.n	8006e3e <UART_SetConfig+0x3ba>
 8006dec:	a201      	add	r2, pc, #4	; (adr r2, 8006df4 <UART_SetConfig+0x370>)
 8006dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df2:	bf00      	nop
 8006df4:	08006e19 	.word	0x08006e19
 8006df8:	08006e21 	.word	0x08006e21
 8006dfc:	08006e29 	.word	0x08006e29
 8006e00:	08006e3f 	.word	0x08006e3f
 8006e04:	08006e2f 	.word	0x08006e2f
 8006e08:	08006e3f 	.word	0x08006e3f
 8006e0c:	08006e3f 	.word	0x08006e3f
 8006e10:	08006e3f 	.word	0x08006e3f
 8006e14:	08006e37 	.word	0x08006e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e18:	f7fe fa5c 	bl	80052d4 <HAL_RCC_GetPCLK1Freq>
 8006e1c:	6178      	str	r0, [r7, #20]
        break;
 8006e1e:	e013      	b.n	8006e48 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e20:	f7fe fa6e 	bl	8005300 <HAL_RCC_GetPCLK2Freq>
 8006e24:	6178      	str	r0, [r7, #20]
        break;
 8006e26:	e00f      	b.n	8006e48 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e28:	4b1b      	ldr	r3, [pc, #108]	; (8006e98 <UART_SetConfig+0x414>)
 8006e2a:	617b      	str	r3, [r7, #20]
        break;
 8006e2c:	e00c      	b.n	8006e48 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e2e:	f7fe f9bb 	bl	80051a8 <HAL_RCC_GetSysClockFreq>
 8006e32:	6178      	str	r0, [r7, #20]
        break;
 8006e34:	e008      	b.n	8006e48 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e3a:	617b      	str	r3, [r7, #20]
        break;
 8006e3c:	e004      	b.n	8006e48 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	76bb      	strb	r3, [r7, #26]
        break;
 8006e46:	bf00      	nop
    }

    if (pclk != 0U)
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d018      	beq.n	8006e80 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	085a      	lsrs	r2, r3, #1
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	441a      	add	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	2b0f      	cmp	r3, #15
 8006e68:	d908      	bls.n	8006e7c <UART_SetConfig+0x3f8>
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e70:	d204      	bcs.n	8006e7c <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	60da      	str	r2, [r3, #12]
 8006e7a:	e001      	b.n	8006e80 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006e8c:	7ebb      	ldrb	r3, [r7, #26]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3720      	adds	r7, #32
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bdb0      	pop	{r4, r5, r7, pc}
 8006e96:	bf00      	nop
 8006e98:	00f42400 	.word	0x00f42400

08006e9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea8:	f003 0301 	and.w	r3, r3, #1
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00a      	beq.n	8006ec6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eca:	f003 0302 	and.w	r3, r3, #2
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00a      	beq.n	8006ee8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	430a      	orrs	r2, r1
 8006ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eec:	f003 0304 	and.w	r3, r3, #4
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00a      	beq.n	8006f0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	430a      	orrs	r2, r1
 8006f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	f003 0308 	and.w	r3, r3, #8
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f30:	f003 0310 	and.w	r3, r3, #16
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00a      	beq.n	8006f4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f52:	f003 0320 	and.w	r3, r3, #32
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00a      	beq.n	8006f70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	430a      	orrs	r2, r1
 8006f6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d01a      	beq.n	8006fb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f9a:	d10a      	bne.n	8006fb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	430a      	orrs	r2, r1
 8006fb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00a      	beq.n	8006fd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	605a      	str	r2, [r3, #4]
  }
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af02      	add	r7, sp, #8
 8006fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ff0:	f7fa ffc2 	bl	8001f78 <HAL_GetTick>
 8006ff4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0308 	and.w	r3, r3, #8
 8007000:	2b08      	cmp	r3, #8
 8007002:	d10e      	bne.n	8007022 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007004:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f82d 	bl	8007072 <UART_WaitOnFlagUntilTimeout>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d001      	beq.n	8007022 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e023      	b.n	800706a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0304 	and.w	r3, r3, #4
 800702c:	2b04      	cmp	r3, #4
 800702e:	d10e      	bne.n	800704e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007030:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f817 	bl	8007072 <UART_WaitOnFlagUntilTimeout>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e00d      	b.n	800706a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2220      	movs	r2, #32
 8007052:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2220      	movs	r2, #32
 8007058:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b084      	sub	sp, #16
 8007076:	af00      	add	r7, sp, #0
 8007078:	60f8      	str	r0, [r7, #12]
 800707a:	60b9      	str	r1, [r7, #8]
 800707c:	603b      	str	r3, [r7, #0]
 800707e:	4613      	mov	r3, r2
 8007080:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007082:	e05e      	b.n	8007142 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708a:	d05a      	beq.n	8007142 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800708c:	f7fa ff74 	bl	8001f78 <HAL_GetTick>
 8007090:	4602      	mov	r2, r0
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	69ba      	ldr	r2, [r7, #24]
 8007098:	429a      	cmp	r2, r3
 800709a:	d302      	bcc.n	80070a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d11b      	bne.n	80070da <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80070b0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689a      	ldr	r2, [r3, #8]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f022 0201 	bic.w	r2, r2, #1
 80070c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2220      	movs	r2, #32
 80070c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2220      	movs	r2, #32
 80070cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e043      	b.n	8007162 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0304 	and.w	r3, r3, #4
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d02c      	beq.n	8007142 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070f6:	d124      	bne.n	8007142 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007100:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007110:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689a      	ldr	r2, [r3, #8]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f022 0201 	bic.w	r2, r2, #1
 8007120:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2220      	movs	r2, #32
 8007126:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2220      	movs	r2, #32
 800712c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2220      	movs	r2, #32
 8007132:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e00f      	b.n	8007162 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	69da      	ldr	r2, [r3, #28]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	4013      	ands	r3, r2
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	429a      	cmp	r2, r3
 8007150:	bf0c      	ite	eq
 8007152:	2301      	moveq	r3, #1
 8007154:	2300      	movne	r3, #0
 8007156:	b2db      	uxtb	r3, r3
 8007158:	461a      	mov	r2, r3
 800715a:	79fb      	ldrb	r3, [r7, #7]
 800715c:	429a      	cmp	r2, r3
 800715e:	d091      	beq.n	8007084 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <__NVIC_SetPriority>:
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	4603      	mov	r3, r0
 8007174:	6039      	str	r1, [r7, #0]
 8007176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800717c:	2b00      	cmp	r3, #0
 800717e:	db0a      	blt.n	8007196 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	b2da      	uxtb	r2, r3
 8007184:	490c      	ldr	r1, [pc, #48]	; (80071b8 <__NVIC_SetPriority+0x4c>)
 8007186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800718a:	0112      	lsls	r2, r2, #4
 800718c:	b2d2      	uxtb	r2, r2
 800718e:	440b      	add	r3, r1
 8007190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007194:	e00a      	b.n	80071ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	b2da      	uxtb	r2, r3
 800719a:	4908      	ldr	r1, [pc, #32]	; (80071bc <__NVIC_SetPriority+0x50>)
 800719c:	79fb      	ldrb	r3, [r7, #7]
 800719e:	f003 030f 	and.w	r3, r3, #15
 80071a2:	3b04      	subs	r3, #4
 80071a4:	0112      	lsls	r2, r2, #4
 80071a6:	b2d2      	uxtb	r2, r2
 80071a8:	440b      	add	r3, r1
 80071aa:	761a      	strb	r2, [r3, #24]
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	e000e100 	.word	0xe000e100
 80071bc:	e000ed00 	.word	0xe000ed00

080071c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80071c0:	b580      	push	{r7, lr}
 80071c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80071c4:	4b05      	ldr	r3, [pc, #20]	; (80071dc <SysTick_Handler+0x1c>)
 80071c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80071c8:	f001 fcfe 	bl	8008bc8 <xTaskGetSchedulerState>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d001      	beq.n	80071d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80071d2:	f002 fae9 	bl	80097a8 <xPortSysTickHandler>
  }
}
 80071d6:	bf00      	nop
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	e000e010 	.word	0xe000e010

080071e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80071e0:	b580      	push	{r7, lr}
 80071e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80071e4:	2100      	movs	r1, #0
 80071e6:	f06f 0004 	mvn.w	r0, #4
 80071ea:	f7ff ffbf 	bl	800716c <__NVIC_SetPriority>
#endif
}
 80071ee:	bf00      	nop
 80071f0:	bd80      	pop	{r7, pc}
	...

080071f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071fa:	f3ef 8305 	mrs	r3, IPSR
 80071fe:	603b      	str	r3, [r7, #0]
  return(result);
 8007200:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007206:	f06f 0305 	mvn.w	r3, #5
 800720a:	607b      	str	r3, [r7, #4]
 800720c:	e00c      	b.n	8007228 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800720e:	4b0a      	ldr	r3, [pc, #40]	; (8007238 <osKernelInitialize+0x44>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d105      	bne.n	8007222 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007216:	4b08      	ldr	r3, [pc, #32]	; (8007238 <osKernelInitialize+0x44>)
 8007218:	2201      	movs	r2, #1
 800721a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800721c:	2300      	movs	r3, #0
 800721e:	607b      	str	r3, [r7, #4]
 8007220:	e002      	b.n	8007228 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007222:	f04f 33ff 	mov.w	r3, #4294967295
 8007226:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007228:	687b      	ldr	r3, [r7, #4]
}
 800722a:	4618      	mov	r0, r3
 800722c:	370c      	adds	r7, #12
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	20000204 	.word	0x20000204

0800723c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007242:	f3ef 8305 	mrs	r3, IPSR
 8007246:	603b      	str	r3, [r7, #0]
  return(result);
 8007248:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800724a:	2b00      	cmp	r3, #0
 800724c:	d003      	beq.n	8007256 <osKernelStart+0x1a>
    stat = osErrorISR;
 800724e:	f06f 0305 	mvn.w	r3, #5
 8007252:	607b      	str	r3, [r7, #4]
 8007254:	e010      	b.n	8007278 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007256:	4b0b      	ldr	r3, [pc, #44]	; (8007284 <osKernelStart+0x48>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d109      	bne.n	8007272 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800725e:	f7ff ffbf 	bl	80071e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007262:	4b08      	ldr	r3, [pc, #32]	; (8007284 <osKernelStart+0x48>)
 8007264:	2202      	movs	r2, #2
 8007266:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007268:	f001 f866 	bl	8008338 <vTaskStartScheduler>
      stat = osOK;
 800726c:	2300      	movs	r3, #0
 800726e:	607b      	str	r3, [r7, #4]
 8007270:	e002      	b.n	8007278 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007272:	f04f 33ff 	mov.w	r3, #4294967295
 8007276:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007278:	687b      	ldr	r3, [r7, #4]
}
 800727a:	4618      	mov	r0, r3
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	20000204 	.word	0x20000204

08007288 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007288:	b580      	push	{r7, lr}
 800728a:	b08e      	sub	sp, #56	; 0x38
 800728c:	af04      	add	r7, sp, #16
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007294:	2300      	movs	r3, #0
 8007296:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007298:	f3ef 8305 	mrs	r3, IPSR
 800729c:	617b      	str	r3, [r7, #20]
  return(result);
 800729e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d17e      	bne.n	80073a2 <osThreadNew+0x11a>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d07b      	beq.n	80073a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80072aa:	2380      	movs	r3, #128	; 0x80
 80072ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80072ae:	2318      	movs	r3, #24
 80072b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80072b6:	f04f 33ff 	mov.w	r3, #4294967295
 80072ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d045      	beq.n	800734e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d002      	beq.n	80072d0 <osThreadNew+0x48>
        name = attr->name;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d002      	beq.n	80072de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d008      	beq.n	80072f6 <osThreadNew+0x6e>
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	2b38      	cmp	r3, #56	; 0x38
 80072e8:	d805      	bhi.n	80072f6 <osThreadNew+0x6e>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <osThreadNew+0x72>
        return (NULL);
 80072f6:	2300      	movs	r3, #0
 80072f8:	e054      	b.n	80073a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	089b      	lsrs	r3, r3, #2
 8007308:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00e      	beq.n	8007330 <osThreadNew+0xa8>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	2b5b      	cmp	r3, #91	; 0x5b
 8007318:	d90a      	bls.n	8007330 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800731e:	2b00      	cmp	r3, #0
 8007320:	d006      	beq.n	8007330 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d002      	beq.n	8007330 <osThreadNew+0xa8>
        mem = 1;
 800732a:	2301      	movs	r3, #1
 800732c:	61bb      	str	r3, [r7, #24]
 800732e:	e010      	b.n	8007352 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10c      	bne.n	8007352 <osThreadNew+0xca>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d108      	bne.n	8007352 <osThreadNew+0xca>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d104      	bne.n	8007352 <osThreadNew+0xca>
          mem = 0;
 8007348:	2300      	movs	r3, #0
 800734a:	61bb      	str	r3, [r7, #24]
 800734c:	e001      	b.n	8007352 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800734e:	2300      	movs	r3, #0
 8007350:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d110      	bne.n	800737a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007360:	9202      	str	r2, [sp, #8]
 8007362:	9301      	str	r3, [sp, #4]
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	6a3a      	ldr	r2, [r7, #32]
 800736c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f000 fe0c 	bl	8007f8c <xTaskCreateStatic>
 8007374:	4603      	mov	r3, r0
 8007376:	613b      	str	r3, [r7, #16]
 8007378:	e013      	b.n	80073a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d110      	bne.n	80073a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007380:	6a3b      	ldr	r3, [r7, #32]
 8007382:	b29a      	uxth	r2, r3
 8007384:	f107 0310 	add.w	r3, r7, #16
 8007388:	9301      	str	r3, [sp, #4]
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f000 fe57 	bl	8008046 <xTaskCreate>
 8007398:	4603      	mov	r3, r0
 800739a:	2b01      	cmp	r3, #1
 800739c:	d001      	beq.n	80073a2 <osThreadNew+0x11a>
            hTask = NULL;
 800739e:	2300      	movs	r3, #0
 80073a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80073a2:	693b      	ldr	r3, [r7, #16]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3728      	adds	r7, #40	; 0x28
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073b4:	f3ef 8305 	mrs	r3, IPSR
 80073b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80073ba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d003      	beq.n	80073c8 <osDelay+0x1c>
    stat = osErrorISR;
 80073c0:	f06f 0305 	mvn.w	r3, #5
 80073c4:	60fb      	str	r3, [r7, #12]
 80073c6:	e007      	b.n	80073d8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80073c8:	2300      	movs	r3, #0
 80073ca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 ff7c 	bl	80082d0 <vTaskDelay>
    }
  }

  return (stat);
 80073d8:	68fb      	ldr	r3, [r7, #12]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
	...

080073e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	4a07      	ldr	r2, [pc, #28]	; (8007410 <vApplicationGetIdleTaskMemory+0x2c>)
 80073f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	4a06      	ldr	r2, [pc, #24]	; (8007414 <vApplicationGetIdleTaskMemory+0x30>)
 80073fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2280      	movs	r2, #128	; 0x80
 8007400:	601a      	str	r2, [r3, #0]
}
 8007402:	bf00      	nop
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	20000208 	.word	0x20000208
 8007414:	20000264 	.word	0x20000264

08007418 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	4a07      	ldr	r2, [pc, #28]	; (8007444 <vApplicationGetTimerTaskMemory+0x2c>)
 8007428:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	4a06      	ldr	r2, [pc, #24]	; (8007448 <vApplicationGetTimerTaskMemory+0x30>)
 800742e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007436:	601a      	str	r2, [r3, #0]
}
 8007438:	bf00      	nop
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
 8007444:	20000464 	.word	0x20000464
 8007448:	200004c0 	.word	0x200004c0

0800744c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f103 0208 	add.w	r2, r3, #8
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f04f 32ff 	mov.w	r2, #4294967295
 8007464:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f103 0208 	add.w	r2, r3, #8
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f103 0208 	add.w	r2, r3, #8
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800749a:	bf00      	nop
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074a6:	b480      	push	{r7}
 80074a8:	b085      	sub	sp, #20
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	689a      	ldr	r2, [r3, #8]
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	1c5a      	adds	r2, r3, #1
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	601a      	str	r2, [r3, #0]
}
 80074e2:	bf00      	nop
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074ee:	b480      	push	{r7}
 80074f0:	b085      	sub	sp, #20
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
 80074f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007504:	d103      	bne.n	800750e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	e00c      	b.n	8007528 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	3308      	adds	r3, #8
 8007512:	60fb      	str	r3, [r7, #12]
 8007514:	e002      	b.n	800751c <vListInsert+0x2e>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	60fb      	str	r3, [r7, #12]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	429a      	cmp	r2, r3
 8007526:	d2f6      	bcs.n	8007516 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	683a      	ldr	r2, [r7, #0]
 8007536:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	1c5a      	adds	r2, r3, #1
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	601a      	str	r2, [r3, #0]
}
 8007554:	bf00      	nop
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	6892      	ldr	r2, [r2, #8]
 8007576:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	6852      	ldr	r2, [r2, #4]
 8007580:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	429a      	cmp	r2, r3
 800758a:	d103      	bne.n	8007594 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	689a      	ldr	r2, [r3, #8]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	1e5a      	subs	r2, r3, #1
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3714      	adds	r7, #20
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10a      	bne.n	80075de <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80075c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80075da:	bf00      	nop
 80075dc:	e7fe      	b.n	80075dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80075de:	f002 f851 	bl	8009684 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ea:	68f9      	ldr	r1, [r7, #12]
 80075ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80075ee:	fb01 f303 	mul.w	r3, r1, r3
 80075f2:	441a      	add	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800760e:	3b01      	subs	r3, #1
 8007610:	68f9      	ldr	r1, [r7, #12]
 8007612:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007614:	fb01 f303 	mul.w	r3, r1, r3
 8007618:	441a      	add	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	22ff      	movs	r2, #255	; 0xff
 8007622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	22ff      	movs	r2, #255	; 0xff
 800762a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d114      	bne.n	800765e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d01a      	beq.n	8007672 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	3310      	adds	r3, #16
 8007640:	4618      	mov	r0, r3
 8007642:	f001 f903 	bl	800884c <xTaskRemoveFromEventList>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d012      	beq.n	8007672 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800764c:	4b0c      	ldr	r3, [pc, #48]	; (8007680 <xQueueGenericReset+0xcc>)
 800764e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	f3bf 8f6f 	isb	sy
 800765c:	e009      	b.n	8007672 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	3310      	adds	r3, #16
 8007662:	4618      	mov	r0, r3
 8007664:	f7ff fef2 	bl	800744c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3324      	adds	r3, #36	; 0x24
 800766c:	4618      	mov	r0, r3
 800766e:	f7ff feed 	bl	800744c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007672:	f002 f837 	bl	80096e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007676:	2301      	movs	r3, #1
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	e000ed04 	.word	0xe000ed04

08007684 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007684:	b580      	push	{r7, lr}
 8007686:	b08e      	sub	sp, #56	; 0x38
 8007688:	af02      	add	r7, sp, #8
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
 8007690:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10a      	bne.n	80076ae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80076aa:	bf00      	nop
 80076ac:	e7fe      	b.n	80076ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10a      	bne.n	80076ca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80076b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80076c6:	bf00      	nop
 80076c8:	e7fe      	b.n	80076c8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d002      	beq.n	80076d6 <xQueueGenericCreateStatic+0x52>
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <xQueueGenericCreateStatic+0x56>
 80076d6:	2301      	movs	r3, #1
 80076d8:	e000      	b.n	80076dc <xQueueGenericCreateStatic+0x58>
 80076da:	2300      	movs	r3, #0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d10a      	bne.n	80076f6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80076e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e4:	f383 8811 	msr	BASEPRI, r3
 80076e8:	f3bf 8f6f 	isb	sy
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	623b      	str	r3, [r7, #32]
}
 80076f2:	bf00      	nop
 80076f4:	e7fe      	b.n	80076f4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d102      	bne.n	8007702 <xQueueGenericCreateStatic+0x7e>
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <xQueueGenericCreateStatic+0x82>
 8007702:	2301      	movs	r3, #1
 8007704:	e000      	b.n	8007708 <xQueueGenericCreateStatic+0x84>
 8007706:	2300      	movs	r3, #0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10a      	bne.n	8007722 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800770c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007710:	f383 8811 	msr	BASEPRI, r3
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	61fb      	str	r3, [r7, #28]
}
 800771e:	bf00      	nop
 8007720:	e7fe      	b.n	8007720 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007722:	2350      	movs	r3, #80	; 0x50
 8007724:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	2b50      	cmp	r3, #80	; 0x50
 800772a:	d00a      	beq.n	8007742 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800772c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007730:	f383 8811 	msr	BASEPRI, r3
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	61bb      	str	r3, [r7, #24]
}
 800773e:	bf00      	nop
 8007740:	e7fe      	b.n	8007740 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007742:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00d      	beq.n	800776a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800774e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007750:	2201      	movs	r2, #1
 8007752:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007756:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800775a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	4613      	mov	r3, r2
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	68b9      	ldr	r1, [r7, #8]
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f000 f805 	bl	8007774 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800776a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800776c:	4618      	mov	r0, r3
 800776e:	3730      	adds	r7, #48	; 0x30
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
 8007780:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d103      	bne.n	8007790 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	69ba      	ldr	r2, [r7, #24]
 800778c:	601a      	str	r2, [r3, #0]
 800778e:	e002      	b.n	8007796 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80077a2:	2101      	movs	r1, #1
 80077a4:	69b8      	ldr	r0, [r7, #24]
 80077a6:	f7ff ff05 	bl	80075b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	78fa      	ldrb	r2, [r7, #3]
 80077ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80077b2:	bf00      	nop
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b08e      	sub	sp, #56	; 0x38
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
 80077c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80077ca:	2300      	movs	r3, #0
 80077cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80077d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d10a      	bne.n	80077ee <xQueueGenericSend+0x32>
	__asm volatile
 80077d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077dc:	f383 8811 	msr	BASEPRI, r3
 80077e0:	f3bf 8f6f 	isb	sy
 80077e4:	f3bf 8f4f 	dsb	sy
 80077e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80077ea:	bf00      	nop
 80077ec:	e7fe      	b.n	80077ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d103      	bne.n	80077fc <xQueueGenericSend+0x40>
 80077f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d101      	bne.n	8007800 <xQueueGenericSend+0x44>
 80077fc:	2301      	movs	r3, #1
 80077fe:	e000      	b.n	8007802 <xQueueGenericSend+0x46>
 8007800:	2300      	movs	r3, #0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d10a      	bne.n	800781c <xQueueGenericSend+0x60>
	__asm volatile
 8007806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780a:	f383 8811 	msr	BASEPRI, r3
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007818:	bf00      	nop
 800781a:	e7fe      	b.n	800781a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	2b02      	cmp	r3, #2
 8007820:	d103      	bne.n	800782a <xQueueGenericSend+0x6e>
 8007822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007826:	2b01      	cmp	r3, #1
 8007828:	d101      	bne.n	800782e <xQueueGenericSend+0x72>
 800782a:	2301      	movs	r3, #1
 800782c:	e000      	b.n	8007830 <xQueueGenericSend+0x74>
 800782e:	2300      	movs	r3, #0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d10a      	bne.n	800784a <xQueueGenericSend+0x8e>
	__asm volatile
 8007834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	623b      	str	r3, [r7, #32]
}
 8007846:	bf00      	nop
 8007848:	e7fe      	b.n	8007848 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800784a:	f001 f9bd 	bl	8008bc8 <xTaskGetSchedulerState>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d102      	bne.n	800785a <xQueueGenericSend+0x9e>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d101      	bne.n	800785e <xQueueGenericSend+0xa2>
 800785a:	2301      	movs	r3, #1
 800785c:	e000      	b.n	8007860 <xQueueGenericSend+0xa4>
 800785e:	2300      	movs	r3, #0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10a      	bne.n	800787a <xQueueGenericSend+0xbe>
	__asm volatile
 8007864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007868:	f383 8811 	msr	BASEPRI, r3
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	61fb      	str	r3, [r7, #28]
}
 8007876:	bf00      	nop
 8007878:	e7fe      	b.n	8007878 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800787a:	f001 ff03 	bl	8009684 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800787e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007886:	429a      	cmp	r2, r3
 8007888:	d302      	bcc.n	8007890 <xQueueGenericSend+0xd4>
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	2b02      	cmp	r3, #2
 800788e:	d129      	bne.n	80078e4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007890:	683a      	ldr	r2, [r7, #0]
 8007892:	68b9      	ldr	r1, [r7, #8]
 8007894:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007896:	f000 fa0b 	bl	8007cb0 <prvCopyDataToQueue>
 800789a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800789c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d010      	beq.n	80078c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a6:	3324      	adds	r3, #36	; 0x24
 80078a8:	4618      	mov	r0, r3
 80078aa:	f000 ffcf 	bl	800884c <xTaskRemoveFromEventList>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d013      	beq.n	80078dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80078b4:	4b3f      	ldr	r3, [pc, #252]	; (80079b4 <xQueueGenericSend+0x1f8>)
 80078b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ba:	601a      	str	r2, [r3, #0]
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	e00a      	b.n	80078dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80078c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d007      	beq.n	80078dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80078cc:	4b39      	ldr	r3, [pc, #228]	; (80079b4 <xQueueGenericSend+0x1f8>)
 80078ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80078dc:	f001 ff02 	bl	80096e4 <vPortExitCritical>
				return pdPASS;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e063      	b.n	80079ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d103      	bne.n	80078f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078ea:	f001 fefb 	bl	80096e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80078ee:	2300      	movs	r3, #0
 80078f0:	e05c      	b.n	80079ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d106      	bne.n	8007906 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078f8:	f107 0314 	add.w	r3, r7, #20
 80078fc:	4618      	mov	r0, r3
 80078fe:	f001 f809 	bl	8008914 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007902:	2301      	movs	r3, #1
 8007904:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007906:	f001 feed 	bl	80096e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800790a:	f000 fd7b 	bl	8008404 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800790e:	f001 feb9 	bl	8009684 <vPortEnterCritical>
 8007912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007914:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007918:	b25b      	sxtb	r3, r3
 800791a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791e:	d103      	bne.n	8007928 <xQueueGenericSend+0x16c>
 8007920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007922:	2200      	movs	r2, #0
 8007924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800792e:	b25b      	sxtb	r3, r3
 8007930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007934:	d103      	bne.n	800793e <xQueueGenericSend+0x182>
 8007936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007938:	2200      	movs	r2, #0
 800793a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800793e:	f001 fed1 	bl	80096e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007942:	1d3a      	adds	r2, r7, #4
 8007944:	f107 0314 	add.w	r3, r7, #20
 8007948:	4611      	mov	r1, r2
 800794a:	4618      	mov	r0, r3
 800794c:	f000 fff8 	bl	8008940 <xTaskCheckForTimeOut>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d124      	bne.n	80079a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007956:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007958:	f000 faa2 	bl	8007ea0 <prvIsQueueFull>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d018      	beq.n	8007994 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007964:	3310      	adds	r3, #16
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	4611      	mov	r1, r2
 800796a:	4618      	mov	r0, r3
 800796c:	f000 ff1e 	bl	80087ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007972:	f000 fa2d 	bl	8007dd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007976:	f000 fd53 	bl	8008420 <xTaskResumeAll>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	f47f af7c 	bne.w	800787a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007982:	4b0c      	ldr	r3, [pc, #48]	; (80079b4 <xQueueGenericSend+0x1f8>)
 8007984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007988:	601a      	str	r2, [r3, #0]
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	e772      	b.n	800787a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007994:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007996:	f000 fa1b 	bl	8007dd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800799a:	f000 fd41 	bl	8008420 <xTaskResumeAll>
 800799e:	e76c      	b.n	800787a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80079a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079a2:	f000 fa15 	bl	8007dd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079a6:	f000 fd3b 	bl	8008420 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80079aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3738      	adds	r7, #56	; 0x38
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	e000ed04 	.word	0xe000ed04

080079b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b090      	sub	sp, #64	; 0x40
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
 80079c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80079ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10a      	bne.n	80079e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80079d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80079e2:	bf00      	nop
 80079e4:	e7fe      	b.n	80079e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d103      	bne.n	80079f4 <xQueueGenericSendFromISR+0x3c>
 80079ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d101      	bne.n	80079f8 <xQueueGenericSendFromISR+0x40>
 80079f4:	2301      	movs	r3, #1
 80079f6:	e000      	b.n	80079fa <xQueueGenericSendFromISR+0x42>
 80079f8:	2300      	movs	r3, #0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10a      	bne.n	8007a14 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80079fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a10:	bf00      	nop
 8007a12:	e7fe      	b.n	8007a12 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	d103      	bne.n	8007a22 <xQueueGenericSendFromISR+0x6a>
 8007a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d101      	bne.n	8007a26 <xQueueGenericSendFromISR+0x6e>
 8007a22:	2301      	movs	r3, #1
 8007a24:	e000      	b.n	8007a28 <xQueueGenericSendFromISR+0x70>
 8007a26:	2300      	movs	r3, #0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d10a      	bne.n	8007a42 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a30:	f383 8811 	msr	BASEPRI, r3
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	623b      	str	r3, [r7, #32]
}
 8007a3e:	bf00      	nop
 8007a40:	e7fe      	b.n	8007a40 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a42:	f001 ff01 	bl	8009848 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a46:	f3ef 8211 	mrs	r2, BASEPRI
 8007a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4e:	f383 8811 	msr	BASEPRI, r3
 8007a52:	f3bf 8f6f 	isb	sy
 8007a56:	f3bf 8f4f 	dsb	sy
 8007a5a:	61fa      	str	r2, [r7, #28]
 8007a5c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a5e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a60:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d302      	bcc.n	8007a74 <xQueueGenericSendFromISR+0xbc>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d12f      	bne.n	8007ad4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a82:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a84:	683a      	ldr	r2, [r7, #0]
 8007a86:	68b9      	ldr	r1, [r7, #8]
 8007a88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a8a:	f000 f911 	bl	8007cb0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a8e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a96:	d112      	bne.n	8007abe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d016      	beq.n	8007ace <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa2:	3324      	adds	r3, #36	; 0x24
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f000 fed1 	bl	800884c <xTaskRemoveFromEventList>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00e      	beq.n	8007ace <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00b      	beq.n	8007ace <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	601a      	str	r2, [r3, #0]
 8007abc:	e007      	b.n	8007ace <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007abe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	b25a      	sxtb	r2, r3
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007ad2:	e001      	b.n	8007ad8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ada:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007ae2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3740      	adds	r7, #64	; 0x40
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
	...

08007af0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b08c      	sub	sp, #48	; 0x30
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007afc:	2300      	movs	r3, #0
 8007afe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10a      	bne.n	8007b20 <xQueueReceive+0x30>
	__asm volatile
 8007b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0e:	f383 8811 	msr	BASEPRI, r3
 8007b12:	f3bf 8f6f 	isb	sy
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	623b      	str	r3, [r7, #32]
}
 8007b1c:	bf00      	nop
 8007b1e:	e7fe      	b.n	8007b1e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d103      	bne.n	8007b2e <xQueueReceive+0x3e>
 8007b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d101      	bne.n	8007b32 <xQueueReceive+0x42>
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e000      	b.n	8007b34 <xQueueReceive+0x44>
 8007b32:	2300      	movs	r3, #0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10a      	bne.n	8007b4e <xQueueReceive+0x5e>
	__asm volatile
 8007b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	61fb      	str	r3, [r7, #28]
}
 8007b4a:	bf00      	nop
 8007b4c:	e7fe      	b.n	8007b4c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b4e:	f001 f83b 	bl	8008bc8 <xTaskGetSchedulerState>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d102      	bne.n	8007b5e <xQueueReceive+0x6e>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d101      	bne.n	8007b62 <xQueueReceive+0x72>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e000      	b.n	8007b64 <xQueueReceive+0x74>
 8007b62:	2300      	movs	r3, #0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10a      	bne.n	8007b7e <xQueueReceive+0x8e>
	__asm volatile
 8007b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6c:	f383 8811 	msr	BASEPRI, r3
 8007b70:	f3bf 8f6f 	isb	sy
 8007b74:	f3bf 8f4f 	dsb	sy
 8007b78:	61bb      	str	r3, [r7, #24]
}
 8007b7a:	bf00      	nop
 8007b7c:	e7fe      	b.n	8007b7c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b7e:	f001 fd81 	bl	8009684 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b86:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d01f      	beq.n	8007bce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b8e:	68b9      	ldr	r1, [r7, #8]
 8007b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b92:	f000 f8f7 	bl	8007d84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b98:	1e5a      	subs	r2, r3, #1
 8007b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00f      	beq.n	8007bc6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba8:	3310      	adds	r3, #16
 8007baa:	4618      	mov	r0, r3
 8007bac:	f000 fe4e 	bl	800884c <xTaskRemoveFromEventList>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d007      	beq.n	8007bc6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007bb6:	4b3d      	ldr	r3, [pc, #244]	; (8007cac <xQueueReceive+0x1bc>)
 8007bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bbc:	601a      	str	r2, [r3, #0]
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007bc6:	f001 fd8d 	bl	80096e4 <vPortExitCritical>
				return pdPASS;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e069      	b.n	8007ca2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d103      	bne.n	8007bdc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007bd4:	f001 fd86 	bl	80096e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	e062      	b.n	8007ca2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d106      	bne.n	8007bf0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007be2:	f107 0310 	add.w	r3, r7, #16
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 fe94 	bl	8008914 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007bec:	2301      	movs	r3, #1
 8007bee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007bf0:	f001 fd78 	bl	80096e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007bf4:	f000 fc06 	bl	8008404 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007bf8:	f001 fd44 	bl	8009684 <vPortEnterCritical>
 8007bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c02:	b25b      	sxtb	r3, r3
 8007c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c08:	d103      	bne.n	8007c12 <xQueueReceive+0x122>
 8007c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c18:	b25b      	sxtb	r3, r3
 8007c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c1e:	d103      	bne.n	8007c28 <xQueueReceive+0x138>
 8007c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c28:	f001 fd5c 	bl	80096e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c2c:	1d3a      	adds	r2, r7, #4
 8007c2e:	f107 0310 	add.w	r3, r7, #16
 8007c32:	4611      	mov	r1, r2
 8007c34:	4618      	mov	r0, r3
 8007c36:	f000 fe83 	bl	8008940 <xTaskCheckForTimeOut>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d123      	bne.n	8007c88 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c42:	f000 f917 	bl	8007e74 <prvIsQueueEmpty>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d017      	beq.n	8007c7c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4e:	3324      	adds	r3, #36	; 0x24
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	4611      	mov	r1, r2
 8007c54:	4618      	mov	r0, r3
 8007c56:	f000 fda9 	bl	80087ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c5c:	f000 f8b8 	bl	8007dd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c60:	f000 fbde 	bl	8008420 <xTaskResumeAll>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d189      	bne.n	8007b7e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007c6a:	4b10      	ldr	r3, [pc, #64]	; (8007cac <xQueueReceive+0x1bc>)
 8007c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c70:	601a      	str	r2, [r3, #0]
 8007c72:	f3bf 8f4f 	dsb	sy
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	e780      	b.n	8007b7e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007c7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c7e:	f000 f8a7 	bl	8007dd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c82:	f000 fbcd 	bl	8008420 <xTaskResumeAll>
 8007c86:	e77a      	b.n	8007b7e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c8a:	f000 f8a1 	bl	8007dd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c8e:	f000 fbc7 	bl	8008420 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c94:	f000 f8ee 	bl	8007e74 <prvIsQueueEmpty>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f43f af6f 	beq.w	8007b7e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ca0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3730      	adds	r7, #48	; 0x30
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	e000ed04 	.word	0xe000ed04

08007cb0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10d      	bne.n	8007cea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d14d      	bne.n	8007d72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f000 ff92 	bl	8008c04 <xTaskPriorityDisinherit>
 8007ce0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	609a      	str	r2, [r3, #8]
 8007ce8:	e043      	b.n	8007d72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d119      	bne.n	8007d24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6858      	ldr	r0, [r3, #4]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	68b9      	ldr	r1, [r7, #8]
 8007cfc:	f001 ff00 	bl	8009b00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d08:	441a      	add	r2, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	685a      	ldr	r2, [r3, #4]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d32b      	bcc.n	8007d72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	605a      	str	r2, [r3, #4]
 8007d22:	e026      	b.n	8007d72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	68d8      	ldr	r0, [r3, #12]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	68b9      	ldr	r1, [r7, #8]
 8007d30:	f001 fee6 	bl	8009b00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	68da      	ldr	r2, [r3, #12]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3c:	425b      	negs	r3, r3
 8007d3e:	441a      	add	r2, r3
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	68da      	ldr	r2, [r3, #12]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d207      	bcs.n	8007d60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	689a      	ldr	r2, [r3, #8]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d58:	425b      	negs	r3, r3
 8007d5a:	441a      	add	r2, r3
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d105      	bne.n	8007d72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d002      	beq.n	8007d72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	1c5a      	adds	r2, r3, #1
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007d7a:	697b      	ldr	r3, [r7, #20]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3718      	adds	r7, #24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d018      	beq.n	8007dc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	68da      	ldr	r2, [r3, #12]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9e:	441a      	add	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	68da      	ldr	r2, [r3, #12]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d303      	bcc.n	8007db8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	68d9      	ldr	r1, [r3, #12]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	6838      	ldr	r0, [r7, #0]
 8007dc4:	f001 fe9c 	bl	8009b00 <memcpy>
	}
}
 8007dc8:	bf00      	nop
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007dd8:	f001 fc54 	bl	8009684 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007de2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007de4:	e011      	b.n	8007e0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d012      	beq.n	8007e14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	3324      	adds	r3, #36	; 0x24
 8007df2:	4618      	mov	r0, r3
 8007df4:	f000 fd2a 	bl	800884c <xTaskRemoveFromEventList>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007dfe:	f000 fe01 	bl	8008a04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
 8007e04:	3b01      	subs	r3, #1
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	dce9      	bgt.n	8007de6 <prvUnlockQueue+0x16>
 8007e12:	e000      	b.n	8007e16 <prvUnlockQueue+0x46>
					break;
 8007e14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	22ff      	movs	r2, #255	; 0xff
 8007e1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e1e:	f001 fc61 	bl	80096e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e22:	f001 fc2f 	bl	8009684 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e2e:	e011      	b.n	8007e54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d012      	beq.n	8007e5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	3310      	adds	r3, #16
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f000 fd05 	bl	800884c <xTaskRemoveFromEventList>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d001      	beq.n	8007e4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e48:	f000 fddc 	bl	8008a04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e4c:	7bbb      	ldrb	r3, [r7, #14]
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	dce9      	bgt.n	8007e30 <prvUnlockQueue+0x60>
 8007e5c:	e000      	b.n	8007e60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007e5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	22ff      	movs	r2, #255	; 0xff
 8007e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007e68:	f001 fc3c 	bl	80096e4 <vPortExitCritical>
}
 8007e6c:	bf00      	nop
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e7c:	f001 fc02 	bl	8009684 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d102      	bne.n	8007e8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	60fb      	str	r3, [r7, #12]
 8007e8c:	e001      	b.n	8007e92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e92:	f001 fc27 	bl	80096e4 <vPortExitCritical>

	return xReturn;
 8007e96:	68fb      	ldr	r3, [r7, #12]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ea8:	f001 fbec 	bl	8009684 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d102      	bne.n	8007ebe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	60fb      	str	r3, [r7, #12]
 8007ebc:	e001      	b.n	8007ec2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ec2:	f001 fc0f 	bl	80096e4 <vPortExitCritical>

	return xReturn;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007eda:	2300      	movs	r3, #0
 8007edc:	60fb      	str	r3, [r7, #12]
 8007ede:	e014      	b.n	8007f0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ee0:	4a0f      	ldr	r2, [pc, #60]	; (8007f20 <vQueueAddToRegistry+0x50>)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10b      	bne.n	8007f04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007eec:	490c      	ldr	r1, [pc, #48]	; (8007f20 <vQueueAddToRegistry+0x50>)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	683a      	ldr	r2, [r7, #0]
 8007ef2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007ef6:	4a0a      	ldr	r2, [pc, #40]	; (8007f20 <vQueueAddToRegistry+0x50>)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	00db      	lsls	r3, r3, #3
 8007efc:	4413      	add	r3, r2
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007f02:	e006      	b.n	8007f12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	3301      	adds	r3, #1
 8007f08:	60fb      	str	r3, [r7, #12]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2b07      	cmp	r3, #7
 8007f0e:	d9e7      	bls.n	8007ee0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007f10:	bf00      	nop
 8007f12:	bf00      	nop
 8007f14:	3714      	adds	r7, #20
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	20008720 	.word	0x20008720

08007f24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b086      	sub	sp, #24
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007f34:	f001 fba6 	bl	8009684 <vPortEnterCritical>
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f3e:	b25b      	sxtb	r3, r3
 8007f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f44:	d103      	bne.n	8007f4e <vQueueWaitForMessageRestricted+0x2a>
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f54:	b25b      	sxtb	r3, r3
 8007f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f5a:	d103      	bne.n	8007f64 <vQueueWaitForMessageRestricted+0x40>
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f64:	f001 fbbe 	bl	80096e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d106      	bne.n	8007f7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	3324      	adds	r3, #36	; 0x24
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	68b9      	ldr	r1, [r7, #8]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f000 fc3b 	bl	80087f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007f7e:	6978      	ldr	r0, [r7, #20]
 8007f80:	f7ff ff26 	bl	8007dd0 <prvUnlockQueue>
	}
 8007f84:	bf00      	nop
 8007f86:	3718      	adds	r7, #24
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b08e      	sub	sp, #56	; 0x38
 8007f90:	af04      	add	r7, sp, #16
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
 8007f98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d10a      	bne.n	8007fb6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	623b      	str	r3, [r7, #32]
}
 8007fb2:	bf00      	nop
 8007fb4:	e7fe      	b.n	8007fb4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d10a      	bne.n	8007fd2 <xTaskCreateStatic+0x46>
	__asm volatile
 8007fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc0:	f383 8811 	msr	BASEPRI, r3
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	61fb      	str	r3, [r7, #28]
}
 8007fce:	bf00      	nop
 8007fd0:	e7fe      	b.n	8007fd0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007fd2:	235c      	movs	r3, #92	; 0x5c
 8007fd4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	2b5c      	cmp	r3, #92	; 0x5c
 8007fda:	d00a      	beq.n	8007ff2 <xTaskCreateStatic+0x66>
	__asm volatile
 8007fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	61bb      	str	r3, [r7, #24]
}
 8007fee:	bf00      	nop
 8007ff0:	e7fe      	b.n	8007ff0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007ff2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d01e      	beq.n	8008038 <xTaskCreateStatic+0xac>
 8007ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d01b      	beq.n	8008038 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008002:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008008:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800c:	2202      	movs	r2, #2
 800800e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008012:	2300      	movs	r3, #0
 8008014:	9303      	str	r3, [sp, #12]
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	9302      	str	r3, [sp, #8]
 800801a:	f107 0314 	add.w	r3, r7, #20
 800801e:	9301      	str	r3, [sp, #4]
 8008020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	68b9      	ldr	r1, [r7, #8]
 800802a:	68f8      	ldr	r0, [r7, #12]
 800802c:	f000 f850 	bl	80080d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008030:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008032:	f000 f8dd 	bl	80081f0 <prvAddNewTaskToReadyList>
 8008036:	e001      	b.n	800803c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008038:	2300      	movs	r3, #0
 800803a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800803c:	697b      	ldr	r3, [r7, #20]
	}
 800803e:	4618      	mov	r0, r3
 8008040:	3728      	adds	r7, #40	; 0x28
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008046:	b580      	push	{r7, lr}
 8008048:	b08c      	sub	sp, #48	; 0x30
 800804a:	af04      	add	r7, sp, #16
 800804c:	60f8      	str	r0, [r7, #12]
 800804e:	60b9      	str	r1, [r7, #8]
 8008050:	603b      	str	r3, [r7, #0]
 8008052:	4613      	mov	r3, r2
 8008054:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008056:	88fb      	ldrh	r3, [r7, #6]
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	4618      	mov	r0, r3
 800805c:	f001 fc34 	bl	80098c8 <pvPortMalloc>
 8008060:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00e      	beq.n	8008086 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008068:	205c      	movs	r0, #92	; 0x5c
 800806a:	f001 fc2d 	bl	80098c8 <pvPortMalloc>
 800806e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d003      	beq.n	800807e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	697a      	ldr	r2, [r7, #20]
 800807a:	631a      	str	r2, [r3, #48]	; 0x30
 800807c:	e005      	b.n	800808a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800807e:	6978      	ldr	r0, [r7, #20]
 8008080:	f001 fcb0 	bl	80099e4 <vPortFree>
 8008084:	e001      	b.n	800808a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008086:	2300      	movs	r3, #0
 8008088:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d017      	beq.n	80080c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008098:	88fa      	ldrh	r2, [r7, #6]
 800809a:	2300      	movs	r3, #0
 800809c:	9303      	str	r3, [sp, #12]
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	9302      	str	r3, [sp, #8]
 80080a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a4:	9301      	str	r3, [sp, #4]
 80080a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	68b9      	ldr	r1, [r7, #8]
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f000 f80e 	bl	80080d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080b4:	69f8      	ldr	r0, [r7, #28]
 80080b6:	f000 f89b 	bl	80081f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80080ba:	2301      	movs	r3, #1
 80080bc:	61bb      	str	r3, [r7, #24]
 80080be:	e002      	b.n	80080c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80080c0:	f04f 33ff 	mov.w	r3, #4294967295
 80080c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80080c6:	69bb      	ldr	r3, [r7, #24]
	}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3720      	adds	r7, #32
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b088      	sub	sp, #32
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
 80080dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80080de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	461a      	mov	r2, r3
 80080e8:	21a5      	movs	r1, #165	; 0xa5
 80080ea:	f001 fd17 	bl	8009b1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80080ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80080f8:	3b01      	subs	r3, #1
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	4413      	add	r3, r2
 80080fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	f023 0307 	bic.w	r3, r3, #7
 8008106:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	f003 0307 	and.w	r3, r3, #7
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00a      	beq.n	8008128 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008116:	f383 8811 	msr	BASEPRI, r3
 800811a:	f3bf 8f6f 	isb	sy
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	617b      	str	r3, [r7, #20]
}
 8008124:	bf00      	nop
 8008126:	e7fe      	b.n	8008126 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d01f      	beq.n	800816e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800812e:	2300      	movs	r3, #0
 8008130:	61fb      	str	r3, [r7, #28]
 8008132:	e012      	b.n	800815a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	4413      	add	r3, r2
 800813a:	7819      	ldrb	r1, [r3, #0]
 800813c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	4413      	add	r3, r2
 8008142:	3334      	adds	r3, #52	; 0x34
 8008144:	460a      	mov	r2, r1
 8008146:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008148:	68ba      	ldr	r2, [r7, #8]
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	4413      	add	r3, r2
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d006      	beq.n	8008162 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	3301      	adds	r3, #1
 8008158:	61fb      	str	r3, [r7, #28]
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	2b0f      	cmp	r3, #15
 800815e:	d9e9      	bls.n	8008134 <prvInitialiseNewTask+0x64>
 8008160:	e000      	b.n	8008164 <prvInitialiseNewTask+0x94>
			{
				break;
 8008162:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008166:	2200      	movs	r2, #0
 8008168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800816c:	e003      	b.n	8008176 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800816e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008170:	2200      	movs	r2, #0
 8008172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008178:	2b37      	cmp	r3, #55	; 0x37
 800817a:	d901      	bls.n	8008180 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800817c:	2337      	movs	r3, #55	; 0x37
 800817e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008184:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800818a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800818c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818e:	2200      	movs	r2, #0
 8008190:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008194:	3304      	adds	r3, #4
 8008196:	4618      	mov	r0, r3
 8008198:	f7ff f978 	bl	800748c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800819c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819e:	3318      	adds	r3, #24
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7ff f973 	bl	800748c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80081a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80081b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80081bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081be:	2200      	movs	r2, #0
 80081c0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80081c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80081ca:	683a      	ldr	r2, [r7, #0]
 80081cc:	68f9      	ldr	r1, [r7, #12]
 80081ce:	69b8      	ldr	r0, [r7, #24]
 80081d0:	f001 f928 	bl	8009424 <pxPortInitialiseStack>
 80081d4:	4602      	mov	r2, r0
 80081d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80081da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d002      	beq.n	80081e6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80081e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081e6:	bf00      	nop
 80081e8:	3720      	adds	r7, #32
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
	...

080081f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80081f8:	f001 fa44 	bl	8009684 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80081fc:	4b2d      	ldr	r3, [pc, #180]	; (80082b4 <prvAddNewTaskToReadyList+0xc4>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	3301      	adds	r3, #1
 8008202:	4a2c      	ldr	r2, [pc, #176]	; (80082b4 <prvAddNewTaskToReadyList+0xc4>)
 8008204:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008206:	4b2c      	ldr	r3, [pc, #176]	; (80082b8 <prvAddNewTaskToReadyList+0xc8>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d109      	bne.n	8008222 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800820e:	4a2a      	ldr	r2, [pc, #168]	; (80082b8 <prvAddNewTaskToReadyList+0xc8>)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008214:	4b27      	ldr	r3, [pc, #156]	; (80082b4 <prvAddNewTaskToReadyList+0xc4>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d110      	bne.n	800823e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800821c:	f000 fc16 	bl	8008a4c <prvInitialiseTaskLists>
 8008220:	e00d      	b.n	800823e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008222:	4b26      	ldr	r3, [pc, #152]	; (80082bc <prvAddNewTaskToReadyList+0xcc>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d109      	bne.n	800823e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800822a:	4b23      	ldr	r3, [pc, #140]	; (80082b8 <prvAddNewTaskToReadyList+0xc8>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008234:	429a      	cmp	r2, r3
 8008236:	d802      	bhi.n	800823e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008238:	4a1f      	ldr	r2, [pc, #124]	; (80082b8 <prvAddNewTaskToReadyList+0xc8>)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800823e:	4b20      	ldr	r3, [pc, #128]	; (80082c0 <prvAddNewTaskToReadyList+0xd0>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	3301      	adds	r3, #1
 8008244:	4a1e      	ldr	r2, [pc, #120]	; (80082c0 <prvAddNewTaskToReadyList+0xd0>)
 8008246:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008248:	4b1d      	ldr	r3, [pc, #116]	; (80082c0 <prvAddNewTaskToReadyList+0xd0>)
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008254:	4b1b      	ldr	r3, [pc, #108]	; (80082c4 <prvAddNewTaskToReadyList+0xd4>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	429a      	cmp	r2, r3
 800825a:	d903      	bls.n	8008264 <prvAddNewTaskToReadyList+0x74>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008260:	4a18      	ldr	r2, [pc, #96]	; (80082c4 <prvAddNewTaskToReadyList+0xd4>)
 8008262:	6013      	str	r3, [r2, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008268:	4613      	mov	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	4413      	add	r3, r2
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4a15      	ldr	r2, [pc, #84]	; (80082c8 <prvAddNewTaskToReadyList+0xd8>)
 8008272:	441a      	add	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	3304      	adds	r3, #4
 8008278:	4619      	mov	r1, r3
 800827a:	4610      	mov	r0, r2
 800827c:	f7ff f913 	bl	80074a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008280:	f001 fa30 	bl	80096e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008284:	4b0d      	ldr	r3, [pc, #52]	; (80082bc <prvAddNewTaskToReadyList+0xcc>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00e      	beq.n	80082aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800828c:	4b0a      	ldr	r3, [pc, #40]	; (80082b8 <prvAddNewTaskToReadyList+0xc8>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008296:	429a      	cmp	r2, r3
 8008298:	d207      	bcs.n	80082aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800829a:	4b0c      	ldr	r3, [pc, #48]	; (80082cc <prvAddNewTaskToReadyList+0xdc>)
 800829c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082a0:	601a      	str	r2, [r3, #0]
 80082a2:	f3bf 8f4f 	dsb	sy
 80082a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082aa:	bf00      	nop
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	20000d94 	.word	0x20000d94
 80082b8:	200008c0 	.word	0x200008c0
 80082bc:	20000da0 	.word	0x20000da0
 80082c0:	20000db0 	.word	0x20000db0
 80082c4:	20000d9c 	.word	0x20000d9c
 80082c8:	200008c4 	.word	0x200008c4
 80082cc:	e000ed04 	.word	0xe000ed04

080082d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80082d8:	2300      	movs	r3, #0
 80082da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d017      	beq.n	8008312 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80082e2:	4b13      	ldr	r3, [pc, #76]	; (8008330 <vTaskDelay+0x60>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00a      	beq.n	8008300 <vTaskDelay+0x30>
	__asm volatile
 80082ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	60bb      	str	r3, [r7, #8]
}
 80082fc:	bf00      	nop
 80082fe:	e7fe      	b.n	80082fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008300:	f000 f880 	bl	8008404 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008304:	2100      	movs	r1, #0
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fcea 	bl	8008ce0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800830c:	f000 f888 	bl	8008420 <xTaskResumeAll>
 8008310:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d107      	bne.n	8008328 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008318:	4b06      	ldr	r3, [pc, #24]	; (8008334 <vTaskDelay+0x64>)
 800831a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800831e:	601a      	str	r2, [r3, #0]
 8008320:	f3bf 8f4f 	dsb	sy
 8008324:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008328:	bf00      	nop
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	20000dbc 	.word	0x20000dbc
 8008334:	e000ed04 	.word	0xe000ed04

08008338 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b08a      	sub	sp, #40	; 0x28
 800833c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800833e:	2300      	movs	r3, #0
 8008340:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008342:	2300      	movs	r3, #0
 8008344:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008346:	463a      	mov	r2, r7
 8008348:	1d39      	adds	r1, r7, #4
 800834a:	f107 0308 	add.w	r3, r7, #8
 800834e:	4618      	mov	r0, r3
 8008350:	f7ff f848 	bl	80073e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008354:	6839      	ldr	r1, [r7, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	9202      	str	r2, [sp, #8]
 800835c:	9301      	str	r3, [sp, #4]
 800835e:	2300      	movs	r3, #0
 8008360:	9300      	str	r3, [sp, #0]
 8008362:	2300      	movs	r3, #0
 8008364:	460a      	mov	r2, r1
 8008366:	4921      	ldr	r1, [pc, #132]	; (80083ec <vTaskStartScheduler+0xb4>)
 8008368:	4821      	ldr	r0, [pc, #132]	; (80083f0 <vTaskStartScheduler+0xb8>)
 800836a:	f7ff fe0f 	bl	8007f8c <xTaskCreateStatic>
 800836e:	4603      	mov	r3, r0
 8008370:	4a20      	ldr	r2, [pc, #128]	; (80083f4 <vTaskStartScheduler+0xbc>)
 8008372:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008374:	4b1f      	ldr	r3, [pc, #124]	; (80083f4 <vTaskStartScheduler+0xbc>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d002      	beq.n	8008382 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800837c:	2301      	movs	r3, #1
 800837e:	617b      	str	r3, [r7, #20]
 8008380:	e001      	b.n	8008386 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008382:	2300      	movs	r3, #0
 8008384:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d102      	bne.n	8008392 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800838c:	f000 fcfc 	bl	8008d88 <xTimerCreateTimerTask>
 8008390:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d116      	bne.n	80083c6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	613b      	str	r3, [r7, #16]
}
 80083aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80083ac:	4b12      	ldr	r3, [pc, #72]	; (80083f8 <vTaskStartScheduler+0xc0>)
 80083ae:	f04f 32ff 	mov.w	r2, #4294967295
 80083b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80083b4:	4b11      	ldr	r3, [pc, #68]	; (80083fc <vTaskStartScheduler+0xc4>)
 80083b6:	2201      	movs	r2, #1
 80083b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80083ba:	4b11      	ldr	r3, [pc, #68]	; (8008400 <vTaskStartScheduler+0xc8>)
 80083bc:	2200      	movs	r2, #0
 80083be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80083c0:	f001 f8be 	bl	8009540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80083c4:	e00e      	b.n	80083e4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083cc:	d10a      	bne.n	80083e4 <vTaskStartScheduler+0xac>
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	60fb      	str	r3, [r7, #12]
}
 80083e0:	bf00      	nop
 80083e2:	e7fe      	b.n	80083e2 <vTaskStartScheduler+0xaa>
}
 80083e4:	bf00      	nop
 80083e6:	3718      	adds	r7, #24
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	0800c89c 	.word	0x0800c89c
 80083f0:	08008a1d 	.word	0x08008a1d
 80083f4:	20000db8 	.word	0x20000db8
 80083f8:	20000db4 	.word	0x20000db4
 80083fc:	20000da0 	.word	0x20000da0
 8008400:	20000d98 	.word	0x20000d98

08008404 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008404:	b480      	push	{r7}
 8008406:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008408:	4b04      	ldr	r3, [pc, #16]	; (800841c <vTaskSuspendAll+0x18>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	3301      	adds	r3, #1
 800840e:	4a03      	ldr	r2, [pc, #12]	; (800841c <vTaskSuspendAll+0x18>)
 8008410:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008412:	bf00      	nop
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr
 800841c:	20000dbc 	.word	0x20000dbc

08008420 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008426:	2300      	movs	r3, #0
 8008428:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800842a:	2300      	movs	r3, #0
 800842c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800842e:	4b42      	ldr	r3, [pc, #264]	; (8008538 <xTaskResumeAll+0x118>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10a      	bne.n	800844c <xTaskResumeAll+0x2c>
	__asm volatile
 8008436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843a:	f383 8811 	msr	BASEPRI, r3
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	f3bf 8f4f 	dsb	sy
 8008446:	603b      	str	r3, [r7, #0]
}
 8008448:	bf00      	nop
 800844a:	e7fe      	b.n	800844a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800844c:	f001 f91a 	bl	8009684 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008450:	4b39      	ldr	r3, [pc, #228]	; (8008538 <xTaskResumeAll+0x118>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	3b01      	subs	r3, #1
 8008456:	4a38      	ldr	r2, [pc, #224]	; (8008538 <xTaskResumeAll+0x118>)
 8008458:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800845a:	4b37      	ldr	r3, [pc, #220]	; (8008538 <xTaskResumeAll+0x118>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d162      	bne.n	8008528 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008462:	4b36      	ldr	r3, [pc, #216]	; (800853c <xTaskResumeAll+0x11c>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d05e      	beq.n	8008528 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800846a:	e02f      	b.n	80084cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800846c:	4b34      	ldr	r3, [pc, #208]	; (8008540 <xTaskResumeAll+0x120>)
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	3318      	adds	r3, #24
 8008478:	4618      	mov	r0, r3
 800847a:	f7ff f871 	bl	8007560 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3304      	adds	r3, #4
 8008482:	4618      	mov	r0, r3
 8008484:	f7ff f86c 	bl	8007560 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800848c:	4b2d      	ldr	r3, [pc, #180]	; (8008544 <xTaskResumeAll+0x124>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	429a      	cmp	r2, r3
 8008492:	d903      	bls.n	800849c <xTaskResumeAll+0x7c>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008498:	4a2a      	ldr	r2, [pc, #168]	; (8008544 <xTaskResumeAll+0x124>)
 800849a:	6013      	str	r3, [r2, #0]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a0:	4613      	mov	r3, r2
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	4413      	add	r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	4a27      	ldr	r2, [pc, #156]	; (8008548 <xTaskResumeAll+0x128>)
 80084aa:	441a      	add	r2, r3
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	3304      	adds	r3, #4
 80084b0:	4619      	mov	r1, r3
 80084b2:	4610      	mov	r0, r2
 80084b4:	f7fe fff7 	bl	80074a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084bc:	4b23      	ldr	r3, [pc, #140]	; (800854c <xTaskResumeAll+0x12c>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d302      	bcc.n	80084cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80084c6:	4b22      	ldr	r3, [pc, #136]	; (8008550 <xTaskResumeAll+0x130>)
 80084c8:	2201      	movs	r2, #1
 80084ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084cc:	4b1c      	ldr	r3, [pc, #112]	; (8008540 <xTaskResumeAll+0x120>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d1cb      	bne.n	800846c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80084da:	f000 fb55 	bl	8008b88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80084de:	4b1d      	ldr	r3, [pc, #116]	; (8008554 <xTaskResumeAll+0x134>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d010      	beq.n	800850c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80084ea:	f000 f847 	bl	800857c <xTaskIncrementTick>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d002      	beq.n	80084fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80084f4:	4b16      	ldr	r3, [pc, #88]	; (8008550 <xTaskResumeAll+0x130>)
 80084f6:	2201      	movs	r2, #1
 80084f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	3b01      	subs	r3, #1
 80084fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1f1      	bne.n	80084ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008506:	4b13      	ldr	r3, [pc, #76]	; (8008554 <xTaskResumeAll+0x134>)
 8008508:	2200      	movs	r2, #0
 800850a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800850c:	4b10      	ldr	r3, [pc, #64]	; (8008550 <xTaskResumeAll+0x130>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d009      	beq.n	8008528 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008514:	2301      	movs	r3, #1
 8008516:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008518:	4b0f      	ldr	r3, [pc, #60]	; (8008558 <xTaskResumeAll+0x138>)
 800851a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800851e:	601a      	str	r2, [r3, #0]
 8008520:	f3bf 8f4f 	dsb	sy
 8008524:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008528:	f001 f8dc 	bl	80096e4 <vPortExitCritical>

	return xAlreadyYielded;
 800852c:	68bb      	ldr	r3, [r7, #8]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	20000dbc 	.word	0x20000dbc
 800853c:	20000d94 	.word	0x20000d94
 8008540:	20000d54 	.word	0x20000d54
 8008544:	20000d9c 	.word	0x20000d9c
 8008548:	200008c4 	.word	0x200008c4
 800854c:	200008c0 	.word	0x200008c0
 8008550:	20000da8 	.word	0x20000da8
 8008554:	20000da4 	.word	0x20000da4
 8008558:	e000ed04 	.word	0xe000ed04

0800855c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008562:	4b05      	ldr	r3, [pc, #20]	; (8008578 <xTaskGetTickCount+0x1c>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008568:	687b      	ldr	r3, [r7, #4]
}
 800856a:	4618      	mov	r0, r3
 800856c:	370c      	adds	r7, #12
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop
 8008578:	20000d98 	.word	0x20000d98

0800857c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b086      	sub	sp, #24
 8008580:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008582:	2300      	movs	r3, #0
 8008584:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008586:	4b4f      	ldr	r3, [pc, #316]	; (80086c4 <xTaskIncrementTick+0x148>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	f040 808f 	bne.w	80086ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008590:	4b4d      	ldr	r3, [pc, #308]	; (80086c8 <xTaskIncrementTick+0x14c>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	3301      	adds	r3, #1
 8008596:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008598:	4a4b      	ldr	r2, [pc, #300]	; (80086c8 <xTaskIncrementTick+0x14c>)
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d120      	bne.n	80085e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80085a4:	4b49      	ldr	r3, [pc, #292]	; (80086cc <xTaskIncrementTick+0x150>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00a      	beq.n	80085c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80085ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b2:	f383 8811 	msr	BASEPRI, r3
 80085b6:	f3bf 8f6f 	isb	sy
 80085ba:	f3bf 8f4f 	dsb	sy
 80085be:	603b      	str	r3, [r7, #0]
}
 80085c0:	bf00      	nop
 80085c2:	e7fe      	b.n	80085c2 <xTaskIncrementTick+0x46>
 80085c4:	4b41      	ldr	r3, [pc, #260]	; (80086cc <xTaskIncrementTick+0x150>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	60fb      	str	r3, [r7, #12]
 80085ca:	4b41      	ldr	r3, [pc, #260]	; (80086d0 <xTaskIncrementTick+0x154>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a3f      	ldr	r2, [pc, #252]	; (80086cc <xTaskIncrementTick+0x150>)
 80085d0:	6013      	str	r3, [r2, #0]
 80085d2:	4a3f      	ldr	r2, [pc, #252]	; (80086d0 <xTaskIncrementTick+0x154>)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6013      	str	r3, [r2, #0]
 80085d8:	4b3e      	ldr	r3, [pc, #248]	; (80086d4 <xTaskIncrementTick+0x158>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	3301      	adds	r3, #1
 80085de:	4a3d      	ldr	r2, [pc, #244]	; (80086d4 <xTaskIncrementTick+0x158>)
 80085e0:	6013      	str	r3, [r2, #0]
 80085e2:	f000 fad1 	bl	8008b88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80085e6:	4b3c      	ldr	r3, [pc, #240]	; (80086d8 <xTaskIncrementTick+0x15c>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	693a      	ldr	r2, [r7, #16]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d349      	bcc.n	8008684 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085f0:	4b36      	ldr	r3, [pc, #216]	; (80086cc <xTaskIncrementTick+0x150>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d104      	bne.n	8008604 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085fa:	4b37      	ldr	r3, [pc, #220]	; (80086d8 <xTaskIncrementTick+0x15c>)
 80085fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008600:	601a      	str	r2, [r3, #0]
					break;
 8008602:	e03f      	b.n	8008684 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008604:	4b31      	ldr	r3, [pc, #196]	; (80086cc <xTaskIncrementTick+0x150>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008614:	693a      	ldr	r2, [r7, #16]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	429a      	cmp	r2, r3
 800861a:	d203      	bcs.n	8008624 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800861c:	4a2e      	ldr	r2, [pc, #184]	; (80086d8 <xTaskIncrementTick+0x15c>)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008622:	e02f      	b.n	8008684 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	3304      	adds	r3, #4
 8008628:	4618      	mov	r0, r3
 800862a:	f7fe ff99 	bl	8007560 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008632:	2b00      	cmp	r3, #0
 8008634:	d004      	beq.n	8008640 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	3318      	adds	r3, #24
 800863a:	4618      	mov	r0, r3
 800863c:	f7fe ff90 	bl	8007560 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008644:	4b25      	ldr	r3, [pc, #148]	; (80086dc <xTaskIncrementTick+0x160>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	429a      	cmp	r2, r3
 800864a:	d903      	bls.n	8008654 <xTaskIncrementTick+0xd8>
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008650:	4a22      	ldr	r2, [pc, #136]	; (80086dc <xTaskIncrementTick+0x160>)
 8008652:	6013      	str	r3, [r2, #0]
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008658:	4613      	mov	r3, r2
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	4413      	add	r3, r2
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4a1f      	ldr	r2, [pc, #124]	; (80086e0 <xTaskIncrementTick+0x164>)
 8008662:	441a      	add	r2, r3
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	3304      	adds	r3, #4
 8008668:	4619      	mov	r1, r3
 800866a:	4610      	mov	r0, r2
 800866c:	f7fe ff1b 	bl	80074a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008674:	4b1b      	ldr	r3, [pc, #108]	; (80086e4 <xTaskIncrementTick+0x168>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867a:	429a      	cmp	r2, r3
 800867c:	d3b8      	bcc.n	80085f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800867e:	2301      	movs	r3, #1
 8008680:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008682:	e7b5      	b.n	80085f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008684:	4b17      	ldr	r3, [pc, #92]	; (80086e4 <xTaskIncrementTick+0x168>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868a:	4915      	ldr	r1, [pc, #84]	; (80086e0 <xTaskIncrementTick+0x164>)
 800868c:	4613      	mov	r3, r2
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4413      	add	r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	440b      	add	r3, r1
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d901      	bls.n	80086a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800869c:	2301      	movs	r3, #1
 800869e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80086a0:	4b11      	ldr	r3, [pc, #68]	; (80086e8 <xTaskIncrementTick+0x16c>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d007      	beq.n	80086b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80086a8:	2301      	movs	r3, #1
 80086aa:	617b      	str	r3, [r7, #20]
 80086ac:	e004      	b.n	80086b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80086ae:	4b0f      	ldr	r3, [pc, #60]	; (80086ec <xTaskIncrementTick+0x170>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	3301      	adds	r3, #1
 80086b4:	4a0d      	ldr	r2, [pc, #52]	; (80086ec <xTaskIncrementTick+0x170>)
 80086b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80086b8:	697b      	ldr	r3, [r7, #20]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3718      	adds	r7, #24
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	20000dbc 	.word	0x20000dbc
 80086c8:	20000d98 	.word	0x20000d98
 80086cc:	20000d4c 	.word	0x20000d4c
 80086d0:	20000d50 	.word	0x20000d50
 80086d4:	20000dac 	.word	0x20000dac
 80086d8:	20000db4 	.word	0x20000db4
 80086dc:	20000d9c 	.word	0x20000d9c
 80086e0:	200008c4 	.word	0x200008c4
 80086e4:	200008c0 	.word	0x200008c0
 80086e8:	20000da8 	.word	0x20000da8
 80086ec:	20000da4 	.word	0x20000da4

080086f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80086f6:	4b28      	ldr	r3, [pc, #160]	; (8008798 <vTaskSwitchContext+0xa8>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d003      	beq.n	8008706 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80086fe:	4b27      	ldr	r3, [pc, #156]	; (800879c <vTaskSwitchContext+0xac>)
 8008700:	2201      	movs	r2, #1
 8008702:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008704:	e041      	b.n	800878a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008706:	4b25      	ldr	r3, [pc, #148]	; (800879c <vTaskSwitchContext+0xac>)
 8008708:	2200      	movs	r2, #0
 800870a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800870c:	4b24      	ldr	r3, [pc, #144]	; (80087a0 <vTaskSwitchContext+0xb0>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	60fb      	str	r3, [r7, #12]
 8008712:	e010      	b.n	8008736 <vTaskSwitchContext+0x46>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d10a      	bne.n	8008730 <vTaskSwitchContext+0x40>
	__asm volatile
 800871a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871e:	f383 8811 	msr	BASEPRI, r3
 8008722:	f3bf 8f6f 	isb	sy
 8008726:	f3bf 8f4f 	dsb	sy
 800872a:	607b      	str	r3, [r7, #4]
}
 800872c:	bf00      	nop
 800872e:	e7fe      	b.n	800872e <vTaskSwitchContext+0x3e>
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	3b01      	subs	r3, #1
 8008734:	60fb      	str	r3, [r7, #12]
 8008736:	491b      	ldr	r1, [pc, #108]	; (80087a4 <vTaskSwitchContext+0xb4>)
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	4613      	mov	r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	4413      	add	r3, r2
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	440b      	add	r3, r1
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d0e4      	beq.n	8008714 <vTaskSwitchContext+0x24>
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	4613      	mov	r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	4413      	add	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4a13      	ldr	r2, [pc, #76]	; (80087a4 <vTaskSwitchContext+0xb4>)
 8008756:	4413      	add	r3, r2
 8008758:	60bb      	str	r3, [r7, #8]
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	685a      	ldr	r2, [r3, #4]
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	605a      	str	r2, [r3, #4]
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	685a      	ldr	r2, [r3, #4]
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	3308      	adds	r3, #8
 800876c:	429a      	cmp	r2, r3
 800876e:	d104      	bne.n	800877a <vTaskSwitchContext+0x8a>
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	685a      	ldr	r2, [r3, #4]
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	605a      	str	r2, [r3, #4]
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	4a09      	ldr	r2, [pc, #36]	; (80087a8 <vTaskSwitchContext+0xb8>)
 8008782:	6013      	str	r3, [r2, #0]
 8008784:	4a06      	ldr	r2, [pc, #24]	; (80087a0 <vTaskSwitchContext+0xb0>)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6013      	str	r3, [r2, #0]
}
 800878a:	bf00      	nop
 800878c:	3714      	adds	r7, #20
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	20000dbc 	.word	0x20000dbc
 800879c:	20000da8 	.word	0x20000da8
 80087a0:	20000d9c 	.word	0x20000d9c
 80087a4:	200008c4 	.word	0x200008c4
 80087a8:	200008c0 	.word	0x200008c0

080087ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d10a      	bne.n	80087d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80087bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c0:	f383 8811 	msr	BASEPRI, r3
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	60fb      	str	r3, [r7, #12]
}
 80087ce:	bf00      	nop
 80087d0:	e7fe      	b.n	80087d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087d2:	4b07      	ldr	r3, [pc, #28]	; (80087f0 <vTaskPlaceOnEventList+0x44>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	3318      	adds	r3, #24
 80087d8:	4619      	mov	r1, r3
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f7fe fe87 	bl	80074ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80087e0:	2101      	movs	r1, #1
 80087e2:	6838      	ldr	r0, [r7, #0]
 80087e4:	f000 fa7c 	bl	8008ce0 <prvAddCurrentTaskToDelayedList>
}
 80087e8:	bf00      	nop
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	200008c0 	.word	0x200008c0

080087f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d10a      	bne.n	800881c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880a:	f383 8811 	msr	BASEPRI, r3
 800880e:	f3bf 8f6f 	isb	sy
 8008812:	f3bf 8f4f 	dsb	sy
 8008816:	617b      	str	r3, [r7, #20]
}
 8008818:	bf00      	nop
 800881a:	e7fe      	b.n	800881a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800881c:	4b0a      	ldr	r3, [pc, #40]	; (8008848 <vTaskPlaceOnEventListRestricted+0x54>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	3318      	adds	r3, #24
 8008822:	4619      	mov	r1, r3
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f7fe fe3e 	bl	80074a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d002      	beq.n	8008836 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008830:	f04f 33ff 	mov.w	r3, #4294967295
 8008834:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008836:	6879      	ldr	r1, [r7, #4]
 8008838:	68b8      	ldr	r0, [r7, #8]
 800883a:	f000 fa51 	bl	8008ce0 <prvAddCurrentTaskToDelayedList>
	}
 800883e:	bf00      	nop
 8008840:	3718      	adds	r7, #24
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	200008c0 	.word	0x200008c0

0800884c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b086      	sub	sp, #24
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10a      	bne.n	8008878 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008866:	f383 8811 	msr	BASEPRI, r3
 800886a:	f3bf 8f6f 	isb	sy
 800886e:	f3bf 8f4f 	dsb	sy
 8008872:	60fb      	str	r3, [r7, #12]
}
 8008874:	bf00      	nop
 8008876:	e7fe      	b.n	8008876 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	3318      	adds	r3, #24
 800887c:	4618      	mov	r0, r3
 800887e:	f7fe fe6f 	bl	8007560 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008882:	4b1e      	ldr	r3, [pc, #120]	; (80088fc <xTaskRemoveFromEventList+0xb0>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d11d      	bne.n	80088c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	3304      	adds	r3, #4
 800888e:	4618      	mov	r0, r3
 8008890:	f7fe fe66 	bl	8007560 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008898:	4b19      	ldr	r3, [pc, #100]	; (8008900 <xTaskRemoveFromEventList+0xb4>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	429a      	cmp	r2, r3
 800889e:	d903      	bls.n	80088a8 <xTaskRemoveFromEventList+0x5c>
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a4:	4a16      	ldr	r2, [pc, #88]	; (8008900 <xTaskRemoveFromEventList+0xb4>)
 80088a6:	6013      	str	r3, [r2, #0]
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ac:	4613      	mov	r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	4413      	add	r3, r2
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	4a13      	ldr	r2, [pc, #76]	; (8008904 <xTaskRemoveFromEventList+0xb8>)
 80088b6:	441a      	add	r2, r3
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	3304      	adds	r3, #4
 80088bc:	4619      	mov	r1, r3
 80088be:	4610      	mov	r0, r2
 80088c0:	f7fe fdf1 	bl	80074a6 <vListInsertEnd>
 80088c4:	e005      	b.n	80088d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	3318      	adds	r3, #24
 80088ca:	4619      	mov	r1, r3
 80088cc:	480e      	ldr	r0, [pc, #56]	; (8008908 <xTaskRemoveFromEventList+0xbc>)
 80088ce:	f7fe fdea 	bl	80074a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d6:	4b0d      	ldr	r3, [pc, #52]	; (800890c <xTaskRemoveFromEventList+0xc0>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088dc:	429a      	cmp	r2, r3
 80088de:	d905      	bls.n	80088ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80088e0:	2301      	movs	r3, #1
 80088e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80088e4:	4b0a      	ldr	r3, [pc, #40]	; (8008910 <xTaskRemoveFromEventList+0xc4>)
 80088e6:	2201      	movs	r2, #1
 80088e8:	601a      	str	r2, [r3, #0]
 80088ea:	e001      	b.n	80088f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80088ec:	2300      	movs	r3, #0
 80088ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80088f0:	697b      	ldr	r3, [r7, #20]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3718      	adds	r7, #24
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	20000dbc 	.word	0x20000dbc
 8008900:	20000d9c 	.word	0x20000d9c
 8008904:	200008c4 	.word	0x200008c4
 8008908:	20000d54 	.word	0x20000d54
 800890c:	200008c0 	.word	0x200008c0
 8008910:	20000da8 	.word	0x20000da8

08008914 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800891c:	4b06      	ldr	r3, [pc, #24]	; (8008938 <vTaskInternalSetTimeOutState+0x24>)
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008924:	4b05      	ldr	r3, [pc, #20]	; (800893c <vTaskInternalSetTimeOutState+0x28>)
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	605a      	str	r2, [r3, #4]
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr
 8008938:	20000dac 	.word	0x20000dac
 800893c:	20000d98 	.word	0x20000d98

08008940 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b088      	sub	sp, #32
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10a      	bne.n	8008966 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008954:	f383 8811 	msr	BASEPRI, r3
 8008958:	f3bf 8f6f 	isb	sy
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	613b      	str	r3, [r7, #16]
}
 8008962:	bf00      	nop
 8008964:	e7fe      	b.n	8008964 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d10a      	bne.n	8008982 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800896c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008970:	f383 8811 	msr	BASEPRI, r3
 8008974:	f3bf 8f6f 	isb	sy
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	60fb      	str	r3, [r7, #12]
}
 800897e:	bf00      	nop
 8008980:	e7fe      	b.n	8008980 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008982:	f000 fe7f 	bl	8009684 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008986:	4b1d      	ldr	r3, [pc, #116]	; (80089fc <xTaskCheckForTimeOut+0xbc>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	69ba      	ldr	r2, [r7, #24]
 8008992:	1ad3      	subs	r3, r2, r3
 8008994:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800899e:	d102      	bne.n	80089a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80089a0:	2300      	movs	r3, #0
 80089a2:	61fb      	str	r3, [r7, #28]
 80089a4:	e023      	b.n	80089ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	4b15      	ldr	r3, [pc, #84]	; (8008a00 <xTaskCheckForTimeOut+0xc0>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d007      	beq.n	80089c2 <xTaskCheckForTimeOut+0x82>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	69ba      	ldr	r2, [r7, #24]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d302      	bcc.n	80089c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80089bc:	2301      	movs	r3, #1
 80089be:	61fb      	str	r3, [r7, #28]
 80089c0:	e015      	b.n	80089ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d20b      	bcs.n	80089e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	1ad2      	subs	r2, r2, r3
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f7ff ff9b 	bl	8008914 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80089de:	2300      	movs	r3, #0
 80089e0:	61fb      	str	r3, [r7, #28]
 80089e2:	e004      	b.n	80089ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	2200      	movs	r2, #0
 80089e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80089ea:	2301      	movs	r3, #1
 80089ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80089ee:	f000 fe79 	bl	80096e4 <vPortExitCritical>

	return xReturn;
 80089f2:	69fb      	ldr	r3, [r7, #28]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3720      	adds	r7, #32
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	20000d98 	.word	0x20000d98
 8008a00:	20000dac 	.word	0x20000dac

08008a04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a04:	b480      	push	{r7}
 8008a06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a08:	4b03      	ldr	r3, [pc, #12]	; (8008a18 <vTaskMissedYield+0x14>)
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	601a      	str	r2, [r3, #0]
}
 8008a0e:	bf00      	nop
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr
 8008a18:	20000da8 	.word	0x20000da8

08008a1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a24:	f000 f852 	bl	8008acc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a28:	4b06      	ldr	r3, [pc, #24]	; (8008a44 <prvIdleTask+0x28>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d9f9      	bls.n	8008a24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a30:	4b05      	ldr	r3, [pc, #20]	; (8008a48 <prvIdleTask+0x2c>)
 8008a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a36:	601a      	str	r2, [r3, #0]
 8008a38:	f3bf 8f4f 	dsb	sy
 8008a3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a40:	e7f0      	b.n	8008a24 <prvIdleTask+0x8>
 8008a42:	bf00      	nop
 8008a44:	200008c4 	.word	0x200008c4
 8008a48:	e000ed04 	.word	0xe000ed04

08008a4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a52:	2300      	movs	r3, #0
 8008a54:	607b      	str	r3, [r7, #4]
 8008a56:	e00c      	b.n	8008a72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4413      	add	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4a12      	ldr	r2, [pc, #72]	; (8008aac <prvInitialiseTaskLists+0x60>)
 8008a64:	4413      	add	r3, r2
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fe fcf0 	bl	800744c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	607b      	str	r3, [r7, #4]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2b37      	cmp	r3, #55	; 0x37
 8008a76:	d9ef      	bls.n	8008a58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a78:	480d      	ldr	r0, [pc, #52]	; (8008ab0 <prvInitialiseTaskLists+0x64>)
 8008a7a:	f7fe fce7 	bl	800744c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a7e:	480d      	ldr	r0, [pc, #52]	; (8008ab4 <prvInitialiseTaskLists+0x68>)
 8008a80:	f7fe fce4 	bl	800744c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a84:	480c      	ldr	r0, [pc, #48]	; (8008ab8 <prvInitialiseTaskLists+0x6c>)
 8008a86:	f7fe fce1 	bl	800744c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a8a:	480c      	ldr	r0, [pc, #48]	; (8008abc <prvInitialiseTaskLists+0x70>)
 8008a8c:	f7fe fcde 	bl	800744c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a90:	480b      	ldr	r0, [pc, #44]	; (8008ac0 <prvInitialiseTaskLists+0x74>)
 8008a92:	f7fe fcdb 	bl	800744c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a96:	4b0b      	ldr	r3, [pc, #44]	; (8008ac4 <prvInitialiseTaskLists+0x78>)
 8008a98:	4a05      	ldr	r2, [pc, #20]	; (8008ab0 <prvInitialiseTaskLists+0x64>)
 8008a9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a9c:	4b0a      	ldr	r3, [pc, #40]	; (8008ac8 <prvInitialiseTaskLists+0x7c>)
 8008a9e:	4a05      	ldr	r2, [pc, #20]	; (8008ab4 <prvInitialiseTaskLists+0x68>)
 8008aa0:	601a      	str	r2, [r3, #0]
}
 8008aa2:	bf00      	nop
 8008aa4:	3708      	adds	r7, #8
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	200008c4 	.word	0x200008c4
 8008ab0:	20000d24 	.word	0x20000d24
 8008ab4:	20000d38 	.word	0x20000d38
 8008ab8:	20000d54 	.word	0x20000d54
 8008abc:	20000d68 	.word	0x20000d68
 8008ac0:	20000d80 	.word	0x20000d80
 8008ac4:	20000d4c 	.word	0x20000d4c
 8008ac8:	20000d50 	.word	0x20000d50

08008acc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ad2:	e019      	b.n	8008b08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ad4:	f000 fdd6 	bl	8009684 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ad8:	4b10      	ldr	r3, [pc, #64]	; (8008b1c <prvCheckTasksWaitingTermination+0x50>)
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	3304      	adds	r3, #4
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7fe fd3b 	bl	8007560 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008aea:	4b0d      	ldr	r3, [pc, #52]	; (8008b20 <prvCheckTasksWaitingTermination+0x54>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3b01      	subs	r3, #1
 8008af0:	4a0b      	ldr	r2, [pc, #44]	; (8008b20 <prvCheckTasksWaitingTermination+0x54>)
 8008af2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008af4:	4b0b      	ldr	r3, [pc, #44]	; (8008b24 <prvCheckTasksWaitingTermination+0x58>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	3b01      	subs	r3, #1
 8008afa:	4a0a      	ldr	r2, [pc, #40]	; (8008b24 <prvCheckTasksWaitingTermination+0x58>)
 8008afc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008afe:	f000 fdf1 	bl	80096e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f810 	bl	8008b28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b08:	4b06      	ldr	r3, [pc, #24]	; (8008b24 <prvCheckTasksWaitingTermination+0x58>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1e1      	bne.n	8008ad4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b10:	bf00      	nop
 8008b12:	bf00      	nop
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	20000d68 	.word	0x20000d68
 8008b20:	20000d94 	.word	0x20000d94
 8008b24:	20000d7c 	.word	0x20000d7c

08008b28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d108      	bne.n	8008b4c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 ff50 	bl	80099e4 <vPortFree>
				vPortFree( pxTCB );
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 ff4d 	bl	80099e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b4a:	e018      	b.n	8008b7e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d103      	bne.n	8008b5e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 ff44 	bl	80099e4 <vPortFree>
	}
 8008b5c:	e00f      	b.n	8008b7e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d00a      	beq.n	8008b7e <prvDeleteTCB+0x56>
	__asm volatile
 8008b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6c:	f383 8811 	msr	BASEPRI, r3
 8008b70:	f3bf 8f6f 	isb	sy
 8008b74:	f3bf 8f4f 	dsb	sy
 8008b78:	60fb      	str	r3, [r7, #12]
}
 8008b7a:	bf00      	nop
 8008b7c:	e7fe      	b.n	8008b7c <prvDeleteTCB+0x54>
	}
 8008b7e:	bf00      	nop
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
	...

08008b88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b8e:	4b0c      	ldr	r3, [pc, #48]	; (8008bc0 <prvResetNextTaskUnblockTime+0x38>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d104      	bne.n	8008ba2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b98:	4b0a      	ldr	r3, [pc, #40]	; (8008bc4 <prvResetNextTaskUnblockTime+0x3c>)
 8008b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ba0:	e008      	b.n	8008bb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ba2:	4b07      	ldr	r3, [pc, #28]	; (8008bc0 <prvResetNextTaskUnblockTime+0x38>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	4a04      	ldr	r2, [pc, #16]	; (8008bc4 <prvResetNextTaskUnblockTime+0x3c>)
 8008bb2:	6013      	str	r3, [r2, #0]
}
 8008bb4:	bf00      	nop
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr
 8008bc0:	20000d4c 	.word	0x20000d4c
 8008bc4:	20000db4 	.word	0x20000db4

08008bc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008bce:	4b0b      	ldr	r3, [pc, #44]	; (8008bfc <xTaskGetSchedulerState+0x34>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d102      	bne.n	8008bdc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	607b      	str	r3, [r7, #4]
 8008bda:	e008      	b.n	8008bee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bdc:	4b08      	ldr	r3, [pc, #32]	; (8008c00 <xTaskGetSchedulerState+0x38>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d102      	bne.n	8008bea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008be4:	2302      	movs	r3, #2
 8008be6:	607b      	str	r3, [r7, #4]
 8008be8:	e001      	b.n	8008bee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008bea:	2300      	movs	r3, #0
 8008bec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008bee:	687b      	ldr	r3, [r7, #4]
	}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr
 8008bfc:	20000da0 	.word	0x20000da0
 8008c00:	20000dbc 	.word	0x20000dbc

08008c04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c10:	2300      	movs	r3, #0
 8008c12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d056      	beq.n	8008cc8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c1a:	4b2e      	ldr	r3, [pc, #184]	; (8008cd4 <xTaskPriorityDisinherit+0xd0>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	693a      	ldr	r2, [r7, #16]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d00a      	beq.n	8008c3a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c28:	f383 8811 	msr	BASEPRI, r3
 8008c2c:	f3bf 8f6f 	isb	sy
 8008c30:	f3bf 8f4f 	dsb	sy
 8008c34:	60fb      	str	r3, [r7, #12]
}
 8008c36:	bf00      	nop
 8008c38:	e7fe      	b.n	8008c38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d10a      	bne.n	8008c58 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c46:	f383 8811 	msr	BASEPRI, r3
 8008c4a:	f3bf 8f6f 	isb	sy
 8008c4e:	f3bf 8f4f 	dsb	sy
 8008c52:	60bb      	str	r3, [r7, #8]
}
 8008c54:	bf00      	nop
 8008c56:	e7fe      	b.n	8008c56 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c5c:	1e5a      	subs	r2, r3, #1
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d02c      	beq.n	8008cc8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d128      	bne.n	8008cc8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	3304      	adds	r3, #4
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fe fc70 	bl	8007560 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c98:	4b0f      	ldr	r3, [pc, #60]	; (8008cd8 <xTaskPriorityDisinherit+0xd4>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d903      	bls.n	8008ca8 <xTaskPriorityDisinherit+0xa4>
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca4:	4a0c      	ldr	r2, [pc, #48]	; (8008cd8 <xTaskPriorityDisinherit+0xd4>)
 8008ca6:	6013      	str	r3, [r2, #0]
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cac:	4613      	mov	r3, r2
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	4413      	add	r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	4a09      	ldr	r2, [pc, #36]	; (8008cdc <xTaskPriorityDisinherit+0xd8>)
 8008cb6:	441a      	add	r2, r3
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	3304      	adds	r3, #4
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	4610      	mov	r0, r2
 8008cc0:	f7fe fbf1 	bl	80074a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008cc8:	697b      	ldr	r3, [r7, #20]
	}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3718      	adds	r7, #24
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	200008c0 	.word	0x200008c0
 8008cd8:	20000d9c 	.word	0x20000d9c
 8008cdc:	200008c4 	.word	0x200008c4

08008ce0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008cea:	4b21      	ldr	r3, [pc, #132]	; (8008d70 <prvAddCurrentTaskToDelayedList+0x90>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cf0:	4b20      	ldr	r3, [pc, #128]	; (8008d74 <prvAddCurrentTaskToDelayedList+0x94>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	3304      	adds	r3, #4
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fe fc32 	bl	8007560 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d02:	d10a      	bne.n	8008d1a <prvAddCurrentTaskToDelayedList+0x3a>
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d007      	beq.n	8008d1a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d0a:	4b1a      	ldr	r3, [pc, #104]	; (8008d74 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	3304      	adds	r3, #4
 8008d10:	4619      	mov	r1, r3
 8008d12:	4819      	ldr	r0, [pc, #100]	; (8008d78 <prvAddCurrentTaskToDelayedList+0x98>)
 8008d14:	f7fe fbc7 	bl	80074a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d18:	e026      	b.n	8008d68 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4413      	add	r3, r2
 8008d20:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d22:	4b14      	ldr	r3, [pc, #80]	; (8008d74 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d2a:	68ba      	ldr	r2, [r7, #8]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d209      	bcs.n	8008d46 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d32:	4b12      	ldr	r3, [pc, #72]	; (8008d7c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	4b0f      	ldr	r3, [pc, #60]	; (8008d74 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	3304      	adds	r3, #4
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	4610      	mov	r0, r2
 8008d40:	f7fe fbd5 	bl	80074ee <vListInsert>
}
 8008d44:	e010      	b.n	8008d68 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d46:	4b0e      	ldr	r3, [pc, #56]	; (8008d80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	4b0a      	ldr	r3, [pc, #40]	; (8008d74 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	3304      	adds	r3, #4
 8008d50:	4619      	mov	r1, r3
 8008d52:	4610      	mov	r0, r2
 8008d54:	f7fe fbcb 	bl	80074ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d58:	4b0a      	ldr	r3, [pc, #40]	; (8008d84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d202      	bcs.n	8008d68 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008d62:	4a08      	ldr	r2, [pc, #32]	; (8008d84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	6013      	str	r3, [r2, #0]
}
 8008d68:	bf00      	nop
 8008d6a:	3710      	adds	r7, #16
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	20000d98 	.word	0x20000d98
 8008d74:	200008c0 	.word	0x200008c0
 8008d78:	20000d80 	.word	0x20000d80
 8008d7c:	20000d50 	.word	0x20000d50
 8008d80:	20000d4c 	.word	0x20000d4c
 8008d84:	20000db4 	.word	0x20000db4

08008d88 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b08a      	sub	sp, #40	; 0x28
 8008d8c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008d92:	f000 fb07 	bl	80093a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008d96:	4b1c      	ldr	r3, [pc, #112]	; (8008e08 <xTimerCreateTimerTask+0x80>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d021      	beq.n	8008de2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008da2:	2300      	movs	r3, #0
 8008da4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008da6:	1d3a      	adds	r2, r7, #4
 8008da8:	f107 0108 	add.w	r1, r7, #8
 8008dac:	f107 030c 	add.w	r3, r7, #12
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7fe fb31 	bl	8007418 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008db6:	6879      	ldr	r1, [r7, #4]
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	68fa      	ldr	r2, [r7, #12]
 8008dbc:	9202      	str	r2, [sp, #8]
 8008dbe:	9301      	str	r3, [sp, #4]
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	9300      	str	r3, [sp, #0]
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	460a      	mov	r2, r1
 8008dc8:	4910      	ldr	r1, [pc, #64]	; (8008e0c <xTimerCreateTimerTask+0x84>)
 8008dca:	4811      	ldr	r0, [pc, #68]	; (8008e10 <xTimerCreateTimerTask+0x88>)
 8008dcc:	f7ff f8de 	bl	8007f8c <xTaskCreateStatic>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	4a10      	ldr	r2, [pc, #64]	; (8008e14 <xTimerCreateTimerTask+0x8c>)
 8008dd4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008dd6:	4b0f      	ldr	r3, [pc, #60]	; (8008e14 <xTimerCreateTimerTask+0x8c>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d001      	beq.n	8008de2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008dde:	2301      	movs	r3, #1
 8008de0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d10a      	bne.n	8008dfe <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dec:	f383 8811 	msr	BASEPRI, r3
 8008df0:	f3bf 8f6f 	isb	sy
 8008df4:	f3bf 8f4f 	dsb	sy
 8008df8:	613b      	str	r3, [r7, #16]
}
 8008dfa:	bf00      	nop
 8008dfc:	e7fe      	b.n	8008dfc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008dfe:	697b      	ldr	r3, [r7, #20]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3718      	adds	r7, #24
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	20000df0 	.word	0x20000df0
 8008e0c:	0800c8a4 	.word	0x0800c8a4
 8008e10:	08008f4d 	.word	0x08008f4d
 8008e14:	20000df4 	.word	0x20000df4

08008e18 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b08a      	sub	sp, #40	; 0x28
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	607a      	str	r2, [r7, #4]
 8008e24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008e26:	2300      	movs	r3, #0
 8008e28:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d10a      	bne.n	8008e46 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e34:	f383 8811 	msr	BASEPRI, r3
 8008e38:	f3bf 8f6f 	isb	sy
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	623b      	str	r3, [r7, #32]
}
 8008e42:	bf00      	nop
 8008e44:	e7fe      	b.n	8008e44 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008e46:	4b1a      	ldr	r3, [pc, #104]	; (8008eb0 <xTimerGenericCommand+0x98>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d02a      	beq.n	8008ea4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	2b05      	cmp	r3, #5
 8008e5e:	dc18      	bgt.n	8008e92 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e60:	f7ff feb2 	bl	8008bc8 <xTaskGetSchedulerState>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d109      	bne.n	8008e7e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e6a:	4b11      	ldr	r3, [pc, #68]	; (8008eb0 <xTimerGenericCommand+0x98>)
 8008e6c:	6818      	ldr	r0, [r3, #0]
 8008e6e:	f107 0110 	add.w	r1, r7, #16
 8008e72:	2300      	movs	r3, #0
 8008e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e76:	f7fe fca1 	bl	80077bc <xQueueGenericSend>
 8008e7a:	6278      	str	r0, [r7, #36]	; 0x24
 8008e7c:	e012      	b.n	8008ea4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008e7e:	4b0c      	ldr	r3, [pc, #48]	; (8008eb0 <xTimerGenericCommand+0x98>)
 8008e80:	6818      	ldr	r0, [r3, #0]
 8008e82:	f107 0110 	add.w	r1, r7, #16
 8008e86:	2300      	movs	r3, #0
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f7fe fc97 	bl	80077bc <xQueueGenericSend>
 8008e8e:	6278      	str	r0, [r7, #36]	; 0x24
 8008e90:	e008      	b.n	8008ea4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e92:	4b07      	ldr	r3, [pc, #28]	; (8008eb0 <xTimerGenericCommand+0x98>)
 8008e94:	6818      	ldr	r0, [r3, #0]
 8008e96:	f107 0110 	add.w	r1, r7, #16
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	683a      	ldr	r2, [r7, #0]
 8008e9e:	f7fe fd8b 	bl	80079b8 <xQueueGenericSendFromISR>
 8008ea2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3728      	adds	r7, #40	; 0x28
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	20000df0 	.word	0x20000df0

08008eb4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b088      	sub	sp, #32
 8008eb8:	af02      	add	r7, sp, #8
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ebe:	4b22      	ldr	r3, [pc, #136]	; (8008f48 <prvProcessExpiredTimer+0x94>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	3304      	adds	r3, #4
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7fe fb47 	bl	8007560 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ed8:	f003 0304 	and.w	r3, r3, #4
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d022      	beq.n	8008f26 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	699a      	ldr	r2, [r3, #24]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	18d1      	adds	r1, r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	683a      	ldr	r2, [r7, #0]
 8008eec:	6978      	ldr	r0, [r7, #20]
 8008eee:	f000 f8d1 	bl	8009094 <prvInsertTimerInActiveList>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d01f      	beq.n	8008f38 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ef8:	2300      	movs	r3, #0
 8008efa:	9300      	str	r3, [sp, #0]
 8008efc:	2300      	movs	r3, #0
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	2100      	movs	r1, #0
 8008f02:	6978      	ldr	r0, [r7, #20]
 8008f04:	f7ff ff88 	bl	8008e18 <xTimerGenericCommand>
 8008f08:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d113      	bne.n	8008f38 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	60fb      	str	r3, [r7, #12]
}
 8008f22:	bf00      	nop
 8008f24:	e7fe      	b.n	8008f24 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f2c:	f023 0301 	bic.w	r3, r3, #1
 8008f30:	b2da      	uxtb	r2, r3
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	6a1b      	ldr	r3, [r3, #32]
 8008f3c:	6978      	ldr	r0, [r7, #20]
 8008f3e:	4798      	blx	r3
}
 8008f40:	bf00      	nop
 8008f42:	3718      	adds	r7, #24
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	20000de8 	.word	0x20000de8

08008f4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f54:	f107 0308 	add.w	r3, r7, #8
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f000 f857 	bl	800900c <prvGetNextExpireTime>
 8008f5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	4619      	mov	r1, r3
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f000 f803 	bl	8008f70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008f6a:	f000 f8d5 	bl	8009118 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f6e:	e7f1      	b.n	8008f54 <prvTimerTask+0x8>

08008f70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008f7a:	f7ff fa43 	bl	8008404 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f7e:	f107 0308 	add.w	r3, r7, #8
 8008f82:	4618      	mov	r0, r3
 8008f84:	f000 f866 	bl	8009054 <prvSampleTimeNow>
 8008f88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d130      	bne.n	8008ff2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d10a      	bne.n	8008fac <prvProcessTimerOrBlockTask+0x3c>
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d806      	bhi.n	8008fac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008f9e:	f7ff fa3f 	bl	8008420 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008fa2:	68f9      	ldr	r1, [r7, #12]
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7ff ff85 	bl	8008eb4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008faa:	e024      	b.n	8008ff6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d008      	beq.n	8008fc4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008fb2:	4b13      	ldr	r3, [pc, #76]	; (8009000 <prvProcessTimerOrBlockTask+0x90>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d101      	bne.n	8008fc0 <prvProcessTimerOrBlockTask+0x50>
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e000      	b.n	8008fc2 <prvProcessTimerOrBlockTask+0x52>
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008fc4:	4b0f      	ldr	r3, [pc, #60]	; (8009004 <prvProcessTimerOrBlockTask+0x94>)
 8008fc6:	6818      	ldr	r0, [r3, #0]
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	1ad3      	subs	r3, r2, r3
 8008fce:	683a      	ldr	r2, [r7, #0]
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	f7fe ffa7 	bl	8007f24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008fd6:	f7ff fa23 	bl	8008420 <xTaskResumeAll>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d10a      	bne.n	8008ff6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008fe0:	4b09      	ldr	r3, [pc, #36]	; (8009008 <prvProcessTimerOrBlockTask+0x98>)
 8008fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fe6:	601a      	str	r2, [r3, #0]
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	f3bf 8f6f 	isb	sy
}
 8008ff0:	e001      	b.n	8008ff6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008ff2:	f7ff fa15 	bl	8008420 <xTaskResumeAll>
}
 8008ff6:	bf00      	nop
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	20000dec 	.word	0x20000dec
 8009004:	20000df0 	.word	0x20000df0
 8009008:	e000ed04 	.word	0xe000ed04

0800900c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800900c:	b480      	push	{r7}
 800900e:	b085      	sub	sp, #20
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009014:	4b0e      	ldr	r3, [pc, #56]	; (8009050 <prvGetNextExpireTime+0x44>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d101      	bne.n	8009022 <prvGetNextExpireTime+0x16>
 800901e:	2201      	movs	r2, #1
 8009020:	e000      	b.n	8009024 <prvGetNextExpireTime+0x18>
 8009022:	2200      	movs	r2, #0
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d105      	bne.n	800903c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009030:	4b07      	ldr	r3, [pc, #28]	; (8009050 <prvGetNextExpireTime+0x44>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	60fb      	str	r3, [r7, #12]
 800903a:	e001      	b.n	8009040 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800903c:	2300      	movs	r3, #0
 800903e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009040:	68fb      	ldr	r3, [r7, #12]
}
 8009042:	4618      	mov	r0, r3
 8009044:	3714      	adds	r7, #20
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	20000de8 	.word	0x20000de8

08009054 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800905c:	f7ff fa7e 	bl	800855c <xTaskGetTickCount>
 8009060:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009062:	4b0b      	ldr	r3, [pc, #44]	; (8009090 <prvSampleTimeNow+0x3c>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	429a      	cmp	r2, r3
 800906a:	d205      	bcs.n	8009078 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800906c:	f000 f936 	bl	80092dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	601a      	str	r2, [r3, #0]
 8009076:	e002      	b.n	800907e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800907e:	4a04      	ldr	r2, [pc, #16]	; (8009090 <prvSampleTimeNow+0x3c>)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009084:	68fb      	ldr	r3, [r7, #12]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	20000df8 	.word	0x20000df8

08009094 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b086      	sub	sp, #24
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
 80090a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80090a2:	2300      	movs	r3, #0
 80090a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	68ba      	ldr	r2, [r7, #8]
 80090aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	68fa      	ldr	r2, [r7, #12]
 80090b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80090b2:	68ba      	ldr	r2, [r7, #8]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d812      	bhi.n	80090e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	1ad2      	subs	r2, r2, r3
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d302      	bcc.n	80090ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80090c8:	2301      	movs	r3, #1
 80090ca:	617b      	str	r3, [r7, #20]
 80090cc:	e01b      	b.n	8009106 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80090ce:	4b10      	ldr	r3, [pc, #64]	; (8009110 <prvInsertTimerInActiveList+0x7c>)
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	3304      	adds	r3, #4
 80090d6:	4619      	mov	r1, r3
 80090d8:	4610      	mov	r0, r2
 80090da:	f7fe fa08 	bl	80074ee <vListInsert>
 80090de:	e012      	b.n	8009106 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d206      	bcs.n	80090f6 <prvInsertTimerInActiveList+0x62>
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d302      	bcc.n	80090f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80090f0:	2301      	movs	r3, #1
 80090f2:	617b      	str	r3, [r7, #20]
 80090f4:	e007      	b.n	8009106 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090f6:	4b07      	ldr	r3, [pc, #28]	; (8009114 <prvInsertTimerInActiveList+0x80>)
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	3304      	adds	r3, #4
 80090fe:	4619      	mov	r1, r3
 8009100:	4610      	mov	r0, r2
 8009102:	f7fe f9f4 	bl	80074ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009106:	697b      	ldr	r3, [r7, #20]
}
 8009108:	4618      	mov	r0, r3
 800910a:	3718      	adds	r7, #24
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	20000dec 	.word	0x20000dec
 8009114:	20000de8 	.word	0x20000de8

08009118 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b08e      	sub	sp, #56	; 0x38
 800911c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800911e:	e0ca      	b.n	80092b6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	da18      	bge.n	8009158 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009126:	1d3b      	adds	r3, r7, #4
 8009128:	3304      	adds	r3, #4
 800912a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800912c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10a      	bne.n	8009148 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009136:	f383 8811 	msr	BASEPRI, r3
 800913a:	f3bf 8f6f 	isb	sy
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	61fb      	str	r3, [r7, #28]
}
 8009144:	bf00      	nop
 8009146:	e7fe      	b.n	8009146 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800914e:	6850      	ldr	r0, [r2, #4]
 8009150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009152:	6892      	ldr	r2, [r2, #8]
 8009154:	4611      	mov	r1, r2
 8009156:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2b00      	cmp	r3, #0
 800915c:	f2c0 80aa 	blt.w	80092b4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009166:	695b      	ldr	r3, [r3, #20]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d004      	beq.n	8009176 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800916c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916e:	3304      	adds	r3, #4
 8009170:	4618      	mov	r0, r3
 8009172:	f7fe f9f5 	bl	8007560 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009176:	463b      	mov	r3, r7
 8009178:	4618      	mov	r0, r3
 800917a:	f7ff ff6b 	bl	8009054 <prvSampleTimeNow>
 800917e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2b09      	cmp	r3, #9
 8009184:	f200 8097 	bhi.w	80092b6 <prvProcessReceivedCommands+0x19e>
 8009188:	a201      	add	r2, pc, #4	; (adr r2, 8009190 <prvProcessReceivedCommands+0x78>)
 800918a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800918e:	bf00      	nop
 8009190:	080091b9 	.word	0x080091b9
 8009194:	080091b9 	.word	0x080091b9
 8009198:	080091b9 	.word	0x080091b9
 800919c:	0800922d 	.word	0x0800922d
 80091a0:	08009241 	.word	0x08009241
 80091a4:	0800928b 	.word	0x0800928b
 80091a8:	080091b9 	.word	0x080091b9
 80091ac:	080091b9 	.word	0x080091b9
 80091b0:	0800922d 	.word	0x0800922d
 80091b4:	08009241 	.word	0x08009241
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80091b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091be:	f043 0301 	orr.w	r3, r3, #1
 80091c2:	b2da      	uxtb	r2, r3
 80091c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80091ca:	68ba      	ldr	r2, [r7, #8]
 80091cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ce:	699b      	ldr	r3, [r3, #24]
 80091d0:	18d1      	adds	r1, r2, r3
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091d8:	f7ff ff5c 	bl	8009094 <prvInsertTimerInActiveList>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d069      	beq.n	80092b6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091f0:	f003 0304 	and.w	r3, r3, #4
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d05e      	beq.n	80092b6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80091f8:	68ba      	ldr	r2, [r7, #8]
 80091fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fc:	699b      	ldr	r3, [r3, #24]
 80091fe:	441a      	add	r2, r3
 8009200:	2300      	movs	r3, #0
 8009202:	9300      	str	r3, [sp, #0]
 8009204:	2300      	movs	r3, #0
 8009206:	2100      	movs	r1, #0
 8009208:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800920a:	f7ff fe05 	bl	8008e18 <xTimerGenericCommand>
 800920e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009210:	6a3b      	ldr	r3, [r7, #32]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d14f      	bne.n	80092b6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921a:	f383 8811 	msr	BASEPRI, r3
 800921e:	f3bf 8f6f 	isb	sy
 8009222:	f3bf 8f4f 	dsb	sy
 8009226:	61bb      	str	r3, [r7, #24]
}
 8009228:	bf00      	nop
 800922a:	e7fe      	b.n	800922a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800922c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009232:	f023 0301 	bic.w	r3, r3, #1
 8009236:	b2da      	uxtb	r2, r3
 8009238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800923e:	e03a      	b.n	80092b6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009242:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009246:	f043 0301 	orr.w	r3, r3, #1
 800924a:	b2da      	uxtb	r2, r3
 800924c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009252:	68ba      	ldr	r2, [r7, #8]
 8009254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009256:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d10a      	bne.n	8009276 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	617b      	str	r3, [r7, #20]
}
 8009272:	bf00      	nop
 8009274:	e7fe      	b.n	8009274 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009278:	699a      	ldr	r2, [r3, #24]
 800927a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927c:	18d1      	adds	r1, r2, r3
 800927e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009284:	f7ff ff06 	bl	8009094 <prvInsertTimerInActiveList>
					break;
 8009288:	e015      	b.n	80092b6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800928a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009290:	f003 0302 	and.w	r3, r3, #2
 8009294:	2b00      	cmp	r3, #0
 8009296:	d103      	bne.n	80092a0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800929a:	f000 fba3 	bl	80099e4 <vPortFree>
 800929e:	e00a      	b.n	80092b6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092a6:	f023 0301 	bic.w	r3, r3, #1
 80092aa:	b2da      	uxtb	r2, r3
 80092ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80092b2:	e000      	b.n	80092b6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80092b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092b6:	4b08      	ldr	r3, [pc, #32]	; (80092d8 <prvProcessReceivedCommands+0x1c0>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	1d39      	adds	r1, r7, #4
 80092bc:	2200      	movs	r2, #0
 80092be:	4618      	mov	r0, r3
 80092c0:	f7fe fc16 	bl	8007af0 <xQueueReceive>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f47f af2a 	bne.w	8009120 <prvProcessReceivedCommands+0x8>
	}
}
 80092cc:	bf00      	nop
 80092ce:	bf00      	nop
 80092d0:	3730      	adds	r7, #48	; 0x30
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	20000df0 	.word	0x20000df0

080092dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b088      	sub	sp, #32
 80092e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80092e2:	e048      	b.n	8009376 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092e4:	4b2d      	ldr	r3, [pc, #180]	; (800939c <prvSwitchTimerLists+0xc0>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68db      	ldr	r3, [r3, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092ee:	4b2b      	ldr	r3, [pc, #172]	; (800939c <prvSwitchTimerLists+0xc0>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	3304      	adds	r3, #4
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7fe f92f 	bl	8007560 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6a1b      	ldr	r3, [r3, #32]
 8009306:	68f8      	ldr	r0, [r7, #12]
 8009308:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009310:	f003 0304 	and.w	r3, r3, #4
 8009314:	2b00      	cmp	r3, #0
 8009316:	d02e      	beq.n	8009376 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	699b      	ldr	r3, [r3, #24]
 800931c:	693a      	ldr	r2, [r7, #16]
 800931e:	4413      	add	r3, r2
 8009320:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009322:	68ba      	ldr	r2, [r7, #8]
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	429a      	cmp	r2, r3
 8009328:	d90e      	bls.n	8009348 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	68fa      	ldr	r2, [r7, #12]
 8009334:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009336:	4b19      	ldr	r3, [pc, #100]	; (800939c <prvSwitchTimerLists+0xc0>)
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	3304      	adds	r3, #4
 800933e:	4619      	mov	r1, r3
 8009340:	4610      	mov	r0, r2
 8009342:	f7fe f8d4 	bl	80074ee <vListInsert>
 8009346:	e016      	b.n	8009376 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009348:	2300      	movs	r3, #0
 800934a:	9300      	str	r3, [sp, #0]
 800934c:	2300      	movs	r3, #0
 800934e:	693a      	ldr	r2, [r7, #16]
 8009350:	2100      	movs	r1, #0
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f7ff fd60 	bl	8008e18 <xTimerGenericCommand>
 8009358:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d10a      	bne.n	8009376 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009364:	f383 8811 	msr	BASEPRI, r3
 8009368:	f3bf 8f6f 	isb	sy
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	603b      	str	r3, [r7, #0]
}
 8009372:	bf00      	nop
 8009374:	e7fe      	b.n	8009374 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009376:	4b09      	ldr	r3, [pc, #36]	; (800939c <prvSwitchTimerLists+0xc0>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1b1      	bne.n	80092e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009380:	4b06      	ldr	r3, [pc, #24]	; (800939c <prvSwitchTimerLists+0xc0>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009386:	4b06      	ldr	r3, [pc, #24]	; (80093a0 <prvSwitchTimerLists+0xc4>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a04      	ldr	r2, [pc, #16]	; (800939c <prvSwitchTimerLists+0xc0>)
 800938c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800938e:	4a04      	ldr	r2, [pc, #16]	; (80093a0 <prvSwitchTimerLists+0xc4>)
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	6013      	str	r3, [r2, #0]
}
 8009394:	bf00      	nop
 8009396:	3718      	adds	r7, #24
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	20000de8 	.word	0x20000de8
 80093a0:	20000dec 	.word	0x20000dec

080093a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80093aa:	f000 f96b 	bl	8009684 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80093ae:	4b15      	ldr	r3, [pc, #84]	; (8009404 <prvCheckForValidListAndQueue+0x60>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d120      	bne.n	80093f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80093b6:	4814      	ldr	r0, [pc, #80]	; (8009408 <prvCheckForValidListAndQueue+0x64>)
 80093b8:	f7fe f848 	bl	800744c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80093bc:	4813      	ldr	r0, [pc, #76]	; (800940c <prvCheckForValidListAndQueue+0x68>)
 80093be:	f7fe f845 	bl	800744c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80093c2:	4b13      	ldr	r3, [pc, #76]	; (8009410 <prvCheckForValidListAndQueue+0x6c>)
 80093c4:	4a10      	ldr	r2, [pc, #64]	; (8009408 <prvCheckForValidListAndQueue+0x64>)
 80093c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80093c8:	4b12      	ldr	r3, [pc, #72]	; (8009414 <prvCheckForValidListAndQueue+0x70>)
 80093ca:	4a10      	ldr	r2, [pc, #64]	; (800940c <prvCheckForValidListAndQueue+0x68>)
 80093cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80093ce:	2300      	movs	r3, #0
 80093d0:	9300      	str	r3, [sp, #0]
 80093d2:	4b11      	ldr	r3, [pc, #68]	; (8009418 <prvCheckForValidListAndQueue+0x74>)
 80093d4:	4a11      	ldr	r2, [pc, #68]	; (800941c <prvCheckForValidListAndQueue+0x78>)
 80093d6:	2110      	movs	r1, #16
 80093d8:	200a      	movs	r0, #10
 80093da:	f7fe f953 	bl	8007684 <xQueueGenericCreateStatic>
 80093de:	4603      	mov	r3, r0
 80093e0:	4a08      	ldr	r2, [pc, #32]	; (8009404 <prvCheckForValidListAndQueue+0x60>)
 80093e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80093e4:	4b07      	ldr	r3, [pc, #28]	; (8009404 <prvCheckForValidListAndQueue+0x60>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d005      	beq.n	80093f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80093ec:	4b05      	ldr	r3, [pc, #20]	; (8009404 <prvCheckForValidListAndQueue+0x60>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	490b      	ldr	r1, [pc, #44]	; (8009420 <prvCheckForValidListAndQueue+0x7c>)
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7fe fd6c 	bl	8007ed0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093f8:	f000 f974 	bl	80096e4 <vPortExitCritical>
}
 80093fc:	bf00      	nop
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	20000df0 	.word	0x20000df0
 8009408:	20000dc0 	.word	0x20000dc0
 800940c:	20000dd4 	.word	0x20000dd4
 8009410:	20000de8 	.word	0x20000de8
 8009414:	20000dec 	.word	0x20000dec
 8009418:	20000e9c 	.word	0x20000e9c
 800941c:	20000dfc 	.word	0x20000dfc
 8009420:	0800c8ac 	.word	0x0800c8ac

08009424 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	3b04      	subs	r3, #4
 8009434:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800943c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	3b04      	subs	r3, #4
 8009442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	f023 0201 	bic.w	r2, r3, #1
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	3b04      	subs	r3, #4
 8009452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009454:	4a0c      	ldr	r2, [pc, #48]	; (8009488 <pxPortInitialiseStack+0x64>)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	3b14      	subs	r3, #20
 800945e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	3b04      	subs	r3, #4
 800946a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f06f 0202 	mvn.w	r2, #2
 8009472:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	3b20      	subs	r3, #32
 8009478:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800947a:	68fb      	ldr	r3, [r7, #12]
}
 800947c:	4618      	mov	r0, r3
 800947e:	3714      	adds	r7, #20
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr
 8009488:	0800948d 	.word	0x0800948d

0800948c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800948c:	b480      	push	{r7}
 800948e:	b085      	sub	sp, #20
 8009490:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009492:	2300      	movs	r3, #0
 8009494:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009496:	4b12      	ldr	r3, [pc, #72]	; (80094e0 <prvTaskExitError+0x54>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800949e:	d00a      	beq.n	80094b6 <prvTaskExitError+0x2a>
	__asm volatile
 80094a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a4:	f383 8811 	msr	BASEPRI, r3
 80094a8:	f3bf 8f6f 	isb	sy
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	60fb      	str	r3, [r7, #12]
}
 80094b2:	bf00      	nop
 80094b4:	e7fe      	b.n	80094b4 <prvTaskExitError+0x28>
	__asm volatile
 80094b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ba:	f383 8811 	msr	BASEPRI, r3
 80094be:	f3bf 8f6f 	isb	sy
 80094c2:	f3bf 8f4f 	dsb	sy
 80094c6:	60bb      	str	r3, [r7, #8]
}
 80094c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80094ca:	bf00      	nop
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d0fc      	beq.n	80094cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80094d2:	bf00      	nop
 80094d4:	bf00      	nop
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr
 80094e0:	2000000c 	.word	0x2000000c
	...

080094f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80094f0:	4b07      	ldr	r3, [pc, #28]	; (8009510 <pxCurrentTCBConst2>)
 80094f2:	6819      	ldr	r1, [r3, #0]
 80094f4:	6808      	ldr	r0, [r1, #0]
 80094f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094fa:	f380 8809 	msr	PSP, r0
 80094fe:	f3bf 8f6f 	isb	sy
 8009502:	f04f 0000 	mov.w	r0, #0
 8009506:	f380 8811 	msr	BASEPRI, r0
 800950a:	4770      	bx	lr
 800950c:	f3af 8000 	nop.w

08009510 <pxCurrentTCBConst2>:
 8009510:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009514:	bf00      	nop
 8009516:	bf00      	nop

08009518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009518:	4808      	ldr	r0, [pc, #32]	; (800953c <prvPortStartFirstTask+0x24>)
 800951a:	6800      	ldr	r0, [r0, #0]
 800951c:	6800      	ldr	r0, [r0, #0]
 800951e:	f380 8808 	msr	MSP, r0
 8009522:	f04f 0000 	mov.w	r0, #0
 8009526:	f380 8814 	msr	CONTROL, r0
 800952a:	b662      	cpsie	i
 800952c:	b661      	cpsie	f
 800952e:	f3bf 8f4f 	dsb	sy
 8009532:	f3bf 8f6f 	isb	sy
 8009536:	df00      	svc	0
 8009538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800953a:	bf00      	nop
 800953c:	e000ed08 	.word	0xe000ed08

08009540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b086      	sub	sp, #24
 8009544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009546:	4b46      	ldr	r3, [pc, #280]	; (8009660 <xPortStartScheduler+0x120>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a46      	ldr	r2, [pc, #280]	; (8009664 <xPortStartScheduler+0x124>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d10a      	bne.n	8009566 <xPortStartScheduler+0x26>
	__asm volatile
 8009550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009554:	f383 8811 	msr	BASEPRI, r3
 8009558:	f3bf 8f6f 	isb	sy
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	613b      	str	r3, [r7, #16]
}
 8009562:	bf00      	nop
 8009564:	e7fe      	b.n	8009564 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009566:	4b3e      	ldr	r3, [pc, #248]	; (8009660 <xPortStartScheduler+0x120>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a3f      	ldr	r2, [pc, #252]	; (8009668 <xPortStartScheduler+0x128>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d10a      	bne.n	8009586 <xPortStartScheduler+0x46>
	__asm volatile
 8009570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009574:	f383 8811 	msr	BASEPRI, r3
 8009578:	f3bf 8f6f 	isb	sy
 800957c:	f3bf 8f4f 	dsb	sy
 8009580:	60fb      	str	r3, [r7, #12]
}
 8009582:	bf00      	nop
 8009584:	e7fe      	b.n	8009584 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009586:	4b39      	ldr	r3, [pc, #228]	; (800966c <xPortStartScheduler+0x12c>)
 8009588:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	b2db      	uxtb	r3, r3
 8009590:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	22ff      	movs	r2, #255	; 0xff
 8009596:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	b2db      	uxtb	r3, r3
 800959e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80095a0:	78fb      	ldrb	r3, [r7, #3]
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80095a8:	b2da      	uxtb	r2, r3
 80095aa:	4b31      	ldr	r3, [pc, #196]	; (8009670 <xPortStartScheduler+0x130>)
 80095ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80095ae:	4b31      	ldr	r3, [pc, #196]	; (8009674 <xPortStartScheduler+0x134>)
 80095b0:	2207      	movs	r2, #7
 80095b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095b4:	e009      	b.n	80095ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80095b6:	4b2f      	ldr	r3, [pc, #188]	; (8009674 <xPortStartScheduler+0x134>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	3b01      	subs	r3, #1
 80095bc:	4a2d      	ldr	r2, [pc, #180]	; (8009674 <xPortStartScheduler+0x134>)
 80095be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80095c0:	78fb      	ldrb	r3, [r7, #3]
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	005b      	lsls	r3, r3, #1
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095ca:	78fb      	ldrb	r3, [r7, #3]
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095d2:	2b80      	cmp	r3, #128	; 0x80
 80095d4:	d0ef      	beq.n	80095b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80095d6:	4b27      	ldr	r3, [pc, #156]	; (8009674 <xPortStartScheduler+0x134>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f1c3 0307 	rsb	r3, r3, #7
 80095de:	2b04      	cmp	r3, #4
 80095e0:	d00a      	beq.n	80095f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80095e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e6:	f383 8811 	msr	BASEPRI, r3
 80095ea:	f3bf 8f6f 	isb	sy
 80095ee:	f3bf 8f4f 	dsb	sy
 80095f2:	60bb      	str	r3, [r7, #8]
}
 80095f4:	bf00      	nop
 80095f6:	e7fe      	b.n	80095f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80095f8:	4b1e      	ldr	r3, [pc, #120]	; (8009674 <xPortStartScheduler+0x134>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	021b      	lsls	r3, r3, #8
 80095fe:	4a1d      	ldr	r2, [pc, #116]	; (8009674 <xPortStartScheduler+0x134>)
 8009600:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009602:	4b1c      	ldr	r3, [pc, #112]	; (8009674 <xPortStartScheduler+0x134>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800960a:	4a1a      	ldr	r2, [pc, #104]	; (8009674 <xPortStartScheduler+0x134>)
 800960c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	b2da      	uxtb	r2, r3
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009616:	4b18      	ldr	r3, [pc, #96]	; (8009678 <xPortStartScheduler+0x138>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a17      	ldr	r2, [pc, #92]	; (8009678 <xPortStartScheduler+0x138>)
 800961c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009620:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009622:	4b15      	ldr	r3, [pc, #84]	; (8009678 <xPortStartScheduler+0x138>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a14      	ldr	r2, [pc, #80]	; (8009678 <xPortStartScheduler+0x138>)
 8009628:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800962c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800962e:	f000 f8dd 	bl	80097ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009632:	4b12      	ldr	r3, [pc, #72]	; (800967c <xPortStartScheduler+0x13c>)
 8009634:	2200      	movs	r2, #0
 8009636:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009638:	f000 f8fc 	bl	8009834 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800963c:	4b10      	ldr	r3, [pc, #64]	; (8009680 <xPortStartScheduler+0x140>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a0f      	ldr	r2, [pc, #60]	; (8009680 <xPortStartScheduler+0x140>)
 8009642:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009646:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009648:	f7ff ff66 	bl	8009518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800964c:	f7ff f850 	bl	80086f0 <vTaskSwitchContext>
	prvTaskExitError();
 8009650:	f7ff ff1c 	bl	800948c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3718      	adds	r7, #24
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	e000ed00 	.word	0xe000ed00
 8009664:	410fc271 	.word	0x410fc271
 8009668:	410fc270 	.word	0x410fc270
 800966c:	e000e400 	.word	0xe000e400
 8009670:	20000eec 	.word	0x20000eec
 8009674:	20000ef0 	.word	0x20000ef0
 8009678:	e000ed20 	.word	0xe000ed20
 800967c:	2000000c 	.word	0x2000000c
 8009680:	e000ef34 	.word	0xe000ef34

08009684 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
	__asm volatile
 800968a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968e:	f383 8811 	msr	BASEPRI, r3
 8009692:	f3bf 8f6f 	isb	sy
 8009696:	f3bf 8f4f 	dsb	sy
 800969a:	607b      	str	r3, [r7, #4]
}
 800969c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800969e:	4b0f      	ldr	r3, [pc, #60]	; (80096dc <vPortEnterCritical+0x58>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	3301      	adds	r3, #1
 80096a4:	4a0d      	ldr	r2, [pc, #52]	; (80096dc <vPortEnterCritical+0x58>)
 80096a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80096a8:	4b0c      	ldr	r3, [pc, #48]	; (80096dc <vPortEnterCritical+0x58>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d10f      	bne.n	80096d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80096b0:	4b0b      	ldr	r3, [pc, #44]	; (80096e0 <vPortEnterCritical+0x5c>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00a      	beq.n	80096d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80096ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096be:	f383 8811 	msr	BASEPRI, r3
 80096c2:	f3bf 8f6f 	isb	sy
 80096c6:	f3bf 8f4f 	dsb	sy
 80096ca:	603b      	str	r3, [r7, #0]
}
 80096cc:	bf00      	nop
 80096ce:	e7fe      	b.n	80096ce <vPortEnterCritical+0x4a>
	}
}
 80096d0:	bf00      	nop
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr
 80096dc:	2000000c 	.word	0x2000000c
 80096e0:	e000ed04 	.word	0xe000ed04

080096e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80096ea:	4b12      	ldr	r3, [pc, #72]	; (8009734 <vPortExitCritical+0x50>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10a      	bne.n	8009708 <vPortExitCritical+0x24>
	__asm volatile
 80096f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f6:	f383 8811 	msr	BASEPRI, r3
 80096fa:	f3bf 8f6f 	isb	sy
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	607b      	str	r3, [r7, #4]
}
 8009704:	bf00      	nop
 8009706:	e7fe      	b.n	8009706 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009708:	4b0a      	ldr	r3, [pc, #40]	; (8009734 <vPortExitCritical+0x50>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	3b01      	subs	r3, #1
 800970e:	4a09      	ldr	r2, [pc, #36]	; (8009734 <vPortExitCritical+0x50>)
 8009710:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009712:	4b08      	ldr	r3, [pc, #32]	; (8009734 <vPortExitCritical+0x50>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d105      	bne.n	8009726 <vPortExitCritical+0x42>
 800971a:	2300      	movs	r3, #0
 800971c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	f383 8811 	msr	BASEPRI, r3
}
 8009724:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009726:	bf00      	nop
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop
 8009734:	2000000c 	.word	0x2000000c
	...

08009740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009740:	f3ef 8009 	mrs	r0, PSP
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	4b15      	ldr	r3, [pc, #84]	; (80097a0 <pxCurrentTCBConst>)
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	f01e 0f10 	tst.w	lr, #16
 8009750:	bf08      	it	eq
 8009752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800975a:	6010      	str	r0, [r2, #0]
 800975c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009760:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009764:	f380 8811 	msr	BASEPRI, r0
 8009768:	f3bf 8f4f 	dsb	sy
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f7fe ffbe 	bl	80086f0 <vTaskSwitchContext>
 8009774:	f04f 0000 	mov.w	r0, #0
 8009778:	f380 8811 	msr	BASEPRI, r0
 800977c:	bc09      	pop	{r0, r3}
 800977e:	6819      	ldr	r1, [r3, #0]
 8009780:	6808      	ldr	r0, [r1, #0]
 8009782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009786:	f01e 0f10 	tst.w	lr, #16
 800978a:	bf08      	it	eq
 800978c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009790:	f380 8809 	msr	PSP, r0
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	f3af 8000 	nop.w

080097a0 <pxCurrentTCBConst>:
 80097a0:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80097a4:	bf00      	nop
 80097a6:	bf00      	nop

080097a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
	__asm volatile
 80097ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	607b      	str	r3, [r7, #4]
}
 80097c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80097c2:	f7fe fedb 	bl	800857c <xTaskIncrementTick>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d003      	beq.n	80097d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80097cc:	4b06      	ldr	r3, [pc, #24]	; (80097e8 <xPortSysTickHandler+0x40>)
 80097ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097d2:	601a      	str	r2, [r3, #0]
 80097d4:	2300      	movs	r3, #0
 80097d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	f383 8811 	msr	BASEPRI, r3
}
 80097de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80097e0:	bf00      	nop
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	e000ed04 	.word	0xe000ed04

080097ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80097ec:	b480      	push	{r7}
 80097ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80097f0:	4b0b      	ldr	r3, [pc, #44]	; (8009820 <vPortSetupTimerInterrupt+0x34>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80097f6:	4b0b      	ldr	r3, [pc, #44]	; (8009824 <vPortSetupTimerInterrupt+0x38>)
 80097f8:	2200      	movs	r2, #0
 80097fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097fc:	4b0a      	ldr	r3, [pc, #40]	; (8009828 <vPortSetupTimerInterrupt+0x3c>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a0a      	ldr	r2, [pc, #40]	; (800982c <vPortSetupTimerInterrupt+0x40>)
 8009802:	fba2 2303 	umull	r2, r3, r2, r3
 8009806:	099b      	lsrs	r3, r3, #6
 8009808:	4a09      	ldr	r2, [pc, #36]	; (8009830 <vPortSetupTimerInterrupt+0x44>)
 800980a:	3b01      	subs	r3, #1
 800980c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800980e:	4b04      	ldr	r3, [pc, #16]	; (8009820 <vPortSetupTimerInterrupt+0x34>)
 8009810:	2207      	movs	r2, #7
 8009812:	601a      	str	r2, [r3, #0]
}
 8009814:	bf00      	nop
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	e000e010 	.word	0xe000e010
 8009824:	e000e018 	.word	0xe000e018
 8009828:	20000000 	.word	0x20000000
 800982c:	10624dd3 	.word	0x10624dd3
 8009830:	e000e014 	.word	0xe000e014

08009834 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009834:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009844 <vPortEnableVFP+0x10>
 8009838:	6801      	ldr	r1, [r0, #0]
 800983a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800983e:	6001      	str	r1, [r0, #0]
 8009840:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009842:	bf00      	nop
 8009844:	e000ed88 	.word	0xe000ed88

08009848 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800984e:	f3ef 8305 	mrs	r3, IPSR
 8009852:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2b0f      	cmp	r3, #15
 8009858:	d914      	bls.n	8009884 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800985a:	4a17      	ldr	r2, [pc, #92]	; (80098b8 <vPortValidateInterruptPriority+0x70>)
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	4413      	add	r3, r2
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009864:	4b15      	ldr	r3, [pc, #84]	; (80098bc <vPortValidateInterruptPriority+0x74>)
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	7afa      	ldrb	r2, [r7, #11]
 800986a:	429a      	cmp	r2, r3
 800986c:	d20a      	bcs.n	8009884 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800986e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009872:	f383 8811 	msr	BASEPRI, r3
 8009876:	f3bf 8f6f 	isb	sy
 800987a:	f3bf 8f4f 	dsb	sy
 800987e:	607b      	str	r3, [r7, #4]
}
 8009880:	bf00      	nop
 8009882:	e7fe      	b.n	8009882 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009884:	4b0e      	ldr	r3, [pc, #56]	; (80098c0 <vPortValidateInterruptPriority+0x78>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800988c:	4b0d      	ldr	r3, [pc, #52]	; (80098c4 <vPortValidateInterruptPriority+0x7c>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	429a      	cmp	r2, r3
 8009892:	d90a      	bls.n	80098aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009898:	f383 8811 	msr	BASEPRI, r3
 800989c:	f3bf 8f6f 	isb	sy
 80098a0:	f3bf 8f4f 	dsb	sy
 80098a4:	603b      	str	r3, [r7, #0]
}
 80098a6:	bf00      	nop
 80098a8:	e7fe      	b.n	80098a8 <vPortValidateInterruptPriority+0x60>
	}
 80098aa:	bf00      	nop
 80098ac:	3714      	adds	r7, #20
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	e000e3f0 	.word	0xe000e3f0
 80098bc:	20000eec 	.word	0x20000eec
 80098c0:	e000ed0c 	.word	0xe000ed0c
 80098c4:	20000ef0 	.word	0x20000ef0

080098c8 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b088      	sub	sp, #32
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 80098d0:	2300      	movs	r3, #0
 80098d2:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 80098d4:	f7fe fd96 	bl	8008404 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 80098d8:	4b3e      	ldr	r3, [pc, #248]	; (80099d4 <pvPortMalloc+0x10c>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d104      	bne.n	80098ea <pvPortMalloc+0x22>
		{
			prvHeapInit();
 80098e0:	f000 f8ba 	bl	8009a58 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 80098e4:	4b3b      	ldr	r3, [pc, #236]	; (80099d4 <pvPortMalloc+0x10c>)
 80098e6:	2201      	movs	r2, #1
 80098e8:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d00e      	beq.n	800990e <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 80098f0:	2308      	movs	r3, #8
 80098f2:	461a      	mov	r2, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4413      	add	r3, r2
 80098f8:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f003 0307 	and.w	r3, r3, #7
 8009900:	2b00      	cmp	r3, #0
 8009902:	d004      	beq.n	800990e <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f023 0307 	bic.w	r3, r3, #7
 800990a:	3308      	adds	r3, #8
 800990c:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d057      	beq.n	80099c4 <pvPortMalloc+0xfc>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f247 5227 	movw	r2, #29991	; 0x7527
 800991a:	4293      	cmp	r3, r2
 800991c:	d852      	bhi.n	80099c4 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 800991e:	4b2e      	ldr	r3, [pc, #184]	; (80099d8 <pvPortMalloc+0x110>)
 8009920:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 8009922:	4b2d      	ldr	r3, [pc, #180]	; (80099d8 <pvPortMalloc+0x110>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009928:	e004      	b.n	8009934 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009934:	69fb      	ldr	r3, [r7, #28]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	429a      	cmp	r2, r3
 800993c:	d903      	bls.n	8009946 <pvPortMalloc+0x7e>
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1f1      	bne.n	800992a <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	4a24      	ldr	r2, [pc, #144]	; (80099dc <pvPortMalloc+0x114>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d03a      	beq.n	80099c4 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2208      	movs	r2, #8
 8009954:	4413      	add	r3, r2
 8009956:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	685a      	ldr	r2, [r3, #4]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	1ad3      	subs	r3, r2, r3
 8009968:	2208      	movs	r2, #8
 800996a:	0052      	lsls	r2, r2, #1
 800996c:	4293      	cmp	r3, r2
 800996e:	d922      	bls.n	80099b6 <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009970:	69fa      	ldr	r2, [r7, #28]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4413      	add	r3, r2
 8009976:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	685a      	ldr	r2, [r3, #4]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	1ad2      	subs	r2, r2, r3
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	60bb      	str	r3, [r7, #8]
 8009990:	4b11      	ldr	r3, [pc, #68]	; (80099d8 <pvPortMalloc+0x110>)
 8009992:	613b      	str	r3, [r7, #16]
 8009994:	e002      	b.n	800999c <pvPortMalloc+0xd4>
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	613b      	str	r3, [r7, #16]
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	68ba      	ldr	r2, [r7, #8]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d8f6      	bhi.n	8009996 <pvPortMalloc+0xce>
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	601a      	str	r2, [r3, #0]
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	68fa      	ldr	r2, [r7, #12]
 80099b4:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 80099b6:	4b0a      	ldr	r3, [pc, #40]	; (80099e0 <pvPortMalloc+0x118>)
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	4a07      	ldr	r2, [pc, #28]	; (80099e0 <pvPortMalloc+0x118>)
 80099c2:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80099c4:	f7fe fd2c 	bl	8008420 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 80099c8:	697b      	ldr	r3, [r7, #20]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3720      	adds	r7, #32
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	20008434 	.word	0x20008434
 80099d8:	20008424 	.word	0x20008424
 80099dc:	2000842c 	.word	0x2000842c
 80099e0:	20000010 	.word	0x20000010

080099e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d027      	beq.n	8009a46 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 80099f6:	2308      	movs	r3, #8
 80099f8:	425b      	negs	r3, r3
 80099fa:	693a      	ldr	r2, [r7, #16]
 80099fc:	4413      	add	r3, r2
 80099fe:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 8009a04:	f7fe fcfe 	bl	8008404 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	60bb      	str	r3, [r7, #8]
 8009a0e:	4b10      	ldr	r3, [pc, #64]	; (8009a50 <vPortFree+0x6c>)
 8009a10:	617b      	str	r3, [r7, #20]
 8009a12:	e002      	b.n	8009a1a <vPortFree+0x36>
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	617b      	str	r3, [r7, #20]
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	68ba      	ldr	r2, [r7, #8]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d8f6      	bhi.n	8009a14 <vPortFree+0x30>
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	601a      	str	r2, [r3, #0]
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	68fa      	ldr	r2, [r7, #12]
 8009a32:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	685a      	ldr	r2, [r3, #4]
 8009a38:	4b06      	ldr	r3, [pc, #24]	; (8009a54 <vPortFree+0x70>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	4a05      	ldr	r2, [pc, #20]	; (8009a54 <vPortFree+0x70>)
 8009a40:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 8009a42:	f7fe fced 	bl	8008420 <xTaskResumeAll>
	}
}
 8009a46:	bf00      	nop
 8009a48:	3718      	adds	r7, #24
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	20008424 	.word	0x20008424
 8009a54:	20000010 	.word	0x20000010

08009a58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8009a5e:	4b10      	ldr	r3, [pc, #64]	; (8009aa0 <prvHeapInit+0x48>)
 8009a60:	f023 0307 	bic.w	r3, r3, #7
 8009a64:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a66:	4a0f      	ldr	r2, [pc, #60]	; (8009aa4 <prvHeapInit+0x4c>)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a6c:	4b0d      	ldr	r3, [pc, #52]	; (8009aa4 <prvHeapInit+0x4c>)
 8009a6e:	2200      	movs	r2, #0
 8009a70:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8009a72:	4b0d      	ldr	r3, [pc, #52]	; (8009aa8 <prvHeapInit+0x50>)
 8009a74:	f247 5228 	movw	r2, #29992	; 0x7528
 8009a78:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 8009a7a:	4b0b      	ldr	r3, [pc, #44]	; (8009aa8 <prvHeapInit+0x50>)
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	f247 5228 	movw	r2, #29992	; 0x7528
 8009a8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	4a06      	ldr	r2, [pc, #24]	; (8009aa8 <prvHeapInit+0x50>)
 8009a90:	601a      	str	r2, [r3, #0]
}
 8009a92:	bf00      	nop
 8009a94:	370c      	adds	r7, #12
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr
 8009a9e:	bf00      	nop
 8009aa0:	20000efc 	.word	0x20000efc
 8009aa4:	20008424 	.word	0x20008424
 8009aa8:	2000842c 	.word	0x2000842c

08009aac <__errno>:
 8009aac:	4b01      	ldr	r3, [pc, #4]	; (8009ab4 <__errno+0x8>)
 8009aae:	6818      	ldr	r0, [r3, #0]
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop
 8009ab4:	20000014 	.word	0x20000014

08009ab8 <__libc_init_array>:
 8009ab8:	b570      	push	{r4, r5, r6, lr}
 8009aba:	4d0d      	ldr	r5, [pc, #52]	; (8009af0 <__libc_init_array+0x38>)
 8009abc:	4c0d      	ldr	r4, [pc, #52]	; (8009af4 <__libc_init_array+0x3c>)
 8009abe:	1b64      	subs	r4, r4, r5
 8009ac0:	10a4      	asrs	r4, r4, #2
 8009ac2:	2600      	movs	r6, #0
 8009ac4:	42a6      	cmp	r6, r4
 8009ac6:	d109      	bne.n	8009adc <__libc_init_array+0x24>
 8009ac8:	4d0b      	ldr	r5, [pc, #44]	; (8009af8 <__libc_init_array+0x40>)
 8009aca:	4c0c      	ldr	r4, [pc, #48]	; (8009afc <__libc_init_array+0x44>)
 8009acc:	f002 feb4 	bl	800c838 <_init>
 8009ad0:	1b64      	subs	r4, r4, r5
 8009ad2:	10a4      	asrs	r4, r4, #2
 8009ad4:	2600      	movs	r6, #0
 8009ad6:	42a6      	cmp	r6, r4
 8009ad8:	d105      	bne.n	8009ae6 <__libc_init_array+0x2e>
 8009ada:	bd70      	pop	{r4, r5, r6, pc}
 8009adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ae0:	4798      	blx	r3
 8009ae2:	3601      	adds	r6, #1
 8009ae4:	e7ee      	b.n	8009ac4 <__libc_init_array+0xc>
 8009ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aea:	4798      	blx	r3
 8009aec:	3601      	adds	r6, #1
 8009aee:	e7f2      	b.n	8009ad6 <__libc_init_array+0x1e>
 8009af0:	0800cd54 	.word	0x0800cd54
 8009af4:	0800cd54 	.word	0x0800cd54
 8009af8:	0800cd54 	.word	0x0800cd54
 8009afc:	0800cd58 	.word	0x0800cd58

08009b00 <memcpy>:
 8009b00:	440a      	add	r2, r1
 8009b02:	4291      	cmp	r1, r2
 8009b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b08:	d100      	bne.n	8009b0c <memcpy+0xc>
 8009b0a:	4770      	bx	lr
 8009b0c:	b510      	push	{r4, lr}
 8009b0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b16:	4291      	cmp	r1, r2
 8009b18:	d1f9      	bne.n	8009b0e <memcpy+0xe>
 8009b1a:	bd10      	pop	{r4, pc}

08009b1c <memset>:
 8009b1c:	4402      	add	r2, r0
 8009b1e:	4603      	mov	r3, r0
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d100      	bne.n	8009b26 <memset+0xa>
 8009b24:	4770      	bx	lr
 8009b26:	f803 1b01 	strb.w	r1, [r3], #1
 8009b2a:	e7f9      	b.n	8009b20 <memset+0x4>

08009b2c <__cvt>:
 8009b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b30:	ec55 4b10 	vmov	r4, r5, d0
 8009b34:	2d00      	cmp	r5, #0
 8009b36:	460e      	mov	r6, r1
 8009b38:	4619      	mov	r1, r3
 8009b3a:	462b      	mov	r3, r5
 8009b3c:	bfbb      	ittet	lt
 8009b3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009b42:	461d      	movlt	r5, r3
 8009b44:	2300      	movge	r3, #0
 8009b46:	232d      	movlt	r3, #45	; 0x2d
 8009b48:	700b      	strb	r3, [r1, #0]
 8009b4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009b50:	4691      	mov	r9, r2
 8009b52:	f023 0820 	bic.w	r8, r3, #32
 8009b56:	bfbc      	itt	lt
 8009b58:	4622      	movlt	r2, r4
 8009b5a:	4614      	movlt	r4, r2
 8009b5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b60:	d005      	beq.n	8009b6e <__cvt+0x42>
 8009b62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009b66:	d100      	bne.n	8009b6a <__cvt+0x3e>
 8009b68:	3601      	adds	r6, #1
 8009b6a:	2102      	movs	r1, #2
 8009b6c:	e000      	b.n	8009b70 <__cvt+0x44>
 8009b6e:	2103      	movs	r1, #3
 8009b70:	ab03      	add	r3, sp, #12
 8009b72:	9301      	str	r3, [sp, #4]
 8009b74:	ab02      	add	r3, sp, #8
 8009b76:	9300      	str	r3, [sp, #0]
 8009b78:	ec45 4b10 	vmov	d0, r4, r5
 8009b7c:	4653      	mov	r3, sl
 8009b7e:	4632      	mov	r2, r6
 8009b80:	f000 fcea 	bl	800a558 <_dtoa_r>
 8009b84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009b88:	4607      	mov	r7, r0
 8009b8a:	d102      	bne.n	8009b92 <__cvt+0x66>
 8009b8c:	f019 0f01 	tst.w	r9, #1
 8009b90:	d022      	beq.n	8009bd8 <__cvt+0xac>
 8009b92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b96:	eb07 0906 	add.w	r9, r7, r6
 8009b9a:	d110      	bne.n	8009bbe <__cvt+0x92>
 8009b9c:	783b      	ldrb	r3, [r7, #0]
 8009b9e:	2b30      	cmp	r3, #48	; 0x30
 8009ba0:	d10a      	bne.n	8009bb8 <__cvt+0x8c>
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	4629      	mov	r1, r5
 8009baa:	f7f6 ff8d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bae:	b918      	cbnz	r0, 8009bb8 <__cvt+0x8c>
 8009bb0:	f1c6 0601 	rsb	r6, r6, #1
 8009bb4:	f8ca 6000 	str.w	r6, [sl]
 8009bb8:	f8da 3000 	ldr.w	r3, [sl]
 8009bbc:	4499      	add	r9, r3
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	f7f6 ff7f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bca:	b108      	cbz	r0, 8009bd0 <__cvt+0xa4>
 8009bcc:	f8cd 900c 	str.w	r9, [sp, #12]
 8009bd0:	2230      	movs	r2, #48	; 0x30
 8009bd2:	9b03      	ldr	r3, [sp, #12]
 8009bd4:	454b      	cmp	r3, r9
 8009bd6:	d307      	bcc.n	8009be8 <__cvt+0xbc>
 8009bd8:	9b03      	ldr	r3, [sp, #12]
 8009bda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bdc:	1bdb      	subs	r3, r3, r7
 8009bde:	4638      	mov	r0, r7
 8009be0:	6013      	str	r3, [r2, #0]
 8009be2:	b004      	add	sp, #16
 8009be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009be8:	1c59      	adds	r1, r3, #1
 8009bea:	9103      	str	r1, [sp, #12]
 8009bec:	701a      	strb	r2, [r3, #0]
 8009bee:	e7f0      	b.n	8009bd2 <__cvt+0xa6>

08009bf0 <__exponent>:
 8009bf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2900      	cmp	r1, #0
 8009bf6:	bfb8      	it	lt
 8009bf8:	4249      	neglt	r1, r1
 8009bfa:	f803 2b02 	strb.w	r2, [r3], #2
 8009bfe:	bfb4      	ite	lt
 8009c00:	222d      	movlt	r2, #45	; 0x2d
 8009c02:	222b      	movge	r2, #43	; 0x2b
 8009c04:	2909      	cmp	r1, #9
 8009c06:	7042      	strb	r2, [r0, #1]
 8009c08:	dd2a      	ble.n	8009c60 <__exponent+0x70>
 8009c0a:	f10d 0407 	add.w	r4, sp, #7
 8009c0e:	46a4      	mov	ip, r4
 8009c10:	270a      	movs	r7, #10
 8009c12:	46a6      	mov	lr, r4
 8009c14:	460a      	mov	r2, r1
 8009c16:	fb91 f6f7 	sdiv	r6, r1, r7
 8009c1a:	fb07 1516 	mls	r5, r7, r6, r1
 8009c1e:	3530      	adds	r5, #48	; 0x30
 8009c20:	2a63      	cmp	r2, #99	; 0x63
 8009c22:	f104 34ff 	add.w	r4, r4, #4294967295
 8009c26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009c2a:	4631      	mov	r1, r6
 8009c2c:	dcf1      	bgt.n	8009c12 <__exponent+0x22>
 8009c2e:	3130      	adds	r1, #48	; 0x30
 8009c30:	f1ae 0502 	sub.w	r5, lr, #2
 8009c34:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009c38:	1c44      	adds	r4, r0, #1
 8009c3a:	4629      	mov	r1, r5
 8009c3c:	4561      	cmp	r1, ip
 8009c3e:	d30a      	bcc.n	8009c56 <__exponent+0x66>
 8009c40:	f10d 0209 	add.w	r2, sp, #9
 8009c44:	eba2 020e 	sub.w	r2, r2, lr
 8009c48:	4565      	cmp	r5, ip
 8009c4a:	bf88      	it	hi
 8009c4c:	2200      	movhi	r2, #0
 8009c4e:	4413      	add	r3, r2
 8009c50:	1a18      	subs	r0, r3, r0
 8009c52:	b003      	add	sp, #12
 8009c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c5a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009c5e:	e7ed      	b.n	8009c3c <__exponent+0x4c>
 8009c60:	2330      	movs	r3, #48	; 0x30
 8009c62:	3130      	adds	r1, #48	; 0x30
 8009c64:	7083      	strb	r3, [r0, #2]
 8009c66:	70c1      	strb	r1, [r0, #3]
 8009c68:	1d03      	adds	r3, r0, #4
 8009c6a:	e7f1      	b.n	8009c50 <__exponent+0x60>

08009c6c <_printf_float>:
 8009c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c70:	ed2d 8b02 	vpush	{d8}
 8009c74:	b08d      	sub	sp, #52	; 0x34
 8009c76:	460c      	mov	r4, r1
 8009c78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009c7c:	4616      	mov	r6, r2
 8009c7e:	461f      	mov	r7, r3
 8009c80:	4605      	mov	r5, r0
 8009c82:	f001 fa55 	bl	800b130 <_localeconv_r>
 8009c86:	f8d0 a000 	ldr.w	sl, [r0]
 8009c8a:	4650      	mov	r0, sl
 8009c8c:	f7f6 faa0 	bl	80001d0 <strlen>
 8009c90:	2300      	movs	r3, #0
 8009c92:	930a      	str	r3, [sp, #40]	; 0x28
 8009c94:	6823      	ldr	r3, [r4, #0]
 8009c96:	9305      	str	r3, [sp, #20]
 8009c98:	f8d8 3000 	ldr.w	r3, [r8]
 8009c9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009ca0:	3307      	adds	r3, #7
 8009ca2:	f023 0307 	bic.w	r3, r3, #7
 8009ca6:	f103 0208 	add.w	r2, r3, #8
 8009caa:	f8c8 2000 	str.w	r2, [r8]
 8009cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009cb6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009cba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009cbe:	9307      	str	r3, [sp, #28]
 8009cc0:	f8cd 8018 	str.w	r8, [sp, #24]
 8009cc4:	ee08 0a10 	vmov	s16, r0
 8009cc8:	4b9f      	ldr	r3, [pc, #636]	; (8009f48 <_printf_float+0x2dc>)
 8009cca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cce:	f04f 32ff 	mov.w	r2, #4294967295
 8009cd2:	f7f6 ff2b 	bl	8000b2c <__aeabi_dcmpun>
 8009cd6:	bb88      	cbnz	r0, 8009d3c <_printf_float+0xd0>
 8009cd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cdc:	4b9a      	ldr	r3, [pc, #616]	; (8009f48 <_printf_float+0x2dc>)
 8009cde:	f04f 32ff 	mov.w	r2, #4294967295
 8009ce2:	f7f6 ff05 	bl	8000af0 <__aeabi_dcmple>
 8009ce6:	bb48      	cbnz	r0, 8009d3c <_printf_float+0xd0>
 8009ce8:	2200      	movs	r2, #0
 8009cea:	2300      	movs	r3, #0
 8009cec:	4640      	mov	r0, r8
 8009cee:	4649      	mov	r1, r9
 8009cf0:	f7f6 fef4 	bl	8000adc <__aeabi_dcmplt>
 8009cf4:	b110      	cbz	r0, 8009cfc <_printf_float+0x90>
 8009cf6:	232d      	movs	r3, #45	; 0x2d
 8009cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cfc:	4b93      	ldr	r3, [pc, #588]	; (8009f4c <_printf_float+0x2e0>)
 8009cfe:	4894      	ldr	r0, [pc, #592]	; (8009f50 <_printf_float+0x2e4>)
 8009d00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009d04:	bf94      	ite	ls
 8009d06:	4698      	movls	r8, r3
 8009d08:	4680      	movhi	r8, r0
 8009d0a:	2303      	movs	r3, #3
 8009d0c:	6123      	str	r3, [r4, #16]
 8009d0e:	9b05      	ldr	r3, [sp, #20]
 8009d10:	f023 0204 	bic.w	r2, r3, #4
 8009d14:	6022      	str	r2, [r4, #0]
 8009d16:	f04f 0900 	mov.w	r9, #0
 8009d1a:	9700      	str	r7, [sp, #0]
 8009d1c:	4633      	mov	r3, r6
 8009d1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009d20:	4621      	mov	r1, r4
 8009d22:	4628      	mov	r0, r5
 8009d24:	f000 f9d8 	bl	800a0d8 <_printf_common>
 8009d28:	3001      	adds	r0, #1
 8009d2a:	f040 8090 	bne.w	8009e4e <_printf_float+0x1e2>
 8009d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d32:	b00d      	add	sp, #52	; 0x34
 8009d34:	ecbd 8b02 	vpop	{d8}
 8009d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d3c:	4642      	mov	r2, r8
 8009d3e:	464b      	mov	r3, r9
 8009d40:	4640      	mov	r0, r8
 8009d42:	4649      	mov	r1, r9
 8009d44:	f7f6 fef2 	bl	8000b2c <__aeabi_dcmpun>
 8009d48:	b140      	cbz	r0, 8009d5c <_printf_float+0xf0>
 8009d4a:	464b      	mov	r3, r9
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	bfbc      	itt	lt
 8009d50:	232d      	movlt	r3, #45	; 0x2d
 8009d52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009d56:	487f      	ldr	r0, [pc, #508]	; (8009f54 <_printf_float+0x2e8>)
 8009d58:	4b7f      	ldr	r3, [pc, #508]	; (8009f58 <_printf_float+0x2ec>)
 8009d5a:	e7d1      	b.n	8009d00 <_printf_float+0x94>
 8009d5c:	6863      	ldr	r3, [r4, #4]
 8009d5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009d62:	9206      	str	r2, [sp, #24]
 8009d64:	1c5a      	adds	r2, r3, #1
 8009d66:	d13f      	bne.n	8009de8 <_printf_float+0x17c>
 8009d68:	2306      	movs	r3, #6
 8009d6a:	6063      	str	r3, [r4, #4]
 8009d6c:	9b05      	ldr	r3, [sp, #20]
 8009d6e:	6861      	ldr	r1, [r4, #4]
 8009d70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009d74:	2300      	movs	r3, #0
 8009d76:	9303      	str	r3, [sp, #12]
 8009d78:	ab0a      	add	r3, sp, #40	; 0x28
 8009d7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009d7e:	ab09      	add	r3, sp, #36	; 0x24
 8009d80:	ec49 8b10 	vmov	d0, r8, r9
 8009d84:	9300      	str	r3, [sp, #0]
 8009d86:	6022      	str	r2, [r4, #0]
 8009d88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	f7ff fecd 	bl	8009b2c <__cvt>
 8009d92:	9b06      	ldr	r3, [sp, #24]
 8009d94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d96:	2b47      	cmp	r3, #71	; 0x47
 8009d98:	4680      	mov	r8, r0
 8009d9a:	d108      	bne.n	8009dae <_printf_float+0x142>
 8009d9c:	1cc8      	adds	r0, r1, #3
 8009d9e:	db02      	blt.n	8009da6 <_printf_float+0x13a>
 8009da0:	6863      	ldr	r3, [r4, #4]
 8009da2:	4299      	cmp	r1, r3
 8009da4:	dd41      	ble.n	8009e2a <_printf_float+0x1be>
 8009da6:	f1ab 0b02 	sub.w	fp, fp, #2
 8009daa:	fa5f fb8b 	uxtb.w	fp, fp
 8009dae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009db2:	d820      	bhi.n	8009df6 <_printf_float+0x18a>
 8009db4:	3901      	subs	r1, #1
 8009db6:	465a      	mov	r2, fp
 8009db8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009dbc:	9109      	str	r1, [sp, #36]	; 0x24
 8009dbe:	f7ff ff17 	bl	8009bf0 <__exponent>
 8009dc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009dc4:	1813      	adds	r3, r2, r0
 8009dc6:	2a01      	cmp	r2, #1
 8009dc8:	4681      	mov	r9, r0
 8009dca:	6123      	str	r3, [r4, #16]
 8009dcc:	dc02      	bgt.n	8009dd4 <_printf_float+0x168>
 8009dce:	6822      	ldr	r2, [r4, #0]
 8009dd0:	07d2      	lsls	r2, r2, #31
 8009dd2:	d501      	bpl.n	8009dd8 <_printf_float+0x16c>
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	6123      	str	r3, [r4, #16]
 8009dd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d09c      	beq.n	8009d1a <_printf_float+0xae>
 8009de0:	232d      	movs	r3, #45	; 0x2d
 8009de2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009de6:	e798      	b.n	8009d1a <_printf_float+0xae>
 8009de8:	9a06      	ldr	r2, [sp, #24]
 8009dea:	2a47      	cmp	r2, #71	; 0x47
 8009dec:	d1be      	bne.n	8009d6c <_printf_float+0x100>
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1bc      	bne.n	8009d6c <_printf_float+0x100>
 8009df2:	2301      	movs	r3, #1
 8009df4:	e7b9      	b.n	8009d6a <_printf_float+0xfe>
 8009df6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009dfa:	d118      	bne.n	8009e2e <_printf_float+0x1c2>
 8009dfc:	2900      	cmp	r1, #0
 8009dfe:	6863      	ldr	r3, [r4, #4]
 8009e00:	dd0b      	ble.n	8009e1a <_printf_float+0x1ae>
 8009e02:	6121      	str	r1, [r4, #16]
 8009e04:	b913      	cbnz	r3, 8009e0c <_printf_float+0x1a0>
 8009e06:	6822      	ldr	r2, [r4, #0]
 8009e08:	07d0      	lsls	r0, r2, #31
 8009e0a:	d502      	bpl.n	8009e12 <_printf_float+0x1a6>
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	440b      	add	r3, r1
 8009e10:	6123      	str	r3, [r4, #16]
 8009e12:	65a1      	str	r1, [r4, #88]	; 0x58
 8009e14:	f04f 0900 	mov.w	r9, #0
 8009e18:	e7de      	b.n	8009dd8 <_printf_float+0x16c>
 8009e1a:	b913      	cbnz	r3, 8009e22 <_printf_float+0x1b6>
 8009e1c:	6822      	ldr	r2, [r4, #0]
 8009e1e:	07d2      	lsls	r2, r2, #31
 8009e20:	d501      	bpl.n	8009e26 <_printf_float+0x1ba>
 8009e22:	3302      	adds	r3, #2
 8009e24:	e7f4      	b.n	8009e10 <_printf_float+0x1a4>
 8009e26:	2301      	movs	r3, #1
 8009e28:	e7f2      	b.n	8009e10 <_printf_float+0x1a4>
 8009e2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e30:	4299      	cmp	r1, r3
 8009e32:	db05      	blt.n	8009e40 <_printf_float+0x1d4>
 8009e34:	6823      	ldr	r3, [r4, #0]
 8009e36:	6121      	str	r1, [r4, #16]
 8009e38:	07d8      	lsls	r0, r3, #31
 8009e3a:	d5ea      	bpl.n	8009e12 <_printf_float+0x1a6>
 8009e3c:	1c4b      	adds	r3, r1, #1
 8009e3e:	e7e7      	b.n	8009e10 <_printf_float+0x1a4>
 8009e40:	2900      	cmp	r1, #0
 8009e42:	bfd4      	ite	le
 8009e44:	f1c1 0202 	rsble	r2, r1, #2
 8009e48:	2201      	movgt	r2, #1
 8009e4a:	4413      	add	r3, r2
 8009e4c:	e7e0      	b.n	8009e10 <_printf_float+0x1a4>
 8009e4e:	6823      	ldr	r3, [r4, #0]
 8009e50:	055a      	lsls	r2, r3, #21
 8009e52:	d407      	bmi.n	8009e64 <_printf_float+0x1f8>
 8009e54:	6923      	ldr	r3, [r4, #16]
 8009e56:	4642      	mov	r2, r8
 8009e58:	4631      	mov	r1, r6
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	47b8      	blx	r7
 8009e5e:	3001      	adds	r0, #1
 8009e60:	d12c      	bne.n	8009ebc <_printf_float+0x250>
 8009e62:	e764      	b.n	8009d2e <_printf_float+0xc2>
 8009e64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e68:	f240 80e0 	bls.w	800a02c <_printf_float+0x3c0>
 8009e6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e70:	2200      	movs	r2, #0
 8009e72:	2300      	movs	r3, #0
 8009e74:	f7f6 fe28 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	d034      	beq.n	8009ee6 <_printf_float+0x27a>
 8009e7c:	4a37      	ldr	r2, [pc, #220]	; (8009f5c <_printf_float+0x2f0>)
 8009e7e:	2301      	movs	r3, #1
 8009e80:	4631      	mov	r1, r6
 8009e82:	4628      	mov	r0, r5
 8009e84:	47b8      	blx	r7
 8009e86:	3001      	adds	r0, #1
 8009e88:	f43f af51 	beq.w	8009d2e <_printf_float+0xc2>
 8009e8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e90:	429a      	cmp	r2, r3
 8009e92:	db02      	blt.n	8009e9a <_printf_float+0x22e>
 8009e94:	6823      	ldr	r3, [r4, #0]
 8009e96:	07d8      	lsls	r0, r3, #31
 8009e98:	d510      	bpl.n	8009ebc <_printf_float+0x250>
 8009e9a:	ee18 3a10 	vmov	r3, s16
 8009e9e:	4652      	mov	r2, sl
 8009ea0:	4631      	mov	r1, r6
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	47b8      	blx	r7
 8009ea6:	3001      	adds	r0, #1
 8009ea8:	f43f af41 	beq.w	8009d2e <_printf_float+0xc2>
 8009eac:	f04f 0800 	mov.w	r8, #0
 8009eb0:	f104 091a 	add.w	r9, r4, #26
 8009eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eb6:	3b01      	subs	r3, #1
 8009eb8:	4543      	cmp	r3, r8
 8009eba:	dc09      	bgt.n	8009ed0 <_printf_float+0x264>
 8009ebc:	6823      	ldr	r3, [r4, #0]
 8009ebe:	079b      	lsls	r3, r3, #30
 8009ec0:	f100 8105 	bmi.w	800a0ce <_printf_float+0x462>
 8009ec4:	68e0      	ldr	r0, [r4, #12]
 8009ec6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ec8:	4298      	cmp	r0, r3
 8009eca:	bfb8      	it	lt
 8009ecc:	4618      	movlt	r0, r3
 8009ece:	e730      	b.n	8009d32 <_printf_float+0xc6>
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	464a      	mov	r2, r9
 8009ed4:	4631      	mov	r1, r6
 8009ed6:	4628      	mov	r0, r5
 8009ed8:	47b8      	blx	r7
 8009eda:	3001      	adds	r0, #1
 8009edc:	f43f af27 	beq.w	8009d2e <_printf_float+0xc2>
 8009ee0:	f108 0801 	add.w	r8, r8, #1
 8009ee4:	e7e6      	b.n	8009eb4 <_printf_float+0x248>
 8009ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	dc39      	bgt.n	8009f60 <_printf_float+0x2f4>
 8009eec:	4a1b      	ldr	r2, [pc, #108]	; (8009f5c <_printf_float+0x2f0>)
 8009eee:	2301      	movs	r3, #1
 8009ef0:	4631      	mov	r1, r6
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	47b8      	blx	r7
 8009ef6:	3001      	adds	r0, #1
 8009ef8:	f43f af19 	beq.w	8009d2e <_printf_float+0xc2>
 8009efc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f00:	4313      	orrs	r3, r2
 8009f02:	d102      	bne.n	8009f0a <_printf_float+0x29e>
 8009f04:	6823      	ldr	r3, [r4, #0]
 8009f06:	07d9      	lsls	r1, r3, #31
 8009f08:	d5d8      	bpl.n	8009ebc <_printf_float+0x250>
 8009f0a:	ee18 3a10 	vmov	r3, s16
 8009f0e:	4652      	mov	r2, sl
 8009f10:	4631      	mov	r1, r6
 8009f12:	4628      	mov	r0, r5
 8009f14:	47b8      	blx	r7
 8009f16:	3001      	adds	r0, #1
 8009f18:	f43f af09 	beq.w	8009d2e <_printf_float+0xc2>
 8009f1c:	f04f 0900 	mov.w	r9, #0
 8009f20:	f104 0a1a 	add.w	sl, r4, #26
 8009f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f26:	425b      	negs	r3, r3
 8009f28:	454b      	cmp	r3, r9
 8009f2a:	dc01      	bgt.n	8009f30 <_printf_float+0x2c4>
 8009f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f2e:	e792      	b.n	8009e56 <_printf_float+0x1ea>
 8009f30:	2301      	movs	r3, #1
 8009f32:	4652      	mov	r2, sl
 8009f34:	4631      	mov	r1, r6
 8009f36:	4628      	mov	r0, r5
 8009f38:	47b8      	blx	r7
 8009f3a:	3001      	adds	r0, #1
 8009f3c:	f43f aef7 	beq.w	8009d2e <_printf_float+0xc2>
 8009f40:	f109 0901 	add.w	r9, r9, #1
 8009f44:	e7ee      	b.n	8009f24 <_printf_float+0x2b8>
 8009f46:	bf00      	nop
 8009f48:	7fefffff 	.word	0x7fefffff
 8009f4c:	0800c96c 	.word	0x0800c96c
 8009f50:	0800c970 	.word	0x0800c970
 8009f54:	0800c978 	.word	0x0800c978
 8009f58:	0800c974 	.word	0x0800c974
 8009f5c:	0800c97c 	.word	0x0800c97c
 8009f60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f64:	429a      	cmp	r2, r3
 8009f66:	bfa8      	it	ge
 8009f68:	461a      	movge	r2, r3
 8009f6a:	2a00      	cmp	r2, #0
 8009f6c:	4691      	mov	r9, r2
 8009f6e:	dc37      	bgt.n	8009fe0 <_printf_float+0x374>
 8009f70:	f04f 0b00 	mov.w	fp, #0
 8009f74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f78:	f104 021a 	add.w	r2, r4, #26
 8009f7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f7e:	9305      	str	r3, [sp, #20]
 8009f80:	eba3 0309 	sub.w	r3, r3, r9
 8009f84:	455b      	cmp	r3, fp
 8009f86:	dc33      	bgt.n	8009ff0 <_printf_float+0x384>
 8009f88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	db3b      	blt.n	800a008 <_printf_float+0x39c>
 8009f90:	6823      	ldr	r3, [r4, #0]
 8009f92:	07da      	lsls	r2, r3, #31
 8009f94:	d438      	bmi.n	800a008 <_printf_float+0x39c>
 8009f96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f98:	9b05      	ldr	r3, [sp, #20]
 8009f9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f9c:	1ad3      	subs	r3, r2, r3
 8009f9e:	eba2 0901 	sub.w	r9, r2, r1
 8009fa2:	4599      	cmp	r9, r3
 8009fa4:	bfa8      	it	ge
 8009fa6:	4699      	movge	r9, r3
 8009fa8:	f1b9 0f00 	cmp.w	r9, #0
 8009fac:	dc35      	bgt.n	800a01a <_printf_float+0x3ae>
 8009fae:	f04f 0800 	mov.w	r8, #0
 8009fb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fb6:	f104 0a1a 	add.w	sl, r4, #26
 8009fba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fbe:	1a9b      	subs	r3, r3, r2
 8009fc0:	eba3 0309 	sub.w	r3, r3, r9
 8009fc4:	4543      	cmp	r3, r8
 8009fc6:	f77f af79 	ble.w	8009ebc <_printf_float+0x250>
 8009fca:	2301      	movs	r3, #1
 8009fcc:	4652      	mov	r2, sl
 8009fce:	4631      	mov	r1, r6
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	47b8      	blx	r7
 8009fd4:	3001      	adds	r0, #1
 8009fd6:	f43f aeaa 	beq.w	8009d2e <_printf_float+0xc2>
 8009fda:	f108 0801 	add.w	r8, r8, #1
 8009fde:	e7ec      	b.n	8009fba <_printf_float+0x34e>
 8009fe0:	4613      	mov	r3, r2
 8009fe2:	4631      	mov	r1, r6
 8009fe4:	4642      	mov	r2, r8
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	47b8      	blx	r7
 8009fea:	3001      	adds	r0, #1
 8009fec:	d1c0      	bne.n	8009f70 <_printf_float+0x304>
 8009fee:	e69e      	b.n	8009d2e <_printf_float+0xc2>
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	4631      	mov	r1, r6
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	9205      	str	r2, [sp, #20]
 8009ff8:	47b8      	blx	r7
 8009ffa:	3001      	adds	r0, #1
 8009ffc:	f43f ae97 	beq.w	8009d2e <_printf_float+0xc2>
 800a000:	9a05      	ldr	r2, [sp, #20]
 800a002:	f10b 0b01 	add.w	fp, fp, #1
 800a006:	e7b9      	b.n	8009f7c <_printf_float+0x310>
 800a008:	ee18 3a10 	vmov	r3, s16
 800a00c:	4652      	mov	r2, sl
 800a00e:	4631      	mov	r1, r6
 800a010:	4628      	mov	r0, r5
 800a012:	47b8      	blx	r7
 800a014:	3001      	adds	r0, #1
 800a016:	d1be      	bne.n	8009f96 <_printf_float+0x32a>
 800a018:	e689      	b.n	8009d2e <_printf_float+0xc2>
 800a01a:	9a05      	ldr	r2, [sp, #20]
 800a01c:	464b      	mov	r3, r9
 800a01e:	4442      	add	r2, r8
 800a020:	4631      	mov	r1, r6
 800a022:	4628      	mov	r0, r5
 800a024:	47b8      	blx	r7
 800a026:	3001      	adds	r0, #1
 800a028:	d1c1      	bne.n	8009fae <_printf_float+0x342>
 800a02a:	e680      	b.n	8009d2e <_printf_float+0xc2>
 800a02c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a02e:	2a01      	cmp	r2, #1
 800a030:	dc01      	bgt.n	800a036 <_printf_float+0x3ca>
 800a032:	07db      	lsls	r3, r3, #31
 800a034:	d538      	bpl.n	800a0a8 <_printf_float+0x43c>
 800a036:	2301      	movs	r3, #1
 800a038:	4642      	mov	r2, r8
 800a03a:	4631      	mov	r1, r6
 800a03c:	4628      	mov	r0, r5
 800a03e:	47b8      	blx	r7
 800a040:	3001      	adds	r0, #1
 800a042:	f43f ae74 	beq.w	8009d2e <_printf_float+0xc2>
 800a046:	ee18 3a10 	vmov	r3, s16
 800a04a:	4652      	mov	r2, sl
 800a04c:	4631      	mov	r1, r6
 800a04e:	4628      	mov	r0, r5
 800a050:	47b8      	blx	r7
 800a052:	3001      	adds	r0, #1
 800a054:	f43f ae6b 	beq.w	8009d2e <_printf_float+0xc2>
 800a058:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a05c:	2200      	movs	r2, #0
 800a05e:	2300      	movs	r3, #0
 800a060:	f7f6 fd32 	bl	8000ac8 <__aeabi_dcmpeq>
 800a064:	b9d8      	cbnz	r0, 800a09e <_printf_float+0x432>
 800a066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a068:	f108 0201 	add.w	r2, r8, #1
 800a06c:	3b01      	subs	r3, #1
 800a06e:	4631      	mov	r1, r6
 800a070:	4628      	mov	r0, r5
 800a072:	47b8      	blx	r7
 800a074:	3001      	adds	r0, #1
 800a076:	d10e      	bne.n	800a096 <_printf_float+0x42a>
 800a078:	e659      	b.n	8009d2e <_printf_float+0xc2>
 800a07a:	2301      	movs	r3, #1
 800a07c:	4652      	mov	r2, sl
 800a07e:	4631      	mov	r1, r6
 800a080:	4628      	mov	r0, r5
 800a082:	47b8      	blx	r7
 800a084:	3001      	adds	r0, #1
 800a086:	f43f ae52 	beq.w	8009d2e <_printf_float+0xc2>
 800a08a:	f108 0801 	add.w	r8, r8, #1
 800a08e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a090:	3b01      	subs	r3, #1
 800a092:	4543      	cmp	r3, r8
 800a094:	dcf1      	bgt.n	800a07a <_printf_float+0x40e>
 800a096:	464b      	mov	r3, r9
 800a098:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a09c:	e6dc      	b.n	8009e58 <_printf_float+0x1ec>
 800a09e:	f04f 0800 	mov.w	r8, #0
 800a0a2:	f104 0a1a 	add.w	sl, r4, #26
 800a0a6:	e7f2      	b.n	800a08e <_printf_float+0x422>
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	4642      	mov	r2, r8
 800a0ac:	e7df      	b.n	800a06e <_printf_float+0x402>
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	464a      	mov	r2, r9
 800a0b2:	4631      	mov	r1, r6
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	47b8      	blx	r7
 800a0b8:	3001      	adds	r0, #1
 800a0ba:	f43f ae38 	beq.w	8009d2e <_printf_float+0xc2>
 800a0be:	f108 0801 	add.w	r8, r8, #1
 800a0c2:	68e3      	ldr	r3, [r4, #12]
 800a0c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a0c6:	1a5b      	subs	r3, r3, r1
 800a0c8:	4543      	cmp	r3, r8
 800a0ca:	dcf0      	bgt.n	800a0ae <_printf_float+0x442>
 800a0cc:	e6fa      	b.n	8009ec4 <_printf_float+0x258>
 800a0ce:	f04f 0800 	mov.w	r8, #0
 800a0d2:	f104 0919 	add.w	r9, r4, #25
 800a0d6:	e7f4      	b.n	800a0c2 <_printf_float+0x456>

0800a0d8 <_printf_common>:
 800a0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0dc:	4616      	mov	r6, r2
 800a0de:	4699      	mov	r9, r3
 800a0e0:	688a      	ldr	r2, [r1, #8]
 800a0e2:	690b      	ldr	r3, [r1, #16]
 800a0e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	bfb8      	it	lt
 800a0ec:	4613      	movlt	r3, r2
 800a0ee:	6033      	str	r3, [r6, #0]
 800a0f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a0f4:	4607      	mov	r7, r0
 800a0f6:	460c      	mov	r4, r1
 800a0f8:	b10a      	cbz	r2, 800a0fe <_printf_common+0x26>
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	6033      	str	r3, [r6, #0]
 800a0fe:	6823      	ldr	r3, [r4, #0]
 800a100:	0699      	lsls	r1, r3, #26
 800a102:	bf42      	ittt	mi
 800a104:	6833      	ldrmi	r3, [r6, #0]
 800a106:	3302      	addmi	r3, #2
 800a108:	6033      	strmi	r3, [r6, #0]
 800a10a:	6825      	ldr	r5, [r4, #0]
 800a10c:	f015 0506 	ands.w	r5, r5, #6
 800a110:	d106      	bne.n	800a120 <_printf_common+0x48>
 800a112:	f104 0a19 	add.w	sl, r4, #25
 800a116:	68e3      	ldr	r3, [r4, #12]
 800a118:	6832      	ldr	r2, [r6, #0]
 800a11a:	1a9b      	subs	r3, r3, r2
 800a11c:	42ab      	cmp	r3, r5
 800a11e:	dc26      	bgt.n	800a16e <_printf_common+0x96>
 800a120:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a124:	1e13      	subs	r3, r2, #0
 800a126:	6822      	ldr	r2, [r4, #0]
 800a128:	bf18      	it	ne
 800a12a:	2301      	movne	r3, #1
 800a12c:	0692      	lsls	r2, r2, #26
 800a12e:	d42b      	bmi.n	800a188 <_printf_common+0xb0>
 800a130:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a134:	4649      	mov	r1, r9
 800a136:	4638      	mov	r0, r7
 800a138:	47c0      	blx	r8
 800a13a:	3001      	adds	r0, #1
 800a13c:	d01e      	beq.n	800a17c <_printf_common+0xa4>
 800a13e:	6823      	ldr	r3, [r4, #0]
 800a140:	68e5      	ldr	r5, [r4, #12]
 800a142:	6832      	ldr	r2, [r6, #0]
 800a144:	f003 0306 	and.w	r3, r3, #6
 800a148:	2b04      	cmp	r3, #4
 800a14a:	bf08      	it	eq
 800a14c:	1aad      	subeq	r5, r5, r2
 800a14e:	68a3      	ldr	r3, [r4, #8]
 800a150:	6922      	ldr	r2, [r4, #16]
 800a152:	bf0c      	ite	eq
 800a154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a158:	2500      	movne	r5, #0
 800a15a:	4293      	cmp	r3, r2
 800a15c:	bfc4      	itt	gt
 800a15e:	1a9b      	subgt	r3, r3, r2
 800a160:	18ed      	addgt	r5, r5, r3
 800a162:	2600      	movs	r6, #0
 800a164:	341a      	adds	r4, #26
 800a166:	42b5      	cmp	r5, r6
 800a168:	d11a      	bne.n	800a1a0 <_printf_common+0xc8>
 800a16a:	2000      	movs	r0, #0
 800a16c:	e008      	b.n	800a180 <_printf_common+0xa8>
 800a16e:	2301      	movs	r3, #1
 800a170:	4652      	mov	r2, sl
 800a172:	4649      	mov	r1, r9
 800a174:	4638      	mov	r0, r7
 800a176:	47c0      	blx	r8
 800a178:	3001      	adds	r0, #1
 800a17a:	d103      	bne.n	800a184 <_printf_common+0xac>
 800a17c:	f04f 30ff 	mov.w	r0, #4294967295
 800a180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a184:	3501      	adds	r5, #1
 800a186:	e7c6      	b.n	800a116 <_printf_common+0x3e>
 800a188:	18e1      	adds	r1, r4, r3
 800a18a:	1c5a      	adds	r2, r3, #1
 800a18c:	2030      	movs	r0, #48	; 0x30
 800a18e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a192:	4422      	add	r2, r4
 800a194:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a198:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a19c:	3302      	adds	r3, #2
 800a19e:	e7c7      	b.n	800a130 <_printf_common+0x58>
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	4622      	mov	r2, r4
 800a1a4:	4649      	mov	r1, r9
 800a1a6:	4638      	mov	r0, r7
 800a1a8:	47c0      	blx	r8
 800a1aa:	3001      	adds	r0, #1
 800a1ac:	d0e6      	beq.n	800a17c <_printf_common+0xa4>
 800a1ae:	3601      	adds	r6, #1
 800a1b0:	e7d9      	b.n	800a166 <_printf_common+0x8e>
	...

0800a1b4 <_printf_i>:
 800a1b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1b8:	460c      	mov	r4, r1
 800a1ba:	4691      	mov	r9, r2
 800a1bc:	7e27      	ldrb	r7, [r4, #24]
 800a1be:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a1c0:	2f78      	cmp	r7, #120	; 0x78
 800a1c2:	4680      	mov	r8, r0
 800a1c4:	469a      	mov	sl, r3
 800a1c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1ca:	d807      	bhi.n	800a1dc <_printf_i+0x28>
 800a1cc:	2f62      	cmp	r7, #98	; 0x62
 800a1ce:	d80a      	bhi.n	800a1e6 <_printf_i+0x32>
 800a1d0:	2f00      	cmp	r7, #0
 800a1d2:	f000 80d8 	beq.w	800a386 <_printf_i+0x1d2>
 800a1d6:	2f58      	cmp	r7, #88	; 0x58
 800a1d8:	f000 80a3 	beq.w	800a322 <_printf_i+0x16e>
 800a1dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a1e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a1e4:	e03a      	b.n	800a25c <_printf_i+0xa8>
 800a1e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a1ea:	2b15      	cmp	r3, #21
 800a1ec:	d8f6      	bhi.n	800a1dc <_printf_i+0x28>
 800a1ee:	a001      	add	r0, pc, #4	; (adr r0, 800a1f4 <_printf_i+0x40>)
 800a1f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a1f4:	0800a24d 	.word	0x0800a24d
 800a1f8:	0800a261 	.word	0x0800a261
 800a1fc:	0800a1dd 	.word	0x0800a1dd
 800a200:	0800a1dd 	.word	0x0800a1dd
 800a204:	0800a1dd 	.word	0x0800a1dd
 800a208:	0800a1dd 	.word	0x0800a1dd
 800a20c:	0800a261 	.word	0x0800a261
 800a210:	0800a1dd 	.word	0x0800a1dd
 800a214:	0800a1dd 	.word	0x0800a1dd
 800a218:	0800a1dd 	.word	0x0800a1dd
 800a21c:	0800a1dd 	.word	0x0800a1dd
 800a220:	0800a36d 	.word	0x0800a36d
 800a224:	0800a291 	.word	0x0800a291
 800a228:	0800a34f 	.word	0x0800a34f
 800a22c:	0800a1dd 	.word	0x0800a1dd
 800a230:	0800a1dd 	.word	0x0800a1dd
 800a234:	0800a38f 	.word	0x0800a38f
 800a238:	0800a1dd 	.word	0x0800a1dd
 800a23c:	0800a291 	.word	0x0800a291
 800a240:	0800a1dd 	.word	0x0800a1dd
 800a244:	0800a1dd 	.word	0x0800a1dd
 800a248:	0800a357 	.word	0x0800a357
 800a24c:	680b      	ldr	r3, [r1, #0]
 800a24e:	1d1a      	adds	r2, r3, #4
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	600a      	str	r2, [r1, #0]
 800a254:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a258:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a25c:	2301      	movs	r3, #1
 800a25e:	e0a3      	b.n	800a3a8 <_printf_i+0x1f4>
 800a260:	6825      	ldr	r5, [r4, #0]
 800a262:	6808      	ldr	r0, [r1, #0]
 800a264:	062e      	lsls	r6, r5, #24
 800a266:	f100 0304 	add.w	r3, r0, #4
 800a26a:	d50a      	bpl.n	800a282 <_printf_i+0xce>
 800a26c:	6805      	ldr	r5, [r0, #0]
 800a26e:	600b      	str	r3, [r1, #0]
 800a270:	2d00      	cmp	r5, #0
 800a272:	da03      	bge.n	800a27c <_printf_i+0xc8>
 800a274:	232d      	movs	r3, #45	; 0x2d
 800a276:	426d      	negs	r5, r5
 800a278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a27c:	485e      	ldr	r0, [pc, #376]	; (800a3f8 <_printf_i+0x244>)
 800a27e:	230a      	movs	r3, #10
 800a280:	e019      	b.n	800a2b6 <_printf_i+0x102>
 800a282:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a286:	6805      	ldr	r5, [r0, #0]
 800a288:	600b      	str	r3, [r1, #0]
 800a28a:	bf18      	it	ne
 800a28c:	b22d      	sxthne	r5, r5
 800a28e:	e7ef      	b.n	800a270 <_printf_i+0xbc>
 800a290:	680b      	ldr	r3, [r1, #0]
 800a292:	6825      	ldr	r5, [r4, #0]
 800a294:	1d18      	adds	r0, r3, #4
 800a296:	6008      	str	r0, [r1, #0]
 800a298:	0628      	lsls	r0, r5, #24
 800a29a:	d501      	bpl.n	800a2a0 <_printf_i+0xec>
 800a29c:	681d      	ldr	r5, [r3, #0]
 800a29e:	e002      	b.n	800a2a6 <_printf_i+0xf2>
 800a2a0:	0669      	lsls	r1, r5, #25
 800a2a2:	d5fb      	bpl.n	800a29c <_printf_i+0xe8>
 800a2a4:	881d      	ldrh	r5, [r3, #0]
 800a2a6:	4854      	ldr	r0, [pc, #336]	; (800a3f8 <_printf_i+0x244>)
 800a2a8:	2f6f      	cmp	r7, #111	; 0x6f
 800a2aa:	bf0c      	ite	eq
 800a2ac:	2308      	moveq	r3, #8
 800a2ae:	230a      	movne	r3, #10
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2b6:	6866      	ldr	r6, [r4, #4]
 800a2b8:	60a6      	str	r6, [r4, #8]
 800a2ba:	2e00      	cmp	r6, #0
 800a2bc:	bfa2      	ittt	ge
 800a2be:	6821      	ldrge	r1, [r4, #0]
 800a2c0:	f021 0104 	bicge.w	r1, r1, #4
 800a2c4:	6021      	strge	r1, [r4, #0]
 800a2c6:	b90d      	cbnz	r5, 800a2cc <_printf_i+0x118>
 800a2c8:	2e00      	cmp	r6, #0
 800a2ca:	d04d      	beq.n	800a368 <_printf_i+0x1b4>
 800a2cc:	4616      	mov	r6, r2
 800a2ce:	fbb5 f1f3 	udiv	r1, r5, r3
 800a2d2:	fb03 5711 	mls	r7, r3, r1, r5
 800a2d6:	5dc7      	ldrb	r7, [r0, r7]
 800a2d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a2dc:	462f      	mov	r7, r5
 800a2de:	42bb      	cmp	r3, r7
 800a2e0:	460d      	mov	r5, r1
 800a2e2:	d9f4      	bls.n	800a2ce <_printf_i+0x11a>
 800a2e4:	2b08      	cmp	r3, #8
 800a2e6:	d10b      	bne.n	800a300 <_printf_i+0x14c>
 800a2e8:	6823      	ldr	r3, [r4, #0]
 800a2ea:	07df      	lsls	r7, r3, #31
 800a2ec:	d508      	bpl.n	800a300 <_printf_i+0x14c>
 800a2ee:	6923      	ldr	r3, [r4, #16]
 800a2f0:	6861      	ldr	r1, [r4, #4]
 800a2f2:	4299      	cmp	r1, r3
 800a2f4:	bfde      	ittt	le
 800a2f6:	2330      	movle	r3, #48	; 0x30
 800a2f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a2fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a300:	1b92      	subs	r2, r2, r6
 800a302:	6122      	str	r2, [r4, #16]
 800a304:	f8cd a000 	str.w	sl, [sp]
 800a308:	464b      	mov	r3, r9
 800a30a:	aa03      	add	r2, sp, #12
 800a30c:	4621      	mov	r1, r4
 800a30e:	4640      	mov	r0, r8
 800a310:	f7ff fee2 	bl	800a0d8 <_printf_common>
 800a314:	3001      	adds	r0, #1
 800a316:	d14c      	bne.n	800a3b2 <_printf_i+0x1fe>
 800a318:	f04f 30ff 	mov.w	r0, #4294967295
 800a31c:	b004      	add	sp, #16
 800a31e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a322:	4835      	ldr	r0, [pc, #212]	; (800a3f8 <_printf_i+0x244>)
 800a324:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a328:	6823      	ldr	r3, [r4, #0]
 800a32a:	680e      	ldr	r6, [r1, #0]
 800a32c:	061f      	lsls	r7, r3, #24
 800a32e:	f856 5b04 	ldr.w	r5, [r6], #4
 800a332:	600e      	str	r6, [r1, #0]
 800a334:	d514      	bpl.n	800a360 <_printf_i+0x1ac>
 800a336:	07d9      	lsls	r1, r3, #31
 800a338:	bf44      	itt	mi
 800a33a:	f043 0320 	orrmi.w	r3, r3, #32
 800a33e:	6023      	strmi	r3, [r4, #0]
 800a340:	b91d      	cbnz	r5, 800a34a <_printf_i+0x196>
 800a342:	6823      	ldr	r3, [r4, #0]
 800a344:	f023 0320 	bic.w	r3, r3, #32
 800a348:	6023      	str	r3, [r4, #0]
 800a34a:	2310      	movs	r3, #16
 800a34c:	e7b0      	b.n	800a2b0 <_printf_i+0xfc>
 800a34e:	6823      	ldr	r3, [r4, #0]
 800a350:	f043 0320 	orr.w	r3, r3, #32
 800a354:	6023      	str	r3, [r4, #0]
 800a356:	2378      	movs	r3, #120	; 0x78
 800a358:	4828      	ldr	r0, [pc, #160]	; (800a3fc <_printf_i+0x248>)
 800a35a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a35e:	e7e3      	b.n	800a328 <_printf_i+0x174>
 800a360:	065e      	lsls	r6, r3, #25
 800a362:	bf48      	it	mi
 800a364:	b2ad      	uxthmi	r5, r5
 800a366:	e7e6      	b.n	800a336 <_printf_i+0x182>
 800a368:	4616      	mov	r6, r2
 800a36a:	e7bb      	b.n	800a2e4 <_printf_i+0x130>
 800a36c:	680b      	ldr	r3, [r1, #0]
 800a36e:	6826      	ldr	r6, [r4, #0]
 800a370:	6960      	ldr	r0, [r4, #20]
 800a372:	1d1d      	adds	r5, r3, #4
 800a374:	600d      	str	r5, [r1, #0]
 800a376:	0635      	lsls	r5, r6, #24
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	d501      	bpl.n	800a380 <_printf_i+0x1cc>
 800a37c:	6018      	str	r0, [r3, #0]
 800a37e:	e002      	b.n	800a386 <_printf_i+0x1d2>
 800a380:	0671      	lsls	r1, r6, #25
 800a382:	d5fb      	bpl.n	800a37c <_printf_i+0x1c8>
 800a384:	8018      	strh	r0, [r3, #0]
 800a386:	2300      	movs	r3, #0
 800a388:	6123      	str	r3, [r4, #16]
 800a38a:	4616      	mov	r6, r2
 800a38c:	e7ba      	b.n	800a304 <_printf_i+0x150>
 800a38e:	680b      	ldr	r3, [r1, #0]
 800a390:	1d1a      	adds	r2, r3, #4
 800a392:	600a      	str	r2, [r1, #0]
 800a394:	681e      	ldr	r6, [r3, #0]
 800a396:	6862      	ldr	r2, [r4, #4]
 800a398:	2100      	movs	r1, #0
 800a39a:	4630      	mov	r0, r6
 800a39c:	f7f5 ff20 	bl	80001e0 <memchr>
 800a3a0:	b108      	cbz	r0, 800a3a6 <_printf_i+0x1f2>
 800a3a2:	1b80      	subs	r0, r0, r6
 800a3a4:	6060      	str	r0, [r4, #4]
 800a3a6:	6863      	ldr	r3, [r4, #4]
 800a3a8:	6123      	str	r3, [r4, #16]
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3b0:	e7a8      	b.n	800a304 <_printf_i+0x150>
 800a3b2:	6923      	ldr	r3, [r4, #16]
 800a3b4:	4632      	mov	r2, r6
 800a3b6:	4649      	mov	r1, r9
 800a3b8:	4640      	mov	r0, r8
 800a3ba:	47d0      	blx	sl
 800a3bc:	3001      	adds	r0, #1
 800a3be:	d0ab      	beq.n	800a318 <_printf_i+0x164>
 800a3c0:	6823      	ldr	r3, [r4, #0]
 800a3c2:	079b      	lsls	r3, r3, #30
 800a3c4:	d413      	bmi.n	800a3ee <_printf_i+0x23a>
 800a3c6:	68e0      	ldr	r0, [r4, #12]
 800a3c8:	9b03      	ldr	r3, [sp, #12]
 800a3ca:	4298      	cmp	r0, r3
 800a3cc:	bfb8      	it	lt
 800a3ce:	4618      	movlt	r0, r3
 800a3d0:	e7a4      	b.n	800a31c <_printf_i+0x168>
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	4632      	mov	r2, r6
 800a3d6:	4649      	mov	r1, r9
 800a3d8:	4640      	mov	r0, r8
 800a3da:	47d0      	blx	sl
 800a3dc:	3001      	adds	r0, #1
 800a3de:	d09b      	beq.n	800a318 <_printf_i+0x164>
 800a3e0:	3501      	adds	r5, #1
 800a3e2:	68e3      	ldr	r3, [r4, #12]
 800a3e4:	9903      	ldr	r1, [sp, #12]
 800a3e6:	1a5b      	subs	r3, r3, r1
 800a3e8:	42ab      	cmp	r3, r5
 800a3ea:	dcf2      	bgt.n	800a3d2 <_printf_i+0x21e>
 800a3ec:	e7eb      	b.n	800a3c6 <_printf_i+0x212>
 800a3ee:	2500      	movs	r5, #0
 800a3f0:	f104 0619 	add.w	r6, r4, #25
 800a3f4:	e7f5      	b.n	800a3e2 <_printf_i+0x22e>
 800a3f6:	bf00      	nop
 800a3f8:	0800c97e 	.word	0x0800c97e
 800a3fc:	0800c98f 	.word	0x0800c98f

0800a400 <siprintf>:
 800a400:	b40e      	push	{r1, r2, r3}
 800a402:	b500      	push	{lr}
 800a404:	b09c      	sub	sp, #112	; 0x70
 800a406:	ab1d      	add	r3, sp, #116	; 0x74
 800a408:	9002      	str	r0, [sp, #8]
 800a40a:	9006      	str	r0, [sp, #24]
 800a40c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a410:	4809      	ldr	r0, [pc, #36]	; (800a438 <siprintf+0x38>)
 800a412:	9107      	str	r1, [sp, #28]
 800a414:	9104      	str	r1, [sp, #16]
 800a416:	4909      	ldr	r1, [pc, #36]	; (800a43c <siprintf+0x3c>)
 800a418:	f853 2b04 	ldr.w	r2, [r3], #4
 800a41c:	9105      	str	r1, [sp, #20]
 800a41e:	6800      	ldr	r0, [r0, #0]
 800a420:	9301      	str	r3, [sp, #4]
 800a422:	a902      	add	r1, sp, #8
 800a424:	f001 fb24 	bl	800ba70 <_svfiprintf_r>
 800a428:	9b02      	ldr	r3, [sp, #8]
 800a42a:	2200      	movs	r2, #0
 800a42c:	701a      	strb	r2, [r3, #0]
 800a42e:	b01c      	add	sp, #112	; 0x70
 800a430:	f85d eb04 	ldr.w	lr, [sp], #4
 800a434:	b003      	add	sp, #12
 800a436:	4770      	bx	lr
 800a438:	20000014 	.word	0x20000014
 800a43c:	ffff0208 	.word	0xffff0208

0800a440 <quorem>:
 800a440:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a444:	6903      	ldr	r3, [r0, #16]
 800a446:	690c      	ldr	r4, [r1, #16]
 800a448:	42a3      	cmp	r3, r4
 800a44a:	4607      	mov	r7, r0
 800a44c:	f2c0 8081 	blt.w	800a552 <quorem+0x112>
 800a450:	3c01      	subs	r4, #1
 800a452:	f101 0814 	add.w	r8, r1, #20
 800a456:	f100 0514 	add.w	r5, r0, #20
 800a45a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a45e:	9301      	str	r3, [sp, #4]
 800a460:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a464:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a468:	3301      	adds	r3, #1
 800a46a:	429a      	cmp	r2, r3
 800a46c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a470:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a474:	fbb2 f6f3 	udiv	r6, r2, r3
 800a478:	d331      	bcc.n	800a4de <quorem+0x9e>
 800a47a:	f04f 0e00 	mov.w	lr, #0
 800a47e:	4640      	mov	r0, r8
 800a480:	46ac      	mov	ip, r5
 800a482:	46f2      	mov	sl, lr
 800a484:	f850 2b04 	ldr.w	r2, [r0], #4
 800a488:	b293      	uxth	r3, r2
 800a48a:	fb06 e303 	mla	r3, r6, r3, lr
 800a48e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a492:	b29b      	uxth	r3, r3
 800a494:	ebaa 0303 	sub.w	r3, sl, r3
 800a498:	0c12      	lsrs	r2, r2, #16
 800a49a:	f8dc a000 	ldr.w	sl, [ip]
 800a49e:	fb06 e202 	mla	r2, r6, r2, lr
 800a4a2:	fa13 f38a 	uxtah	r3, r3, sl
 800a4a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a4aa:	fa1f fa82 	uxth.w	sl, r2
 800a4ae:	f8dc 2000 	ldr.w	r2, [ip]
 800a4b2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a4b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4c0:	4581      	cmp	r9, r0
 800a4c2:	f84c 3b04 	str.w	r3, [ip], #4
 800a4c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a4ca:	d2db      	bcs.n	800a484 <quorem+0x44>
 800a4cc:	f855 300b 	ldr.w	r3, [r5, fp]
 800a4d0:	b92b      	cbnz	r3, 800a4de <quorem+0x9e>
 800a4d2:	9b01      	ldr	r3, [sp, #4]
 800a4d4:	3b04      	subs	r3, #4
 800a4d6:	429d      	cmp	r5, r3
 800a4d8:	461a      	mov	r2, r3
 800a4da:	d32e      	bcc.n	800a53a <quorem+0xfa>
 800a4dc:	613c      	str	r4, [r7, #16]
 800a4de:	4638      	mov	r0, r7
 800a4e0:	f001 f8b0 	bl	800b644 <__mcmp>
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	db24      	blt.n	800a532 <quorem+0xf2>
 800a4e8:	3601      	adds	r6, #1
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	f04f 0c00 	mov.w	ip, #0
 800a4f0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a4f4:	f8d0 e000 	ldr.w	lr, [r0]
 800a4f8:	b293      	uxth	r3, r2
 800a4fa:	ebac 0303 	sub.w	r3, ip, r3
 800a4fe:	0c12      	lsrs	r2, r2, #16
 800a500:	fa13 f38e 	uxtah	r3, r3, lr
 800a504:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a508:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a512:	45c1      	cmp	r9, r8
 800a514:	f840 3b04 	str.w	r3, [r0], #4
 800a518:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a51c:	d2e8      	bcs.n	800a4f0 <quorem+0xb0>
 800a51e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a522:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a526:	b922      	cbnz	r2, 800a532 <quorem+0xf2>
 800a528:	3b04      	subs	r3, #4
 800a52a:	429d      	cmp	r5, r3
 800a52c:	461a      	mov	r2, r3
 800a52e:	d30a      	bcc.n	800a546 <quorem+0x106>
 800a530:	613c      	str	r4, [r7, #16]
 800a532:	4630      	mov	r0, r6
 800a534:	b003      	add	sp, #12
 800a536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a53a:	6812      	ldr	r2, [r2, #0]
 800a53c:	3b04      	subs	r3, #4
 800a53e:	2a00      	cmp	r2, #0
 800a540:	d1cc      	bne.n	800a4dc <quorem+0x9c>
 800a542:	3c01      	subs	r4, #1
 800a544:	e7c7      	b.n	800a4d6 <quorem+0x96>
 800a546:	6812      	ldr	r2, [r2, #0]
 800a548:	3b04      	subs	r3, #4
 800a54a:	2a00      	cmp	r2, #0
 800a54c:	d1f0      	bne.n	800a530 <quorem+0xf0>
 800a54e:	3c01      	subs	r4, #1
 800a550:	e7eb      	b.n	800a52a <quorem+0xea>
 800a552:	2000      	movs	r0, #0
 800a554:	e7ee      	b.n	800a534 <quorem+0xf4>
	...

0800a558 <_dtoa_r>:
 800a558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55c:	ed2d 8b02 	vpush	{d8}
 800a560:	ec57 6b10 	vmov	r6, r7, d0
 800a564:	b095      	sub	sp, #84	; 0x54
 800a566:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a568:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a56c:	9105      	str	r1, [sp, #20]
 800a56e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a572:	4604      	mov	r4, r0
 800a574:	9209      	str	r2, [sp, #36]	; 0x24
 800a576:	930f      	str	r3, [sp, #60]	; 0x3c
 800a578:	b975      	cbnz	r5, 800a598 <_dtoa_r+0x40>
 800a57a:	2010      	movs	r0, #16
 800a57c:	f000 fddc 	bl	800b138 <malloc>
 800a580:	4602      	mov	r2, r0
 800a582:	6260      	str	r0, [r4, #36]	; 0x24
 800a584:	b920      	cbnz	r0, 800a590 <_dtoa_r+0x38>
 800a586:	4bb2      	ldr	r3, [pc, #712]	; (800a850 <_dtoa_r+0x2f8>)
 800a588:	21ea      	movs	r1, #234	; 0xea
 800a58a:	48b2      	ldr	r0, [pc, #712]	; (800a854 <_dtoa_r+0x2fc>)
 800a58c:	f001 fb80 	bl	800bc90 <__assert_func>
 800a590:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a594:	6005      	str	r5, [r0, #0]
 800a596:	60c5      	str	r5, [r0, #12]
 800a598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a59a:	6819      	ldr	r1, [r3, #0]
 800a59c:	b151      	cbz	r1, 800a5b4 <_dtoa_r+0x5c>
 800a59e:	685a      	ldr	r2, [r3, #4]
 800a5a0:	604a      	str	r2, [r1, #4]
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	4093      	lsls	r3, r2
 800a5a6:	608b      	str	r3, [r1, #8]
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f000 fe0d 	bl	800b1c8 <_Bfree>
 800a5ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	601a      	str	r2, [r3, #0]
 800a5b4:	1e3b      	subs	r3, r7, #0
 800a5b6:	bfb9      	ittee	lt
 800a5b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a5bc:	9303      	strlt	r3, [sp, #12]
 800a5be:	2300      	movge	r3, #0
 800a5c0:	f8c8 3000 	strge.w	r3, [r8]
 800a5c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a5c8:	4ba3      	ldr	r3, [pc, #652]	; (800a858 <_dtoa_r+0x300>)
 800a5ca:	bfbc      	itt	lt
 800a5cc:	2201      	movlt	r2, #1
 800a5ce:	f8c8 2000 	strlt.w	r2, [r8]
 800a5d2:	ea33 0309 	bics.w	r3, r3, r9
 800a5d6:	d11b      	bne.n	800a610 <_dtoa_r+0xb8>
 800a5d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a5da:	f242 730f 	movw	r3, #9999	; 0x270f
 800a5de:	6013      	str	r3, [r2, #0]
 800a5e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a5e4:	4333      	orrs	r3, r6
 800a5e6:	f000 857a 	beq.w	800b0de <_dtoa_r+0xb86>
 800a5ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5ec:	b963      	cbnz	r3, 800a608 <_dtoa_r+0xb0>
 800a5ee:	4b9b      	ldr	r3, [pc, #620]	; (800a85c <_dtoa_r+0x304>)
 800a5f0:	e024      	b.n	800a63c <_dtoa_r+0xe4>
 800a5f2:	4b9b      	ldr	r3, [pc, #620]	; (800a860 <_dtoa_r+0x308>)
 800a5f4:	9300      	str	r3, [sp, #0]
 800a5f6:	3308      	adds	r3, #8
 800a5f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a5fa:	6013      	str	r3, [r2, #0]
 800a5fc:	9800      	ldr	r0, [sp, #0]
 800a5fe:	b015      	add	sp, #84	; 0x54
 800a600:	ecbd 8b02 	vpop	{d8}
 800a604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a608:	4b94      	ldr	r3, [pc, #592]	; (800a85c <_dtoa_r+0x304>)
 800a60a:	9300      	str	r3, [sp, #0]
 800a60c:	3303      	adds	r3, #3
 800a60e:	e7f3      	b.n	800a5f8 <_dtoa_r+0xa0>
 800a610:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a614:	2200      	movs	r2, #0
 800a616:	ec51 0b17 	vmov	r0, r1, d7
 800a61a:	2300      	movs	r3, #0
 800a61c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a620:	f7f6 fa52 	bl	8000ac8 <__aeabi_dcmpeq>
 800a624:	4680      	mov	r8, r0
 800a626:	b158      	cbz	r0, 800a640 <_dtoa_r+0xe8>
 800a628:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a62a:	2301      	movs	r3, #1
 800a62c:	6013      	str	r3, [r2, #0]
 800a62e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a630:	2b00      	cmp	r3, #0
 800a632:	f000 8551 	beq.w	800b0d8 <_dtoa_r+0xb80>
 800a636:	488b      	ldr	r0, [pc, #556]	; (800a864 <_dtoa_r+0x30c>)
 800a638:	6018      	str	r0, [r3, #0]
 800a63a:	1e43      	subs	r3, r0, #1
 800a63c:	9300      	str	r3, [sp, #0]
 800a63e:	e7dd      	b.n	800a5fc <_dtoa_r+0xa4>
 800a640:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a644:	aa12      	add	r2, sp, #72	; 0x48
 800a646:	a913      	add	r1, sp, #76	; 0x4c
 800a648:	4620      	mov	r0, r4
 800a64a:	f001 f89f 	bl	800b78c <__d2b>
 800a64e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a652:	4683      	mov	fp, r0
 800a654:	2d00      	cmp	r5, #0
 800a656:	d07c      	beq.n	800a752 <_dtoa_r+0x1fa>
 800a658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a65a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a65e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a662:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a666:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a66a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a66e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a672:	4b7d      	ldr	r3, [pc, #500]	; (800a868 <_dtoa_r+0x310>)
 800a674:	2200      	movs	r2, #0
 800a676:	4630      	mov	r0, r6
 800a678:	4639      	mov	r1, r7
 800a67a:	f7f5 fe05 	bl	8000288 <__aeabi_dsub>
 800a67e:	a36e      	add	r3, pc, #440	; (adr r3, 800a838 <_dtoa_r+0x2e0>)
 800a680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a684:	f7f5 ffb8 	bl	80005f8 <__aeabi_dmul>
 800a688:	a36d      	add	r3, pc, #436	; (adr r3, 800a840 <_dtoa_r+0x2e8>)
 800a68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68e:	f7f5 fdfd 	bl	800028c <__adddf3>
 800a692:	4606      	mov	r6, r0
 800a694:	4628      	mov	r0, r5
 800a696:	460f      	mov	r7, r1
 800a698:	f7f5 ff44 	bl	8000524 <__aeabi_i2d>
 800a69c:	a36a      	add	r3, pc, #424	; (adr r3, 800a848 <_dtoa_r+0x2f0>)
 800a69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a2:	f7f5 ffa9 	bl	80005f8 <__aeabi_dmul>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	4639      	mov	r1, r7
 800a6ae:	f7f5 fded 	bl	800028c <__adddf3>
 800a6b2:	4606      	mov	r6, r0
 800a6b4:	460f      	mov	r7, r1
 800a6b6:	f7f6 fa4f 	bl	8000b58 <__aeabi_d2iz>
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	4682      	mov	sl, r0
 800a6be:	2300      	movs	r3, #0
 800a6c0:	4630      	mov	r0, r6
 800a6c2:	4639      	mov	r1, r7
 800a6c4:	f7f6 fa0a 	bl	8000adc <__aeabi_dcmplt>
 800a6c8:	b148      	cbz	r0, 800a6de <_dtoa_r+0x186>
 800a6ca:	4650      	mov	r0, sl
 800a6cc:	f7f5 ff2a 	bl	8000524 <__aeabi_i2d>
 800a6d0:	4632      	mov	r2, r6
 800a6d2:	463b      	mov	r3, r7
 800a6d4:	f7f6 f9f8 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6d8:	b908      	cbnz	r0, 800a6de <_dtoa_r+0x186>
 800a6da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a6de:	f1ba 0f16 	cmp.w	sl, #22
 800a6e2:	d854      	bhi.n	800a78e <_dtoa_r+0x236>
 800a6e4:	4b61      	ldr	r3, [pc, #388]	; (800a86c <_dtoa_r+0x314>)
 800a6e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a6f2:	f7f6 f9f3 	bl	8000adc <__aeabi_dcmplt>
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	d04b      	beq.n	800a792 <_dtoa_r+0x23a>
 800a6fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a6fe:	2300      	movs	r3, #0
 800a700:	930e      	str	r3, [sp, #56]	; 0x38
 800a702:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a704:	1b5d      	subs	r5, r3, r5
 800a706:	1e6b      	subs	r3, r5, #1
 800a708:	9304      	str	r3, [sp, #16]
 800a70a:	bf43      	ittte	mi
 800a70c:	2300      	movmi	r3, #0
 800a70e:	f1c5 0801 	rsbmi	r8, r5, #1
 800a712:	9304      	strmi	r3, [sp, #16]
 800a714:	f04f 0800 	movpl.w	r8, #0
 800a718:	f1ba 0f00 	cmp.w	sl, #0
 800a71c:	db3b      	blt.n	800a796 <_dtoa_r+0x23e>
 800a71e:	9b04      	ldr	r3, [sp, #16]
 800a720:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a724:	4453      	add	r3, sl
 800a726:	9304      	str	r3, [sp, #16]
 800a728:	2300      	movs	r3, #0
 800a72a:	9306      	str	r3, [sp, #24]
 800a72c:	9b05      	ldr	r3, [sp, #20]
 800a72e:	2b09      	cmp	r3, #9
 800a730:	d869      	bhi.n	800a806 <_dtoa_r+0x2ae>
 800a732:	2b05      	cmp	r3, #5
 800a734:	bfc4      	itt	gt
 800a736:	3b04      	subgt	r3, #4
 800a738:	9305      	strgt	r3, [sp, #20]
 800a73a:	9b05      	ldr	r3, [sp, #20]
 800a73c:	f1a3 0302 	sub.w	r3, r3, #2
 800a740:	bfcc      	ite	gt
 800a742:	2500      	movgt	r5, #0
 800a744:	2501      	movle	r5, #1
 800a746:	2b03      	cmp	r3, #3
 800a748:	d869      	bhi.n	800a81e <_dtoa_r+0x2c6>
 800a74a:	e8df f003 	tbb	[pc, r3]
 800a74e:	4e2c      	.short	0x4e2c
 800a750:	5a4c      	.short	0x5a4c
 800a752:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a756:	441d      	add	r5, r3
 800a758:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a75c:	2b20      	cmp	r3, #32
 800a75e:	bfc1      	itttt	gt
 800a760:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a764:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a768:	fa09 f303 	lslgt.w	r3, r9, r3
 800a76c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a770:	bfda      	itte	le
 800a772:	f1c3 0320 	rsble	r3, r3, #32
 800a776:	fa06 f003 	lslle.w	r0, r6, r3
 800a77a:	4318      	orrgt	r0, r3
 800a77c:	f7f5 fec2 	bl	8000504 <__aeabi_ui2d>
 800a780:	2301      	movs	r3, #1
 800a782:	4606      	mov	r6, r0
 800a784:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a788:	3d01      	subs	r5, #1
 800a78a:	9310      	str	r3, [sp, #64]	; 0x40
 800a78c:	e771      	b.n	800a672 <_dtoa_r+0x11a>
 800a78e:	2301      	movs	r3, #1
 800a790:	e7b6      	b.n	800a700 <_dtoa_r+0x1a8>
 800a792:	900e      	str	r0, [sp, #56]	; 0x38
 800a794:	e7b5      	b.n	800a702 <_dtoa_r+0x1aa>
 800a796:	f1ca 0300 	rsb	r3, sl, #0
 800a79a:	9306      	str	r3, [sp, #24]
 800a79c:	2300      	movs	r3, #0
 800a79e:	eba8 080a 	sub.w	r8, r8, sl
 800a7a2:	930d      	str	r3, [sp, #52]	; 0x34
 800a7a4:	e7c2      	b.n	800a72c <_dtoa_r+0x1d4>
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	9308      	str	r3, [sp, #32]
 800a7aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	dc39      	bgt.n	800a824 <_dtoa_r+0x2cc>
 800a7b0:	f04f 0901 	mov.w	r9, #1
 800a7b4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a7b8:	464b      	mov	r3, r9
 800a7ba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a7be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	6042      	str	r2, [r0, #4]
 800a7c4:	2204      	movs	r2, #4
 800a7c6:	f102 0614 	add.w	r6, r2, #20
 800a7ca:	429e      	cmp	r6, r3
 800a7cc:	6841      	ldr	r1, [r0, #4]
 800a7ce:	d92f      	bls.n	800a830 <_dtoa_r+0x2d8>
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	f000 fcb9 	bl	800b148 <_Balloc>
 800a7d6:	9000      	str	r0, [sp, #0]
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	d14b      	bne.n	800a874 <_dtoa_r+0x31c>
 800a7dc:	4b24      	ldr	r3, [pc, #144]	; (800a870 <_dtoa_r+0x318>)
 800a7de:	4602      	mov	r2, r0
 800a7e0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a7e4:	e6d1      	b.n	800a58a <_dtoa_r+0x32>
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e7de      	b.n	800a7a8 <_dtoa_r+0x250>
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	9308      	str	r3, [sp, #32]
 800a7ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7f0:	eb0a 0903 	add.w	r9, sl, r3
 800a7f4:	f109 0301 	add.w	r3, r9, #1
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	9301      	str	r3, [sp, #4]
 800a7fc:	bfb8      	it	lt
 800a7fe:	2301      	movlt	r3, #1
 800a800:	e7dd      	b.n	800a7be <_dtoa_r+0x266>
 800a802:	2301      	movs	r3, #1
 800a804:	e7f2      	b.n	800a7ec <_dtoa_r+0x294>
 800a806:	2501      	movs	r5, #1
 800a808:	2300      	movs	r3, #0
 800a80a:	9305      	str	r3, [sp, #20]
 800a80c:	9508      	str	r5, [sp, #32]
 800a80e:	f04f 39ff 	mov.w	r9, #4294967295
 800a812:	2200      	movs	r2, #0
 800a814:	f8cd 9004 	str.w	r9, [sp, #4]
 800a818:	2312      	movs	r3, #18
 800a81a:	9209      	str	r2, [sp, #36]	; 0x24
 800a81c:	e7cf      	b.n	800a7be <_dtoa_r+0x266>
 800a81e:	2301      	movs	r3, #1
 800a820:	9308      	str	r3, [sp, #32]
 800a822:	e7f4      	b.n	800a80e <_dtoa_r+0x2b6>
 800a824:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a828:	f8cd 9004 	str.w	r9, [sp, #4]
 800a82c:	464b      	mov	r3, r9
 800a82e:	e7c6      	b.n	800a7be <_dtoa_r+0x266>
 800a830:	3101      	adds	r1, #1
 800a832:	6041      	str	r1, [r0, #4]
 800a834:	0052      	lsls	r2, r2, #1
 800a836:	e7c6      	b.n	800a7c6 <_dtoa_r+0x26e>
 800a838:	636f4361 	.word	0x636f4361
 800a83c:	3fd287a7 	.word	0x3fd287a7
 800a840:	8b60c8b3 	.word	0x8b60c8b3
 800a844:	3fc68a28 	.word	0x3fc68a28
 800a848:	509f79fb 	.word	0x509f79fb
 800a84c:	3fd34413 	.word	0x3fd34413
 800a850:	0800c9ad 	.word	0x0800c9ad
 800a854:	0800c9c4 	.word	0x0800c9c4
 800a858:	7ff00000 	.word	0x7ff00000
 800a85c:	0800c9a9 	.word	0x0800c9a9
 800a860:	0800c9a0 	.word	0x0800c9a0
 800a864:	0800c97d 	.word	0x0800c97d
 800a868:	3ff80000 	.word	0x3ff80000
 800a86c:	0800cac0 	.word	0x0800cac0
 800a870:	0800ca23 	.word	0x0800ca23
 800a874:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a876:	9a00      	ldr	r2, [sp, #0]
 800a878:	601a      	str	r2, [r3, #0]
 800a87a:	9b01      	ldr	r3, [sp, #4]
 800a87c:	2b0e      	cmp	r3, #14
 800a87e:	f200 80ad 	bhi.w	800a9dc <_dtoa_r+0x484>
 800a882:	2d00      	cmp	r5, #0
 800a884:	f000 80aa 	beq.w	800a9dc <_dtoa_r+0x484>
 800a888:	f1ba 0f00 	cmp.w	sl, #0
 800a88c:	dd36      	ble.n	800a8fc <_dtoa_r+0x3a4>
 800a88e:	4ac3      	ldr	r2, [pc, #780]	; (800ab9c <_dtoa_r+0x644>)
 800a890:	f00a 030f 	and.w	r3, sl, #15
 800a894:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a898:	ed93 7b00 	vldr	d7, [r3]
 800a89c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a8a0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a8a4:	eeb0 8a47 	vmov.f32	s16, s14
 800a8a8:	eef0 8a67 	vmov.f32	s17, s15
 800a8ac:	d016      	beq.n	800a8dc <_dtoa_r+0x384>
 800a8ae:	4bbc      	ldr	r3, [pc, #752]	; (800aba0 <_dtoa_r+0x648>)
 800a8b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a8b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a8b8:	f7f5 ffc8 	bl	800084c <__aeabi_ddiv>
 800a8bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8c0:	f007 070f 	and.w	r7, r7, #15
 800a8c4:	2503      	movs	r5, #3
 800a8c6:	4eb6      	ldr	r6, [pc, #728]	; (800aba0 <_dtoa_r+0x648>)
 800a8c8:	b957      	cbnz	r7, 800a8e0 <_dtoa_r+0x388>
 800a8ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8ce:	ec53 2b18 	vmov	r2, r3, d8
 800a8d2:	f7f5 ffbb 	bl	800084c <__aeabi_ddiv>
 800a8d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8da:	e029      	b.n	800a930 <_dtoa_r+0x3d8>
 800a8dc:	2502      	movs	r5, #2
 800a8de:	e7f2      	b.n	800a8c6 <_dtoa_r+0x36e>
 800a8e0:	07f9      	lsls	r1, r7, #31
 800a8e2:	d508      	bpl.n	800a8f6 <_dtoa_r+0x39e>
 800a8e4:	ec51 0b18 	vmov	r0, r1, d8
 800a8e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a8ec:	f7f5 fe84 	bl	80005f8 <__aeabi_dmul>
 800a8f0:	ec41 0b18 	vmov	d8, r0, r1
 800a8f4:	3501      	adds	r5, #1
 800a8f6:	107f      	asrs	r7, r7, #1
 800a8f8:	3608      	adds	r6, #8
 800a8fa:	e7e5      	b.n	800a8c8 <_dtoa_r+0x370>
 800a8fc:	f000 80a6 	beq.w	800aa4c <_dtoa_r+0x4f4>
 800a900:	f1ca 0600 	rsb	r6, sl, #0
 800a904:	4ba5      	ldr	r3, [pc, #660]	; (800ab9c <_dtoa_r+0x644>)
 800a906:	4fa6      	ldr	r7, [pc, #664]	; (800aba0 <_dtoa_r+0x648>)
 800a908:	f006 020f 	and.w	r2, r6, #15
 800a90c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a914:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a918:	f7f5 fe6e 	bl	80005f8 <__aeabi_dmul>
 800a91c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a920:	1136      	asrs	r6, r6, #4
 800a922:	2300      	movs	r3, #0
 800a924:	2502      	movs	r5, #2
 800a926:	2e00      	cmp	r6, #0
 800a928:	f040 8085 	bne.w	800aa36 <_dtoa_r+0x4de>
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d1d2      	bne.n	800a8d6 <_dtoa_r+0x37e>
 800a930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a932:	2b00      	cmp	r3, #0
 800a934:	f000 808c 	beq.w	800aa50 <_dtoa_r+0x4f8>
 800a938:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a93c:	4b99      	ldr	r3, [pc, #612]	; (800aba4 <_dtoa_r+0x64c>)
 800a93e:	2200      	movs	r2, #0
 800a940:	4630      	mov	r0, r6
 800a942:	4639      	mov	r1, r7
 800a944:	f7f6 f8ca 	bl	8000adc <__aeabi_dcmplt>
 800a948:	2800      	cmp	r0, #0
 800a94a:	f000 8081 	beq.w	800aa50 <_dtoa_r+0x4f8>
 800a94e:	9b01      	ldr	r3, [sp, #4]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d07d      	beq.n	800aa50 <_dtoa_r+0x4f8>
 800a954:	f1b9 0f00 	cmp.w	r9, #0
 800a958:	dd3c      	ble.n	800a9d4 <_dtoa_r+0x47c>
 800a95a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a95e:	9307      	str	r3, [sp, #28]
 800a960:	2200      	movs	r2, #0
 800a962:	4b91      	ldr	r3, [pc, #580]	; (800aba8 <_dtoa_r+0x650>)
 800a964:	4630      	mov	r0, r6
 800a966:	4639      	mov	r1, r7
 800a968:	f7f5 fe46 	bl	80005f8 <__aeabi_dmul>
 800a96c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a970:	3501      	adds	r5, #1
 800a972:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a976:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a97a:	4628      	mov	r0, r5
 800a97c:	f7f5 fdd2 	bl	8000524 <__aeabi_i2d>
 800a980:	4632      	mov	r2, r6
 800a982:	463b      	mov	r3, r7
 800a984:	f7f5 fe38 	bl	80005f8 <__aeabi_dmul>
 800a988:	4b88      	ldr	r3, [pc, #544]	; (800abac <_dtoa_r+0x654>)
 800a98a:	2200      	movs	r2, #0
 800a98c:	f7f5 fc7e 	bl	800028c <__adddf3>
 800a990:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a998:	9303      	str	r3, [sp, #12]
 800a99a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d15c      	bne.n	800aa5a <_dtoa_r+0x502>
 800a9a0:	4b83      	ldr	r3, [pc, #524]	; (800abb0 <_dtoa_r+0x658>)
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	4630      	mov	r0, r6
 800a9a6:	4639      	mov	r1, r7
 800a9a8:	f7f5 fc6e 	bl	8000288 <__aeabi_dsub>
 800a9ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9b0:	4606      	mov	r6, r0
 800a9b2:	460f      	mov	r7, r1
 800a9b4:	f7f6 f8b0 	bl	8000b18 <__aeabi_dcmpgt>
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	f040 8296 	bne.w	800aeea <_dtoa_r+0x992>
 800a9be:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a9c2:	4630      	mov	r0, r6
 800a9c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9c8:	4639      	mov	r1, r7
 800a9ca:	f7f6 f887 	bl	8000adc <__aeabi_dcmplt>
 800a9ce:	2800      	cmp	r0, #0
 800a9d0:	f040 8288 	bne.w	800aee4 <_dtoa_r+0x98c>
 800a9d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a9d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a9dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	f2c0 8158 	blt.w	800ac94 <_dtoa_r+0x73c>
 800a9e4:	f1ba 0f0e 	cmp.w	sl, #14
 800a9e8:	f300 8154 	bgt.w	800ac94 <_dtoa_r+0x73c>
 800a9ec:	4b6b      	ldr	r3, [pc, #428]	; (800ab9c <_dtoa_r+0x644>)
 800a9ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a9f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a9f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	f280 80e3 	bge.w	800abc4 <_dtoa_r+0x66c>
 800a9fe:	9b01      	ldr	r3, [sp, #4]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	f300 80df 	bgt.w	800abc4 <_dtoa_r+0x66c>
 800aa06:	f040 826d 	bne.w	800aee4 <_dtoa_r+0x98c>
 800aa0a:	4b69      	ldr	r3, [pc, #420]	; (800abb0 <_dtoa_r+0x658>)
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	4640      	mov	r0, r8
 800aa10:	4649      	mov	r1, r9
 800aa12:	f7f5 fdf1 	bl	80005f8 <__aeabi_dmul>
 800aa16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa1a:	f7f6 f873 	bl	8000b04 <__aeabi_dcmpge>
 800aa1e:	9e01      	ldr	r6, [sp, #4]
 800aa20:	4637      	mov	r7, r6
 800aa22:	2800      	cmp	r0, #0
 800aa24:	f040 8243 	bne.w	800aeae <_dtoa_r+0x956>
 800aa28:	9d00      	ldr	r5, [sp, #0]
 800aa2a:	2331      	movs	r3, #49	; 0x31
 800aa2c:	f805 3b01 	strb.w	r3, [r5], #1
 800aa30:	f10a 0a01 	add.w	sl, sl, #1
 800aa34:	e23f      	b.n	800aeb6 <_dtoa_r+0x95e>
 800aa36:	07f2      	lsls	r2, r6, #31
 800aa38:	d505      	bpl.n	800aa46 <_dtoa_r+0x4ee>
 800aa3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa3e:	f7f5 fddb 	bl	80005f8 <__aeabi_dmul>
 800aa42:	3501      	adds	r5, #1
 800aa44:	2301      	movs	r3, #1
 800aa46:	1076      	asrs	r6, r6, #1
 800aa48:	3708      	adds	r7, #8
 800aa4a:	e76c      	b.n	800a926 <_dtoa_r+0x3ce>
 800aa4c:	2502      	movs	r5, #2
 800aa4e:	e76f      	b.n	800a930 <_dtoa_r+0x3d8>
 800aa50:	9b01      	ldr	r3, [sp, #4]
 800aa52:	f8cd a01c 	str.w	sl, [sp, #28]
 800aa56:	930c      	str	r3, [sp, #48]	; 0x30
 800aa58:	e78d      	b.n	800a976 <_dtoa_r+0x41e>
 800aa5a:	9900      	ldr	r1, [sp, #0]
 800aa5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800aa5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa60:	4b4e      	ldr	r3, [pc, #312]	; (800ab9c <_dtoa_r+0x644>)
 800aa62:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa66:	4401      	add	r1, r0
 800aa68:	9102      	str	r1, [sp, #8]
 800aa6a:	9908      	ldr	r1, [sp, #32]
 800aa6c:	eeb0 8a47 	vmov.f32	s16, s14
 800aa70:	eef0 8a67 	vmov.f32	s17, s15
 800aa74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa7c:	2900      	cmp	r1, #0
 800aa7e:	d045      	beq.n	800ab0c <_dtoa_r+0x5b4>
 800aa80:	494c      	ldr	r1, [pc, #304]	; (800abb4 <_dtoa_r+0x65c>)
 800aa82:	2000      	movs	r0, #0
 800aa84:	f7f5 fee2 	bl	800084c <__aeabi_ddiv>
 800aa88:	ec53 2b18 	vmov	r2, r3, d8
 800aa8c:	f7f5 fbfc 	bl	8000288 <__aeabi_dsub>
 800aa90:	9d00      	ldr	r5, [sp, #0]
 800aa92:	ec41 0b18 	vmov	d8, r0, r1
 800aa96:	4639      	mov	r1, r7
 800aa98:	4630      	mov	r0, r6
 800aa9a:	f7f6 f85d 	bl	8000b58 <__aeabi_d2iz>
 800aa9e:	900c      	str	r0, [sp, #48]	; 0x30
 800aaa0:	f7f5 fd40 	bl	8000524 <__aeabi_i2d>
 800aaa4:	4602      	mov	r2, r0
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	4639      	mov	r1, r7
 800aaac:	f7f5 fbec 	bl	8000288 <__aeabi_dsub>
 800aab0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aab2:	3330      	adds	r3, #48	; 0x30
 800aab4:	f805 3b01 	strb.w	r3, [r5], #1
 800aab8:	ec53 2b18 	vmov	r2, r3, d8
 800aabc:	4606      	mov	r6, r0
 800aabe:	460f      	mov	r7, r1
 800aac0:	f7f6 f80c 	bl	8000adc <__aeabi_dcmplt>
 800aac4:	2800      	cmp	r0, #0
 800aac6:	d165      	bne.n	800ab94 <_dtoa_r+0x63c>
 800aac8:	4632      	mov	r2, r6
 800aaca:	463b      	mov	r3, r7
 800aacc:	4935      	ldr	r1, [pc, #212]	; (800aba4 <_dtoa_r+0x64c>)
 800aace:	2000      	movs	r0, #0
 800aad0:	f7f5 fbda 	bl	8000288 <__aeabi_dsub>
 800aad4:	ec53 2b18 	vmov	r2, r3, d8
 800aad8:	f7f6 f800 	bl	8000adc <__aeabi_dcmplt>
 800aadc:	2800      	cmp	r0, #0
 800aade:	f040 80b9 	bne.w	800ac54 <_dtoa_r+0x6fc>
 800aae2:	9b02      	ldr	r3, [sp, #8]
 800aae4:	429d      	cmp	r5, r3
 800aae6:	f43f af75 	beq.w	800a9d4 <_dtoa_r+0x47c>
 800aaea:	4b2f      	ldr	r3, [pc, #188]	; (800aba8 <_dtoa_r+0x650>)
 800aaec:	ec51 0b18 	vmov	r0, r1, d8
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f7f5 fd81 	bl	80005f8 <__aeabi_dmul>
 800aaf6:	4b2c      	ldr	r3, [pc, #176]	; (800aba8 <_dtoa_r+0x650>)
 800aaf8:	ec41 0b18 	vmov	d8, r0, r1
 800aafc:	2200      	movs	r2, #0
 800aafe:	4630      	mov	r0, r6
 800ab00:	4639      	mov	r1, r7
 800ab02:	f7f5 fd79 	bl	80005f8 <__aeabi_dmul>
 800ab06:	4606      	mov	r6, r0
 800ab08:	460f      	mov	r7, r1
 800ab0a:	e7c4      	b.n	800aa96 <_dtoa_r+0x53e>
 800ab0c:	ec51 0b17 	vmov	r0, r1, d7
 800ab10:	f7f5 fd72 	bl	80005f8 <__aeabi_dmul>
 800ab14:	9b02      	ldr	r3, [sp, #8]
 800ab16:	9d00      	ldr	r5, [sp, #0]
 800ab18:	930c      	str	r3, [sp, #48]	; 0x30
 800ab1a:	ec41 0b18 	vmov	d8, r0, r1
 800ab1e:	4639      	mov	r1, r7
 800ab20:	4630      	mov	r0, r6
 800ab22:	f7f6 f819 	bl	8000b58 <__aeabi_d2iz>
 800ab26:	9011      	str	r0, [sp, #68]	; 0x44
 800ab28:	f7f5 fcfc 	bl	8000524 <__aeabi_i2d>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	460b      	mov	r3, r1
 800ab30:	4630      	mov	r0, r6
 800ab32:	4639      	mov	r1, r7
 800ab34:	f7f5 fba8 	bl	8000288 <__aeabi_dsub>
 800ab38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab3a:	3330      	adds	r3, #48	; 0x30
 800ab3c:	f805 3b01 	strb.w	r3, [r5], #1
 800ab40:	9b02      	ldr	r3, [sp, #8]
 800ab42:	429d      	cmp	r5, r3
 800ab44:	4606      	mov	r6, r0
 800ab46:	460f      	mov	r7, r1
 800ab48:	f04f 0200 	mov.w	r2, #0
 800ab4c:	d134      	bne.n	800abb8 <_dtoa_r+0x660>
 800ab4e:	4b19      	ldr	r3, [pc, #100]	; (800abb4 <_dtoa_r+0x65c>)
 800ab50:	ec51 0b18 	vmov	r0, r1, d8
 800ab54:	f7f5 fb9a 	bl	800028c <__adddf3>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	4639      	mov	r1, r7
 800ab60:	f7f5 ffda 	bl	8000b18 <__aeabi_dcmpgt>
 800ab64:	2800      	cmp	r0, #0
 800ab66:	d175      	bne.n	800ac54 <_dtoa_r+0x6fc>
 800ab68:	ec53 2b18 	vmov	r2, r3, d8
 800ab6c:	4911      	ldr	r1, [pc, #68]	; (800abb4 <_dtoa_r+0x65c>)
 800ab6e:	2000      	movs	r0, #0
 800ab70:	f7f5 fb8a 	bl	8000288 <__aeabi_dsub>
 800ab74:	4602      	mov	r2, r0
 800ab76:	460b      	mov	r3, r1
 800ab78:	4630      	mov	r0, r6
 800ab7a:	4639      	mov	r1, r7
 800ab7c:	f7f5 ffae 	bl	8000adc <__aeabi_dcmplt>
 800ab80:	2800      	cmp	r0, #0
 800ab82:	f43f af27 	beq.w	800a9d4 <_dtoa_r+0x47c>
 800ab86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab88:	1e6b      	subs	r3, r5, #1
 800ab8a:	930c      	str	r3, [sp, #48]	; 0x30
 800ab8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ab90:	2b30      	cmp	r3, #48	; 0x30
 800ab92:	d0f8      	beq.n	800ab86 <_dtoa_r+0x62e>
 800ab94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ab98:	e04a      	b.n	800ac30 <_dtoa_r+0x6d8>
 800ab9a:	bf00      	nop
 800ab9c:	0800cac0 	.word	0x0800cac0
 800aba0:	0800ca98 	.word	0x0800ca98
 800aba4:	3ff00000 	.word	0x3ff00000
 800aba8:	40240000 	.word	0x40240000
 800abac:	401c0000 	.word	0x401c0000
 800abb0:	40140000 	.word	0x40140000
 800abb4:	3fe00000 	.word	0x3fe00000
 800abb8:	4baf      	ldr	r3, [pc, #700]	; (800ae78 <_dtoa_r+0x920>)
 800abba:	f7f5 fd1d 	bl	80005f8 <__aeabi_dmul>
 800abbe:	4606      	mov	r6, r0
 800abc0:	460f      	mov	r7, r1
 800abc2:	e7ac      	b.n	800ab1e <_dtoa_r+0x5c6>
 800abc4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800abc8:	9d00      	ldr	r5, [sp, #0]
 800abca:	4642      	mov	r2, r8
 800abcc:	464b      	mov	r3, r9
 800abce:	4630      	mov	r0, r6
 800abd0:	4639      	mov	r1, r7
 800abd2:	f7f5 fe3b 	bl	800084c <__aeabi_ddiv>
 800abd6:	f7f5 ffbf 	bl	8000b58 <__aeabi_d2iz>
 800abda:	9002      	str	r0, [sp, #8]
 800abdc:	f7f5 fca2 	bl	8000524 <__aeabi_i2d>
 800abe0:	4642      	mov	r2, r8
 800abe2:	464b      	mov	r3, r9
 800abe4:	f7f5 fd08 	bl	80005f8 <__aeabi_dmul>
 800abe8:	4602      	mov	r2, r0
 800abea:	460b      	mov	r3, r1
 800abec:	4630      	mov	r0, r6
 800abee:	4639      	mov	r1, r7
 800abf0:	f7f5 fb4a 	bl	8000288 <__aeabi_dsub>
 800abf4:	9e02      	ldr	r6, [sp, #8]
 800abf6:	9f01      	ldr	r7, [sp, #4]
 800abf8:	3630      	adds	r6, #48	; 0x30
 800abfa:	f805 6b01 	strb.w	r6, [r5], #1
 800abfe:	9e00      	ldr	r6, [sp, #0]
 800ac00:	1bae      	subs	r6, r5, r6
 800ac02:	42b7      	cmp	r7, r6
 800ac04:	4602      	mov	r2, r0
 800ac06:	460b      	mov	r3, r1
 800ac08:	d137      	bne.n	800ac7a <_dtoa_r+0x722>
 800ac0a:	f7f5 fb3f 	bl	800028c <__adddf3>
 800ac0e:	4642      	mov	r2, r8
 800ac10:	464b      	mov	r3, r9
 800ac12:	4606      	mov	r6, r0
 800ac14:	460f      	mov	r7, r1
 800ac16:	f7f5 ff7f 	bl	8000b18 <__aeabi_dcmpgt>
 800ac1a:	b9c8      	cbnz	r0, 800ac50 <_dtoa_r+0x6f8>
 800ac1c:	4642      	mov	r2, r8
 800ac1e:	464b      	mov	r3, r9
 800ac20:	4630      	mov	r0, r6
 800ac22:	4639      	mov	r1, r7
 800ac24:	f7f5 ff50 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac28:	b110      	cbz	r0, 800ac30 <_dtoa_r+0x6d8>
 800ac2a:	9b02      	ldr	r3, [sp, #8]
 800ac2c:	07d9      	lsls	r1, r3, #31
 800ac2e:	d40f      	bmi.n	800ac50 <_dtoa_r+0x6f8>
 800ac30:	4620      	mov	r0, r4
 800ac32:	4659      	mov	r1, fp
 800ac34:	f000 fac8 	bl	800b1c8 <_Bfree>
 800ac38:	2300      	movs	r3, #0
 800ac3a:	702b      	strb	r3, [r5, #0]
 800ac3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac3e:	f10a 0001 	add.w	r0, sl, #1
 800ac42:	6018      	str	r0, [r3, #0]
 800ac44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	f43f acd8 	beq.w	800a5fc <_dtoa_r+0xa4>
 800ac4c:	601d      	str	r5, [r3, #0]
 800ac4e:	e4d5      	b.n	800a5fc <_dtoa_r+0xa4>
 800ac50:	f8cd a01c 	str.w	sl, [sp, #28]
 800ac54:	462b      	mov	r3, r5
 800ac56:	461d      	mov	r5, r3
 800ac58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac5c:	2a39      	cmp	r2, #57	; 0x39
 800ac5e:	d108      	bne.n	800ac72 <_dtoa_r+0x71a>
 800ac60:	9a00      	ldr	r2, [sp, #0]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d1f7      	bne.n	800ac56 <_dtoa_r+0x6fe>
 800ac66:	9a07      	ldr	r2, [sp, #28]
 800ac68:	9900      	ldr	r1, [sp, #0]
 800ac6a:	3201      	adds	r2, #1
 800ac6c:	9207      	str	r2, [sp, #28]
 800ac6e:	2230      	movs	r2, #48	; 0x30
 800ac70:	700a      	strb	r2, [r1, #0]
 800ac72:	781a      	ldrb	r2, [r3, #0]
 800ac74:	3201      	adds	r2, #1
 800ac76:	701a      	strb	r2, [r3, #0]
 800ac78:	e78c      	b.n	800ab94 <_dtoa_r+0x63c>
 800ac7a:	4b7f      	ldr	r3, [pc, #508]	; (800ae78 <_dtoa_r+0x920>)
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f7f5 fcbb 	bl	80005f8 <__aeabi_dmul>
 800ac82:	2200      	movs	r2, #0
 800ac84:	2300      	movs	r3, #0
 800ac86:	4606      	mov	r6, r0
 800ac88:	460f      	mov	r7, r1
 800ac8a:	f7f5 ff1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	d09b      	beq.n	800abca <_dtoa_r+0x672>
 800ac92:	e7cd      	b.n	800ac30 <_dtoa_r+0x6d8>
 800ac94:	9a08      	ldr	r2, [sp, #32]
 800ac96:	2a00      	cmp	r2, #0
 800ac98:	f000 80c4 	beq.w	800ae24 <_dtoa_r+0x8cc>
 800ac9c:	9a05      	ldr	r2, [sp, #20]
 800ac9e:	2a01      	cmp	r2, #1
 800aca0:	f300 80a8 	bgt.w	800adf4 <_dtoa_r+0x89c>
 800aca4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aca6:	2a00      	cmp	r2, #0
 800aca8:	f000 80a0 	beq.w	800adec <_dtoa_r+0x894>
 800acac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800acb0:	9e06      	ldr	r6, [sp, #24]
 800acb2:	4645      	mov	r5, r8
 800acb4:	9a04      	ldr	r2, [sp, #16]
 800acb6:	2101      	movs	r1, #1
 800acb8:	441a      	add	r2, r3
 800acba:	4620      	mov	r0, r4
 800acbc:	4498      	add	r8, r3
 800acbe:	9204      	str	r2, [sp, #16]
 800acc0:	f000 fb3e 	bl	800b340 <__i2b>
 800acc4:	4607      	mov	r7, r0
 800acc6:	2d00      	cmp	r5, #0
 800acc8:	dd0b      	ble.n	800ace2 <_dtoa_r+0x78a>
 800acca:	9b04      	ldr	r3, [sp, #16]
 800accc:	2b00      	cmp	r3, #0
 800acce:	dd08      	ble.n	800ace2 <_dtoa_r+0x78a>
 800acd0:	42ab      	cmp	r3, r5
 800acd2:	9a04      	ldr	r2, [sp, #16]
 800acd4:	bfa8      	it	ge
 800acd6:	462b      	movge	r3, r5
 800acd8:	eba8 0803 	sub.w	r8, r8, r3
 800acdc:	1aed      	subs	r5, r5, r3
 800acde:	1ad3      	subs	r3, r2, r3
 800ace0:	9304      	str	r3, [sp, #16]
 800ace2:	9b06      	ldr	r3, [sp, #24]
 800ace4:	b1fb      	cbz	r3, 800ad26 <_dtoa_r+0x7ce>
 800ace6:	9b08      	ldr	r3, [sp, #32]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	f000 809f 	beq.w	800ae2c <_dtoa_r+0x8d4>
 800acee:	2e00      	cmp	r6, #0
 800acf0:	dd11      	ble.n	800ad16 <_dtoa_r+0x7be>
 800acf2:	4639      	mov	r1, r7
 800acf4:	4632      	mov	r2, r6
 800acf6:	4620      	mov	r0, r4
 800acf8:	f000 fbde 	bl	800b4b8 <__pow5mult>
 800acfc:	465a      	mov	r2, fp
 800acfe:	4601      	mov	r1, r0
 800ad00:	4607      	mov	r7, r0
 800ad02:	4620      	mov	r0, r4
 800ad04:	f000 fb32 	bl	800b36c <__multiply>
 800ad08:	4659      	mov	r1, fp
 800ad0a:	9007      	str	r0, [sp, #28]
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	f000 fa5b 	bl	800b1c8 <_Bfree>
 800ad12:	9b07      	ldr	r3, [sp, #28]
 800ad14:	469b      	mov	fp, r3
 800ad16:	9b06      	ldr	r3, [sp, #24]
 800ad18:	1b9a      	subs	r2, r3, r6
 800ad1a:	d004      	beq.n	800ad26 <_dtoa_r+0x7ce>
 800ad1c:	4659      	mov	r1, fp
 800ad1e:	4620      	mov	r0, r4
 800ad20:	f000 fbca 	bl	800b4b8 <__pow5mult>
 800ad24:	4683      	mov	fp, r0
 800ad26:	2101      	movs	r1, #1
 800ad28:	4620      	mov	r0, r4
 800ad2a:	f000 fb09 	bl	800b340 <__i2b>
 800ad2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	4606      	mov	r6, r0
 800ad34:	dd7c      	ble.n	800ae30 <_dtoa_r+0x8d8>
 800ad36:	461a      	mov	r2, r3
 800ad38:	4601      	mov	r1, r0
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f000 fbbc 	bl	800b4b8 <__pow5mult>
 800ad40:	9b05      	ldr	r3, [sp, #20]
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	4606      	mov	r6, r0
 800ad46:	dd76      	ble.n	800ae36 <_dtoa_r+0x8de>
 800ad48:	2300      	movs	r3, #0
 800ad4a:	9306      	str	r3, [sp, #24]
 800ad4c:	6933      	ldr	r3, [r6, #16]
 800ad4e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ad52:	6918      	ldr	r0, [r3, #16]
 800ad54:	f000 faa4 	bl	800b2a0 <__hi0bits>
 800ad58:	f1c0 0020 	rsb	r0, r0, #32
 800ad5c:	9b04      	ldr	r3, [sp, #16]
 800ad5e:	4418      	add	r0, r3
 800ad60:	f010 001f 	ands.w	r0, r0, #31
 800ad64:	f000 8086 	beq.w	800ae74 <_dtoa_r+0x91c>
 800ad68:	f1c0 0320 	rsb	r3, r0, #32
 800ad6c:	2b04      	cmp	r3, #4
 800ad6e:	dd7f      	ble.n	800ae70 <_dtoa_r+0x918>
 800ad70:	f1c0 001c 	rsb	r0, r0, #28
 800ad74:	9b04      	ldr	r3, [sp, #16]
 800ad76:	4403      	add	r3, r0
 800ad78:	4480      	add	r8, r0
 800ad7a:	4405      	add	r5, r0
 800ad7c:	9304      	str	r3, [sp, #16]
 800ad7e:	f1b8 0f00 	cmp.w	r8, #0
 800ad82:	dd05      	ble.n	800ad90 <_dtoa_r+0x838>
 800ad84:	4659      	mov	r1, fp
 800ad86:	4642      	mov	r2, r8
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f000 fbef 	bl	800b56c <__lshift>
 800ad8e:	4683      	mov	fp, r0
 800ad90:	9b04      	ldr	r3, [sp, #16]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	dd05      	ble.n	800ada2 <_dtoa_r+0x84a>
 800ad96:	4631      	mov	r1, r6
 800ad98:	461a      	mov	r2, r3
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	f000 fbe6 	bl	800b56c <__lshift>
 800ada0:	4606      	mov	r6, r0
 800ada2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d069      	beq.n	800ae7c <_dtoa_r+0x924>
 800ada8:	4631      	mov	r1, r6
 800adaa:	4658      	mov	r0, fp
 800adac:	f000 fc4a 	bl	800b644 <__mcmp>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	da63      	bge.n	800ae7c <_dtoa_r+0x924>
 800adb4:	2300      	movs	r3, #0
 800adb6:	4659      	mov	r1, fp
 800adb8:	220a      	movs	r2, #10
 800adba:	4620      	mov	r0, r4
 800adbc:	f000 fa26 	bl	800b20c <__multadd>
 800adc0:	9b08      	ldr	r3, [sp, #32]
 800adc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800adc6:	4683      	mov	fp, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	f000 818f 	beq.w	800b0ec <_dtoa_r+0xb94>
 800adce:	4639      	mov	r1, r7
 800add0:	2300      	movs	r3, #0
 800add2:	220a      	movs	r2, #10
 800add4:	4620      	mov	r0, r4
 800add6:	f000 fa19 	bl	800b20c <__multadd>
 800adda:	f1b9 0f00 	cmp.w	r9, #0
 800adde:	4607      	mov	r7, r0
 800ade0:	f300 808e 	bgt.w	800af00 <_dtoa_r+0x9a8>
 800ade4:	9b05      	ldr	r3, [sp, #20]
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	dc50      	bgt.n	800ae8c <_dtoa_r+0x934>
 800adea:	e089      	b.n	800af00 <_dtoa_r+0x9a8>
 800adec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800adee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800adf2:	e75d      	b.n	800acb0 <_dtoa_r+0x758>
 800adf4:	9b01      	ldr	r3, [sp, #4]
 800adf6:	1e5e      	subs	r6, r3, #1
 800adf8:	9b06      	ldr	r3, [sp, #24]
 800adfa:	42b3      	cmp	r3, r6
 800adfc:	bfbf      	itttt	lt
 800adfe:	9b06      	ldrlt	r3, [sp, #24]
 800ae00:	9606      	strlt	r6, [sp, #24]
 800ae02:	1af2      	sublt	r2, r6, r3
 800ae04:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ae06:	bfb6      	itet	lt
 800ae08:	189b      	addlt	r3, r3, r2
 800ae0a:	1b9e      	subge	r6, r3, r6
 800ae0c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800ae0e:	9b01      	ldr	r3, [sp, #4]
 800ae10:	bfb8      	it	lt
 800ae12:	2600      	movlt	r6, #0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	bfb5      	itete	lt
 800ae18:	eba8 0503 	sublt.w	r5, r8, r3
 800ae1c:	9b01      	ldrge	r3, [sp, #4]
 800ae1e:	2300      	movlt	r3, #0
 800ae20:	4645      	movge	r5, r8
 800ae22:	e747      	b.n	800acb4 <_dtoa_r+0x75c>
 800ae24:	9e06      	ldr	r6, [sp, #24]
 800ae26:	9f08      	ldr	r7, [sp, #32]
 800ae28:	4645      	mov	r5, r8
 800ae2a:	e74c      	b.n	800acc6 <_dtoa_r+0x76e>
 800ae2c:	9a06      	ldr	r2, [sp, #24]
 800ae2e:	e775      	b.n	800ad1c <_dtoa_r+0x7c4>
 800ae30:	9b05      	ldr	r3, [sp, #20]
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	dc18      	bgt.n	800ae68 <_dtoa_r+0x910>
 800ae36:	9b02      	ldr	r3, [sp, #8]
 800ae38:	b9b3      	cbnz	r3, 800ae68 <_dtoa_r+0x910>
 800ae3a:	9b03      	ldr	r3, [sp, #12]
 800ae3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae40:	b9a3      	cbnz	r3, 800ae6c <_dtoa_r+0x914>
 800ae42:	9b03      	ldr	r3, [sp, #12]
 800ae44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae48:	0d1b      	lsrs	r3, r3, #20
 800ae4a:	051b      	lsls	r3, r3, #20
 800ae4c:	b12b      	cbz	r3, 800ae5a <_dtoa_r+0x902>
 800ae4e:	9b04      	ldr	r3, [sp, #16]
 800ae50:	3301      	adds	r3, #1
 800ae52:	9304      	str	r3, [sp, #16]
 800ae54:	f108 0801 	add.w	r8, r8, #1
 800ae58:	2301      	movs	r3, #1
 800ae5a:	9306      	str	r3, [sp, #24]
 800ae5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	f47f af74 	bne.w	800ad4c <_dtoa_r+0x7f4>
 800ae64:	2001      	movs	r0, #1
 800ae66:	e779      	b.n	800ad5c <_dtoa_r+0x804>
 800ae68:	2300      	movs	r3, #0
 800ae6a:	e7f6      	b.n	800ae5a <_dtoa_r+0x902>
 800ae6c:	9b02      	ldr	r3, [sp, #8]
 800ae6e:	e7f4      	b.n	800ae5a <_dtoa_r+0x902>
 800ae70:	d085      	beq.n	800ad7e <_dtoa_r+0x826>
 800ae72:	4618      	mov	r0, r3
 800ae74:	301c      	adds	r0, #28
 800ae76:	e77d      	b.n	800ad74 <_dtoa_r+0x81c>
 800ae78:	40240000 	.word	0x40240000
 800ae7c:	9b01      	ldr	r3, [sp, #4]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	dc38      	bgt.n	800aef4 <_dtoa_r+0x99c>
 800ae82:	9b05      	ldr	r3, [sp, #20]
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	dd35      	ble.n	800aef4 <_dtoa_r+0x99c>
 800ae88:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ae8c:	f1b9 0f00 	cmp.w	r9, #0
 800ae90:	d10d      	bne.n	800aeae <_dtoa_r+0x956>
 800ae92:	4631      	mov	r1, r6
 800ae94:	464b      	mov	r3, r9
 800ae96:	2205      	movs	r2, #5
 800ae98:	4620      	mov	r0, r4
 800ae9a:	f000 f9b7 	bl	800b20c <__multadd>
 800ae9e:	4601      	mov	r1, r0
 800aea0:	4606      	mov	r6, r0
 800aea2:	4658      	mov	r0, fp
 800aea4:	f000 fbce 	bl	800b644 <__mcmp>
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	f73f adbd 	bgt.w	800aa28 <_dtoa_r+0x4d0>
 800aeae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeb0:	9d00      	ldr	r5, [sp, #0]
 800aeb2:	ea6f 0a03 	mvn.w	sl, r3
 800aeb6:	f04f 0800 	mov.w	r8, #0
 800aeba:	4631      	mov	r1, r6
 800aebc:	4620      	mov	r0, r4
 800aebe:	f000 f983 	bl	800b1c8 <_Bfree>
 800aec2:	2f00      	cmp	r7, #0
 800aec4:	f43f aeb4 	beq.w	800ac30 <_dtoa_r+0x6d8>
 800aec8:	f1b8 0f00 	cmp.w	r8, #0
 800aecc:	d005      	beq.n	800aeda <_dtoa_r+0x982>
 800aece:	45b8      	cmp	r8, r7
 800aed0:	d003      	beq.n	800aeda <_dtoa_r+0x982>
 800aed2:	4641      	mov	r1, r8
 800aed4:	4620      	mov	r0, r4
 800aed6:	f000 f977 	bl	800b1c8 <_Bfree>
 800aeda:	4639      	mov	r1, r7
 800aedc:	4620      	mov	r0, r4
 800aede:	f000 f973 	bl	800b1c8 <_Bfree>
 800aee2:	e6a5      	b.n	800ac30 <_dtoa_r+0x6d8>
 800aee4:	2600      	movs	r6, #0
 800aee6:	4637      	mov	r7, r6
 800aee8:	e7e1      	b.n	800aeae <_dtoa_r+0x956>
 800aeea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800aeec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800aef0:	4637      	mov	r7, r6
 800aef2:	e599      	b.n	800aa28 <_dtoa_r+0x4d0>
 800aef4:	9b08      	ldr	r3, [sp, #32]
 800aef6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	f000 80fd 	beq.w	800b0fa <_dtoa_r+0xba2>
 800af00:	2d00      	cmp	r5, #0
 800af02:	dd05      	ble.n	800af10 <_dtoa_r+0x9b8>
 800af04:	4639      	mov	r1, r7
 800af06:	462a      	mov	r2, r5
 800af08:	4620      	mov	r0, r4
 800af0a:	f000 fb2f 	bl	800b56c <__lshift>
 800af0e:	4607      	mov	r7, r0
 800af10:	9b06      	ldr	r3, [sp, #24]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d05c      	beq.n	800afd0 <_dtoa_r+0xa78>
 800af16:	6879      	ldr	r1, [r7, #4]
 800af18:	4620      	mov	r0, r4
 800af1a:	f000 f915 	bl	800b148 <_Balloc>
 800af1e:	4605      	mov	r5, r0
 800af20:	b928      	cbnz	r0, 800af2e <_dtoa_r+0x9d6>
 800af22:	4b80      	ldr	r3, [pc, #512]	; (800b124 <_dtoa_r+0xbcc>)
 800af24:	4602      	mov	r2, r0
 800af26:	f240 21ea 	movw	r1, #746	; 0x2ea
 800af2a:	f7ff bb2e 	b.w	800a58a <_dtoa_r+0x32>
 800af2e:	693a      	ldr	r2, [r7, #16]
 800af30:	3202      	adds	r2, #2
 800af32:	0092      	lsls	r2, r2, #2
 800af34:	f107 010c 	add.w	r1, r7, #12
 800af38:	300c      	adds	r0, #12
 800af3a:	f7fe fde1 	bl	8009b00 <memcpy>
 800af3e:	2201      	movs	r2, #1
 800af40:	4629      	mov	r1, r5
 800af42:	4620      	mov	r0, r4
 800af44:	f000 fb12 	bl	800b56c <__lshift>
 800af48:	9b00      	ldr	r3, [sp, #0]
 800af4a:	3301      	adds	r3, #1
 800af4c:	9301      	str	r3, [sp, #4]
 800af4e:	9b00      	ldr	r3, [sp, #0]
 800af50:	444b      	add	r3, r9
 800af52:	9307      	str	r3, [sp, #28]
 800af54:	9b02      	ldr	r3, [sp, #8]
 800af56:	f003 0301 	and.w	r3, r3, #1
 800af5a:	46b8      	mov	r8, r7
 800af5c:	9306      	str	r3, [sp, #24]
 800af5e:	4607      	mov	r7, r0
 800af60:	9b01      	ldr	r3, [sp, #4]
 800af62:	4631      	mov	r1, r6
 800af64:	3b01      	subs	r3, #1
 800af66:	4658      	mov	r0, fp
 800af68:	9302      	str	r3, [sp, #8]
 800af6a:	f7ff fa69 	bl	800a440 <quorem>
 800af6e:	4603      	mov	r3, r0
 800af70:	3330      	adds	r3, #48	; 0x30
 800af72:	9004      	str	r0, [sp, #16]
 800af74:	4641      	mov	r1, r8
 800af76:	4658      	mov	r0, fp
 800af78:	9308      	str	r3, [sp, #32]
 800af7a:	f000 fb63 	bl	800b644 <__mcmp>
 800af7e:	463a      	mov	r2, r7
 800af80:	4681      	mov	r9, r0
 800af82:	4631      	mov	r1, r6
 800af84:	4620      	mov	r0, r4
 800af86:	f000 fb79 	bl	800b67c <__mdiff>
 800af8a:	68c2      	ldr	r2, [r0, #12]
 800af8c:	9b08      	ldr	r3, [sp, #32]
 800af8e:	4605      	mov	r5, r0
 800af90:	bb02      	cbnz	r2, 800afd4 <_dtoa_r+0xa7c>
 800af92:	4601      	mov	r1, r0
 800af94:	4658      	mov	r0, fp
 800af96:	f000 fb55 	bl	800b644 <__mcmp>
 800af9a:	9b08      	ldr	r3, [sp, #32]
 800af9c:	4602      	mov	r2, r0
 800af9e:	4629      	mov	r1, r5
 800afa0:	4620      	mov	r0, r4
 800afa2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800afa6:	f000 f90f 	bl	800b1c8 <_Bfree>
 800afaa:	9b05      	ldr	r3, [sp, #20]
 800afac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afae:	9d01      	ldr	r5, [sp, #4]
 800afb0:	ea43 0102 	orr.w	r1, r3, r2
 800afb4:	9b06      	ldr	r3, [sp, #24]
 800afb6:	430b      	orrs	r3, r1
 800afb8:	9b08      	ldr	r3, [sp, #32]
 800afba:	d10d      	bne.n	800afd8 <_dtoa_r+0xa80>
 800afbc:	2b39      	cmp	r3, #57	; 0x39
 800afbe:	d029      	beq.n	800b014 <_dtoa_r+0xabc>
 800afc0:	f1b9 0f00 	cmp.w	r9, #0
 800afc4:	dd01      	ble.n	800afca <_dtoa_r+0xa72>
 800afc6:	9b04      	ldr	r3, [sp, #16]
 800afc8:	3331      	adds	r3, #49	; 0x31
 800afca:	9a02      	ldr	r2, [sp, #8]
 800afcc:	7013      	strb	r3, [r2, #0]
 800afce:	e774      	b.n	800aeba <_dtoa_r+0x962>
 800afd0:	4638      	mov	r0, r7
 800afd2:	e7b9      	b.n	800af48 <_dtoa_r+0x9f0>
 800afd4:	2201      	movs	r2, #1
 800afd6:	e7e2      	b.n	800af9e <_dtoa_r+0xa46>
 800afd8:	f1b9 0f00 	cmp.w	r9, #0
 800afdc:	db06      	blt.n	800afec <_dtoa_r+0xa94>
 800afde:	9905      	ldr	r1, [sp, #20]
 800afe0:	ea41 0909 	orr.w	r9, r1, r9
 800afe4:	9906      	ldr	r1, [sp, #24]
 800afe6:	ea59 0101 	orrs.w	r1, r9, r1
 800afea:	d120      	bne.n	800b02e <_dtoa_r+0xad6>
 800afec:	2a00      	cmp	r2, #0
 800afee:	ddec      	ble.n	800afca <_dtoa_r+0xa72>
 800aff0:	4659      	mov	r1, fp
 800aff2:	2201      	movs	r2, #1
 800aff4:	4620      	mov	r0, r4
 800aff6:	9301      	str	r3, [sp, #4]
 800aff8:	f000 fab8 	bl	800b56c <__lshift>
 800affc:	4631      	mov	r1, r6
 800affe:	4683      	mov	fp, r0
 800b000:	f000 fb20 	bl	800b644 <__mcmp>
 800b004:	2800      	cmp	r0, #0
 800b006:	9b01      	ldr	r3, [sp, #4]
 800b008:	dc02      	bgt.n	800b010 <_dtoa_r+0xab8>
 800b00a:	d1de      	bne.n	800afca <_dtoa_r+0xa72>
 800b00c:	07da      	lsls	r2, r3, #31
 800b00e:	d5dc      	bpl.n	800afca <_dtoa_r+0xa72>
 800b010:	2b39      	cmp	r3, #57	; 0x39
 800b012:	d1d8      	bne.n	800afc6 <_dtoa_r+0xa6e>
 800b014:	9a02      	ldr	r2, [sp, #8]
 800b016:	2339      	movs	r3, #57	; 0x39
 800b018:	7013      	strb	r3, [r2, #0]
 800b01a:	462b      	mov	r3, r5
 800b01c:	461d      	mov	r5, r3
 800b01e:	3b01      	subs	r3, #1
 800b020:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b024:	2a39      	cmp	r2, #57	; 0x39
 800b026:	d050      	beq.n	800b0ca <_dtoa_r+0xb72>
 800b028:	3201      	adds	r2, #1
 800b02a:	701a      	strb	r2, [r3, #0]
 800b02c:	e745      	b.n	800aeba <_dtoa_r+0x962>
 800b02e:	2a00      	cmp	r2, #0
 800b030:	dd03      	ble.n	800b03a <_dtoa_r+0xae2>
 800b032:	2b39      	cmp	r3, #57	; 0x39
 800b034:	d0ee      	beq.n	800b014 <_dtoa_r+0xabc>
 800b036:	3301      	adds	r3, #1
 800b038:	e7c7      	b.n	800afca <_dtoa_r+0xa72>
 800b03a:	9a01      	ldr	r2, [sp, #4]
 800b03c:	9907      	ldr	r1, [sp, #28]
 800b03e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b042:	428a      	cmp	r2, r1
 800b044:	d02a      	beq.n	800b09c <_dtoa_r+0xb44>
 800b046:	4659      	mov	r1, fp
 800b048:	2300      	movs	r3, #0
 800b04a:	220a      	movs	r2, #10
 800b04c:	4620      	mov	r0, r4
 800b04e:	f000 f8dd 	bl	800b20c <__multadd>
 800b052:	45b8      	cmp	r8, r7
 800b054:	4683      	mov	fp, r0
 800b056:	f04f 0300 	mov.w	r3, #0
 800b05a:	f04f 020a 	mov.w	r2, #10
 800b05e:	4641      	mov	r1, r8
 800b060:	4620      	mov	r0, r4
 800b062:	d107      	bne.n	800b074 <_dtoa_r+0xb1c>
 800b064:	f000 f8d2 	bl	800b20c <__multadd>
 800b068:	4680      	mov	r8, r0
 800b06a:	4607      	mov	r7, r0
 800b06c:	9b01      	ldr	r3, [sp, #4]
 800b06e:	3301      	adds	r3, #1
 800b070:	9301      	str	r3, [sp, #4]
 800b072:	e775      	b.n	800af60 <_dtoa_r+0xa08>
 800b074:	f000 f8ca 	bl	800b20c <__multadd>
 800b078:	4639      	mov	r1, r7
 800b07a:	4680      	mov	r8, r0
 800b07c:	2300      	movs	r3, #0
 800b07e:	220a      	movs	r2, #10
 800b080:	4620      	mov	r0, r4
 800b082:	f000 f8c3 	bl	800b20c <__multadd>
 800b086:	4607      	mov	r7, r0
 800b088:	e7f0      	b.n	800b06c <_dtoa_r+0xb14>
 800b08a:	f1b9 0f00 	cmp.w	r9, #0
 800b08e:	9a00      	ldr	r2, [sp, #0]
 800b090:	bfcc      	ite	gt
 800b092:	464d      	movgt	r5, r9
 800b094:	2501      	movle	r5, #1
 800b096:	4415      	add	r5, r2
 800b098:	f04f 0800 	mov.w	r8, #0
 800b09c:	4659      	mov	r1, fp
 800b09e:	2201      	movs	r2, #1
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	9301      	str	r3, [sp, #4]
 800b0a4:	f000 fa62 	bl	800b56c <__lshift>
 800b0a8:	4631      	mov	r1, r6
 800b0aa:	4683      	mov	fp, r0
 800b0ac:	f000 faca 	bl	800b644 <__mcmp>
 800b0b0:	2800      	cmp	r0, #0
 800b0b2:	dcb2      	bgt.n	800b01a <_dtoa_r+0xac2>
 800b0b4:	d102      	bne.n	800b0bc <_dtoa_r+0xb64>
 800b0b6:	9b01      	ldr	r3, [sp, #4]
 800b0b8:	07db      	lsls	r3, r3, #31
 800b0ba:	d4ae      	bmi.n	800b01a <_dtoa_r+0xac2>
 800b0bc:	462b      	mov	r3, r5
 800b0be:	461d      	mov	r5, r3
 800b0c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0c4:	2a30      	cmp	r2, #48	; 0x30
 800b0c6:	d0fa      	beq.n	800b0be <_dtoa_r+0xb66>
 800b0c8:	e6f7      	b.n	800aeba <_dtoa_r+0x962>
 800b0ca:	9a00      	ldr	r2, [sp, #0]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d1a5      	bne.n	800b01c <_dtoa_r+0xac4>
 800b0d0:	f10a 0a01 	add.w	sl, sl, #1
 800b0d4:	2331      	movs	r3, #49	; 0x31
 800b0d6:	e779      	b.n	800afcc <_dtoa_r+0xa74>
 800b0d8:	4b13      	ldr	r3, [pc, #76]	; (800b128 <_dtoa_r+0xbd0>)
 800b0da:	f7ff baaf 	b.w	800a63c <_dtoa_r+0xe4>
 800b0de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f47f aa86 	bne.w	800a5f2 <_dtoa_r+0x9a>
 800b0e6:	4b11      	ldr	r3, [pc, #68]	; (800b12c <_dtoa_r+0xbd4>)
 800b0e8:	f7ff baa8 	b.w	800a63c <_dtoa_r+0xe4>
 800b0ec:	f1b9 0f00 	cmp.w	r9, #0
 800b0f0:	dc03      	bgt.n	800b0fa <_dtoa_r+0xba2>
 800b0f2:	9b05      	ldr	r3, [sp, #20]
 800b0f4:	2b02      	cmp	r3, #2
 800b0f6:	f73f aec9 	bgt.w	800ae8c <_dtoa_r+0x934>
 800b0fa:	9d00      	ldr	r5, [sp, #0]
 800b0fc:	4631      	mov	r1, r6
 800b0fe:	4658      	mov	r0, fp
 800b100:	f7ff f99e 	bl	800a440 <quorem>
 800b104:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b108:	f805 3b01 	strb.w	r3, [r5], #1
 800b10c:	9a00      	ldr	r2, [sp, #0]
 800b10e:	1aaa      	subs	r2, r5, r2
 800b110:	4591      	cmp	r9, r2
 800b112:	ddba      	ble.n	800b08a <_dtoa_r+0xb32>
 800b114:	4659      	mov	r1, fp
 800b116:	2300      	movs	r3, #0
 800b118:	220a      	movs	r2, #10
 800b11a:	4620      	mov	r0, r4
 800b11c:	f000 f876 	bl	800b20c <__multadd>
 800b120:	4683      	mov	fp, r0
 800b122:	e7eb      	b.n	800b0fc <_dtoa_r+0xba4>
 800b124:	0800ca23 	.word	0x0800ca23
 800b128:	0800c97c 	.word	0x0800c97c
 800b12c:	0800c9a0 	.word	0x0800c9a0

0800b130 <_localeconv_r>:
 800b130:	4800      	ldr	r0, [pc, #0]	; (800b134 <_localeconv_r+0x4>)
 800b132:	4770      	bx	lr
 800b134:	20000168 	.word	0x20000168

0800b138 <malloc>:
 800b138:	4b02      	ldr	r3, [pc, #8]	; (800b144 <malloc+0xc>)
 800b13a:	4601      	mov	r1, r0
 800b13c:	6818      	ldr	r0, [r3, #0]
 800b13e:	f000 bbe1 	b.w	800b904 <_malloc_r>
 800b142:	bf00      	nop
 800b144:	20000014 	.word	0x20000014

0800b148 <_Balloc>:
 800b148:	b570      	push	{r4, r5, r6, lr}
 800b14a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b14c:	4604      	mov	r4, r0
 800b14e:	460d      	mov	r5, r1
 800b150:	b976      	cbnz	r6, 800b170 <_Balloc+0x28>
 800b152:	2010      	movs	r0, #16
 800b154:	f7ff fff0 	bl	800b138 <malloc>
 800b158:	4602      	mov	r2, r0
 800b15a:	6260      	str	r0, [r4, #36]	; 0x24
 800b15c:	b920      	cbnz	r0, 800b168 <_Balloc+0x20>
 800b15e:	4b18      	ldr	r3, [pc, #96]	; (800b1c0 <_Balloc+0x78>)
 800b160:	4818      	ldr	r0, [pc, #96]	; (800b1c4 <_Balloc+0x7c>)
 800b162:	2166      	movs	r1, #102	; 0x66
 800b164:	f000 fd94 	bl	800bc90 <__assert_func>
 800b168:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b16c:	6006      	str	r6, [r0, #0]
 800b16e:	60c6      	str	r6, [r0, #12]
 800b170:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b172:	68f3      	ldr	r3, [r6, #12]
 800b174:	b183      	cbz	r3, 800b198 <_Balloc+0x50>
 800b176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b178:	68db      	ldr	r3, [r3, #12]
 800b17a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b17e:	b9b8      	cbnz	r0, 800b1b0 <_Balloc+0x68>
 800b180:	2101      	movs	r1, #1
 800b182:	fa01 f605 	lsl.w	r6, r1, r5
 800b186:	1d72      	adds	r2, r6, #5
 800b188:	0092      	lsls	r2, r2, #2
 800b18a:	4620      	mov	r0, r4
 800b18c:	f000 fb5a 	bl	800b844 <_calloc_r>
 800b190:	b160      	cbz	r0, 800b1ac <_Balloc+0x64>
 800b192:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b196:	e00e      	b.n	800b1b6 <_Balloc+0x6e>
 800b198:	2221      	movs	r2, #33	; 0x21
 800b19a:	2104      	movs	r1, #4
 800b19c:	4620      	mov	r0, r4
 800b19e:	f000 fb51 	bl	800b844 <_calloc_r>
 800b1a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1a4:	60f0      	str	r0, [r6, #12]
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d1e4      	bne.n	800b176 <_Balloc+0x2e>
 800b1ac:	2000      	movs	r0, #0
 800b1ae:	bd70      	pop	{r4, r5, r6, pc}
 800b1b0:	6802      	ldr	r2, [r0, #0]
 800b1b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b1bc:	e7f7      	b.n	800b1ae <_Balloc+0x66>
 800b1be:	bf00      	nop
 800b1c0:	0800c9ad 	.word	0x0800c9ad
 800b1c4:	0800ca34 	.word	0x0800ca34

0800b1c8 <_Bfree>:
 800b1c8:	b570      	push	{r4, r5, r6, lr}
 800b1ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1cc:	4605      	mov	r5, r0
 800b1ce:	460c      	mov	r4, r1
 800b1d0:	b976      	cbnz	r6, 800b1f0 <_Bfree+0x28>
 800b1d2:	2010      	movs	r0, #16
 800b1d4:	f7ff ffb0 	bl	800b138 <malloc>
 800b1d8:	4602      	mov	r2, r0
 800b1da:	6268      	str	r0, [r5, #36]	; 0x24
 800b1dc:	b920      	cbnz	r0, 800b1e8 <_Bfree+0x20>
 800b1de:	4b09      	ldr	r3, [pc, #36]	; (800b204 <_Bfree+0x3c>)
 800b1e0:	4809      	ldr	r0, [pc, #36]	; (800b208 <_Bfree+0x40>)
 800b1e2:	218a      	movs	r1, #138	; 0x8a
 800b1e4:	f000 fd54 	bl	800bc90 <__assert_func>
 800b1e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1ec:	6006      	str	r6, [r0, #0]
 800b1ee:	60c6      	str	r6, [r0, #12]
 800b1f0:	b13c      	cbz	r4, 800b202 <_Bfree+0x3a>
 800b1f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b1f4:	6862      	ldr	r2, [r4, #4]
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b1fc:	6021      	str	r1, [r4, #0]
 800b1fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b202:	bd70      	pop	{r4, r5, r6, pc}
 800b204:	0800c9ad 	.word	0x0800c9ad
 800b208:	0800ca34 	.word	0x0800ca34

0800b20c <__multadd>:
 800b20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b210:	690e      	ldr	r6, [r1, #16]
 800b212:	4607      	mov	r7, r0
 800b214:	4698      	mov	r8, r3
 800b216:	460c      	mov	r4, r1
 800b218:	f101 0014 	add.w	r0, r1, #20
 800b21c:	2300      	movs	r3, #0
 800b21e:	6805      	ldr	r5, [r0, #0]
 800b220:	b2a9      	uxth	r1, r5
 800b222:	fb02 8101 	mla	r1, r2, r1, r8
 800b226:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b22a:	0c2d      	lsrs	r5, r5, #16
 800b22c:	fb02 c505 	mla	r5, r2, r5, ip
 800b230:	b289      	uxth	r1, r1
 800b232:	3301      	adds	r3, #1
 800b234:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b238:	429e      	cmp	r6, r3
 800b23a:	f840 1b04 	str.w	r1, [r0], #4
 800b23e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b242:	dcec      	bgt.n	800b21e <__multadd+0x12>
 800b244:	f1b8 0f00 	cmp.w	r8, #0
 800b248:	d022      	beq.n	800b290 <__multadd+0x84>
 800b24a:	68a3      	ldr	r3, [r4, #8]
 800b24c:	42b3      	cmp	r3, r6
 800b24e:	dc19      	bgt.n	800b284 <__multadd+0x78>
 800b250:	6861      	ldr	r1, [r4, #4]
 800b252:	4638      	mov	r0, r7
 800b254:	3101      	adds	r1, #1
 800b256:	f7ff ff77 	bl	800b148 <_Balloc>
 800b25a:	4605      	mov	r5, r0
 800b25c:	b928      	cbnz	r0, 800b26a <__multadd+0x5e>
 800b25e:	4602      	mov	r2, r0
 800b260:	4b0d      	ldr	r3, [pc, #52]	; (800b298 <__multadd+0x8c>)
 800b262:	480e      	ldr	r0, [pc, #56]	; (800b29c <__multadd+0x90>)
 800b264:	21b5      	movs	r1, #181	; 0xb5
 800b266:	f000 fd13 	bl	800bc90 <__assert_func>
 800b26a:	6922      	ldr	r2, [r4, #16]
 800b26c:	3202      	adds	r2, #2
 800b26e:	f104 010c 	add.w	r1, r4, #12
 800b272:	0092      	lsls	r2, r2, #2
 800b274:	300c      	adds	r0, #12
 800b276:	f7fe fc43 	bl	8009b00 <memcpy>
 800b27a:	4621      	mov	r1, r4
 800b27c:	4638      	mov	r0, r7
 800b27e:	f7ff ffa3 	bl	800b1c8 <_Bfree>
 800b282:	462c      	mov	r4, r5
 800b284:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b288:	3601      	adds	r6, #1
 800b28a:	f8c3 8014 	str.w	r8, [r3, #20]
 800b28e:	6126      	str	r6, [r4, #16]
 800b290:	4620      	mov	r0, r4
 800b292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b296:	bf00      	nop
 800b298:	0800ca23 	.word	0x0800ca23
 800b29c:	0800ca34 	.word	0x0800ca34

0800b2a0 <__hi0bits>:
 800b2a0:	0c03      	lsrs	r3, r0, #16
 800b2a2:	041b      	lsls	r3, r3, #16
 800b2a4:	b9d3      	cbnz	r3, 800b2dc <__hi0bits+0x3c>
 800b2a6:	0400      	lsls	r0, r0, #16
 800b2a8:	2310      	movs	r3, #16
 800b2aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b2ae:	bf04      	itt	eq
 800b2b0:	0200      	lsleq	r0, r0, #8
 800b2b2:	3308      	addeq	r3, #8
 800b2b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b2b8:	bf04      	itt	eq
 800b2ba:	0100      	lsleq	r0, r0, #4
 800b2bc:	3304      	addeq	r3, #4
 800b2be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b2c2:	bf04      	itt	eq
 800b2c4:	0080      	lsleq	r0, r0, #2
 800b2c6:	3302      	addeq	r3, #2
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	db05      	blt.n	800b2d8 <__hi0bits+0x38>
 800b2cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b2d0:	f103 0301 	add.w	r3, r3, #1
 800b2d4:	bf08      	it	eq
 800b2d6:	2320      	moveq	r3, #32
 800b2d8:	4618      	mov	r0, r3
 800b2da:	4770      	bx	lr
 800b2dc:	2300      	movs	r3, #0
 800b2de:	e7e4      	b.n	800b2aa <__hi0bits+0xa>

0800b2e0 <__lo0bits>:
 800b2e0:	6803      	ldr	r3, [r0, #0]
 800b2e2:	f013 0207 	ands.w	r2, r3, #7
 800b2e6:	4601      	mov	r1, r0
 800b2e8:	d00b      	beq.n	800b302 <__lo0bits+0x22>
 800b2ea:	07da      	lsls	r2, r3, #31
 800b2ec:	d424      	bmi.n	800b338 <__lo0bits+0x58>
 800b2ee:	0798      	lsls	r0, r3, #30
 800b2f0:	bf49      	itett	mi
 800b2f2:	085b      	lsrmi	r3, r3, #1
 800b2f4:	089b      	lsrpl	r3, r3, #2
 800b2f6:	2001      	movmi	r0, #1
 800b2f8:	600b      	strmi	r3, [r1, #0]
 800b2fa:	bf5c      	itt	pl
 800b2fc:	600b      	strpl	r3, [r1, #0]
 800b2fe:	2002      	movpl	r0, #2
 800b300:	4770      	bx	lr
 800b302:	b298      	uxth	r0, r3
 800b304:	b9b0      	cbnz	r0, 800b334 <__lo0bits+0x54>
 800b306:	0c1b      	lsrs	r3, r3, #16
 800b308:	2010      	movs	r0, #16
 800b30a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b30e:	bf04      	itt	eq
 800b310:	0a1b      	lsreq	r3, r3, #8
 800b312:	3008      	addeq	r0, #8
 800b314:	071a      	lsls	r2, r3, #28
 800b316:	bf04      	itt	eq
 800b318:	091b      	lsreq	r3, r3, #4
 800b31a:	3004      	addeq	r0, #4
 800b31c:	079a      	lsls	r2, r3, #30
 800b31e:	bf04      	itt	eq
 800b320:	089b      	lsreq	r3, r3, #2
 800b322:	3002      	addeq	r0, #2
 800b324:	07da      	lsls	r2, r3, #31
 800b326:	d403      	bmi.n	800b330 <__lo0bits+0x50>
 800b328:	085b      	lsrs	r3, r3, #1
 800b32a:	f100 0001 	add.w	r0, r0, #1
 800b32e:	d005      	beq.n	800b33c <__lo0bits+0x5c>
 800b330:	600b      	str	r3, [r1, #0]
 800b332:	4770      	bx	lr
 800b334:	4610      	mov	r0, r2
 800b336:	e7e8      	b.n	800b30a <__lo0bits+0x2a>
 800b338:	2000      	movs	r0, #0
 800b33a:	4770      	bx	lr
 800b33c:	2020      	movs	r0, #32
 800b33e:	4770      	bx	lr

0800b340 <__i2b>:
 800b340:	b510      	push	{r4, lr}
 800b342:	460c      	mov	r4, r1
 800b344:	2101      	movs	r1, #1
 800b346:	f7ff feff 	bl	800b148 <_Balloc>
 800b34a:	4602      	mov	r2, r0
 800b34c:	b928      	cbnz	r0, 800b35a <__i2b+0x1a>
 800b34e:	4b05      	ldr	r3, [pc, #20]	; (800b364 <__i2b+0x24>)
 800b350:	4805      	ldr	r0, [pc, #20]	; (800b368 <__i2b+0x28>)
 800b352:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b356:	f000 fc9b 	bl	800bc90 <__assert_func>
 800b35a:	2301      	movs	r3, #1
 800b35c:	6144      	str	r4, [r0, #20]
 800b35e:	6103      	str	r3, [r0, #16]
 800b360:	bd10      	pop	{r4, pc}
 800b362:	bf00      	nop
 800b364:	0800ca23 	.word	0x0800ca23
 800b368:	0800ca34 	.word	0x0800ca34

0800b36c <__multiply>:
 800b36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b370:	4614      	mov	r4, r2
 800b372:	690a      	ldr	r2, [r1, #16]
 800b374:	6923      	ldr	r3, [r4, #16]
 800b376:	429a      	cmp	r2, r3
 800b378:	bfb8      	it	lt
 800b37a:	460b      	movlt	r3, r1
 800b37c:	460d      	mov	r5, r1
 800b37e:	bfbc      	itt	lt
 800b380:	4625      	movlt	r5, r4
 800b382:	461c      	movlt	r4, r3
 800b384:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b388:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b38c:	68ab      	ldr	r3, [r5, #8]
 800b38e:	6869      	ldr	r1, [r5, #4]
 800b390:	eb0a 0709 	add.w	r7, sl, r9
 800b394:	42bb      	cmp	r3, r7
 800b396:	b085      	sub	sp, #20
 800b398:	bfb8      	it	lt
 800b39a:	3101      	addlt	r1, #1
 800b39c:	f7ff fed4 	bl	800b148 <_Balloc>
 800b3a0:	b930      	cbnz	r0, 800b3b0 <__multiply+0x44>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	4b42      	ldr	r3, [pc, #264]	; (800b4b0 <__multiply+0x144>)
 800b3a6:	4843      	ldr	r0, [pc, #268]	; (800b4b4 <__multiply+0x148>)
 800b3a8:	f240 115d 	movw	r1, #349	; 0x15d
 800b3ac:	f000 fc70 	bl	800bc90 <__assert_func>
 800b3b0:	f100 0614 	add.w	r6, r0, #20
 800b3b4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b3b8:	4633      	mov	r3, r6
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	4543      	cmp	r3, r8
 800b3be:	d31e      	bcc.n	800b3fe <__multiply+0x92>
 800b3c0:	f105 0c14 	add.w	ip, r5, #20
 800b3c4:	f104 0314 	add.w	r3, r4, #20
 800b3c8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b3cc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b3d0:	9202      	str	r2, [sp, #8]
 800b3d2:	ebac 0205 	sub.w	r2, ip, r5
 800b3d6:	3a15      	subs	r2, #21
 800b3d8:	f022 0203 	bic.w	r2, r2, #3
 800b3dc:	3204      	adds	r2, #4
 800b3de:	f105 0115 	add.w	r1, r5, #21
 800b3e2:	458c      	cmp	ip, r1
 800b3e4:	bf38      	it	cc
 800b3e6:	2204      	movcc	r2, #4
 800b3e8:	9201      	str	r2, [sp, #4]
 800b3ea:	9a02      	ldr	r2, [sp, #8]
 800b3ec:	9303      	str	r3, [sp, #12]
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d808      	bhi.n	800b404 <__multiply+0x98>
 800b3f2:	2f00      	cmp	r7, #0
 800b3f4:	dc55      	bgt.n	800b4a2 <__multiply+0x136>
 800b3f6:	6107      	str	r7, [r0, #16]
 800b3f8:	b005      	add	sp, #20
 800b3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3fe:	f843 2b04 	str.w	r2, [r3], #4
 800b402:	e7db      	b.n	800b3bc <__multiply+0x50>
 800b404:	f8b3 a000 	ldrh.w	sl, [r3]
 800b408:	f1ba 0f00 	cmp.w	sl, #0
 800b40c:	d020      	beq.n	800b450 <__multiply+0xe4>
 800b40e:	f105 0e14 	add.w	lr, r5, #20
 800b412:	46b1      	mov	r9, r6
 800b414:	2200      	movs	r2, #0
 800b416:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b41a:	f8d9 b000 	ldr.w	fp, [r9]
 800b41e:	b2a1      	uxth	r1, r4
 800b420:	fa1f fb8b 	uxth.w	fp, fp
 800b424:	fb0a b101 	mla	r1, sl, r1, fp
 800b428:	4411      	add	r1, r2
 800b42a:	f8d9 2000 	ldr.w	r2, [r9]
 800b42e:	0c24      	lsrs	r4, r4, #16
 800b430:	0c12      	lsrs	r2, r2, #16
 800b432:	fb0a 2404 	mla	r4, sl, r4, r2
 800b436:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b43a:	b289      	uxth	r1, r1
 800b43c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b440:	45f4      	cmp	ip, lr
 800b442:	f849 1b04 	str.w	r1, [r9], #4
 800b446:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b44a:	d8e4      	bhi.n	800b416 <__multiply+0xaa>
 800b44c:	9901      	ldr	r1, [sp, #4]
 800b44e:	5072      	str	r2, [r6, r1]
 800b450:	9a03      	ldr	r2, [sp, #12]
 800b452:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b456:	3304      	adds	r3, #4
 800b458:	f1b9 0f00 	cmp.w	r9, #0
 800b45c:	d01f      	beq.n	800b49e <__multiply+0x132>
 800b45e:	6834      	ldr	r4, [r6, #0]
 800b460:	f105 0114 	add.w	r1, r5, #20
 800b464:	46b6      	mov	lr, r6
 800b466:	f04f 0a00 	mov.w	sl, #0
 800b46a:	880a      	ldrh	r2, [r1, #0]
 800b46c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b470:	fb09 b202 	mla	r2, r9, r2, fp
 800b474:	4492      	add	sl, r2
 800b476:	b2a4      	uxth	r4, r4
 800b478:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b47c:	f84e 4b04 	str.w	r4, [lr], #4
 800b480:	f851 4b04 	ldr.w	r4, [r1], #4
 800b484:	f8be 2000 	ldrh.w	r2, [lr]
 800b488:	0c24      	lsrs	r4, r4, #16
 800b48a:	fb09 2404 	mla	r4, r9, r4, r2
 800b48e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b492:	458c      	cmp	ip, r1
 800b494:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b498:	d8e7      	bhi.n	800b46a <__multiply+0xfe>
 800b49a:	9a01      	ldr	r2, [sp, #4]
 800b49c:	50b4      	str	r4, [r6, r2]
 800b49e:	3604      	adds	r6, #4
 800b4a0:	e7a3      	b.n	800b3ea <__multiply+0x7e>
 800b4a2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d1a5      	bne.n	800b3f6 <__multiply+0x8a>
 800b4aa:	3f01      	subs	r7, #1
 800b4ac:	e7a1      	b.n	800b3f2 <__multiply+0x86>
 800b4ae:	bf00      	nop
 800b4b0:	0800ca23 	.word	0x0800ca23
 800b4b4:	0800ca34 	.word	0x0800ca34

0800b4b8 <__pow5mult>:
 800b4b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4bc:	4615      	mov	r5, r2
 800b4be:	f012 0203 	ands.w	r2, r2, #3
 800b4c2:	4606      	mov	r6, r0
 800b4c4:	460f      	mov	r7, r1
 800b4c6:	d007      	beq.n	800b4d8 <__pow5mult+0x20>
 800b4c8:	4c25      	ldr	r4, [pc, #148]	; (800b560 <__pow5mult+0xa8>)
 800b4ca:	3a01      	subs	r2, #1
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b4d2:	f7ff fe9b 	bl	800b20c <__multadd>
 800b4d6:	4607      	mov	r7, r0
 800b4d8:	10ad      	asrs	r5, r5, #2
 800b4da:	d03d      	beq.n	800b558 <__pow5mult+0xa0>
 800b4dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b4de:	b97c      	cbnz	r4, 800b500 <__pow5mult+0x48>
 800b4e0:	2010      	movs	r0, #16
 800b4e2:	f7ff fe29 	bl	800b138 <malloc>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	6270      	str	r0, [r6, #36]	; 0x24
 800b4ea:	b928      	cbnz	r0, 800b4f8 <__pow5mult+0x40>
 800b4ec:	4b1d      	ldr	r3, [pc, #116]	; (800b564 <__pow5mult+0xac>)
 800b4ee:	481e      	ldr	r0, [pc, #120]	; (800b568 <__pow5mult+0xb0>)
 800b4f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b4f4:	f000 fbcc 	bl	800bc90 <__assert_func>
 800b4f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b4fc:	6004      	str	r4, [r0, #0]
 800b4fe:	60c4      	str	r4, [r0, #12]
 800b500:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b504:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b508:	b94c      	cbnz	r4, 800b51e <__pow5mult+0x66>
 800b50a:	f240 2171 	movw	r1, #625	; 0x271
 800b50e:	4630      	mov	r0, r6
 800b510:	f7ff ff16 	bl	800b340 <__i2b>
 800b514:	2300      	movs	r3, #0
 800b516:	f8c8 0008 	str.w	r0, [r8, #8]
 800b51a:	4604      	mov	r4, r0
 800b51c:	6003      	str	r3, [r0, #0]
 800b51e:	f04f 0900 	mov.w	r9, #0
 800b522:	07eb      	lsls	r3, r5, #31
 800b524:	d50a      	bpl.n	800b53c <__pow5mult+0x84>
 800b526:	4639      	mov	r1, r7
 800b528:	4622      	mov	r2, r4
 800b52a:	4630      	mov	r0, r6
 800b52c:	f7ff ff1e 	bl	800b36c <__multiply>
 800b530:	4639      	mov	r1, r7
 800b532:	4680      	mov	r8, r0
 800b534:	4630      	mov	r0, r6
 800b536:	f7ff fe47 	bl	800b1c8 <_Bfree>
 800b53a:	4647      	mov	r7, r8
 800b53c:	106d      	asrs	r5, r5, #1
 800b53e:	d00b      	beq.n	800b558 <__pow5mult+0xa0>
 800b540:	6820      	ldr	r0, [r4, #0]
 800b542:	b938      	cbnz	r0, 800b554 <__pow5mult+0x9c>
 800b544:	4622      	mov	r2, r4
 800b546:	4621      	mov	r1, r4
 800b548:	4630      	mov	r0, r6
 800b54a:	f7ff ff0f 	bl	800b36c <__multiply>
 800b54e:	6020      	str	r0, [r4, #0]
 800b550:	f8c0 9000 	str.w	r9, [r0]
 800b554:	4604      	mov	r4, r0
 800b556:	e7e4      	b.n	800b522 <__pow5mult+0x6a>
 800b558:	4638      	mov	r0, r7
 800b55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b55e:	bf00      	nop
 800b560:	0800cb88 	.word	0x0800cb88
 800b564:	0800c9ad 	.word	0x0800c9ad
 800b568:	0800ca34 	.word	0x0800ca34

0800b56c <__lshift>:
 800b56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b570:	460c      	mov	r4, r1
 800b572:	6849      	ldr	r1, [r1, #4]
 800b574:	6923      	ldr	r3, [r4, #16]
 800b576:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b57a:	68a3      	ldr	r3, [r4, #8]
 800b57c:	4607      	mov	r7, r0
 800b57e:	4691      	mov	r9, r2
 800b580:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b584:	f108 0601 	add.w	r6, r8, #1
 800b588:	42b3      	cmp	r3, r6
 800b58a:	db0b      	blt.n	800b5a4 <__lshift+0x38>
 800b58c:	4638      	mov	r0, r7
 800b58e:	f7ff fddb 	bl	800b148 <_Balloc>
 800b592:	4605      	mov	r5, r0
 800b594:	b948      	cbnz	r0, 800b5aa <__lshift+0x3e>
 800b596:	4602      	mov	r2, r0
 800b598:	4b28      	ldr	r3, [pc, #160]	; (800b63c <__lshift+0xd0>)
 800b59a:	4829      	ldr	r0, [pc, #164]	; (800b640 <__lshift+0xd4>)
 800b59c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b5a0:	f000 fb76 	bl	800bc90 <__assert_func>
 800b5a4:	3101      	adds	r1, #1
 800b5a6:	005b      	lsls	r3, r3, #1
 800b5a8:	e7ee      	b.n	800b588 <__lshift+0x1c>
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	f100 0114 	add.w	r1, r0, #20
 800b5b0:	f100 0210 	add.w	r2, r0, #16
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	4553      	cmp	r3, sl
 800b5b8:	db33      	blt.n	800b622 <__lshift+0xb6>
 800b5ba:	6920      	ldr	r0, [r4, #16]
 800b5bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b5c0:	f104 0314 	add.w	r3, r4, #20
 800b5c4:	f019 091f 	ands.w	r9, r9, #31
 800b5c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b5cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b5d0:	d02b      	beq.n	800b62a <__lshift+0xbe>
 800b5d2:	f1c9 0e20 	rsb	lr, r9, #32
 800b5d6:	468a      	mov	sl, r1
 800b5d8:	2200      	movs	r2, #0
 800b5da:	6818      	ldr	r0, [r3, #0]
 800b5dc:	fa00 f009 	lsl.w	r0, r0, r9
 800b5e0:	4302      	orrs	r2, r0
 800b5e2:	f84a 2b04 	str.w	r2, [sl], #4
 800b5e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5ea:	459c      	cmp	ip, r3
 800b5ec:	fa22 f20e 	lsr.w	r2, r2, lr
 800b5f0:	d8f3      	bhi.n	800b5da <__lshift+0x6e>
 800b5f2:	ebac 0304 	sub.w	r3, ip, r4
 800b5f6:	3b15      	subs	r3, #21
 800b5f8:	f023 0303 	bic.w	r3, r3, #3
 800b5fc:	3304      	adds	r3, #4
 800b5fe:	f104 0015 	add.w	r0, r4, #21
 800b602:	4584      	cmp	ip, r0
 800b604:	bf38      	it	cc
 800b606:	2304      	movcc	r3, #4
 800b608:	50ca      	str	r2, [r1, r3]
 800b60a:	b10a      	cbz	r2, 800b610 <__lshift+0xa4>
 800b60c:	f108 0602 	add.w	r6, r8, #2
 800b610:	3e01      	subs	r6, #1
 800b612:	4638      	mov	r0, r7
 800b614:	612e      	str	r6, [r5, #16]
 800b616:	4621      	mov	r1, r4
 800b618:	f7ff fdd6 	bl	800b1c8 <_Bfree>
 800b61c:	4628      	mov	r0, r5
 800b61e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b622:	f842 0f04 	str.w	r0, [r2, #4]!
 800b626:	3301      	adds	r3, #1
 800b628:	e7c5      	b.n	800b5b6 <__lshift+0x4a>
 800b62a:	3904      	subs	r1, #4
 800b62c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b630:	f841 2f04 	str.w	r2, [r1, #4]!
 800b634:	459c      	cmp	ip, r3
 800b636:	d8f9      	bhi.n	800b62c <__lshift+0xc0>
 800b638:	e7ea      	b.n	800b610 <__lshift+0xa4>
 800b63a:	bf00      	nop
 800b63c:	0800ca23 	.word	0x0800ca23
 800b640:	0800ca34 	.word	0x0800ca34

0800b644 <__mcmp>:
 800b644:	b530      	push	{r4, r5, lr}
 800b646:	6902      	ldr	r2, [r0, #16]
 800b648:	690c      	ldr	r4, [r1, #16]
 800b64a:	1b12      	subs	r2, r2, r4
 800b64c:	d10e      	bne.n	800b66c <__mcmp+0x28>
 800b64e:	f100 0314 	add.w	r3, r0, #20
 800b652:	3114      	adds	r1, #20
 800b654:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b658:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b65c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b660:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b664:	42a5      	cmp	r5, r4
 800b666:	d003      	beq.n	800b670 <__mcmp+0x2c>
 800b668:	d305      	bcc.n	800b676 <__mcmp+0x32>
 800b66a:	2201      	movs	r2, #1
 800b66c:	4610      	mov	r0, r2
 800b66e:	bd30      	pop	{r4, r5, pc}
 800b670:	4283      	cmp	r3, r0
 800b672:	d3f3      	bcc.n	800b65c <__mcmp+0x18>
 800b674:	e7fa      	b.n	800b66c <__mcmp+0x28>
 800b676:	f04f 32ff 	mov.w	r2, #4294967295
 800b67a:	e7f7      	b.n	800b66c <__mcmp+0x28>

0800b67c <__mdiff>:
 800b67c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b680:	460c      	mov	r4, r1
 800b682:	4606      	mov	r6, r0
 800b684:	4611      	mov	r1, r2
 800b686:	4620      	mov	r0, r4
 800b688:	4617      	mov	r7, r2
 800b68a:	f7ff ffdb 	bl	800b644 <__mcmp>
 800b68e:	1e05      	subs	r5, r0, #0
 800b690:	d110      	bne.n	800b6b4 <__mdiff+0x38>
 800b692:	4629      	mov	r1, r5
 800b694:	4630      	mov	r0, r6
 800b696:	f7ff fd57 	bl	800b148 <_Balloc>
 800b69a:	b930      	cbnz	r0, 800b6aa <__mdiff+0x2e>
 800b69c:	4b39      	ldr	r3, [pc, #228]	; (800b784 <__mdiff+0x108>)
 800b69e:	4602      	mov	r2, r0
 800b6a0:	f240 2132 	movw	r1, #562	; 0x232
 800b6a4:	4838      	ldr	r0, [pc, #224]	; (800b788 <__mdiff+0x10c>)
 800b6a6:	f000 faf3 	bl	800bc90 <__assert_func>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b6b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6b4:	bfa4      	itt	ge
 800b6b6:	463b      	movge	r3, r7
 800b6b8:	4627      	movge	r7, r4
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	6879      	ldr	r1, [r7, #4]
 800b6be:	bfa6      	itte	ge
 800b6c0:	461c      	movge	r4, r3
 800b6c2:	2500      	movge	r5, #0
 800b6c4:	2501      	movlt	r5, #1
 800b6c6:	f7ff fd3f 	bl	800b148 <_Balloc>
 800b6ca:	b920      	cbnz	r0, 800b6d6 <__mdiff+0x5a>
 800b6cc:	4b2d      	ldr	r3, [pc, #180]	; (800b784 <__mdiff+0x108>)
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b6d4:	e7e6      	b.n	800b6a4 <__mdiff+0x28>
 800b6d6:	693e      	ldr	r6, [r7, #16]
 800b6d8:	60c5      	str	r5, [r0, #12]
 800b6da:	6925      	ldr	r5, [r4, #16]
 800b6dc:	f107 0114 	add.w	r1, r7, #20
 800b6e0:	f104 0914 	add.w	r9, r4, #20
 800b6e4:	f100 0e14 	add.w	lr, r0, #20
 800b6e8:	f107 0210 	add.w	r2, r7, #16
 800b6ec:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b6f0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b6f4:	46f2      	mov	sl, lr
 800b6f6:	2700      	movs	r7, #0
 800b6f8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b6fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b700:	fa1f f883 	uxth.w	r8, r3
 800b704:	fa17 f78b 	uxtah	r7, r7, fp
 800b708:	0c1b      	lsrs	r3, r3, #16
 800b70a:	eba7 0808 	sub.w	r8, r7, r8
 800b70e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b712:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b716:	fa1f f888 	uxth.w	r8, r8
 800b71a:	141f      	asrs	r7, r3, #16
 800b71c:	454d      	cmp	r5, r9
 800b71e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b722:	f84a 3b04 	str.w	r3, [sl], #4
 800b726:	d8e7      	bhi.n	800b6f8 <__mdiff+0x7c>
 800b728:	1b2b      	subs	r3, r5, r4
 800b72a:	3b15      	subs	r3, #21
 800b72c:	f023 0303 	bic.w	r3, r3, #3
 800b730:	3304      	adds	r3, #4
 800b732:	3415      	adds	r4, #21
 800b734:	42a5      	cmp	r5, r4
 800b736:	bf38      	it	cc
 800b738:	2304      	movcc	r3, #4
 800b73a:	4419      	add	r1, r3
 800b73c:	4473      	add	r3, lr
 800b73e:	469e      	mov	lr, r3
 800b740:	460d      	mov	r5, r1
 800b742:	4565      	cmp	r5, ip
 800b744:	d30e      	bcc.n	800b764 <__mdiff+0xe8>
 800b746:	f10c 0203 	add.w	r2, ip, #3
 800b74a:	1a52      	subs	r2, r2, r1
 800b74c:	f022 0203 	bic.w	r2, r2, #3
 800b750:	3903      	subs	r1, #3
 800b752:	458c      	cmp	ip, r1
 800b754:	bf38      	it	cc
 800b756:	2200      	movcc	r2, #0
 800b758:	441a      	add	r2, r3
 800b75a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b75e:	b17b      	cbz	r3, 800b780 <__mdiff+0x104>
 800b760:	6106      	str	r6, [r0, #16]
 800b762:	e7a5      	b.n	800b6b0 <__mdiff+0x34>
 800b764:	f855 8b04 	ldr.w	r8, [r5], #4
 800b768:	fa17 f488 	uxtah	r4, r7, r8
 800b76c:	1422      	asrs	r2, r4, #16
 800b76e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b772:	b2a4      	uxth	r4, r4
 800b774:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b778:	f84e 4b04 	str.w	r4, [lr], #4
 800b77c:	1417      	asrs	r7, r2, #16
 800b77e:	e7e0      	b.n	800b742 <__mdiff+0xc6>
 800b780:	3e01      	subs	r6, #1
 800b782:	e7ea      	b.n	800b75a <__mdiff+0xde>
 800b784:	0800ca23 	.word	0x0800ca23
 800b788:	0800ca34 	.word	0x0800ca34

0800b78c <__d2b>:
 800b78c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b790:	4689      	mov	r9, r1
 800b792:	2101      	movs	r1, #1
 800b794:	ec57 6b10 	vmov	r6, r7, d0
 800b798:	4690      	mov	r8, r2
 800b79a:	f7ff fcd5 	bl	800b148 <_Balloc>
 800b79e:	4604      	mov	r4, r0
 800b7a0:	b930      	cbnz	r0, 800b7b0 <__d2b+0x24>
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	4b25      	ldr	r3, [pc, #148]	; (800b83c <__d2b+0xb0>)
 800b7a6:	4826      	ldr	r0, [pc, #152]	; (800b840 <__d2b+0xb4>)
 800b7a8:	f240 310a 	movw	r1, #778	; 0x30a
 800b7ac:	f000 fa70 	bl	800bc90 <__assert_func>
 800b7b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b7b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b7b8:	bb35      	cbnz	r5, 800b808 <__d2b+0x7c>
 800b7ba:	2e00      	cmp	r6, #0
 800b7bc:	9301      	str	r3, [sp, #4]
 800b7be:	d028      	beq.n	800b812 <__d2b+0x86>
 800b7c0:	4668      	mov	r0, sp
 800b7c2:	9600      	str	r6, [sp, #0]
 800b7c4:	f7ff fd8c 	bl	800b2e0 <__lo0bits>
 800b7c8:	9900      	ldr	r1, [sp, #0]
 800b7ca:	b300      	cbz	r0, 800b80e <__d2b+0x82>
 800b7cc:	9a01      	ldr	r2, [sp, #4]
 800b7ce:	f1c0 0320 	rsb	r3, r0, #32
 800b7d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b7d6:	430b      	orrs	r3, r1
 800b7d8:	40c2      	lsrs	r2, r0
 800b7da:	6163      	str	r3, [r4, #20]
 800b7dc:	9201      	str	r2, [sp, #4]
 800b7de:	9b01      	ldr	r3, [sp, #4]
 800b7e0:	61a3      	str	r3, [r4, #24]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	bf14      	ite	ne
 800b7e6:	2202      	movne	r2, #2
 800b7e8:	2201      	moveq	r2, #1
 800b7ea:	6122      	str	r2, [r4, #16]
 800b7ec:	b1d5      	cbz	r5, 800b824 <__d2b+0x98>
 800b7ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b7f2:	4405      	add	r5, r0
 800b7f4:	f8c9 5000 	str.w	r5, [r9]
 800b7f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b7fc:	f8c8 0000 	str.w	r0, [r8]
 800b800:	4620      	mov	r0, r4
 800b802:	b003      	add	sp, #12
 800b804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b808:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b80c:	e7d5      	b.n	800b7ba <__d2b+0x2e>
 800b80e:	6161      	str	r1, [r4, #20]
 800b810:	e7e5      	b.n	800b7de <__d2b+0x52>
 800b812:	a801      	add	r0, sp, #4
 800b814:	f7ff fd64 	bl	800b2e0 <__lo0bits>
 800b818:	9b01      	ldr	r3, [sp, #4]
 800b81a:	6163      	str	r3, [r4, #20]
 800b81c:	2201      	movs	r2, #1
 800b81e:	6122      	str	r2, [r4, #16]
 800b820:	3020      	adds	r0, #32
 800b822:	e7e3      	b.n	800b7ec <__d2b+0x60>
 800b824:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b828:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b82c:	f8c9 0000 	str.w	r0, [r9]
 800b830:	6918      	ldr	r0, [r3, #16]
 800b832:	f7ff fd35 	bl	800b2a0 <__hi0bits>
 800b836:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b83a:	e7df      	b.n	800b7fc <__d2b+0x70>
 800b83c:	0800ca23 	.word	0x0800ca23
 800b840:	0800ca34 	.word	0x0800ca34

0800b844 <_calloc_r>:
 800b844:	b513      	push	{r0, r1, r4, lr}
 800b846:	434a      	muls	r2, r1
 800b848:	4611      	mov	r1, r2
 800b84a:	9201      	str	r2, [sp, #4]
 800b84c:	f000 f85a 	bl	800b904 <_malloc_r>
 800b850:	4604      	mov	r4, r0
 800b852:	b118      	cbz	r0, 800b85c <_calloc_r+0x18>
 800b854:	9a01      	ldr	r2, [sp, #4]
 800b856:	2100      	movs	r1, #0
 800b858:	f7fe f960 	bl	8009b1c <memset>
 800b85c:	4620      	mov	r0, r4
 800b85e:	b002      	add	sp, #8
 800b860:	bd10      	pop	{r4, pc}
	...

0800b864 <_free_r>:
 800b864:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b866:	2900      	cmp	r1, #0
 800b868:	d048      	beq.n	800b8fc <_free_r+0x98>
 800b86a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b86e:	9001      	str	r0, [sp, #4]
 800b870:	2b00      	cmp	r3, #0
 800b872:	f1a1 0404 	sub.w	r4, r1, #4
 800b876:	bfb8      	it	lt
 800b878:	18e4      	addlt	r4, r4, r3
 800b87a:	f000 fa65 	bl	800bd48 <__malloc_lock>
 800b87e:	4a20      	ldr	r2, [pc, #128]	; (800b900 <_free_r+0x9c>)
 800b880:	9801      	ldr	r0, [sp, #4]
 800b882:	6813      	ldr	r3, [r2, #0]
 800b884:	4615      	mov	r5, r2
 800b886:	b933      	cbnz	r3, 800b896 <_free_r+0x32>
 800b888:	6063      	str	r3, [r4, #4]
 800b88a:	6014      	str	r4, [r2, #0]
 800b88c:	b003      	add	sp, #12
 800b88e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b892:	f000 ba5f 	b.w	800bd54 <__malloc_unlock>
 800b896:	42a3      	cmp	r3, r4
 800b898:	d90b      	bls.n	800b8b2 <_free_r+0x4e>
 800b89a:	6821      	ldr	r1, [r4, #0]
 800b89c:	1862      	adds	r2, r4, r1
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	bf04      	itt	eq
 800b8a2:	681a      	ldreq	r2, [r3, #0]
 800b8a4:	685b      	ldreq	r3, [r3, #4]
 800b8a6:	6063      	str	r3, [r4, #4]
 800b8a8:	bf04      	itt	eq
 800b8aa:	1852      	addeq	r2, r2, r1
 800b8ac:	6022      	streq	r2, [r4, #0]
 800b8ae:	602c      	str	r4, [r5, #0]
 800b8b0:	e7ec      	b.n	800b88c <_free_r+0x28>
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	b10b      	cbz	r3, 800b8bc <_free_r+0x58>
 800b8b8:	42a3      	cmp	r3, r4
 800b8ba:	d9fa      	bls.n	800b8b2 <_free_r+0x4e>
 800b8bc:	6811      	ldr	r1, [r2, #0]
 800b8be:	1855      	adds	r5, r2, r1
 800b8c0:	42a5      	cmp	r5, r4
 800b8c2:	d10b      	bne.n	800b8dc <_free_r+0x78>
 800b8c4:	6824      	ldr	r4, [r4, #0]
 800b8c6:	4421      	add	r1, r4
 800b8c8:	1854      	adds	r4, r2, r1
 800b8ca:	42a3      	cmp	r3, r4
 800b8cc:	6011      	str	r1, [r2, #0]
 800b8ce:	d1dd      	bne.n	800b88c <_free_r+0x28>
 800b8d0:	681c      	ldr	r4, [r3, #0]
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	6053      	str	r3, [r2, #4]
 800b8d6:	4421      	add	r1, r4
 800b8d8:	6011      	str	r1, [r2, #0]
 800b8da:	e7d7      	b.n	800b88c <_free_r+0x28>
 800b8dc:	d902      	bls.n	800b8e4 <_free_r+0x80>
 800b8de:	230c      	movs	r3, #12
 800b8e0:	6003      	str	r3, [r0, #0]
 800b8e2:	e7d3      	b.n	800b88c <_free_r+0x28>
 800b8e4:	6825      	ldr	r5, [r4, #0]
 800b8e6:	1961      	adds	r1, r4, r5
 800b8e8:	428b      	cmp	r3, r1
 800b8ea:	bf04      	itt	eq
 800b8ec:	6819      	ldreq	r1, [r3, #0]
 800b8ee:	685b      	ldreq	r3, [r3, #4]
 800b8f0:	6063      	str	r3, [r4, #4]
 800b8f2:	bf04      	itt	eq
 800b8f4:	1949      	addeq	r1, r1, r5
 800b8f6:	6021      	streq	r1, [r4, #0]
 800b8f8:	6054      	str	r4, [r2, #4]
 800b8fa:	e7c7      	b.n	800b88c <_free_r+0x28>
 800b8fc:	b003      	add	sp, #12
 800b8fe:	bd30      	pop	{r4, r5, pc}
 800b900:	20008438 	.word	0x20008438

0800b904 <_malloc_r>:
 800b904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b906:	1ccd      	adds	r5, r1, #3
 800b908:	f025 0503 	bic.w	r5, r5, #3
 800b90c:	3508      	adds	r5, #8
 800b90e:	2d0c      	cmp	r5, #12
 800b910:	bf38      	it	cc
 800b912:	250c      	movcc	r5, #12
 800b914:	2d00      	cmp	r5, #0
 800b916:	4606      	mov	r6, r0
 800b918:	db01      	blt.n	800b91e <_malloc_r+0x1a>
 800b91a:	42a9      	cmp	r1, r5
 800b91c:	d903      	bls.n	800b926 <_malloc_r+0x22>
 800b91e:	230c      	movs	r3, #12
 800b920:	6033      	str	r3, [r6, #0]
 800b922:	2000      	movs	r0, #0
 800b924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b926:	f000 fa0f 	bl	800bd48 <__malloc_lock>
 800b92a:	4921      	ldr	r1, [pc, #132]	; (800b9b0 <_malloc_r+0xac>)
 800b92c:	680a      	ldr	r2, [r1, #0]
 800b92e:	4614      	mov	r4, r2
 800b930:	b99c      	cbnz	r4, 800b95a <_malloc_r+0x56>
 800b932:	4f20      	ldr	r7, [pc, #128]	; (800b9b4 <_malloc_r+0xb0>)
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	b923      	cbnz	r3, 800b942 <_malloc_r+0x3e>
 800b938:	4621      	mov	r1, r4
 800b93a:	4630      	mov	r0, r6
 800b93c:	f000 f998 	bl	800bc70 <_sbrk_r>
 800b940:	6038      	str	r0, [r7, #0]
 800b942:	4629      	mov	r1, r5
 800b944:	4630      	mov	r0, r6
 800b946:	f000 f993 	bl	800bc70 <_sbrk_r>
 800b94a:	1c43      	adds	r3, r0, #1
 800b94c:	d123      	bne.n	800b996 <_malloc_r+0x92>
 800b94e:	230c      	movs	r3, #12
 800b950:	6033      	str	r3, [r6, #0]
 800b952:	4630      	mov	r0, r6
 800b954:	f000 f9fe 	bl	800bd54 <__malloc_unlock>
 800b958:	e7e3      	b.n	800b922 <_malloc_r+0x1e>
 800b95a:	6823      	ldr	r3, [r4, #0]
 800b95c:	1b5b      	subs	r3, r3, r5
 800b95e:	d417      	bmi.n	800b990 <_malloc_r+0x8c>
 800b960:	2b0b      	cmp	r3, #11
 800b962:	d903      	bls.n	800b96c <_malloc_r+0x68>
 800b964:	6023      	str	r3, [r4, #0]
 800b966:	441c      	add	r4, r3
 800b968:	6025      	str	r5, [r4, #0]
 800b96a:	e004      	b.n	800b976 <_malloc_r+0x72>
 800b96c:	6863      	ldr	r3, [r4, #4]
 800b96e:	42a2      	cmp	r2, r4
 800b970:	bf0c      	ite	eq
 800b972:	600b      	streq	r3, [r1, #0]
 800b974:	6053      	strne	r3, [r2, #4]
 800b976:	4630      	mov	r0, r6
 800b978:	f000 f9ec 	bl	800bd54 <__malloc_unlock>
 800b97c:	f104 000b 	add.w	r0, r4, #11
 800b980:	1d23      	adds	r3, r4, #4
 800b982:	f020 0007 	bic.w	r0, r0, #7
 800b986:	1ac2      	subs	r2, r0, r3
 800b988:	d0cc      	beq.n	800b924 <_malloc_r+0x20>
 800b98a:	1a1b      	subs	r3, r3, r0
 800b98c:	50a3      	str	r3, [r4, r2]
 800b98e:	e7c9      	b.n	800b924 <_malloc_r+0x20>
 800b990:	4622      	mov	r2, r4
 800b992:	6864      	ldr	r4, [r4, #4]
 800b994:	e7cc      	b.n	800b930 <_malloc_r+0x2c>
 800b996:	1cc4      	adds	r4, r0, #3
 800b998:	f024 0403 	bic.w	r4, r4, #3
 800b99c:	42a0      	cmp	r0, r4
 800b99e:	d0e3      	beq.n	800b968 <_malloc_r+0x64>
 800b9a0:	1a21      	subs	r1, r4, r0
 800b9a2:	4630      	mov	r0, r6
 800b9a4:	f000 f964 	bl	800bc70 <_sbrk_r>
 800b9a8:	3001      	adds	r0, #1
 800b9aa:	d1dd      	bne.n	800b968 <_malloc_r+0x64>
 800b9ac:	e7cf      	b.n	800b94e <_malloc_r+0x4a>
 800b9ae:	bf00      	nop
 800b9b0:	20008438 	.word	0x20008438
 800b9b4:	2000843c 	.word	0x2000843c

0800b9b8 <__ssputs_r>:
 800b9b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9bc:	688e      	ldr	r6, [r1, #8]
 800b9be:	429e      	cmp	r6, r3
 800b9c0:	4682      	mov	sl, r0
 800b9c2:	460c      	mov	r4, r1
 800b9c4:	4690      	mov	r8, r2
 800b9c6:	461f      	mov	r7, r3
 800b9c8:	d838      	bhi.n	800ba3c <__ssputs_r+0x84>
 800b9ca:	898a      	ldrh	r2, [r1, #12]
 800b9cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b9d0:	d032      	beq.n	800ba38 <__ssputs_r+0x80>
 800b9d2:	6825      	ldr	r5, [r4, #0]
 800b9d4:	6909      	ldr	r1, [r1, #16]
 800b9d6:	eba5 0901 	sub.w	r9, r5, r1
 800b9da:	6965      	ldr	r5, [r4, #20]
 800b9dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b9e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	444b      	add	r3, r9
 800b9e8:	106d      	asrs	r5, r5, #1
 800b9ea:	429d      	cmp	r5, r3
 800b9ec:	bf38      	it	cc
 800b9ee:	461d      	movcc	r5, r3
 800b9f0:	0553      	lsls	r3, r2, #21
 800b9f2:	d531      	bpl.n	800ba58 <__ssputs_r+0xa0>
 800b9f4:	4629      	mov	r1, r5
 800b9f6:	f7ff ff85 	bl	800b904 <_malloc_r>
 800b9fa:	4606      	mov	r6, r0
 800b9fc:	b950      	cbnz	r0, 800ba14 <__ssputs_r+0x5c>
 800b9fe:	230c      	movs	r3, #12
 800ba00:	f8ca 3000 	str.w	r3, [sl]
 800ba04:	89a3      	ldrh	r3, [r4, #12]
 800ba06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba0a:	81a3      	strh	r3, [r4, #12]
 800ba0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba14:	6921      	ldr	r1, [r4, #16]
 800ba16:	464a      	mov	r2, r9
 800ba18:	f7fe f872 	bl	8009b00 <memcpy>
 800ba1c:	89a3      	ldrh	r3, [r4, #12]
 800ba1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba26:	81a3      	strh	r3, [r4, #12]
 800ba28:	6126      	str	r6, [r4, #16]
 800ba2a:	6165      	str	r5, [r4, #20]
 800ba2c:	444e      	add	r6, r9
 800ba2e:	eba5 0509 	sub.w	r5, r5, r9
 800ba32:	6026      	str	r6, [r4, #0]
 800ba34:	60a5      	str	r5, [r4, #8]
 800ba36:	463e      	mov	r6, r7
 800ba38:	42be      	cmp	r6, r7
 800ba3a:	d900      	bls.n	800ba3e <__ssputs_r+0x86>
 800ba3c:	463e      	mov	r6, r7
 800ba3e:	4632      	mov	r2, r6
 800ba40:	6820      	ldr	r0, [r4, #0]
 800ba42:	4641      	mov	r1, r8
 800ba44:	f000 f966 	bl	800bd14 <memmove>
 800ba48:	68a3      	ldr	r3, [r4, #8]
 800ba4a:	6822      	ldr	r2, [r4, #0]
 800ba4c:	1b9b      	subs	r3, r3, r6
 800ba4e:	4432      	add	r2, r6
 800ba50:	60a3      	str	r3, [r4, #8]
 800ba52:	6022      	str	r2, [r4, #0]
 800ba54:	2000      	movs	r0, #0
 800ba56:	e7db      	b.n	800ba10 <__ssputs_r+0x58>
 800ba58:	462a      	mov	r2, r5
 800ba5a:	f000 f981 	bl	800bd60 <_realloc_r>
 800ba5e:	4606      	mov	r6, r0
 800ba60:	2800      	cmp	r0, #0
 800ba62:	d1e1      	bne.n	800ba28 <__ssputs_r+0x70>
 800ba64:	6921      	ldr	r1, [r4, #16]
 800ba66:	4650      	mov	r0, sl
 800ba68:	f7ff fefc 	bl	800b864 <_free_r>
 800ba6c:	e7c7      	b.n	800b9fe <__ssputs_r+0x46>
	...

0800ba70 <_svfiprintf_r>:
 800ba70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba74:	4698      	mov	r8, r3
 800ba76:	898b      	ldrh	r3, [r1, #12]
 800ba78:	061b      	lsls	r3, r3, #24
 800ba7a:	b09d      	sub	sp, #116	; 0x74
 800ba7c:	4607      	mov	r7, r0
 800ba7e:	460d      	mov	r5, r1
 800ba80:	4614      	mov	r4, r2
 800ba82:	d50e      	bpl.n	800baa2 <_svfiprintf_r+0x32>
 800ba84:	690b      	ldr	r3, [r1, #16]
 800ba86:	b963      	cbnz	r3, 800baa2 <_svfiprintf_r+0x32>
 800ba88:	2140      	movs	r1, #64	; 0x40
 800ba8a:	f7ff ff3b 	bl	800b904 <_malloc_r>
 800ba8e:	6028      	str	r0, [r5, #0]
 800ba90:	6128      	str	r0, [r5, #16]
 800ba92:	b920      	cbnz	r0, 800ba9e <_svfiprintf_r+0x2e>
 800ba94:	230c      	movs	r3, #12
 800ba96:	603b      	str	r3, [r7, #0]
 800ba98:	f04f 30ff 	mov.w	r0, #4294967295
 800ba9c:	e0d1      	b.n	800bc42 <_svfiprintf_r+0x1d2>
 800ba9e:	2340      	movs	r3, #64	; 0x40
 800baa0:	616b      	str	r3, [r5, #20]
 800baa2:	2300      	movs	r3, #0
 800baa4:	9309      	str	r3, [sp, #36]	; 0x24
 800baa6:	2320      	movs	r3, #32
 800baa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800baac:	f8cd 800c 	str.w	r8, [sp, #12]
 800bab0:	2330      	movs	r3, #48	; 0x30
 800bab2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bc5c <_svfiprintf_r+0x1ec>
 800bab6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800baba:	f04f 0901 	mov.w	r9, #1
 800babe:	4623      	mov	r3, r4
 800bac0:	469a      	mov	sl, r3
 800bac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bac6:	b10a      	cbz	r2, 800bacc <_svfiprintf_r+0x5c>
 800bac8:	2a25      	cmp	r2, #37	; 0x25
 800baca:	d1f9      	bne.n	800bac0 <_svfiprintf_r+0x50>
 800bacc:	ebba 0b04 	subs.w	fp, sl, r4
 800bad0:	d00b      	beq.n	800baea <_svfiprintf_r+0x7a>
 800bad2:	465b      	mov	r3, fp
 800bad4:	4622      	mov	r2, r4
 800bad6:	4629      	mov	r1, r5
 800bad8:	4638      	mov	r0, r7
 800bada:	f7ff ff6d 	bl	800b9b8 <__ssputs_r>
 800bade:	3001      	adds	r0, #1
 800bae0:	f000 80aa 	beq.w	800bc38 <_svfiprintf_r+0x1c8>
 800bae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bae6:	445a      	add	r2, fp
 800bae8:	9209      	str	r2, [sp, #36]	; 0x24
 800baea:	f89a 3000 	ldrb.w	r3, [sl]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	f000 80a2 	beq.w	800bc38 <_svfiprintf_r+0x1c8>
 800baf4:	2300      	movs	r3, #0
 800baf6:	f04f 32ff 	mov.w	r2, #4294967295
 800bafa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bafe:	f10a 0a01 	add.w	sl, sl, #1
 800bb02:	9304      	str	r3, [sp, #16]
 800bb04:	9307      	str	r3, [sp, #28]
 800bb06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb0a:	931a      	str	r3, [sp, #104]	; 0x68
 800bb0c:	4654      	mov	r4, sl
 800bb0e:	2205      	movs	r2, #5
 800bb10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb14:	4851      	ldr	r0, [pc, #324]	; (800bc5c <_svfiprintf_r+0x1ec>)
 800bb16:	f7f4 fb63 	bl	80001e0 <memchr>
 800bb1a:	9a04      	ldr	r2, [sp, #16]
 800bb1c:	b9d8      	cbnz	r0, 800bb56 <_svfiprintf_r+0xe6>
 800bb1e:	06d0      	lsls	r0, r2, #27
 800bb20:	bf44      	itt	mi
 800bb22:	2320      	movmi	r3, #32
 800bb24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb28:	0711      	lsls	r1, r2, #28
 800bb2a:	bf44      	itt	mi
 800bb2c:	232b      	movmi	r3, #43	; 0x2b
 800bb2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb32:	f89a 3000 	ldrb.w	r3, [sl]
 800bb36:	2b2a      	cmp	r3, #42	; 0x2a
 800bb38:	d015      	beq.n	800bb66 <_svfiprintf_r+0xf6>
 800bb3a:	9a07      	ldr	r2, [sp, #28]
 800bb3c:	4654      	mov	r4, sl
 800bb3e:	2000      	movs	r0, #0
 800bb40:	f04f 0c0a 	mov.w	ip, #10
 800bb44:	4621      	mov	r1, r4
 800bb46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb4a:	3b30      	subs	r3, #48	; 0x30
 800bb4c:	2b09      	cmp	r3, #9
 800bb4e:	d94e      	bls.n	800bbee <_svfiprintf_r+0x17e>
 800bb50:	b1b0      	cbz	r0, 800bb80 <_svfiprintf_r+0x110>
 800bb52:	9207      	str	r2, [sp, #28]
 800bb54:	e014      	b.n	800bb80 <_svfiprintf_r+0x110>
 800bb56:	eba0 0308 	sub.w	r3, r0, r8
 800bb5a:	fa09 f303 	lsl.w	r3, r9, r3
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	9304      	str	r3, [sp, #16]
 800bb62:	46a2      	mov	sl, r4
 800bb64:	e7d2      	b.n	800bb0c <_svfiprintf_r+0x9c>
 800bb66:	9b03      	ldr	r3, [sp, #12]
 800bb68:	1d19      	adds	r1, r3, #4
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	9103      	str	r1, [sp, #12]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	bfbb      	ittet	lt
 800bb72:	425b      	neglt	r3, r3
 800bb74:	f042 0202 	orrlt.w	r2, r2, #2
 800bb78:	9307      	strge	r3, [sp, #28]
 800bb7a:	9307      	strlt	r3, [sp, #28]
 800bb7c:	bfb8      	it	lt
 800bb7e:	9204      	strlt	r2, [sp, #16]
 800bb80:	7823      	ldrb	r3, [r4, #0]
 800bb82:	2b2e      	cmp	r3, #46	; 0x2e
 800bb84:	d10c      	bne.n	800bba0 <_svfiprintf_r+0x130>
 800bb86:	7863      	ldrb	r3, [r4, #1]
 800bb88:	2b2a      	cmp	r3, #42	; 0x2a
 800bb8a:	d135      	bne.n	800bbf8 <_svfiprintf_r+0x188>
 800bb8c:	9b03      	ldr	r3, [sp, #12]
 800bb8e:	1d1a      	adds	r2, r3, #4
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	9203      	str	r2, [sp, #12]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	bfb8      	it	lt
 800bb98:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb9c:	3402      	adds	r4, #2
 800bb9e:	9305      	str	r3, [sp, #20]
 800bba0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bc6c <_svfiprintf_r+0x1fc>
 800bba4:	7821      	ldrb	r1, [r4, #0]
 800bba6:	2203      	movs	r2, #3
 800bba8:	4650      	mov	r0, sl
 800bbaa:	f7f4 fb19 	bl	80001e0 <memchr>
 800bbae:	b140      	cbz	r0, 800bbc2 <_svfiprintf_r+0x152>
 800bbb0:	2340      	movs	r3, #64	; 0x40
 800bbb2:	eba0 000a 	sub.w	r0, r0, sl
 800bbb6:	fa03 f000 	lsl.w	r0, r3, r0
 800bbba:	9b04      	ldr	r3, [sp, #16]
 800bbbc:	4303      	orrs	r3, r0
 800bbbe:	3401      	adds	r4, #1
 800bbc0:	9304      	str	r3, [sp, #16]
 800bbc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbc6:	4826      	ldr	r0, [pc, #152]	; (800bc60 <_svfiprintf_r+0x1f0>)
 800bbc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbcc:	2206      	movs	r2, #6
 800bbce:	f7f4 fb07 	bl	80001e0 <memchr>
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	d038      	beq.n	800bc48 <_svfiprintf_r+0x1d8>
 800bbd6:	4b23      	ldr	r3, [pc, #140]	; (800bc64 <_svfiprintf_r+0x1f4>)
 800bbd8:	bb1b      	cbnz	r3, 800bc22 <_svfiprintf_r+0x1b2>
 800bbda:	9b03      	ldr	r3, [sp, #12]
 800bbdc:	3307      	adds	r3, #7
 800bbde:	f023 0307 	bic.w	r3, r3, #7
 800bbe2:	3308      	adds	r3, #8
 800bbe4:	9303      	str	r3, [sp, #12]
 800bbe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbe8:	4433      	add	r3, r6
 800bbea:	9309      	str	r3, [sp, #36]	; 0x24
 800bbec:	e767      	b.n	800babe <_svfiprintf_r+0x4e>
 800bbee:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbf2:	460c      	mov	r4, r1
 800bbf4:	2001      	movs	r0, #1
 800bbf6:	e7a5      	b.n	800bb44 <_svfiprintf_r+0xd4>
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	3401      	adds	r4, #1
 800bbfc:	9305      	str	r3, [sp, #20]
 800bbfe:	4619      	mov	r1, r3
 800bc00:	f04f 0c0a 	mov.w	ip, #10
 800bc04:	4620      	mov	r0, r4
 800bc06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc0a:	3a30      	subs	r2, #48	; 0x30
 800bc0c:	2a09      	cmp	r2, #9
 800bc0e:	d903      	bls.n	800bc18 <_svfiprintf_r+0x1a8>
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d0c5      	beq.n	800bba0 <_svfiprintf_r+0x130>
 800bc14:	9105      	str	r1, [sp, #20]
 800bc16:	e7c3      	b.n	800bba0 <_svfiprintf_r+0x130>
 800bc18:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc1c:	4604      	mov	r4, r0
 800bc1e:	2301      	movs	r3, #1
 800bc20:	e7f0      	b.n	800bc04 <_svfiprintf_r+0x194>
 800bc22:	ab03      	add	r3, sp, #12
 800bc24:	9300      	str	r3, [sp, #0]
 800bc26:	462a      	mov	r2, r5
 800bc28:	4b0f      	ldr	r3, [pc, #60]	; (800bc68 <_svfiprintf_r+0x1f8>)
 800bc2a:	a904      	add	r1, sp, #16
 800bc2c:	4638      	mov	r0, r7
 800bc2e:	f7fe f81d 	bl	8009c6c <_printf_float>
 800bc32:	1c42      	adds	r2, r0, #1
 800bc34:	4606      	mov	r6, r0
 800bc36:	d1d6      	bne.n	800bbe6 <_svfiprintf_r+0x176>
 800bc38:	89ab      	ldrh	r3, [r5, #12]
 800bc3a:	065b      	lsls	r3, r3, #25
 800bc3c:	f53f af2c 	bmi.w	800ba98 <_svfiprintf_r+0x28>
 800bc40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc42:	b01d      	add	sp, #116	; 0x74
 800bc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc48:	ab03      	add	r3, sp, #12
 800bc4a:	9300      	str	r3, [sp, #0]
 800bc4c:	462a      	mov	r2, r5
 800bc4e:	4b06      	ldr	r3, [pc, #24]	; (800bc68 <_svfiprintf_r+0x1f8>)
 800bc50:	a904      	add	r1, sp, #16
 800bc52:	4638      	mov	r0, r7
 800bc54:	f7fe faae 	bl	800a1b4 <_printf_i>
 800bc58:	e7eb      	b.n	800bc32 <_svfiprintf_r+0x1c2>
 800bc5a:	bf00      	nop
 800bc5c:	0800cb94 	.word	0x0800cb94
 800bc60:	0800cb9e 	.word	0x0800cb9e
 800bc64:	08009c6d 	.word	0x08009c6d
 800bc68:	0800b9b9 	.word	0x0800b9b9
 800bc6c:	0800cb9a 	.word	0x0800cb9a

0800bc70 <_sbrk_r>:
 800bc70:	b538      	push	{r3, r4, r5, lr}
 800bc72:	4d06      	ldr	r5, [pc, #24]	; (800bc8c <_sbrk_r+0x1c>)
 800bc74:	2300      	movs	r3, #0
 800bc76:	4604      	mov	r4, r0
 800bc78:	4608      	mov	r0, r1
 800bc7a:	602b      	str	r3, [r5, #0]
 800bc7c:	f7f6 f8be 	bl	8001dfc <_sbrk>
 800bc80:	1c43      	adds	r3, r0, #1
 800bc82:	d102      	bne.n	800bc8a <_sbrk_r+0x1a>
 800bc84:	682b      	ldr	r3, [r5, #0]
 800bc86:	b103      	cbz	r3, 800bc8a <_sbrk_r+0x1a>
 800bc88:	6023      	str	r3, [r4, #0]
 800bc8a:	bd38      	pop	{r3, r4, r5, pc}
 800bc8c:	20008760 	.word	0x20008760

0800bc90 <__assert_func>:
 800bc90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc92:	4614      	mov	r4, r2
 800bc94:	461a      	mov	r2, r3
 800bc96:	4b09      	ldr	r3, [pc, #36]	; (800bcbc <__assert_func+0x2c>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4605      	mov	r5, r0
 800bc9c:	68d8      	ldr	r0, [r3, #12]
 800bc9e:	b14c      	cbz	r4, 800bcb4 <__assert_func+0x24>
 800bca0:	4b07      	ldr	r3, [pc, #28]	; (800bcc0 <__assert_func+0x30>)
 800bca2:	9100      	str	r1, [sp, #0]
 800bca4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bca8:	4906      	ldr	r1, [pc, #24]	; (800bcc4 <__assert_func+0x34>)
 800bcaa:	462b      	mov	r3, r5
 800bcac:	f000 f80e 	bl	800bccc <fiprintf>
 800bcb0:	f000 faa4 	bl	800c1fc <abort>
 800bcb4:	4b04      	ldr	r3, [pc, #16]	; (800bcc8 <__assert_func+0x38>)
 800bcb6:	461c      	mov	r4, r3
 800bcb8:	e7f3      	b.n	800bca2 <__assert_func+0x12>
 800bcba:	bf00      	nop
 800bcbc:	20000014 	.word	0x20000014
 800bcc0:	0800cba5 	.word	0x0800cba5
 800bcc4:	0800cbb2 	.word	0x0800cbb2
 800bcc8:	0800cbe0 	.word	0x0800cbe0

0800bccc <fiprintf>:
 800bccc:	b40e      	push	{r1, r2, r3}
 800bcce:	b503      	push	{r0, r1, lr}
 800bcd0:	4601      	mov	r1, r0
 800bcd2:	ab03      	add	r3, sp, #12
 800bcd4:	4805      	ldr	r0, [pc, #20]	; (800bcec <fiprintf+0x20>)
 800bcd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcda:	6800      	ldr	r0, [r0, #0]
 800bcdc:	9301      	str	r3, [sp, #4]
 800bcde:	f000 f88f 	bl	800be00 <_vfiprintf_r>
 800bce2:	b002      	add	sp, #8
 800bce4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bce8:	b003      	add	sp, #12
 800bcea:	4770      	bx	lr
 800bcec:	20000014 	.word	0x20000014

0800bcf0 <__ascii_mbtowc>:
 800bcf0:	b082      	sub	sp, #8
 800bcf2:	b901      	cbnz	r1, 800bcf6 <__ascii_mbtowc+0x6>
 800bcf4:	a901      	add	r1, sp, #4
 800bcf6:	b142      	cbz	r2, 800bd0a <__ascii_mbtowc+0x1a>
 800bcf8:	b14b      	cbz	r3, 800bd0e <__ascii_mbtowc+0x1e>
 800bcfa:	7813      	ldrb	r3, [r2, #0]
 800bcfc:	600b      	str	r3, [r1, #0]
 800bcfe:	7812      	ldrb	r2, [r2, #0]
 800bd00:	1e10      	subs	r0, r2, #0
 800bd02:	bf18      	it	ne
 800bd04:	2001      	movne	r0, #1
 800bd06:	b002      	add	sp, #8
 800bd08:	4770      	bx	lr
 800bd0a:	4610      	mov	r0, r2
 800bd0c:	e7fb      	b.n	800bd06 <__ascii_mbtowc+0x16>
 800bd0e:	f06f 0001 	mvn.w	r0, #1
 800bd12:	e7f8      	b.n	800bd06 <__ascii_mbtowc+0x16>

0800bd14 <memmove>:
 800bd14:	4288      	cmp	r0, r1
 800bd16:	b510      	push	{r4, lr}
 800bd18:	eb01 0402 	add.w	r4, r1, r2
 800bd1c:	d902      	bls.n	800bd24 <memmove+0x10>
 800bd1e:	4284      	cmp	r4, r0
 800bd20:	4623      	mov	r3, r4
 800bd22:	d807      	bhi.n	800bd34 <memmove+0x20>
 800bd24:	1e43      	subs	r3, r0, #1
 800bd26:	42a1      	cmp	r1, r4
 800bd28:	d008      	beq.n	800bd3c <memmove+0x28>
 800bd2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd32:	e7f8      	b.n	800bd26 <memmove+0x12>
 800bd34:	4402      	add	r2, r0
 800bd36:	4601      	mov	r1, r0
 800bd38:	428a      	cmp	r2, r1
 800bd3a:	d100      	bne.n	800bd3e <memmove+0x2a>
 800bd3c:	bd10      	pop	{r4, pc}
 800bd3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd46:	e7f7      	b.n	800bd38 <memmove+0x24>

0800bd48 <__malloc_lock>:
 800bd48:	4801      	ldr	r0, [pc, #4]	; (800bd50 <__malloc_lock+0x8>)
 800bd4a:	f000 bc17 	b.w	800c57c <__retarget_lock_acquire_recursive>
 800bd4e:	bf00      	nop
 800bd50:	20008768 	.word	0x20008768

0800bd54 <__malloc_unlock>:
 800bd54:	4801      	ldr	r0, [pc, #4]	; (800bd5c <__malloc_unlock+0x8>)
 800bd56:	f000 bc12 	b.w	800c57e <__retarget_lock_release_recursive>
 800bd5a:	bf00      	nop
 800bd5c:	20008768 	.word	0x20008768

0800bd60 <_realloc_r>:
 800bd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd62:	4607      	mov	r7, r0
 800bd64:	4614      	mov	r4, r2
 800bd66:	460e      	mov	r6, r1
 800bd68:	b921      	cbnz	r1, 800bd74 <_realloc_r+0x14>
 800bd6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bd6e:	4611      	mov	r1, r2
 800bd70:	f7ff bdc8 	b.w	800b904 <_malloc_r>
 800bd74:	b922      	cbnz	r2, 800bd80 <_realloc_r+0x20>
 800bd76:	f7ff fd75 	bl	800b864 <_free_r>
 800bd7a:	4625      	mov	r5, r4
 800bd7c:	4628      	mov	r0, r5
 800bd7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd80:	f000 fc62 	bl	800c648 <_malloc_usable_size_r>
 800bd84:	42a0      	cmp	r0, r4
 800bd86:	d20f      	bcs.n	800bda8 <_realloc_r+0x48>
 800bd88:	4621      	mov	r1, r4
 800bd8a:	4638      	mov	r0, r7
 800bd8c:	f7ff fdba 	bl	800b904 <_malloc_r>
 800bd90:	4605      	mov	r5, r0
 800bd92:	2800      	cmp	r0, #0
 800bd94:	d0f2      	beq.n	800bd7c <_realloc_r+0x1c>
 800bd96:	4631      	mov	r1, r6
 800bd98:	4622      	mov	r2, r4
 800bd9a:	f7fd feb1 	bl	8009b00 <memcpy>
 800bd9e:	4631      	mov	r1, r6
 800bda0:	4638      	mov	r0, r7
 800bda2:	f7ff fd5f 	bl	800b864 <_free_r>
 800bda6:	e7e9      	b.n	800bd7c <_realloc_r+0x1c>
 800bda8:	4635      	mov	r5, r6
 800bdaa:	e7e7      	b.n	800bd7c <_realloc_r+0x1c>

0800bdac <__sfputc_r>:
 800bdac:	6893      	ldr	r3, [r2, #8]
 800bdae:	3b01      	subs	r3, #1
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	b410      	push	{r4}
 800bdb4:	6093      	str	r3, [r2, #8]
 800bdb6:	da08      	bge.n	800bdca <__sfputc_r+0x1e>
 800bdb8:	6994      	ldr	r4, [r2, #24]
 800bdba:	42a3      	cmp	r3, r4
 800bdbc:	db01      	blt.n	800bdc2 <__sfputc_r+0x16>
 800bdbe:	290a      	cmp	r1, #10
 800bdc0:	d103      	bne.n	800bdca <__sfputc_r+0x1e>
 800bdc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdc6:	f000 b94b 	b.w	800c060 <__swbuf_r>
 800bdca:	6813      	ldr	r3, [r2, #0]
 800bdcc:	1c58      	adds	r0, r3, #1
 800bdce:	6010      	str	r0, [r2, #0]
 800bdd0:	7019      	strb	r1, [r3, #0]
 800bdd2:	4608      	mov	r0, r1
 800bdd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdd8:	4770      	bx	lr

0800bdda <__sfputs_r>:
 800bdda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bddc:	4606      	mov	r6, r0
 800bdde:	460f      	mov	r7, r1
 800bde0:	4614      	mov	r4, r2
 800bde2:	18d5      	adds	r5, r2, r3
 800bde4:	42ac      	cmp	r4, r5
 800bde6:	d101      	bne.n	800bdec <__sfputs_r+0x12>
 800bde8:	2000      	movs	r0, #0
 800bdea:	e007      	b.n	800bdfc <__sfputs_r+0x22>
 800bdec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdf0:	463a      	mov	r2, r7
 800bdf2:	4630      	mov	r0, r6
 800bdf4:	f7ff ffda 	bl	800bdac <__sfputc_r>
 800bdf8:	1c43      	adds	r3, r0, #1
 800bdfa:	d1f3      	bne.n	800bde4 <__sfputs_r+0xa>
 800bdfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800be00 <_vfiprintf_r>:
 800be00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be04:	460d      	mov	r5, r1
 800be06:	b09d      	sub	sp, #116	; 0x74
 800be08:	4614      	mov	r4, r2
 800be0a:	4698      	mov	r8, r3
 800be0c:	4606      	mov	r6, r0
 800be0e:	b118      	cbz	r0, 800be18 <_vfiprintf_r+0x18>
 800be10:	6983      	ldr	r3, [r0, #24]
 800be12:	b90b      	cbnz	r3, 800be18 <_vfiprintf_r+0x18>
 800be14:	f000 fb14 	bl	800c440 <__sinit>
 800be18:	4b89      	ldr	r3, [pc, #548]	; (800c040 <_vfiprintf_r+0x240>)
 800be1a:	429d      	cmp	r5, r3
 800be1c:	d11b      	bne.n	800be56 <_vfiprintf_r+0x56>
 800be1e:	6875      	ldr	r5, [r6, #4]
 800be20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be22:	07d9      	lsls	r1, r3, #31
 800be24:	d405      	bmi.n	800be32 <_vfiprintf_r+0x32>
 800be26:	89ab      	ldrh	r3, [r5, #12]
 800be28:	059a      	lsls	r2, r3, #22
 800be2a:	d402      	bmi.n	800be32 <_vfiprintf_r+0x32>
 800be2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be2e:	f000 fba5 	bl	800c57c <__retarget_lock_acquire_recursive>
 800be32:	89ab      	ldrh	r3, [r5, #12]
 800be34:	071b      	lsls	r3, r3, #28
 800be36:	d501      	bpl.n	800be3c <_vfiprintf_r+0x3c>
 800be38:	692b      	ldr	r3, [r5, #16]
 800be3a:	b9eb      	cbnz	r3, 800be78 <_vfiprintf_r+0x78>
 800be3c:	4629      	mov	r1, r5
 800be3e:	4630      	mov	r0, r6
 800be40:	f000 f96e 	bl	800c120 <__swsetup_r>
 800be44:	b1c0      	cbz	r0, 800be78 <_vfiprintf_r+0x78>
 800be46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be48:	07dc      	lsls	r4, r3, #31
 800be4a:	d50e      	bpl.n	800be6a <_vfiprintf_r+0x6a>
 800be4c:	f04f 30ff 	mov.w	r0, #4294967295
 800be50:	b01d      	add	sp, #116	; 0x74
 800be52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be56:	4b7b      	ldr	r3, [pc, #492]	; (800c044 <_vfiprintf_r+0x244>)
 800be58:	429d      	cmp	r5, r3
 800be5a:	d101      	bne.n	800be60 <_vfiprintf_r+0x60>
 800be5c:	68b5      	ldr	r5, [r6, #8]
 800be5e:	e7df      	b.n	800be20 <_vfiprintf_r+0x20>
 800be60:	4b79      	ldr	r3, [pc, #484]	; (800c048 <_vfiprintf_r+0x248>)
 800be62:	429d      	cmp	r5, r3
 800be64:	bf08      	it	eq
 800be66:	68f5      	ldreq	r5, [r6, #12]
 800be68:	e7da      	b.n	800be20 <_vfiprintf_r+0x20>
 800be6a:	89ab      	ldrh	r3, [r5, #12]
 800be6c:	0598      	lsls	r0, r3, #22
 800be6e:	d4ed      	bmi.n	800be4c <_vfiprintf_r+0x4c>
 800be70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be72:	f000 fb84 	bl	800c57e <__retarget_lock_release_recursive>
 800be76:	e7e9      	b.n	800be4c <_vfiprintf_r+0x4c>
 800be78:	2300      	movs	r3, #0
 800be7a:	9309      	str	r3, [sp, #36]	; 0x24
 800be7c:	2320      	movs	r3, #32
 800be7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be82:	f8cd 800c 	str.w	r8, [sp, #12]
 800be86:	2330      	movs	r3, #48	; 0x30
 800be88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c04c <_vfiprintf_r+0x24c>
 800be8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be90:	f04f 0901 	mov.w	r9, #1
 800be94:	4623      	mov	r3, r4
 800be96:	469a      	mov	sl, r3
 800be98:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be9c:	b10a      	cbz	r2, 800bea2 <_vfiprintf_r+0xa2>
 800be9e:	2a25      	cmp	r2, #37	; 0x25
 800bea0:	d1f9      	bne.n	800be96 <_vfiprintf_r+0x96>
 800bea2:	ebba 0b04 	subs.w	fp, sl, r4
 800bea6:	d00b      	beq.n	800bec0 <_vfiprintf_r+0xc0>
 800bea8:	465b      	mov	r3, fp
 800beaa:	4622      	mov	r2, r4
 800beac:	4629      	mov	r1, r5
 800beae:	4630      	mov	r0, r6
 800beb0:	f7ff ff93 	bl	800bdda <__sfputs_r>
 800beb4:	3001      	adds	r0, #1
 800beb6:	f000 80aa 	beq.w	800c00e <_vfiprintf_r+0x20e>
 800beba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bebc:	445a      	add	r2, fp
 800bebe:	9209      	str	r2, [sp, #36]	; 0x24
 800bec0:	f89a 3000 	ldrb.w	r3, [sl]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	f000 80a2 	beq.w	800c00e <_vfiprintf_r+0x20e>
 800beca:	2300      	movs	r3, #0
 800becc:	f04f 32ff 	mov.w	r2, #4294967295
 800bed0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bed4:	f10a 0a01 	add.w	sl, sl, #1
 800bed8:	9304      	str	r3, [sp, #16]
 800beda:	9307      	str	r3, [sp, #28]
 800bedc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bee0:	931a      	str	r3, [sp, #104]	; 0x68
 800bee2:	4654      	mov	r4, sl
 800bee4:	2205      	movs	r2, #5
 800bee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beea:	4858      	ldr	r0, [pc, #352]	; (800c04c <_vfiprintf_r+0x24c>)
 800beec:	f7f4 f978 	bl	80001e0 <memchr>
 800bef0:	9a04      	ldr	r2, [sp, #16]
 800bef2:	b9d8      	cbnz	r0, 800bf2c <_vfiprintf_r+0x12c>
 800bef4:	06d1      	lsls	r1, r2, #27
 800bef6:	bf44      	itt	mi
 800bef8:	2320      	movmi	r3, #32
 800befa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800befe:	0713      	lsls	r3, r2, #28
 800bf00:	bf44      	itt	mi
 800bf02:	232b      	movmi	r3, #43	; 0x2b
 800bf04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf08:	f89a 3000 	ldrb.w	r3, [sl]
 800bf0c:	2b2a      	cmp	r3, #42	; 0x2a
 800bf0e:	d015      	beq.n	800bf3c <_vfiprintf_r+0x13c>
 800bf10:	9a07      	ldr	r2, [sp, #28]
 800bf12:	4654      	mov	r4, sl
 800bf14:	2000      	movs	r0, #0
 800bf16:	f04f 0c0a 	mov.w	ip, #10
 800bf1a:	4621      	mov	r1, r4
 800bf1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf20:	3b30      	subs	r3, #48	; 0x30
 800bf22:	2b09      	cmp	r3, #9
 800bf24:	d94e      	bls.n	800bfc4 <_vfiprintf_r+0x1c4>
 800bf26:	b1b0      	cbz	r0, 800bf56 <_vfiprintf_r+0x156>
 800bf28:	9207      	str	r2, [sp, #28]
 800bf2a:	e014      	b.n	800bf56 <_vfiprintf_r+0x156>
 800bf2c:	eba0 0308 	sub.w	r3, r0, r8
 800bf30:	fa09 f303 	lsl.w	r3, r9, r3
 800bf34:	4313      	orrs	r3, r2
 800bf36:	9304      	str	r3, [sp, #16]
 800bf38:	46a2      	mov	sl, r4
 800bf3a:	e7d2      	b.n	800bee2 <_vfiprintf_r+0xe2>
 800bf3c:	9b03      	ldr	r3, [sp, #12]
 800bf3e:	1d19      	adds	r1, r3, #4
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	9103      	str	r1, [sp, #12]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	bfbb      	ittet	lt
 800bf48:	425b      	neglt	r3, r3
 800bf4a:	f042 0202 	orrlt.w	r2, r2, #2
 800bf4e:	9307      	strge	r3, [sp, #28]
 800bf50:	9307      	strlt	r3, [sp, #28]
 800bf52:	bfb8      	it	lt
 800bf54:	9204      	strlt	r2, [sp, #16]
 800bf56:	7823      	ldrb	r3, [r4, #0]
 800bf58:	2b2e      	cmp	r3, #46	; 0x2e
 800bf5a:	d10c      	bne.n	800bf76 <_vfiprintf_r+0x176>
 800bf5c:	7863      	ldrb	r3, [r4, #1]
 800bf5e:	2b2a      	cmp	r3, #42	; 0x2a
 800bf60:	d135      	bne.n	800bfce <_vfiprintf_r+0x1ce>
 800bf62:	9b03      	ldr	r3, [sp, #12]
 800bf64:	1d1a      	adds	r2, r3, #4
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	9203      	str	r2, [sp, #12]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	bfb8      	it	lt
 800bf6e:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf72:	3402      	adds	r4, #2
 800bf74:	9305      	str	r3, [sp, #20]
 800bf76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c05c <_vfiprintf_r+0x25c>
 800bf7a:	7821      	ldrb	r1, [r4, #0]
 800bf7c:	2203      	movs	r2, #3
 800bf7e:	4650      	mov	r0, sl
 800bf80:	f7f4 f92e 	bl	80001e0 <memchr>
 800bf84:	b140      	cbz	r0, 800bf98 <_vfiprintf_r+0x198>
 800bf86:	2340      	movs	r3, #64	; 0x40
 800bf88:	eba0 000a 	sub.w	r0, r0, sl
 800bf8c:	fa03 f000 	lsl.w	r0, r3, r0
 800bf90:	9b04      	ldr	r3, [sp, #16]
 800bf92:	4303      	orrs	r3, r0
 800bf94:	3401      	adds	r4, #1
 800bf96:	9304      	str	r3, [sp, #16]
 800bf98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf9c:	482c      	ldr	r0, [pc, #176]	; (800c050 <_vfiprintf_r+0x250>)
 800bf9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bfa2:	2206      	movs	r2, #6
 800bfa4:	f7f4 f91c 	bl	80001e0 <memchr>
 800bfa8:	2800      	cmp	r0, #0
 800bfaa:	d03f      	beq.n	800c02c <_vfiprintf_r+0x22c>
 800bfac:	4b29      	ldr	r3, [pc, #164]	; (800c054 <_vfiprintf_r+0x254>)
 800bfae:	bb1b      	cbnz	r3, 800bff8 <_vfiprintf_r+0x1f8>
 800bfb0:	9b03      	ldr	r3, [sp, #12]
 800bfb2:	3307      	adds	r3, #7
 800bfb4:	f023 0307 	bic.w	r3, r3, #7
 800bfb8:	3308      	adds	r3, #8
 800bfba:	9303      	str	r3, [sp, #12]
 800bfbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfbe:	443b      	add	r3, r7
 800bfc0:	9309      	str	r3, [sp, #36]	; 0x24
 800bfc2:	e767      	b.n	800be94 <_vfiprintf_r+0x94>
 800bfc4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfc8:	460c      	mov	r4, r1
 800bfca:	2001      	movs	r0, #1
 800bfcc:	e7a5      	b.n	800bf1a <_vfiprintf_r+0x11a>
 800bfce:	2300      	movs	r3, #0
 800bfd0:	3401      	adds	r4, #1
 800bfd2:	9305      	str	r3, [sp, #20]
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	f04f 0c0a 	mov.w	ip, #10
 800bfda:	4620      	mov	r0, r4
 800bfdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfe0:	3a30      	subs	r2, #48	; 0x30
 800bfe2:	2a09      	cmp	r2, #9
 800bfe4:	d903      	bls.n	800bfee <_vfiprintf_r+0x1ee>
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d0c5      	beq.n	800bf76 <_vfiprintf_r+0x176>
 800bfea:	9105      	str	r1, [sp, #20]
 800bfec:	e7c3      	b.n	800bf76 <_vfiprintf_r+0x176>
 800bfee:	fb0c 2101 	mla	r1, ip, r1, r2
 800bff2:	4604      	mov	r4, r0
 800bff4:	2301      	movs	r3, #1
 800bff6:	e7f0      	b.n	800bfda <_vfiprintf_r+0x1da>
 800bff8:	ab03      	add	r3, sp, #12
 800bffa:	9300      	str	r3, [sp, #0]
 800bffc:	462a      	mov	r2, r5
 800bffe:	4b16      	ldr	r3, [pc, #88]	; (800c058 <_vfiprintf_r+0x258>)
 800c000:	a904      	add	r1, sp, #16
 800c002:	4630      	mov	r0, r6
 800c004:	f7fd fe32 	bl	8009c6c <_printf_float>
 800c008:	4607      	mov	r7, r0
 800c00a:	1c78      	adds	r0, r7, #1
 800c00c:	d1d6      	bne.n	800bfbc <_vfiprintf_r+0x1bc>
 800c00e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c010:	07d9      	lsls	r1, r3, #31
 800c012:	d405      	bmi.n	800c020 <_vfiprintf_r+0x220>
 800c014:	89ab      	ldrh	r3, [r5, #12]
 800c016:	059a      	lsls	r2, r3, #22
 800c018:	d402      	bmi.n	800c020 <_vfiprintf_r+0x220>
 800c01a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c01c:	f000 faaf 	bl	800c57e <__retarget_lock_release_recursive>
 800c020:	89ab      	ldrh	r3, [r5, #12]
 800c022:	065b      	lsls	r3, r3, #25
 800c024:	f53f af12 	bmi.w	800be4c <_vfiprintf_r+0x4c>
 800c028:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c02a:	e711      	b.n	800be50 <_vfiprintf_r+0x50>
 800c02c:	ab03      	add	r3, sp, #12
 800c02e:	9300      	str	r3, [sp, #0]
 800c030:	462a      	mov	r2, r5
 800c032:	4b09      	ldr	r3, [pc, #36]	; (800c058 <_vfiprintf_r+0x258>)
 800c034:	a904      	add	r1, sp, #16
 800c036:	4630      	mov	r0, r6
 800c038:	f7fe f8bc 	bl	800a1b4 <_printf_i>
 800c03c:	e7e4      	b.n	800c008 <_vfiprintf_r+0x208>
 800c03e:	bf00      	nop
 800c040:	0800cd0c 	.word	0x0800cd0c
 800c044:	0800cd2c 	.word	0x0800cd2c
 800c048:	0800ccec 	.word	0x0800ccec
 800c04c:	0800cb94 	.word	0x0800cb94
 800c050:	0800cb9e 	.word	0x0800cb9e
 800c054:	08009c6d 	.word	0x08009c6d
 800c058:	0800bddb 	.word	0x0800bddb
 800c05c:	0800cb9a 	.word	0x0800cb9a

0800c060 <__swbuf_r>:
 800c060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c062:	460e      	mov	r6, r1
 800c064:	4614      	mov	r4, r2
 800c066:	4605      	mov	r5, r0
 800c068:	b118      	cbz	r0, 800c072 <__swbuf_r+0x12>
 800c06a:	6983      	ldr	r3, [r0, #24]
 800c06c:	b90b      	cbnz	r3, 800c072 <__swbuf_r+0x12>
 800c06e:	f000 f9e7 	bl	800c440 <__sinit>
 800c072:	4b21      	ldr	r3, [pc, #132]	; (800c0f8 <__swbuf_r+0x98>)
 800c074:	429c      	cmp	r4, r3
 800c076:	d12b      	bne.n	800c0d0 <__swbuf_r+0x70>
 800c078:	686c      	ldr	r4, [r5, #4]
 800c07a:	69a3      	ldr	r3, [r4, #24]
 800c07c:	60a3      	str	r3, [r4, #8]
 800c07e:	89a3      	ldrh	r3, [r4, #12]
 800c080:	071a      	lsls	r2, r3, #28
 800c082:	d52f      	bpl.n	800c0e4 <__swbuf_r+0x84>
 800c084:	6923      	ldr	r3, [r4, #16]
 800c086:	b36b      	cbz	r3, 800c0e4 <__swbuf_r+0x84>
 800c088:	6923      	ldr	r3, [r4, #16]
 800c08a:	6820      	ldr	r0, [r4, #0]
 800c08c:	1ac0      	subs	r0, r0, r3
 800c08e:	6963      	ldr	r3, [r4, #20]
 800c090:	b2f6      	uxtb	r6, r6
 800c092:	4283      	cmp	r3, r0
 800c094:	4637      	mov	r7, r6
 800c096:	dc04      	bgt.n	800c0a2 <__swbuf_r+0x42>
 800c098:	4621      	mov	r1, r4
 800c09a:	4628      	mov	r0, r5
 800c09c:	f000 f93c 	bl	800c318 <_fflush_r>
 800c0a0:	bb30      	cbnz	r0, 800c0f0 <__swbuf_r+0x90>
 800c0a2:	68a3      	ldr	r3, [r4, #8]
 800c0a4:	3b01      	subs	r3, #1
 800c0a6:	60a3      	str	r3, [r4, #8]
 800c0a8:	6823      	ldr	r3, [r4, #0]
 800c0aa:	1c5a      	adds	r2, r3, #1
 800c0ac:	6022      	str	r2, [r4, #0]
 800c0ae:	701e      	strb	r6, [r3, #0]
 800c0b0:	6963      	ldr	r3, [r4, #20]
 800c0b2:	3001      	adds	r0, #1
 800c0b4:	4283      	cmp	r3, r0
 800c0b6:	d004      	beq.n	800c0c2 <__swbuf_r+0x62>
 800c0b8:	89a3      	ldrh	r3, [r4, #12]
 800c0ba:	07db      	lsls	r3, r3, #31
 800c0bc:	d506      	bpl.n	800c0cc <__swbuf_r+0x6c>
 800c0be:	2e0a      	cmp	r6, #10
 800c0c0:	d104      	bne.n	800c0cc <__swbuf_r+0x6c>
 800c0c2:	4621      	mov	r1, r4
 800c0c4:	4628      	mov	r0, r5
 800c0c6:	f000 f927 	bl	800c318 <_fflush_r>
 800c0ca:	b988      	cbnz	r0, 800c0f0 <__swbuf_r+0x90>
 800c0cc:	4638      	mov	r0, r7
 800c0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0d0:	4b0a      	ldr	r3, [pc, #40]	; (800c0fc <__swbuf_r+0x9c>)
 800c0d2:	429c      	cmp	r4, r3
 800c0d4:	d101      	bne.n	800c0da <__swbuf_r+0x7a>
 800c0d6:	68ac      	ldr	r4, [r5, #8]
 800c0d8:	e7cf      	b.n	800c07a <__swbuf_r+0x1a>
 800c0da:	4b09      	ldr	r3, [pc, #36]	; (800c100 <__swbuf_r+0xa0>)
 800c0dc:	429c      	cmp	r4, r3
 800c0de:	bf08      	it	eq
 800c0e0:	68ec      	ldreq	r4, [r5, #12]
 800c0e2:	e7ca      	b.n	800c07a <__swbuf_r+0x1a>
 800c0e4:	4621      	mov	r1, r4
 800c0e6:	4628      	mov	r0, r5
 800c0e8:	f000 f81a 	bl	800c120 <__swsetup_r>
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	d0cb      	beq.n	800c088 <__swbuf_r+0x28>
 800c0f0:	f04f 37ff 	mov.w	r7, #4294967295
 800c0f4:	e7ea      	b.n	800c0cc <__swbuf_r+0x6c>
 800c0f6:	bf00      	nop
 800c0f8:	0800cd0c 	.word	0x0800cd0c
 800c0fc:	0800cd2c 	.word	0x0800cd2c
 800c100:	0800ccec 	.word	0x0800ccec

0800c104 <__ascii_wctomb>:
 800c104:	b149      	cbz	r1, 800c11a <__ascii_wctomb+0x16>
 800c106:	2aff      	cmp	r2, #255	; 0xff
 800c108:	bf85      	ittet	hi
 800c10a:	238a      	movhi	r3, #138	; 0x8a
 800c10c:	6003      	strhi	r3, [r0, #0]
 800c10e:	700a      	strbls	r2, [r1, #0]
 800c110:	f04f 30ff 	movhi.w	r0, #4294967295
 800c114:	bf98      	it	ls
 800c116:	2001      	movls	r0, #1
 800c118:	4770      	bx	lr
 800c11a:	4608      	mov	r0, r1
 800c11c:	4770      	bx	lr
	...

0800c120 <__swsetup_r>:
 800c120:	4b32      	ldr	r3, [pc, #200]	; (800c1ec <__swsetup_r+0xcc>)
 800c122:	b570      	push	{r4, r5, r6, lr}
 800c124:	681d      	ldr	r5, [r3, #0]
 800c126:	4606      	mov	r6, r0
 800c128:	460c      	mov	r4, r1
 800c12a:	b125      	cbz	r5, 800c136 <__swsetup_r+0x16>
 800c12c:	69ab      	ldr	r3, [r5, #24]
 800c12e:	b913      	cbnz	r3, 800c136 <__swsetup_r+0x16>
 800c130:	4628      	mov	r0, r5
 800c132:	f000 f985 	bl	800c440 <__sinit>
 800c136:	4b2e      	ldr	r3, [pc, #184]	; (800c1f0 <__swsetup_r+0xd0>)
 800c138:	429c      	cmp	r4, r3
 800c13a:	d10f      	bne.n	800c15c <__swsetup_r+0x3c>
 800c13c:	686c      	ldr	r4, [r5, #4]
 800c13e:	89a3      	ldrh	r3, [r4, #12]
 800c140:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c144:	0719      	lsls	r1, r3, #28
 800c146:	d42c      	bmi.n	800c1a2 <__swsetup_r+0x82>
 800c148:	06dd      	lsls	r5, r3, #27
 800c14a:	d411      	bmi.n	800c170 <__swsetup_r+0x50>
 800c14c:	2309      	movs	r3, #9
 800c14e:	6033      	str	r3, [r6, #0]
 800c150:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c154:	81a3      	strh	r3, [r4, #12]
 800c156:	f04f 30ff 	mov.w	r0, #4294967295
 800c15a:	e03e      	b.n	800c1da <__swsetup_r+0xba>
 800c15c:	4b25      	ldr	r3, [pc, #148]	; (800c1f4 <__swsetup_r+0xd4>)
 800c15e:	429c      	cmp	r4, r3
 800c160:	d101      	bne.n	800c166 <__swsetup_r+0x46>
 800c162:	68ac      	ldr	r4, [r5, #8]
 800c164:	e7eb      	b.n	800c13e <__swsetup_r+0x1e>
 800c166:	4b24      	ldr	r3, [pc, #144]	; (800c1f8 <__swsetup_r+0xd8>)
 800c168:	429c      	cmp	r4, r3
 800c16a:	bf08      	it	eq
 800c16c:	68ec      	ldreq	r4, [r5, #12]
 800c16e:	e7e6      	b.n	800c13e <__swsetup_r+0x1e>
 800c170:	0758      	lsls	r0, r3, #29
 800c172:	d512      	bpl.n	800c19a <__swsetup_r+0x7a>
 800c174:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c176:	b141      	cbz	r1, 800c18a <__swsetup_r+0x6a>
 800c178:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c17c:	4299      	cmp	r1, r3
 800c17e:	d002      	beq.n	800c186 <__swsetup_r+0x66>
 800c180:	4630      	mov	r0, r6
 800c182:	f7ff fb6f 	bl	800b864 <_free_r>
 800c186:	2300      	movs	r3, #0
 800c188:	6363      	str	r3, [r4, #52]	; 0x34
 800c18a:	89a3      	ldrh	r3, [r4, #12]
 800c18c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c190:	81a3      	strh	r3, [r4, #12]
 800c192:	2300      	movs	r3, #0
 800c194:	6063      	str	r3, [r4, #4]
 800c196:	6923      	ldr	r3, [r4, #16]
 800c198:	6023      	str	r3, [r4, #0]
 800c19a:	89a3      	ldrh	r3, [r4, #12]
 800c19c:	f043 0308 	orr.w	r3, r3, #8
 800c1a0:	81a3      	strh	r3, [r4, #12]
 800c1a2:	6923      	ldr	r3, [r4, #16]
 800c1a4:	b94b      	cbnz	r3, 800c1ba <__swsetup_r+0x9a>
 800c1a6:	89a3      	ldrh	r3, [r4, #12]
 800c1a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c1ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1b0:	d003      	beq.n	800c1ba <__swsetup_r+0x9a>
 800c1b2:	4621      	mov	r1, r4
 800c1b4:	4630      	mov	r0, r6
 800c1b6:	f000 fa07 	bl	800c5c8 <__smakebuf_r>
 800c1ba:	89a0      	ldrh	r0, [r4, #12]
 800c1bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c1c0:	f010 0301 	ands.w	r3, r0, #1
 800c1c4:	d00a      	beq.n	800c1dc <__swsetup_r+0xbc>
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	60a3      	str	r3, [r4, #8]
 800c1ca:	6963      	ldr	r3, [r4, #20]
 800c1cc:	425b      	negs	r3, r3
 800c1ce:	61a3      	str	r3, [r4, #24]
 800c1d0:	6923      	ldr	r3, [r4, #16]
 800c1d2:	b943      	cbnz	r3, 800c1e6 <__swsetup_r+0xc6>
 800c1d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c1d8:	d1ba      	bne.n	800c150 <__swsetup_r+0x30>
 800c1da:	bd70      	pop	{r4, r5, r6, pc}
 800c1dc:	0781      	lsls	r1, r0, #30
 800c1de:	bf58      	it	pl
 800c1e0:	6963      	ldrpl	r3, [r4, #20]
 800c1e2:	60a3      	str	r3, [r4, #8]
 800c1e4:	e7f4      	b.n	800c1d0 <__swsetup_r+0xb0>
 800c1e6:	2000      	movs	r0, #0
 800c1e8:	e7f7      	b.n	800c1da <__swsetup_r+0xba>
 800c1ea:	bf00      	nop
 800c1ec:	20000014 	.word	0x20000014
 800c1f0:	0800cd0c 	.word	0x0800cd0c
 800c1f4:	0800cd2c 	.word	0x0800cd2c
 800c1f8:	0800ccec 	.word	0x0800ccec

0800c1fc <abort>:
 800c1fc:	b508      	push	{r3, lr}
 800c1fe:	2006      	movs	r0, #6
 800c200:	f000 fa52 	bl	800c6a8 <raise>
 800c204:	2001      	movs	r0, #1
 800c206:	f7f5 fd81 	bl	8001d0c <_exit>
	...

0800c20c <__sflush_r>:
 800c20c:	898a      	ldrh	r2, [r1, #12]
 800c20e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c212:	4605      	mov	r5, r0
 800c214:	0710      	lsls	r0, r2, #28
 800c216:	460c      	mov	r4, r1
 800c218:	d458      	bmi.n	800c2cc <__sflush_r+0xc0>
 800c21a:	684b      	ldr	r3, [r1, #4]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	dc05      	bgt.n	800c22c <__sflush_r+0x20>
 800c220:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c222:	2b00      	cmp	r3, #0
 800c224:	dc02      	bgt.n	800c22c <__sflush_r+0x20>
 800c226:	2000      	movs	r0, #0
 800c228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c22c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c22e:	2e00      	cmp	r6, #0
 800c230:	d0f9      	beq.n	800c226 <__sflush_r+0x1a>
 800c232:	2300      	movs	r3, #0
 800c234:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c238:	682f      	ldr	r7, [r5, #0]
 800c23a:	602b      	str	r3, [r5, #0]
 800c23c:	d032      	beq.n	800c2a4 <__sflush_r+0x98>
 800c23e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c240:	89a3      	ldrh	r3, [r4, #12]
 800c242:	075a      	lsls	r2, r3, #29
 800c244:	d505      	bpl.n	800c252 <__sflush_r+0x46>
 800c246:	6863      	ldr	r3, [r4, #4]
 800c248:	1ac0      	subs	r0, r0, r3
 800c24a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c24c:	b10b      	cbz	r3, 800c252 <__sflush_r+0x46>
 800c24e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c250:	1ac0      	subs	r0, r0, r3
 800c252:	2300      	movs	r3, #0
 800c254:	4602      	mov	r2, r0
 800c256:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c258:	6a21      	ldr	r1, [r4, #32]
 800c25a:	4628      	mov	r0, r5
 800c25c:	47b0      	blx	r6
 800c25e:	1c43      	adds	r3, r0, #1
 800c260:	89a3      	ldrh	r3, [r4, #12]
 800c262:	d106      	bne.n	800c272 <__sflush_r+0x66>
 800c264:	6829      	ldr	r1, [r5, #0]
 800c266:	291d      	cmp	r1, #29
 800c268:	d82c      	bhi.n	800c2c4 <__sflush_r+0xb8>
 800c26a:	4a2a      	ldr	r2, [pc, #168]	; (800c314 <__sflush_r+0x108>)
 800c26c:	40ca      	lsrs	r2, r1
 800c26e:	07d6      	lsls	r6, r2, #31
 800c270:	d528      	bpl.n	800c2c4 <__sflush_r+0xb8>
 800c272:	2200      	movs	r2, #0
 800c274:	6062      	str	r2, [r4, #4]
 800c276:	04d9      	lsls	r1, r3, #19
 800c278:	6922      	ldr	r2, [r4, #16]
 800c27a:	6022      	str	r2, [r4, #0]
 800c27c:	d504      	bpl.n	800c288 <__sflush_r+0x7c>
 800c27e:	1c42      	adds	r2, r0, #1
 800c280:	d101      	bne.n	800c286 <__sflush_r+0x7a>
 800c282:	682b      	ldr	r3, [r5, #0]
 800c284:	b903      	cbnz	r3, 800c288 <__sflush_r+0x7c>
 800c286:	6560      	str	r0, [r4, #84]	; 0x54
 800c288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c28a:	602f      	str	r7, [r5, #0]
 800c28c:	2900      	cmp	r1, #0
 800c28e:	d0ca      	beq.n	800c226 <__sflush_r+0x1a>
 800c290:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c294:	4299      	cmp	r1, r3
 800c296:	d002      	beq.n	800c29e <__sflush_r+0x92>
 800c298:	4628      	mov	r0, r5
 800c29a:	f7ff fae3 	bl	800b864 <_free_r>
 800c29e:	2000      	movs	r0, #0
 800c2a0:	6360      	str	r0, [r4, #52]	; 0x34
 800c2a2:	e7c1      	b.n	800c228 <__sflush_r+0x1c>
 800c2a4:	6a21      	ldr	r1, [r4, #32]
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	4628      	mov	r0, r5
 800c2aa:	47b0      	blx	r6
 800c2ac:	1c41      	adds	r1, r0, #1
 800c2ae:	d1c7      	bne.n	800c240 <__sflush_r+0x34>
 800c2b0:	682b      	ldr	r3, [r5, #0]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d0c4      	beq.n	800c240 <__sflush_r+0x34>
 800c2b6:	2b1d      	cmp	r3, #29
 800c2b8:	d001      	beq.n	800c2be <__sflush_r+0xb2>
 800c2ba:	2b16      	cmp	r3, #22
 800c2bc:	d101      	bne.n	800c2c2 <__sflush_r+0xb6>
 800c2be:	602f      	str	r7, [r5, #0]
 800c2c0:	e7b1      	b.n	800c226 <__sflush_r+0x1a>
 800c2c2:	89a3      	ldrh	r3, [r4, #12]
 800c2c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2c8:	81a3      	strh	r3, [r4, #12]
 800c2ca:	e7ad      	b.n	800c228 <__sflush_r+0x1c>
 800c2cc:	690f      	ldr	r7, [r1, #16]
 800c2ce:	2f00      	cmp	r7, #0
 800c2d0:	d0a9      	beq.n	800c226 <__sflush_r+0x1a>
 800c2d2:	0793      	lsls	r3, r2, #30
 800c2d4:	680e      	ldr	r6, [r1, #0]
 800c2d6:	bf08      	it	eq
 800c2d8:	694b      	ldreq	r3, [r1, #20]
 800c2da:	600f      	str	r7, [r1, #0]
 800c2dc:	bf18      	it	ne
 800c2de:	2300      	movne	r3, #0
 800c2e0:	eba6 0807 	sub.w	r8, r6, r7
 800c2e4:	608b      	str	r3, [r1, #8]
 800c2e6:	f1b8 0f00 	cmp.w	r8, #0
 800c2ea:	dd9c      	ble.n	800c226 <__sflush_r+0x1a>
 800c2ec:	6a21      	ldr	r1, [r4, #32]
 800c2ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c2f0:	4643      	mov	r3, r8
 800c2f2:	463a      	mov	r2, r7
 800c2f4:	4628      	mov	r0, r5
 800c2f6:	47b0      	blx	r6
 800c2f8:	2800      	cmp	r0, #0
 800c2fa:	dc06      	bgt.n	800c30a <__sflush_r+0xfe>
 800c2fc:	89a3      	ldrh	r3, [r4, #12]
 800c2fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c302:	81a3      	strh	r3, [r4, #12]
 800c304:	f04f 30ff 	mov.w	r0, #4294967295
 800c308:	e78e      	b.n	800c228 <__sflush_r+0x1c>
 800c30a:	4407      	add	r7, r0
 800c30c:	eba8 0800 	sub.w	r8, r8, r0
 800c310:	e7e9      	b.n	800c2e6 <__sflush_r+0xda>
 800c312:	bf00      	nop
 800c314:	20400001 	.word	0x20400001

0800c318 <_fflush_r>:
 800c318:	b538      	push	{r3, r4, r5, lr}
 800c31a:	690b      	ldr	r3, [r1, #16]
 800c31c:	4605      	mov	r5, r0
 800c31e:	460c      	mov	r4, r1
 800c320:	b913      	cbnz	r3, 800c328 <_fflush_r+0x10>
 800c322:	2500      	movs	r5, #0
 800c324:	4628      	mov	r0, r5
 800c326:	bd38      	pop	{r3, r4, r5, pc}
 800c328:	b118      	cbz	r0, 800c332 <_fflush_r+0x1a>
 800c32a:	6983      	ldr	r3, [r0, #24]
 800c32c:	b90b      	cbnz	r3, 800c332 <_fflush_r+0x1a>
 800c32e:	f000 f887 	bl	800c440 <__sinit>
 800c332:	4b14      	ldr	r3, [pc, #80]	; (800c384 <_fflush_r+0x6c>)
 800c334:	429c      	cmp	r4, r3
 800c336:	d11b      	bne.n	800c370 <_fflush_r+0x58>
 800c338:	686c      	ldr	r4, [r5, #4]
 800c33a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d0ef      	beq.n	800c322 <_fflush_r+0xa>
 800c342:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c344:	07d0      	lsls	r0, r2, #31
 800c346:	d404      	bmi.n	800c352 <_fflush_r+0x3a>
 800c348:	0599      	lsls	r1, r3, #22
 800c34a:	d402      	bmi.n	800c352 <_fflush_r+0x3a>
 800c34c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c34e:	f000 f915 	bl	800c57c <__retarget_lock_acquire_recursive>
 800c352:	4628      	mov	r0, r5
 800c354:	4621      	mov	r1, r4
 800c356:	f7ff ff59 	bl	800c20c <__sflush_r>
 800c35a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c35c:	07da      	lsls	r2, r3, #31
 800c35e:	4605      	mov	r5, r0
 800c360:	d4e0      	bmi.n	800c324 <_fflush_r+0xc>
 800c362:	89a3      	ldrh	r3, [r4, #12]
 800c364:	059b      	lsls	r3, r3, #22
 800c366:	d4dd      	bmi.n	800c324 <_fflush_r+0xc>
 800c368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c36a:	f000 f908 	bl	800c57e <__retarget_lock_release_recursive>
 800c36e:	e7d9      	b.n	800c324 <_fflush_r+0xc>
 800c370:	4b05      	ldr	r3, [pc, #20]	; (800c388 <_fflush_r+0x70>)
 800c372:	429c      	cmp	r4, r3
 800c374:	d101      	bne.n	800c37a <_fflush_r+0x62>
 800c376:	68ac      	ldr	r4, [r5, #8]
 800c378:	e7df      	b.n	800c33a <_fflush_r+0x22>
 800c37a:	4b04      	ldr	r3, [pc, #16]	; (800c38c <_fflush_r+0x74>)
 800c37c:	429c      	cmp	r4, r3
 800c37e:	bf08      	it	eq
 800c380:	68ec      	ldreq	r4, [r5, #12]
 800c382:	e7da      	b.n	800c33a <_fflush_r+0x22>
 800c384:	0800cd0c 	.word	0x0800cd0c
 800c388:	0800cd2c 	.word	0x0800cd2c
 800c38c:	0800ccec 	.word	0x0800ccec

0800c390 <std>:
 800c390:	2300      	movs	r3, #0
 800c392:	b510      	push	{r4, lr}
 800c394:	4604      	mov	r4, r0
 800c396:	e9c0 3300 	strd	r3, r3, [r0]
 800c39a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c39e:	6083      	str	r3, [r0, #8]
 800c3a0:	8181      	strh	r1, [r0, #12]
 800c3a2:	6643      	str	r3, [r0, #100]	; 0x64
 800c3a4:	81c2      	strh	r2, [r0, #14]
 800c3a6:	6183      	str	r3, [r0, #24]
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	2208      	movs	r2, #8
 800c3ac:	305c      	adds	r0, #92	; 0x5c
 800c3ae:	f7fd fbb5 	bl	8009b1c <memset>
 800c3b2:	4b05      	ldr	r3, [pc, #20]	; (800c3c8 <std+0x38>)
 800c3b4:	6263      	str	r3, [r4, #36]	; 0x24
 800c3b6:	4b05      	ldr	r3, [pc, #20]	; (800c3cc <std+0x3c>)
 800c3b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800c3ba:	4b05      	ldr	r3, [pc, #20]	; (800c3d0 <std+0x40>)
 800c3bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c3be:	4b05      	ldr	r3, [pc, #20]	; (800c3d4 <std+0x44>)
 800c3c0:	6224      	str	r4, [r4, #32]
 800c3c2:	6323      	str	r3, [r4, #48]	; 0x30
 800c3c4:	bd10      	pop	{r4, pc}
 800c3c6:	bf00      	nop
 800c3c8:	0800c6e1 	.word	0x0800c6e1
 800c3cc:	0800c703 	.word	0x0800c703
 800c3d0:	0800c73b 	.word	0x0800c73b
 800c3d4:	0800c75f 	.word	0x0800c75f

0800c3d8 <_cleanup_r>:
 800c3d8:	4901      	ldr	r1, [pc, #4]	; (800c3e0 <_cleanup_r+0x8>)
 800c3da:	f000 b8af 	b.w	800c53c <_fwalk_reent>
 800c3de:	bf00      	nop
 800c3e0:	0800c319 	.word	0x0800c319

0800c3e4 <__sfmoreglue>:
 800c3e4:	b570      	push	{r4, r5, r6, lr}
 800c3e6:	1e4a      	subs	r2, r1, #1
 800c3e8:	2568      	movs	r5, #104	; 0x68
 800c3ea:	4355      	muls	r5, r2
 800c3ec:	460e      	mov	r6, r1
 800c3ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c3f2:	f7ff fa87 	bl	800b904 <_malloc_r>
 800c3f6:	4604      	mov	r4, r0
 800c3f8:	b140      	cbz	r0, 800c40c <__sfmoreglue+0x28>
 800c3fa:	2100      	movs	r1, #0
 800c3fc:	e9c0 1600 	strd	r1, r6, [r0]
 800c400:	300c      	adds	r0, #12
 800c402:	60a0      	str	r0, [r4, #8]
 800c404:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c408:	f7fd fb88 	bl	8009b1c <memset>
 800c40c:	4620      	mov	r0, r4
 800c40e:	bd70      	pop	{r4, r5, r6, pc}

0800c410 <__sfp_lock_acquire>:
 800c410:	4801      	ldr	r0, [pc, #4]	; (800c418 <__sfp_lock_acquire+0x8>)
 800c412:	f000 b8b3 	b.w	800c57c <__retarget_lock_acquire_recursive>
 800c416:	bf00      	nop
 800c418:	2000876c 	.word	0x2000876c

0800c41c <__sfp_lock_release>:
 800c41c:	4801      	ldr	r0, [pc, #4]	; (800c424 <__sfp_lock_release+0x8>)
 800c41e:	f000 b8ae 	b.w	800c57e <__retarget_lock_release_recursive>
 800c422:	bf00      	nop
 800c424:	2000876c 	.word	0x2000876c

0800c428 <__sinit_lock_acquire>:
 800c428:	4801      	ldr	r0, [pc, #4]	; (800c430 <__sinit_lock_acquire+0x8>)
 800c42a:	f000 b8a7 	b.w	800c57c <__retarget_lock_acquire_recursive>
 800c42e:	bf00      	nop
 800c430:	20008767 	.word	0x20008767

0800c434 <__sinit_lock_release>:
 800c434:	4801      	ldr	r0, [pc, #4]	; (800c43c <__sinit_lock_release+0x8>)
 800c436:	f000 b8a2 	b.w	800c57e <__retarget_lock_release_recursive>
 800c43a:	bf00      	nop
 800c43c:	20008767 	.word	0x20008767

0800c440 <__sinit>:
 800c440:	b510      	push	{r4, lr}
 800c442:	4604      	mov	r4, r0
 800c444:	f7ff fff0 	bl	800c428 <__sinit_lock_acquire>
 800c448:	69a3      	ldr	r3, [r4, #24]
 800c44a:	b11b      	cbz	r3, 800c454 <__sinit+0x14>
 800c44c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c450:	f7ff bff0 	b.w	800c434 <__sinit_lock_release>
 800c454:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c458:	6523      	str	r3, [r4, #80]	; 0x50
 800c45a:	4b13      	ldr	r3, [pc, #76]	; (800c4a8 <__sinit+0x68>)
 800c45c:	4a13      	ldr	r2, [pc, #76]	; (800c4ac <__sinit+0x6c>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	62a2      	str	r2, [r4, #40]	; 0x28
 800c462:	42a3      	cmp	r3, r4
 800c464:	bf04      	itt	eq
 800c466:	2301      	moveq	r3, #1
 800c468:	61a3      	streq	r3, [r4, #24]
 800c46a:	4620      	mov	r0, r4
 800c46c:	f000 f820 	bl	800c4b0 <__sfp>
 800c470:	6060      	str	r0, [r4, #4]
 800c472:	4620      	mov	r0, r4
 800c474:	f000 f81c 	bl	800c4b0 <__sfp>
 800c478:	60a0      	str	r0, [r4, #8]
 800c47a:	4620      	mov	r0, r4
 800c47c:	f000 f818 	bl	800c4b0 <__sfp>
 800c480:	2200      	movs	r2, #0
 800c482:	60e0      	str	r0, [r4, #12]
 800c484:	2104      	movs	r1, #4
 800c486:	6860      	ldr	r0, [r4, #4]
 800c488:	f7ff ff82 	bl	800c390 <std>
 800c48c:	68a0      	ldr	r0, [r4, #8]
 800c48e:	2201      	movs	r2, #1
 800c490:	2109      	movs	r1, #9
 800c492:	f7ff ff7d 	bl	800c390 <std>
 800c496:	68e0      	ldr	r0, [r4, #12]
 800c498:	2202      	movs	r2, #2
 800c49a:	2112      	movs	r1, #18
 800c49c:	f7ff ff78 	bl	800c390 <std>
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	61a3      	str	r3, [r4, #24]
 800c4a4:	e7d2      	b.n	800c44c <__sinit+0xc>
 800c4a6:	bf00      	nop
 800c4a8:	0800c968 	.word	0x0800c968
 800c4ac:	0800c3d9 	.word	0x0800c3d9

0800c4b0 <__sfp>:
 800c4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4b2:	4607      	mov	r7, r0
 800c4b4:	f7ff ffac 	bl	800c410 <__sfp_lock_acquire>
 800c4b8:	4b1e      	ldr	r3, [pc, #120]	; (800c534 <__sfp+0x84>)
 800c4ba:	681e      	ldr	r6, [r3, #0]
 800c4bc:	69b3      	ldr	r3, [r6, #24]
 800c4be:	b913      	cbnz	r3, 800c4c6 <__sfp+0x16>
 800c4c0:	4630      	mov	r0, r6
 800c4c2:	f7ff ffbd 	bl	800c440 <__sinit>
 800c4c6:	3648      	adds	r6, #72	; 0x48
 800c4c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c4cc:	3b01      	subs	r3, #1
 800c4ce:	d503      	bpl.n	800c4d8 <__sfp+0x28>
 800c4d0:	6833      	ldr	r3, [r6, #0]
 800c4d2:	b30b      	cbz	r3, 800c518 <__sfp+0x68>
 800c4d4:	6836      	ldr	r6, [r6, #0]
 800c4d6:	e7f7      	b.n	800c4c8 <__sfp+0x18>
 800c4d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c4dc:	b9d5      	cbnz	r5, 800c514 <__sfp+0x64>
 800c4de:	4b16      	ldr	r3, [pc, #88]	; (800c538 <__sfp+0x88>)
 800c4e0:	60e3      	str	r3, [r4, #12]
 800c4e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c4e6:	6665      	str	r5, [r4, #100]	; 0x64
 800c4e8:	f000 f847 	bl	800c57a <__retarget_lock_init_recursive>
 800c4ec:	f7ff ff96 	bl	800c41c <__sfp_lock_release>
 800c4f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c4f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c4f8:	6025      	str	r5, [r4, #0]
 800c4fa:	61a5      	str	r5, [r4, #24]
 800c4fc:	2208      	movs	r2, #8
 800c4fe:	4629      	mov	r1, r5
 800c500:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c504:	f7fd fb0a 	bl	8009b1c <memset>
 800c508:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c50c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c510:	4620      	mov	r0, r4
 800c512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c514:	3468      	adds	r4, #104	; 0x68
 800c516:	e7d9      	b.n	800c4cc <__sfp+0x1c>
 800c518:	2104      	movs	r1, #4
 800c51a:	4638      	mov	r0, r7
 800c51c:	f7ff ff62 	bl	800c3e4 <__sfmoreglue>
 800c520:	4604      	mov	r4, r0
 800c522:	6030      	str	r0, [r6, #0]
 800c524:	2800      	cmp	r0, #0
 800c526:	d1d5      	bne.n	800c4d4 <__sfp+0x24>
 800c528:	f7ff ff78 	bl	800c41c <__sfp_lock_release>
 800c52c:	230c      	movs	r3, #12
 800c52e:	603b      	str	r3, [r7, #0]
 800c530:	e7ee      	b.n	800c510 <__sfp+0x60>
 800c532:	bf00      	nop
 800c534:	0800c968 	.word	0x0800c968
 800c538:	ffff0001 	.word	0xffff0001

0800c53c <_fwalk_reent>:
 800c53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c540:	4606      	mov	r6, r0
 800c542:	4688      	mov	r8, r1
 800c544:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c548:	2700      	movs	r7, #0
 800c54a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c54e:	f1b9 0901 	subs.w	r9, r9, #1
 800c552:	d505      	bpl.n	800c560 <_fwalk_reent+0x24>
 800c554:	6824      	ldr	r4, [r4, #0]
 800c556:	2c00      	cmp	r4, #0
 800c558:	d1f7      	bne.n	800c54a <_fwalk_reent+0xe>
 800c55a:	4638      	mov	r0, r7
 800c55c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c560:	89ab      	ldrh	r3, [r5, #12]
 800c562:	2b01      	cmp	r3, #1
 800c564:	d907      	bls.n	800c576 <_fwalk_reent+0x3a>
 800c566:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c56a:	3301      	adds	r3, #1
 800c56c:	d003      	beq.n	800c576 <_fwalk_reent+0x3a>
 800c56e:	4629      	mov	r1, r5
 800c570:	4630      	mov	r0, r6
 800c572:	47c0      	blx	r8
 800c574:	4307      	orrs	r7, r0
 800c576:	3568      	adds	r5, #104	; 0x68
 800c578:	e7e9      	b.n	800c54e <_fwalk_reent+0x12>

0800c57a <__retarget_lock_init_recursive>:
 800c57a:	4770      	bx	lr

0800c57c <__retarget_lock_acquire_recursive>:
 800c57c:	4770      	bx	lr

0800c57e <__retarget_lock_release_recursive>:
 800c57e:	4770      	bx	lr

0800c580 <__swhatbuf_r>:
 800c580:	b570      	push	{r4, r5, r6, lr}
 800c582:	460e      	mov	r6, r1
 800c584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c588:	2900      	cmp	r1, #0
 800c58a:	b096      	sub	sp, #88	; 0x58
 800c58c:	4614      	mov	r4, r2
 800c58e:	461d      	mov	r5, r3
 800c590:	da07      	bge.n	800c5a2 <__swhatbuf_r+0x22>
 800c592:	2300      	movs	r3, #0
 800c594:	602b      	str	r3, [r5, #0]
 800c596:	89b3      	ldrh	r3, [r6, #12]
 800c598:	061a      	lsls	r2, r3, #24
 800c59a:	d410      	bmi.n	800c5be <__swhatbuf_r+0x3e>
 800c59c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5a0:	e00e      	b.n	800c5c0 <__swhatbuf_r+0x40>
 800c5a2:	466a      	mov	r2, sp
 800c5a4:	f000 f902 	bl	800c7ac <_fstat_r>
 800c5a8:	2800      	cmp	r0, #0
 800c5aa:	dbf2      	blt.n	800c592 <__swhatbuf_r+0x12>
 800c5ac:	9a01      	ldr	r2, [sp, #4]
 800c5ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c5b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c5b6:	425a      	negs	r2, r3
 800c5b8:	415a      	adcs	r2, r3
 800c5ba:	602a      	str	r2, [r5, #0]
 800c5bc:	e7ee      	b.n	800c59c <__swhatbuf_r+0x1c>
 800c5be:	2340      	movs	r3, #64	; 0x40
 800c5c0:	2000      	movs	r0, #0
 800c5c2:	6023      	str	r3, [r4, #0]
 800c5c4:	b016      	add	sp, #88	; 0x58
 800c5c6:	bd70      	pop	{r4, r5, r6, pc}

0800c5c8 <__smakebuf_r>:
 800c5c8:	898b      	ldrh	r3, [r1, #12]
 800c5ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c5cc:	079d      	lsls	r5, r3, #30
 800c5ce:	4606      	mov	r6, r0
 800c5d0:	460c      	mov	r4, r1
 800c5d2:	d507      	bpl.n	800c5e4 <__smakebuf_r+0x1c>
 800c5d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c5d8:	6023      	str	r3, [r4, #0]
 800c5da:	6123      	str	r3, [r4, #16]
 800c5dc:	2301      	movs	r3, #1
 800c5de:	6163      	str	r3, [r4, #20]
 800c5e0:	b002      	add	sp, #8
 800c5e2:	bd70      	pop	{r4, r5, r6, pc}
 800c5e4:	ab01      	add	r3, sp, #4
 800c5e6:	466a      	mov	r2, sp
 800c5e8:	f7ff ffca 	bl	800c580 <__swhatbuf_r>
 800c5ec:	9900      	ldr	r1, [sp, #0]
 800c5ee:	4605      	mov	r5, r0
 800c5f0:	4630      	mov	r0, r6
 800c5f2:	f7ff f987 	bl	800b904 <_malloc_r>
 800c5f6:	b948      	cbnz	r0, 800c60c <__smakebuf_r+0x44>
 800c5f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5fc:	059a      	lsls	r2, r3, #22
 800c5fe:	d4ef      	bmi.n	800c5e0 <__smakebuf_r+0x18>
 800c600:	f023 0303 	bic.w	r3, r3, #3
 800c604:	f043 0302 	orr.w	r3, r3, #2
 800c608:	81a3      	strh	r3, [r4, #12]
 800c60a:	e7e3      	b.n	800c5d4 <__smakebuf_r+0xc>
 800c60c:	4b0d      	ldr	r3, [pc, #52]	; (800c644 <__smakebuf_r+0x7c>)
 800c60e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c610:	89a3      	ldrh	r3, [r4, #12]
 800c612:	6020      	str	r0, [r4, #0]
 800c614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c618:	81a3      	strh	r3, [r4, #12]
 800c61a:	9b00      	ldr	r3, [sp, #0]
 800c61c:	6163      	str	r3, [r4, #20]
 800c61e:	9b01      	ldr	r3, [sp, #4]
 800c620:	6120      	str	r0, [r4, #16]
 800c622:	b15b      	cbz	r3, 800c63c <__smakebuf_r+0x74>
 800c624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c628:	4630      	mov	r0, r6
 800c62a:	f000 f8d1 	bl	800c7d0 <_isatty_r>
 800c62e:	b128      	cbz	r0, 800c63c <__smakebuf_r+0x74>
 800c630:	89a3      	ldrh	r3, [r4, #12]
 800c632:	f023 0303 	bic.w	r3, r3, #3
 800c636:	f043 0301 	orr.w	r3, r3, #1
 800c63a:	81a3      	strh	r3, [r4, #12]
 800c63c:	89a0      	ldrh	r0, [r4, #12]
 800c63e:	4305      	orrs	r5, r0
 800c640:	81a5      	strh	r5, [r4, #12]
 800c642:	e7cd      	b.n	800c5e0 <__smakebuf_r+0x18>
 800c644:	0800c3d9 	.word	0x0800c3d9

0800c648 <_malloc_usable_size_r>:
 800c648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c64c:	1f18      	subs	r0, r3, #4
 800c64e:	2b00      	cmp	r3, #0
 800c650:	bfbc      	itt	lt
 800c652:	580b      	ldrlt	r3, [r1, r0]
 800c654:	18c0      	addlt	r0, r0, r3
 800c656:	4770      	bx	lr

0800c658 <_raise_r>:
 800c658:	291f      	cmp	r1, #31
 800c65a:	b538      	push	{r3, r4, r5, lr}
 800c65c:	4604      	mov	r4, r0
 800c65e:	460d      	mov	r5, r1
 800c660:	d904      	bls.n	800c66c <_raise_r+0x14>
 800c662:	2316      	movs	r3, #22
 800c664:	6003      	str	r3, [r0, #0]
 800c666:	f04f 30ff 	mov.w	r0, #4294967295
 800c66a:	bd38      	pop	{r3, r4, r5, pc}
 800c66c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c66e:	b112      	cbz	r2, 800c676 <_raise_r+0x1e>
 800c670:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c674:	b94b      	cbnz	r3, 800c68a <_raise_r+0x32>
 800c676:	4620      	mov	r0, r4
 800c678:	f000 f830 	bl	800c6dc <_getpid_r>
 800c67c:	462a      	mov	r2, r5
 800c67e:	4601      	mov	r1, r0
 800c680:	4620      	mov	r0, r4
 800c682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c686:	f000 b817 	b.w	800c6b8 <_kill_r>
 800c68a:	2b01      	cmp	r3, #1
 800c68c:	d00a      	beq.n	800c6a4 <_raise_r+0x4c>
 800c68e:	1c59      	adds	r1, r3, #1
 800c690:	d103      	bne.n	800c69a <_raise_r+0x42>
 800c692:	2316      	movs	r3, #22
 800c694:	6003      	str	r3, [r0, #0]
 800c696:	2001      	movs	r0, #1
 800c698:	e7e7      	b.n	800c66a <_raise_r+0x12>
 800c69a:	2400      	movs	r4, #0
 800c69c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c6a0:	4628      	mov	r0, r5
 800c6a2:	4798      	blx	r3
 800c6a4:	2000      	movs	r0, #0
 800c6a6:	e7e0      	b.n	800c66a <_raise_r+0x12>

0800c6a8 <raise>:
 800c6a8:	4b02      	ldr	r3, [pc, #8]	; (800c6b4 <raise+0xc>)
 800c6aa:	4601      	mov	r1, r0
 800c6ac:	6818      	ldr	r0, [r3, #0]
 800c6ae:	f7ff bfd3 	b.w	800c658 <_raise_r>
 800c6b2:	bf00      	nop
 800c6b4:	20000014 	.word	0x20000014

0800c6b8 <_kill_r>:
 800c6b8:	b538      	push	{r3, r4, r5, lr}
 800c6ba:	4d07      	ldr	r5, [pc, #28]	; (800c6d8 <_kill_r+0x20>)
 800c6bc:	2300      	movs	r3, #0
 800c6be:	4604      	mov	r4, r0
 800c6c0:	4608      	mov	r0, r1
 800c6c2:	4611      	mov	r1, r2
 800c6c4:	602b      	str	r3, [r5, #0]
 800c6c6:	f7f5 fb11 	bl	8001cec <_kill>
 800c6ca:	1c43      	adds	r3, r0, #1
 800c6cc:	d102      	bne.n	800c6d4 <_kill_r+0x1c>
 800c6ce:	682b      	ldr	r3, [r5, #0]
 800c6d0:	b103      	cbz	r3, 800c6d4 <_kill_r+0x1c>
 800c6d2:	6023      	str	r3, [r4, #0]
 800c6d4:	bd38      	pop	{r3, r4, r5, pc}
 800c6d6:	bf00      	nop
 800c6d8:	20008760 	.word	0x20008760

0800c6dc <_getpid_r>:
 800c6dc:	f7f5 bafe 	b.w	8001cdc <_getpid>

0800c6e0 <__sread>:
 800c6e0:	b510      	push	{r4, lr}
 800c6e2:	460c      	mov	r4, r1
 800c6e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6e8:	f000 f894 	bl	800c814 <_read_r>
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	bfab      	itete	ge
 800c6f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c6f2:	89a3      	ldrhlt	r3, [r4, #12]
 800c6f4:	181b      	addge	r3, r3, r0
 800c6f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c6fa:	bfac      	ite	ge
 800c6fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800c6fe:	81a3      	strhlt	r3, [r4, #12]
 800c700:	bd10      	pop	{r4, pc}

0800c702 <__swrite>:
 800c702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c706:	461f      	mov	r7, r3
 800c708:	898b      	ldrh	r3, [r1, #12]
 800c70a:	05db      	lsls	r3, r3, #23
 800c70c:	4605      	mov	r5, r0
 800c70e:	460c      	mov	r4, r1
 800c710:	4616      	mov	r6, r2
 800c712:	d505      	bpl.n	800c720 <__swrite+0x1e>
 800c714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c718:	2302      	movs	r3, #2
 800c71a:	2200      	movs	r2, #0
 800c71c:	f000 f868 	bl	800c7f0 <_lseek_r>
 800c720:	89a3      	ldrh	r3, [r4, #12]
 800c722:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c726:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c72a:	81a3      	strh	r3, [r4, #12]
 800c72c:	4632      	mov	r2, r6
 800c72e:	463b      	mov	r3, r7
 800c730:	4628      	mov	r0, r5
 800c732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c736:	f000 b817 	b.w	800c768 <_write_r>

0800c73a <__sseek>:
 800c73a:	b510      	push	{r4, lr}
 800c73c:	460c      	mov	r4, r1
 800c73e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c742:	f000 f855 	bl	800c7f0 <_lseek_r>
 800c746:	1c43      	adds	r3, r0, #1
 800c748:	89a3      	ldrh	r3, [r4, #12]
 800c74a:	bf15      	itete	ne
 800c74c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c74e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c752:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c756:	81a3      	strheq	r3, [r4, #12]
 800c758:	bf18      	it	ne
 800c75a:	81a3      	strhne	r3, [r4, #12]
 800c75c:	bd10      	pop	{r4, pc}

0800c75e <__sclose>:
 800c75e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c762:	f000 b813 	b.w	800c78c <_close_r>
	...

0800c768 <_write_r>:
 800c768:	b538      	push	{r3, r4, r5, lr}
 800c76a:	4d07      	ldr	r5, [pc, #28]	; (800c788 <_write_r+0x20>)
 800c76c:	4604      	mov	r4, r0
 800c76e:	4608      	mov	r0, r1
 800c770:	4611      	mov	r1, r2
 800c772:	2200      	movs	r2, #0
 800c774:	602a      	str	r2, [r5, #0]
 800c776:	461a      	mov	r2, r3
 800c778:	f7f5 faef 	bl	8001d5a <_write>
 800c77c:	1c43      	adds	r3, r0, #1
 800c77e:	d102      	bne.n	800c786 <_write_r+0x1e>
 800c780:	682b      	ldr	r3, [r5, #0]
 800c782:	b103      	cbz	r3, 800c786 <_write_r+0x1e>
 800c784:	6023      	str	r3, [r4, #0]
 800c786:	bd38      	pop	{r3, r4, r5, pc}
 800c788:	20008760 	.word	0x20008760

0800c78c <_close_r>:
 800c78c:	b538      	push	{r3, r4, r5, lr}
 800c78e:	4d06      	ldr	r5, [pc, #24]	; (800c7a8 <_close_r+0x1c>)
 800c790:	2300      	movs	r3, #0
 800c792:	4604      	mov	r4, r0
 800c794:	4608      	mov	r0, r1
 800c796:	602b      	str	r3, [r5, #0]
 800c798:	f7f5 fafb 	bl	8001d92 <_close>
 800c79c:	1c43      	adds	r3, r0, #1
 800c79e:	d102      	bne.n	800c7a6 <_close_r+0x1a>
 800c7a0:	682b      	ldr	r3, [r5, #0]
 800c7a2:	b103      	cbz	r3, 800c7a6 <_close_r+0x1a>
 800c7a4:	6023      	str	r3, [r4, #0]
 800c7a6:	bd38      	pop	{r3, r4, r5, pc}
 800c7a8:	20008760 	.word	0x20008760

0800c7ac <_fstat_r>:
 800c7ac:	b538      	push	{r3, r4, r5, lr}
 800c7ae:	4d07      	ldr	r5, [pc, #28]	; (800c7cc <_fstat_r+0x20>)
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	4604      	mov	r4, r0
 800c7b4:	4608      	mov	r0, r1
 800c7b6:	4611      	mov	r1, r2
 800c7b8:	602b      	str	r3, [r5, #0]
 800c7ba:	f7f5 faf6 	bl	8001daa <_fstat>
 800c7be:	1c43      	adds	r3, r0, #1
 800c7c0:	d102      	bne.n	800c7c8 <_fstat_r+0x1c>
 800c7c2:	682b      	ldr	r3, [r5, #0]
 800c7c4:	b103      	cbz	r3, 800c7c8 <_fstat_r+0x1c>
 800c7c6:	6023      	str	r3, [r4, #0]
 800c7c8:	bd38      	pop	{r3, r4, r5, pc}
 800c7ca:	bf00      	nop
 800c7cc:	20008760 	.word	0x20008760

0800c7d0 <_isatty_r>:
 800c7d0:	b538      	push	{r3, r4, r5, lr}
 800c7d2:	4d06      	ldr	r5, [pc, #24]	; (800c7ec <_isatty_r+0x1c>)
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	4604      	mov	r4, r0
 800c7d8:	4608      	mov	r0, r1
 800c7da:	602b      	str	r3, [r5, #0]
 800c7dc:	f7f5 faf5 	bl	8001dca <_isatty>
 800c7e0:	1c43      	adds	r3, r0, #1
 800c7e2:	d102      	bne.n	800c7ea <_isatty_r+0x1a>
 800c7e4:	682b      	ldr	r3, [r5, #0]
 800c7e6:	b103      	cbz	r3, 800c7ea <_isatty_r+0x1a>
 800c7e8:	6023      	str	r3, [r4, #0]
 800c7ea:	bd38      	pop	{r3, r4, r5, pc}
 800c7ec:	20008760 	.word	0x20008760

0800c7f0 <_lseek_r>:
 800c7f0:	b538      	push	{r3, r4, r5, lr}
 800c7f2:	4d07      	ldr	r5, [pc, #28]	; (800c810 <_lseek_r+0x20>)
 800c7f4:	4604      	mov	r4, r0
 800c7f6:	4608      	mov	r0, r1
 800c7f8:	4611      	mov	r1, r2
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	602a      	str	r2, [r5, #0]
 800c7fe:	461a      	mov	r2, r3
 800c800:	f7f5 faee 	bl	8001de0 <_lseek>
 800c804:	1c43      	adds	r3, r0, #1
 800c806:	d102      	bne.n	800c80e <_lseek_r+0x1e>
 800c808:	682b      	ldr	r3, [r5, #0]
 800c80a:	b103      	cbz	r3, 800c80e <_lseek_r+0x1e>
 800c80c:	6023      	str	r3, [r4, #0]
 800c80e:	bd38      	pop	{r3, r4, r5, pc}
 800c810:	20008760 	.word	0x20008760

0800c814 <_read_r>:
 800c814:	b538      	push	{r3, r4, r5, lr}
 800c816:	4d07      	ldr	r5, [pc, #28]	; (800c834 <_read_r+0x20>)
 800c818:	4604      	mov	r4, r0
 800c81a:	4608      	mov	r0, r1
 800c81c:	4611      	mov	r1, r2
 800c81e:	2200      	movs	r2, #0
 800c820:	602a      	str	r2, [r5, #0]
 800c822:	461a      	mov	r2, r3
 800c824:	f7f5 fa7c 	bl	8001d20 <_read>
 800c828:	1c43      	adds	r3, r0, #1
 800c82a:	d102      	bne.n	800c832 <_read_r+0x1e>
 800c82c:	682b      	ldr	r3, [r5, #0]
 800c82e:	b103      	cbz	r3, 800c832 <_read_r+0x1e>
 800c830:	6023      	str	r3, [r4, #0]
 800c832:	bd38      	pop	{r3, r4, r5, pc}
 800c834:	20008760 	.word	0x20008760

0800c838 <_init>:
 800c838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c83a:	bf00      	nop
 800c83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c83e:	bc08      	pop	{r3}
 800c840:	469e      	mov	lr, r3
 800c842:	4770      	bx	lr

0800c844 <_fini>:
 800c844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c846:	bf00      	nop
 800c848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c84a:	bc08      	pop	{r3}
 800c84c:	469e      	mov	lr, r3
 800c84e:	4770      	bx	lr
