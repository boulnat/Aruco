
MB-synthetiseur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013aac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d7c  08013c40  08013c40  00023c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080149bc  080149bc  000305b8  2**0
                  CONTENTS
  4 .ARM          00000008  080149bc  080149bc  000249bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080149c4  080149c4  000305b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080149c4  080149c4  000249c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080149c8  080149c8  000249c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005b8  20000000  080149cc  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000086c0  200005b8  08014f84  000305b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008c78  08014f84  00038c78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000305b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003f8a5  00000000  00000000  000305e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000765a  00000000  00000000  0006fe8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024f8  00000000  00000000  000774e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002a9e8  00000000  00000000  000799e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002eb4f  00000000  00000000  000a43c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f06d1  00000000  00000000  000d2f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001c35e8  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00002210  00000000  00000000  001c3640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a8e8  00000000  00000000  001c5850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005b8 	.word	0x200005b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013c24 	.word	0x08013c24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005bc 	.word	0x200005bc
 80001cc:	08013c24 	.word	0x08013c24

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
 8000ef4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ef6:	4b29      	ldr	r3, [pc, #164]	; (8000f9c <MX_ADC1_Init+0xbc>)
 8000ef8:	4a29      	ldr	r2, [pc, #164]	; (8000fa0 <MX_ADC1_Init+0xc0>)
 8000efa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000efc:	4b27      	ldr	r3, [pc, #156]	; (8000f9c <MX_ADC1_Init+0xbc>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f02:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <MX_ADC1_Init+0xbc>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f08:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <MX_ADC1_Init+0xbc>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f0e:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <MX_ADC1_Init+0xbc>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f14:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <MX_ADC1_Init+0xbc>)
 8000f16:	2204      	movs	r2, #4
 8000f18:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f1a:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <MX_ADC1_Init+0xbc>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f20:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <MX_ADC1_Init+0xbc>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f26:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <MX_ADC1_Init+0xbc>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <MX_ADC1_Init+0xbc>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f34:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <MX_ADC1_Init+0xbc>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <MX_ADC1_Init+0xbc>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f40:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <MX_ADC1_Init+0xbc>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <MX_ADC1_Init+0xbc>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <MX_ADC1_Init+0xbc>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f56:	4811      	ldr	r0, [pc, #68]	; (8000f9c <MX_ADC1_Init+0xbc>)
 8000f58:	f007 fb74 	bl	8008644 <HAL_ADC_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000f62:	f001 f98b 	bl	800227c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f66:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <MX_ADC1_Init+0xc4>)
 8000f68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f6a:	2306      	movs	r3, #6
 8000f6c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f72:	237f      	movs	r3, #127	; 0x7f
 8000f74:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f76:	2304      	movs	r3, #4
 8000f78:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7e:	463b      	mov	r3, r7
 8000f80:	4619      	mov	r1, r3
 8000f82:	4806      	ldr	r0, [pc, #24]	; (8000f9c <MX_ADC1_Init+0xbc>)
 8000f84:	f007 fca6 	bl	80088d4 <HAL_ADC_ConfigChannel>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f8e:	f001 f975 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200088c4 	.word	0x200088c4
 8000fa0:	50040000 	.word	0x50040000
 8000fa4:	19200040 	.word	0x19200040

08000fa8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a15      	ldr	r2, [pc, #84]	; (800101c <HAL_ADC_MspInit+0x74>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d124      	bne.n	8001014 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_ADC_MspInit+0x78>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	4a14      	ldr	r2, [pc, #80]	; (8001020 <HAL_ADC_MspInit+0x78>)
 8000fd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_ADC_MspInit+0x78>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <HAL_ADC_MspInit+0x78>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	4a0e      	ldr	r2, [pc, #56]	; (8001020 <HAL_ADC_MspInit+0x78>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <HAL_ADC_MspInit+0x78>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN6
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000ffa:	2372      	movs	r3, #114	; 0x72
 8000ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ffe:	230b      	movs	r3, #11
 8001000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001010:	f009 f9f0 	bl	800a3f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001014:	bf00      	nop
 8001016:	3728      	adds	r7, #40	; 0x28
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	50040000 	.word	0x50040000
 8001020:	40021000 	.word	0x40021000

08001024 <spectro>:
#define TMR_TASK_INTERVAL   (1000)          /* Interval of tmrTask thread in microseconds */
#define INCREMENT_1MS(var)  (var++)         /* Increment 1ms variable in tmrTask */


volatile uint16_t   CO_timer1ms = 0U;   /* variable increments each millisecond */
void spectro(){
 8001024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001026:	b0ad      	sub	sp, #180	; 0xb4
 8001028:	af10      	add	r7, sp, #64	; 0x40
      //PCM9600begin(hi2c1);
	  //AS7341begin(hi2c1);
	  PCM9600_t module;
	  PCM9600begin(&module, hi2c1);
 800102a:	4e30      	ldr	r6, [pc, #192]	; (80010ec <spectro+0xc8>)
 800102c:	f107 0c1c 	add.w	ip, r7, #28
 8001030:	466d      	mov	r5, sp
 8001032:	f106 040c 	add.w	r4, r6, #12
 8001036:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001038:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800103a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800103c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800103e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001040:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001042:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001046:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800104a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800104e:	4660      	mov	r0, ip
 8001050:	f007 f8ae 	bl	80081b0 <PCM9600begin>

	  AS7341init(hi2c1, 0x80);
 8001054:	4e25      	ldr	r6, [pc, #148]	; (80010ec <spectro+0xc8>)
 8001056:	2380      	movs	r3, #128	; 0x80
 8001058:	930f      	str	r3, [sp, #60]	; 0x3c
 800105a:	466d      	mov	r5, sp
 800105c:	f106 0410 	add.w	r4, r6, #16
 8001060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001062:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800106a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800106c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001070:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001074:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001078:	f001 fd9e 	bl	8002bb8 <AS7341init>
	  /*  Tint = (ATIME + 1) × (ASTEP + 1) × 2.78µs
	   *  Tint = 50ms
	   * */
      setASTEP(599);
 800107c:	f240 2057 	movw	r0, #599	; 0x257
 8001080:	f001 fe1a 	bl	8002cb8 <setASTEP>
      setATIME(29);
 8001084:	201d      	movs	r0, #29
 8001086:	f001 fe49 	bl	8002d1c <setATIME>
      setGain(AS7341_GAIN_256X);
 800108a:	2009      	movs	r0, #9
 800108c:	f001 fe6a 	bl	8002d64 <setGain>

      //startReading(); /* reading in a loop */

      uint16_t buff[12];
      //do{
		  if(!readAllChannels(buff)){
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	4618      	mov	r0, r3
 8001094:	f001 fe8a 	bl	8002dac <readAllChannels>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d122      	bne.n	80010e4 <spectro+0xc0>


			  //cansend can0 602#3B00180510000000 ask for PDO every 10s
			  //cansend can0 602#4001640100000000
			  //!!!!weird number if scan is too fast
			  CO_OD_RAM.readAnalogueInput16Bit[0] = getChannel(AS7341_CHANNEL_415nm_F1);//getChannel(AS7341_CHANNEL_415nm_F1); //added by me set the value of an object
 800109e:	2000      	movs	r0, #0
 80010a0:	f001 ffba 	bl	8003018 <getChannel>
 80010a4:	4603      	mov	r3, r0
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <spectro+0xcc>)
 80010aa:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
			  CO_OD_RAM.readAnalogueInput16Bit[1] = getChannel(AS7341_CHANNEL_445nm_F2);
 80010ae:	2001      	movs	r0, #1
 80010b0:	f001 ffb2 	bl	8003018 <getChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <spectro+0xcc>)
 80010ba:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
			  CO_OD_RAM.readAnalogueInput16Bit[2] = getChannel(AS7341_CHANNEL_480nm_F3);
 80010be:	2002      	movs	r0, #2
 80010c0:	f001 ffaa 	bl	8003018 <getChannel>
 80010c4:	4603      	mov	r3, r0
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <spectro+0xcc>)
 80010ca:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104

			  CO_OD_RAM.readAnalogueInput16Bit[3] = getThermocoupleTemp(&module,0);
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f007 f888 	bl	80081ea <getThermocoupleTemp>
 80010da:	4603      	mov	r3, r0
 80010dc:	b21a      	sxth	r2, r3
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <spectro+0xcc>)
 80010e0:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
			  //scenario();
			  //startReading();
		  }
      //}while(1);
}
 80010e4:	bf00      	nop
 80010e6:	3774      	adds	r7, #116	; 0x74
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010ec:	2000895c 	.word	0x2000895c
 80010f0:	20000000 	.word	0x20000000

080010f4 <programStart>:
	        	 //pca9685_pwm(0x80, 1, 0, 4095-(16*i));
	         }
  	  }
}
/*******************************************************************************/
void programStart(void){
 80010f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010f6:	b0a9      	sub	sp, #164	; 0xa4
 80010f8:	af10      	add	r7, sp, #64	; 0x40
	  CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	  /* Configure microcontroller. */
	  /* initialize EEPROM */
	  /* increase variable each startup. Variable is stored in EEPROM. */
	  OD_powerOnCounter++;
 8001100:	4b59      	ldr	r3, [pc, #356]	; (8001268 <programStart+0x174>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	3301      	adds	r3, #1
 8001106:	4a58      	ldr	r2, [pc, #352]	; (8001268 <programStart+0x174>)
 8001108:	6053      	str	r3, [r2, #4]

	  while(reset != CO_RESET_APP){
 800110a:	e09f      	b.n	800124c <programStart+0x158>
	  /* CANopen communication reset - initialize CANopen objects *******************/
	          CO_ReturnError_t err;
	          uint16_t timer1msPrevious;

	          /* disable CAN and CAN interrupts */
	  	    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 1, 0);    //added by me
 800110c:	2200      	movs	r2, #0
 800110e:	2101      	movs	r1, #1
 8001110:	2013      	movs	r0, #19
 8001112:	f008 ff81 	bl	800a018 <HAL_NVIC_SetPriority>
	  	    HAL_NVIC_DisableIRQ(CAN1_TX_IRQn);			 //added by me
 8001116:	2013      	movs	r0, #19
 8001118:	f008 ffa8 	bl	800a06c <HAL_NVIC_DisableIRQ>
	  	    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);	 //added by me
 800111c:	2200      	movs	r2, #0
 800111e:	2101      	movs	r1, #1
 8001120:	2014      	movs	r0, #20
 8001122:	f008 ff79 	bl	800a018 <HAL_NVIC_SetPriority>
	  	    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);			 //added by me
 8001126:	2014      	movs	r0, #20
 8001128:	f008 ffa0 	bl	800a06c <HAL_NVIC_DisableIRQ>
	          //}


	          /* Configure Timer interrupt function for execution every 1 millisecond */
	          /* Configure CAN transmit and receive interrupt */
	          err = CO_init((uint32_t)&hcan1, 2, 20);
 800112c:	4b4f      	ldr	r3, [pc, #316]	; (800126c <programStart+0x178>)
 800112e:	2214      	movs	r2, #20
 8001130:	2102      	movs	r1, #2
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f950 	bl	80013d8 <CO_init>
 8001138:	4603      	mov	r3, r0
 800113a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	            	 //TODO behavior in a case of the stack error. Currently not defined.
	            	 //_Error_Handler(0, 0);
	             }

	          /* start CAN */
	          CO_CANsetNormalMode(CO->CANmodule[0]);
 800113e:	4b4c      	ldr	r3, [pc, #304]	; (8001270 <programStart+0x17c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f006 fc1d 	bl	8007984 <CO_CANsetNormalMode>


	          reset = CO_RESET_NOT;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	          timer1msPrevious = CO_timer1ms;  //added by me
 8001150:	4b48      	ldr	r3, [pc, #288]	; (8001274 <programStart+0x180>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	          //cansend can0 000#010(0)
	          //CO->NMT->operatingState = CO_NMT_OPERATIONAL;//added by me
	          //CO_OD_ROM.producerHeartbeatTime = 0x50;//added by me

           	  PCM9600_t module;
           	  PCM9600begin(&module, hi2c1);
 8001158:	4e47      	ldr	r6, [pc, #284]	; (8001278 <programStart+0x184>)
 800115a:	46bc      	mov	ip, r7
 800115c:	466d      	mov	r5, sp
 800115e:	f106 040c 	add.w	r4, r6, #12
 8001162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001164:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001168:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800116a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800116c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800116e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001172:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001176:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800117a:	4660      	mov	r0, ip
 800117c:	f007 f818 	bl	80081b0 <PCM9600begin>
           	  AS7341init(hi2c1, 0x80);
 8001180:	4e3d      	ldr	r6, [pc, #244]	; (8001278 <programStart+0x184>)
 8001182:	2380      	movs	r3, #128	; 0x80
 8001184:	930f      	str	r3, [sp, #60]	; 0x3c
 8001186:	466d      	mov	r5, sp
 8001188:	f106 0410 	add.w	r4, r6, #16
 800118c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800118e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001190:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001192:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001196:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001198:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800119c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80011a0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80011a4:	f001 fd08 	bl	8002bb8 <AS7341init>
                 setASTEP(999);
 80011a8:	f240 30e7 	movw	r0, #999	; 0x3e7
 80011ac:	f001 fd84 	bl	8002cb8 <setASTEP>
                 //getASTEP();
                 setATIME(100);
 80011b0:	2064      	movs	r0, #100	; 0x64
 80011b2:	f001 fdb3 	bl	8002d1c <setATIME>
                 setGain(AS7341_GAIN_256X);
 80011b6:	2009      	movs	r0, #9
 80011b8:	f001 fdd4 	bl	8002d64 <setGain>

                 //uint16_t buff[12];

	          while(reset == CO_RESET_NOT){
 80011bc:	e042      	b.n	8001244 <programStart+0x150>
	                  	  /* loop for normal program execution ******************************************/
	        	  	  	  	  INCREMENT_1MS(CO_timer1ms);
 80011be:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <programStart+0x180>)
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	3301      	adds	r3, #1
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <programStart+0x180>)
 80011ca:	801a      	strh	r2, [r3, #0]
	                        uint16_t timer1msCopy, timer1msDiff;

	                        timer1msCopy = CO_timer1ms;
 80011cc:	4b29      	ldr	r3, [pc, #164]	; (8001274 <programStart+0x180>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	                        timer1msDiff = timer1msCopy - timer1msPrevious;
 80011d4:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 80011d8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	                        timer1msPrevious = timer1msCopy;
 80011e2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80011e6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

	                        /* CANopen process */

	                        reset = CO_process(CO, timer1msDiff, NULL);
 80011ea:	4b21      	ldr	r3, [pc, #132]	; (8001270 <programStart+0x17c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 80011f2:	2200      	movs	r2, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 fd4d 	bl	8001c94 <CO_process>
 80011fa:	4603      	mov	r3, r0
 80011fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	                        //INCREMENT_1MS(CO_timer1ms);//added by me
	                        /* Nonblocking application code may go here. */
	                        if(CO->CANmodule[0]->CANnormal)
 8001200:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <programStart+0x17c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	7c9b      	ldrb	r3, [r3, #18]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d01a      	beq.n	8001244 <programStart+0x150>
	                        {
	                             bool_t syncWas;

	                             /* Process Sync and read inputs */
	                             //CO->RPDO[0]->synchronous=1; //added by me
	                             syncWas = CO_process_SYNC_RPDO(CO, 1000);
 800120e:	4b18      	ldr	r3, [pc, #96]	; (8001270 <programStart+0x17c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001216:	4618      	mov	r0, r3
 8001218:	f000 fdc0 	bl	8001d9c <CO_process_SYNC_RPDO>
 800121c:	4603      	mov	r3, r0
 800121e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	                             //CO->TPDO[0]->CANtxBuff[0].data[4]=getChannel(AS7341_CHANNEL_555nm_F5); //added by me
	                             //CO->TPDO[0]->CANtxBuff[0].data[5]=getChannel(AS7341_CHANNEL_590nm_F6); //added by me
	                             //CO->TPDO[0]->CANtxBuff[0].data[6]=getChannel(AS7341_CHANNEL_630nm_F7); //added by me
	                             //CO->TPDO[0]->CANtxBuff[0].data[7]=getChannel(AS7341_CHANNEL_680nm_F8); //added by me

	                             spectro();
 8001222:	f7ff feff 	bl	8001024 <spectro>

	                             //can be read with cansend can0 60(2)#40 20 21 00 00 00 00 00
	                             //cansend can0 602#3F006201AF000000
	                             //cansend can0 602#4000620100000000

	                             CO_process_TPDO(CO, syncWas, 1000);
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <programStart+0x17c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f897 1055 	ldrb.w	r1, [r7, #85]	; 0x55
 800122e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001232:	4618      	mov	r0, r3
 8001234:	f000 fdf0 	bl	8001e18 <CO_process_TPDO>

	                             CO_CANpolling_Tx(CO->CANmodule[0]);
 8001238:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <programStart+0x17c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f006 ff2e 	bl	80080a0 <CO_CANpolling_Tx>
	          while(reset == CO_RESET_NOT){
 8001244:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0b8      	beq.n	80011be <programStart+0xca>
	  while(reset != CO_RESET_APP){
 800124c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001250:	2b02      	cmp	r3, #2
 8001252:	f47f af5b 	bne.w	800110c <programStart+0x18>
	            	  /* program exit ***************************************************************/
	                /* stop threads */


	                /* delete objects from memory */
	                CO_delete((uint32_t)&hcan1/* CAN module address */);
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <programStart+0x178>)
 8001258:	4618      	mov	r0, r3
 800125a:	f000 fc7f 	bl	8001b5c <CO_delete>


	                /* reset */
	                //return 0;
}
 800125e:	bf00      	nop
 8001260:	3764      	adds	r7, #100	; 0x64
 8001262:	46bd      	mov	sp, r7
 8001264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001266:	bf00      	nop
 8001268:	20000130 	.word	0x20000130
 800126c:	20008928 	.word	0x20008928
 8001270:	20000618 	.word	0x20000618
 8001274:	200005d4 	.word	0x200005d4
 8001278:	2000895c 	.word	0x2000895c

0800127c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <MX_CAN1_Init+0x64>)
 8001282:	4a18      	ldr	r2, [pc, #96]	; (80012e4 <MX_CAN1_Init+0x68>)
 8001284:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <MX_CAN1_Init+0x64>)
 8001288:	2201      	movs	r2, #1
 800128a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <MX_CAN1_Init+0x64>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <MX_CAN1_Init+0x64>)
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_CAN1_Init+0x64>)
 800129a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800129e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_CAN1_Init+0x64>)
 80012a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80012a6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80012a8:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <MX_CAN1_Init+0x64>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_CAN1_Init+0x64>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80012b4:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <MX_CAN1_Init+0x64>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_CAN1_Init+0x64>)
 80012bc:	2200      	movs	r2, #0
 80012be:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <MX_CAN1_Init+0x64>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_CAN1_Init+0x64>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <MX_CAN1_Init+0x64>)
 80012ce:	f007 fee1 	bl	8009094 <HAL_CAN_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80012d8:	f000 ffd0 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20008928 	.word	0x20008928
 80012e4:	40006400 	.word	0x40006400

080012e8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a20      	ldr	r2, [pc, #128]	; (8001388 <HAL_CAN_MspInit+0xa0>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d139      	bne.n	800137e <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <HAL_CAN_MspInit+0xa4>)
 800130c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130e:	4a1f      	ldr	r2, [pc, #124]	; (800138c <HAL_CAN_MspInit+0xa4>)
 8001310:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001314:	6593      	str	r3, [r2, #88]	; 0x58
 8001316:	4b1d      	ldr	r3, [pc, #116]	; (800138c <HAL_CAN_MspInit+0xa4>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <HAL_CAN_MspInit+0xa4>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001326:	4a19      	ldr	r2, [pc, #100]	; (800138c <HAL_CAN_MspInit+0xa4>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132e:	4b17      	ldr	r3, [pc, #92]	; (800138c <HAL_CAN_MspInit+0xa4>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800133a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800133e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800134c:	2309      	movs	r3, #9
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135a:	f009 f84b 	bl	800a3f4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2105      	movs	r1, #5
 8001362:	2013      	movs	r0, #19
 8001364:	f008 fe58 	bl	800a018 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001368:	2013      	movs	r0, #19
 800136a:	f008 fe71 	bl	800a050 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2105      	movs	r1, #5
 8001372:	2014      	movs	r0, #20
 8001374:	f008 fe50 	bl	800a018 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001378:	2014      	movs	r0, #20
 800137a:	f008 fe69 	bl	800a050 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800137e:	bf00      	nop
 8001380:	3728      	adds	r7, #40	; 0x28
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40006400 	.word	0x40006400
 800138c:	40021000 	.word	0x40021000

08001390 <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* canHandle)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

  if(canHandle->Instance==CAN1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0c      	ldr	r2, [pc, #48]	; (80013d0 <HAL_CAN_MspDeInit+0x40>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d111      	bne.n	80013c6 <HAL_CAN_MspDeInit+0x36>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 80013a2:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <HAL_CAN_MspDeInit+0x44>)
 80013a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a6:	4a0b      	ldr	r2, [pc, #44]	; (80013d4 <HAL_CAN_MspDeInit+0x44>)
 80013a8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80013ac:	6593      	str	r3, [r2, #88]	; 0x58

    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 80013ae:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80013b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b6:	f009 f987 	bl	800a6c8 <HAL_GPIO_DeInit>

    /* CAN1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(CAN1_TX_IRQn);
 80013ba:	2013      	movs	r0, #19
 80013bc:	f008 fe56 	bl	800a06c <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 80013c0:	2014      	movs	r0, #20
 80013c2:	f008 fe53 	bl	800a06c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40006400 	.word	0x40006400
 80013d4:	40021000 	.word	0x40021000

080013d8 <CO_init>:
/******************************************************************************/
CO_ReturnError_t CO_init(
        int32_t                 CANbaseAddress,
        uint8_t                 nodeId,
        uint16_t                bitRate)
{
 80013d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013da:	b097      	sub	sp, #92	; 0x5c
 80013dc:	af0a      	add	r7, sp, #40	; 0x28
 80013de:	6178      	str	r0, [r7, #20]
 80013e0:	460b      	mov	r3, r1
 80013e2:	74fb      	strb	r3, [r7, #19]
 80013e4:	4613      	mov	r3, r2
 80013e6:	823b      	strh	r3, [r7, #16]
        CO_traceValueBuffers[i]         = &COO_traceValueBuffers[i][0];
        CO_traceBufferSize[i]           = CO_TRACE_BUFFER_SIZE_FIXED;
    }
  #endif
#else
    if(CO == NULL){    /* Use malloc only once */
 80013e8:	4ba4      	ldr	r3, [pc, #656]	; (800167c <CO_init+0x2a4>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f040 80a2 	bne.w	8001536 <CO_init+0x15e>
        CO = &COO;
 80013f2:	4ba2      	ldr	r3, [pc, #648]	; (800167c <CO_init+0x2a4>)
 80013f4:	4aa2      	ldr	r2, [pc, #648]	; (8001680 <CO_init+0x2a8>)
 80013f6:	601a      	str	r2, [r3, #0]
        CO->CANmodule[0]                    = (CO_CANmodule_t *)    calloc(1, sizeof(CO_CANmodule_t));
 80013f8:	4ba0      	ldr	r3, [pc, #640]	; (800167c <CO_init+0x2a4>)
 80013fa:	681c      	ldr	r4, [r3, #0]
 80013fc:	2120      	movs	r1, #32
 80013fe:	2001      	movs	r0, #1
 8001400:	f00f fefc 	bl	80111fc <calloc>
 8001404:	4603      	mov	r3, r0
 8001406:	6023      	str	r3, [r4, #0]
        CO_CANmodule_rxArray0               = (CO_CANrx_t *)        calloc(CO_RXCAN_NO_MSGS, sizeof(CO_CANrx_t));
 8001408:	210c      	movs	r1, #12
 800140a:	200b      	movs	r0, #11
 800140c:	f00f fef6 	bl	80111fc <calloc>
 8001410:	4603      	mov	r3, r0
 8001412:	461a      	mov	r2, r3
 8001414:	4b9b      	ldr	r3, [pc, #620]	; (8001684 <CO_init+0x2ac>)
 8001416:	601a      	str	r2, [r3, #0]
        CO_CANmodule_txArray0               = (CO_CANtx_t *)        calloc(CO_TXCAN_NO_MSGS, sizeof(CO_CANtx_t));
 8001418:	2110      	movs	r1, #16
 800141a:	2008      	movs	r0, #8
 800141c:	f00f feee 	bl	80111fc <calloc>
 8001420:	4603      	mov	r3, r0
 8001422:	461a      	mov	r2, r3
 8001424:	4b98      	ldr	r3, [pc, #608]	; (8001688 <CO_init+0x2b0>)
 8001426:	601a      	str	r2, [r3, #0]
        for(i=0; i<CO_NO_SDO_SERVER; i++){
 8001428:	2300      	movs	r3, #0
 800142a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800142c:	e012      	b.n	8001454 <CO_init+0x7c>
            CO->SDO[i]                      = (CO_SDO_t *)          calloc(1, sizeof(CO_SDO_t));
 800142e:	4b93      	ldr	r3, [pc, #588]	; (800167c <CO_init+0x2a4>)
 8001430:	681c      	ldr	r4, [r3, #0]
 8001432:	f9b7 502e 	ldrsh.w	r5, [r7, #46]	; 0x2e
 8001436:	217c      	movs	r1, #124	; 0x7c
 8001438:	2001      	movs	r0, #1
 800143a:	f00f fedf 	bl	80111fc <calloc>
 800143e:	4603      	mov	r3, r0
 8001440:	461a      	mov	r2, r3
 8001442:	00ab      	lsls	r3, r5, #2
 8001444:	4423      	add	r3, r4
 8001446:	605a      	str	r2, [r3, #4]
        for(i=0; i<CO_NO_SDO_SERVER; i++){
 8001448:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800144c:	b29b      	uxth	r3, r3
 800144e:	3301      	adds	r3, #1
 8001450:	b29b      	uxth	r3, r3
 8001452:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001454:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001458:	2b00      	cmp	r3, #0
 800145a:	dde8      	ble.n	800142e <CO_init+0x56>
        }
        CO_SDO_ODExtensions                 = (CO_OD_extension_t*)  calloc(CO_OD_NoOfElements, sizeof(CO_OD_extension_t));
 800145c:	210c      	movs	r1, #12
 800145e:	2037      	movs	r0, #55	; 0x37
 8001460:	f00f fecc 	bl	80111fc <calloc>
 8001464:	4603      	mov	r3, r0
 8001466:	461a      	mov	r2, r3
 8001468:	4b88      	ldr	r3, [pc, #544]	; (800168c <CO_init+0x2b4>)
 800146a:	601a      	str	r2, [r3, #0]
        CO->em                              = (CO_EM_t *)           calloc(1, sizeof(CO_EM_t));
 800146c:	4b83      	ldr	r3, [pc, #524]	; (800167c <CO_init+0x2a4>)
 800146e:	681c      	ldr	r4, [r3, #0]
 8001470:	216c      	movs	r1, #108	; 0x6c
 8001472:	2001      	movs	r0, #1
 8001474:	f00f fec2 	bl	80111fc <calloc>
 8001478:	4603      	mov	r3, r0
 800147a:	60a3      	str	r3, [r4, #8]
        CO->emPr                            = (CO_EMpr_t *)         calloc(1, sizeof(CO_EMpr_t));
 800147c:	4b7f      	ldr	r3, [pc, #508]	; (800167c <CO_init+0x2a4>)
 800147e:	681c      	ldr	r4, [r3, #0]
 8001480:	2118      	movs	r1, #24
 8001482:	2001      	movs	r0, #1
 8001484:	f00f feba 	bl	80111fc <calloc>
 8001488:	4603      	mov	r3, r0
 800148a:	60e3      	str	r3, [r4, #12]
        CO->NMT                             = (CO_NMT_t *)          calloc(1, sizeof(CO_NMT_t));
 800148c:	4b7b      	ldr	r3, [pc, #492]	; (800167c <CO_init+0x2a4>)
 800148e:	681c      	ldr	r4, [r3, #0]
 8001490:	2120      	movs	r1, #32
 8001492:	2001      	movs	r0, #1
 8001494:	f00f feb2 	bl	80111fc <calloc>
 8001498:	4603      	mov	r3, r0
 800149a:	6123      	str	r3, [r4, #16]
        CO->SYNC                            = (CO_SYNC_t *)         calloc(1, sizeof(CO_SYNC_t));
 800149c:	4b77      	ldr	r3, [pc, #476]	; (800167c <CO_init+0x2a4>)
 800149e:	681c      	ldr	r4, [r3, #0]
 80014a0:	2138      	movs	r1, #56	; 0x38
 80014a2:	2001      	movs	r0, #1
 80014a4:	f00f feaa 	bl	80111fc <calloc>
 80014a8:	4603      	mov	r3, r0
 80014aa:	6163      	str	r3, [r4, #20]
        for(i=0; i<CO_NO_RPDO; i++){
 80014ac:	2300      	movs	r3, #0
 80014ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80014b0:	e012      	b.n	80014d8 <CO_init+0x100>
            CO->RPDO[i]                     = (CO_RPDO_t *)         calloc(1, sizeof(CO_RPDO_t));
 80014b2:	4b72      	ldr	r3, [pc, #456]	; (800167c <CO_init+0x2a4>)
 80014b4:	681c      	ldr	r4, [r3, #0]
 80014b6:	f9b7 502e 	ldrsh.w	r5, [r7, #46]	; 0x2e
 80014ba:	215c      	movs	r1, #92	; 0x5c
 80014bc:	2001      	movs	r0, #1
 80014be:	f00f fe9d 	bl	80111fc <calloc>
 80014c2:	4603      	mov	r3, r0
 80014c4:	461a      	mov	r2, r3
 80014c6:	1dab      	adds	r3, r5, #6
 80014c8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        for(i=0; i<CO_NO_RPDO; i++){
 80014cc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	3301      	adds	r3, #1
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80014d8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80014dc:	2b03      	cmp	r3, #3
 80014de:	dde8      	ble.n	80014b2 <CO_init+0xda>
        }
        for(i=0; i<CO_NO_TPDO; i++){
 80014e0:	2300      	movs	r3, #0
 80014e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80014e4:	e013      	b.n	800150e <CO_init+0x136>
            CO->TPDO[i]                     = (CO_TPDO_t *)         calloc(1, sizeof(CO_TPDO_t));
 80014e6:	4b65      	ldr	r3, [pc, #404]	; (800167c <CO_init+0x2a4>)
 80014e8:	681c      	ldr	r4, [r3, #0]
 80014ea:	f9b7 502e 	ldrsh.w	r5, [r7, #46]	; 0x2e
 80014ee:	2154      	movs	r1, #84	; 0x54
 80014f0:	2001      	movs	r0, #1
 80014f2:	f00f fe83 	bl	80111fc <calloc>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	f105 030a 	add.w	r3, r5, #10
 80014fe:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        for(i=0; i<CO_NO_TPDO; i++){
 8001502:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001506:	b29b      	uxth	r3, r3
 8001508:	3301      	adds	r3, #1
 800150a:	b29b      	uxth	r3, r3
 800150c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800150e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001512:	2b03      	cmp	r3, #3
 8001514:	dde7      	ble.n	80014e6 <CO_init+0x10e>
        }
        CO->HBcons                          = (CO_HBconsumer_t *)   calloc(1, sizeof(CO_HBconsumer_t));
 8001516:	4b59      	ldr	r3, [pc, #356]	; (800167c <CO_init+0x2a4>)
 8001518:	681c      	ldr	r4, [r3, #0]
 800151a:	2118      	movs	r1, #24
 800151c:	2001      	movs	r0, #1
 800151e:	f00f fe6d 	bl	80111fc <calloc>
 8001522:	4603      	mov	r3, r0
 8001524:	63a3      	str	r3, [r4, #56]	; 0x38
        CO_HBcons_monitoredNodes            = (CO_HBconsNode_t *)   calloc(CO_NO_HB_CONS, sizeof(CO_HBconsNode_t));
 8001526:	2108      	movs	r1, #8
 8001528:	2004      	movs	r0, #4
 800152a:	f00f fe67 	bl	80111fc <calloc>
 800152e:	4603      	mov	r3, r0
 8001530:	461a      	mov	r2, r3
 8001532:	4b57      	ldr	r3, [pc, #348]	; (8001690 <CO_init+0x2b8>)
 8001534:	601a      	str	r2, [r3, #0]
            }
        }
      #endif
    }

    CO_memoryUsed = sizeof(CO_CANmodule_t)
 8001536:	4b57      	ldr	r3, [pc, #348]	; (8001694 <CO_init+0x2bc>)
 8001538:	f640 0208 	movw	r2, #2056	; 0x808
 800153c:	601a      	str	r2, [r3, #0]
    for(i=0; i<CO_NO_TRACE; i++) {
        CO_memoryUsed += CO_traceBufferSize[i] * 8;
    }
  #endif

    errCnt = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(CO->CANmodule[0]                 == NULL) errCnt++;
 8001542:	4b4e      	ldr	r3, [pc, #312]	; (800167c <CO_init+0x2a4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d102      	bne.n	8001552 <CO_init+0x17a>
 800154c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800154e:	3301      	adds	r3, #1
 8001550:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(CO_CANmodule_rxArray0            == NULL) errCnt++;
 8001552:	4b4c      	ldr	r3, [pc, #304]	; (8001684 <CO_init+0x2ac>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d102      	bne.n	8001560 <CO_init+0x188>
 800155a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800155c:	3301      	adds	r3, #1
 800155e:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(CO_CANmodule_txArray0            == NULL) errCnt++;
 8001560:	4b49      	ldr	r3, [pc, #292]	; (8001688 <CO_init+0x2b0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d102      	bne.n	800156e <CO_init+0x196>
 8001568:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800156a:	3301      	adds	r3, #1
 800156c:	857b      	strh	r3, [r7, #42]	; 0x2a
    for(i=0; i<CO_NO_SDO_SERVER; i++){
 800156e:	2300      	movs	r3, #0
 8001570:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001572:	e011      	b.n	8001598 <CO_init+0x1c0>
        if(CO->SDO[i]                   == NULL) errCnt++;
 8001574:	4b41      	ldr	r3, [pc, #260]	; (800167c <CO_init+0x2a4>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <CO_init+0x1b4>
 8001586:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001588:	3301      	adds	r3, #1
 800158a:	857b      	strh	r3, [r7, #42]	; 0x2a
    for(i=0; i<CO_NO_SDO_SERVER; i++){
 800158c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001590:	b29b      	uxth	r3, r3
 8001592:	3301      	adds	r3, #1
 8001594:	b29b      	uxth	r3, r3
 8001596:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001598:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800159c:	2b00      	cmp	r3, #0
 800159e:	dde9      	ble.n	8001574 <CO_init+0x19c>
    }
    if(CO_SDO_ODExtensions              == NULL) errCnt++;
 80015a0:	4b3a      	ldr	r3, [pc, #232]	; (800168c <CO_init+0x2b4>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <CO_init+0x1d6>
 80015a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80015aa:	3301      	adds	r3, #1
 80015ac:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(CO->em                           == NULL) errCnt++;
 80015ae:	4b33      	ldr	r3, [pc, #204]	; (800167c <CO_init+0x2a4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <CO_init+0x1e6>
 80015b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80015ba:	3301      	adds	r3, #1
 80015bc:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(CO->emPr                         == NULL) errCnt++;
 80015be:	4b2f      	ldr	r3, [pc, #188]	; (800167c <CO_init+0x2a4>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d102      	bne.n	80015ce <CO_init+0x1f6>
 80015c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80015ca:	3301      	adds	r3, #1
 80015cc:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(CO->NMT                          == NULL) errCnt++;
 80015ce:	4b2b      	ldr	r3, [pc, #172]	; (800167c <CO_init+0x2a4>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d102      	bne.n	80015de <CO_init+0x206>
 80015d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80015da:	3301      	adds	r3, #1
 80015dc:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(CO->SYNC                         == NULL) errCnt++;
 80015de:	4b27      	ldr	r3, [pc, #156]	; (800167c <CO_init+0x2a4>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d102      	bne.n	80015ee <CO_init+0x216>
 80015e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80015ea:	3301      	adds	r3, #1
 80015ec:	857b      	strh	r3, [r7, #42]	; 0x2a
    for(i=0; i<CO_NO_RPDO; i++){
 80015ee:	2300      	movs	r3, #0
 80015f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80015f2:	e011      	b.n	8001618 <CO_init+0x240>
        if(CO->RPDO[i]                  == NULL) errCnt++;
 80015f4:	4b21      	ldr	r3, [pc, #132]	; (800167c <CO_init+0x2a4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80015fc:	3206      	adds	r2, #6
 80015fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d102      	bne.n	800160c <CO_init+0x234>
 8001606:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001608:	3301      	adds	r3, #1
 800160a:	857b      	strh	r3, [r7, #42]	; 0x2a
    for(i=0; i<CO_NO_RPDO; i++){
 800160c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001610:	b29b      	uxth	r3, r3
 8001612:	3301      	adds	r3, #1
 8001614:	b29b      	uxth	r3, r3
 8001616:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001618:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800161c:	2b03      	cmp	r3, #3
 800161e:	dde9      	ble.n	80015f4 <CO_init+0x21c>
    }
    for(i=0; i<CO_NO_TPDO; i++){
 8001620:	2300      	movs	r3, #0
 8001622:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001624:	e011      	b.n	800164a <CO_init+0x272>
        if(CO->TPDO[i]                  == NULL) errCnt++;
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <CO_init+0x2a4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800162e:	320a      	adds	r2, #10
 8001630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d102      	bne.n	800163e <CO_init+0x266>
 8001638:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800163a:	3301      	adds	r3, #1
 800163c:	857b      	strh	r3, [r7, #42]	; 0x2a
    for(i=0; i<CO_NO_TPDO; i++){
 800163e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001642:	b29b      	uxth	r3, r3
 8001644:	3301      	adds	r3, #1
 8001646:	b29b      	uxth	r3, r3
 8001648:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800164a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800164e:	2b03      	cmp	r3, #3
 8001650:	dde9      	ble.n	8001626 <CO_init+0x24e>
    }
    if(CO->HBcons                       == NULL) errCnt++;
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <CO_init+0x2a4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <CO_init+0x28a>
 800165c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800165e:	3301      	adds	r3, #1
 8001660:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(CO_HBcons_monitoredNodes         == NULL) errCnt++;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <CO_init+0x2b8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d102      	bne.n	8001670 <CO_init+0x298>
 800166a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800166c:	3301      	adds	r3, #1
 800166e:	857b      	strh	r3, [r7, #42]	; 0x2a
    for(i=0; i<CO_NO_TRACE; i++) {
        if(CO->trace[i]                 == NULL) errCnt++;
    }
  #endif

    if(errCnt != 0) return CO_ERROR_OUT_OF_MEMORY;
 8001670:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001672:	2b00      	cmp	r3, #0
 8001674:	d010      	beq.n	8001698 <CO_init+0x2c0>
 8001676:	f06f 0301 	mvn.w	r3, #1
 800167a:	e262      	b.n	8001b42 <CO_init+0x76a>
 800167c:	20000618 	.word	0x20000618
 8001680:	200005dc 	.word	0x200005dc
 8001684:	2000061c 	.word	0x2000061c
 8001688:	20000620 	.word	0x20000620
 800168c:	20000624 	.word	0x20000624
 8001690:	20000628 	.word	0x20000628
 8001694:	200005d8 	.word	0x200005d8
#endif


    CO->CANmodule[0]->CANnormal = false;
 8001698:	4b9d      	ldr	r3, [pc, #628]	; (8001910 <CO_init+0x538>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2200      	movs	r2, #0
 80016a0:	749a      	strb	r2, [r3, #18]
    CO_CANsetConfigurationMode(CANbaseAddress);
 80016a2:	6978      	ldr	r0, [r7, #20]
 80016a4:	f006 f964 	bl	8007970 <CO_CANsetConfigurationMode>

    /* Verify CANopen Node-ID */
    if(nodeId<1 || nodeId>127)
 80016a8:	7cfb      	ldrb	r3, [r7, #19]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <CO_init+0x2de>
 80016ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	da05      	bge.n	80016c2 <CO_init+0x2ea>
    {
        CO_delete(CANbaseAddress);
 80016b6:	6978      	ldr	r0, [r7, #20]
 80016b8:	f000 fa50 	bl	8001b5c <CO_delete>
        return CO_ERROR_PARAMETERS;
 80016bc:	f06f 030b 	mvn.w	r3, #11
 80016c0:	e23f      	b.n	8001b42 <CO_init+0x76a>
    }


    err = CO_CANmodule_init(
            CO->CANmodule[0],
 80016c2:	4b93      	ldr	r3, [pc, #588]	; (8001910 <CO_init+0x538>)
 80016c4:	681b      	ldr	r3, [r3, #0]
    err = CO_CANmodule_init(
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	6979      	ldr	r1, [r7, #20]
 80016ca:	4b92      	ldr	r3, [pc, #584]	; (8001914 <CO_init+0x53c>)
 80016cc:	681c      	ldr	r4, [r3, #0]
 80016ce:	4b92      	ldr	r3, [pc, #584]	; (8001918 <CO_init+0x540>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	8a3a      	ldrh	r2, [r7, #16]
 80016d4:	9202      	str	r2, [sp, #8]
 80016d6:	2208      	movs	r2, #8
 80016d8:	9201      	str	r2, [sp, #4]
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	230b      	movs	r3, #11
 80016de:	4622      	mov	r2, r4
 80016e0:	f006 f98c 	bl	80079fc <CO_CANmodule_init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            CO_RXCAN_NO_MSGS,
            CO_CANmodule_txArray0,
            CO_TXCAN_NO_MSGS,
            bitRate);

    if(err){CO_delete(CANbaseAddress); return err;}
 80016ea:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d005      	beq.n	80016fe <CO_init+0x326>
 80016f2:	6978      	ldr	r0, [r7, #20]
 80016f4:	f000 fa32 	bl	8001b5c <CO_delete>
 80016f8:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80016fc:	e221      	b.n	8001b42 <CO_init+0x76a>

    for (i=0; i<CO_NO_SDO_SERVER; i++)
 80016fe:	2300      	movs	r3, #0
 8001700:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001702:	e060      	b.n	80017c6 <CO_init+0x3ee>
    {
        uint32_t COB_IDClientToServer;
        uint32_t COB_IDServerToClient;
        if(i==0){
 8001704:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001708:	2b00      	cmp	r3, #0
 800170a:	d108      	bne.n	800171e <CO_init+0x346>
            /*Default SDO server must be located at first index*/
            COB_IDClientToServer = CO_CAN_ID_RSDO + nodeId;
 800170c:	7cfb      	ldrb	r3, [r7, #19]
 800170e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
            COB_IDServerToClient = CO_CAN_ID_TSDO + nodeId;
 8001714:	7cfb      	ldrb	r3, [r7, #19]
 8001716:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 800171a:	623b      	str	r3, [r7, #32]
 800171c:	e015      	b.n	800174a <CO_init+0x372>
        }else{
            COB_IDClientToServer = OD_SDOServerParameter[i].COB_IDClientToServer;
 800171e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001722:	497e      	ldr	r1, [pc, #504]	; (800191c <CO_init+0x544>)
 8001724:	4613      	mov	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	3364      	adds	r3, #100	; 0x64
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
            COB_IDServerToClient = OD_SDOServerParameter[i].COB_IDServerToClient;
 8001734:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001738:	4978      	ldr	r1, [pc, #480]	; (800191c <CO_init+0x544>)
 800173a:	4613      	mov	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4413      	add	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	440b      	add	r3, r1
 8001744:	3368      	adds	r3, #104	; 0x68
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	623b      	str	r3, [r7, #32]
        }

        err = CO_SDO_init(
                CO->SDO[i],
 800174a:	4b71      	ldr	r3, [pc, #452]	; (8001910 <CO_init+0x538>)
 800174c:	681a      	ldr	r2, [r3, #0]
        err = CO_SDO_init(
 800174e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	685e      	ldr	r6, [r3, #4]
 8001758:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800175a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800175e:	fa1f fc83 	uxth.w	ip, r3
 8001762:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <CO_init+0x39a>
                COB_IDClientToServer,
                COB_IDServerToClient,
                OD_H1200_SDO_SERVER_PARAM+i,
                i==0 ? 0 : CO->SDO[0],
 800176a:	4b69      	ldr	r3, [pc, #420]	; (8001910 <CO_init+0x538>)
 800176c:	681b      	ldr	r3, [r3, #0]
        err = CO_SDO_init(
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	e000      	b.n	8001774 <CO_init+0x39c>
 8001772:	2300      	movs	r3, #0
 8001774:	4a6a      	ldr	r2, [pc, #424]	; (8001920 <CO_init+0x548>)
 8001776:	6812      	ldr	r2, [r2, #0]
               &CO_OD[0],
                CO_OD_NoOfElements,
                CO_SDO_ODExtensions,
                nodeId,
                CO->CANmodule[0],
 8001778:	4965      	ldr	r1, [pc, #404]	; (8001910 <CO_init+0x538>)
 800177a:	6809      	ldr	r1, [r1, #0]
        err = CO_SDO_init(
 800177c:	6809      	ldr	r1, [r1, #0]
 800177e:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 8001780:	3006      	adds	r0, #6
 8001782:	b280      	uxth	r0, r0
                CO_RXCAN_SDO_SRV+i,
                CO->CANmodule[0],
 8001784:	4c62      	ldr	r4, [pc, #392]	; (8001910 <CO_init+0x538>)
 8001786:	6824      	ldr	r4, [r4, #0]
        err = CO_SDO_init(
 8001788:	6824      	ldr	r4, [r4, #0]
 800178a:	8dfd      	ldrh	r5, [r7, #46]	; 0x2e
 800178c:	3506      	adds	r5, #6
 800178e:	b2ad      	uxth	r5, r5
 8001790:	9508      	str	r5, [sp, #32]
 8001792:	9407      	str	r4, [sp, #28]
 8001794:	9006      	str	r0, [sp, #24]
 8001796:	9105      	str	r1, [sp, #20]
 8001798:	7cf9      	ldrb	r1, [r7, #19]
 800179a:	9104      	str	r1, [sp, #16]
 800179c:	9203      	str	r2, [sp, #12]
 800179e:	2237      	movs	r2, #55	; 0x37
 80017a0:	9202      	str	r2, [sp, #8]
 80017a2:	4a60      	ldr	r2, [pc, #384]	; (8001924 <CO_init+0x54c>)
 80017a4:	9201      	str	r2, [sp, #4]
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	4663      	mov	r3, ip
 80017aa:	6a3a      	ldr	r2, [r7, #32]
 80017ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017ae:	4630      	mov	r0, r6
 80017b0:	f004 f918 	bl	80059e4 <CO_SDO_init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    for (i=0; i<CO_NO_SDO_SERVER; i++)
 80017ba:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80017be:	b29b      	uxth	r3, r3
 80017c0:	3301      	adds	r3, #1
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80017c6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	dd9a      	ble.n	8001704 <CO_init+0x32c>
                CO_TXCAN_SDO_SRV+i);
    }

    if(err){CO_delete(CANbaseAddress); return err;}
 80017ce:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d005      	beq.n	80017e2 <CO_init+0x40a>
 80017d6:	6978      	ldr	r0, [r7, #20]
 80017d8:	f000 f9c0 	bl	8001b5c <CO_delete>
 80017dc:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80017e0:	e1af      	b.n	8001b42 <CO_init+0x76a>


    err = CO_EM_init(
            CO->em,
 80017e2:	4b4b      	ldr	r3, [pc, #300]	; (8001910 <CO_init+0x538>)
 80017e4:	681b      	ldr	r3, [r3, #0]
    err = CO_EM_init(
 80017e6:	6898      	ldr	r0, [r3, #8]
            CO->emPr,
 80017e8:	4b49      	ldr	r3, [pc, #292]	; (8001910 <CO_init+0x538>)
 80017ea:	681b      	ldr	r3, [r3, #0]
    err = CO_EM_init(
 80017ec:	68d9      	ldr	r1, [r3, #12]
            CO->SDO[0],
 80017ee:	4b48      	ldr	r3, [pc, #288]	; (8001910 <CO_init+0x538>)
 80017f0:	681b      	ldr	r3, [r3, #0]
    err = CO_EM_init(
 80017f2:	685c      	ldr	r4, [r3, #4]
           &OD_errorStatusBits[0],
            ODL_errorStatusBits_stringLength,
           &OD_errorRegister,
           &OD_preDefinedErrorField[0],
            ODL_preDefinedErrorField_arrayLength,
            CO->CANmodule[0],
 80017f4:	4b46      	ldr	r3, [pc, #280]	; (8001910 <CO_init+0x538>)
 80017f6:	681b      	ldr	r3, [r3, #0]
    err = CO_EM_init(
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	7cfa      	ldrb	r2, [r7, #19]
 80017fc:	b292      	uxth	r2, r2
 80017fe:	3280      	adds	r2, #128	; 0x80
 8001800:	b292      	uxth	r2, r2
 8001802:	9206      	str	r2, [sp, #24]
 8001804:	2201      	movs	r2, #1
 8001806:	9205      	str	r2, [sp, #20]
 8001808:	9304      	str	r3, [sp, #16]
 800180a:	2308      	movs	r3, #8
 800180c:	9303      	str	r3, [sp, #12]
 800180e:	4b46      	ldr	r3, [pc, #280]	; (8001928 <CO_init+0x550>)
 8001810:	9302      	str	r3, [sp, #8]
 8001812:	4b46      	ldr	r3, [pc, #280]	; (800192c <CO_init+0x554>)
 8001814:	9301      	str	r3, [sp, #4]
 8001816:	230a      	movs	r3, #10
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	4b45      	ldr	r3, [pc, #276]	; (8001930 <CO_init+0x558>)
 800181c:	4622      	mov	r2, r4
 800181e:	f001 fe71 	bl	8003504 <CO_EM_init>
 8001822:	4603      	mov	r3, r0
 8001824:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            CO_TXCAN_EMERG,
            CO_CAN_ID_EMERGENCY + nodeId);

    if(err){CO_delete(CANbaseAddress); return err;}
 8001828:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <CO_init+0x464>
 8001830:	6978      	ldr	r0, [r7, #20]
 8001832:	f000 f993 	bl	8001b5c <CO_delete>
 8001836:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800183a:	e182      	b.n	8001b42 <CO_init+0x76a>


    err = CO_NMT_init(
            CO->NMT,
 800183c:	4b34      	ldr	r3, [pc, #208]	; (8001910 <CO_init+0x538>)
 800183e:	681b      	ldr	r3, [r3, #0]
    err = CO_NMT_init(
 8001840:	6918      	ldr	r0, [r3, #16]
            CO->emPr,
 8001842:	4b33      	ldr	r3, [pc, #204]	; (8001910 <CO_init+0x538>)
 8001844:	681b      	ldr	r3, [r3, #0]
    err = CO_NMT_init(
 8001846:	68dc      	ldr	r4, [r3, #12]
            nodeId,
            500,
            CO->CANmodule[0],
 8001848:	4b31      	ldr	r3, [pc, #196]	; (8001910 <CO_init+0x538>)
 800184a:	681b      	ldr	r3, [r3, #0]
    err = CO_NMT_init(
 800184c:	681b      	ldr	r3, [r3, #0]
            CO_RXCAN_NMT,
            CO_CAN_ID_NMT_SERVICE,
            CO->CANmodule[0],
 800184e:	4a30      	ldr	r2, [pc, #192]	; (8001910 <CO_init+0x538>)
 8001850:	6812      	ldr	r2, [r2, #0]
    err = CO_NMT_init(
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	7cf9      	ldrb	r1, [r7, #19]
 8001856:	b289      	uxth	r1, r1
 8001858:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
 800185c:	b289      	uxth	r1, r1
 800185e:	7cfd      	ldrb	r5, [r7, #19]
 8001860:	9105      	str	r1, [sp, #20]
 8001862:	2107      	movs	r1, #7
 8001864:	9104      	str	r1, [sp, #16]
 8001866:	9203      	str	r2, [sp, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	9202      	str	r2, [sp, #8]
 800186c:	2200      	movs	r2, #0
 800186e:	9201      	str	r2, [sp, #4]
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001876:	462a      	mov	r2, r5
 8001878:	4621      	mov	r1, r4
 800187a:	f002 fb5d 	bl	8003f38 <CO_NMT_init>
 800187e:	4603      	mov	r3, r0
 8001880:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            CO_TXCAN_HB,
            CO_CAN_ID_HEARTBEAT + nodeId);


    if(err){CO_delete(CANbaseAddress); return err;}
 8001884:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001888:	2b00      	cmp	r3, #0
 800188a:	d005      	beq.n	8001898 <CO_init+0x4c0>
 800188c:	6978      	ldr	r0, [r7, #20]
 800188e:	f000 f965 	bl	8001b5c <CO_delete>
 8001892:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001896:	e154      	b.n	8001b42 <CO_init+0x76a>
            0);               /* synchronous message flag bit */
#endif


    err = CO_SYNC_init(
            CO->SYNC,
 8001898:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <CO_init+0x538>)
 800189a:	681b      	ldr	r3, [r3, #0]
    err = CO_SYNC_init(
 800189c:	695d      	ldr	r5, [r3, #20]
            CO->em,
 800189e:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <CO_init+0x538>)
 80018a0:	681b      	ldr	r3, [r3, #0]
    err = CO_SYNC_init(
 80018a2:	689e      	ldr	r6, [r3, #8]
            CO->SDO[0],
 80018a4:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <CO_init+0x538>)
 80018a6:	681b      	ldr	r3, [r3, #0]
    err = CO_SYNC_init(
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	60fb      	str	r3, [r7, #12]
           &CO->NMT->operatingState,
 80018ac:	4b18      	ldr	r3, [pc, #96]	; (8001910 <CO_init+0x538>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	691b      	ldr	r3, [r3, #16]
    err = CO_SYNC_init(
 80018b2:	469c      	mov	ip, r3
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <CO_init+0x544>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	4a18      	ldr	r2, [pc, #96]	; (800191c <CO_init+0x544>)
 80018ba:	68d2      	ldr	r2, [r2, #12]
 80018bc:	4917      	ldr	r1, [pc, #92]	; (800191c <CO_init+0x544>)
 80018be:	f891 1058 	ldrb.w	r1, [r1, #88]	; 0x58
 80018c2:	60b9      	str	r1, [r7, #8]
            OD_COB_ID_SYNCMessage,
            OD_communicationCyclePeriod,
            OD_synchronousCounterOverflowValue,
            CO->CANmodule[0],
 80018c4:	4812      	ldr	r0, [pc, #72]	; (8001910 <CO_init+0x538>)
 80018c6:	6800      	ldr	r0, [r0, #0]
    err = CO_SYNC_init(
 80018c8:	6800      	ldr	r0, [r0, #0]
            CO_RXCAN_SYNC,
            CO->CANmodule[0],
 80018ca:	4c11      	ldr	r4, [pc, #68]	; (8001910 <CO_init+0x538>)
 80018cc:	6824      	ldr	r4, [r4, #0]
    err = CO_SYNC_init(
 80018ce:	6824      	ldr	r4, [r4, #0]
 80018d0:	2100      	movs	r1, #0
 80018d2:	9106      	str	r1, [sp, #24]
 80018d4:	9405      	str	r4, [sp, #20]
 80018d6:	2401      	movs	r4, #1
 80018d8:	9404      	str	r4, [sp, #16]
 80018da:	9003      	str	r0, [sp, #12]
 80018dc:	68b9      	ldr	r1, [r7, #8]
 80018de:	9102      	str	r1, [sp, #8]
 80018e0:	9201      	str	r2, [sp, #4]
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	4663      	mov	r3, ip
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	4631      	mov	r1, r6
 80018ea:	4628      	mov	r0, r5
 80018ec:	f005 fe8e 	bl	800760c <CO_SYNC_init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            CO_TXCAN_SYNC);

    if(err){CO_delete(CANbaseAddress); return err;}
 80018f6:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d005      	beq.n	800190a <CO_init+0x532>
 80018fe:	6978      	ldr	r0, [r7, #20]
 8001900:	f000 f92c 	bl	8001b5c <CO_delete>
 8001904:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001908:	e11b      	b.n	8001b42 <CO_init+0x76a>


    for(i=0; i<CO_NO_RPDO; i++){
 800190a:	2300      	movs	r3, #0
 800190c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800190e:	e07f      	b.n	8001a10 <CO_init+0x638>
 8001910:	20000618 	.word	0x20000618
 8001914:	2000061c 	.word	0x2000061c
 8001918:	20000620 	.word	0x20000620
 800191c:	2000017c 	.word	0x2000017c
 8001920:	20000624 	.word	0x20000624
 8001924:	08014094 	.word	0x08014094
 8001928:	2000000c 	.word	0x2000000c
 800192c:	20000004 	.word	0x20000004
 8001930:	20000034 	.word	0x20000034
        CO_CANmodule_t *CANdevRx = CO->CANmodule[0];
 8001934:	4b85      	ldr	r3, [pc, #532]	; (8001b4c <CO_init+0x774>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	61fb      	str	r3, [r7, #28]
        uint16_t CANdevRxIdx = CO_RXCAN_RPDO + i;
 800193c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800193e:	3302      	adds	r3, #2
 8001940:	837b      	strh	r3, [r7, #26]

        err = CO_RPDO_init(
                CO->RPDO[i],
 8001942:	4b82      	ldr	r3, [pc, #520]	; (8001b4c <CO_init+0x774>)
 8001944:	681b      	ldr	r3, [r3, #0]
        err = CO_RPDO_init(
 8001946:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800194a:	3206      	adds	r2, #6
 800194c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
                CO->em,
 8001950:	4b7e      	ldr	r3, [pc, #504]	; (8001b4c <CO_init+0x774>)
 8001952:	681b      	ldr	r3, [r3, #0]
        err = CO_RPDO_init(
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	60fb      	str	r3, [r7, #12]
                CO->SDO[0],
 8001958:	4b7c      	ldr	r3, [pc, #496]	; (8001b4c <CO_init+0x774>)
 800195a:	681b      	ldr	r3, [r3, #0]
        err = CO_RPDO_init(
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	60bb      	str	r3, [r7, #8]
                CO->SYNC,
 8001960:	4b7a      	ldr	r3, [pc, #488]	; (8001b4c <CO_init+0x774>)
 8001962:	681b      	ldr	r3, [r3, #0]
        err = CO_RPDO_init(
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	607b      	str	r3, [r7, #4]
               &CO->NMT->operatingState,
 8001968:	4b78      	ldr	r3, [pc, #480]	; (8001b4c <CO_init+0x774>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	691b      	ldr	r3, [r3, #16]
        err = CO_RPDO_init(
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001974:	2b03      	cmp	r3, #3
 8001976:	dc06      	bgt.n	8001986 <CO_init+0x5ae>
                nodeId,
                ((i<4) ? (CO_CAN_ID_RPDO_1+i*0x100) : 0),
 8001978:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800197c:	3302      	adds	r3, #2
        err = CO_RPDO_init(
 800197e:	b29b      	uxth	r3, r3
 8001980:	021b      	lsls	r3, r3, #8
 8001982:	b29a      	uxth	r2, r3
 8001984:	e000      	b.n	8001988 <CO_init+0x5b0>
 8001986:	2200      	movs	r2, #0
                0,
                (CO_RPDOCommPar_t*) &OD_RPDOCommunicationParameter[i],
 8001988:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 800198c:	460b      	mov	r3, r1
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	440b      	add	r3, r1
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	3368      	adds	r3, #104	; 0x68
 8001996:	496e      	ldr	r1, [pc, #440]	; (8001b50 <CO_init+0x778>)
 8001998:	440b      	add	r3, r1
 800199a:	1d18      	adds	r0, r3, #4
                (CO_RPDOMapPar_t*) &OD_RPDOMappingParameter[i],
 800199c:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 80019a0:	460b      	mov	r3, r1
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	440b      	add	r3, r1
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	3398      	adds	r3, #152	; 0x98
 80019aa:	4969      	ldr	r1, [pc, #420]	; (8001b50 <CO_init+0x778>)
 80019ac:	440b      	add	r3, r1
 80019ae:	3304      	adds	r3, #4
        err = CO_RPDO_init(
 80019b0:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80019b2:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 80019b6:	b289      	uxth	r1, r1
 80019b8:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 80019ba:	f504 54b0 	add.w	r4, r4, #5632	; 0x1600
 80019be:	b2a4      	uxth	r4, r4
 80019c0:	8b7d      	ldrh	r5, [r7, #26]
 80019c2:	9509      	str	r5, [sp, #36]	; 0x24
 80019c4:	69fd      	ldr	r5, [r7, #28]
 80019c6:	9508      	str	r5, [sp, #32]
 80019c8:	9407      	str	r4, [sp, #28]
 80019ca:	9106      	str	r1, [sp, #24]
 80019cc:	9305      	str	r3, [sp, #20]
 80019ce:	9004      	str	r0, [sp, #16]
 80019d0:	2300      	movs	r3, #0
 80019d2:	9303      	str	r3, [sp, #12]
 80019d4:	9202      	str	r2, [sp, #8]
 80019d6:	7cfb      	ldrb	r3, [r7, #19]
 80019d8:	9301      	str	r3, [sp, #4]
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	68f9      	ldr	r1, [r7, #12]
 80019e4:	4630      	mov	r0, r6
 80019e6:	f003 fb39 	bl	800505c <CO_RPDO_init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                OD_H1400_RXPDO_1_PARAM+i,
                OD_H1600_RXPDO_1_MAPPING+i,
                CANdevRx,
                CANdevRxIdx);

        if(err){CO_delete(CANbaseAddress); return err;}
 80019f0:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <CO_init+0x62c>
 80019f8:	6978      	ldr	r0, [r7, #20]
 80019fa:	f000 f8af 	bl	8001b5c <CO_delete>
 80019fe:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001a02:	e09e      	b.n	8001b42 <CO_init+0x76a>
    for(i=0; i<CO_NO_RPDO; i++){
 8001a04:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001a10:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001a14:	2b03      	cmp	r3, #3
 8001a16:	dd8d      	ble.n	8001934 <CO_init+0x55c>
    }


    for(i=0; i<CO_NO_TPDO; i++){
 8001a18:	2300      	movs	r3, #0
 8001a1a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001a1c:	e067      	b.n	8001aee <CO_init+0x716>
        err = CO_TPDO_init(
                CO->TPDO[i],
 8001a1e:	4b4b      	ldr	r3, [pc, #300]	; (8001b4c <CO_init+0x774>)
 8001a20:	681b      	ldr	r3, [r3, #0]
        err = CO_TPDO_init(
 8001a22:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001a26:	320a      	adds	r2, #10
 8001a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a2c:	60fb      	str	r3, [r7, #12]
                CO->em,
 8001a2e:	4b47      	ldr	r3, [pc, #284]	; (8001b4c <CO_init+0x774>)
 8001a30:	681b      	ldr	r3, [r3, #0]
        err = CO_TPDO_init(
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	60bb      	str	r3, [r7, #8]
                CO->SDO[0],
 8001a36:	4b45      	ldr	r3, [pc, #276]	; (8001b4c <CO_init+0x774>)
 8001a38:	681b      	ldr	r3, [r3, #0]
        err = CO_TPDO_init(
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	607b      	str	r3, [r7, #4]
               &CO->NMT->operatingState,
 8001a3e:	4b43      	ldr	r3, [pc, #268]	; (8001b4c <CO_init+0x774>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	691b      	ldr	r3, [r3, #16]
        err = CO_TPDO_init(
 8001a44:	469c      	mov	ip, r3
 8001a46:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	dc06      	bgt.n	8001a5c <CO_init+0x684>
                nodeId,
                ((i<4) ? (CO_CAN_ID_TPDO_1+i*0x100) : 0),
 8001a4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a50:	021b      	lsls	r3, r3, #8
 8001a52:	b29b      	uxth	r3, r3
        err = CO_TPDO_init(
 8001a54:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	e000      	b.n	8001a5e <CO_init+0x686>
 8001a5c:	2200      	movs	r2, #0
                0,
                (CO_TPDOCommPar_t*) &OD_TPDOCommunicationParameter[i],
 8001a5e:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 8001a62:	460b      	mov	r3, r1
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	440b      	add	r3, r1
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a6e:	4938      	ldr	r1, [pc, #224]	; (8001b50 <CO_init+0x778>)
 8001a70:	440b      	add	r3, r1
 8001a72:	1d18      	adds	r0, r3, #4
                (CO_TPDOMapPar_t*) &OD_TPDOMappingParameter[i],
 8001a74:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 8001a78:	460b      	mov	r3, r1
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	440b      	add	r3, r1
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001a84:	4932      	ldr	r1, [pc, #200]	; (8001b50 <CO_init+0x778>)
 8001a86:	440b      	add	r3, r1
 8001a88:	3304      	adds	r3, #4
        err = CO_TPDO_init(
 8001a8a:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8001a8c:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 8001a90:	b289      	uxth	r1, r1
 8001a92:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8001a94:	f504 54d0 	add.w	r4, r4, #6656	; 0x1a00
 8001a98:	b2a4      	uxth	r4, r4
                OD_H1800_TXPDO_1_PARAM+i,
                OD_H1A00_TXPDO_1_MAPPING+i,
                CO->CANmodule[0],
 8001a9a:	4d2c      	ldr	r5, [pc, #176]	; (8001b4c <CO_init+0x774>)
 8001a9c:	682d      	ldr	r5, [r5, #0]
        err = CO_TPDO_init(
 8001a9e:	682d      	ldr	r5, [r5, #0]
 8001aa0:	8dfe      	ldrh	r6, [r7, #46]	; 0x2e
 8001aa2:	3602      	adds	r6, #2
 8001aa4:	b2b6      	uxth	r6, r6
 8001aa6:	9608      	str	r6, [sp, #32]
 8001aa8:	9507      	str	r5, [sp, #28]
 8001aaa:	9406      	str	r4, [sp, #24]
 8001aac:	9105      	str	r1, [sp, #20]
 8001aae:	9304      	str	r3, [sp, #16]
 8001ab0:	9003      	str	r0, [sp, #12]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	9302      	str	r3, [sp, #8]
 8001ab6:	9201      	str	r2, [sp, #4]
 8001ab8:	7cfb      	ldrb	r3, [r7, #19]
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	4663      	mov	r3, ip
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f003 fb42 	bl	800514c <CO_TPDO_init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
                CO_TXCAN_TPDO+i);

        if(err){CO_delete(CANbaseAddress); return err;}
 8001ace:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d005      	beq.n	8001ae2 <CO_init+0x70a>
 8001ad6:	6978      	ldr	r0, [r7, #20]
 8001ad8:	f000 f840 	bl	8001b5c <CO_delete>
 8001adc:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001ae0:	e02f      	b.n	8001b42 <CO_init+0x76a>
    for(i=0; i<CO_NO_TPDO; i++){
 8001ae2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	3301      	adds	r3, #1
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001aee:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	dd93      	ble.n	8001a1e <CO_init+0x646>
    }


    err = CO_HBconsumer_init(
            CO->HBcons,
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <CO_init+0x774>)
 8001af8:	681b      	ldr	r3, [r3, #0]
    err = CO_HBconsumer_init(
 8001afa:	6b98      	ldr	r0, [r3, #56]	; 0x38
            CO->em,
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <CO_init+0x774>)
 8001afe:	681b      	ldr	r3, [r3, #0]
    err = CO_HBconsumer_init(
 8001b00:	6899      	ldr	r1, [r3, #8]
            CO->SDO[0],
 8001b02:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <CO_init+0x774>)
 8001b04:	681b      	ldr	r3, [r3, #0]
    err = CO_HBconsumer_init(
 8001b06:	685c      	ldr	r4, [r3, #4]
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <CO_init+0x77c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
           &OD_consumerHeartbeatTime[0],
            CO_HBcons_monitoredNodes,
            CO_NO_HB_CONS,
            CO->CANmodule[0],
 8001b0c:	4a0f      	ldr	r2, [pc, #60]	; (8001b4c <CO_init+0x774>)
 8001b0e:	6812      	ldr	r2, [r2, #0]
    err = CO_HBconsumer_init(
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	2507      	movs	r5, #7
 8001b14:	9503      	str	r5, [sp, #12]
 8001b16:	9202      	str	r2, [sp, #8]
 8001b18:	2204      	movs	r2, #4
 8001b1a:	9201      	str	r2, [sp, #4]
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <CO_init+0x780>)
 8001b20:	4622      	mov	r2, r4
 8001b22:	f002 f8c5 	bl	8003cb0 <CO_HBconsumer_init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            CO_RXCAN_CONS_HB);

    if(err){CO_delete(CANbaseAddress); return err;}
 8001b2c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <CO_init+0x768>
 8001b34:	6978      	ldr	r0, [r7, #20]
 8001b36:	f000 f811 	bl	8001b5c <CO_delete>
 8001b3a:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001b3e:	e000      	b.n	8001b42 <CO_init+0x76a>
            OD_INDEX_TRACE + i);
    }
#endif


    return CO_ERROR_NO;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3734      	adds	r7, #52	; 0x34
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000618 	.word	0x20000618
 8001b50:	2000017c 	.word	0x2000017c
 8001b54:	20000628 	.word	0x20000628
 8001b58:	200001ac 	.word	0x200001ac

08001b5c <CO_delete>:


/******************************************************************************/
void CO_delete(int32_t CANbaseAddress){
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
#ifndef CO_USE_GLOBALS
    int16_t i;
#endif

    CO_CANsetConfigurationMode(CANbaseAddress);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f005 ff03 	bl	8007970 <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule[0]);
 8001b6a:	4b45      	ldr	r3, [pc, #276]	; (8001c80 <CO_delete+0x124>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f006 f83f 	bl	8007bf4 <CO_CANmodule_disable>
      }
  #endif
  #if CO_NO_SDO_CLIENT == 1
    free(CO->SDOclient);
  #endif
    free(CO_HBcons_monitoredNodes);
 8001b76:	4b43      	ldr	r3, [pc, #268]	; (8001c84 <CO_delete+0x128>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f00f fb78 	bl	8011270 <free>
    free(CO->HBcons);
 8001b80:	4b3f      	ldr	r3, [pc, #252]	; (8001c80 <CO_delete+0x124>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b86:	4618      	mov	r0, r3
 8001b88:	f00f fb72 	bl	8011270 <free>
    for(i=0; i<CO_NO_RPDO; i++){
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	81fb      	strh	r3, [r7, #14]
 8001b90:	e00f      	b.n	8001bb2 <CO_delete+0x56>
        free(CO->RPDO[i]);
 8001b92:	4b3b      	ldr	r3, [pc, #236]	; (8001c80 <CO_delete+0x124>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b9a:	3206      	adds	r2, #6
 8001b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f00f fb65 	bl	8011270 <free>
    for(i=0; i<CO_NO_RPDO; i++){
 8001ba6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	3301      	adds	r3, #1
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	81fb      	strh	r3, [r7, #14]
 8001bb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	ddeb      	ble.n	8001b92 <CO_delete+0x36>
    }
    for(i=0; i<CO_NO_TPDO; i++){
 8001bba:	2300      	movs	r3, #0
 8001bbc:	81fb      	strh	r3, [r7, #14]
 8001bbe:	e00f      	b.n	8001be0 <CO_delete+0x84>
        free(CO->TPDO[i]);
 8001bc0:	4b2f      	ldr	r3, [pc, #188]	; (8001c80 <CO_delete+0x124>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001bc8:	320a      	adds	r2, #10
 8001bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f00f fb4e 	bl	8011270 <free>
    for(i=0; i<CO_NO_TPDO; i++){
 8001bd4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	3301      	adds	r3, #1
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	81fb      	strh	r3, [r7, #14]
 8001be0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	ddeb      	ble.n	8001bc0 <CO_delete+0x64>
    }
    free(CO->SYNC);
 8001be8:	4b25      	ldr	r3, [pc, #148]	; (8001c80 <CO_delete+0x124>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f00f fb3e 	bl	8011270 <free>
    free(CO->NMT);
 8001bf4:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <CO_delete+0x124>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f00f fb38 	bl	8011270 <free>
    free(CO->emPr);
 8001c00:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <CO_delete+0x124>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f00f fb32 	bl	8011270 <free>
    free(CO->em);
 8001c0c:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <CO_delete+0x124>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f00f fb2c 	bl	8011270 <free>
    free(CO_SDO_ODExtensions);
 8001c18:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <CO_delete+0x12c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f00f fb27 	bl	8011270 <free>
    for(i=0; i<CO_NO_SDO_SERVER; i++){
 8001c22:	2300      	movs	r3, #0
 8001c24:	81fb      	strh	r3, [r7, #14]
 8001c26:	e00f      	b.n	8001c48 <CO_delete+0xec>
        free(CO->SDO[i]);
 8001c28:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <CO_delete+0x124>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f00f fb1a 	bl	8011270 <free>
    for(i=0; i<CO_NO_SDO_SERVER; i++){
 8001c3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	3301      	adds	r3, #1
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	81fb      	strh	r3, [r7, #14]
 8001c48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	ddeb      	ble.n	8001c28 <CO_delete+0xcc>
    }
    free(CO_CANmodule_txArray0);
 8001c50:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <CO_delete+0x130>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f00f fb0b 	bl	8011270 <free>
    free(CO_CANmodule_rxArray0);
 8001c5a:	4b0d      	ldr	r3, [pc, #52]	; (8001c90 <CO_delete+0x134>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f00f fb06 	bl	8011270 <free>
    free(CO->CANmodule[0]);
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <CO_delete+0x124>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f00f fb00 	bl	8011270 <free>
    CO = NULL;
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <CO_delete+0x124>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
#endif
}
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000618 	.word	0x20000618
 8001c84:	20000628 	.word	0x20000628
 8001c88:	20000624 	.word	0x20000624
 8001c8c:	20000620 	.word	0x20000620
 8001c90:	2000061c 	.word	0x2000061c

08001c94 <CO_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_process(
        CO_t                   *CO,
        uint16_t                timeDifference_ms,
        uint16_t               *timerNext_ms)
{
 8001c94:	b5b0      	push	{r4, r5, r7, lr}
 8001c96:	b08a      	sub	sp, #40	; 0x28
 8001c98:	af04      	add	r7, sp, #16
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	607a      	str	r2, [r7, #4]
 8001ca0:	817b      	strh	r3, [r7, #10]
    uint8_t i;
    bool_t NMTisPreOrOperational = false;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	75bb      	strb	r3, [r7, #22]
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	757b      	strb	r3, [r7, #21]
    static uint16_t ms50 = 0;

    if(CO->NMT->operatingState == CO_NMT_PRE_OPERATIONAL || CO->NMT->operatingState == CO_NMT_OPERATIONAL)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b7f      	cmp	r3, #127	; 0x7f
 8001cb2:	d004      	beq.n	8001cbe <CO_process+0x2a>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b05      	cmp	r3, #5
 8001cbc:	d101      	bne.n	8001cc2 <CO_process+0x2e>
        NMTisPreOrOperational = true;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	75bb      	strb	r3, [r7, #22]

    ms50 += timeDifference_ms;
 8001cc2:	4b32      	ldr	r3, [pc, #200]	; (8001d8c <CO_process+0xf8>)
 8001cc4:	881a      	ldrh	r2, [r3, #0]
 8001cc6:	897b      	ldrh	r3, [r7, #10]
 8001cc8:	4413      	add	r3, r2
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	4b2f      	ldr	r3, [pc, #188]	; (8001d8c <CO_process+0xf8>)
 8001cce:	801a      	strh	r2, [r3, #0]
    if(ms50 >= 50){
 8001cd0:	4b2e      	ldr	r3, [pc, #184]	; (8001d8c <CO_process+0xf8>)
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	2b31      	cmp	r3, #49	; 0x31
 8001cd6:	d90a      	bls.n	8001cee <CO_process+0x5a>
        ms50 -= 50;
 8001cd8:	4b2c      	ldr	r3, [pc, #176]	; (8001d8c <CO_process+0xf8>)
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	3b32      	subs	r3, #50	; 0x32
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	4b2a      	ldr	r3, [pc, #168]	; (8001d8c <CO_process+0xf8>)
 8001ce2:	801a      	strh	r2, [r3, #0]
        CO_NMT_blinkingProcess50ms(CO->NMT);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f002 f991 	bl	8004010 <CO_NMT_blinkingProcess50ms>
    }
    if(timerNext_ms != NULL){
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d006      	beq.n	8001d02 <CO_process+0x6e>
        if(*timerNext_ms > 50){
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	2b32      	cmp	r3, #50	; 0x32
 8001cfa:	d902      	bls.n	8001d02 <CO_process+0x6e>
            *timerNext_ms = 50;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2232      	movs	r2, #50	; 0x32
 8001d00:	801a      	strh	r2, [r3, #0]
        }
    }


    for(i=0; i<CO_NO_SDO_SERVER; i++){
 8001d02:	2300      	movs	r3, #0
 8001d04:	75fb      	strb	r3, [r7, #23]
 8001d06:	e00f      	b.n	8001d28 <CO_process+0x94>
        CO_SDO_process(
 8001d08:	7dfb      	ldrb	r3, [r7, #23]
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	6858      	ldr	r0, [r3, #4]
 8001d12:	897a      	ldrh	r2, [r7, #10]
 8001d14:	7db9      	ldrb	r1, [r7, #22]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d1e:	f004 fac1 	bl	80062a4 <CO_SDO_process>
    for(i=0; i<CO_NO_SDO_SERVER; i++){
 8001d22:	7dfb      	ldrb	r3, [r7, #23]
 8001d24:	3301      	adds	r3, #1
 8001d26:	75fb      	strb	r3, [r7, #23]
 8001d28:	7dfb      	ldrb	r3, [r7, #23]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0ec      	beq.n	8001d08 <CO_process+0x74>
                timeDifference_ms,
                1000,
                timerNext_ms);
    }

    CO_EM_process(
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	68d8      	ldr	r0, [r3, #12]
 8001d32:	897b      	ldrh	r3, [r7, #10]
 8001d34:	461a      	mov	r2, r3
 8001d36:	0092      	lsls	r2, r2, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <CO_process+0xfc>)
 8001d40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001d42:	7db9      	ldrb	r1, [r7, #22]
 8001d44:	f001 fc7a 	bl	800363c <CO_EM_process>
            NMTisPreOrOperational,
            timeDifference_ms * 10,
            OD_inhibitTimeEMCY);


    reset = CO_NMT_process(
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6918      	ldr	r0, [r3, #16]
 8001d4c:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <CO_process+0xfc>)
 8001d4e:	f8b3 4040 	ldrh.w	r4, [r3, #64]	; 0x40
 8001d52:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <CO_process+0xfc>)
 8001d54:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8001d58:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <CO_process+0x100>)
 8001d5a:	791b      	ldrb	r3, [r3, #4]
 8001d5c:	8979      	ldrh	r1, [r7, #10]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	9202      	str	r2, [sp, #8]
 8001d62:	4a0d      	ldr	r2, [pc, #52]	; (8001d98 <CO_process+0x104>)
 8001d64:	9201      	str	r2, [sp, #4]
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	462b      	mov	r3, r5
 8001d6a:	4622      	mov	r2, r4
 8001d6c:	f002 fa26 	bl	80041bc <CO_NMT_process>
 8001d70:	4603      	mov	r3, r0
 8001d72:	757b      	strb	r3, [r7, #21]
            OD_errorRegister,
            OD_errorBehavior,
            timerNext_ms);


    CO_HBconsumer_process(
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d78:	897a      	ldrh	r2, [r7, #10]
 8001d7a:	7db9      	ldrb	r1, [r7, #22]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f001 fff1 	bl	8003d64 <CO_HBconsumer_process>
            CO->HBcons,
            NMTisPreOrOperational,
            timeDifference_ms);

    return reset;
 8001d82:	7d7b      	ldrb	r3, [r7, #21]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d8c:	2000062c 	.word	0x2000062c
 8001d90:	2000017c 	.word	0x2000017c
 8001d94:	20000000 	.word	0x20000000
 8001d98:	200001d5 	.word	0x200001d5

08001d9c <CO_process_SYNC_RPDO>:

/******************************************************************************/
bool_t CO_process_SYNC_RPDO(
        CO_t                   *CO,
        uint32_t                timeDifference_us)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
    int16_t i;
    bool_t syncWas = false;
 8001da6:	2300      	movs	r3, #0
 8001da8:	737b      	strb	r3, [r7, #13]

    switch(CO_SYNC_process(CO->SYNC, timeDifference_us, OD_synchronousWindowLength)){
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	4a19      	ldr	r2, [pc, #100]	; (8001e14 <CO_process_SYNC_RPDO+0x78>)
 8001db0:	6912      	ldr	r2, [r2, #16]
 8001db2:	6839      	ldr	r1, [r7, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f005 fce1 	bl	800777c <CO_SYNC_process>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d002      	beq.n	8001dc6 <CO_process_SYNC_RPDO+0x2a>
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d003      	beq.n	8001dcc <CO_process_SYNC_RPDO+0x30>
 8001dc4:	e008      	b.n	8001dd8 <CO_process_SYNC_RPDO+0x3c>
        case 1:     //immediately after the SYNC message
            syncWas = true;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	737b      	strb	r3, [r7, #13]
            break;
 8001dca:	e005      	b.n	8001dd8 <CO_process_SYNC_RPDO+0x3c>
        case 2:     //outside SYNC window
            CO_CANclearPendingSyncPDOs(CO->CANmodule[0]);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f006 f849 	bl	8007e68 <CO_CANclearPendingSyncPDOs>
            break;
 8001dd6:	bf00      	nop
    }

    for(i=0; i<CO_NO_RPDO; i++){
 8001dd8:	2300      	movs	r3, #0
 8001dda:	81fb      	strh	r3, [r7, #14]
 8001ddc:	e010      	b.n	8001e00 <CO_process_SYNC_RPDO+0x64>
        CO_RPDO_process(CO->RPDO[i], syncWas);
 8001dde:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3206      	adds	r2, #6
 8001de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dea:	7b7a      	ldrb	r2, [r7, #13]
 8001dec:	4611      	mov	r1, r2
 8001dee:	4618      	mov	r0, r3
 8001df0:	f003 fb57 	bl	80054a2 <CO_RPDO_process>
    for(i=0; i<CO_NO_RPDO; i++){
 8001df4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	81fb      	strh	r3, [r7, #14]
 8001e00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	ddea      	ble.n	8001dde <CO_process_SYNC_RPDO+0x42>
    }

    return syncWas;
 8001e08:	7b7b      	ldrb	r3, [r7, #13]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	2000017c 	.word	0x2000017c

08001e18 <CO_process_TPDO>:
/******************************************************************************/
void CO_process_TPDO(
        CO_t                   *CO,
        bool_t                  syncWas,
        uint32_t                timeDifference_us)
{
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	460b      	mov	r3, r1
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	72fb      	strb	r3, [r7, #11]
    int16_t i;

    /* Verify PDO Change Of State and process PDOs */
    for(i=0; i<CO_NO_TPDO; i++){
 8001e26:	2300      	movs	r3, #0
 8001e28:	82fb      	strh	r3, [r7, #22]
 8001e2a:	e02b      	b.n	8001e84 <CO_process_TPDO+0x6c>
        if(!CO->TPDO[i]->sendRequest) CO->TPDO[i]->sendRequest = CO_TPDOisCOS(CO->TPDO[i]);
 8001e2c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	320a      	adds	r2, #10
 8001e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e38:	7edb      	ldrb	r3, [r3, #27]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d110      	bne.n	8001e60 <CO_process_TPDO+0x48>
 8001e3e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	320a      	adds	r2, #10
 8001e46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e4a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	320a      	adds	r2, #10
 8001e52:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8001e56:	4608      	mov	r0, r1
 8001e58:	f003 fa0e 	bl	8005278 <CO_TPDOisCOS>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	76e3      	strb	r3, [r4, #27]
        CO_TPDO_process(CO->TPDO[i], CO->SYNC, syncWas, timeDifference_us);
 8001e60:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	320a      	adds	r2, #10
 8001e68:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6959      	ldr	r1, [r3, #20]
 8001e70:	7afa      	ldrb	r2, [r7, #11]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f003 fb78 	bl	8005568 <CO_TPDO_process>
    for(i=0; i<CO_NO_TPDO; i++){
 8001e78:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	3301      	adds	r3, #1
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	82fb      	strh	r3, [r7, #22]
 8001e84:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	ddcf      	ble.n	8001e2c <CO_process_TPDO+0x14>
    }
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	371c      	adds	r7, #28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd90      	pop	{r4, r7, pc}
	...

08001e98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <MX_DMA_Init+0x48>)
 8001ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea2:	4a0f      	ldr	r2, [pc, #60]	; (8001ee0 <MX_DMA_Init+0x48>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6493      	str	r3, [r2, #72]	; 0x48
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <MX_DMA_Init+0x48>)
 8001eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2105      	movs	r1, #5
 8001eba:	2010      	movs	r0, #16
 8001ebc:	f008 f8ac 	bl	800a018 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001ec0:	2010      	movs	r0, #16
 8001ec2:	f008 f8c5 	bl	800a050 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2105      	movs	r1, #5
 8001eca:	2011      	movs	r0, #17
 8001ecc:	f008 f8a4 	bl	800a018 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001ed0:	2011      	movs	r0, #17
 8001ed2:	f008 f8bd 	bl	800a050 <HAL_NVIC_EnableIRQ>

}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000

08001ee4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001ee8:	4a0c      	ldr	r2, [pc, #48]	; (8001f1c <MX_FREERTOS_Init+0x38>)
 8001eea:	2100      	movs	r1, #0
 8001eec:	480c      	ldr	r0, [pc, #48]	; (8001f20 <MX_FREERTOS_Init+0x3c>)
 8001eee:	f00c fd75 	bl	800e9dc <osThreadNew>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4a0b      	ldr	r2, [pc, #44]	; (8001f24 <MX_FREERTOS_Init+0x40>)
 8001ef6:	6013      	str	r3, [r2, #0]

  /* creation of readTempTask */
  readTempTaskHandle = osThreadNew(StartReadTempTask, NULL, &readTempTask_attributes);
 8001ef8:	4a0b      	ldr	r2, [pc, #44]	; (8001f28 <MX_FREERTOS_Init+0x44>)
 8001efa:	2100      	movs	r1, #0
 8001efc:	480b      	ldr	r0, [pc, #44]	; (8001f2c <MX_FREERTOS_Init+0x48>)
 8001efe:	f00c fd6d 	bl	800e9dc <osThreadNew>
 8001f02:	4603      	mov	r3, r0
 8001f04:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <MX_FREERTOS_Init+0x4c>)
 8001f06:	6013      	str	r3, [r2, #0]

  /* creation of readLightTask */
  readLightTaskHandle = osThreadNew(StartReadLightTask, NULL, &readLightTask_attributes);
 8001f08:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <MX_FREERTOS_Init+0x50>)
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	480a      	ldr	r0, [pc, #40]	; (8001f38 <MX_FREERTOS_Init+0x54>)
 8001f0e:	f00c fd65 	bl	800e9dc <osThreadNew>
 8001f12:	4603      	mov	r3, r0
 8001f14:	4a09      	ldr	r2, [pc, #36]	; (8001f3c <MX_FREERTOS_Init+0x58>)
 8001f16:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	08014328 	.word	0x08014328
 8001f20:	08001f41 	.word	0x08001f41
 8001f24:	20008950 	.word	0x20008950
 8001f28:	0801434c 	.word	0x0801434c
 8001f2c:	08001f4f 	.word	0x08001f4f
 8001f30:	20008954 	.word	0x20008954
 8001f34:	08014370 	.word	0x08014370
 8001f38:	08001f59 	.word	0x08001f59
 8001f3c:	20008958 	.word	0x20008958

08001f40 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  //spectro();
	  programStart();
 8001f48:	f7ff f8d4 	bl	80010f4 <programStart>
  {
 8001f4c:	e7fc      	b.n	8001f48 <StartDefaultTask+0x8>

08001f4e <StartReadTempTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadTempTask */
void StartReadTempTask(void *argument)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadTempTask */
  /* Infinite loop */
  for(;;)
 8001f56:	e7fe      	b.n	8001f56 <StartReadTempTask+0x8>

08001f58 <StartReadLightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadLightTask */
void StartReadLightTask(void *argument)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadLightTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f60:	2001      	movs	r0, #1
 8001f62:	f00c fdcd 	bl	800eb00 <osDelay>
 8001f66:	e7fb      	b.n	8001f60 <StartReadLightTask+0x8>

08001f68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6e:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <MX_GPIO_Init+0x5c>)
 8001f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f72:	4a14      	ldr	r2, [pc, #80]	; (8001fc4 <MX_GPIO_Init+0x5c>)
 8001f74:	f043 0304 	orr.w	r3, r3, #4
 8001f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f7a:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <MX_GPIO_Init+0x5c>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f86:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <MX_GPIO_Init+0x5c>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8a:	4a0e      	ldr	r2, [pc, #56]	; (8001fc4 <MX_GPIO_Init+0x5c>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f92:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <MX_GPIO_Init+0x5c>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9e:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <MX_GPIO_Init+0x5c>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	4a08      	ldr	r2, [pc, #32]	; (8001fc4 <MX_GPIO_Init+0x5c>)
 8001fa4:	f043 0302 	orr.w	r3, r3, #2
 8001fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <MX_GPIO_Init+0x5c>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	607b      	str	r3, [r7, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]

}
 8001fb6:	bf00      	nop
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000

08001fc8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fcc:	4b1b      	ldr	r3, [pc, #108]	; (800203c <MX_I2C1_Init+0x74>)
 8001fce:	4a1c      	ldr	r2, [pc, #112]	; (8002040 <MX_I2C1_Init+0x78>)
 8001fd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000000;
 8001fd2:	4b1a      	ldr	r3, [pc, #104]	; (800203c <MX_I2C1_Init+0x74>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001fd8:	4b18      	ldr	r3, [pc, #96]	; (800203c <MX_I2C1_Init+0x74>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fde:	4b17      	ldr	r3, [pc, #92]	; (800203c <MX_I2C1_Init+0x74>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fe4:	4b15      	ldr	r3, [pc, #84]	; (800203c <MX_I2C1_Init+0x74>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001fea:	4b14      	ldr	r3, [pc, #80]	; (800203c <MX_I2C1_Init+0x74>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <MX_I2C1_Init+0x74>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ff6:	4b11      	ldr	r3, [pc, #68]	; (800203c <MX_I2C1_Init+0x74>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	; (800203c <MX_I2C1_Init+0x74>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002002:	480e      	ldr	r0, [pc, #56]	; (800203c <MX_I2C1_Init+0x74>)
 8002004:	f008 fc2a 	bl	800a85c <HAL_I2C_Init>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800200e:	f000 f935 	bl	800227c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002012:	2100      	movs	r1, #0
 8002014:	4809      	ldr	r0, [pc, #36]	; (800203c <MX_I2C1_Init+0x74>)
 8002016:	f009 fef7 	bl	800be08 <HAL_I2CEx_ConfigAnalogFilter>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002020:	f000 f92c 	bl	800227c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002024:	2100      	movs	r1, #0
 8002026:	4805      	ldr	r0, [pc, #20]	; (800203c <MX_I2C1_Init+0x74>)
 8002028:	f009 ff39 	bl	800be9e <HAL_I2CEx_ConfigDigitalFilter>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002032:	f000 f923 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	2000895c 	.word	0x2000895c
 8002040:	40005400 	.word	0x40005400

08002044 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	; 0x28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a1f      	ldr	r2, [pc, #124]	; (80020e0 <HAL_I2C_MspInit+0x9c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d137      	bne.n	80020d6 <HAL_I2C_MspInit+0x92>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002066:	4b1f      	ldr	r3, [pc, #124]	; (80020e4 <HAL_I2C_MspInit+0xa0>)
 8002068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206a:	4a1e      	ldr	r2, [pc, #120]	; (80020e4 <HAL_I2C_MspInit+0xa0>)
 800206c:	f043 0302 	orr.w	r3, r3, #2
 8002070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002072:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <HAL_I2C_MspInit+0xa0>)
 8002074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800207e:	23c0      	movs	r3, #192	; 0xc0
 8002080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002082:	2312      	movs	r3, #18
 8002084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002086:	2301      	movs	r3, #1
 8002088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208a:	2303      	movs	r3, #3
 800208c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800208e:	2304      	movs	r3, #4
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002092:	f107 0314 	add.w	r3, r7, #20
 8002096:	4619      	mov	r1, r3
 8002098:	4813      	ldr	r0, [pc, #76]	; (80020e8 <HAL_I2C_MspInit+0xa4>)
 800209a:	f008 f9ab 	bl	800a3f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800209e:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <HAL_I2C_MspInit+0xa0>)
 80020a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a2:	4a10      	ldr	r2, [pc, #64]	; (80020e4 <HAL_I2C_MspInit+0xa0>)
 80020a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020a8:	6593      	str	r3, [r2, #88]	; 0x58
 80020aa:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <HAL_I2C_MspInit+0xa0>)
 80020ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80020b6:	2200      	movs	r2, #0
 80020b8:	2105      	movs	r1, #5
 80020ba:	201f      	movs	r0, #31
 80020bc:	f007 ffac 	bl	800a018 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80020c0:	201f      	movs	r0, #31
 80020c2:	f007 ffc5 	bl	800a050 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80020c6:	2200      	movs	r2, #0
 80020c8:	2105      	movs	r1, #5
 80020ca:	2020      	movs	r0, #32
 80020cc:	f007 ffa4 	bl	800a018 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80020d0:	2020      	movs	r0, #32
 80020d2:	f007 ffbd 	bl	800a050 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80020d6:	bf00      	nop
 80020d8:	3728      	adds	r7, #40	; 0x28
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40005400 	.word	0x40005400
 80020e4:	40021000 	.word	0x40021000
 80020e8:	48000400 	.word	0x48000400

080020ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020f0:	f006 f8e3 	bl	80082ba <HAL_Init>
  //uint8_t I2C_address = 0x80;
  //pca9685_init(&hi2c3, I2C_address);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020f4:	f000 f818 	bl	8002128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020f8:	f7ff ff36 	bl	8001f68 <MX_GPIO_Init>
  MX_DMA_Init();
 80020fc:	f7ff fecc 	bl	8001e98 <MX_DMA_Init>
  MX_I2C1_Init();
 8002100:	f7ff ff62 	bl	8001fc8 <MX_I2C1_Init>
  MX_CAN1_Init();
 8002104:	f7ff f8ba 	bl	800127c <MX_CAN1_Init>
  MX_TIM1_Init();
 8002108:	f000 fa90 	bl	800262c <MX_TIM1_Init>
  MX_ADC1_Init();
 800210c:	f7fe fee8 	bl	8000ee0 <MX_ADC1_Init>
  MX_TIM15_Init();
 8002110:	f000 fb34 	bl	800277c <MX_TIM15_Init>
  MX_USART2_UART_Init();
 8002114:	f000 fc46 	bl	80029a4 <MX_USART2_UART_Init>
*/

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002118:	f00c fc16 	bl	800e948 <osKernelInitialize>
  MX_FREERTOS_Init();
 800211c:	f7ff fee2 	bl	8001ee4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002120:	f00c fc36 	bl	800e990 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002124:	e7fe      	b.n	8002124 <main+0x38>
	...

08002128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b0ac      	sub	sp, #176	; 0xb0
 800212c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800212e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002132:	2244      	movs	r2, #68	; 0x44
 8002134:	2100      	movs	r1, #0
 8002136:	4618      	mov	r0, r3
 8002138:	f00f f8b0 	bl	801129c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800213c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800214c:	1d3b      	adds	r3, r7, #4
 800214e:	2254      	movs	r2, #84	; 0x54
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f00f f8a2 	bl	801129c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002158:	f009 feee 	bl	800bf38 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800215c:	4b3d      	ldr	r3, [pc, #244]	; (8002254 <SystemClock_Config+0x12c>)
 800215e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002162:	4a3c      	ldr	r2, [pc, #240]	; (8002254 <SystemClock_Config+0x12c>)
 8002164:	f023 0318 	bic.w	r3, r3, #24
 8002168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800216c:	2314      	movs	r3, #20
 800216e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002170:	2301      	movs	r3, #1
 8002172:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002174:	2301      	movs	r3, #1
 8002176:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8002180:	2390      	movs	r3, #144	; 0x90
 8002182:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002186:	2302      	movs	r3, #2
 8002188:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800218c:	2301      	movs	r3, #1
 800218e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002192:	2305      	movs	r3, #5
 8002194:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002198:	2310      	movs	r3, #16
 800219a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800219e:	2307      	movs	r3, #7
 80021a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80021a4:	2302      	movs	r3, #2
 80021a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80021aa:	2306      	movs	r3, #6
 80021ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021b4:	4618      	mov	r0, r3
 80021b6:	f009 ff33 	bl	800c020 <HAL_RCC_OscConfig>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80021c0:	f000 f85c 	bl	800227c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021c4:	230f      	movs	r3, #15
 80021c6:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021c8:	2303      	movs	r3, #3
 80021ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80021cc:	23a0      	movs	r3, #160	; 0xa0
 80021ce:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80021d0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80021d4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021d6:	2300      	movs	r3, #0
 80021d8:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80021da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80021de:	2100      	movs	r1, #0
 80021e0:	4618      	mov	r0, r3
 80021e2:	f00a fb3d 	bl	800c860 <HAL_RCC_ClockConfig>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80021ec:	f000 f846 	bl	800227c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80021f0:	f244 0342 	movw	r3, #16450	; 0x4042
 80021f4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80021f6:	2304      	movs	r3, #4
 80021f8:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80021fa:	2300      	movs	r3, #0
 80021fc:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80021fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002202:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002204:	2301      	movs	r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8002208:	2305      	movs	r3, #5
 800220a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 14;
 800220c:	230e      	movs	r3, #14
 800220e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002210:	2307      	movs	r3, #7
 8002212:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002214:	2302      	movs	r3, #2
 8002216:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002218:	2302      	movs	r3, #2
 800221a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800221c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002220:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002222:	1d3b      	adds	r3, r7, #4
 8002224:	4618      	mov	r0, r3
 8002226:	f00a fd51 	bl	800cccc <HAL_RCCEx_PeriphCLKConfig>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8002230:	f000 f824 	bl	800227c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002234:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002238:	f009 fe9c 	bl	800bf74 <HAL_PWREx_ControlVoltageScaling>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8002242:	f000 f81b 	bl	800227c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002246:	f00a ff35 	bl	800d0b4 <HAL_RCCEx_EnableMSIPLLMode>
}
 800224a:	bf00      	nop
 800224c:	37b0      	adds	r7, #176	; 0xb0
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000

08002258 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a04      	ldr	r2, [pc, #16]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d101      	bne.n	800226e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800226a:	f006 f83f 	bl	80082ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40001000 	.word	0x40001000

0800227c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  while (1)
 8002280:	e7fe      	b.n	8002280 <Error_Handler+0x4>
	...

08002284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800228a:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <HAL_MspInit+0x4c>)
 800228c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800228e:	4a10      	ldr	r2, [pc, #64]	; (80022d0 <HAL_MspInit+0x4c>)
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	6613      	str	r3, [r2, #96]	; 0x60
 8002296:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <HAL_MspInit+0x4c>)
 8002298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	607b      	str	r3, [r7, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022a2:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_MspInit+0x4c>)
 80022a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a6:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <HAL_MspInit+0x4c>)
 80022a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ac:	6593      	str	r3, [r2, #88]	; 0x58
 80022ae:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <HAL_MspInit+0x4c>)
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	210f      	movs	r1, #15
 80022be:	f06f 0001 	mvn.w	r0, #1
 80022c2:	f007 fea9 	bl	800a018 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000

080022d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08c      	sub	sp, #48	; 0x30
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80022e4:	2200      	movs	r2, #0
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	2036      	movs	r0, #54	; 0x36
 80022ea:	f007 fe95 	bl	800a018 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022ee:	2036      	movs	r0, #54	; 0x36
 80022f0:	f007 feae 	bl	800a050 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80022f4:	4b1f      	ldr	r3, [pc, #124]	; (8002374 <HAL_InitTick+0xa0>)
 80022f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f8:	4a1e      	ldr	r2, [pc, #120]	; (8002374 <HAL_InitTick+0xa0>)
 80022fa:	f043 0310 	orr.w	r3, r3, #16
 80022fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002300:	4b1c      	ldr	r3, [pc, #112]	; (8002374 <HAL_InitTick+0xa0>)
 8002302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800230c:	f107 0210 	add.w	r2, r7, #16
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	4611      	mov	r1, r2
 8002316:	4618      	mov	r0, r3
 8002318:	f00a fc46 	bl	800cba8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800231c:	f00a fc18 	bl	800cb50 <HAL_RCC_GetPCLK1Freq>
 8002320:	4603      	mov	r3, r0
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002328:	4a13      	ldr	r2, [pc, #76]	; (8002378 <HAL_InitTick+0xa4>)
 800232a:	fba2 2303 	umull	r2, r3, r2, r3
 800232e:	0c9b      	lsrs	r3, r3, #18
 8002330:	3b01      	subs	r3, #1
 8002332:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002334:	4b11      	ldr	r3, [pc, #68]	; (800237c <HAL_InitTick+0xa8>)
 8002336:	4a12      	ldr	r2, [pc, #72]	; (8002380 <HAL_InitTick+0xac>)
 8002338:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800233a:	4b10      	ldr	r3, [pc, #64]	; (800237c <HAL_InitTick+0xa8>)
 800233c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002340:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002342:	4a0e      	ldr	r2, [pc, #56]	; (800237c <HAL_InitTick+0xa8>)
 8002344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002346:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002348:	4b0c      	ldr	r3, [pc, #48]	; (800237c <HAL_InitTick+0xa8>)
 800234a:	2200      	movs	r2, #0
 800234c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800234e:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_InitTick+0xa8>)
 8002350:	2200      	movs	r2, #0
 8002352:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002354:	4809      	ldr	r0, [pc, #36]	; (800237c <HAL_InitTick+0xa8>)
 8002356:	f00a ffaf 	bl	800d2b8 <HAL_TIM_Base_Init>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d104      	bne.n	800236a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002360:	4806      	ldr	r0, [pc, #24]	; (800237c <HAL_InitTick+0xa8>)
 8002362:	f00b f80b 	bl	800d37c <HAL_TIM_Base_Start_IT>
 8002366:	4603      	mov	r3, r0
 8002368:	e000      	b.n	800236c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
}
 800236c:	4618      	mov	r0, r3
 800236e:	3730      	adds	r7, #48	; 0x30
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40021000 	.word	0x40021000
 8002378:	431bde83 	.word	0x431bde83
 800237c:	200089a8 	.word	0x200089a8
 8002380:	40001000 	.word	0x40001000

08002384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002388:	e7fe      	b.n	8002388 <NMI_Handler+0x4>

0800238a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800238e:	e7fe      	b.n	800238e <HardFault_Handler+0x4>

08002390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002394:	e7fe      	b.n	8002394 <MemManage_Handler+0x4>

08002396 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800239a:	e7fe      	b.n	800239a <BusFault_Handler+0x4>

0800239c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023a0:	e7fe      	b.n	80023a0 <UsageFault_Handler+0x4>

080023a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80023b4:	4802      	ldr	r0, [pc, #8]	; (80023c0 <DMA1_Channel6_IRQHandler+0x10>)
 80023b6:	f007 ff60 	bl	800a27a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20008a8c 	.word	0x20008a8c

080023c4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80023c8:	4802      	ldr	r0, [pc, #8]	; (80023d4 <DMA1_Channel7_IRQHandler+0x10>)
 80023ca:	f007 ff56 	bl	800a27a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20008ad4 	.word	0x20008ad4

080023d8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80023dc:	4802      	ldr	r0, [pc, #8]	; (80023e8 <CAN1_TX_IRQHandler+0x10>)
 80023de:	f007 fb1a 	bl	8009a16 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20008928 	.word	0x20008928

080023ec <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80023f0:	4802      	ldr	r0, [pc, #8]	; (80023fc <CAN1_RX0_IRQHandler+0x10>)
 80023f2:	f007 fb10 	bl	8009a16 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20008928 	.word	0x20008928

08002400 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002404:	4802      	ldr	r0, [pc, #8]	; (8002410 <I2C1_EV_IRQHandler+0x10>)
 8002406:	f008 fdaa 	bl	800af5e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	2000895c 	.word	0x2000895c

08002414 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002418:	4802      	ldr	r0, [pc, #8]	; (8002424 <I2C1_ER_IRQHandler+0x10>)
 800241a:	f008 fdba 	bl	800af92 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	2000895c 	.word	0x2000895c

08002428 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800242c:	4802      	ldr	r0, [pc, #8]	; (8002438 <TIM6_DAC_IRQHandler+0x10>)
 800242e:	f00b f850 	bl	800d4d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	200089a8 	.word	0x200089a8

0800243c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
	return 1;
 8002440:	2301      	movs	r3, #1
}
 8002442:	4618      	mov	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <_kill>:

int _kill(int pid, int sig)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002456:	f00e fed9 	bl	801120c <__errno>
 800245a:	4603      	mov	r3, r0
 800245c:	2216      	movs	r2, #22
 800245e:	601a      	str	r2, [r3, #0]
	return -1;
 8002460:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002464:	4618      	mov	r0, r3
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <_exit>:

void _exit (int status)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002474:	f04f 31ff 	mov.w	r1, #4294967295
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff ffe7 	bl	800244c <_kill>
	while (1) {}		/* Make sure we hang here */
 800247e:	e7fe      	b.n	800247e <_exit+0x12>

08002480 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	e00a      	b.n	80024a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002492:	f3af 8000 	nop.w
 8002496:	4601      	mov	r1, r0
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	60ba      	str	r2, [r7, #8]
 800249e:	b2ca      	uxtb	r2, r1
 80024a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	3301      	adds	r3, #1
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	dbf0      	blt.n	8002492 <_read+0x12>
	}

return len;
 80024b0:	687b      	ldr	r3, [r7, #4]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b086      	sub	sp, #24
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	e009      	b.n	80024e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	60ba      	str	r2, [r7, #8]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	3301      	adds	r3, #1
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	dbf1      	blt.n	80024cc <_write+0x12>
	}
	return len;
 80024e8:	687b      	ldr	r3, [r7, #4]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <_close>:

int _close(int file)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
	return -1;
 80024fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024fe:	4618      	mov	r0, r3
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800251a:	605a      	str	r2, [r3, #4]
	return 0;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <_isatty>:

int _isatty(int file)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
	return 1;
 8002532:	2301      	movs	r3, #1
}
 8002534:	4618      	mov	r0, r3
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
	return 0;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
	...

0800255c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002564:	4a14      	ldr	r2, [pc, #80]	; (80025b8 <_sbrk+0x5c>)
 8002566:	4b15      	ldr	r3, [pc, #84]	; (80025bc <_sbrk+0x60>)
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002570:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <_sbrk+0x64>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d102      	bne.n	800257e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <_sbrk+0x64>)
 800257a:	4a12      	ldr	r2, [pc, #72]	; (80025c4 <_sbrk+0x68>)
 800257c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <_sbrk+0x64>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	429a      	cmp	r2, r3
 800258a:	d207      	bcs.n	800259c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800258c:	f00e fe3e 	bl	801120c <__errno>
 8002590:	4603      	mov	r3, r0
 8002592:	220c      	movs	r2, #12
 8002594:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002596:	f04f 33ff 	mov.w	r3, #4294967295
 800259a:	e009      	b.n	80025b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800259c:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <_sbrk+0x64>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025a2:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <_sbrk+0x64>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4413      	add	r3, r2
 80025aa:	4a05      	ldr	r2, [pc, #20]	; (80025c0 <_sbrk+0x64>)
 80025ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ae:	68fb      	ldr	r3, [r7, #12]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20010000 	.word	0x20010000
 80025bc:	00000400 	.word	0x00000400
 80025c0:	20000630 	.word	0x20000630
 80025c4:	20008c78 	.word	0x20008c78

080025c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80025cc:	4b15      	ldr	r3, [pc, #84]	; (8002624 <SystemInit+0x5c>)
 80025ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d2:	4a14      	ldr	r2, [pc, #80]	; (8002624 <SystemInit+0x5c>)
 80025d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80025dc:	4b12      	ldr	r3, [pc, #72]	; (8002628 <SystemInit+0x60>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a11      	ldr	r2, [pc, #68]	; (8002628 <SystemInit+0x60>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80025e8:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <SystemInit+0x60>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <SystemInit+0x60>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a0d      	ldr	r2, [pc, #52]	; (8002628 <SystemInit+0x60>)
 80025f4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80025f8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80025fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80025fe:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <SystemInit+0x60>)
 8002600:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002604:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002606:	4b08      	ldr	r3, [pc, #32]	; (8002628 <SystemInit+0x60>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a07      	ldr	r2, [pc, #28]	; (8002628 <SystemInit+0x60>)
 800260c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002610:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002612:	4b05      	ldr	r3, [pc, #20]	; (8002628 <SystemInit+0x60>)
 8002614:	2200      	movs	r2, #0
 8002616:	619a      	str	r2, [r3, #24]
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000ed00 	.word	0xe000ed00
 8002628:	40021000 	.word	0x40021000

0800262c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b096      	sub	sp, #88	; 0x58
 8002630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002632:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	605a      	str	r2, [r3, #4]
 800263c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800263e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	605a      	str	r2, [r3, #4]
 8002648:	609a      	str	r2, [r3, #8]
 800264a:	60da      	str	r2, [r3, #12]
 800264c:	611a      	str	r2, [r3, #16]
 800264e:	615a      	str	r2, [r3, #20]
 8002650:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002652:	1d3b      	adds	r3, r7, #4
 8002654:	222c      	movs	r2, #44	; 0x2c
 8002656:	2100      	movs	r1, #0
 8002658:	4618      	mov	r0, r3
 800265a:	f00e fe1f 	bl	801129c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800265e:	4b45      	ldr	r3, [pc, #276]	; (8002774 <MX_TIM1_Init+0x148>)
 8002660:	4a45      	ldr	r2, [pc, #276]	; (8002778 <MX_TIM1_Init+0x14c>)
 8002662:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002664:	4b43      	ldr	r3, [pc, #268]	; (8002774 <MX_TIM1_Init+0x148>)
 8002666:	2200      	movs	r2, #0
 8002668:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800266a:	4b42      	ldr	r3, [pc, #264]	; (8002774 <MX_TIM1_Init+0x148>)
 800266c:	2200      	movs	r2, #0
 800266e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002670:	4b40      	ldr	r3, [pc, #256]	; (8002774 <MX_TIM1_Init+0x148>)
 8002672:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002676:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002678:	4b3e      	ldr	r3, [pc, #248]	; (8002774 <MX_TIM1_Init+0x148>)
 800267a:	2200      	movs	r2, #0
 800267c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800267e:	4b3d      	ldr	r3, [pc, #244]	; (8002774 <MX_TIM1_Init+0x148>)
 8002680:	2200      	movs	r2, #0
 8002682:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002684:	4b3b      	ldr	r3, [pc, #236]	; (8002774 <MX_TIM1_Init+0x148>)
 8002686:	2200      	movs	r2, #0
 8002688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800268a:	483a      	ldr	r0, [pc, #232]	; (8002774 <MX_TIM1_Init+0x148>)
 800268c:	f00a feca 	bl	800d424 <HAL_TIM_PWM_Init>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002696:	f7ff fdf1 	bl	800227c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800269a:	2300      	movs	r3, #0
 800269c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800269e:	2300      	movs	r3, #0
 80026a0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026aa:	4619      	mov	r1, r3
 80026ac:	4831      	ldr	r0, [pc, #196]	; (8002774 <MX_TIM1_Init+0x148>)
 80026ae:	f00b fc49 	bl	800df44 <HAL_TIMEx_MasterConfigSynchronization>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80026b8:	f7ff fde0 	bl	800227c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026bc:	2360      	movs	r3, #96	; 0x60
 80026be:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026c4:	2300      	movs	r3, #0
 80026c6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026c8:	2300      	movs	r3, #0
 80026ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026d0:	2300      	movs	r3, #0
 80026d2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026d4:	2300      	movs	r3, #0
 80026d6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026dc:	2200      	movs	r2, #0
 80026de:	4619      	mov	r1, r3
 80026e0:	4824      	ldr	r0, [pc, #144]	; (8002774 <MX_TIM1_Init+0x148>)
 80026e2:	f00b f815 	bl	800d710 <HAL_TIM_PWM_ConfigChannel>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80026ec:	f7ff fdc6 	bl	800227c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026f4:	2204      	movs	r2, #4
 80026f6:	4619      	mov	r1, r3
 80026f8:	481e      	ldr	r0, [pc, #120]	; (8002774 <MX_TIM1_Init+0x148>)
 80026fa:	f00b f809 	bl	800d710 <HAL_TIM_PWM_ConfigChannel>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8002704:	f7ff fdba 	bl	800227c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002708:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800270c:	2208      	movs	r2, #8
 800270e:	4619      	mov	r1, r3
 8002710:	4818      	ldr	r0, [pc, #96]	; (8002774 <MX_TIM1_Init+0x148>)
 8002712:	f00a fffd 	bl	800d710 <HAL_TIM_PWM_ConfigChannel>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 800271c:	f7ff fdae 	bl	800227c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002720:	2300      	movs	r3, #0
 8002722:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002724:	2300      	movs	r3, #0
 8002726:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002728:	2300      	movs	r3, #0
 800272a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002734:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002738:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800273e:	2300      	movs	r3, #0
 8002740:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002742:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800274c:	2300      	movs	r3, #0
 800274e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002750:	1d3b      	adds	r3, r7, #4
 8002752:	4619      	mov	r1, r3
 8002754:	4807      	ldr	r0, [pc, #28]	; (8002774 <MX_TIM1_Init+0x148>)
 8002756:	f00b fc5b 	bl	800e010 <HAL_TIMEx_ConfigBreakDeadTime>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8002760:	f7ff fd8c 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002764:	4803      	ldr	r0, [pc, #12]	; (8002774 <MX_TIM1_Init+0x148>)
 8002766:	f000 f8c1 	bl	80028ec <HAL_TIM_MspPostInit>

}
 800276a:	bf00      	nop
 800276c:	3758      	adds	r7, #88	; 0x58
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20008a40 	.word	0x20008a40
 8002778:	40012c00 	.word	0x40012c00

0800277c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b096      	sub	sp, #88	; 0x58
 8002780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002782:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	605a      	str	r2, [r3, #4]
 800278c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800278e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	605a      	str	r2, [r3, #4]
 8002798:	609a      	str	r2, [r3, #8]
 800279a:	60da      	str	r2, [r3, #12]
 800279c:	611a      	str	r2, [r3, #16]
 800279e:	615a      	str	r2, [r3, #20]
 80027a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027a2:	1d3b      	adds	r3, r7, #4
 80027a4:	222c      	movs	r2, #44	; 0x2c
 80027a6:	2100      	movs	r1, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f00e fd77 	bl	801129c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80027ae:	4b33      	ldr	r3, [pc, #204]	; (800287c <MX_TIM15_Init+0x100>)
 80027b0:	4a33      	ldr	r2, [pc, #204]	; (8002880 <MX_TIM15_Init+0x104>)
 80027b2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80027b4:	4b31      	ldr	r3, [pc, #196]	; (800287c <MX_TIM15_Init+0x100>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ba:	4b30      	ldr	r3, [pc, #192]	; (800287c <MX_TIM15_Init+0x100>)
 80027bc:	2200      	movs	r2, #0
 80027be:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80027c0:	4b2e      	ldr	r3, [pc, #184]	; (800287c <MX_TIM15_Init+0x100>)
 80027c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027c6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c8:	4b2c      	ldr	r3, [pc, #176]	; (800287c <MX_TIM15_Init+0x100>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80027ce:	4b2b      	ldr	r3, [pc, #172]	; (800287c <MX_TIM15_Init+0x100>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027d4:	4b29      	ldr	r3, [pc, #164]	; (800287c <MX_TIM15_Init+0x100>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80027da:	4828      	ldr	r0, [pc, #160]	; (800287c <MX_TIM15_Init+0x100>)
 80027dc:	f00a fe22 	bl	800d424 <HAL_TIM_PWM_Init>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80027e6:	f7ff fd49 	bl	800227c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027ea:	2300      	movs	r3, #0
 80027ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ee:	2300      	movs	r3, #0
 80027f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80027f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027f6:	4619      	mov	r1, r3
 80027f8:	4820      	ldr	r0, [pc, #128]	; (800287c <MX_TIM15_Init+0x100>)
 80027fa:	f00b fba3 	bl	800df44 <HAL_TIMEx_MasterConfigSynchronization>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8002804:	f7ff fd3a 	bl	800227c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002808:	2360      	movs	r3, #96	; 0x60
 800280a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002810:	2300      	movs	r3, #0
 8002812:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002814:	2300      	movs	r3, #0
 8002816:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002818:	2300      	movs	r3, #0
 800281a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800281c:	2300      	movs	r3, #0
 800281e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002820:	2300      	movs	r3, #0
 8002822:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002824:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002828:	2204      	movs	r2, #4
 800282a:	4619      	mov	r1, r3
 800282c:	4813      	ldr	r0, [pc, #76]	; (800287c <MX_TIM15_Init+0x100>)
 800282e:	f00a ff6f 	bl	800d710 <HAL_TIM_PWM_ConfigChannel>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8002838:	f7ff fd20 	bl	800227c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800283c:	2300      	movs	r3, #0
 800283e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002840:	2300      	movs	r3, #0
 8002842:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002854:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002856:	2300      	movs	r3, #0
 8002858:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800285a:	1d3b      	adds	r3, r7, #4
 800285c:	4619      	mov	r1, r3
 800285e:	4807      	ldr	r0, [pc, #28]	; (800287c <MX_TIM15_Init+0x100>)
 8002860:	f00b fbd6 	bl	800e010 <HAL_TIMEx_ConfigBreakDeadTime>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 800286a:	f7ff fd07 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800286e:	4803      	ldr	r0, [pc, #12]	; (800287c <MX_TIM15_Init+0x100>)
 8002870:	f000 f83c 	bl	80028ec <HAL_TIM_MspPostInit>

}
 8002874:	bf00      	nop
 8002876:	3758      	adds	r7, #88	; 0x58
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	200089f4 	.word	0x200089f4
 8002880:	40014000 	.word	0x40014000

08002884 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a13      	ldr	r2, [pc, #76]	; (80028e0 <HAL_TIM_PWM_MspInit+0x5c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d10c      	bne.n	80028b0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002896:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <HAL_TIM_PWM_MspInit+0x60>)
 8002898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289a:	4a12      	ldr	r2, [pc, #72]	; (80028e4 <HAL_TIM_PWM_MspInit+0x60>)
 800289c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028a0:	6613      	str	r3, [r2, #96]	; 0x60
 80028a2:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <HAL_TIM_PWM_MspInit+0x60>)
 80028a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80028ae:	e010      	b.n	80028d2 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM15)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a0c      	ldr	r2, [pc, #48]	; (80028e8 <HAL_TIM_PWM_MspInit+0x64>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d10b      	bne.n	80028d2 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80028ba:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <HAL_TIM_PWM_MspInit+0x60>)
 80028bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028be:	4a09      	ldr	r2, [pc, #36]	; (80028e4 <HAL_TIM_PWM_MspInit+0x60>)
 80028c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c4:	6613      	str	r3, [r2, #96]	; 0x60
 80028c6:	4b07      	ldr	r3, [pc, #28]	; (80028e4 <HAL_TIM_PWM_MspInit+0x60>)
 80028c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	68bb      	ldr	r3, [r7, #8]
}
 80028d2:	bf00      	nop
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40012c00 	.word	0x40012c00
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40014000 	.word	0x40014000

080028ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08a      	sub	sp, #40	; 0x28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f4:	f107 0314 	add.w	r3, r7, #20
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	60da      	str	r2, [r3, #12]
 8002902:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a23      	ldr	r2, [pc, #140]	; (8002998 <HAL_TIM_MspPostInit+0xac>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d11e      	bne.n	800294c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290e:	4b23      	ldr	r3, [pc, #140]	; (800299c <HAL_TIM_MspPostInit+0xb0>)
 8002910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002912:	4a22      	ldr	r2, [pc, #136]	; (800299c <HAL_TIM_MspPostInit+0xb0>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800291a:	4b20      	ldr	r3, [pc, #128]	; (800299c <HAL_TIM_MspPostInit+0xb0>)
 800291c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002926:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800292a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292c:	2302      	movs	r3, #2
 800292e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002934:	2300      	movs	r3, #0
 8002936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002938:	2301      	movs	r3, #1
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	4619      	mov	r1, r3
 8002942:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002946:	f007 fd55 	bl	800a3f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800294a:	e021      	b.n	8002990 <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM15)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a13      	ldr	r2, [pc, #76]	; (80029a0 <HAL_TIM_MspPostInit+0xb4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d11c      	bne.n	8002990 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002956:	4b11      	ldr	r3, [pc, #68]	; (800299c <HAL_TIM_MspPostInit+0xb0>)
 8002958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295a:	4a10      	ldr	r2, [pc, #64]	; (800299c <HAL_TIM_MspPostInit+0xb0>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002962:	4b0e      	ldr	r3, [pc, #56]	; (800299c <HAL_TIM_MspPostInit+0xb0>)
 8002964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800296e:	2308      	movs	r3, #8
 8002970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002972:	2302      	movs	r3, #2
 8002974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297a:	2300      	movs	r3, #0
 800297c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800297e:	230e      	movs	r3, #14
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002982:	f107 0314 	add.w	r3, r7, #20
 8002986:	4619      	mov	r1, r3
 8002988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800298c:	f007 fd32 	bl	800a3f4 <HAL_GPIO_Init>
}
 8002990:	bf00      	nop
 8002992:	3728      	adds	r7, #40	; 0x28
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40012c00 	.word	0x40012c00
 800299c:	40021000 	.word	0x40021000
 80029a0:	40014000 	.word	0x40014000

080029a4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029a8:	4b14      	ldr	r3, [pc, #80]	; (80029fc <MX_USART2_UART_Init+0x58>)
 80029aa:	4a15      	ldr	r2, [pc, #84]	; (8002a00 <MX_USART2_UART_Init+0x5c>)
 80029ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029ae:	4b13      	ldr	r3, [pc, #76]	; (80029fc <MX_USART2_UART_Init+0x58>)
 80029b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029b6:	4b11      	ldr	r3, [pc, #68]	; (80029fc <MX_USART2_UART_Init+0x58>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029bc:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <MX_USART2_UART_Init+0x58>)
 80029be:	2200      	movs	r2, #0
 80029c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029c2:	4b0e      	ldr	r3, [pc, #56]	; (80029fc <MX_USART2_UART_Init+0x58>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029c8:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <MX_USART2_UART_Init+0x58>)
 80029ca:	220c      	movs	r2, #12
 80029cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ce:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <MX_USART2_UART_Init+0x58>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029d4:	4b09      	ldr	r3, [pc, #36]	; (80029fc <MX_USART2_UART_Init+0x58>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029da:	4b08      	ldr	r3, [pc, #32]	; (80029fc <MX_USART2_UART_Init+0x58>)
 80029dc:	2200      	movs	r2, #0
 80029de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029e0:	4b06      	ldr	r3, [pc, #24]	; (80029fc <MX_USART2_UART_Init+0x58>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029e6:	4805      	ldr	r0, [pc, #20]	; (80029fc <MX_USART2_UART_Init+0x58>)
 80029e8:	f00b fba8 	bl	800e13c <HAL_UART_Init>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80029f2:	f7ff fc43 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20008b1c 	.word	0x20008b1c
 8002a00:	40004400 	.word	0x40004400

08002a04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08a      	sub	sp, #40	; 0x28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0c:	f107 0314 	add.w	r3, r7, #20
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a4a      	ldr	r2, [pc, #296]	; (8002b4c <HAL_UART_MspInit+0x148>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	f040 808d 	bne.w	8002b42 <HAL_UART_MspInit+0x13e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a28:	4b49      	ldr	r3, [pc, #292]	; (8002b50 <HAL_UART_MspInit+0x14c>)
 8002a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2c:	4a48      	ldr	r2, [pc, #288]	; (8002b50 <HAL_UART_MspInit+0x14c>)
 8002a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a32:	6593      	str	r3, [r2, #88]	; 0x58
 8002a34:	4b46      	ldr	r3, [pc, #280]	; (8002b50 <HAL_UART_MspInit+0x14c>)
 8002a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a40:	4b43      	ldr	r3, [pc, #268]	; (8002b50 <HAL_UART_MspInit+0x14c>)
 8002a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a44:	4a42      	ldr	r2, [pc, #264]	; (8002b50 <HAL_UART_MspInit+0x14c>)
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a4c:	4b40      	ldr	r3, [pc, #256]	; (8002b50 <HAL_UART_MspInit+0x14c>)
 8002a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a58:	2304      	movs	r3, #4
 8002a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a64:	2303      	movs	r3, #3
 8002a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a68:	2307      	movs	r3, #7
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	4619      	mov	r1, r3
 8002a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a76:	f007 fcbd 	bl	800a3f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a80:	2302      	movs	r3, #2
 8002a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	4619      	mov	r1, r3
 8002a96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a9a:	f007 fcab 	bl	800a3f4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002a9e:	4b2d      	ldr	r3, [pc, #180]	; (8002b54 <HAL_UART_MspInit+0x150>)
 8002aa0:	4a2d      	ldr	r2, [pc, #180]	; (8002b58 <HAL_UART_MspInit+0x154>)
 8002aa2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002aa4:	4b2b      	ldr	r3, [pc, #172]	; (8002b54 <HAL_UART_MspInit+0x150>)
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aaa:	4b2a      	ldr	r3, [pc, #168]	; (8002b54 <HAL_UART_MspInit+0x150>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ab0:	4b28      	ldr	r3, [pc, #160]	; (8002b54 <HAL_UART_MspInit+0x150>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ab6:	4b27      	ldr	r3, [pc, #156]	; (8002b54 <HAL_UART_MspInit+0x150>)
 8002ab8:	2280      	movs	r2, #128	; 0x80
 8002aba:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002abc:	4b25      	ldr	r3, [pc, #148]	; (8002b54 <HAL_UART_MspInit+0x150>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ac2:	4b24      	ldr	r3, [pc, #144]	; (8002b54 <HAL_UART_MspInit+0x150>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002ac8:	4b22      	ldr	r3, [pc, #136]	; (8002b54 <HAL_UART_MspInit+0x150>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ace:	4b21      	ldr	r3, [pc, #132]	; (8002b54 <HAL_UART_MspInit+0x150>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002ad4:	481f      	ldr	r0, [pc, #124]	; (8002b54 <HAL_UART_MspInit+0x150>)
 8002ad6:	f007 fad7 	bl	800a088 <HAL_DMA_Init>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 8002ae0:	f7ff fbcc 	bl	800227c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a1b      	ldr	r2, [pc, #108]	; (8002b54 <HAL_UART_MspInit+0x150>)
 8002ae8:	671a      	str	r2, [r3, #112]	; 0x70
 8002aea:	4a1a      	ldr	r2, [pc, #104]	; (8002b54 <HAL_UART_MspInit+0x150>)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002af0:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <HAL_UART_MspInit+0x158>)
 8002af2:	4a1b      	ldr	r2, [pc, #108]	; (8002b60 <HAL_UART_MspInit+0x15c>)
 8002af4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8002af6:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <HAL_UART_MspInit+0x158>)
 8002af8:	2202      	movs	r2, #2
 8002afa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002afc:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <HAL_UART_MspInit+0x158>)
 8002afe:	2210      	movs	r2, #16
 8002b00:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b02:	4b16      	ldr	r3, [pc, #88]	; (8002b5c <HAL_UART_MspInit+0x158>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b08:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <HAL_UART_MspInit+0x158>)
 8002b0a:	2280      	movs	r2, #128	; 0x80
 8002b0c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b0e:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <HAL_UART_MspInit+0x158>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b14:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <HAL_UART_MspInit+0x158>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002b1a:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <HAL_UART_MspInit+0x158>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b20:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <HAL_UART_MspInit+0x158>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002b26:	480d      	ldr	r0, [pc, #52]	; (8002b5c <HAL_UART_MspInit+0x158>)
 8002b28:	f007 faae 	bl	800a088 <HAL_DMA_Init>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 8002b32:	f7ff fba3 	bl	800227c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a08      	ldr	r2, [pc, #32]	; (8002b5c <HAL_UART_MspInit+0x158>)
 8002b3a:	66da      	str	r2, [r3, #108]	; 0x6c
 8002b3c:	4a07      	ldr	r2, [pc, #28]	; (8002b5c <HAL_UART_MspInit+0x158>)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002b42:	bf00      	nop
 8002b44:	3728      	adds	r7, #40	; 0x28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40004400 	.word	0x40004400
 8002b50:	40021000 	.word	0x40021000
 8002b54:	20008a8c 	.word	0x20008a8c
 8002b58:	4002006c 	.word	0x4002006c
 8002b5c:	20008ad4 	.word	0x20008ad4
 8002b60:	40020080 	.word	0x40020080

08002b64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b68:	f7ff fd2e 	bl	80025c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002b6c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002b6e:	e003      	b.n	8002b78 <LoopCopyDataInit>

08002b70 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002b72:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002b74:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002b76:	3104      	adds	r1, #4

08002b78 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002b78:	480a      	ldr	r0, [pc, #40]	; (8002ba4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002b7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002b7c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002b7e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002b80:	d3f6      	bcc.n	8002b70 <CopyDataInit>
	ldr	r2, =_sbss
 8002b82:	4a0a      	ldr	r2, [pc, #40]	; (8002bac <LoopForever+0x12>)
	b	LoopFillZerobss
 8002b84:	e002      	b.n	8002b8c <LoopFillZerobss>

08002b86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002b86:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002b88:	f842 3b04 	str.w	r3, [r2], #4

08002b8c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002b8c:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <LoopForever+0x16>)
	cmp	r2, r3
 8002b8e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002b90:	d3f9      	bcc.n	8002b86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b92:	f00e fb41 	bl	8011218 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b96:	f7ff faa9 	bl	80020ec <main>

08002b9a <LoopForever>:

LoopForever:
    b LoopForever
 8002b9a:	e7fe      	b.n	8002b9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002b9c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002ba0:	080149cc 	.word	0x080149cc
	ldr	r0, =_sdata
 8002ba4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002ba8:	200005b8 	.word	0x200005b8
	ldr	r2, =_sbss
 8002bac:	200005b8 	.word	0x200005b8
	ldr	r3, = _ebss
 8002bb0:	20008c78 	.word	0x20008c78

08002bb4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002bb4:	e7fe      	b.n	8002bb4 <ADC1_IRQHandler>
	...

08002bb8 <AS7341init>:
/*
void AS7341begin(I2C_HandleTypeDef hi2c1){

}
*/
bool AS7341init(I2C_HandleTypeDef hi2c1, int32_t sensor_id){
 8002bb8:	b084      	sub	sp, #16
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	f107 0c08 	add.w	ip, r7, #8
 8002bc2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	as7341.hi2c 			= hi2c1;
 8002bc6:	4b38      	ldr	r3, [pc, #224]	; (8002ca8 <AS7341init+0xf0>)
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f107 0308 	add.w	r3, r7, #8
 8002bce:	224c      	movs	r2, #76	; 0x4c
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f00e fb55 	bl	8011280 <memcpy>

	as7341.sensor_ID 		= sensor_id;
 8002bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	4b33      	ldr	r3, [pc, #204]	; (8002ca8 <AS7341init+0xf0>)
 8002bdc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	as7341.writing_ID		= 0x72;
 8002be0:	4b31      	ldr	r3, [pc, #196]	; (8002ca8 <AS7341init+0xf0>)
 8002be2:	2272      	movs	r2, #114	; 0x72
 8002be4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	as7341.astep.address_L 	= AS7341_ASTEP_L;
 8002be8:	4b2f      	ldr	r3, [pc, #188]	; (8002ca8 <AS7341init+0xf0>)
 8002bea:	22ca      	movs	r2, #202	; 0xca
 8002bec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	as7341.astep.address_H 	= AS7341_ASTEP_H;
 8002bf0:	4b2d      	ldr	r3, [pc, #180]	; (8002ca8 <AS7341init+0xf0>)
 8002bf2:	22cb      	movs	r2, #203	; 0xcb
 8002bf4:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	as7341.astep.value		= 1;
 8002bf8:	4b2b      	ldr	r3, [pc, #172]	; (8002ca8 <AS7341init+0xf0>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

	as7341.atime.address 	= AS7341_ATIME;
 8002c00:	4b29      	ldr	r3, [pc, #164]	; (8002ca8 <AS7341init+0xf0>)
 8002c02:	2281      	movs	r2, #129	; 0x81
 8002c04:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	as7341.atime.value		= 999;
 8002c08:	4b27      	ldr	r3, [pc, #156]	; (8002ca8 <AS7341init+0xf0>)
 8002c0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c0e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	as7341.gain.address		= AS7341_CFG1;
 8002c12:	4b25      	ldr	r3, [pc, #148]	; (8002ca8 <AS7341init+0xf0>)
 8002c14:	22aa      	movs	r2, #170	; 0xaa
 8002c16:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56

	as7341.integrationTime	= (as7341.atime.value + 1) * (as7341.astep.value + 1) * 2.78 / 1000;
 8002c1a:	4b23      	ldr	r3, [pc, #140]	; (8002ca8 <AS7341init+0xf0>)
 8002c1c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c20:	3301      	adds	r3, #1
 8002c22:	4a21      	ldr	r2, [pc, #132]	; (8002ca8 <AS7341init+0xf0>)
 8002c24:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8002c28:	3201      	adds	r2, #1
 8002c2a:	fb02 f303 	mul.w	r3, r2, r3
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fd fc78 	bl	8000524 <__aeabi_i2d>
 8002c34:	a31a      	add	r3, pc, #104	; (adr r3, 8002ca0 <AS7341init+0xe8>)
 8002c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3a:	f7fd fcdd 	bl	80005f8 <__aeabi_dmul>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	4610      	mov	r0, r2
 8002c44:	4619      	mov	r1, r3
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	4b18      	ldr	r3, [pc, #96]	; (8002cac <AS7341init+0xf4>)
 8002c4c:	f7fd fdfe 	bl	800084c <__aeabi_ddiv>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4610      	mov	r0, r2
 8002c56:	4619      	mov	r1, r3
 8002c58:	f7fd ffa6 	bl	8000ba8 <__aeabi_d2uiz>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <AS7341init+0xf0>)
 8002c62:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	as7341_enable_reg = 0x01; /* set PON to 1 */
 8002c66:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <AS7341init+0xf8>)
 8002c68:	2201      	movs	r2, #1
 8002c6a:	701a      	strb	r2, [r3, #0]
	errAS7341 = writeRegister(AS7341_ENABLE, as7341_enable_reg);
 8002c6c:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <AS7341init+0xf8>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	4619      	mov	r1, r3
 8002c72:	2080      	movs	r0, #128	; 0x80
 8002c74:	f000 fb8c 	bl	8003390 <writeRegister>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	4b0d      	ldr	r3, [pc, #52]	; (8002cb4 <AS7341init+0xfc>)
 8002c7e:	701a      	strb	r2, [r3, #0]
	return errAS7341;
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <AS7341init+0xfc>)
 8002c82:	f993 3000 	ldrsb.w	r3, [r3]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	bf14      	ite	ne
 8002c8a:	2301      	movne	r3, #1
 8002c8c:	2300      	moveq	r3, #0
 8002c8e:	b2db      	uxtb	r3, r3
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c98:	b004      	add	sp, #16
 8002c9a:	4770      	bx	lr
 8002c9c:	f3af 8000 	nop.w
 8002ca0:	a3d70a3d 	.word	0xa3d70a3d
 8002ca4:	40063d70 	.word	0x40063d70
 8002ca8:	20008ba0 	.word	0x20008ba0
 8002cac:	408f4000 	.word	0x408f4000
 8002cb0:	20000635 	.word	0x20000635
 8002cb4:	20000634 	.word	0x20000634

08002cb8 <setASTEP>:
//TESTED
as7341_ReturnError_t setASTEP(uint16_t  astep_value) {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	80fb      	strh	r3, [r7, #6]
	//make sure ASTEP is between 0 and 65534
	if(astep_value<0 || astep_value>=65535){
 8002cc2:	88fb      	ldrh	r3, [r7, #6]
 8002cc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d102      	bne.n	8002cd2 <setASTEP+0x1a>
		return AS7341_ERROR_ASTEP_OUT_OF_RANGE;
 8002ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd0:	e01c      	b.n	8002d0c <setASTEP+0x54>
	}

	//write to the LSB astep_value
	errAS7341 = writeRegister(AS7341_ASTEP_L, astep_value);
 8002cd2:	88fb      	ldrh	r3, [r7, #6]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	20ca      	movs	r0, #202	; 0xca
 8002cda:	f000 fb59 	bl	8003390 <writeRegister>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <setASTEP+0x5c>)
 8002ce4:	701a      	strb	r2, [r3, #0]
	//write to the MSB astep_value
	errAS7341 = writeRegister(AS7341_ASTEP_H, astep_value>>8);
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	0a1b      	lsrs	r3, r3, #8
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	4619      	mov	r1, r3
 8002cf0:	20cb      	movs	r0, #203	; 0xcb
 8002cf2:	f000 fb4d 	bl	8003390 <writeRegister>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <setASTEP+0x5c>)
 8002cfc:	701a      	strb	r2, [r3, #0]
	//copy value to register stm32 if everything is ok
	as7341.astep.value = astep_value;
 8002cfe:	4a06      	ldr	r2, [pc, #24]	; (8002d18 <setASTEP+0x60>)
 8002d00:	88fb      	ldrh	r3, [r7, #6]
 8002d02:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50

	return errAS7341;
 8002d06:	4b03      	ldr	r3, [pc, #12]	; (8002d14 <setASTEP+0x5c>)
 8002d08:	f993 3000 	ldrsb.w	r3, [r3]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	20000634 	.word	0x20000634
 8002d18:	20008ba0 	.word	0x20008ba0

08002d1c <setATIME>:

//TESTED
as7341_ReturnError_t setATIME(uint8_t atime_value) {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	71fb      	strb	r3, [r7, #7]
	//make sure ATIME is between 0 and 255
	if(atime_value<0 || atime_value>=255){
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	2bff      	cmp	r3, #255	; 0xff
 8002d2a:	d102      	bne.n	8002d32 <setATIME+0x16>
		return AS7341_ERROR_ATIME_OUT_OF_RANGE;
 8002d2c:	f06f 0301 	mvn.w	r3, #1
 8002d30:	e010      	b.n	8002d54 <setATIME+0x38>
	}

	//uint8_t data[] = {as7341.atime.address, atime_value};
	//set atime on AS7341
	//uint8_t data[] = {AS7341_ATIME, atime_value};
	errAS7341 = writeRegister(AS7341_ATIME, atime_value);
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	4619      	mov	r1, r3
 8002d36:	2081      	movs	r0, #129	; 0x81
 8002d38:	f000 fb2a 	bl	8003390 <writeRegister>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	461a      	mov	r2, r3
 8002d40:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <setATIME+0x40>)
 8002d42:	701a      	strb	r2, [r3, #0]
	//status = HAL_I2C_Master_Transmit(&as7341.hi2c, as7341.writing_ID, data, sizeof(data), HAL_MAX_DELAY);
	//status = HAL_I2C_IsDeviceReady(&as7341.hi2c,as7341.writing_ID,10,200);

	as7341.atime.value = atime_value;
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <setATIME+0x44>)
 8002d4a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	return errAS7341;
 8002d4e:	4b03      	ldr	r3, [pc, #12]	; (8002d5c <setATIME+0x40>)
 8002d50:	f993 3000 	ldrsb.w	r3, [r3]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	20000634 	.word	0x20000634
 8002d60:	20008ba0 	.word	0x20008ba0

08002d64 <setGain>:

//TESTED
as7341_ReturnError_t setGain(uint8_t gain_value) {
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	71fb      	strb	r3, [r7, #7]
	//make sure GAIN is between 0 and 10
	if(gain_value<AS7341_GAIN_0_5X || gain_value>=AS7341_GAIN_512X){
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	2b09      	cmp	r3, #9
 8002d72:	d902      	bls.n	8002d7a <setGain+0x16>
		return AS7341_ERROR_ATIME_OUT_OF_RANGE;
 8002d74:	f06f 0301 	mvn.w	r3, #1
 8002d78:	e00f      	b.n	8002d9a <setGain+0x36>
	}

	//uint8_t data[] = {as7341.gain.address, gain_value};
	//set gain on AS7341
	//uint8_t data[] = {as7341.gain.address, gain_value};
	errAS7341 = writeRegister(AS7341_CFG1, gain_value);
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	20aa      	movs	r0, #170	; 0xaa
 8002d80:	f000 fb06 	bl	8003390 <writeRegister>
 8002d84:	4603      	mov	r3, r0
 8002d86:	461a      	mov	r2, r3
 8002d88:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <setGain+0x40>)
 8002d8a:	701a      	strb	r2, [r3, #0]
	//status = HAL_I2C_Master_Transmit(&as7341.hi2c, as7341.writing_ID, data, sizeof(data), HAL_MAX_DELAY);
	//status = HAL_I2C_IsDeviceReady(&as7341.hi2c, as7341.writing_ID, 10, 200);

	as7341.gain.value = gain_value;
 8002d8c:	4a06      	ldr	r2, [pc, #24]	; (8002da8 <setGain+0x44>)
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	f882 3057 	strb.w	r3, [r2, #87]	; 0x57

	return errAS7341;
 8002d94:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <setGain+0x40>)
 8002d96:	f993 3000 	ldrsb.w	r3, [r3]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000634 	.word	0x20000634
 8002da8:	20008ba0 	.word	0x20008ba0

08002dac <readAllChannels>:
	  as7341.rawToBasicCounts = raw / (gain_val * (as7341.atime.value + 1) * (as7341.astep.value + 1) * 2.78 / 1000);
	  return as7341.rawToBasicCounts;
}

//TESTED
as7341_ReturnError_t readAllChannels(uint16_t *readings_buffer) {
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	6078      	str	r0, [r7, #4]
	uint8_t regwrite[1];

	regwrite[0]=AS7341_CH0_DATA_L;
 8002db4:	2395      	movs	r3, #149	; 0x95
 8002db6:	733b      	strb	r3, [r7, #12]

    errAS7341 = setSMUXLowChannels(1);        /* Configure SMUX to read low channels */
 8002db8:	2001      	movs	r0, #1
 8002dba:	f000 fb15 	bl	80033e8 <setSMUXLowChannels>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4b85      	ldr	r3, [pc, #532]	; (8002fd8 <readAllChannels+0x22c>)
 8002dc4:	701a      	strb	r2, [r3, #0]
    if(errAS7341){return errAS7341;}
 8002dc6:	4b84      	ldr	r3, [pc, #528]	; (8002fd8 <readAllChannels+0x22c>)
 8002dc8:	f993 3000 	ldrsb.w	r3, [r3]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <readAllChannels+0x2c>
 8002dd0:	4b81      	ldr	r3, [pc, #516]	; (8002fd8 <readAllChannels+0x22c>)
 8002dd2:	f993 3000 	ldrsb.w	r3, [r3]
 8002dd6:	e0fa      	b.n	8002fce <readAllChannels+0x222>

    errAS7341 = enableSpectralMeasurement(1); /* Start integration */
 8002dd8:	2001      	movs	r0, #1
 8002dda:	f000 f9e7 	bl	80031ac <enableSpectralMeasurement>
 8002dde:	4603      	mov	r3, r0
 8002de0:	461a      	mov	r2, r3
 8002de2:	4b7d      	ldr	r3, [pc, #500]	; (8002fd8 <readAllChannels+0x22c>)
 8002de4:	701a      	strb	r2, [r3, #0]
    if(errAS7341){return errAS7341;}
 8002de6:	4b7c      	ldr	r3, [pc, #496]	; (8002fd8 <readAllChannels+0x22c>)
 8002de8:	f993 3000 	ldrsb.w	r3, [r3]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <readAllChannels+0x4c>
 8002df0:	4b79      	ldr	r3, [pc, #484]	; (8002fd8 <readAllChannels+0x22c>)
 8002df2:	f993 3000 	ldrsb.w	r3, [r3]
 8002df6:	e0ea      	b.n	8002fce <readAllChannels+0x222>
    //osDelay(500); /* IMPORTANT NEED TO GIVE TIME FOR SPECTRO TO GET READY */

    errAS7341 = delayForData(0);                 /* I'll wait for you for all time */
 8002df8:	2000      	movs	r0, #0
 8002dfa:	f000 f8f5 	bl	8002fe8 <delayForData>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	461a      	mov	r2, r3
 8002e02:	4b75      	ldr	r3, [pc, #468]	; (8002fd8 <readAllChannels+0x22c>)
 8002e04:	701a      	strb	r2, [r3, #0]
    if(errAS7341){return errAS7341;}
 8002e06:	4b74      	ldr	r3, [pc, #464]	; (8002fd8 <readAllChannels+0x22c>)
 8002e08:	f993 3000 	ldrsb.w	r3, [r3]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d003      	beq.n	8002e18 <readAllChannels+0x6c>
 8002e10:	4b71      	ldr	r3, [pc, #452]	; (8002fd8 <readAllChannels+0x22c>)
 8002e12:	f993 3000 	ldrsb.w	r3, [r3]
 8002e16:	e0da      	b.n	8002fce <readAllChannels+0x222>


    errAS7341 = HAL_I2C_Master_Transmit(&as7341.hi2c, as7341.writing_ID, regwrite, 1, HAL_MAX_DELAY);
 8002e18:	4b70      	ldr	r3, [pc, #448]	; (8002fdc <readAllChannels+0x230>)
 8002e1a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002e1e:	b299      	uxth	r1, r3
 8002e20:	f107 020c 	add.w	r2, r7, #12
 8002e24:	f04f 33ff 	mov.w	r3, #4294967295
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	486b      	ldr	r0, [pc, #428]	; (8002fdc <readAllChannels+0x230>)
 8002e2e:	f007 fda5 	bl	800a97c <HAL_I2C_Master_Transmit>
 8002e32:	4603      	mov	r3, r0
 8002e34:	b25a      	sxtb	r2, r3
 8002e36:	4b68      	ldr	r3, [pc, #416]	; (8002fd8 <readAllChannels+0x22c>)
 8002e38:	701a      	strb	r2, [r3, #0]
    errAS7341 = HAL_I2C_IsDeviceReady(&as7341.hi2c,as7341.writing_ID,10,200);
 8002e3a:	4b68      	ldr	r3, [pc, #416]	; (8002fdc <readAllChannels+0x230>)
 8002e3c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002e40:	b299      	uxth	r1, r3
 8002e42:	23c8      	movs	r3, #200	; 0xc8
 8002e44:	220a      	movs	r2, #10
 8002e46:	4865      	ldr	r0, [pc, #404]	; (8002fdc <readAllChannels+0x230>)
 8002e48:	f007 ff82 	bl	800ad50 <HAL_I2C_IsDeviceReady>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	b25a      	sxtb	r2, r3
 8002e50:	4b61      	ldr	r3, [pc, #388]	; (8002fd8 <readAllChannels+0x22c>)
 8002e52:	701a      	strb	r2, [r3, #0]

  	errAS7341 = HAL_I2C_Master_Transmit(&as7341.hi2c, as7341.writing_ID, regwrite, sizeof(regwrite), HAL_MAX_DELAY);
 8002e54:	4b61      	ldr	r3, [pc, #388]	; (8002fdc <readAllChannels+0x230>)
 8002e56:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002e5a:	b299      	uxth	r1, r3
 8002e5c:	f107 020c 	add.w	r2, r7, #12
 8002e60:	f04f 33ff 	mov.w	r3, #4294967295
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	2301      	movs	r3, #1
 8002e68:	485c      	ldr	r0, [pc, #368]	; (8002fdc <readAllChannels+0x230>)
 8002e6a:	f007 fd87 	bl	800a97c <HAL_I2C_Master_Transmit>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	b25a      	sxtb	r2, r3
 8002e72:	4b59      	ldr	r3, [pc, #356]	; (8002fd8 <readAllChannels+0x22c>)
 8002e74:	701a      	strb	r2, [r3, #0]
  	errAS7341 = HAL_I2C_IsDeviceReady(&as7341.hi2c,as7341.writing_ID,10,200);
 8002e76:	4b59      	ldr	r3, [pc, #356]	; (8002fdc <readAllChannels+0x230>)
 8002e78:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002e7c:	b299      	uxth	r1, r3
 8002e7e:	23c8      	movs	r3, #200	; 0xc8
 8002e80:	220a      	movs	r2, #10
 8002e82:	4856      	ldr	r0, [pc, #344]	; (8002fdc <readAllChannels+0x230>)
 8002e84:	f007 ff64 	bl	800ad50 <HAL_I2C_IsDeviceReady>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	b25a      	sxtb	r2, r3
 8002e8c:	4b52      	ldr	r3, [pc, #328]	; (8002fd8 <readAllChannels+0x22c>)
 8002e8e:	701a      	strb	r2, [r3, #0]
  	errAS7341 = HAL_I2C_Master_Receive(&as7341.hi2c, as7341.writing_ID, (uint8_t *)as7341._channel_readings, 12, HAL_MAX_DELAY);
 8002e90:	4b52      	ldr	r3, [pc, #328]	; (8002fdc <readAllChannels+0x230>)
 8002e92:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002e96:	b299      	uxth	r1, r3
 8002e98:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	230c      	movs	r3, #12
 8002ea0:	4a4f      	ldr	r2, [pc, #316]	; (8002fe0 <readAllChannels+0x234>)
 8002ea2:	484e      	ldr	r0, [pc, #312]	; (8002fdc <readAllChannels+0x230>)
 8002ea4:	f007 fe5e 	bl	800ab64 <HAL_I2C_Master_Receive>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	b25a      	sxtb	r2, r3
 8002eac:	4b4a      	ldr	r3, [pc, #296]	; (8002fd8 <readAllChannels+0x22c>)
 8002eae:	701a      	strb	r2, [r3, #0]

  	if(errAS7341){return errAS7341;}
 8002eb0:	4b49      	ldr	r3, [pc, #292]	; (8002fd8 <readAllChannels+0x22c>)
 8002eb2:	f993 3000 	ldrsb.w	r3, [r3]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <readAllChannels+0x116>
 8002eba:	4b47      	ldr	r3, [pc, #284]	; (8002fd8 <readAllChannels+0x22c>)
 8002ebc:	f993 3000 	ldrsb.w	r3, [r3]
 8002ec0:	e085      	b.n	8002fce <readAllChannels+0x222>

  	errAS7341 = setSMUXLowChannels(0);       /* Configure SMUX to read high channels */
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	f000 fa90 	bl	80033e8 <setSMUXLowChannels>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4b42      	ldr	r3, [pc, #264]	; (8002fd8 <readAllChannels+0x22c>)
 8002ece:	701a      	strb	r2, [r3, #0]
  	if(errAS7341){return errAS7341;}
 8002ed0:	4b41      	ldr	r3, [pc, #260]	; (8002fd8 <readAllChannels+0x22c>)
 8002ed2:	f993 3000 	ldrsb.w	r3, [r3]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <readAllChannels+0x136>
 8002eda:	4b3f      	ldr	r3, [pc, #252]	; (8002fd8 <readAllChannels+0x22c>)
 8002edc:	f993 3000 	ldrsb.w	r3, [r3]
 8002ee0:	e075      	b.n	8002fce <readAllChannels+0x222>

  	errAS7341 = enableSpectralMeasurement(1); /* Start integration */
 8002ee2:	2001      	movs	r0, #1
 8002ee4:	f000 f962 	bl	80031ac <enableSpectralMeasurement>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	461a      	mov	r2, r3
 8002eec:	4b3a      	ldr	r3, [pc, #232]	; (8002fd8 <readAllChannels+0x22c>)
 8002eee:	701a      	strb	r2, [r3, #0]
  	if(errAS7341){return errAS7341;}
 8002ef0:	4b39      	ldr	r3, [pc, #228]	; (8002fd8 <readAllChannels+0x22c>)
 8002ef2:	f993 3000 	ldrsb.w	r3, [r3]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <readAllChannels+0x156>
 8002efa:	4b37      	ldr	r3, [pc, #220]	; (8002fd8 <readAllChannels+0x22c>)
 8002efc:	f993 3000 	ldrsb.w	r3, [r3]
 8002f00:	e065      	b.n	8002fce <readAllChannels+0x222>
  	//osDelay(500); /* IMPORTANT NEED TO GIVE TIME FOR SPECTRO TO GET READY */

  	errAS7341 = delayForData(0);                 /* I'll wait for you for all time */
 8002f02:	2000      	movs	r0, #0
 8002f04:	f000 f870 	bl	8002fe8 <delayForData>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	4b32      	ldr	r3, [pc, #200]	; (8002fd8 <readAllChannels+0x22c>)
 8002f0e:	701a      	strb	r2, [r3, #0]
  	if(errAS7341){return errAS7341;}
 8002f10:	4b31      	ldr	r3, [pc, #196]	; (8002fd8 <readAllChannels+0x22c>)
 8002f12:	f993 3000 	ldrsb.w	r3, [r3]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <readAllChannels+0x176>
 8002f1a:	4b2f      	ldr	r3, [pc, #188]	; (8002fd8 <readAllChannels+0x22c>)
 8002f1c:	f993 3000 	ldrsb.w	r3, [r3]
 8002f20:	e055      	b.n	8002fce <readAllChannels+0x222>

  	errAS7341 = HAL_I2C_Master_Transmit(&as7341.hi2c, as7341.writing_ID, regwrite, 1, HAL_MAX_DELAY);
 8002f22:	4b2e      	ldr	r3, [pc, #184]	; (8002fdc <readAllChannels+0x230>)
 8002f24:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002f28:	b299      	uxth	r1, r3
 8002f2a:	f107 020c 	add.w	r2, r7, #12
 8002f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	2301      	movs	r3, #1
 8002f36:	4829      	ldr	r0, [pc, #164]	; (8002fdc <readAllChannels+0x230>)
 8002f38:	f007 fd20 	bl	800a97c <HAL_I2C_Master_Transmit>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	b25a      	sxtb	r2, r3
 8002f40:	4b25      	ldr	r3, [pc, #148]	; (8002fd8 <readAllChannels+0x22c>)
 8002f42:	701a      	strb	r2, [r3, #0]
  	errAS7341 = HAL_I2C_IsDeviceReady(&as7341.hi2c,as7341.writing_ID,10,200);
 8002f44:	4b25      	ldr	r3, [pc, #148]	; (8002fdc <readAllChannels+0x230>)
 8002f46:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002f4a:	b299      	uxth	r1, r3
 8002f4c:	23c8      	movs	r3, #200	; 0xc8
 8002f4e:	220a      	movs	r2, #10
 8002f50:	4822      	ldr	r0, [pc, #136]	; (8002fdc <readAllChannels+0x230>)
 8002f52:	f007 fefd 	bl	800ad50 <HAL_I2C_IsDeviceReady>
 8002f56:	4603      	mov	r3, r0
 8002f58:	b25a      	sxtb	r2, r3
 8002f5a:	4b1f      	ldr	r3, [pc, #124]	; (8002fd8 <readAllChannels+0x22c>)
 8002f5c:	701a      	strb	r2, [r3, #0]

  	errAS7341 = HAL_I2C_Master_Transmit(&as7341.hi2c, as7341.writing_ID, regwrite, sizeof(regwrite), HAL_MAX_DELAY);
 8002f5e:	4b1f      	ldr	r3, [pc, #124]	; (8002fdc <readAllChannels+0x230>)
 8002f60:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002f64:	b299      	uxth	r1, r3
 8002f66:	f107 020c 	add.w	r2, r7, #12
 8002f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	2301      	movs	r3, #1
 8002f72:	481a      	ldr	r0, [pc, #104]	; (8002fdc <readAllChannels+0x230>)
 8002f74:	f007 fd02 	bl	800a97c <HAL_I2C_Master_Transmit>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	b25a      	sxtb	r2, r3
 8002f7c:	4b16      	ldr	r3, [pc, #88]	; (8002fd8 <readAllChannels+0x22c>)
 8002f7e:	701a      	strb	r2, [r3, #0]
  	errAS7341 = HAL_I2C_IsDeviceReady(&as7341.hi2c,as7341.writing_ID,10,200);
 8002f80:	4b16      	ldr	r3, [pc, #88]	; (8002fdc <readAllChannels+0x230>)
 8002f82:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002f86:	b299      	uxth	r1, r3
 8002f88:	23c8      	movs	r3, #200	; 0xc8
 8002f8a:	220a      	movs	r2, #10
 8002f8c:	4813      	ldr	r0, [pc, #76]	; (8002fdc <readAllChannels+0x230>)
 8002f8e:	f007 fedf 	bl	800ad50 <HAL_I2C_IsDeviceReady>
 8002f92:	4603      	mov	r3, r0
 8002f94:	b25a      	sxtb	r2, r3
 8002f96:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <readAllChannels+0x22c>)
 8002f98:	701a      	strb	r2, [r3, #0]
  	errAS7341 = HAL_I2C_Master_Receive(&as7341.hi2c, as7341.writing_ID, (uint8_t *)&as7341._channel_readings[6], 12, HAL_MAX_DELAY);
 8002f9a:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <readAllChannels+0x230>)
 8002f9c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002fa0:	b299      	uxth	r1, r3
 8002fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	230c      	movs	r3, #12
 8002faa:	4a0e      	ldr	r2, [pc, #56]	; (8002fe4 <readAllChannels+0x238>)
 8002fac:	480b      	ldr	r0, [pc, #44]	; (8002fdc <readAllChannels+0x230>)
 8002fae:	f007 fdd9 	bl	800ab64 <HAL_I2C_Master_Receive>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	b25a      	sxtb	r2, r3
 8002fb6:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <readAllChannels+0x22c>)
 8002fb8:	701a      	strb	r2, [r3, #0]
  	if(errAS7341){return errAS7341;}
 8002fba:	4b07      	ldr	r3, [pc, #28]	; (8002fd8 <readAllChannels+0x22c>)
 8002fbc:	f993 3000 	ldrsb.w	r3, [r3]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <readAllChannels+0x220>
 8002fc4:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <readAllChannels+0x22c>)
 8002fc6:	f993 3000 	ldrsb.w	r3, [r3]
 8002fca:	e000      	b.n	8002fce <readAllChannels+0x222>

	return AS7341_ERROR_NO;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000634 	.word	0x20000634
 8002fdc:	20008ba0 	.word	0x20008ba0
 8002fe0:	20008c04 	.word	0x20008c04
 8002fe4:	20008c10 	.word	0x20008c10

08002fe8 <delayForData>:

//TESTED
as7341_ReturnError_t delayForData(int waitTime) {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
	if(waitTime == 0){
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10a      	bne.n	800300c <delayForData+0x24>
		while(!getIsDataReady()) {
 8002ff6:	bf00      	nop
 8002ff8:	f000 f910 	bl	800321c <getIsDataReady>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f083 0301 	eor.w	r3, r3, #1
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1f7      	bne.n	8002ff8 <delayForData+0x10>
			/* TODO add a timeout */
		}
		return AS7341_ERROR_NO;
 8003008:	2300      	movs	r3, #0
 800300a:	e000      	b.n	800300e <delayForData+0x26>
	}

	return AS7341_ERROR_NO;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <getChannel>:

	//as7341._channel_readings[channel] = ((as7341._channel_readings[channel] & 0x00FF) << 8) | (as7341._channel_readings[channel]>>8);
	return AS7341_ERROR_NO;
}
//TESTED
uint16_t getChannel(as7341_color_channel_t channel) {
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	71fb      	strb	r3, [r7, #7]
	/*  Swap msb and lsb  */
	return (((as7341._channel_readings[channel] & 0x00FF) << 8) | (as7341._channel_readings[channel]>>8));
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	4a0c      	ldr	r2, [pc, #48]	; (8003058 <getChannel+0x40>)
 8003026:	3330      	adds	r3, #48	; 0x30
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	4413      	add	r3, r2
 800302c:	889b      	ldrh	r3, [r3, #4]
 800302e:	021b      	lsls	r3, r3, #8
 8003030:	b21a      	sxth	r2, r3
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	4908      	ldr	r1, [pc, #32]	; (8003058 <getChannel+0x40>)
 8003036:	3330      	adds	r3, #48	; 0x30
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	440b      	add	r3, r1
 800303c:	889b      	ldrh	r3, [r3, #4]
 800303e:	0a1b      	lsrs	r3, r3, #8
 8003040:	b29b      	uxth	r3, r3
 8003042:	b21b      	sxth	r3, r3
 8003044:	4313      	orrs	r3, r2
 8003046:	b21b      	sxth	r3, r3
 8003048:	b29b      	uxth	r3, r3
}
 800304a:	4618      	mov	r0, r3
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	20008ba0 	.word	0x20008ba0

0800305c <setup_F1F4_Clear_NIR>:
	  default:
	    return 0;
	  }
}

void setup_F1F4_Clear_NIR() {
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  // SMUX Config for F1,F2,F3,F4,NIR,Clear
  writeRegister((0x00), (0x30)); // F3 left set to ADC2
 8003060:	2130      	movs	r1, #48	; 0x30
 8003062:	2000      	movs	r0, #0
 8003064:	f000 f994 	bl	8003390 <writeRegister>
  writeRegister((0x01), (0x01)); // F1 left set to ADC0
 8003068:	2101      	movs	r1, #1
 800306a:	2001      	movs	r0, #1
 800306c:	f000 f990 	bl	8003390 <writeRegister>
  writeRegister((0x02), (0x00)); // Reserved or disabled
 8003070:	2100      	movs	r1, #0
 8003072:	2002      	movs	r0, #2
 8003074:	f000 f98c 	bl	8003390 <writeRegister>
  writeRegister((0x03), (0x00)); // F8 left disabled
 8003078:	2100      	movs	r1, #0
 800307a:	2003      	movs	r0, #3
 800307c:	f000 f988 	bl	8003390 <writeRegister>
  writeRegister((0x04), (0x00)); // F6 left disabled
 8003080:	2100      	movs	r1, #0
 8003082:	2004      	movs	r0, #4
 8003084:	f000 f984 	bl	8003390 <writeRegister>
  writeRegister((0x05), (0x42)); // F4 left connected to ADC3/f2 left connected to ADC1
 8003088:	2142      	movs	r1, #66	; 0x42
 800308a:	2005      	movs	r0, #5
 800308c:	f000 f980 	bl	8003390 <writeRegister>
  writeRegister((0x06), (0x00)); // F5 left disbled
 8003090:	2100      	movs	r1, #0
 8003092:	2006      	movs	r0, #6
 8003094:	f000 f97c 	bl	8003390 <writeRegister>
  writeRegister((0x07), (0x00)); // F7 left disbled
 8003098:	2100      	movs	r1, #0
 800309a:	2007      	movs	r0, #7
 800309c:	f000 f978 	bl	8003390 <writeRegister>
  writeRegister((0x08), (0x50)); // CLEAR connected to ADC4
 80030a0:	2150      	movs	r1, #80	; 0x50
 80030a2:	2008      	movs	r0, #8
 80030a4:	f000 f974 	bl	8003390 <writeRegister>
  writeRegister((0x09), (0x00)); // F5 right disabled
 80030a8:	2100      	movs	r1, #0
 80030aa:	2009      	movs	r0, #9
 80030ac:	f000 f970 	bl	8003390 <writeRegister>
  writeRegister((0x0A), (0x00)); // F7 right disabled
 80030b0:	2100      	movs	r1, #0
 80030b2:	200a      	movs	r0, #10
 80030b4:	f000 f96c 	bl	8003390 <writeRegister>
  writeRegister((0x0B), (0x00)); // Reserved or disabled
 80030b8:	2100      	movs	r1, #0
 80030ba:	200b      	movs	r0, #11
 80030bc:	f000 f968 	bl	8003390 <writeRegister>
  writeRegister((0x0C), (0x20)); // F2 right connected to ADC1
 80030c0:	2120      	movs	r1, #32
 80030c2:	200c      	movs	r0, #12
 80030c4:	f000 f964 	bl	8003390 <writeRegister>
  writeRegister((0x0D), (0x04)); // F4 right connected to ADC3
 80030c8:	2104      	movs	r1, #4
 80030ca:	200d      	movs	r0, #13
 80030cc:	f000 f960 	bl	8003390 <writeRegister>
  writeRegister((0x0E), (0x00)); // F6/F8 right disabled
 80030d0:	2100      	movs	r1, #0
 80030d2:	200e      	movs	r0, #14
 80030d4:	f000 f95c 	bl	8003390 <writeRegister>
  writeRegister((0x0F), (0x30)); // F3 right connected to AD2
 80030d8:	2130      	movs	r1, #48	; 0x30
 80030da:	200f      	movs	r0, #15
 80030dc:	f000 f958 	bl	8003390 <writeRegister>
  writeRegister((0x10), (0x01)); // F1 right connected to AD0
 80030e0:	2101      	movs	r1, #1
 80030e2:	2010      	movs	r0, #16
 80030e4:	f000 f954 	bl	8003390 <writeRegister>
  writeRegister((0x11), (0x50)); // CLEAR right connected to AD4
 80030e8:	2150      	movs	r1, #80	; 0x50
 80030ea:	2011      	movs	r0, #17
 80030ec:	f000 f950 	bl	8003390 <writeRegister>
  writeRegister((0x12), (0x00)); // Reserved or disabled
 80030f0:	2100      	movs	r1, #0
 80030f2:	2012      	movs	r0, #18
 80030f4:	f000 f94c 	bl	8003390 <writeRegister>
  writeRegister((0x13), (0x06)); // NIR connected to ADC5
 80030f8:	2106      	movs	r1, #6
 80030fa:	2013      	movs	r0, #19
 80030fc:	f000 f948 	bl	8003390 <writeRegister>
}
 8003100:	bf00      	nop
 8003102:	bd80      	pop	{r7, pc}

08003104 <setup_F5F8_Clear_NIR>:

void setup_F5F8_Clear_NIR() {
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  // SMUX Config for F5,F6,F7,F8,NIR,Clear
  writeRegister((0x00), (0x00)); // F3 left disable
 8003108:	2100      	movs	r1, #0
 800310a:	2000      	movs	r0, #0
 800310c:	f000 f940 	bl	8003390 <writeRegister>
  writeRegister((0x01), (0x00)); // F1 left disable
 8003110:	2100      	movs	r1, #0
 8003112:	2001      	movs	r0, #1
 8003114:	f000 f93c 	bl	8003390 <writeRegister>
  writeRegister((0x02), (0x00)); // reserved/disable
 8003118:	2100      	movs	r1, #0
 800311a:	2002      	movs	r0, #2
 800311c:	f000 f938 	bl	8003390 <writeRegister>
  writeRegister((0x03), (0x40)); // F8 left connected to ADC3
 8003120:	2140      	movs	r1, #64	; 0x40
 8003122:	2003      	movs	r0, #3
 8003124:	f000 f934 	bl	8003390 <writeRegister>
  writeRegister((0x04), (0x02)); // F6 left connected to ADC1
 8003128:	2102      	movs	r1, #2
 800312a:	2004      	movs	r0, #4
 800312c:	f000 f930 	bl	8003390 <writeRegister>
  writeRegister((0x05), (0x00)); // F4/ F2 disabled
 8003130:	2100      	movs	r1, #0
 8003132:	2005      	movs	r0, #5
 8003134:	f000 f92c 	bl	8003390 <writeRegister>
  writeRegister((0x06), (0x10)); // F5 left connected to ADC0
 8003138:	2110      	movs	r1, #16
 800313a:	2006      	movs	r0, #6
 800313c:	f000 f928 	bl	8003390 <writeRegister>
  writeRegister((0x07), (0x03)); // F7 left connected to ADC2
 8003140:	2103      	movs	r1, #3
 8003142:	2007      	movs	r0, #7
 8003144:	f000 f924 	bl	8003390 <writeRegister>
  writeRegister((0x08), (0x50)); // CLEAR Connected to ADC4
 8003148:	2150      	movs	r1, #80	; 0x50
 800314a:	2008      	movs	r0, #8
 800314c:	f000 f920 	bl	8003390 <writeRegister>
  writeRegister((0x09), (0x10)); // F5 right connected to ADC0
 8003150:	2110      	movs	r1, #16
 8003152:	2009      	movs	r0, #9
 8003154:	f000 f91c 	bl	8003390 <writeRegister>
  writeRegister((0x0A), (0x03)); // F7 right connected to ADC2
 8003158:	2103      	movs	r1, #3
 800315a:	200a      	movs	r0, #10
 800315c:	f000 f918 	bl	8003390 <writeRegister>
  writeRegister((0x0B), (0x00)); // Reserved or disabled
 8003160:	2100      	movs	r1, #0
 8003162:	200b      	movs	r0, #11
 8003164:	f000 f914 	bl	8003390 <writeRegister>
  writeRegister((0x0C), (0x00)); // F2 right disabled
 8003168:	2100      	movs	r1, #0
 800316a:	200c      	movs	r0, #12
 800316c:	f000 f910 	bl	8003390 <writeRegister>
  writeRegister((0x0D), (0x00)); // F4 right disabled
 8003170:	2100      	movs	r1, #0
 8003172:	200d      	movs	r0, #13
 8003174:	f000 f90c 	bl	8003390 <writeRegister>
  writeRegister((0x0E), (0x24)); // F8 right connected to ADC2/ F6 right connected to ADC1
 8003178:	2124      	movs	r1, #36	; 0x24
 800317a:	200e      	movs	r0, #14
 800317c:	f000 f908 	bl	8003390 <writeRegister>
  writeRegister((0x0F), (0x00)); // F3 right disabled
 8003180:	2100      	movs	r1, #0
 8003182:	200f      	movs	r0, #15
 8003184:	f000 f904 	bl	8003390 <writeRegister>
  writeRegister((0x10), (0x00)); // F1 right disabled
 8003188:	2100      	movs	r1, #0
 800318a:	2010      	movs	r0, #16
 800318c:	f000 f900 	bl	8003390 <writeRegister>
  writeRegister((0x11), (0x50)); // CLEAR right connected to AD4
 8003190:	2150      	movs	r1, #80	; 0x50
 8003192:	2011      	movs	r0, #17
 8003194:	f000 f8fc 	bl	8003390 <writeRegister>
  writeRegister((0x12), (0x00)); // Reserved or disabled
 8003198:	2100      	movs	r1, #0
 800319a:	2012      	movs	r0, #18
 800319c:	f000 f8f8 	bl	8003390 <writeRegister>
  writeRegister((0x13), (0x06)); // NIR connected to ADC5
 80031a0:	2106      	movs	r1, #6
 80031a2:	2013      	movs	r0, #19
 80031a4:	f000 f8f4 	bl	8003390 <writeRegister>
}
 80031a8:	bf00      	nop
 80031aa:	bd80      	pop	{r7, pc}

080031ac <enableSpectralMeasurement>:
	uint8_t regWrite[] = {AS7341_ENABLE, 0x01}; //PON to 1
	while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regWrite, sizeof(regWrite), HAL_MAX_DELAY) != HAL_OK);
	while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200) != HAL_OK);
}

as7341_ReturnError_t enableSpectralMeasurement(bool enable_measurement) {
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af02      	add	r7, sp, #8
 80031b2:	4603      	mov	r3, r0
 80031b4:	71fb      	strb	r3, [r7, #7]
	uint8_t regwrite[2];
	regwrite[0] = AS7341_ENABLE;
 80031b6:	2380      	movs	r3, #128	; 0x80
 80031b8:	733b      	strb	r3, [r7, #12]

	/*
	 * 	   Changing the n_th bit to x
	 *     (number & ~(1UL << n)) will clear the nth bit and (x << n) will set the nth bit to x
	 */
	as7341_enable_reg = (as7341_enable_reg & ~(1UL << 0x01)) | (enable_measurement << 0x01); /* setting as7341_enable_reg bit 0x01 SP_EN to enable_measurement  */
 80031ba:	4b16      	ldr	r3, [pc, #88]	; (8003214 <enableSpectralMeasurement+0x68>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	f023 0302 	bic.w	r3, r3, #2
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	79fb      	ldrb	r3, [r7, #7]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	4313      	orrs	r3, r2
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	4b11      	ldr	r3, [pc, #68]	; (8003214 <enableSpectralMeasurement+0x68>)
 80031d0:	701a      	strb	r2, [r3, #0]
	regwrite[1] = as7341_enable_reg;
 80031d2:	4b10      	ldr	r3, [pc, #64]	; (8003214 <enableSpectralMeasurement+0x68>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY)!=HAL_OK);
 80031d8:	bf00      	nop
 80031da:	f107 020c 	add.w	r2, r7, #12
 80031de:	f04f 33ff 	mov.w	r3, #4294967295
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	2302      	movs	r3, #2
 80031e6:	2172      	movs	r1, #114	; 0x72
 80031e8:	480b      	ldr	r0, [pc, #44]	; (8003218 <enableSpectralMeasurement+0x6c>)
 80031ea:	f007 fbc7 	bl	800a97c <HAL_I2C_Master_Transmit>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1f2      	bne.n	80031da <enableSpectralMeasurement+0x2e>
	while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
 80031f4:	bf00      	nop
 80031f6:	23c8      	movs	r3, #200	; 0xc8
 80031f8:	220a      	movs	r2, #10
 80031fa:	2172      	movs	r1, #114	; 0x72
 80031fc:	4806      	ldr	r0, [pc, #24]	; (8003218 <enableSpectralMeasurement+0x6c>)
 80031fe:	f007 fda7 	bl	800ad50 <HAL_I2C_IsDeviceReady>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1f6      	bne.n	80031f6 <enableSpectralMeasurement+0x4a>

  return AS7341_ERROR_NO;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20000635 	.word	0x20000635
 8003218:	20008ba0 	.word	0x20008ba0

0800321c <getIsDataReady>:
	uint8_t regwrite[]={AS7341_ENABLE,0x00}; //PON to 1
	while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
	while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
}

bool getIsDataReady(){
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af02      	add	r7, sp, #8
	uint8_t regwrite[2];
	uint8_t regRead[1];

	regwrite[0] = AS7341_STATUS2;
 8003222:	23a3      	movs	r3, #163	; 0xa3
 8003224:	713b      	strb	r3, [r7, #4]
	status = HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, 1, HAL_MAX_DELAY);
 8003226:	1d3a      	adds	r2, r7, #4
 8003228:	f04f 33ff 	mov.w	r3, #4294967295
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	2301      	movs	r3, #1
 8003230:	2172      	movs	r1, #114	; 0x72
 8003232:	4820      	ldr	r0, [pc, #128]	; (80032b4 <getIsDataReady+0x98>)
 8003234:	f007 fba2 	bl	800a97c <HAL_I2C_Master_Transmit>
 8003238:	4603      	mov	r3, r0
 800323a:	461a      	mov	r2, r3
 800323c:	4b1e      	ldr	r3, [pc, #120]	; (80032b8 <getIsDataReady+0x9c>)
 800323e:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200);
 8003240:	23c8      	movs	r3, #200	; 0xc8
 8003242:	220a      	movs	r2, #10
 8003244:	2172      	movs	r1, #114	; 0x72
 8003246:	481b      	ldr	r0, [pc, #108]	; (80032b4 <getIsDataReady+0x98>)
 8003248:	f007 fd82 	bl	800ad50 <HAL_I2C_IsDeviceReady>
 800324c:	4603      	mov	r3, r0
 800324e:	461a      	mov	r2, r3
 8003250:	4b19      	ldr	r3, [pc, #100]	; (80032b8 <getIsDataReady+0x9c>)
 8003252:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Master_Receive(&as7341.hi2c, as7341.writing_ID, regRead, sizeof(regRead), HAL_MAX_DELAY);
 8003254:	4b17      	ldr	r3, [pc, #92]	; (80032b4 <getIsDataReady+0x98>)
 8003256:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800325a:	b299      	uxth	r1, r3
 800325c:	463a      	mov	r2, r7
 800325e:	f04f 33ff 	mov.w	r3, #4294967295
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	2301      	movs	r3, #1
 8003266:	4813      	ldr	r0, [pc, #76]	; (80032b4 <getIsDataReady+0x98>)
 8003268:	f007 fc7c 	bl	800ab64 <HAL_I2C_Master_Receive>
 800326c:	4603      	mov	r3, r0
 800326e:	461a      	mov	r2, r3
 8003270:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <getIsDataReady+0x9c>)
 8003272:	701a      	strb	r2, [r3, #0]
	 *  register clears that status bit. In this way, the user should read the STATUS register, handle all
	 *  indicated event(s) and then write the register value back to STATUS to clear the handled events.
	 *  Writing “0” will not clear those bits if they have a value of “1”, which means that new events that
	 *  occurred since the last read of the STATUS register will not be accidentally cleared.
	 */
	if(regRead[0]>>6){
 8003274:	783b      	ldrb	r3, [r7, #0]
 8003276:	099b      	lsrs	r3, r3, #6
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00e      	beq.n	800329c <getIsDataReady+0x80>
    	regwrite[1] = regRead[0];
 800327e:	783b      	ldrb	r3, [r7, #0]
 8003280:	717b      	strb	r3, [r7, #5]
    	status = HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY);
 8003282:	1d3a      	adds	r2, r7, #4
 8003284:	f04f 33ff 	mov.w	r3, #4294967295
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	2302      	movs	r3, #2
 800328c:	2172      	movs	r1, #114	; 0x72
 800328e:	4809      	ldr	r0, [pc, #36]	; (80032b4 <getIsDataReady+0x98>)
 8003290:	f007 fb74 	bl	800a97c <HAL_I2C_Master_Transmit>
 8003294:	4603      	mov	r3, r0
 8003296:	461a      	mov	r2, r3
 8003298:	4b07      	ldr	r3, [pc, #28]	; (80032b8 <getIsDataReady+0x9c>)
 800329a:	701a      	strb	r2, [r3, #0]
    }

    return (regRead[0]>>6);
 800329c:	783b      	ldrb	r3, [r7, #0]
 800329e:	099b      	lsrs	r3, r3, #6
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	bf14      	ite	ne
 80032a6:	2301      	movne	r3, #1
 80032a8:	2300      	moveq	r3, #0
 80032aa:	b2db      	uxtb	r3, r3
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	20008ba0 	.word	0x20008ba0
 80032b8:	20008c20 	.word	0x20008c20

080032bc <enableSMUX>:
	while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regWrite, sizeof(regWrite), HAL_MAX_DELAY) != HAL_OK);
	while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
	return 1;
}*/

bool enableSMUX() {
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af02      	add	r7, sp, #8

	/*
	 * 	   Changing the n_th bit to x
	 *     (number & ~(1UL << n)) will clear the nth bit and (x << n) will set the nth bit to x
	 */
	as7341_enable_reg = (as7341_enable_reg & ~(1UL << 0x04)) | (0x01 << 0x04); /* setting as7341_enable_reg bit 0x04 SMUXEN to 0x01 (activate)  */
 80032c2:	4b18      	ldr	r3, [pc, #96]	; (8003324 <enableSMUX+0x68>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	f043 0310 	orr.w	r3, r3, #16
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	4b15      	ldr	r3, [pc, #84]	; (8003324 <enableSMUX+0x68>)
 80032ce:	701a      	strb	r2, [r3, #0]
	status = writeRegister(AS7341_ENABLE, as7341_enable_reg);
 80032d0:	4b14      	ldr	r3, [pc, #80]	; (8003324 <enableSMUX+0x68>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	4619      	mov	r1, r3
 80032d6:	2080      	movs	r0, #128	; 0x80
 80032d8:	f000 f85a 	bl	8003390 <writeRegister>
 80032dc:	4603      	mov	r3, r0
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	4b11      	ldr	r3, [pc, #68]	; (8003328 <enableSMUX+0x6c>)
 80032e2:	701a      	strb	r2, [r3, #0]

	regwrite[0] = AS7341_ENABLE;
 80032e4:	2380      	movs	r3, #128	; 0x80
 80032e6:	713b      	strb	r3, [r7, #4]
		 * To read a register, it must be selected with an I2C write operation by sending the appropriate register pointer
		 * (Note that if you have written this register right before the read then you do not have to send again its address to the pointer register,
		 * as you have already set it during write). Then with an I2C read operation.
		 *
		 * */
		status = HAL_I2C_Master_Receive(&as7341.hi2c, 0x72, regRead, sizeof(regRead), HAL_MAX_DELAY);
 80032e8:	463a      	mov	r2, r7
 80032ea:	f04f 33ff 	mov.w	r3, #4294967295
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	2301      	movs	r3, #1
 80032f2:	2172      	movs	r1, #114	; 0x72
 80032f4:	480d      	ldr	r0, [pc, #52]	; (800332c <enableSMUX+0x70>)
 80032f6:	f007 fc35 	bl	800ab64 <HAL_I2C_Master_Receive>
 80032fa:	4603      	mov	r3, r0
 80032fc:	461a      	mov	r2, r3
 80032fe:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <enableSMUX+0x6c>)
 8003300:	701a      	strb	r2, [r3, #0]
	}while((regRead[0]>>4)!=0x01); /* TODO add timeout */
 8003302:	783b      	ldrb	r3, [r7, #0]
 8003304:	091b      	lsrs	r3, r3, #4
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b01      	cmp	r3, #1
 800330a:	d1ed      	bne.n	80032e8 <enableSMUX+0x2c>

    return status;
 800330c:	4b06      	ldr	r3, [pc, #24]	; (8003328 <enableSMUX+0x6c>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	bf14      	ite	ne
 8003314:	2301      	movne	r3, #1
 8003316:	2300      	moveq	r3, #0
 8003318:	b2db      	uxtb	r3, r3
}
 800331a:	4618      	mov	r0, r3
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	20000635 	.word	0x20000635
 8003328:	20008c20 	.word	0x20008c20
 800332c:	20008ba0 	.word	0x20008ba0

08003330 <setSMUXCommand>:
	while(HAL_I2C_Master_Receive(&as7341.hi2c, 0x72, read, sizeof(read), HAL_MAX_DELAY)!= HAL_OK);

	return read[0];
}

bool setSMUXCommand(as7341_smux_cmd_t command) {
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af02      	add	r7, sp, #8
 8003336:	4603      	mov	r3, r0
 8003338:	71fb      	strb	r3, [r7, #7]
	uint8_t regwrite[2];
	status = 0; /* TODO check if needs to be set to 0 */
 800333a:	4b13      	ldr	r3, [pc, #76]	; (8003388 <setSMUXCommand+0x58>)
 800333c:	2200      	movs	r2, #0
 800333e:	701a      	strb	r2, [r3, #0]

	regwrite[0] = AS7341_CFG6;
 8003340:	23af      	movs	r3, #175	; 0xaf
 8003342:	733b      	strb	r3, [r7, #12]
	regwrite[1] = command<<3;
 8003344:	79fb      	ldrb	r3, [r7, #7]
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	b2db      	uxtb	r3, r3
 800334a:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY)!=HAL_OK);
 800334c:	bf00      	nop
 800334e:	f107 020c 	add.w	r2, r7, #12
 8003352:	f04f 33ff 	mov.w	r3, #4294967295
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	2302      	movs	r3, #2
 800335a:	2172      	movs	r1, #114	; 0x72
 800335c:	480b      	ldr	r0, [pc, #44]	; (800338c <setSMUXCommand+0x5c>)
 800335e:	f007 fb0d 	bl	800a97c <HAL_I2C_Master_Transmit>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1f2      	bne.n	800334e <setSMUXCommand+0x1e>
	while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
 8003368:	bf00      	nop
 800336a:	23c8      	movs	r3, #200	; 0xc8
 800336c:	220a      	movs	r2, #10
 800336e:	2172      	movs	r1, #114	; 0x72
 8003370:	4806      	ldr	r0, [pc, #24]	; (800338c <setSMUXCommand+0x5c>)
 8003372:	f007 fced 	bl	800ad50 <HAL_I2C_IsDeviceReady>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1f6      	bne.n	800336a <setSMUXCommand+0x3a>

	return AS7341_ERROR_NO;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20008c20 	.word	0x20008c20
 800338c:	20008ba0 	.word	0x20008ba0

08003390 <writeRegister>:

as7341_ReturnError_t writeRegister(uint8_t addr, uint8_t val) {
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af02      	add	r7, sp, #8
 8003396:	4603      	mov	r3, r0
 8003398:	460a      	mov	r2, r1
 800339a:	71fb      	strb	r3, [r7, #7]
 800339c:	4613      	mov	r3, r2
 800339e:	71bb      	strb	r3, [r7, #6]
	uint8_t data[] = {addr, val};
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	733b      	strb	r3, [r7, #12]
 80033a4:	79bb      	ldrb	r3, [r7, #6]
 80033a6:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK);
 80033a8:	bf00      	nop
 80033aa:	f107 020c 	add.w	r2, r7, #12
 80033ae:	f04f 33ff 	mov.w	r3, #4294967295
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	2302      	movs	r3, #2
 80033b6:	2172      	movs	r1, #114	; 0x72
 80033b8:	480a      	ldr	r0, [pc, #40]	; (80033e4 <writeRegister+0x54>)
 80033ba:	f007 fadf 	bl	800a97c <HAL_I2C_Master_Transmit>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f2      	bne.n	80033aa <writeRegister+0x1a>
	while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
 80033c4:	bf00      	nop
 80033c6:	23c8      	movs	r3, #200	; 0xc8
 80033c8:	220a      	movs	r2, #10
 80033ca:	2172      	movs	r1, #114	; 0x72
 80033cc:	4805      	ldr	r0, [pc, #20]	; (80033e4 <writeRegister+0x54>)
 80033ce:	f007 fcbf 	bl	800ad50 <HAL_I2C_IsDeviceReady>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1f6      	bne.n	80033c6 <writeRegister+0x36>
	return AS7341_ERROR_NO;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20008ba0 	.word	0x20008ba0

080033e8 <setSMUXLowChannels>:
	status = HAL_I2C_Master_Receive(&as7341.hi2c, as7341.writing_ID, &as7341.astep.value, 1, HAL_MAX_DELAY);
	return AS7341_ERROR_NO;
}

*/
as7341_ReturnError_t setSMUXLowChannels(bool f1_f4) {
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	71fb      	strb	r3, [r7, #7]
  as7341_ReturnError_t err = AS7341_ERROR_NO;
 80033f2:	2300      	movs	r3, #0
 80033f4:	73fb      	strb	r3, [r7, #15]
  err = enableSpectralMeasurement(0);
 80033f6:	2000      	movs	r0, #0
 80033f8:	f7ff fed8 	bl	80031ac <enableSpectralMeasurement>
 80033fc:	4603      	mov	r3, r0
 80033fe:	73fb      	strb	r3, [r7, #15]
  err = setSMUXCommand(AS7341_SMUX_CMD_WRITE);
 8003400:	2002      	movs	r0, #2
 8003402:	f7ff ff95 	bl	8003330 <setSMUXCommand>
 8003406:	4603      	mov	r3, r0
 8003408:	73fb      	strb	r3, [r7, #15]
  if (f1_f4) {
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d002      	beq.n	8003416 <setSMUXLowChannels+0x2e>
    setup_F1F4_Clear_NIR();
 8003410:	f7ff fe24 	bl	800305c <setup_F1F4_Clear_NIR>
 8003414:	e001      	b.n	800341a <setSMUXLowChannels+0x32>
  } else {
    setup_F5F8_Clear_NIR();
 8003416:	f7ff fe75 	bl	8003104 <setup_F5F8_Clear_NIR>
  }
  err = enableSMUX();
 800341a:	f7ff ff4f 	bl	80032bc <enableSMUX>
 800341e:	4603      	mov	r3, r0
 8003420:	73fb      	strb	r3, [r7, #15]
  return err;
 8003422:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <CO_ODF_1003>:
 * Function for accessing _Pre-Defined Error Field_ (index 0x1003) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1003(CO_ODF_arg_t *ODF_arg);
static CO_SDO_abortCode_t CO_ODF_1003(CO_ODF_arg_t *ODF_arg){
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
    CO_EMpr_t *emPr;
    uint8_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]

    emPr = (CO_EMpr_t*) ODF_arg->object;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	613b      	str	r3, [r7, #16]
    value = ODF_arg->data[0];
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	73fb      	strb	r3, [r7, #15]

    if(ODF_arg->reading){
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	7ddb      	ldrb	r3, [r3, #23]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d016      	beq.n	8003480 <CO_ODF_1003+0x50>
        uint8_t noOfErrors;
        noOfErrors = emPr->preDefErrNoOfErrors;
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	7a5b      	ldrb	r3, [r3, #9]
 8003456:	73bb      	strb	r3, [r7, #14]

        if(ODF_arg->subIndex == 0U){
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	7d9b      	ldrb	r3, [r3, #22]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d104      	bne.n	800346a <CO_ODF_1003+0x3a>
            ODF_arg->data[0] = noOfErrors;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	7bba      	ldrb	r2, [r7, #14]
 8003466:	701a      	strb	r2, [r3, #0]
 8003468:	e01a      	b.n	80034a0 <CO_ODF_1003+0x70>
        }
        else if(ODF_arg->subIndex > noOfErrors){
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	7d9b      	ldrb	r3, [r3, #22]
 800346e:	7bba      	ldrb	r2, [r7, #14]
 8003470:	429a      	cmp	r2, r3
 8003472:	d202      	bcs.n	800347a <CO_ODF_1003+0x4a>
            ret = CO_SDO_AB_NO_DATA;
 8003474:	4b0e      	ldr	r3, [pc, #56]	; (80034b0 <CO_ODF_1003+0x80>)
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	e012      	b.n	80034a0 <CO_ODF_1003+0x70>
        }
        else{
            ret = CO_SDO_AB_NONE;
 800347a:	2300      	movs	r3, #0
 800347c:	617b      	str	r3, [r7, #20]
 800347e:	e00f      	b.n	80034a0 <CO_ODF_1003+0x70>
        }
    }
    else{
        /* only '0' may be written to subIndex 0 */
        if(ODF_arg->subIndex == 0U){
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	7d9b      	ldrb	r3, [r3, #22]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d109      	bne.n	800349c <CO_ODF_1003+0x6c>
            if(value == 0U){
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d103      	bne.n	8003496 <CO_ODF_1003+0x66>
                emPr->preDefErrNoOfErrors = 0U;
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	2200      	movs	r2, #0
 8003492:	725a      	strb	r2, [r3, #9]
 8003494:	e004      	b.n	80034a0 <CO_ODF_1003+0x70>
            }
            else{
                ret = CO_SDO_AB_INVALID_VALUE;
 8003496:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <CO_ODF_1003+0x84>)
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	e001      	b.n	80034a0 <CO_ODF_1003+0x70>
            }
        }
        else{
            ret = CO_SDO_AB_READONLY;
 800349c:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <CO_ODF_1003+0x88>)
 800349e:	617b      	str	r3, [r7, #20]
        }
    }

    return ret;
 80034a0:	697b      	ldr	r3, [r7, #20]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	371c      	adds	r7, #28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	08000024 	.word	0x08000024
 80034b4:	06090030 	.word	0x06090030
 80034b8:	06010002 	.word	0x06010002

080034bc <CO_ODF_1014>:
 * Function for accessing _COB ID EMCY_ (index 0x1014) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1014(CO_ODF_arg_t *ODF_arg);
static CO_SDO_abortCode_t CO_ODF_1014(CO_ODF_arg_t *ODF_arg){
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]

    nodeId = (uint8_t*) ODF_arg->object;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	613b      	str	r3, [r7, #16]
    value = CO_getUint32(ODF_arg->data);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f002 f932 	bl	800573c <CO_getUint32>
 80034d8:	60f8      	str	r0, [r7, #12]

    /* add nodeId to the value */
    if(ODF_arg->reading){
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	7ddb      	ldrb	r3, [r3, #23]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <CO_ODF_1014+0x3c>
        CO_setUint32(ODF_arg->data, value + *nodeId);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	4619      	mov	r1, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	440b      	add	r3, r1
 80034f0:	4619      	mov	r1, r3
 80034f2:	4610      	mov	r0, r2
 80034f4:	f002 f939 	bl	800576a <CO_setUint32>
    }

    return ret;
 80034f8:	697b      	ldr	r3, [r7, #20]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <CO_EM_init>:
        uint32_t               *preDefErr,
        uint8_t                 preDefErrSize,
        CO_CANmodule_t         *CANdev,
        uint16_t                CANdevTxIdx,
        uint16_t                CANidTxEM)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	603b      	str	r3, [r7, #0]
    uint8_t i;

    /* verify arguments */
    if(em==NULL || emPr==NULL || SDO==NULL || errorStatusBits==NULL ||
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d015      	beq.n	8003544 <CO_EM_init+0x40>
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d012      	beq.n	8003544 <CO_EM_init+0x40>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00f      	beq.n	8003544 <CO_EM_init+0x40>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00c      	beq.n	8003544 <CO_EM_init+0x40>
 800352a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800352e:	2b05      	cmp	r3, #5
 8003530:	d908      	bls.n	8003544 <CO_EM_init+0x40>
        errorStatusBitsSize<6U || errorRegister==NULL || preDefErr==NULL || CANdev==NULL){
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <CO_EM_init+0x40>
 8003538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <CO_EM_init+0x40>
 800353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003540:	2b00      	cmp	r3, #0
 8003542:	d102      	bne.n	800354a <CO_EM_init+0x46>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003544:	f04f 33ff 	mov.w	r3, #4294967295
 8003548:	e06f      	b.n	800362a <CO_EM_init+0x126>
    }

    /* Configure object variables */
    em->errorStatusBits         = errorStatusBits;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	601a      	str	r2, [r3, #0]
    em->errorStatusBitsSize     = errorStatusBitsSize;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003556:	711a      	strb	r2, [r3, #4]
    em->bufEnd                  = em->buf + (CO_EM_INTERNAL_BUFFER_SIZE * 8);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	3305      	adds	r3, #5
 800355c:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	659a      	str	r2, [r3, #88]	; 0x58
    em->bufWritePtr             = em->buf;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1d5a      	adds	r2, r3, #5
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	65da      	str	r2, [r3, #92]	; 0x5c
    em->bufReadPtr              = em->buf;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	1d5a      	adds	r2, r3, #5
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	661a      	str	r2, [r3, #96]	; 0x60
    em->bufFull                 = 0U;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    em->wrongErrorReport        = 0U;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    em->pFunctSignal            = NULL;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	669a      	str	r2, [r3, #104]	; 0x68
    emPr->em                    = em;
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	60da      	str	r2, [r3, #12]
    emPr->errorRegister         = errorRegister;
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003594:	601a      	str	r2, [r3, #0]
    emPr->preDefErr             = preDefErr;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800359a:	605a      	str	r2, [r3, #4]
    emPr->preDefErrSize         = preDefErrSize;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80035a2:	721a      	strb	r2, [r3, #8]
    emPr->preDefErrNoOfErrors   = 0U;
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2200      	movs	r2, #0
 80035a8:	725a      	strb	r2, [r3, #9]
    emPr->inhibitEmTimer        = 0U;
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2200      	movs	r2, #0
 80035ae:	815a      	strh	r2, [r3, #10]

    /* clear error status bits */
    for(i=0U; i<errorStatusBitsSize; i++){
 80035b0:	2300      	movs	r3, #0
 80035b2:	75fb      	strb	r3, [r7, #23]
 80035b4:	e008      	b.n	80035c8 <CO_EM_init+0xc4>
        em->errorStatusBits[i] = 0U;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	7dfb      	ldrb	r3, [r7, #23]
 80035bc:	4413      	add	r3, r2
 80035be:	2200      	movs	r2, #0
 80035c0:	701a      	strb	r2, [r3, #0]
    for(i=0U; i<errorStatusBitsSize; i++){
 80035c2:	7dfb      	ldrb	r3, [r7, #23]
 80035c4:	3301      	adds	r3, #1
 80035c6:	75fb      	strb	r3, [r7, #23]
 80035c8:	7dfa      	ldrb	r2, [r7, #23]
 80035ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d3f1      	bcc.n	80035b6 <CO_EM_init+0xb2>
    }

    /* Configure Object dictionary entry at index 0x1003 and 0x1014 */
    CO_OD_configure(SDO, OD_H1003_PREDEF_ERR_FIELD, CO_ODF_1003, (void*)emPr, 0, 0U);
 80035d2:	2300      	movs	r3, #0
 80035d4:	9301      	str	r3, [sp, #4]
 80035d6:	2300      	movs	r3, #0
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	4a15      	ldr	r2, [pc, #84]	; (8003634 <CO_EM_init+0x130>)
 80035de:	f241 0103 	movw	r1, #4099	; 0x1003
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f002 faac 	bl	8005b40 <CO_OD_configure>
    CO_OD_configure(SDO, OD_H1014_COBID_EMERGENCY, CO_ODF_1014, (void*)&SDO->nodeId, 0, 0U);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3360      	adds	r3, #96	; 0x60
 80035ec:	2200      	movs	r2, #0
 80035ee:	9201      	str	r2, [sp, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	9200      	str	r2, [sp, #0]
 80035f4:	4a10      	ldr	r2, [pc, #64]	; (8003638 <CO_EM_init+0x134>)
 80035f6:	f241 0114 	movw	r1, #4116	; 0x1014
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f002 faa0 	bl	8005b40 <CO_OD_configure>

    /* configure emergency message CAN transmission */
    emPr->CANdev = CANdev;
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003604:	611a      	str	r2, [r3, #16]
    emPr->CANdev->em = (void*)em; /* update pointer inside CAN device. */
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	61da      	str	r2, [r3, #28]
    emPr->CANtxBuff = CO_CANtxBufferInit(
 800360e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003610:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8003612:	2300      	movs	r3, #0
 8003614:	9301      	str	r3, [sp, #4]
 8003616:	2308      	movs	r3, #8
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	2300      	movs	r3, #0
 800361c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800361e:	f004 fb80 	bl	8007d22 <CO_CANtxBufferInit>
 8003622:	4602      	mov	r2, r0
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	615a      	str	r2, [r3, #20]
            CANidTxEM,          /* CAN identifier */
            0,                  /* rtr */
            8U,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	08003431 	.word	0x08003431
 8003638:	080034bd 	.word	0x080034bd

0800363c <CO_EM_process>:
void CO_EM_process(
        CO_EMpr_t              *emPr,
        bool_t                  NMTisPreOrOperational,
        uint16_t                timeDifference_100us,
        uint16_t                emInhTime)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	4608      	mov	r0, r1
 8003646:	4611      	mov	r1, r2
 8003648:	461a      	mov	r2, r3
 800364a:	4603      	mov	r3, r0
 800364c:	72fb      	strb	r3, [r7, #11]
 800364e:	460b      	mov	r3, r1
 8003650:	813b      	strh	r3, [r7, #8]
 8003652:	4613      	mov	r3, r2
 8003654:	80fb      	strh	r3, [r7, #6]

    CO_EM_t *em = emPr->em;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	61bb      	str	r3, [r7, #24]
    uint8_t errorRegister;

    /* verify errors from driver and other */
    CO_CANverifyErrors(emPr->CANdev);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	4618      	mov	r0, r3
 8003662:	f004 fc58 	bl	8007f16 <CO_CANverifyErrors>
    if(em->wrongErrorReport != 0U){
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00c      	beq.n	800368a <CO_EM_process+0x4e>
        CO_errorReport(em, CO_EM_WRONG_ERROR_REPORT, CO_EMC_SOFTWARE_INTERNAL, (uint32_t)em->wrongErrorReport);
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8003676:	f44f 42c2 	mov.w	r2, #24832	; 0x6100
 800367a:	2128      	movs	r1, #40	; 0x28
 800367c:	69b8      	ldr	r0, [r7, #24]
 800367e:	f000 f8cf 	bl	8003820 <CO_errorReport>
        em->wrongErrorReport = 0U;
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    }


    /* calculate Error register */
    errorRegister = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	77fb      	strb	r3, [r7, #31]
    /* generic error */
    if(em->errorStatusBits[5]){
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	3305      	adds	r3, #5
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <CO_EM_process+0x66>
        errorRegister |= CO_ERR_REG_GENERIC_ERR;
 800369a:	7ffb      	ldrb	r3, [r7, #31]
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	77fb      	strb	r3, [r7, #31]
    }
    /* communication error (overrun, error state) */
    if(em->errorStatusBits[2] || em->errorStatusBits[3]){
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3302      	adds	r3, #2
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d105      	bne.n	80036ba <CO_EM_process+0x7e>
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3303      	adds	r3, #3
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <CO_EM_process+0x86>
        errorRegister |= CO_ERR_REG_COMM_ERR;
 80036ba:	7ffb      	ldrb	r3, [r7, #31]
 80036bc:	f043 0310 	orr.w	r3, r3, #16
 80036c0:	77fb      	strb	r3, [r7, #31]
    }
    *emPr->errorRegister = (*emPr->errorRegister & 0xEEU) | errorRegister;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	f023 0311 	bic.w	r3, r3, #17
 80036cc:	b2d9      	uxtb	r1, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	7ffa      	ldrb	r2, [r7, #31]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	701a      	strb	r2, [r3, #0]

    /* inhibit time */
    if(emPr->inhibitEmTimer < emInhTime){
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	895b      	ldrh	r3, [r3, #10]
 80036de:	88fa      	ldrh	r2, [r7, #6]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d906      	bls.n	80036f2 <CO_EM_process+0xb6>
        emPr->inhibitEmTimer += timeDifference_100us;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	895a      	ldrh	r2, [r3, #10]
 80036e8:	893b      	ldrh	r3, [r7, #8]
 80036ea:	4413      	add	r3, r2
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	815a      	strh	r2, [r3, #10]
    }

    /* send Emergency message. */
    if(     NMTisPreOrOperational &&
 80036f2:	7afb      	ldrb	r3, [r7, #11]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 808f 	beq.w	8003818 <CO_EM_process+0x1dc>
            !emPr->CANtxBuff->bufferFull &&
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	7b5b      	ldrb	r3, [r3, #13]
 8003700:	b2db      	uxtb	r3, r3
    if(     NMTisPreOrOperational &&
 8003702:	2b00      	cmp	r3, #0
 8003704:	f040 8088 	bne.w	8003818 <CO_EM_process+0x1dc>
            emPr->inhibitEmTimer >= emInhTime &&
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	895b      	ldrh	r3, [r3, #10]
            !emPr->CANtxBuff->bufferFull &&
 800370c:	88fa      	ldrh	r2, [r7, #6]
 800370e:	429a      	cmp	r2, r3
 8003710:	f200 8082 	bhi.w	8003818 <CO_EM_process+0x1dc>
            (em->bufReadPtr != em->bufWritePtr || em->bufFull))
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            emPr->inhibitEmTimer >= emInhTime &&
 800371c:	429a      	cmp	r2, r3
 800371e:	d104      	bne.n	800372a <CO_EM_process+0xee>
            (em->bufReadPtr != em->bufWritePtr || em->bufFull))
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8003726:	2b00      	cmp	r3, #0
 8003728:	d076      	beq.n	8003818 <CO_EM_process+0x1dc>
    {
        uint32_t preDEF;    /* preDefinedErrorField */
        
        /* add error register */
        em->bufReadPtr[2] = *emPr->errorRegister;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003732:	3302      	adds	r3, #2
 8003734:	7812      	ldrb	r2, [r2, #0]
 8003736:	701a      	strb	r2, [r3, #0]

        /* copy data to CAN emergency message */
        CO_memcpy(emPr->CANtxBuff->data, em->bufReadPtr, 8U);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	1d58      	adds	r0, r3, #5
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003742:	2208      	movs	r2, #8
 8003744:	4619      	mov	r1, r3
 8003746:	f001 ffd9 	bl	80056fc <CO_memcpy>
        CO_memcpy((uint8_t*)&preDEF, em->bufReadPtr, 4U);
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800374e:	f107 0314 	add.w	r3, r7, #20
 8003752:	2204      	movs	r2, #4
 8003754:	4618      	mov	r0, r3
 8003756:	f001 ffd1 	bl	80056fc <CO_memcpy>
        em->bufReadPtr += 8;
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800375e:	f103 0208 	add.w	r2, r3, #8
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	661a      	str	r2, [r3, #96]	; 0x60

        /* Update read buffer pointer and reset inhibit timer */
        if(em->bufReadPtr == em->bufEnd){
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376e:	429a      	cmp	r2, r3
 8003770:	d103      	bne.n	800377a <CO_EM_process+0x13e>
            em->bufReadPtr = em->buf;
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	1d5a      	adds	r2, r3, #5
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	661a      	str	r2, [r3, #96]	; 0x60
        }
        emPr->inhibitEmTimer = 0U;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	815a      	strh	r2, [r3, #10]

        /* verify message buffer overflow, then clear full flag */
        if(em->bufFull == 2U){
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8003786:	2b02      	cmp	r3, #2
 8003788:	d10b      	bne.n	80037a2 <CO_EM_process+0x166>
            em->bufFull = 0U;    /* will be updated below */
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL, CO_EMC_GENERIC, 0U);
 8003792:	2300      	movs	r3, #0
 8003794:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003798:	2120      	movs	r1, #32
 800379a:	69b8      	ldr	r0, [r7, #24]
 800379c:	f000 f840 	bl	8003820 <CO_errorReport>
 80037a0:	e003      	b.n	80037aa <CO_EM_process+0x16e>
        }
        else{
            em->bufFull = 0;
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        }

        /* write to 'pre-defined error field' (object dictionary, index 0x1003) */
        if(emPr->preDefErr){
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d029      	beq.n	8003806 <CO_EM_process+0x1ca>
            uint8_t i;

            if(emPr->preDefErrNoOfErrors < emPr->preDefErrSize)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	7a5a      	ldrb	r2, [r3, #9]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	7a1b      	ldrb	r3, [r3, #8]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d205      	bcs.n	80037ca <CO_EM_process+0x18e>
                emPr->preDefErrNoOfErrors++;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	7a5b      	ldrb	r3, [r3, #9]
 80037c2:	3301      	adds	r3, #1
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	725a      	strb	r2, [r3, #9]
            for(i=emPr->preDefErrNoOfErrors-1; i>0; i--)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	7a5b      	ldrb	r3, [r3, #9]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	77bb      	strb	r3, [r7, #30]
 80037d2:	e011      	b.n	80037f8 <CO_EM_process+0x1bc>
                emPr->preDefErr[i] = emPr->preDefErr[i-1];
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	7fbb      	ldrb	r3, [r7, #30]
 80037da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80037de:	3b01      	subs	r3, #1
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	441a      	add	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6859      	ldr	r1, [r3, #4]
 80037e8:	7fbb      	ldrb	r3, [r7, #30]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	6812      	ldr	r2, [r2, #0]
 80037f0:	601a      	str	r2, [r3, #0]
            for(i=emPr->preDefErrNoOfErrors-1; i>0; i--)
 80037f2:	7fbb      	ldrb	r3, [r7, #30]
 80037f4:	3b01      	subs	r3, #1
 80037f6:	77bb      	strb	r3, [r7, #30]
 80037f8:	7fbb      	ldrb	r3, [r7, #30]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1ea      	bne.n	80037d4 <CO_EM_process+0x198>
            emPr->preDefErr[0] = preDEF;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	601a      	str	r2, [r3, #0]
        }

        /* send CAN message */
        CO_CANsend(emPr->CANdev, emPr->CANtxBuff);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	691a      	ldr	r2, [r3, #16]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	4619      	mov	r1, r3
 8003810:	4610      	mov	r0, r2
 8003812:	f004 fac9 	bl	8007da8 <CO_CANsend>
    }

    return;
 8003816:	bf00      	nop
 8003818:	bf00      	nop
}
 800381a:	3720      	adds	r7, #32
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <CO_errorReport>:


/******************************************************************************/
void CO_errorReport(CO_EM_t *em, const uint8_t errorBit, const uint16_t errorCode, const uint32_t infoCode){
 8003820:	b580      	push	{r7, lr}
 8003822:	b08c      	sub	sp, #48	; 0x30
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	607b      	str	r3, [r7, #4]
 800382a:	460b      	mov	r3, r1
 800382c:	72fb      	strb	r3, [r7, #11]
 800382e:	4613      	mov	r3, r2
 8003830:	813b      	strh	r3, [r7, #8]
    uint8_t index = errorBit >> 3;
 8003832:	7afb      	ldrb	r3, [r7, #11]
 8003834:	08db      	lsrs	r3, r3, #3
 8003836:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t bitmask = 1 << (errorBit & 0x7);
 800383a:	7afb      	ldrb	r3, [r7, #11]
 800383c:	f003 0307 	and.w	r3, r3, #7
 8003840:	2201      	movs	r2, #1
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t *errorStatusBits = 0;
 800384a:	2300      	movs	r3, #0
 800384c:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t sendEmergency = true;
 800384e:	2301      	movs	r3, #1
 8003850:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(em == NULL){
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d103      	bne.n	8003862 <CO_errorReport+0x42>
        sendEmergency = false;
 800385a:	2300      	movs	r3, #0
 800385c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003860:	e01e      	b.n	80038a0 <CO_errorReport+0x80>
    }
    else if(index >= em->errorStatusBitsSize){
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	791b      	ldrb	r3, [r3, #4]
 8003866:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800386a:	429a      	cmp	r2, r3
 800386c:	d307      	bcc.n	800387e <CO_errorReport+0x5e>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	7afa      	ldrb	r2, [r7, #11]
 8003872:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
 8003876:	2300      	movs	r3, #0
 8003878:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800387c:	e010      	b.n	80038a0 <CO_errorReport+0x80>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003886:	4413      	add	r3, r2
 8003888:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* if error was already reported, do nothing */
        if((*errorStatusBits & bitmask) != 0){
 800388a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388c:	781a      	ldrb	r2, [r3, #0]
 800388e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003892:	4013      	ands	r3, r2
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <CO_errorReport+0x80>
            sendEmergency = false;
 800389a:	2300      	movs	r3, #0
 800389c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }
    }

    if(sendEmergency){
 80038a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d05e      	beq.n	8003966 <CO_errorReport+0x146>
        /* set error bit */
        if(errorBit){
 80038a8:	7afb      	ldrb	r3, [r7, #11]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d007      	beq.n	80038be <CO_errorReport+0x9e>
            /* any error except NO_ERROR */
            *errorStatusBits |= bitmask;
 80038ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b0:	781a      	ldrb	r2, [r3, #0]
 80038b2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80038b6:	4313      	orrs	r3, r2
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038bc:	701a      	strb	r2, [r3, #0]
        }

        /* verify buffer full, set overflow */
        if(em->bufFull){
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d004      	beq.n	80038d2 <CO_errorReport+0xb2>
            em->bufFull = 2;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->pFunctSignal != NULL) {
                em->pFunctSignal();
            }
        }
    }
}
 80038d0:	e049      	b.n	8003966 <CO_errorReport+0x146>
            CO_memcpySwap2(&bufCopy[0], &errorCode);
 80038d2:	f107 0208 	add.w	r2, r7, #8
 80038d6:	f107 0314 	add.w	r3, r7, #20
 80038da:	4611      	mov	r1, r2
 80038dc:	4618      	mov	r0, r3
 80038de:	f001 ff60 	bl	80057a2 <CO_memcpySwap2>
            bufCopy[2] = 0; /* error register will be set later */
 80038e2:	2300      	movs	r3, #0
 80038e4:	75bb      	strb	r3, [r7, #22]
            bufCopy[3] = errorBit;
 80038e6:	7afb      	ldrb	r3, [r7, #11]
 80038e8:	75fb      	strb	r3, [r7, #23]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
 80038ea:	1d3a      	adds	r2, r7, #4
 80038ec:	f107 0314 	add.w	r3, r7, #20
 80038f0:	3304      	adds	r3, #4
 80038f2:	4611      	mov	r1, r2
 80038f4:	4618      	mov	r0, r3
 80038f6:	f001 ff6c 	bl	80057d2 <CO_memcpySwap4>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038fa:	f3ef 8310 	mrs	r3, PRIMASK
 80038fe:	623b      	str	r3, [r7, #32]
  return(result);
 8003900:	6a3b      	ldr	r3, [r7, #32]
            CO_LOCK_EMCY();
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8003904:	b672      	cpsid	i
}
 8003906:	bf00      	nop
            CO_memcpy(em->bufWritePtr, &bufCopy[0], 8);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390c:	f107 0114 	add.w	r1, r7, #20
 8003910:	2208      	movs	r2, #8
 8003912:	4618      	mov	r0, r3
 8003914:	f001 fef2 	bl	80056fc <CO_memcpy>
            em->bufWritePtr += 8;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391c:	f103 0208 	add.w	r2, r3, #8
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392c:	429a      	cmp	r2, r3
 800392e:	d103      	bne.n	8003938 <CO_errorReport+0x118>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	1d5a      	adds	r2, r3, #5
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003940:	429a      	cmp	r2, r3
 8003942:	d103      	bne.n	800394c <CO_errorReport+0x12c>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	61fb      	str	r3, [r7, #28]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f383 8810 	msr	PRIMASK, r3
}
 8003956:	bf00      	nop
            if(em->pFunctSignal != NULL) {
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <CO_errorReport+0x146>
                em->pFunctSignal();
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003964:	4798      	blx	r3
}
 8003966:	bf00      	nop
 8003968:	3730      	adds	r7, #48	; 0x30
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <CO_errorReset>:


/******************************************************************************/
void CO_errorReset(CO_EM_t *em, const uint8_t errorBit, const uint32_t infoCode){
 800396e:	b580      	push	{r7, lr}
 8003970:	b08c      	sub	sp, #48	; 0x30
 8003972:	af00      	add	r7, sp, #0
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	460b      	mov	r3, r1
 8003978:	607a      	str	r2, [r7, #4]
 800397a:	72fb      	strb	r3, [r7, #11]
    uint8_t index = errorBit >> 3;
 800397c:	7afb      	ldrb	r3, [r7, #11]
 800397e:	08db      	lsrs	r3, r3, #3
 8003980:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8003984:	7afb      	ldrb	r3, [r7, #11]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	2201      	movs	r2, #1
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    uint8_t *errorStatusBits = 0;
 8003994:	2300      	movs	r3, #0
 8003996:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t sendEmergency = true;
 8003998:	2301      	movs	r3, #1
 800399a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if(em == NULL){
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d103      	bne.n	80039ac <CO_errorReset+0x3e>
        sendEmergency = false;
 80039a4:	2300      	movs	r3, #0
 80039a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039aa:	e01e      	b.n	80039ea <CO_errorReset+0x7c>
    }
    else if(index >= em->errorStatusBitsSize){
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	791b      	ldrb	r3, [r3, #4]
 80039b0:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d307      	bcc.n	80039c8 <CO_errorReset+0x5a>
        /* if errorBit value not supported, send emergency 'CO_EM_WRONG_ERROR_REPORT' */
        em->wrongErrorReport = errorBit;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	7afa      	ldrb	r2, [r7, #11]
 80039bc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        sendEmergency = false;
 80039c0:	2300      	movs	r3, #0
 80039c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039c6:	e010      	b.n	80039ea <CO_errorReset+0x7c>
    }
    else{
        errorStatusBits = &em->errorStatusBits[index];
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80039d0:	4413      	add	r3, r2
 80039d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* if error was allready cleared, do nothing */
        if((*errorStatusBits & bitmask) == 0){
 80039d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d6:	781a      	ldrb	r2, [r3, #0]
 80039d8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80039dc:	4013      	ands	r3, r2
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d102      	bne.n	80039ea <CO_errorReset+0x7c>
            sendEmergency = false;
 80039e4:	2300      	movs	r3, #0
 80039e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }
    }

    if(sendEmergency){
 80039ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d05b      	beq.n	8003aaa <CO_errorReset+0x13c>
        /* erase error bit */
        *errorStatusBits &= ~bitmask;
 80039f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	b25a      	sxtb	r2, r3
 80039f8:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 80039fc:	43db      	mvns	r3, r3
 80039fe:	b25b      	sxtb	r3, r3
 8003a00:	4013      	ands	r3, r2
 8003a02:	b25b      	sxtb	r3, r3
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a08:	701a      	strb	r2, [r3, #0]

        /* verify buffer full */
        if(em->bufFull){
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d004      	beq.n	8003a1e <CO_errorReset+0xb0>
            em->bufFull = 2;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            if(em->pFunctSignal != NULL) {
                em->pFunctSignal();
            }
        }
    }
}
 8003a1c:	e045      	b.n	8003aaa <CO_errorReset+0x13c>
            bufCopy[0] = 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	753b      	strb	r3, [r7, #20]
            bufCopy[1] = 0;
 8003a22:	2300      	movs	r3, #0
 8003a24:	757b      	strb	r3, [r7, #21]
            bufCopy[2] = 0; /* error register will be set later */
 8003a26:	2300      	movs	r3, #0
 8003a28:	75bb      	strb	r3, [r7, #22]
            bufCopy[3] = errorBit;
 8003a2a:	7afb      	ldrb	r3, [r7, #11]
 8003a2c:	75fb      	strb	r3, [r7, #23]
            CO_memcpySwap4(&bufCopy[4], &infoCode);
 8003a2e:	1d3a      	adds	r2, r7, #4
 8003a30:	f107 0314 	add.w	r3, r7, #20
 8003a34:	3304      	adds	r3, #4
 8003a36:	4611      	mov	r1, r2
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f001 feca 	bl	80057d2 <CO_memcpySwap4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a3e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a42:	623b      	str	r3, [r7, #32]
  return(result);
 8003a44:	6a3b      	ldr	r3, [r7, #32]
            CO_LOCK_EMCY();
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8003a48:	b672      	cpsid	i
}
 8003a4a:	bf00      	nop
            CO_memcpy(em->bufWritePtr, &bufCopy[0], 8);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a50:	f107 0114 	add.w	r1, r7, #20
 8003a54:	2208      	movs	r2, #8
 8003a56:	4618      	mov	r0, r3
 8003a58:	f001 fe50 	bl	80056fc <CO_memcpy>
            em->bufWritePtr += 8;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a60:	f103 0208 	add.w	r2, r3, #8
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufEnd) em->bufWritePtr = em->buf;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d103      	bne.n	8003a7c <CO_errorReset+0x10e>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	1d5a      	adds	r2, r3, #5
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	65da      	str	r2, [r3, #92]	; 0x5c
            if(em->bufWritePtr == em->bufReadPtr) em->bufFull = 1;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d103      	bne.n	8003a90 <CO_errorReset+0x122>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f383 8810 	msr	PRIMASK, r3
}
 8003a9a:	bf00      	nop
            if(em->pFunctSignal != NULL) {
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <CO_errorReset+0x13c>
                em->pFunctSignal();
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aa8:	4798      	blx	r3
}
 8003aaa:	bf00      	nop
 8003aac:	3730      	adds	r7, #48	; 0x30
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <CO_isError>:


/******************************************************************************/
bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit){
 8003ab2:	b480      	push	{r7}
 8003ab4:	b085      	sub	sp, #20
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	460b      	mov	r3, r1
 8003abc:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8003abe:	78fb      	ldrb	r3, [r7, #3]
 8003ac0:	08db      	lsrs	r3, r3, #3
 8003ac2:	73bb      	strb	r3, [r7, #14]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	2201      	movs	r2, #1
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	737b      	strb	r3, [r7, #13]
    bool_t ret = false;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	73fb      	strb	r3, [r7, #15]

    if(em != NULL && index < em->errorStatusBitsSize){
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d010      	beq.n	8003afe <CO_isError+0x4c>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	791b      	ldrb	r3, [r3, #4]
 8003ae0:	7bba      	ldrb	r2, [r7, #14]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d20b      	bcs.n	8003afe <CO_isError+0x4c>
        if((em->errorStatusBits[index] & bitmask) != 0){
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	7bbb      	ldrb	r3, [r7, #14]
 8003aec:	4413      	add	r3, r2
 8003aee:	781a      	ldrb	r2, [r3, #0]
 8003af0:	7b7b      	ldrb	r3, [r7, #13]
 8003af2:	4013      	ands	r3, r2
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <CO_isError+0x4c>
            ret = true;
 8003afa:	2301      	movs	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
        }
    }

    return ret;
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <CO_HBcons_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_HBcons_receive(void *object, const CO_CANrxMsg_t *msg);
static void CO_HBcons_receive(void *object, const CO_CANrxMsg_t *msg){
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t *HBconsNode;

    HBconsNode = (CO_HBconsNode_t*) object; /* this is the correct pointer type of the first argument */
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	60fb      	str	r3, [r7, #12]

    /* verify message length */
    if(msg->DLC == 1){
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d107      	bne.n	8003b34 <CO_HBcons_receive+0x28>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = msg->data[0];
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	701a      	strb	r2, [r3, #0]
        HBconsNode->CANrxNew = true;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2201      	movs	r2, #1
 8003b32:	719a      	strb	r2, [r3, #6]
    }
}
 8003b34:	bf00      	nop
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <CO_HBcons_monitoredNodeConfig>:
 */
static void CO_HBcons_monitoredNodeConfig(
        CO_HBconsumer_t        *HBcons,
        uint8_t                 idx,
        uint32_t                HBconsTime)
{
 8003b40:	b590      	push	{r4, r7, lr}
 8003b42:	b08b      	sub	sp, #44	; 0x2c
 8003b44:	af04      	add	r7, sp, #16
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	607a      	str	r2, [r7, #4]
 8003b4c:	72fb      	strb	r3, [r7, #11]
    uint16_t COB_ID;
    uint16_t NodeID;
    CO_HBconsNode_t *monitoredNode;

    if(idx >= HBcons->numberOfMonitoredNodes) return;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	7b1b      	ldrb	r3, [r3, #12]
 8003b52:	7afa      	ldrb	r2, [r7, #11]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d23d      	bcs.n	8003bd4 <CO_HBcons_monitoredNodeConfig+0x94>

    NodeID = (uint16_t)((HBconsTime>>16)&0xFF);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	0c1b      	lsrs	r3, r3, #16
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	82bb      	strh	r3, [r7, #20]
    monitoredNode = &HBcons->monitoredNodes[idx];
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	7afb      	ldrb	r3, [r7, #11]
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
    monitoredNode->time = (uint16_t)HBconsTime;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	809a      	strh	r2, [r3, #4]
    monitoredNode->NMTstate = 0;
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	701a      	strb	r2, [r3, #0]
    monitoredNode->monStarted = false;
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	705a      	strb	r2, [r3, #1]

    /* is channel used */
    if(NodeID && monitoredNode->time){
 8003b82:	8abb      	ldrh	r3, [r7, #20]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d008      	beq.n	8003b9a <CO_HBcons_monitoredNodeConfig+0x5a>
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	889b      	ldrh	r3, [r3, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d004      	beq.n	8003b9a <CO_HBcons_monitoredNodeConfig+0x5a>
        COB_ID = NodeID + 0x700;
 8003b90:	8abb      	ldrh	r3, [r7, #20]
 8003b92:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8003b96:	82fb      	strh	r3, [r7, #22]
 8003b98:	e004      	b.n	8003ba4 <CO_HBcons_monitoredNodeConfig+0x64>
    }
    else{
        COB_ID = 0;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	82fb      	strh	r3, [r7, #22]
        monitoredNode->time = 0;
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	809a      	strh	r2, [r3, #4]
    }

    /* configure Heartbeat consumer CAN reception */
    CO_CANrxBufferInit(
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6918      	ldr	r0, [r3, #16]
            HBcons->CANdevRx,
            HBcons->CANdevRxIdxStart + idx,
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8a9a      	ldrh	r2, [r3, #20]
    CO_CANrxBufferInit(
 8003bac:	7afb      	ldrb	r3, [r7, #11]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	4413      	add	r3, r2
 8003bb2:	b299      	uxth	r1, r3
            COB_ID,
            0x7FF,
            0,
            (void*)&HBcons->monitoredNodes[idx],
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	7afb      	ldrb	r3, [r7, #11]
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	4413      	add	r3, r2
    CO_CANrxBufferInit(
 8003bbe:	8afa      	ldrh	r2, [r7, #22]
 8003bc0:	4c06      	ldr	r4, [pc, #24]	; (8003bdc <CO_HBcons_monitoredNodeConfig+0x9c>)
 8003bc2:	9402      	str	r4, [sp, #8]
 8003bc4:	9301      	str	r3, [sp, #4]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003bce:	f004 f824 	bl	8007c1a <CO_CANrxBufferInit>
 8003bd2:	e000      	b.n	8003bd6 <CO_HBcons_monitoredNodeConfig+0x96>
    if(idx >= HBcons->numberOfMonitoredNodes) return;
 8003bd4:	bf00      	nop
            CO_HBcons_receive);
}
 8003bd6:	371c      	adds	r7, #28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd90      	pop	{r4, r7, pc}
 8003bdc:	08003b0d 	.word	0x08003b0d

08003be0 <CO_ODF_1016>:
 * OD function for accessing _Consumer Heartbeat Time_ (index 0x1016) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1016(CO_ODF_arg_t *ODF_arg);
static CO_SDO_abortCode_t CO_ODF_1016(CO_ODF_arg_t *ODF_arg){
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08a      	sub	sp, #40	; 0x28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
    CO_HBconsumer_t *HBcons;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 8003be8:	2300      	movs	r3, #0
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24

    HBcons = (CO_HBconsumer_t*) ODF_arg->object;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	61fb      	str	r3, [r7, #28]
    value = CO_getUint32(ODF_arg->data);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f001 fda0 	bl	800573c <CO_getUint32>
 8003bfc:	61b8      	str	r0, [r7, #24]

    if(!ODF_arg->reading){
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	7ddb      	ldrb	r3, [r3, #23]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d14d      	bne.n	8003ca2 <CO_ODF_1016+0xc2>
        uint8_t NodeID;
        uint16_t HBconsTime;

        NodeID = (value >> 16U) & 0xFFU;
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	0c1b      	lsrs	r3, r3, #16
 8003c0a:	75fb      	strb	r3, [r7, #23]
        HBconsTime = value & 0xFFFFU;
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	82bb      	strh	r3, [r7, #20]

        if((value & 0xFF800000U) != 0){
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	0ddb      	lsrs	r3, r3, #23
 8003c14:	05db      	lsls	r3, r3, #23
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <CO_ODF_1016+0x40>
            ret = CO_SDO_AB_PRAM_INCOMPAT;
 8003c1a:	4b24      	ldr	r3, [pc, #144]	; (8003cac <CO_ODF_1016+0xcc>)
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1e:	e034      	b.n	8003c8a <CO_ODF_1016+0xaa>
        }
        else if((HBconsTime != 0) && (NodeID != 0)){
 8003c20:	8abb      	ldrh	r3, [r7, #20]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d02f      	beq.n	8003c86 <CO_ODF_1016+0xa6>
 8003c26:	7dfb      	ldrb	r3, [r7, #23]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d02c      	beq.n	8003c86 <CO_ODF_1016+0xa6>
            uint8_t i;
            /* there must not be more entries with same index and time different than zero */
            for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c32:	e021      	b.n	8003c78 <CO_ODF_1016+0x98>
                uint32_t objectCopy = HBcons->HBconsTime[i];
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	613b      	str	r3, [r7, #16]
                uint8_t NodeIDObj = (objectCopy >> 16U) & 0xFFU;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	0c1b      	lsrs	r3, r3, #16
 8003c48:	73fb      	strb	r3, [r7, #15]
                uint16_t HBconsTimeObj = objectCopy & 0xFFFFU;
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	81bb      	strh	r3, [r7, #12]
                if(((ODF_arg->subIndex-1U) != i) && (HBconsTimeObj != 0) && (NodeID == NodeIDObj)){
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	7d9b      	ldrb	r3, [r3, #22]
 8003c52:	1e5a      	subs	r2, r3, #1
 8003c54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d008      	beq.n	8003c6e <CO_ODF_1016+0x8e>
 8003c5c:	89bb      	ldrh	r3, [r7, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <CO_ODF_1016+0x8e>
 8003c62:	7dfa      	ldrb	r2, [r7, #23]
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d101      	bne.n	8003c6e <CO_ODF_1016+0x8e>
                    ret = CO_SDO_AB_PRAM_INCOMPAT;
 8003c6a:	4b10      	ldr	r3, [pc, #64]	; (8003cac <CO_ODF_1016+0xcc>)
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
            for(i = 0U; i<HBcons->numberOfMonitoredNodes; i++){
 8003c6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c72:	3301      	adds	r3, #1
 8003c74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	7b1b      	ldrb	r3, [r3, #12]
 8003c7c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d3d7      	bcc.n	8003c34 <CO_ODF_1016+0x54>
        else if((HBconsTime != 0) && (NodeID != 0)){
 8003c84:	e001      	b.n	8003c8a <CO_ODF_1016+0xaa>
                }
            }
        }
        else{
            ret = CO_SDO_AB_NONE;
 8003c86:	2300      	movs	r3, #0
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
        }

        /* Configure */
        if(ret == CO_SDO_AB_NONE){
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d108      	bne.n	8003ca2 <CO_ODF_1016+0xc2>
            CO_HBcons_monitoredNodeConfig(HBcons, ODF_arg->subIndex-1U, value);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	7d9b      	ldrb	r3, [r3, #22]
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	69f8      	ldr	r0, [r7, #28]
 8003c9e:	f7ff ff4f 	bl	8003b40 <CO_HBcons_monitoredNodeConfig>
        }
    }

    return ret;
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3728      	adds	r7, #40	; 0x28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	06040043 	.word	0x06040043

08003cb0 <CO_HBconsumer_init>:
        const uint32_t          HBconsTime[],
        CO_HBconsNode_t         monitoredNodes[],
        uint8_t                 numberOfMonitoredNodes,
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdxStart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af02      	add	r7, sp, #8
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
 8003cbc:	603b      	str	r3, [r7, #0]
    uint8_t i;

    /* verify arguments */
    if(HBcons==NULL || em==NULL || SDO==NULL || HBconsTime==NULL ||
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00e      	beq.n	8003ce2 <CO_HBconsumer_init+0x32>
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00b      	beq.n	8003ce2 <CO_HBconsumer_init+0x32>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d008      	beq.n	8003ce2 <CO_HBconsumer_init+0x32>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d005      	beq.n	8003ce2 <CO_HBconsumer_init+0x32>
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <CO_HBconsumer_init+0x32>
        monitoredNodes==NULL || CANdevRx==NULL){
 8003cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d102      	bne.n	8003ce8 <CO_HBconsumer_init+0x38>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce6:	e037      	b.n	8003d58 <CO_HBconsumer_init+0xa8>
    }

    /* Configure object variables */
    HBcons->em = em;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	601a      	str	r2, [r3, #0]
    HBcons->HBconsTime = HBconsTime;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	605a      	str	r2, [r3, #4]
    HBcons->monitoredNodes = monitoredNodes;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a3a      	ldr	r2, [r7, #32]
 8003cf8:	609a      	str	r2, [r3, #8]
    HBcons->numberOfMonitoredNodes = numberOfMonitoredNodes;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003d00:	731a      	strb	r2, [r3, #12]
    HBcons->allMonitoredOperational = 0;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	735a      	strb	r2, [r3, #13]
    HBcons->CANdevRx = CANdevRx;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d0c:	611a      	str	r2, [r3, #16]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003d12:	829a      	strh	r2, [r3, #20]

    for(i=0; i<HBcons->numberOfMonitoredNodes; i++)
 8003d14:	2300      	movs	r3, #0
 8003d16:	75fb      	strb	r3, [r7, #23]
 8003d18:	e00d      	b.n	8003d36 <CO_HBconsumer_init+0x86>
        CO_HBcons_monitoredNodeConfig(HBcons, i, HBcons->HBconsTime[i]);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	7dfb      	ldrb	r3, [r7, #23]
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	7dfb      	ldrb	r3, [r7, #23]
 8003d28:	4619      	mov	r1, r3
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f7ff ff08 	bl	8003b40 <CO_HBcons_monitoredNodeConfig>
    for(i=0; i<HBcons->numberOfMonitoredNodes; i++)
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
 8003d32:	3301      	adds	r3, #1
 8003d34:	75fb      	strb	r3, [r7, #23]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	7b1b      	ldrb	r3, [r3, #12]
 8003d3a:	7dfa      	ldrb	r2, [r7, #23]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d3ec      	bcc.n	8003d1a <CO_HBconsumer_init+0x6a>

    /* Configure Object dictionary entry at index 0x1016 */
    CO_OD_configure(SDO, OD_H1016_CONSUMER_HB_TIME, CO_ODF_1016, (void*)HBcons, 0, 0);
 8003d40:	2300      	movs	r3, #0
 8003d42:	9301      	str	r3, [sp, #4]
 8003d44:	2300      	movs	r3, #0
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4a05      	ldr	r2, [pc, #20]	; (8003d60 <CO_HBconsumer_init+0xb0>)
 8003d4c:	f241 0116 	movw	r1, #4118	; 0x1016
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f001 fef5 	bl	8005b40 <CO_OD_configure>

    return CO_ERROR_NO;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	08003be1 	.word	0x08003be1

08003d64 <CO_HBconsumer_process>:
/******************************************************************************/
void CO_HBconsumer_process(
        CO_HBconsumer_t        *HBcons,
        bool_t                  NMTisPreOrOperational,
        uint16_t                timeDifference_ms)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	70fb      	strb	r3, [r7, #3]
 8003d70:	4613      	mov	r3, r2
 8003d72:	803b      	strh	r3, [r7, #0]
    uint8_t i;
    uint8_t AllMonitoredOperationalCopy;
    CO_HBconsNode_t *monitoredNode;

    AllMonitoredOperationalCopy = 5;
 8003d74:	2305      	movs	r3, #5
 8003d76:	73bb      	strb	r3, [r7, #14]
    monitoredNode = &HBcons->monitoredNodes[0];
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	60bb      	str	r3, [r7, #8]

    if(NMTisPreOrOperational){
 8003d7e:	78fb      	ldrb	r3, [r7, #3]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d05a      	beq.n	8003e3a <CO_HBconsumer_process+0xd6>
        for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
 8003d84:	2300      	movs	r3, #0
 8003d86:	73fb      	strb	r3, [r7, #15]
 8003d88:	e051      	b.n	8003e2e <CO_HBconsumer_process+0xca>
            if(monitoredNode->time){/* is node monitored */
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	889b      	ldrh	r3, [r3, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d047      	beq.n	8003e22 <CO_HBconsumer_process+0xbe>
                /* Verify if new Consumer Heartbeat message received */
                if(monitoredNode->CANrxNew){
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	799b      	ldrb	r3, [r3, #6]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00e      	beq.n	8003db8 <CO_HBconsumer_process+0x54>
                    if(monitoredNode->NMTstate){
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d007      	beq.n	8003db2 <CO_HBconsumer_process+0x4e>
                        /* not a bootup message */
                        monitoredNode->monStarted = true;
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2201      	movs	r2, #1
 8003da6:	705a      	strb	r2, [r3, #1]
                        monitoredNode->timeoutTimer = 0;  /* reset timer */
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2200      	movs	r2, #0
 8003dac:	805a      	strh	r2, [r3, #2]
                        timeDifference_ms = 0;
 8003dae:	2300      	movs	r3, #0
 8003db0:	803b      	strh	r3, [r7, #0]
                    }
                    monitoredNode->CANrxNew = false;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2200      	movs	r2, #0
 8003db6:	719a      	strb	r2, [r3, #6]
                }
                /* Verify timeout */
                if(monitoredNode->timeoutTimer < monitoredNode->time) monitoredNode->timeoutTimer += timeDifference_ms;
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	885a      	ldrh	r2, [r3, #2]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	889b      	ldrh	r3, [r3, #4]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d206      	bcs.n	8003dd2 <CO_HBconsumer_process+0x6e>
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	885a      	ldrh	r2, [r3, #2]
 8003dc8:	883b      	ldrh	r3, [r7, #0]
 8003dca:	4413      	add	r3, r2
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	805a      	strh	r2, [r3, #2]

                if(monitoredNode->monStarted){
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	785b      	ldrb	r3, [r3, #1]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d01d      	beq.n	8003e16 <CO_HBconsumer_process+0xb2>
                    if(monitoredNode->timeoutTimer >= monitoredNode->time){
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	885a      	ldrh	r2, [r3, #2]
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	889b      	ldrh	r3, [r3, #4]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d30b      	bcc.n	8003dfe <CO_HBconsumer_process+0x9a>
                        CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, CO_EMC_HEARTBEAT, i);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6818      	ldr	r0, [r3, #0]
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
 8003dec:	f248 1230 	movw	r2, #33072	; 0x8130
 8003df0:	211b      	movs	r1, #27
 8003df2:	f7ff fd15 	bl	8003820 <CO_errorReport>
                        monitoredNode->NMTstate = 0;
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]
 8003dfc:	e00b      	b.n	8003e16 <CO_HBconsumer_process+0xb2>
                    }
                    else if(monitoredNode->NMTstate == 0){
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d107      	bne.n	8003e16 <CO_HBconsumer_process+0xb2>
                        /* there was a bootup message */
                        CO_errorReport(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, CO_EMC_HEARTBEAT, i);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	f248 1230 	movw	r2, #33072	; 0x8130
 8003e10:	211c      	movs	r1, #28
 8003e12:	f7ff fd05 	bl	8003820 <CO_errorReport>
                    }
                }
                if(monitoredNode->NMTstate != CO_NMT_OPERATIONAL)
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b05      	cmp	r3, #5
 8003e1c:	d001      	beq.n	8003e22 <CO_HBconsumer_process+0xbe>
                    AllMonitoredOperationalCopy = 0;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	73bb      	strb	r3, [r7, #14]
            }
            monitoredNode++;
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	3308      	adds	r3, #8
 8003e26:	60bb      	str	r3, [r7, #8]
        for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	73fb      	strb	r3, [r7, #15]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	7b1b      	ldrb	r3, [r3, #12]
 8003e32:	7bfa      	ldrb	r2, [r7, #15]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d3a8      	bcc.n	8003d8a <CO_HBconsumer_process+0x26>
 8003e38:	e018      	b.n	8003e6c <CO_HBconsumer_process+0x108>
        }
    }
    else{ /* not in (pre)operational state */
        for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	73fb      	strb	r3, [r7, #15]
 8003e3e:	e00e      	b.n	8003e5e <CO_HBconsumer_process+0xfa>
            monitoredNode->NMTstate = 0;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2200      	movs	r2, #0
 8003e44:	701a      	strb	r2, [r3, #0]
            monitoredNode->CANrxNew = false;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	719a      	strb	r2, [r3, #6]
            monitoredNode->monStarted = false;
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	705a      	strb	r2, [r3, #1]
            monitoredNode++;
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	3308      	adds	r3, #8
 8003e56:	60bb      	str	r3, [r7, #8]
        for(i=0; i<HBcons->numberOfMonitoredNodes; i++){
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	73fb      	strb	r3, [r7, #15]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	7b1b      	ldrb	r3, [r3, #12]
 8003e62:	7bfa      	ldrb	r2, [r7, #15]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d3eb      	bcc.n	8003e40 <CO_HBconsumer_process+0xdc>
        }
        AllMonitoredOperationalCopy = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	73bb      	strb	r3, [r7, #14]
    }
    HBcons->allMonitoredOperational = AllMonitoredOperationalCopy;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	7bba      	ldrb	r2, [r7, #14]
 8003e70:	735a      	strb	r2, [r3, #13]
}
 8003e72:	bf00      	nop
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_NMT_receive(void *object, const CO_CANrxMsg_t *msg){
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b084      	sub	sp, #16
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
 8003e82:	6039      	str	r1, [r7, #0]
    CO_NMT_t *NMT;
    uint8_t nodeId;

    NMT = (CO_NMT_t*)object;   /* this is the correct pointer type of the first argument */
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	60fb      	str	r3, [r7, #12]

    nodeId = msg->data[1];
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003e8e:	72fb      	strb	r3, [r7, #11]

    if((msg->DLC == 2) && ((nodeId == 0) || (nodeId == NMT->nodeId))){
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d14a      	bne.n	8003f30 <CO_NMT_receive+0xb6>
 8003e9a:	7afb      	ldrb	r3, [r7, #11]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d004      	beq.n	8003eaa <CO_NMT_receive+0x30>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	7a9b      	ldrb	r3, [r3, #10]
 8003ea4:	7afa      	ldrb	r2, [r7, #11]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d142      	bne.n	8003f30 <CO_NMT_receive+0xb6>
        uint8_t command = msg->data[0];
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003eb0:	72bb      	strb	r3, [r7, #10]
        uint8_t currentOperatingState = NMT->operatingState;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	727b      	strb	r3, [r7, #9]

        switch(command){
 8003eb8:	7abb      	ldrb	r3, [r7, #10]
 8003eba:	2b82      	cmp	r3, #130	; 0x82
 8003ebc:	d024      	beq.n	8003f08 <CO_NMT_receive+0x8e>
 8003ebe:	2b82      	cmp	r3, #130	; 0x82
 8003ec0:	dc27      	bgt.n	8003f12 <CO_NMT_receive+0x98>
 8003ec2:	2b81      	cmp	r3, #129	; 0x81
 8003ec4:	d01c      	beq.n	8003f00 <CO_NMT_receive+0x86>
 8003ec6:	2b81      	cmp	r3, #129	; 0x81
 8003ec8:	dc23      	bgt.n	8003f12 <CO_NMT_receive+0x98>
 8003eca:	2b80      	cmp	r3, #128	; 0x80
 8003ecc:	d014      	beq.n	8003ef8 <CO_NMT_receive+0x7e>
 8003ece:	2b80      	cmp	r3, #128	; 0x80
 8003ed0:	dc1f      	bgt.n	8003f12 <CO_NMT_receive+0x98>
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d002      	beq.n	8003edc <CO_NMT_receive+0x62>
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d00a      	beq.n	8003ef0 <CO_NMT_receive+0x76>
 8003eda:	e01a      	b.n	8003f12 <CO_NMT_receive+0x98>
            case CO_NMT_ENTER_OPERATIONAL:
                if((*NMT->emPr->errorRegister) == 0U){
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d113      	bne.n	8003f10 <CO_NMT_receive+0x96>
                    NMT->operatingState = CO_NMT_OPERATIONAL;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2205      	movs	r2, #5
 8003eec:	701a      	strb	r2, [r3, #0]
                }
                break;
 8003eee:	e00f      	b.n	8003f10 <CO_NMT_receive+0x96>
            case CO_NMT_ENTER_STOPPED:
                NMT->operatingState = CO_NMT_STOPPED;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2204      	movs	r2, #4
 8003ef4:	701a      	strb	r2, [r3, #0]
                break;
 8003ef6:	e00c      	b.n	8003f12 <CO_NMT_receive+0x98>
            case CO_NMT_ENTER_PRE_OPERATIONAL:
                NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	227f      	movs	r2, #127	; 0x7f
 8003efc:	701a      	strb	r2, [r3, #0]
                break;
 8003efe:	e008      	b.n	8003f12 <CO_NMT_receive+0x98>
            case CO_NMT_RESET_NODE:
                NMT->resetCommand = CO_RESET_APP;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2202      	movs	r2, #2
 8003f04:	725a      	strb	r2, [r3, #9]
                break;
 8003f06:	e004      	b.n	8003f12 <CO_NMT_receive+0x98>
            case CO_NMT_RESET_COMMUNICATION:
                NMT->resetCommand = CO_RESET_COMM;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	725a      	strb	r2, [r3, #9]
                break;
 8003f0e:	e000      	b.n	8003f12 <CO_NMT_receive+0x98>
                break;
 8003f10:	bf00      	nop
        }

        if(NMT->pFunctNMT!=NULL && currentOperatingState!=NMT->operatingState){
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00a      	beq.n	8003f30 <CO_NMT_receive+0xb6>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	7a7a      	ldrb	r2, [r7, #9]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d005      	beq.n	8003f30 <CO_NMT_receive+0xb6>
            NMT->pFunctNMT(NMT->operatingState);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	7812      	ldrb	r2, [r2, #0]
 8003f2c:	4610      	mov	r0, r2
 8003f2e:	4798      	blx	r3
        }
    }
}
 8003f30:	bf00      	nop
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <CO_NMT_init>:
        uint16_t                NMT_rxIdx,
        uint16_t                CANidRxNMT,
        CO_CANmodule_t         *HB_CANdev,
        uint16_t                HB_txIdx,
        uint16_t                CANidTxHB)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af04      	add	r7, sp, #16
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	4611      	mov	r1, r2
 8003f44:	461a      	mov	r2, r3
 8003f46:	460b      	mov	r3, r1
 8003f48:	71fb      	strb	r3, [r7, #7]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	80bb      	strh	r3, [r7, #4]
    /* verify arguments */
    if(NMT==NULL || emPr==NULL || NMT_CANdev==NULL || HB_CANdev==NULL){
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d008      	beq.n	8003f66 <CO_NMT_init+0x2e>
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d005      	beq.n	8003f66 <CO_NMT_init+0x2e>
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <CO_NMT_init+0x2e>
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d102      	bne.n	8003f6c <CO_NMT_init+0x34>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003f66:	f04f 33ff 	mov.w	r3, #4294967295
 8003f6a:	e04b      	b.n	8004004 <CO_NMT_init+0xcc>
    }

    /* blinking bytes */
    NMT->LEDflickering          = 0;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	705a      	strb	r2, [r3, #1]
    NMT->LEDblinking            = 0;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	709a      	strb	r2, [r3, #2]
    NMT->LEDsingleFlash         = 0;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	70da      	strb	r2, [r3, #3]
    NMT->LEDdoubleFlash         = 0;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	711a      	strb	r2, [r3, #4]
    NMT->LEDtripleFlash         = 0;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	715a      	strb	r2, [r3, #5]
    NMT->LEDquadrupleFlash      = 0;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	719a      	strb	r2, [r3, #6]

    /* Configure object variables */
    NMT->operatingState         = CO_NMT_INITIALIZING;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	701a      	strb	r2, [r3, #0]
    NMT->LEDgreenRun            = -1;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	22ff      	movs	r2, #255	; 0xff
 8003f9a:	71da      	strb	r2, [r3, #7]
    NMT->LEDredError            = 1;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	721a      	strb	r2, [r3, #8]
    NMT->nodeId                 = nodeId;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	79fa      	ldrb	r2, [r7, #7]
 8003fa6:	729a      	strb	r2, [r3, #10]
    NMT->firstHBTime            = firstHBTime;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	88ba      	ldrh	r2, [r7, #4]
 8003fac:	81da      	strh	r2, [r3, #14]
    NMT->resetCommand           = 0;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	725a      	strb	r2, [r3, #9]
    NMT->HBproducerTimer        = 0xFFFF;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fba:	819a      	strh	r2, [r3, #12]
    NMT->emPr                   = emPr;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	611a      	str	r2, [r3, #16]
    NMT->pFunctNMT              = NULL;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	619a      	str	r2, [r3, #24]

    /* configure NMT CAN reception */
    CO_CANrxBufferInit(
 8003fc8:	8c3a      	ldrh	r2, [r7, #32]
 8003fca:	8bb9      	ldrh	r1, [r7, #28]
 8003fcc:	4b0f      	ldr	r3, [pc, #60]	; (800400c <CO_NMT_init+0xd4>)
 8003fce:	9302      	str	r3, [sp, #8]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	9301      	str	r3, [sp, #4]
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003fdc:	69b8      	ldr	r0, [r7, #24]
 8003fde:	f003 fe1c 	bl	8007c1a <CO_CANrxBufferInit>
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
            CO_NMT_receive);    /* this function will process received message */

    /* configure HB CAN transmission */
    NMT->HB_CANdev = HB_CANdev;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe6:	615a      	str	r2, [r3, #20]
    NMT->HB_TXbuff = CO_CANtxBufferInit(
 8003fe8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003fea:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8003fec:	2300      	movs	r3, #0
 8003fee:	9301      	str	r3, [sp, #4]
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ff8:	f003 fe93 	bl	8007d22 <CO_CANtxBufferInit>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	61da      	str	r2, [r3, #28]
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */

    return CO_ERROR_NO;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	08003e7b 	.word	0x08003e7b

08004010 <CO_NMT_blinkingProcess50ms>:
    }
}


/******************************************************************************/
void CO_NMT_blinkingProcess50ms(CO_NMT_t *NMT){
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]

    if(++NMT->LEDflickering >= 1) NMT->LEDflickering = -1;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800401e:	b2db      	uxtb	r3, r3
 8004020:	3301      	adds	r3, #1
 8004022:	b2db      	uxtb	r3, r3
 8004024:	b25a      	sxtb	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	705a      	strb	r2, [r3, #1]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004030:	2b00      	cmp	r3, #0
 8004032:	dd02      	ble.n	800403a <CO_NMT_blinkingProcess50ms+0x2a>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	22ff      	movs	r2, #255	; 0xff
 8004038:	705a      	strb	r2, [r3, #1]

    if(++NMT->LEDblinking >= 4) NMT->LEDblinking = -4;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	3301      	adds	r3, #1
 8004044:	b2db      	uxtb	r3, r3
 8004046:	b25a      	sxtb	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	709a      	strb	r2, [r3, #2]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004052:	2b03      	cmp	r3, #3
 8004054:	dd02      	ble.n	800405c <CO_NMT_blinkingProcess50ms+0x4c>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	22fc      	movs	r2, #252	; 0xfc
 800405a:	709a      	strb	r2, [r3, #2]

    if(++NMT->LEDsingleFlash >= 4) NMT->LEDsingleFlash = -20;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004062:	b2db      	uxtb	r3, r3
 8004064:	3301      	adds	r3, #1
 8004066:	b2db      	uxtb	r3, r3
 8004068:	b25a      	sxtb	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	70da      	strb	r2, [r3, #3]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004074:	2b03      	cmp	r3, #3
 8004076:	dd02      	ble.n	800407e <CO_NMT_blinkingProcess50ms+0x6e>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	22ec      	movs	r2, #236	; 0xec
 800407c:	70da      	strb	r2, [r3, #3]

    switch(++NMT->LEDdoubleFlash){
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	3301      	adds	r3, #1
 8004088:	b2db      	uxtb	r3, r3
 800408a:	b25a      	sxtb	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	711a      	strb	r2, [r3, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8004096:	2b68      	cmp	r3, #104	; 0x68
 8004098:	d00e      	beq.n	80040b8 <CO_NMT_blinkingProcess50ms+0xa8>
 800409a:	2b68      	cmp	r3, #104	; 0x68
 800409c:	dc10      	bgt.n	80040c0 <CO_NMT_blinkingProcess50ms+0xb0>
 800409e:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80040a2:	d005      	beq.n	80040b0 <CO_NMT_blinkingProcess50ms+0xa0>
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d10b      	bne.n	80040c0 <CO_NMT_blinkingProcess50ms+0xb0>
        case    4:  NMT->LEDdoubleFlash = -104; break;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2298      	movs	r2, #152	; 0x98
 80040ac:	711a      	strb	r2, [r3, #4]
 80040ae:	e007      	b.n	80040c0 <CO_NMT_blinkingProcess50ms+0xb0>
        case -100:  NMT->LEDdoubleFlash =  100; break;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2264      	movs	r2, #100	; 0x64
 80040b4:	711a      	strb	r2, [r3, #4]
 80040b6:	e003      	b.n	80040c0 <CO_NMT_blinkingProcess50ms+0xb0>
        case  104:  NMT->LEDdoubleFlash =  -20; break;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	22ec      	movs	r2, #236	; 0xec
 80040bc:	711a      	strb	r2, [r3, #4]
 80040be:	bf00      	nop
    }

    switch(++NMT->LEDtripleFlash){
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	3301      	adds	r3, #1
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	b25a      	sxtb	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	715a      	strb	r2, [r3, #5]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80040d8:	2b72      	cmp	r3, #114	; 0x72
 80040da:	d020      	beq.n	800411e <CO_NMT_blinkingProcess50ms+0x10e>
 80040dc:	2b72      	cmp	r3, #114	; 0x72
 80040de:	dc22      	bgt.n	8004126 <CO_NMT_blinkingProcess50ms+0x116>
 80040e0:	2b68      	cmp	r3, #104	; 0x68
 80040e2:	d014      	beq.n	800410e <CO_NMT_blinkingProcess50ms+0xfe>
 80040e4:	2b68      	cmp	r3, #104	; 0x68
 80040e6:	dc1e      	bgt.n	8004126 <CO_NMT_blinkingProcess50ms+0x116>
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d008      	beq.n	80040fe <CO_NMT_blinkingProcess50ms+0xee>
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	dc1a      	bgt.n	8004126 <CO_NMT_blinkingProcess50ms+0x116>
 80040f0:	f113 0f6e 	cmn.w	r3, #110	; 0x6e
 80040f4:	d00f      	beq.n	8004116 <CO_NMT_blinkingProcess50ms+0x106>
 80040f6:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80040fa:	d004      	beq.n	8004106 <CO_NMT_blinkingProcess50ms+0xf6>
 80040fc:	e013      	b.n	8004126 <CO_NMT_blinkingProcess50ms+0x116>
        case    4:  NMT->LEDtripleFlash = -104; break;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2298      	movs	r2, #152	; 0x98
 8004102:	715a      	strb	r2, [r3, #5]
 8004104:	e00f      	b.n	8004126 <CO_NMT_blinkingProcess50ms+0x116>
        case -100:  NMT->LEDtripleFlash =  100; break;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2264      	movs	r2, #100	; 0x64
 800410a:	715a      	strb	r2, [r3, #5]
 800410c:	e00b      	b.n	8004126 <CO_NMT_blinkingProcess50ms+0x116>
        case  104:  NMT->LEDtripleFlash = -114; break;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	228e      	movs	r2, #142	; 0x8e
 8004112:	715a      	strb	r2, [r3, #5]
 8004114:	e007      	b.n	8004126 <CO_NMT_blinkingProcess50ms+0x116>
        case -110:  NMT->LEDtripleFlash =  110; break;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	226e      	movs	r2, #110	; 0x6e
 800411a:	715a      	strb	r2, [r3, #5]
 800411c:	e003      	b.n	8004126 <CO_NMT_blinkingProcess50ms+0x116>
        case  114:  NMT->LEDtripleFlash =  -20; break;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	22ec      	movs	r2, #236	; 0xec
 8004122:	715a      	strb	r2, [r3, #5]
 8004124:	bf00      	nop
    }

    switch(++NMT->LEDquadrupleFlash){
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800412c:	b2db      	uxtb	r3, r3
 800412e:	3301      	adds	r3, #1
 8004130:	b2db      	uxtb	r3, r3
 8004132:	b25a      	sxtb	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	719a      	strb	r2, [r3, #6]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800413e:	2b7c      	cmp	r3, #124	; 0x7c
 8004140:	d032      	beq.n	80041a8 <CO_NMT_blinkingProcess50ms+0x198>
 8004142:	2b7c      	cmp	r3, #124	; 0x7c
 8004144:	dc34      	bgt.n	80041b0 <CO_NMT_blinkingProcess50ms+0x1a0>
 8004146:	2b72      	cmp	r3, #114	; 0x72
 8004148:	d026      	beq.n	8004198 <CO_NMT_blinkingProcess50ms+0x188>
 800414a:	2b72      	cmp	r3, #114	; 0x72
 800414c:	dc30      	bgt.n	80041b0 <CO_NMT_blinkingProcess50ms+0x1a0>
 800414e:	2b68      	cmp	r3, #104	; 0x68
 8004150:	d01a      	beq.n	8004188 <CO_NMT_blinkingProcess50ms+0x178>
 8004152:	2b68      	cmp	r3, #104	; 0x68
 8004154:	dc2c      	bgt.n	80041b0 <CO_NMT_blinkingProcess50ms+0x1a0>
 8004156:	2b04      	cmp	r3, #4
 8004158:	d00e      	beq.n	8004178 <CO_NMT_blinkingProcess50ms+0x168>
 800415a:	2b04      	cmp	r3, #4
 800415c:	dc28      	bgt.n	80041b0 <CO_NMT_blinkingProcess50ms+0x1a0>
 800415e:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8004162:	d00d      	beq.n	8004180 <CO_NMT_blinkingProcess50ms+0x170>
 8004164:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8004168:	dc22      	bgt.n	80041b0 <CO_NMT_blinkingProcess50ms+0x1a0>
 800416a:	f113 0f78 	cmn.w	r3, #120	; 0x78
 800416e:	d017      	beq.n	80041a0 <CO_NMT_blinkingProcess50ms+0x190>
 8004170:	f113 0f6e 	cmn.w	r3, #110	; 0x6e
 8004174:	d00c      	beq.n	8004190 <CO_NMT_blinkingProcess50ms+0x180>
        case -110:  NMT->LEDquadrupleFlash =  110; break;
        case  114:  NMT->LEDquadrupleFlash = -124; break;
        case -120:  NMT->LEDquadrupleFlash =  120; break;
        case  124:  NMT->LEDquadrupleFlash =  -20; break;
    }
}
 8004176:	e01b      	b.n	80041b0 <CO_NMT_blinkingProcess50ms+0x1a0>
        case    4:  NMT->LEDquadrupleFlash = -104; break;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2298      	movs	r2, #152	; 0x98
 800417c:	719a      	strb	r2, [r3, #6]
 800417e:	e017      	b.n	80041b0 <CO_NMT_blinkingProcess50ms+0x1a0>
        case -100:  NMT->LEDquadrupleFlash =  100; break;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2264      	movs	r2, #100	; 0x64
 8004184:	719a      	strb	r2, [r3, #6]
 8004186:	e013      	b.n	80041b0 <CO_NMT_blinkingProcess50ms+0x1a0>
        case  104:  NMT->LEDquadrupleFlash = -114; break;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	228e      	movs	r2, #142	; 0x8e
 800418c:	719a      	strb	r2, [r3, #6]
 800418e:	e00f      	b.n	80041b0 <CO_NMT_blinkingProcess50ms+0x1a0>
        case -110:  NMT->LEDquadrupleFlash =  110; break;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	226e      	movs	r2, #110	; 0x6e
 8004194:	719a      	strb	r2, [r3, #6]
 8004196:	e00b      	b.n	80041b0 <CO_NMT_blinkingProcess50ms+0x1a0>
        case  114:  NMT->LEDquadrupleFlash = -124; break;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2284      	movs	r2, #132	; 0x84
 800419c:	719a      	strb	r2, [r3, #6]
 800419e:	e007      	b.n	80041b0 <CO_NMT_blinkingProcess50ms+0x1a0>
        case -120:  NMT->LEDquadrupleFlash =  120; break;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2278      	movs	r2, #120	; 0x78
 80041a4:	719a      	strb	r2, [r3, #6]
 80041a6:	e003      	b.n	80041b0 <CO_NMT_blinkingProcess50ms+0x1a0>
        case  124:  NMT->LEDquadrupleFlash =  -20; break;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	22ec      	movs	r2, #236	; 0xec
 80041ac:	719a      	strb	r2, [r3, #6]
 80041ae:	bf00      	nop
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <CO_NMT_process>:
        uint16_t                HBtime,
        uint32_t                NMTstartup,
        uint8_t                 errorRegister,
        const uint8_t           errorBehavior[],
        uint16_t               *timerNext_ms)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	607b      	str	r3, [r7, #4]
 80041c6:	460b      	mov	r3, r1
 80041c8:	817b      	strh	r3, [r7, #10]
 80041ca:	4613      	mov	r3, r2
 80041cc:	813b      	strh	r3, [r7, #8]
    uint8_t CANpassive;

    uint8_t currentOperatingState = NMT->operatingState;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	75bb      	strb	r3, [r7, #22]

    NMT->HBproducerTimer += timeDifference_ms;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	899a      	ldrh	r2, [r3, #12]
 80041d8:	897b      	ldrh	r3, [r7, #10]
 80041da:	4413      	add	r3, r2
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	819a      	strh	r2, [r3, #12]

    /* Heartbeat producer message & Bootup message */
    if((HBtime != 0 && NMT->HBproducerTimer >= HBtime) || NMT->operatingState == CO_NMT_INITIALIZING){
 80041e2:	893b      	ldrh	r3, [r7, #8]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d004      	beq.n	80041f2 <CO_NMT_process+0x36>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	899b      	ldrh	r3, [r3, #12]
 80041ec:	893a      	ldrh	r2, [r7, #8]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d903      	bls.n	80041fa <CO_NMT_process+0x3e>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d12f      	bne.n	800425a <CO_NMT_process+0x9e>

        /* Start from the beginning. If OS is slow, time sliding may occur. However, heartbeat is
         * not for synchronization, it is for health report. */
        NMT->HBproducerTimer = 0;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	819a      	strh	r2, [r3, #12]

        NMT->HB_TXbuff->data[0] = NMT->operatingState;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	7812      	ldrb	r2, [r2, #0]
 8004208:	715a      	strb	r2, [r3, #5]
        CO_CANsend(NMT->HB_CANdev, NMT->HB_TXbuff);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	695a      	ldr	r2, [r3, #20]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	4619      	mov	r1, r3
 8004214:	4610      	mov	r0, r2
 8004216:	f003 fdc7 	bl	8007da8 <CO_CANsend>

        if(NMT->operatingState == CO_NMT_INITIALIZING){
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d11b      	bne.n	800425a <CO_NMT_process+0x9e>
            if(HBtime > NMT->firstHBTime) NMT->HBproducerTimer = HBtime - NMT->firstHBTime;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	89db      	ldrh	r3, [r3, #14]
 8004226:	893a      	ldrh	r2, [r7, #8]
 8004228:	429a      	cmp	r2, r3
 800422a:	d907      	bls.n	800423c <CO_NMT_process+0x80>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	89db      	ldrh	r3, [r3, #14]
 8004230:	893a      	ldrh	r2, [r7, #8]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	819a      	strh	r2, [r3, #12]
 800423a:	e002      	b.n	8004242 <CO_NMT_process+0x86>
            else                          NMT->HBproducerTimer = 0;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	819a      	strh	r2, [r3, #12]

            if((NMTstartup & 0x04) == 0) NMT->operatingState = CO_NMT_OPERATIONAL;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	d103      	bne.n	8004254 <CO_NMT_process+0x98>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2205      	movs	r2, #5
 8004250:	701a      	strb	r2, [r3, #0]
 8004252:	e002      	b.n	800425a <CO_NMT_process+0x9e>
            else                         NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	227f      	movs	r2, #127	; 0x7f
 8004258:	701a      	strb	r2, [r3, #0]
        }
    }


    /* Calculate, when next Heartbeat needs to be send and lower timerNext_ms if necessary. */
    if(HBtime != 0 && timerNext_ms != NULL){
 800425a:	893b      	ldrh	r3, [r7, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d018      	beq.n	8004292 <CO_NMT_process+0xd6>
 8004260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004262:	2b00      	cmp	r3, #0
 8004264:	d015      	beq.n	8004292 <CO_NMT_process+0xd6>
        if(NMT->HBproducerTimer < HBtime){
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	899b      	ldrh	r3, [r3, #12]
 800426a:	893a      	ldrh	r2, [r7, #8]
 800426c:	429a      	cmp	r2, r3
 800426e:	d90d      	bls.n	800428c <CO_NMT_process+0xd0>
            uint16_t diff = HBtime - NMT->HBproducerTimer;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	899b      	ldrh	r3, [r3, #12]
 8004274:	893a      	ldrh	r2, [r7, #8]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	82bb      	strh	r3, [r7, #20]
            if(*timerNext_ms > diff){
 800427a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	8aba      	ldrh	r2, [r7, #20]
 8004280:	429a      	cmp	r2, r3
 8004282:	d206      	bcs.n	8004292 <CO_NMT_process+0xd6>
                *timerNext_ms = diff;
 8004284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004286:	8aba      	ldrh	r2, [r7, #20]
 8004288:	801a      	strh	r2, [r3, #0]
 800428a:	e002      	b.n	8004292 <CO_NMT_process+0xd6>
            }
        }else{
            *timerNext_ms = 0;
 800428c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428e:	2200      	movs	r2, #0
 8004290:	801a      	strh	r2, [r3, #0]
        }
    }


    /* CAN passive flag */
    CANpassive = 0;
 8004292:	2300      	movs	r3, #0
 8004294:	75fb      	strb	r3, [r7, #23]
    if(CO_isError(NMT->emPr->em, CO_EM_CAN_TX_BUS_PASSIVE) || CO_isError(NMT->emPr->em, CO_EM_CAN_RX_BUS_PASSIVE))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	2107      	movs	r1, #7
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff fc07 	bl	8003ab2 <CO_isError>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d109      	bne.n	80042be <CO_NMT_process+0x102>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	2106      	movs	r1, #6
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff fbfd 	bl	8003ab2 <CO_isError>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <CO_NMT_process+0x106>
        CANpassive = 1;
 80042be:	2301      	movs	r3, #1
 80042c0:	75fb      	strb	r3, [r7, #23]


    /* CANopen green RUN LED (DR 303-3) */
    switch(NMT->operatingState){
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b7f      	cmp	r3, #127	; 0x7f
 80042c8:	d00c      	beq.n	80042e4 <CO_NMT_process+0x128>
 80042ca:	2b7f      	cmp	r3, #127	; 0x7f
 80042cc:	dc14      	bgt.n	80042f8 <CO_NMT_process+0x13c>
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d002      	beq.n	80042d8 <CO_NMT_process+0x11c>
 80042d2:	2b05      	cmp	r3, #5
 80042d4:	d00c      	beq.n	80042f0 <CO_NMT_process+0x134>
 80042d6:	e00f      	b.n	80042f8 <CO_NMT_process+0x13c>
        case CO_NMT_STOPPED:          NMT->LEDgreenRun = NMT->LEDsingleFlash;   break;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f993 2003 	ldrsb.w	r2, [r3, #3]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	71da      	strb	r2, [r3, #7]
 80042e2:	e009      	b.n	80042f8 <CO_NMT_process+0x13c>
        case CO_NMT_PRE_OPERATIONAL:  NMT->LEDgreenRun = NMT->LEDblinking;      break;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	71da      	strb	r2, [r3, #7]
 80042ee:	e003      	b.n	80042f8 <CO_NMT_process+0x13c>
        case CO_NMT_OPERATIONAL:      NMT->LEDgreenRun = 1;                     break;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2201      	movs	r2, #1
 80042f4:	71da      	strb	r2, [r3, #7]
 80042f6:	bf00      	nop
    }


    /* CANopen red ERROR LED (DR 303-3) */
    if(CO_isError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	2112      	movs	r1, #18
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff fbd6 	bl	8003ab2 <CO_isError>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <CO_NMT_process+0x158>
        NMT->LEDredError = 1;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2201      	movs	r2, #1
 8004310:	721a      	strb	r2, [r3, #8]
 8004312:	e04f      	b.n	80043b4 <CO_NMT_process+0x1f8>

    else if(CO_isError(NMT->emPr->em, CO_EM_SYNC_TIME_OUT))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	2118      	movs	r1, #24
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff fbc8 	bl	8003ab2 <CO_isError>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d005      	beq.n	8004334 <CO_NMT_process+0x178>
        NMT->LEDredError = NMT->LEDtripleFlash;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	721a      	strb	r2, [r3, #8]
 8004332:	e03f      	b.n	80043b4 <CO_NMT_process+0x1f8>

    else if(CO_isError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER) || CO_isError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	211b      	movs	r1, #27
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff fbb8 	bl	8003ab2 <CO_isError>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d109      	bne.n	800435c <CO_NMT_process+0x1a0>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	211c      	movs	r1, #28
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff fbae 	bl	8003ab2 <CO_isError>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <CO_NMT_process+0x1ac>
        NMT->LEDredError = NMT->LEDdoubleFlash;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	721a      	strb	r2, [r3, #8]
 8004366:	e025      	b.n	80043b4 <CO_NMT_process+0x1f8>

    else if(CANpassive || CO_isError(NMT->emPr->em, CO_EM_CAN_BUS_WARNING))
 8004368:	7dfb      	ldrb	r3, [r7, #23]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d109      	bne.n	8004382 <CO_NMT_process+0x1c6>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	2101      	movs	r1, #1
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff fb9b 	bl	8003ab2 <CO_isError>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d005      	beq.n	800438e <CO_NMT_process+0x1d2>
        NMT->LEDredError = NMT->LEDsingleFlash;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	721a      	strb	r2, [r3, #8]
 800438c:	e012      	b.n	80043b4 <CO_NMT_process+0x1f8>

    else if(errorRegister)
 800438e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00b      	beq.n	80043ae <CO_NMT_process+0x1f2>
        NMT->LEDredError = (NMT->LEDblinking>=0)?-1:1;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800439c:	2b00      	cmp	r3, #0
 800439e:	db02      	blt.n	80043a6 <CO_NMT_process+0x1ea>
 80043a0:	f04f 32ff 	mov.w	r2, #4294967295
 80043a4:	e000      	b.n	80043a8 <CO_NMT_process+0x1ec>
 80043a6:	2201      	movs	r2, #1
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	721a      	strb	r2, [r3, #8]
 80043ac:	e002      	b.n	80043b4 <CO_NMT_process+0x1f8>

    else
        NMT->LEDredError = -1;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	22ff      	movs	r2, #255	; 0xff
 80043b2:	721a      	strb	r2, [r3, #8]


    /* in case of error enter pre-operational state */
    if(errorBehavior && (NMT->operatingState == CO_NMT_OPERATIONAL)){
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 80ac 	beq.w	8004514 <CO_NMT_process+0x358>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b05      	cmp	r3, #5
 80043c2:	f040 80a7 	bne.w	8004514 <CO_NMT_process+0x358>
        if(CANpassive && (errorBehavior[2] == 0 || errorBehavior[2] == 2)) errorRegister |= 0x10;
 80043c6:	7dfb      	ldrb	r3, [r7, #23]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00f      	beq.n	80043ec <CO_NMT_process+0x230>
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	3302      	adds	r3, #2
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d004      	beq.n	80043e0 <CO_NMT_process+0x224>
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	3302      	adds	r3, #2
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d105      	bne.n	80043ec <CO_NMT_process+0x230>
 80043e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043e4:	f043 0310 	orr.w	r3, r3, #16
 80043e8:	f887 3020 	strb.w	r3, [r7, #32]

        if(errorRegister){
 80043ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 808f 	beq.w	8004514 <CO_NMT_process+0x358>
            /* Communication error */
            if(errorRegister & CO_ERR_REG_COMM_ERR){
 80043f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043fa:	f003 0310 	and.w	r3, r3, #16
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d03e      	beq.n	8004480 <CO_NMT_process+0x2c4>
                if(errorBehavior[1] == 0){
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	3301      	adds	r3, #1
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d103      	bne.n	8004414 <CO_NMT_process+0x258>
                    NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	227f      	movs	r2, #127	; 0x7f
 8004410:	701a      	strb	r2, [r3, #0]
 8004412:	e035      	b.n	8004480 <CO_NMT_process+0x2c4>
                }
                else if(errorBehavior[1] == 2){
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	3301      	adds	r3, #1
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d103      	bne.n	8004426 <CO_NMT_process+0x26a>
                    NMT->operatingState = CO_NMT_STOPPED;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2204      	movs	r2, #4
 8004422:	701a      	strb	r2, [r3, #0]
 8004424:	e02c      	b.n	8004480 <CO_NMT_process+0x2c4>
                }
                else if(CO_isError(NMT->emPr->em, CO_EM_CAN_TX_BUS_OFF)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	2112      	movs	r1, #18
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff fb3f 	bl	8003ab2 <CO_isError>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d113      	bne.n	8004462 <CO_NMT_process+0x2a6>
                     || CO_isError(NMT->emPr->em, CO_EM_HEARTBEAT_CONSUMER)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	211b      	movs	r1, #27
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff fb35 	bl	8003ab2 <CO_isError>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d109      	bne.n	8004462 <CO_NMT_process+0x2a6>
                     || CO_isError(NMT->emPr->em, CO_EM_HB_CONSUMER_REMOTE_RESET))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	211c      	movs	r1, #28
 8004456:	4618      	mov	r0, r3
 8004458:	f7ff fb2b 	bl	8003ab2 <CO_isError>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00e      	beq.n	8004480 <CO_NMT_process+0x2c4>
                {
                    if(errorBehavior[0] == 0){
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d103      	bne.n	8004472 <CO_NMT_process+0x2b6>
                        NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	227f      	movs	r2, #127	; 0x7f
 800446e:	701a      	strb	r2, [r3, #0]
 8004470:	e006      	b.n	8004480 <CO_NMT_process+0x2c4>
                    }
                    else if(errorBehavior[0] == 2){
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d102      	bne.n	8004480 <CO_NMT_process+0x2c4>
                        NMT->operatingState = CO_NMT_STOPPED;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2204      	movs	r2, #4
 800447e:	701a      	strb	r2, [r3, #0]
                    }
                }
            }

            /* Generic error */
            if(errorRegister & CO_ERR_REG_GENERIC_ERR){
 8004480:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d010      	beq.n	80044ae <CO_NMT_process+0x2f2>
                if      (errorBehavior[3] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	3303      	adds	r3, #3
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d103      	bne.n	800449e <CO_NMT_process+0x2e2>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	227f      	movs	r2, #127	; 0x7f
 800449a:	701a      	strb	r2, [r3, #0]
 800449c:	e007      	b.n	80044ae <CO_NMT_process+0x2f2>
                else if (errorBehavior[3] == 2) NMT->operatingState = CO_NMT_STOPPED;
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	3303      	adds	r3, #3
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d102      	bne.n	80044ae <CO_NMT_process+0x2f2>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2204      	movs	r2, #4
 80044ac:	701a      	strb	r2, [r3, #0]
            }

            /* Device profile error */
            if(errorRegister & CO_ERR_REG_DEV_PROFILE){
 80044ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80044b2:	f003 0320 	and.w	r3, r3, #32
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d010      	beq.n	80044dc <CO_NMT_process+0x320>
                if      (errorBehavior[4] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	3304      	adds	r3, #4
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d103      	bne.n	80044cc <CO_NMT_process+0x310>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	227f      	movs	r2, #127	; 0x7f
 80044c8:	701a      	strb	r2, [r3, #0]
 80044ca:	e007      	b.n	80044dc <CO_NMT_process+0x320>
                else if (errorBehavior[4] == 2) NMT->operatingState = CO_NMT_STOPPED;
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	3304      	adds	r3, #4
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d102      	bne.n	80044dc <CO_NMT_process+0x320>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2204      	movs	r2, #4
 80044da:	701a      	strb	r2, [r3, #0]
            }

            /* Manufacturer specific error */
            if(errorRegister & CO_ERR_REG_MANUFACTURER){
 80044dc:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	da10      	bge.n	8004506 <CO_NMT_process+0x34a>
                if      (errorBehavior[5] == 0) NMT->operatingState = CO_NMT_PRE_OPERATIONAL;
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	3305      	adds	r3, #5
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d103      	bne.n	80044f6 <CO_NMT_process+0x33a>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	227f      	movs	r2, #127	; 0x7f
 80044f2:	701a      	strb	r2, [r3, #0]
 80044f4:	e007      	b.n	8004506 <CO_NMT_process+0x34a>
                else if (errorBehavior[5] == 2) NMT->operatingState = CO_NMT_STOPPED;
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	3305      	adds	r3, #5
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d102      	bne.n	8004506 <CO_NMT_process+0x34a>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2204      	movs	r2, #4
 8004504:	701a      	strb	r2, [r3, #0]
            }

            /* if operational state is lost, send HB immediately. */
            if(NMT->operatingState != CO_NMT_OPERATIONAL)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	2b05      	cmp	r3, #5
 800450c:	d002      	beq.n	8004514 <CO_NMT_process+0x358>
                NMT->HBproducerTimer = HBtime;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	893a      	ldrh	r2, [r7, #8]
 8004512:	819a      	strh	r2, [r3, #12]
        }
    }

    if(NMT->pFunctNMT!=NULL && currentOperatingState!=NMT->operatingState){
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <CO_NMT_process+0x376>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	7dba      	ldrb	r2, [r7, #22]
 8004522:	429a      	cmp	r2, r3
 8004524:	d005      	beq.n	8004532 <CO_NMT_process+0x376>
        NMT->pFunctNMT(NMT->operatingState);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	7812      	ldrb	r2, [r2, #0]
 800452e:	4610      	mov	r0, r2
 8004530:	4798      	blx	r3
    }

    return NMT->resetCommand;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	7a5b      	ldrb	r3, [r3, #9]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <CO_PDO_receive>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by new message. That's OK with PDOs.
 */
static void CO_PDO_receive(void *object, const CO_CANrxMsg_t *msg){
 800453e:	b480      	push	{r7}
 8004540:	b085      	sub	sp, #20
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*)object;   /* this is the correct pointer type of the first argument */
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	60fb      	str	r3, [r7, #12]

    if( (RPDO->valid) &&
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	7f5b      	ldrb	r3, [r3, #29]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d07d      	beq.n	8004650 <CO_PDO_receive+0x112>
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	781b      	ldrb	r3, [r3, #0]
    if( (RPDO->valid) &&
 800455a:	2b05      	cmp	r3, #5
 800455c:	d178      	bne.n	8004650 <CO_PDO_receive+0x112>
        (msg->DLC >= RPDO->dataLength))
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	7fdb      	ldrb	r3, [r3, #31]
        (*RPDO->operatingState == CO_NMT_OPERATIONAL) &&
 8004568:	429a      	cmp	r2, r3
 800456a:	d371      	bcc.n	8004650 <CO_PDO_receive+0x112>
    {
        if(RPDO->synchronous && RPDO->SYNC->CANrxToggle) {
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	7f9b      	ldrb	r3, [r3, #30]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d039      	beq.n	80045e8 <CO_PDO_receive+0xaa>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	7ddb      	ldrb	r3, [r3, #23]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d034      	beq.n	80045e8 <CO_PDO_receive+0xaa>
            /* copy data into second buffer and set 'new message' flag */
            RPDO->CANrxData[1][0] = msg->data[0];
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
            RPDO->CANrxData[1][1] = msg->data[1];
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
            RPDO->CANrxData[1][2] = msg->data[2];
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            RPDO->CANrxData[1][3] = msg->data[3];
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
            RPDO->CANrxData[1][4] = msg->data[4];
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            RPDO->CANrxData[1][5] = msg->data[5];
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
            RPDO->CANrxData[1][6] = msg->data[6];
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            RPDO->CANrxData[1][7] = msg->data[7];
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

            RPDO->CANrxNew[1] = true;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            RPDO->CANrxData[0][7] = msg->data[7];

            RPDO->CANrxNew[0] = true;
        }
    }
}
 80045e6:	e033      	b.n	8004650 <CO_PDO_receive+0x112>
            RPDO->CANrxData[0][0] = msg->data[0];
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            RPDO->CANrxData[0][1] = msg->data[1];
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
            RPDO->CANrxData[0][2] = msg->data[2];
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            RPDO->CANrxData[0][3] = msg->data[3];
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            RPDO->CANrxData[0][4] = msg->data[4];
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            RPDO->CANrxData[0][5] = msg->data[5];
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
            RPDO->CANrxData[0][6] = msg->data[6];
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            RPDO->CANrxData[0][7] = msg->data[7];
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
            RPDO->CANrxNew[0] = true;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004650:	bf00      	nop
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <CO_RPDOconfigCom>:
 *
 * @param RPDO RPDO object.
 * @param COB_IDUsedByRPDO _RPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 */
static void CO_RPDOconfigCom(CO_RPDO_t* RPDO, uint32_t COB_IDUsedByRPDO){
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af04      	add	r7, sp, #16
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
    uint16_t ID;
    CO_ReturnError_t r;

    ID = (uint16_t)COB_IDUsedByRPDO;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	81fb      	strh	r3, [r7, #14]

    /* is RPDO used? */
    if((COB_IDUsedByRPDO & 0xBFFFF800L) == 0 && RPDO->dataLength && ID){
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	4b2c      	ldr	r3, [pc, #176]	; (8004720 <CO_RPDOconfigCom+0xc4>)
 800466e:	4013      	ands	r3, r2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d120      	bne.n	80046b6 <CO_RPDOconfigCom+0x5a>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	7fdb      	ldrb	r3, [r3, #31]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d01c      	beq.n	80046b6 <CO_RPDOconfigCom+0x5a>
 800467c:	89fb      	ldrh	r3, [r7, #14]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d019      	beq.n	80046b6 <CO_RPDOconfigCom+0x5a>
        /* is used default COB-ID? */
        if(ID == RPDO->defaultCOB_ID) ID += RPDO->nodeId;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	8b5b      	ldrh	r3, [r3, #26]
 8004686:	89fa      	ldrh	r2, [r7, #14]
 8004688:	429a      	cmp	r2, r3
 800468a:	d105      	bne.n	8004698 <CO_RPDOconfigCom+0x3c>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	7e1b      	ldrb	r3, [r3, #24]
 8004690:	b29a      	uxth	r2, r3
 8004692:	89fb      	ldrh	r3, [r7, #14]
 8004694:	4413      	add	r3, r2
 8004696:	81fb      	strh	r3, [r7, #14]
        RPDO->valid = true;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	775a      	strb	r2, [r3, #29]
        RPDO->synchronous = (RPDO->RPDOCommPar->transmissionType <= 240) ? true : false;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	7a1b      	ldrb	r3, [r3, #8]
 80046a4:	2bf0      	cmp	r3, #240	; 0xf0
 80046a6:	bf94      	ite	ls
 80046a8:	2301      	movls	r3, #1
 80046aa:	2300      	movhi	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	461a      	mov	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	779a      	strb	r2, [r3, #30]
 80046b4:	e00d      	b.n	80046d2 <CO_RPDOconfigCom+0x76>
    }
    else{
        ID = 0;
 80046b6:	2300      	movs	r3, #0
 80046b8:	81fb      	strh	r3, [r7, #14]
        RPDO->valid = false;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	775a      	strb	r2, [r3, #29]
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
 80046c0:	2100      	movs	r1, #0
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	460a      	mov	r2, r1
 80046c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	460a      	mov	r2, r1
 80046ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }
    r = CO_CANrxBufferInit(
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8b3 1058 	ldrh.w	r1, [r3, #88]	; 0x58
 80046dc:	89fa      	ldrh	r2, [r7, #14]
 80046de:	4b11      	ldr	r3, [pc, #68]	; (8004724 <CO_RPDOconfigCom+0xc8>)
 80046e0:	9302      	str	r3, [sp, #8]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	9301      	str	r3, [sp, #4]
 80046e6:	2300      	movs	r3, #0
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80046ee:	f003 fa94 	bl	8007c1a <CO_CANrxBufferInit>
 80046f2:	4603      	mov	r3, r0
 80046f4:	737b      	strb	r3, [r7, #13]
            ID,                     /* CAN identifier */
            0x7FF,                  /* mask */
            0,                      /* rtr */
            (void*)RPDO,            /* object passed to receive function */
            CO_PDO_receive);        /* this function will process received message */
    if(r != CO_ERROR_NO){
 80046f6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00b      	beq.n	8004716 <CO_RPDOconfigCom+0xba>
        RPDO->valid = false;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	775a      	strb	r2, [r3, #29]
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
 8004704:	2100      	movs	r1, #0
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	460a      	mov	r2, r1
 800470a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	460a      	mov	r2, r1
 8004712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }
}
 8004716:	bf00      	nop
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	bffff800 	.word	0xbffff800
 8004724:	0800453f 	.word	0x0800453f

08004728 <CO_TPDOconfigCom>:
 * @param TPDO TPDO object.
 * @param COB_IDUsedByTPDO _TPDO communication parameter_, _COB-ID for PDO_ variable
 * from Object dictionary (index 0x1400+, subindex 1).
 * @param syncFlag Indicate, if TPDO is synchronous.
 */
static void CO_TPDOconfigCom(CO_TPDO_t* TPDO, uint32_t COB_IDUsedByTPDO, uint8_t syncFlag){
 8004728:	b590      	push	{r4, r7, lr}
 800472a:	b089      	sub	sp, #36	; 0x24
 800472c:	af02      	add	r7, sp, #8
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	4613      	mov	r3, r2
 8004734:	71fb      	strb	r3, [r7, #7]
    uint16_t ID;

    ID = (uint16_t)COB_IDUsedByTPDO;
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	82fb      	strh	r3, [r7, #22]

    /* is TPDO used? */
    if((COB_IDUsedByTPDO & 0xBFFFF800L) == 0 && TPDO->dataLength && ID){
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	4b1d      	ldr	r3, [pc, #116]	; (80047b4 <CO_TPDOconfigCom+0x8c>)
 800473e:	4013      	ands	r3, r2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d115      	bne.n	8004770 <CO_TPDOconfigCom+0x48>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	7e9b      	ldrb	r3, [r3, #26]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d011      	beq.n	8004770 <CO_TPDOconfigCom+0x48>
 800474c:	8afb      	ldrh	r3, [r7, #22]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00e      	beq.n	8004770 <CO_TPDOconfigCom+0x48>
        /* is used default COB-ID? */
        if(ID == TPDO->defaultCOB_ID) ID += TPDO->nodeId;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8adb      	ldrh	r3, [r3, #22]
 8004756:	8afa      	ldrh	r2, [r7, #22]
 8004758:	429a      	cmp	r2, r3
 800475a:	d105      	bne.n	8004768 <CO_TPDOconfigCom+0x40>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	7d1b      	ldrb	r3, [r3, #20]
 8004760:	b29a      	uxth	r2, r3
 8004762:	8afb      	ldrh	r3, [r7, #22]
 8004764:	4413      	add	r3, r2
 8004766:	82fb      	strh	r3, [r7, #22]
        TPDO->valid = true;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2201      	movs	r2, #1
 800476c:	765a      	strb	r2, [r3, #25]
 800476e:	e004      	b.n	800477a <CO_TPDOconfigCom+0x52>
    }
    else{
        ID = 0;
 8004770:	2300      	movs	r3, #0
 8004772:	82fb      	strh	r3, [r7, #22]
        TPDO->valid = false;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	765a      	strb	r2, [r3, #25]
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	7e9b      	ldrb	r3, [r3, #26]
 8004788:	8afc      	ldrh	r4, [r7, #22]
 800478a:	79fa      	ldrb	r2, [r7, #7]
 800478c:	9201      	str	r2, [sp, #4]
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	2300      	movs	r3, #0
 8004792:	4622      	mov	r2, r4
 8004794:	f003 fac5 	bl	8007d22 <CO_CANtxBufferInit>
 8004798:	4602      	mov	r2, r0
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	64da      	str	r2, [r3, #76]	; 0x4c
            ID,                        /* CAN identifier */
            0,                         /* rtr */
            TPDO->dataLength,          /* number of data bytes */
            syncFlag);                 /* synchronous message flag bit */

    if(TPDO->CANtxBuff == 0){
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d102      	bne.n	80047ac <CO_TPDOconfigCom+0x84>
        TPDO->valid = false;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	765a      	strb	r2, [r3, #25]
    }
}
 80047ac:	bf00      	nop
 80047ae:	371c      	adds	r7, #28
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd90      	pop	{r4, r7, pc}
 80047b4:	bffff800 	.word	0xbffff800

080047b8 <CO_PDOfindMap>:
        uint8_t                 R_T,
        uint8_t               **ppData,
        uint8_t                *pLength,
        uint8_t                *pSendIfCOSFlags,
        uint8_t                *pIsMultibyteVar)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b088      	sub	sp, #32
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	603b      	str	r3, [r7, #0]
 80047c4:	4613      	mov	r3, r2
 80047c6:	71fb      	strb	r3, [r7, #7]
    uint8_t subIndex;
    uint8_t dataLen;
    uint8_t objectLen;
    uint8_t attr;

    index = (uint16_t)(map>>16);
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	0c1b      	lsrs	r3, r3, #16
 80047cc:	837b      	strh	r3, [r7, #26]
    subIndex = (uint8_t)(map>>8);
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	0a1b      	lsrs	r3, r3, #8
 80047d2:	767b      	strb	r3, [r7, #25]
    dataLen = (uint8_t) map;   /* data length in bits */
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	763b      	strb	r3, [r7, #24]

    /* data length must be byte aligned */
    if(dataLen&0x07) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 80047d8:	7e3b      	ldrb	r3, [r7, #24]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <CO_PDOfindMap+0x2e>
 80047e2:	4b66      	ldr	r3, [pc, #408]	; (800497c <CO_PDOfindMap+0x1c4>)
 80047e4:	e0c5      	b.n	8004972 <CO_PDOfindMap+0x1ba>

    dataLen >>= 3;    /* new data length is in bytes */
 80047e6:	7e3b      	ldrb	r3, [r7, #24]
 80047e8:	08db      	lsrs	r3, r3, #3
 80047ea:	763b      	strb	r3, [r7, #24]
    *pLength += dataLen;
 80047ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ee:	781a      	ldrb	r2, [r3, #0]
 80047f0:	7e3b      	ldrb	r3, [r7, #24]
 80047f2:	4413      	add	r3, r2
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f8:	701a      	strb	r2, [r3, #0]

    /* total PDO length can not be more than 8 bytes */
    if(*pLength > 8) return CO_SDO_AB_MAP_LEN;  /* The number and length of the objects to be mapped would exceed PDO length. */
 80047fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d901      	bls.n	8004806 <CO_PDOfindMap+0x4e>
 8004802:	4b5f      	ldr	r3, [pc, #380]	; (8004980 <CO_PDOfindMap+0x1c8>)
 8004804:	e0b5      	b.n	8004972 <CO_PDOfindMap+0x1ba>

    /* is there a reference to dummy entries */
    if(index <=7 && subIndex == 0){
 8004806:	8b7b      	ldrh	r3, [r7, #26]
 8004808:	2b07      	cmp	r3, #7
 800480a:	d82d      	bhi.n	8004868 <CO_PDOfindMap+0xb0>
 800480c:	7e7b      	ldrb	r3, [r7, #25]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d12a      	bne.n	8004868 <CO_PDOfindMap+0xb0>
        static uint32_t dummyTX = 0;
        static uint32_t dummyRX;
        uint8_t dummySize = 4;
 8004812:	2304      	movs	r3, #4
 8004814:	77fb      	strb	r3, [r7, #31]

        if(index<2) dummySize = 0;
 8004816:	8b7b      	ldrh	r3, [r7, #26]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d802      	bhi.n	8004822 <CO_PDOfindMap+0x6a>
 800481c:	2300      	movs	r3, #0
 800481e:	77fb      	strb	r3, [r7, #31]
 8004820:	e010      	b.n	8004844 <CO_PDOfindMap+0x8c>
        else if(index==2 || index==5) dummySize = 1;
 8004822:	8b7b      	ldrh	r3, [r7, #26]
 8004824:	2b02      	cmp	r3, #2
 8004826:	d002      	beq.n	800482e <CO_PDOfindMap+0x76>
 8004828:	8b7b      	ldrh	r3, [r7, #26]
 800482a:	2b05      	cmp	r3, #5
 800482c:	d102      	bne.n	8004834 <CO_PDOfindMap+0x7c>
 800482e:	2301      	movs	r3, #1
 8004830:	77fb      	strb	r3, [r7, #31]
 8004832:	e007      	b.n	8004844 <CO_PDOfindMap+0x8c>
        else if(index==3 || index==6) dummySize = 2;
 8004834:	8b7b      	ldrh	r3, [r7, #26]
 8004836:	2b03      	cmp	r3, #3
 8004838:	d002      	beq.n	8004840 <CO_PDOfindMap+0x88>
 800483a:	8b7b      	ldrh	r3, [r7, #26]
 800483c:	2b06      	cmp	r3, #6
 800483e:	d101      	bne.n	8004844 <CO_PDOfindMap+0x8c>
 8004840:	2302      	movs	r3, #2
 8004842:	77fb      	strb	r3, [r7, #31]

        /* is size of variable big enough for map */
        if(dummySize < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 8004844:	7ffa      	ldrb	r2, [r7, #31]
 8004846:	7e3b      	ldrb	r3, [r7, #24]
 8004848:	429a      	cmp	r2, r3
 800484a:	d201      	bcs.n	8004850 <CO_PDOfindMap+0x98>
 800484c:	4b4b      	ldr	r3, [pc, #300]	; (800497c <CO_PDOfindMap+0x1c4>)
 800484e:	e090      	b.n	8004972 <CO_PDOfindMap+0x1ba>

        /* Data and ODE pointer */
        if(R_T == 0) *ppData = (uint8_t*) &dummyRX;
 8004850:	79fb      	ldrb	r3, [r7, #7]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d103      	bne.n	800485e <CO_PDOfindMap+0xa6>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	4a4a      	ldr	r2, [pc, #296]	; (8004984 <CO_PDOfindMap+0x1cc>)
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	e002      	b.n	8004864 <CO_PDOfindMap+0xac>
        else         *ppData = (uint8_t*) &dummyTX;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	4a49      	ldr	r2, [pc, #292]	; (8004988 <CO_PDOfindMap+0x1d0>)
 8004862:	601a      	str	r2, [r3, #0]

        return 0;
 8004864:	2300      	movs	r3, #0
 8004866:	e084      	b.n	8004972 <CO_PDOfindMap+0x1ba>
    }

    /* find object in Object Dictionary */
    entryNo = CO_OD_find(SDO, index);
 8004868:	8b7b      	ldrh	r3, [r7, #26]
 800486a:	4619      	mov	r1, r3
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f001 f9bd 	bl	8005bec <CO_OD_find>
 8004872:	4603      	mov	r3, r0
 8004874:	82fb      	strh	r3, [r7, #22]

    /* Does object exist in OD? */
    if(entryNo == 0xFFFF || subIndex > SDO->OD[entryNo].maxSubIndex)
 8004876:	8afb      	ldrh	r3, [r7, #22]
 8004878:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800487c:	4293      	cmp	r3, r2
 800487e:	d00b      	beq.n	8004898 <CO_PDOfindMap+0xe0>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004884:	8afa      	ldrh	r2, [r7, #22]
 8004886:	4613      	mov	r3, r2
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	4413      	add	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	440b      	add	r3, r1
 8004890:	789b      	ldrb	r3, [r3, #2]
 8004892:	7e7a      	ldrb	r2, [r7, #25]
 8004894:	429a      	cmp	r2, r3
 8004896:	d901      	bls.n	800489c <CO_PDOfindMap+0xe4>
        return CO_SDO_AB_NOT_EXIST;   /* Object does not exist in the object dictionary. */
 8004898:	4b3c      	ldr	r3, [pc, #240]	; (800498c <CO_PDOfindMap+0x1d4>)
 800489a:	e06a      	b.n	8004972 <CO_PDOfindMap+0x1ba>

    attr = CO_OD_getAttribute(SDO, entryNo, subIndex);
 800489c:	7e7a      	ldrb	r2, [r7, #25]
 800489e:	8afb      	ldrh	r3, [r7, #22]
 80048a0:	4619      	mov	r1, r3
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f001 fa44 	bl	8005d30 <CO_OD_getAttribute>
 80048a8:	4603      	mov	r3, r0
 80048aa:	757b      	strb	r3, [r7, #21]
    /* Is object Mappable for RPDO? */
    if(R_T==0 && !((attr&CO_ODA_RPDO_MAPABLE) && (attr&CO_ODA_WRITEABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 80048ac:	79fb      	ldrb	r3, [r7, #7]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10b      	bne.n	80048ca <CO_PDOfindMap+0x112>
 80048b2:	7d7b      	ldrb	r3, [r7, #21]
 80048b4:	f003 0310 	and.w	r3, r3, #16
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d004      	beq.n	80048c6 <CO_PDOfindMap+0x10e>
 80048bc:	7d7b      	ldrb	r3, [r7, #21]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <CO_PDOfindMap+0x112>
 80048c6:	4b2d      	ldr	r3, [pc, #180]	; (800497c <CO_PDOfindMap+0x1c4>)
 80048c8:	e053      	b.n	8004972 <CO_PDOfindMap+0x1ba>
    /* Is object Mappable for TPDO? */
    if(R_T!=0 && !((attr&CO_ODA_TPDO_MAPABLE) && (attr&CO_ODA_READABLE))) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 80048ca:	79fb      	ldrb	r3, [r7, #7]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00b      	beq.n	80048e8 <CO_PDOfindMap+0x130>
 80048d0:	7d7b      	ldrb	r3, [r7, #21]
 80048d2:	f003 0320 	and.w	r3, r3, #32
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d004      	beq.n	80048e4 <CO_PDOfindMap+0x12c>
 80048da:	7d7b      	ldrb	r3, [r7, #21]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <CO_PDOfindMap+0x130>
 80048e4:	4b25      	ldr	r3, [pc, #148]	; (800497c <CO_PDOfindMap+0x1c4>)
 80048e6:	e044      	b.n	8004972 <CO_PDOfindMap+0x1ba>

    /* is size of variable big enough for map */
    objectLen = CO_OD_getLength(SDO, entryNo, subIndex);
 80048e8:	7e7a      	ldrb	r2, [r7, #25]
 80048ea:	8afb      	ldrh	r3, [r7, #22]
 80048ec:	4619      	mov	r1, r3
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f001 f9d1 	bl	8005c96 <CO_OD_getLength>
 80048f4:	4603      	mov	r3, r0
 80048f6:	753b      	strb	r3, [r7, #20]
    if(objectLen < dataLen) return CO_SDO_AB_NO_MAP;   /* Object cannot be mapped to the PDO. */
 80048f8:	7d3a      	ldrb	r2, [r7, #20]
 80048fa:	7e3b      	ldrb	r3, [r7, #24]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d201      	bcs.n	8004904 <CO_PDOfindMap+0x14c>
 8004900:	4b1e      	ldr	r3, [pc, #120]	; (800497c <CO_PDOfindMap+0x1c4>)
 8004902:	e036      	b.n	8004972 <CO_PDOfindMap+0x1ba>

    /* mark multibyte variable */
    *pIsMultibyteVar = (attr&CO_ODA_MB_VALUE) ? 1 : 0;
 8004904:	7d7b      	ldrb	r3, [r7, #21]
 8004906:	09db      	lsrs	r3, r3, #7
 8004908:	b2da      	uxtb	r2, r3
 800490a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490c:	701a      	strb	r2, [r3, #0]

    /* pointer to data */
    *ppData = (uint8_t*) CO_OD_getDataPointer(SDO, entryNo, subIndex);
 800490e:	7e7a      	ldrb	r2, [r7, #25]
 8004910:	8afb      	ldrh	r3, [r7, #22]
 8004912:	4619      	mov	r1, r3
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f001 fa5e 	bl	8005dd6 <CO_OD_getDataPointer>
 800491a:	4602      	mov	r2, r0
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	601a      	str	r2, [r3, #0]
        *ppData += objectLen - dataLen;
    }
#endif

    /* setup change of state flags */
    if(attr&CO_ODA_TPDO_DETECT_COS){
 8004920:	7d7b      	ldrb	r3, [r7, #21]
 8004922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004926:	2b00      	cmp	r3, #0
 8004928:	d022      	beq.n	8004970 <CO_PDOfindMap+0x1b8>
        int16_t i;
        for(i=*pLength-dataLen; i<*pLength; i++){
 800492a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	b29a      	uxth	r2, r3
 8004930:	7e3b      	ldrb	r3, [r7, #24]
 8004932:	b29b      	uxth	r3, r3
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	b29b      	uxth	r3, r3
 8004938:	83bb      	strh	r3, [r7, #28]
 800493a:	e013      	b.n	8004964 <CO_PDOfindMap+0x1ac>
            *pSendIfCOSFlags |= 1<<i;
 800493c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	b25a      	sxtb	r2, r3
 8004942:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004946:	2101      	movs	r1, #1
 8004948:	fa01 f303 	lsl.w	r3, r1, r3
 800494c:	b25b      	sxtb	r3, r3
 800494e:	4313      	orrs	r3, r2
 8004950:	b25b      	sxtb	r3, r3
 8004952:	b2da      	uxtb	r2, r3
 8004954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004956:	701a      	strb	r2, [r3, #0]
        for(i=*pLength-dataLen; i<*pLength; i++){
 8004958:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800495c:	b29b      	uxth	r3, r3
 800495e:	3301      	adds	r3, #1
 8004960:	b29b      	uxth	r3, r3
 8004962:	83bb      	strh	r3, [r7, #28]
 8004964:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800496a:	7812      	ldrb	r2, [r2, #0]
 800496c:	4293      	cmp	r3, r2
 800496e:	dbe5      	blt.n	800493c <CO_PDOfindMap+0x184>
        }
    }

    return 0;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3720      	adds	r7, #32
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	06040041 	.word	0x06040041
 8004980:	06040042 	.word	0x06040042
 8004984:	20000638 	.word	0x20000638
 8004988:	2000063c 	.word	0x2000063c
 800498c:	06020000 	.word	0x06020000

08004990 <CO_RPDOconfigMap>:
 * @param RPDO RPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_RPDOconfigMap(CO_RPDO_t* RPDO, uint8_t noOfMappedObjects){
 8004990:	b580      	push	{r7, lr}
 8004992:	b08e      	sub	sp, #56	; 0x38
 8004994:	af04      	add	r7, sp, #16
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	70fb      	strb	r3, [r7, #3]
    int16_t i;
    uint8_t length = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	74fb      	strb	r3, [r7, #19]
    uint32_t ret = 0;
 80049a0:	2300      	movs	r3, #0
 80049a2:	623b      	str	r3, [r7, #32]
    const uint32_t* pMap = &RPDO->RPDOMapPar->mappedObject1;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	3304      	adds	r3, #4
 80049aa:	61fb      	str	r3, [r7, #28]

    for(i=noOfMappedObjects; i>0; i--){
 80049ac:	78fb      	ldrb	r3, [r7, #3]
 80049ae:	84fb      	strh	r3, [r7, #38]	; 0x26
 80049b0:	e046      	b.n	8004a40 <CO_RPDOconfigMap+0xb0>
        int16_t j;
        uint8_t* pData;
        uint8_t dummy = 0;
 80049b2:	2300      	movs	r3, #0
 80049b4:	72fb      	strb	r3, [r7, #11]
        uint8_t prevLength = length;
 80049b6:	7cfb      	ldrb	r3, [r7, #19]
 80049b8:	767b      	strb	r3, [r7, #25]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	1d1a      	adds	r2, r3, #4
 80049be:	61fa      	str	r2, [r7, #28]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	617b      	str	r3, [r7, #20]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6858      	ldr	r0, [r3, #4]
 80049c8:	f107 020c 	add.w	r2, r7, #12
 80049cc:	f107 030a 	add.w	r3, r7, #10
 80049d0:	9302      	str	r3, [sp, #8]
 80049d2:	f107 030b 	add.w	r3, r7, #11
 80049d6:	9301      	str	r3, [sp, #4]
 80049d8:	f107 0313 	add.w	r3, r7, #19
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	4613      	mov	r3, r2
 80049e0:	2200      	movs	r2, #0
 80049e2:	6979      	ldr	r1, [r7, #20]
 80049e4:	f7ff fee8 	bl	80047b8 <CO_PDOfindMap>
 80049e8:	6238      	str	r0, [r7, #32]
                0,
                &pData,
                &length,
                &dummy,
                &MBvar);
        if(ret){
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <CO_RPDOconfigMap+0x76>
            length = 0;
 80049f0:	2300      	movs	r3, #0
 80049f2:	74fb      	strb	r3, [r7, #19]
            CO_errorReport(RPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6818      	ldr	r0, [r3, #0]
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f44f 4202 	mov.w	r2, #33280	; 0x8200
 80049fe:	211a      	movs	r1, #26
 8004a00:	f7fe ff0e 	bl	8003820 <CO_errorReport>
 8004a04:	e020      	b.n	8004a48 <CO_RPDOconfigMap+0xb8>
        else{
            for(j=prevLength; j<length; j++)
                RPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
 8004a06:	7e7b      	ldrb	r3, [r7, #25]
 8004a08:	837b      	strh	r3, [r7, #26]
 8004a0a:	e00e      	b.n	8004a2a <CO_RPDOconfigMap+0x9a>
            RPDO->mapPointer[j] = pData++;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	1c5a      	adds	r2, r3, #1
 8004a10:	60fa      	str	r2, [r7, #12]
 8004a12:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	3108      	adds	r1, #8
 8004a1a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        for(j=prevLength; j<length; j++){
 8004a1e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	3301      	adds	r3, #1
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	837b      	strh	r3, [r7, #26]
 8004a2a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004a2e:	7cfa      	ldrb	r2, [r7, #19]
 8004a30:	4293      	cmp	r3, r2
 8004a32:	dbeb      	blt.n	8004a0c <CO_RPDOconfigMap+0x7c>
    for(i=noOfMappedObjects; i>0; i--){
 8004a34:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004a40:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	dcb4      	bgt.n	80049b2 <CO_RPDOconfigMap+0x22>
        }
#endif

    }

    RPDO->dataLength = length;
 8004a48:	7cfa      	ldrb	r2, [r7, #19]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	77da      	strb	r2, [r3, #31]

    return ret;
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3728      	adds	r7, #40	; 0x28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <CO_TPDOconfigMap>:
 * @param TPDO TPDO object.
 * @param noOfMappedObjects Number of mapped object (from OD).
 *
 * @return 0 on success, otherwise SDO abort code.
 */
static uint32_t CO_TPDOconfigMap(CO_TPDO_t* TPDO, uint8_t noOfMappedObjects){
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08e      	sub	sp, #56	; 0x38
 8004a5c:	af04      	add	r7, sp, #16
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	460b      	mov	r3, r1
 8004a62:	70fb      	strb	r3, [r7, #3]
    int16_t i;
    uint8_t length = 0;
 8004a64:	2300      	movs	r3, #0
 8004a66:	74fb      	strb	r3, [r7, #19]
    uint32_t ret = 0;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	623b      	str	r3, [r7, #32]
    const uint32_t* pMap = &TPDO->TPDOMapPar->mappedObject1;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	3304      	adds	r3, #4
 8004a72:	61fb      	str	r3, [r7, #28]

    TPDO->sendIfCOSFlags = 0;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    for(i=noOfMappedObjects; i>0; i--){
 8004a7c:	78fb      	ldrb	r3, [r7, #3]
 8004a7e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004a80:	e045      	b.n	8004b0e <CO_TPDOconfigMap+0xb6>
        int16_t j;
        uint8_t* pData;
        uint8_t prevLength = length;
 8004a82:	7cfb      	ldrb	r3, [r7, #19]
 8004a84:	767b      	strb	r3, [r7, #25]
        uint8_t MBvar;
        uint32_t map = *(pMap++);
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	1d1a      	adds	r2, r3, #4
 8004a8a:	61fa      	str	r2, [r7, #28]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	617b      	str	r3, [r7, #20]

        /* function do much checking of errors in map */
        ret = CO_PDOfindMap(
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6858      	ldr	r0, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	333c      	adds	r3, #60	; 0x3c
 8004a98:	f107 010c 	add.w	r1, r7, #12
 8004a9c:	f107 020b 	add.w	r2, r7, #11
 8004aa0:	9202      	str	r2, [sp, #8]
 8004aa2:	9301      	str	r3, [sp, #4]
 8004aa4:	f107 0313 	add.w	r3, r7, #19
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	460b      	mov	r3, r1
 8004aac:	2201      	movs	r2, #1
 8004aae:	6979      	ldr	r1, [r7, #20]
 8004ab0:	f7ff fe82 	bl	80047b8 <CO_PDOfindMap>
 8004ab4:	6238      	str	r0, [r7, #32]
                1,
                &pData,
                &length,
                &TPDO->sendIfCOSFlags,
                &MBvar);
        if(ret){
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00a      	beq.n	8004ad2 <CO_TPDOconfigMap+0x7a>
            length = 0;
 8004abc:	2300      	movs	r3, #0
 8004abe:	74fb      	strb	r3, [r7, #19]
            CO_errorReport(TPDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR, map);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6818      	ldr	r0, [r3, #0]
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f44f 4202 	mov.w	r2, #33280	; 0x8200
 8004aca:	211a      	movs	r1, #26
 8004acc:	f7fe fea8 	bl	8003820 <CO_errorReport>
 8004ad0:	e021      	b.n	8004b16 <CO_TPDOconfigMap+0xbe>
        else{
            for(j=prevLength; j<length; j++)
                TPDO->mapPointer[j] = pData++;
        }
#else
        for(j=prevLength; j<length; j++){
 8004ad2:	7e7b      	ldrb	r3, [r7, #25]
 8004ad4:	837b      	strh	r3, [r7, #26]
 8004ad6:	e00f      	b.n	8004af8 <CO_TPDOconfigMap+0xa0>
            TPDO->mapPointer[j] = pData++;
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	1c53      	adds	r3, r2, #1
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004ae2:	6879      	ldr	r1, [r7, #4]
 8004ae4:	3306      	adds	r3, #6
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	440b      	add	r3, r1
 8004aea:	605a      	str	r2, [r3, #4]
        for(j=prevLength; j<length; j++){
 8004aec:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	3301      	adds	r3, #1
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	837b      	strh	r3, [r7, #26]
 8004af8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004afc:	7cfa      	ldrb	r2, [r7, #19]
 8004afe:	4293      	cmp	r3, r2
 8004b00:	dbea      	blt.n	8004ad8 <CO_TPDOconfigMap+0x80>
    for(i=noOfMappedObjects; i>0; i--){
 8004b02:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004b0e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	dcb5      	bgt.n	8004a82 <CO_TPDOconfigMap+0x2a>
        }
#endif

    }

    TPDO->dataLength = length;
 8004b16:	7cfa      	ldrb	r2, [r7, #19]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	769a      	strb	r2, [r3, #26]

    return ret;
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3728      	adds	r7, #40	; 0x28
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <CO_ODF_RPDOcom>:
/*
 * Function for accessing _RPDO communication parameter_ (index 0x1400+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOcom(CO_ODF_arg_t *ODF_arg){
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	7ddb      	ldrb	r3, [r3, #23]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d024      	beq.n	8004b88 <CO_ODF_RPDOcom+0x60>
        if(ODF_arg->subIndex == 1){
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	7d9b      	ldrb	r3, [r3, #22]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d11e      	bne.n	8004b84 <CO_ODF_RPDOcom+0x5c>
            uint32_t *value = (uint32_t*) ODF_arg->data;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	60fb      	str	r3, [r7, #12]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == RPDO->defaultCOB_ID && RPDO->defaultCOB_ID)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	69fa      	ldr	r2, [r7, #28]
 8004b54:	8b52      	ldrh	r2, [r2, #26]
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d10a      	bne.n	8004b70 <CO_ODF_RPDOcom+0x48>
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	8b5b      	ldrh	r3, [r3, #26]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d006      	beq.n	8004b70 <CO_ODF_RPDOcom+0x48>
                *value += RPDO->nodeId;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69fa      	ldr	r2, [r7, #28]
 8004b68:	7e12      	ldrb	r2, [r2, #24]
 8004b6a:	441a      	add	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!RPDO->valid) *value |= 0x80000000L;
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	7f5b      	ldrb	r3, [r3, #29]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d105      	bne.n	8004b84 <CO_ODF_RPDOcom+0x5c>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
 8004b84:	2300      	movs	r3, #0
 8004b86:	e07a      	b.n	8004c7e <CO_ODF_RPDOcom+0x156>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x04)
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	7f1b      	ldrb	r3, [r3, #28]
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <CO_ODF_RPDOcom+0x70>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
 8004b94:	4b3c      	ldr	r3, [pc, #240]	; (8004c88 <CO_ODF_RPDOcom+0x160>)
 8004b96:	e072      	b.n	8004c7e <CO_ODF_RPDOcom+0x156>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x01))
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2b05      	cmp	r3, #5
 8004ba0:	d107      	bne.n	8004bb2 <CO_ODF_RPDOcom+0x8a>
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	7f1b      	ldrb	r3, [r3, #28]
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <CO_ODF_RPDOcom+0x8a>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
 8004bae:	4b37      	ldr	r3, [pc, #220]	; (8004c8c <CO_ODF_RPDOcom+0x164>)
 8004bb0:	e065      	b.n	8004c7e <CO_ODF_RPDOcom+0x156>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	7d9b      	ldrb	r3, [r3, #22]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d139      	bne.n	8004c2e <CO_ODF_RPDOcom+0x106>
        uint32_t *value = (uint32_t*) ODF_arg->data;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	613b      	str	r3, [r7, #16]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	4b32      	ldr	r3, [pc, #200]	; (8004c90 <CO_ODF_RPDOcom+0x168>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <CO_ODF_RPDOcom+0xa8>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8004bcc:	4b31      	ldr	r3, [pc, #196]	; (8004c94 <CO_ODF_RPDOcom+0x16c>)
 8004bce:	e056      	b.n	8004c7e <CO_ODF_RPDOcom+0x156>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (RPDO->defaultCOB_ID + RPDO->nodeId)){
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	8b52      	ldrh	r2, [r2, #26]
 8004bda:	4611      	mov	r1, r2
 8004bdc:	69fa      	ldr	r2, [r7, #28]
 8004bde:	7e12      	ldrb	r2, [r2, #24]
 8004be0:	440a      	add	r2, r1
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d10c      	bne.n	8004c00 <CO_ODF_RPDOcom+0xd8>
            *value &= 0xC0000000L;
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	601a      	str	r2, [r3, #0]
            *value += RPDO->defaultCOB_ID;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	69fa      	ldr	r2, [r7, #28]
 8004bf8:	8b52      	ldrh	r2, [r2, #26]
 8004bfa:	441a      	add	r2, r3
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(RPDO->valid && ((*value ^ RPDO->RPDOCommPar->COB_IDUsedByRPDO) & 0x3FFFFFFFL))
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	7f5b      	ldrb	r3, [r3, #29]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00b      	beq.n	8004c20 <CO_ODF_RPDOcom+0xf8>
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	4053      	eors	r3, r2
 8004c14:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <CO_ODF_RPDOcom+0xf8>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8004c1c:	4b1d      	ldr	r3, [pc, #116]	; (8004c94 <CO_ODF_RPDOcom+0x16c>)
 8004c1e:	e02e      	b.n	8004c7e <CO_ODF_RPDOcom+0x156>

        /* configure RPDO */
        CO_RPDOconfigCom(RPDO, *value);
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4619      	mov	r1, r3
 8004c26:	69f8      	ldr	r0, [r7, #28]
 8004c28:	f7ff fd18 	bl	800465c <CO_RPDOconfigCom>
 8004c2c:	e026      	b.n	8004c7c <CO_ODF_RPDOcom+0x154>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	7d9b      	ldrb	r3, [r3, #22]
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d122      	bne.n	8004c7c <CO_ODF_RPDOcom+0x154>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	61bb      	str	r3, [r7, #24]
        bool_t synchronousPrev = RPDO->synchronous;
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	7f9b      	ldrb	r3, [r3, #30]
 8004c40:	75fb      	strb	r3, [r7, #23]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2bf0      	cmp	r3, #240	; 0xf0
 8004c48:	d905      	bls.n	8004c56 <CO_ODF_RPDOcom+0x12e>
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	2bfd      	cmp	r3, #253	; 0xfd
 8004c50:	d801      	bhi.n	8004c56 <CO_ODF_RPDOcom+0x12e>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8004c52:	4b10      	ldr	r3, [pc, #64]	; (8004c94 <CO_ODF_RPDOcom+0x16c>)
 8004c54:	e013      	b.n	8004c7e <CO_ODF_RPDOcom+0x156>

        RPDO->synchronous = (*value <= 240) ? true : false;
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2bf0      	cmp	r3, #240	; 0xf0
 8004c5c:	bf94      	ite	ls
 8004c5e:	2301      	movls	r3, #1
 8004c60:	2300      	movhi	r3, #0
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	461a      	mov	r2, r3
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	779a      	strb	r2, [r3, #30]

        /* Remove old message from second buffer. */
        if(RPDO->synchronous != synchronousPrev) {
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	7f9b      	ldrb	r3, [r3, #30]
 8004c6e:	7dfa      	ldrb	r2, [r7, #23]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d003      	beq.n	8004c7c <CO_ODF_RPDOcom+0x154>
            RPDO->CANrxNew[1] = false;
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    }

    return CO_SDO_AB_NONE;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3720      	adds	r7, #32
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	06010002 	.word	0x06010002
 8004c8c:	08000022 	.word	0x08000022
 8004c90:	3fff8000 	.word	0x3fff8000
 8004c94:	06090030 	.word	0x06090030

08004c98 <CO_ODF_TPDOcom>:
/*
 * Function for accessing _TPDO communication parameter_ (index 0x1800+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOcom(CO_ODF_arg_t *ODF_arg){
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	61fb      	str	r3, [r7, #28]

    if(ODF_arg->subIndex == 4) return CO_SDO_AB_SUB_UNKNOWN;  /* Sub-index does not exist. */
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	7d9b      	ldrb	r3, [r3, #22]
 8004caa:	2b04      	cmp	r3, #4
 8004cac:	d101      	bne.n	8004cb2 <CO_ODF_TPDOcom+0x1a>
 8004cae:	4b6e      	ldr	r3, [pc, #440]	; (8004e68 <CO_ODF_TPDOcom+0x1d0>)
 8004cb0:	e0d6      	b.n	8004e60 <CO_ODF_TPDOcom+0x1c8>

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	7ddb      	ldrb	r3, [r3, #23]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d024      	beq.n	8004d04 <CO_ODF_TPDOcom+0x6c>
        if(ODF_arg->subIndex == 1){   /* COB_ID */
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	7d9b      	ldrb	r3, [r3, #22]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d11e      	bne.n	8004d00 <CO_ODF_TPDOcom+0x68>
            uint32_t *value = (uint32_t*) ODF_arg->data;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	60bb      	str	r3, [r7, #8]

            /* if default COB ID is used, write default value here */
            if(((*value)&0xFFFF) == TPDO->defaultCOB_ID && TPDO->defaultCOB_ID)
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	69fa      	ldr	r2, [r7, #28]
 8004cd0:	8ad2      	ldrh	r2, [r2, #22]
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d10a      	bne.n	8004cec <CO_ODF_TPDOcom+0x54>
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	8adb      	ldrh	r3, [r3, #22]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d006      	beq.n	8004cec <CO_ODF_TPDOcom+0x54>
                *value += TPDO->nodeId;
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69fa      	ldr	r2, [r7, #28]
 8004ce4:	7d12      	ldrb	r2, [r2, #20]
 8004ce6:	441a      	add	r2, r3
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	601a      	str	r2, [r3, #0]

            /* If PDO is not valid, set bit 31 */
            if(!TPDO->valid) *value |= 0x80000000L;
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	7e5b      	ldrb	r3, [r3, #25]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d105      	bne.n	8004d00 <CO_ODF_TPDOcom+0x68>
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	601a      	str	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
 8004d00:	2300      	movs	r3, #0
 8004d02:	e0ad      	b.n	8004e60 <CO_ODF_TPDOcom+0x1c8>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x04)
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	7e1b      	ldrb	r3, [r3, #24]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d001      	beq.n	8004d14 <CO_ODF_TPDOcom+0x7c>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
 8004d10:	4b56      	ldr	r3, [pc, #344]	; (8004e6c <CO_ODF_TPDOcom+0x1d4>)
 8004d12:	e0a5      	b.n	8004e60 <CO_ODF_TPDOcom+0x1c8>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x01))
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	2b05      	cmp	r3, #5
 8004d1c:	d107      	bne.n	8004d2e <CO_ODF_TPDOcom+0x96>
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	7e1b      	ldrb	r3, [r3, #24]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <CO_ODF_TPDOcom+0x96>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
 8004d2a:	4b51      	ldr	r3, [pc, #324]	; (8004e70 <CO_ODF_TPDOcom+0x1d8>)
 8004d2c:	e098      	b.n	8004e60 <CO_ODF_TPDOcom+0x1c8>

    if(ODF_arg->subIndex == 1){   /* COB_ID */
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	7d9b      	ldrb	r3, [r3, #22]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d141      	bne.n	8004dba <CO_ODF_TPDOcom+0x122>
        uint32_t *value = (uint32_t*) ODF_arg->data;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	60fb      	str	r3, [r7, #12]

        /* bits 11...29 must be zero */
        if(*value & 0x3FFF8000L)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	4b4c      	ldr	r3, [pc, #304]	; (8004e74 <CO_ODF_TPDOcom+0x1dc>)
 8004d42:	4013      	ands	r3, r2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <CO_ODF_TPDOcom+0xb4>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8004d48:	4b4b      	ldr	r3, [pc, #300]	; (8004e78 <CO_ODF_TPDOcom+0x1e0>)
 8004d4a:	e089      	b.n	8004e60 <CO_ODF_TPDOcom+0x1c8>

        /* if default COB-ID is being written, write defaultCOB_ID without nodeId */
        if(((*value)&0xFFFF) == (TPDO->defaultCOB_ID + TPDO->nodeId)){
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	8ad2      	ldrh	r2, [r2, #22]
 8004d56:	4611      	mov	r1, r2
 8004d58:	69fa      	ldr	r2, [r7, #28]
 8004d5a:	7d12      	ldrb	r2, [r2, #20]
 8004d5c:	440a      	add	r2, r1
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d10c      	bne.n	8004d7c <CO_ODF_TPDOcom+0xe4>
            *value &= 0xC0000000L;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	601a      	str	r2, [r3, #0]
            *value += TPDO->defaultCOB_ID;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69fa      	ldr	r2, [r7, #28]
 8004d74:	8ad2      	ldrh	r2, [r2, #22]
 8004d76:	441a      	add	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	601a      	str	r2, [r3, #0]
        }

        /* if PDO is valid, bits 0..29 can not be changed */
        if(TPDO->valid && ((*value ^ TPDO->TPDOCommPar->COB_IDUsedByTPDO) & 0x3FFFFFFFL))
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	7e5b      	ldrb	r3, [r3, #25]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00b      	beq.n	8004d9c <CO_ODF_TPDOcom+0x104>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	4053      	eors	r3, r2
 8004d90:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <CO_ODF_TPDOcom+0x104>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8004d98:	4b37      	ldr	r3, [pc, #220]	; (8004e78 <CO_ODF_TPDOcom+0x1e0>)
 8004d9a:	e061      	b.n	8004e60 <CO_ODF_TPDOcom+0x1c8>

        /* configure TPDO */
        CO_TPDOconfigCom(TPDO, *value, TPDO->CANtxBuff->syncFlag);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6819      	ldr	r1, [r3, #0]
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da4:	7b9b      	ldrb	r3, [r3, #14]
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	461a      	mov	r2, r3
 8004daa:	69f8      	ldr	r0, [r7, #28]
 8004dac:	f7ff fcbc 	bl	8004728 <CO_TPDOconfigCom>
        TPDO->syncCounter = 255;
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	22ff      	movs	r2, #255	; 0xff
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004db8:	e051      	b.n	8004e5e <CO_ODF_TPDOcom+0x1c6>
    }
    else if(ODF_arg->subIndex == 2){   /* Transmission_type */
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	7d9b      	ldrb	r3, [r3, #22]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d11b      	bne.n	8004dfa <CO_ODF_TPDOcom+0x162>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	613b      	str	r3, [r7, #16]

        /* values from 241...253 are not valid */
        if(*value >= 241 && *value <= 253)
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2bf0      	cmp	r3, #240	; 0xf0
 8004dce:	d905      	bls.n	8004ddc <CO_ODF_TPDOcom+0x144>
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2bfd      	cmp	r3, #253	; 0xfd
 8004dd6:	d801      	bhi.n	8004ddc <CO_ODF_TPDOcom+0x144>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8004dd8:	4b27      	ldr	r3, [pc, #156]	; (8004e78 <CO_ODF_TPDOcom+0x1e0>)
 8004dda:	e041      	b.n	8004e60 <CO_ODF_TPDOcom+0x1c8>
        TPDO->CANtxBuff->syncFlag = (*value <= 240) ? 1 : 0;
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	2bf0      	cmp	r3, #240	; 0xf0
 8004de2:	bf94      	ite	ls
 8004de4:	2301      	movls	r3, #1
 8004de6:	2300      	movhi	r3, #0
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dee:	739a      	strb	r2, [r3, #14]
        TPDO->syncCounter = 255;
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	22ff      	movs	r2, #255	; 0xff
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004df8:	e031      	b.n	8004e5e <CO_ODF_TPDOcom+0x1c6>
    }
    else if(ODF_arg->subIndex == 3){   /* Inhibit_Time */
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	7d9b      	ldrb	r3, [r3, #22]
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	d109      	bne.n	8004e16 <CO_ODF_TPDOcom+0x17e>
        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	7e5b      	ldrb	r3, [r3, #25]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <CO_ODF_TPDOcom+0x176>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8004e0a:	4b1b      	ldr	r3, [pc, #108]	; (8004e78 <CO_ODF_TPDOcom+0x1e0>)
 8004e0c:	e028      	b.n	8004e60 <CO_ODF_TPDOcom+0x1c8>

        TPDO->inhibitTimer = 0;
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	2200      	movs	r2, #0
 8004e12:	641a      	str	r2, [r3, #64]	; 0x40
 8004e14:	e023      	b.n	8004e5e <CO_ODF_TPDOcom+0x1c6>
    }
    else if(ODF_arg->subIndex == 5){   /* Event_Timer */
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	7d9b      	ldrb	r3, [r3, #22]
 8004e1a:	2b05      	cmp	r3, #5
 8004e1c:	d10c      	bne.n	8004e38 <CO_ODF_TPDOcom+0x1a0>
        uint16_t *value = (uint16_t*) ODF_arg->data;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	617b      	str	r3, [r7, #20]

        TPDO->eventTimer = ((uint32_t) *value) * 1000;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e2e:	fb03 f202 	mul.w	r2, r3, r2
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	645a      	str	r2, [r3, #68]	; 0x44
 8004e36:	e012      	b.n	8004e5e <CO_ODF_TPDOcom+0x1c6>
    }
    else if(ODF_arg->subIndex == 6){   /* SYNC start value */
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	7d9b      	ldrb	r3, [r3, #22]
 8004e3c:	2b06      	cmp	r3, #6
 8004e3e:	d10e      	bne.n	8004e5e <CO_ODF_TPDOcom+0x1c6>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	61bb      	str	r3, [r7, #24]

        /* if PDO is valid, value can not be changed */
        if(TPDO->valid)
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	7e5b      	ldrb	r3, [r3, #25]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <CO_ODF_TPDOcom+0x1ba>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8004e4e:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <CO_ODF_TPDOcom+0x1e0>)
 8004e50:	e006      	b.n	8004e60 <CO_ODF_TPDOcom+0x1c8>

        /* values from 240...255 are not valid */
        if(*value > 240)
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2bf0      	cmp	r3, #240	; 0xf0
 8004e58:	d901      	bls.n	8004e5e <CO_ODF_TPDOcom+0x1c6>
            return CO_SDO_AB_INVALID_VALUE;  /* Invalid value for parameter (download only). */
 8004e5a:	4b07      	ldr	r3, [pc, #28]	; (8004e78 <CO_ODF_TPDOcom+0x1e0>)
 8004e5c:	e000      	b.n	8004e60 <CO_ODF_TPDOcom+0x1c8>
    }

    return CO_SDO_AB_NONE;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3720      	adds	r7, #32
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	06090011 	.word	0x06090011
 8004e6c:	06010002 	.word	0x06010002
 8004e70:	08000022 	.word	0x08000022
 8004e74:	3fff8000 	.word	0x3fff8000
 8004e78:	06090030 	.word	0x06090030

08004e7c <CO_ODF_RPDOmap>:
/*
 * Function for accessing _RPDO mapping parameter_ (index 0x1600+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_RPDOmap(CO_ODF_arg_t *ODF_arg){
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08c      	sub	sp, #48	; 0x30
 8004e80:	af04      	add	r7, sp, #16
 8004e82:	6078      	str	r0, [r7, #4]
    CO_RPDO_t *RPDO;

    RPDO = (CO_RPDO_t*) ODF_arg->object;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	7ddb      	ldrb	r3, [r3, #23]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00f      	beq.n	8004eb2 <CO_ODF_RPDOmap+0x36>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	613b      	str	r3, [r7, #16]

        if(ODF_arg->subIndex == 0){
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	7d9b      	ldrb	r3, [r3, #22]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d106      	bne.n	8004eae <CO_ODF_RPDOmap+0x32>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!RPDO->dataLength) *value = 0;
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	7fdb      	ldrb	r3, [r3, #31]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d102      	bne.n	8004eae <CO_ODF_RPDOmap+0x32>
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	e050      	b.n	8004f54 <CO_ODF_RPDOmap+0xd8>
    }

    /* Writing Object Dictionary variable */
    if(RPDO->restrictionFlags & 0x08)
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	7f1b      	ldrb	r3, [r3, #28]
 8004eb6:	f003 0308 	and.w	r3, r3, #8
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <CO_ODF_RPDOmap+0x46>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
 8004ebe:	4b27      	ldr	r3, [pc, #156]	; (8004f5c <CO_ODF_RPDOmap+0xe0>)
 8004ec0:	e048      	b.n	8004f54 <CO_ODF_RPDOmap+0xd8>
    if(*RPDO->operatingState == CO_NMT_OPERATIONAL && (RPDO->restrictionFlags & 0x02))
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	2b05      	cmp	r3, #5
 8004eca:	d107      	bne.n	8004edc <CO_ODF_RPDOmap+0x60>
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	7f1b      	ldrb	r3, [r3, #28]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <CO_ODF_RPDOmap+0x60>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
 8004ed8:	4b21      	ldr	r3, [pc, #132]	; (8004f60 <CO_ODF_RPDOmap+0xe4>)
 8004eda:	e03b      	b.n	8004f54 <CO_ODF_RPDOmap+0xd8>
    if(RPDO->valid)
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	7f5b      	ldrb	r3, [r3, #29]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <CO_ODF_RPDOmap+0x6c>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
 8004ee4:	4b1f      	ldr	r3, [pc, #124]	; (8004f64 <CO_ODF_RPDOmap+0xe8>)
 8004ee6:	e035      	b.n	8004f54 <CO_ODF_RPDOmap+0xd8>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	7d9b      	ldrb	r3, [r3, #22]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d110      	bne.n	8004f12 <CO_ODF_RPDOmap+0x96>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	617b      	str	r3, [r7, #20]

        if(*value > 8)
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	2b08      	cmp	r3, #8
 8004efc:	d901      	bls.n	8004f02 <CO_ODF_RPDOmap+0x86>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
 8004efe:	4b1a      	ldr	r3, [pc, #104]	; (8004f68 <CO_ODF_RPDOmap+0xec>)
 8004f00:	e028      	b.n	8004f54 <CO_ODF_RPDOmap+0xd8>

        /* configure mapping */
        return CO_RPDOconfigMap(RPDO, *value);
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	4619      	mov	r1, r3
 8004f08:	69f8      	ldr	r0, [r7, #28]
 8004f0a:	f7ff fd41 	bl	8004990 <CO_RPDOconfigMap>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	e020      	b.n	8004f54 <CO_ODF_RPDOmap+0xd8>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	61bb      	str	r3, [r7, #24]
        uint8_t* pData;
        uint8_t length = 0;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(RPDO->dataLength)
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	7fdb      	ldrb	r3, [r3, #31]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <CO_ODF_RPDOmap+0xb0>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
 8004f28:	4b0e      	ldr	r3, [pc, #56]	; (8004f64 <CO_ODF_RPDOmap+0xe8>)
 8004f2a:	e013      	b.n	8004f54 <CO_ODF_RPDOmap+0xd8>

        /* verify if mapping is correct */
        return CO_PDOfindMap(
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	6858      	ldr	r0, [r3, #4]
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	6819      	ldr	r1, [r3, #0]
 8004f34:	f107 020c 	add.w	r2, r7, #12
 8004f38:	f107 0309 	add.w	r3, r7, #9
 8004f3c:	9302      	str	r3, [sp, #8]
 8004f3e:	f107 030a 	add.w	r3, r7, #10
 8004f42:	9301      	str	r3, [sp, #4]
 8004f44:	f107 030b 	add.w	r3, r7, #11
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f7ff fc33 	bl	80047b8 <CO_PDOfindMap>
 8004f52:	4603      	mov	r3, r0
               &dummy,
               &MBvar);
    }

    return CO_SDO_AB_NONE;
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3720      	adds	r7, #32
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	06010002 	.word	0x06010002
 8004f60:	08000022 	.word	0x08000022
 8004f64:	06010000 	.word	0x06010000
 8004f68:	06040042 	.word	0x06040042

08004f6c <CO_ODF_TPDOmap>:
/*
 * Function for accessing _TPDO mapping parameter_ (index 0x1A00+) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_TPDOmap(CO_ODF_arg_t *ODF_arg){
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08c      	sub	sp, #48	; 0x30
 8004f70:	af04      	add	r7, sp, #16
 8004f72:	6078      	str	r0, [r7, #4]
    CO_TPDO_t *TPDO;

    TPDO = (CO_TPDO_t*) ODF_arg->object;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	61fb      	str	r3, [r7, #28]

    /* Reading Object Dictionary variable */
    if(ODF_arg->reading){
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	7ddb      	ldrb	r3, [r3, #23]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00f      	beq.n	8004fa2 <CO_ODF_TPDOmap+0x36>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	613b      	str	r3, [r7, #16]

        if(ODF_arg->subIndex == 0){
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	7d9b      	ldrb	r3, [r3, #22]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d106      	bne.n	8004f9e <CO_ODF_TPDOmap+0x32>
            /* If there is error in mapping, dataLength is 0, so numberOfMappedObjects is 0. */
            if(!TPDO->dataLength) *value = 0;
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	7e9b      	ldrb	r3, [r3, #26]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d102      	bne.n	8004f9e <CO_ODF_TPDOmap+0x32>
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	701a      	strb	r2, [r3, #0]
        }
        return CO_SDO_AB_NONE;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	e050      	b.n	8005044 <CO_ODF_TPDOmap+0xd8>
    }

    /* Writing Object Dictionary variable */
    if(TPDO->restrictionFlags & 0x08)
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	7e1b      	ldrb	r3, [r3, #24]
 8004fa6:	f003 0308 	and.w	r3, r3, #8
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <CO_ODF_TPDOmap+0x46>
        return CO_SDO_AB_READONLY;  /* Attempt to write a read only object. */
 8004fae:	4b27      	ldr	r3, [pc, #156]	; (800504c <CO_ODF_TPDOmap+0xe0>)
 8004fb0:	e048      	b.n	8005044 <CO_ODF_TPDOmap+0xd8>
    if(*TPDO->operatingState == CO_NMT_OPERATIONAL && (TPDO->restrictionFlags & 0x02))
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b05      	cmp	r3, #5
 8004fba:	d107      	bne.n	8004fcc <CO_ODF_TPDOmap+0x60>
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	7e1b      	ldrb	r3, [r3, #24]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <CO_ODF_TPDOmap+0x60>
        return CO_SDO_AB_DATA_DEV_STATE;   /* Data cannot be transferred or stored to the application because of the present device state. */
 8004fc8:	4b21      	ldr	r3, [pc, #132]	; (8005050 <CO_ODF_TPDOmap+0xe4>)
 8004fca:	e03b      	b.n	8005044 <CO_ODF_TPDOmap+0xd8>
    if(TPDO->valid)
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	7e5b      	ldrb	r3, [r3, #25]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <CO_ODF_TPDOmap+0x6c>
        return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
 8004fd4:	4b1f      	ldr	r3, [pc, #124]	; (8005054 <CO_ODF_TPDOmap+0xe8>)
 8004fd6:	e035      	b.n	8005044 <CO_ODF_TPDOmap+0xd8>

    /* numberOfMappedObjects */
    if(ODF_arg->subIndex == 0){
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	7d9b      	ldrb	r3, [r3, #22]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d110      	bne.n	8005002 <CO_ODF_TPDOmap+0x96>
        uint8_t *value = (uint8_t*) ODF_arg->data;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	617b      	str	r3, [r7, #20]

        if(*value > 8)
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	2b08      	cmp	r3, #8
 8004fec:	d901      	bls.n	8004ff2 <CO_ODF_TPDOmap+0x86>
            return CO_SDO_AB_MAP_LEN;  /* Number and length of object to be mapped exceeds PDO length. */
 8004fee:	4b1a      	ldr	r3, [pc, #104]	; (8005058 <CO_ODF_TPDOmap+0xec>)
 8004ff0:	e028      	b.n	8005044 <CO_ODF_TPDOmap+0xd8>

        /* configure mapping */
        return CO_TPDOconfigMap(TPDO, *value);
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	69f8      	ldr	r0, [r7, #28]
 8004ffa:	f7ff fd2d 	bl	8004a58 <CO_TPDOconfigMap>
 8004ffe:	4603      	mov	r3, r0
 8005000:	e020      	b.n	8005044 <CO_ODF_TPDOmap+0xd8>
    }

    /* mappedObject */
    else{
        uint32_t *value = (uint32_t*) ODF_arg->data;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	61bb      	str	r3, [r7, #24]
        uint8_t* pData;
        uint8_t length = 0;
 8005008:	2300      	movs	r3, #0
 800500a:	72fb      	strb	r3, [r7, #11]
        uint8_t dummy = 0;
 800500c:	2300      	movs	r3, #0
 800500e:	72bb      	strb	r3, [r7, #10]
        uint8_t MBvar;

        if(TPDO->dataLength)
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	7e9b      	ldrb	r3, [r3, #26]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <CO_ODF_TPDOmap+0xb0>
            return CO_SDO_AB_UNSUPPORTED_ACCESS;  /* Unsupported access to an object. */
 8005018:	4b0e      	ldr	r3, [pc, #56]	; (8005054 <CO_ODF_TPDOmap+0xe8>)
 800501a:	e013      	b.n	8005044 <CO_ODF_TPDOmap+0xd8>

        /* verify if mapping is correct */
        return CO_PDOfindMap(
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	6858      	ldr	r0, [r3, #4]
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	6819      	ldr	r1, [r3, #0]
 8005024:	f107 020c 	add.w	r2, r7, #12
 8005028:	f107 0309 	add.w	r3, r7, #9
 800502c:	9302      	str	r3, [sp, #8]
 800502e:	f107 030a 	add.w	r3, r7, #10
 8005032:	9301      	str	r3, [sp, #4]
 8005034:	f107 030b 	add.w	r3, r7, #11
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	4613      	mov	r3, r2
 800503c:	2201      	movs	r2, #1
 800503e:	f7ff fbbb 	bl	80047b8 <CO_PDOfindMap>
 8005042:	4603      	mov	r3, r0
               &dummy,
               &MBvar);
    }

    return CO_SDO_AB_NONE;
}
 8005044:	4618      	mov	r0, r3
 8005046:	3720      	adds	r7, #32
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	06010002 	.word	0x06010002
 8005050:	08000022 	.word	0x08000022
 8005054:	06010000 	.word	0x06010000
 8005058:	06040042 	.word	0x06040042

0800505c <CO_RPDO_init>:
        const CO_RPDOMapPar_t  *RPDOMapPar,
        uint16_t                idx_RPDOCommPar,
        uint16_t                idx_RPDOMapPar,
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdx)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af02      	add	r7, sp, #8
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(RPDO==NULL || em==NULL || SDO==NULL || SYNC==NULL || operatingState==NULL ||
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d014      	beq.n	800509a <CO_RPDO_init+0x3e>
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d011      	beq.n	800509a <CO_RPDO_init+0x3e>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00e      	beq.n	800509a <CO_RPDO_init+0x3e>
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00b      	beq.n	800509a <CO_RPDO_init+0x3e>
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d008      	beq.n	800509a <CO_RPDO_init+0x3e>
 8005088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508a:	2b00      	cmp	r3, #0
 800508c:	d005      	beq.n	800509a <CO_RPDO_init+0x3e>
        RPDOCommPar==NULL || RPDOMapPar==NULL || CANdevRx==NULL){
 800508e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <CO_RPDO_init+0x3e>
 8005094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005096:	2b00      	cmp	r3, #0
 8005098:	d102      	bne.n	80050a0 <CO_RPDO_init+0x44>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800509a:	f04f 33ff 	mov.w	r3, #4294967295
 800509e:	e04c      	b.n	800513a <CO_RPDO_init+0xde>
    }

    /* Configure object variables */
    RPDO->em = em;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	601a      	str	r2, [r3, #0]
    RPDO->SDO = SDO;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	605a      	str	r2, [r3, #4]
    RPDO->SYNC = SYNC;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	609a      	str	r2, [r3, #8]
    RPDO->RPDOCommPar = RPDOCommPar;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050b6:	60da      	str	r2, [r3, #12]
    RPDO->RPDOMapPar = RPDOMapPar;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050bc:	611a      	str	r2, [r3, #16]
    RPDO->operatingState = operatingState;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	615a      	str	r2, [r3, #20]
    RPDO->nodeId = nodeId;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	7f3a      	ldrb	r2, [r7, #28]
 80050c8:	761a      	strb	r2, [r3, #24]
    RPDO->defaultCOB_ID = defaultCOB_ID;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8c3a      	ldrh	r2, [r7, #32]
 80050ce:	835a      	strh	r2, [r3, #26]
    RPDO->restrictionFlags = restrictionFlags;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80050d6:	771a      	strb	r2, [r3, #28]

    /* Configure Object dictionary entry at index 0x1400+ and 0x1600+ */
    CO_OD_configure(SDO, idx_RPDOCommPar, CO_ODF_RPDOcom, (void*)RPDO, 0, 0);
 80050d8:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80050da:	2300      	movs	r3, #0
 80050dc:	9301      	str	r3, [sp, #4]
 80050de:	2300      	movs	r3, #0
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4a17      	ldr	r2, [pc, #92]	; (8005144 <CO_RPDO_init+0xe8>)
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fd2a 	bl	8005b40 <CO_OD_configure>
    CO_OD_configure(SDO, idx_RPDOMapPar, CO_ODF_RPDOmap, (void*)RPDO, 0, 0);
 80050ec:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80050ee:	2300      	movs	r3, #0
 80050f0:	9301      	str	r3, [sp, #4]
 80050f2:	2300      	movs	r3, #0
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4a13      	ldr	r2, [pc, #76]	; (8005148 <CO_RPDO_init+0xec>)
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fd20 	bl	8005b40 <CO_OD_configure>

    /* configure communication and mapping */
    RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
 8005100:	2100      	movs	r1, #0
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	460a      	mov	r2, r1
 8005106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	460a      	mov	r2, r1
 800510e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    RPDO->CANdevRx = CANdevRx;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005116:	655a      	str	r2, [r3, #84]	; 0x54
    RPDO->CANdevRxIdx = CANdevRxIdx;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800511c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    CO_RPDOconfigMap(RPDO, RPDOMapPar->numberOfMappedObjects);
 8005120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	4619      	mov	r1, r3
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f7ff fc32 	bl	8004990 <CO_RPDOconfigMap>
    CO_RPDOconfigCom(RPDO, RPDOCommPar->COB_IDUsedByRPDO);
 800512c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	4619      	mov	r1, r3
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f7ff fa92 	bl	800465c <CO_RPDOconfigCom>

    return CO_ERROR_NO;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	08004b29 	.word	0x08004b29
 8005148:	08004e7d 	.word	0x08004e7d

0800514c <CO_TPDO_init>:
        const CO_TPDOMapPar_t  *TPDOMapPar,
        uint16_t                idx_TPDOCommPar,
        uint16_t                idx_TPDOMapPar,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af02      	add	r7, sp, #8
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if(TPDO==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d011      	beq.n	8005184 <CO_TPDO_init+0x38>
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00e      	beq.n	8005184 <CO_TPDO_init+0x38>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00b      	beq.n	8005184 <CO_TPDO_init+0x38>
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d008      	beq.n	8005184 <CO_TPDO_init+0x38>
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	2b00      	cmp	r3, #0
 8005176:	d005      	beq.n	8005184 <CO_TPDO_init+0x38>
        TPDOCommPar==NULL || TPDOMapPar==NULL || CANdevTx==NULL){
 8005178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517a:	2b00      	cmp	r3, #0
 800517c:	d002      	beq.n	8005184 <CO_TPDO_init+0x38>
 800517e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005180:	2b00      	cmp	r3, #0
 8005182:	d102      	bne.n	800518a <CO_TPDO_init+0x3e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005184:	f04f 33ff 	mov.w	r3, #4294967295
 8005188:	e06d      	b.n	8005266 <CO_TPDO_init+0x11a>
    }

    /* Configure object variables */
    TPDO->em = em;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	601a      	str	r2, [r3, #0]
    TPDO->SDO = SDO;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	605a      	str	r2, [r3, #4]
    TPDO->TPDOCommPar = TPDOCommPar;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519a:	609a      	str	r2, [r3, #8]
    TPDO->TPDOMapPar = TPDOMapPar;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051a0:	60da      	str	r2, [r3, #12]
    TPDO->operatingState = operatingState;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	611a      	str	r2, [r3, #16]
    TPDO->nodeId = nodeId;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	7e3a      	ldrb	r2, [r7, #24]
 80051ac:	751a      	strb	r2, [r3, #20]
    TPDO->defaultCOB_ID = defaultCOB_ID;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8bba      	ldrh	r2, [r7, #28]
 80051b2:	82da      	strh	r2, [r3, #22]
    TPDO->restrictionFlags = restrictionFlags;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80051ba:	761a      	strb	r2, [r3, #24]

    /* Configure Object dictionary entry at index 0x1800+ and 0x1A00+ */
    CO_OD_configure(SDO, idx_TPDOCommPar, CO_ODF_TPDOcom, (void*)TPDO, 0, 0);
 80051bc:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80051be:	2300      	movs	r3, #0
 80051c0:	9301      	str	r3, [sp, #4]
 80051c2:	2300      	movs	r3, #0
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	4a29      	ldr	r2, [pc, #164]	; (8005270 <CO_TPDO_init+0x124>)
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fcb8 	bl	8005b40 <CO_OD_configure>
    CO_OD_configure(SDO, idx_TPDOMapPar, CO_ODF_TPDOmap, (void*)TPDO, 0, 0);
 80051d0:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80051d2:	2300      	movs	r3, #0
 80051d4:	9301      	str	r3, [sp, #4]
 80051d6:	2300      	movs	r3, #0
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4a25      	ldr	r2, [pc, #148]	; (8005274 <CO_TPDO_init+0x128>)
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 fcae 	bl	8005b40 <CO_OD_configure>

    /* configure communication and mapping */
    TPDO->CANdevTx = CANdevTx;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051e8:	649a      	str	r2, [r3, #72]	; 0x48
    TPDO->CANdevTxIdx = CANdevTxIdx;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80051ee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    TPDO->syncCounter = 255;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	22ff      	movs	r2, #255	; 0xff
 80051f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    TPDO->inhibitTimer = 0;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	641a      	str	r2, [r3, #64]	; 0x40
    TPDO->eventTimer = ((uint32_t) TPDOCommPar->eventTimer) * 1000;
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	89db      	ldrh	r3, [r3, #14]
 8005204:	461a      	mov	r2, r3
 8005206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800520a:	fb03 f202 	mul.w	r2, r3, r2
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	645a      	str	r2, [r3, #68]	; 0x44
    if(TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	7a1b      	ldrb	r3, [r3, #8]
 8005216:	2bfd      	cmp	r3, #253	; 0xfd
 8005218:	d902      	bls.n	8005220 <CO_TPDO_init+0xd4>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2201      	movs	r2, #1
 800521e:	76da      	strb	r2, [r3, #27]

    CO_TPDOconfigMap(TPDO, TPDOMapPar->numberOfMappedObjects);
 8005220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	4619      	mov	r1, r3
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f7ff fc16 	bl	8004a58 <CO_TPDOconfigMap>
    CO_TPDOconfigCom(TPDO, TPDOCommPar->COB_IDUsedByTPDO, ((TPDOCommPar->transmissionType<=240) ? 1 : 0));
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	6859      	ldr	r1, [r3, #4]
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	7a1b      	ldrb	r3, [r3, #8]
 8005234:	2bf0      	cmp	r3, #240	; 0xf0
 8005236:	bf94      	ite	ls
 8005238:	2301      	movls	r3, #1
 800523a:	2300      	movhi	r3, #0
 800523c:	b2db      	uxtb	r3, r3
 800523e:	461a      	mov	r2, r3
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f7ff fa71 	bl	8004728 <CO_TPDOconfigCom>

    if((TPDOCommPar->transmissionType>240 &&
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	7a1b      	ldrb	r3, [r3, #8]
 800524a:	2bf0      	cmp	r3, #240	; 0xf0
 800524c:	d903      	bls.n	8005256 <CO_TPDO_init+0x10a>
         TPDOCommPar->transmissionType<254) ||
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	7a1b      	ldrb	r3, [r3, #8]
    if((TPDOCommPar->transmissionType>240 &&
 8005252:	2bfd      	cmp	r3, #253	; 0xfd
 8005254:	d903      	bls.n	800525e <CO_TPDO_init+0x112>
         TPDOCommPar->SYNCStartValue>240){
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	7c1b      	ldrb	r3, [r3, #16]
         TPDOCommPar->transmissionType<254) ||
 800525a:	2bf0      	cmp	r3, #240	; 0xf0
 800525c:	d902      	bls.n	8005264 <CO_TPDO_init+0x118>
            TPDO->valid = false;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	765a      	strb	r2, [r3, #25]
    }

    return CO_ERROR_NO;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	08004c99 	.word	0x08004c99
 8005274:	08004f6d 	.word	0x08004f6d

08005278 <CO_TPDOisCOS>:


/******************************************************************************/
uint8_t CO_TPDOisCOS(CO_TPDO_t *TPDO){
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]

    /* Prepare TPDO data automatically from Object Dictionary variables */
    uint8_t* pPDOdataByte;
    uint8_t** ppODdataByte;

    pPDOdataByte = &TPDO->CANtxBuff->data[TPDO->dataLength];
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	7e92      	ldrb	r2, [r2, #26]
 8005288:	4413      	add	r3, r2
 800528a:	3305      	adds	r3, #5
 800528c:	60fb      	str	r3, [r7, #12]
    ppODdataByte = &TPDO->mapPointer[TPDO->dataLength];
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	7e9b      	ldrb	r3, [r3, #26]
 8005292:	3306      	adds	r3, #6
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	4413      	add	r3, r2
 800529a:	3304      	adds	r3, #4
 800529c:	60bb      	str	r3, [r7, #8]

    switch(TPDO->dataLength){
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	7e9b      	ldrb	r3, [r3, #26]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	2b07      	cmp	r3, #7
 80052a6:	f200 80c2 	bhi.w	800542e <CO_TPDOisCOS+0x1b6>
 80052aa:	a201      	add	r2, pc, #4	; (adr r2, 80052b0 <CO_TPDOisCOS+0x38>)
 80052ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b0:	08005403 	.word	0x08005403
 80052b4:	080053d7 	.word	0x080053d7
 80052b8:	080053ab 	.word	0x080053ab
 80052bc:	0800537f 	.word	0x0800537f
 80052c0:	08005353 	.word	0x08005353
 80052c4:	08005327 	.word	0x08005327
 80052c8:	080052fb 	.word	0x080052fb
 80052cc:	080052d1 	.word	0x080052d1
        case 8: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x80)) return 1;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	781a      	ldrb	r2, [r3, #0]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	3b04      	subs	r3, #4
 80052de:	60bb      	str	r3, [r7, #8]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d007      	beq.n	80052fa <CO_TPDOisCOS+0x82>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f0:	b25b      	sxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	da01      	bge.n	80052fa <CO_TPDOisCOS+0x82>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e09a      	b.n	8005430 <CO_TPDOisCOS+0x1b8>
        case 7: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x40)) return 1;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3b01      	subs	r3, #1
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	781a      	ldrb	r2, [r3, #0]
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	3b04      	subs	r3, #4
 8005308:	60bb      	str	r3, [r7, #8]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d008      	beq.n	8005326 <CO_TPDOisCOS+0xae>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800531a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <CO_TPDOisCOS+0xae>
 8005322:	2301      	movs	r3, #1
 8005324:	e084      	b.n	8005430 <CO_TPDOisCOS+0x1b8>
        case 6: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x20)) return 1;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	3b01      	subs	r3, #1
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	781a      	ldrb	r2, [r3, #0]
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	3b04      	subs	r3, #4
 8005334:	60bb      	str	r3, [r7, #8]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d008      	beq.n	8005352 <CO_TPDOisCOS+0xda>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005346:	f003 0320 	and.w	r3, r3, #32
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <CO_TPDOisCOS+0xda>
 800534e:	2301      	movs	r3, #1
 8005350:	e06e      	b.n	8005430 <CO_TPDOisCOS+0x1b8>
        case 5: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x10)) return 1;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	3b01      	subs	r3, #1
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	781a      	ldrb	r2, [r3, #0]
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	3b04      	subs	r3, #4
 8005360:	60bb      	str	r3, [r7, #8]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	429a      	cmp	r2, r3
 800536a:	d008      	beq.n	800537e <CO_TPDOisCOS+0x106>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005372:	f003 0310 	and.w	r3, r3, #16
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <CO_TPDOisCOS+0x106>
 800537a:	2301      	movs	r3, #1
 800537c:	e058      	b.n	8005430 <CO_TPDOisCOS+0x1b8>
        case 4: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x08)) return 1;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	3b01      	subs	r3, #1
 8005382:	60fb      	str	r3, [r7, #12]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	781a      	ldrb	r2, [r3, #0]
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	3b04      	subs	r3, #4
 800538c:	60bb      	str	r3, [r7, #8]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	429a      	cmp	r2, r3
 8005396:	d008      	beq.n	80053aa <CO_TPDOisCOS+0x132>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <CO_TPDOisCOS+0x132>
 80053a6:	2301      	movs	r3, #1
 80053a8:	e042      	b.n	8005430 <CO_TPDOisCOS+0x1b8>
        case 3: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x04)) return 1;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	3b01      	subs	r3, #1
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	781a      	ldrb	r2, [r3, #0]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	3b04      	subs	r3, #4
 80053b8:	60bb      	str	r3, [r7, #8]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d008      	beq.n	80053d6 <CO_TPDOisCOS+0x15e>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ca:	f003 0304 	and.w	r3, r3, #4
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <CO_TPDOisCOS+0x15e>
 80053d2:	2301      	movs	r3, #1
 80053d4:	e02c      	b.n	8005430 <CO_TPDOisCOS+0x1b8>
        case 2: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x02)) return 1;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	3b01      	subs	r3, #1
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	781a      	ldrb	r2, [r3, #0]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	3b04      	subs	r3, #4
 80053e4:	60bb      	str	r3, [r7, #8]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d008      	beq.n	8005402 <CO_TPDOisCOS+0x18a>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <CO_TPDOisCOS+0x18a>
 80053fe:	2301      	movs	r3, #1
 8005400:	e016      	b.n	8005430 <CO_TPDOisCOS+0x1b8>
        case 1: if(*(--pPDOdataByte) != **(--ppODdataByte) && (TPDO->sendIfCOSFlags&0x01)) return 1;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	3b01      	subs	r3, #1
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	781a      	ldrb	r2, [r3, #0]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	3b04      	subs	r3, #4
 8005410:	60bb      	str	r3, [r7, #8]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	429a      	cmp	r2, r3
 800541a:	d008      	beq.n	800542e <CO_TPDOisCOS+0x1b6>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <CO_TPDOisCOS+0x1b6>
 800542a:	2301      	movs	r3, #1
 800542c:	e000      	b.n	8005430 <CO_TPDOisCOS+0x1b8>
    }

    return 0;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <CO_TPDOsend>:

//#define TPDO_CALLS_EXTENSION
/******************************************************************************/
int16_t CO_TPDOsend(CO_TPDO_t *TPDO){
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
            ODF_arg.dataLength = CO_OD_getLength(pSDO, entryNo, subIndex);
            ext->pODFunc(&ODF_arg);
        }
    }
#endif
    i = TPDO->dataLength;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	7e9b      	ldrb	r3, [r3, #26]
 8005448:	82fb      	strh	r3, [r7, #22]
    pPDOdataByte = &TPDO->CANtxBuff->data[0];
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800544e:	3305      	adds	r3, #5
 8005450:	613b      	str	r3, [r7, #16]
    ppODdataByte = &TPDO->mapPointer[0];
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	331c      	adds	r3, #28
 8005456:	60fb      	str	r3, [r7, #12]

    /* Copy data from Object dictionary. */
    for(; i>0; i--) {
 8005458:	e00e      	b.n	8005478 <CO_TPDOsend+0x3c>
        *(pPDOdataByte++) = **(ppODdataByte++);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	1d1a      	adds	r2, r3, #4
 800545e:	60fa      	str	r2, [r7, #12]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1c59      	adds	r1, r3, #1
 8005466:	6139      	str	r1, [r7, #16]
 8005468:	7812      	ldrb	r2, [r2, #0]
 800546a:	701a      	strb	r2, [r3, #0]
    for(; i>0; i--) {
 800546c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005470:	b29b      	uxth	r3, r3
 8005472:	3b01      	subs	r3, #1
 8005474:	b29b      	uxth	r3, r3
 8005476:	82fb      	strh	r3, [r7, #22]
 8005478:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800547c:	2b00      	cmp	r3, #0
 800547e:	dcec      	bgt.n	800545a <CO_TPDOsend+0x1e>
    }

    TPDO->sendRequest = 0;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	76da      	strb	r2, [r3, #27]

    return CO_CANsend(TPDO->CANdevTx, TPDO->CANtxBuff);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800548e:	4619      	mov	r1, r3
 8005490:	4610      	mov	r0, r2
 8005492:	f002 fc89 	bl	8007da8 <CO_CANsend>
 8005496:	4603      	mov	r3, r0
 8005498:	b21b      	sxth	r3, r3
}
 800549a:	4618      	mov	r0, r3
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <CO_RPDO_process>:

//#define RPDO_CALLS_EXTENSION
/******************************************************************************/
void CO_RPDO_process(CO_RPDO_t *RPDO, bool_t syncWas){
 80054a2:	b480      	push	{r7}
 80054a4:	b087      	sub	sp, #28
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	460b      	mov	r3, r1
 80054ac:	70fb      	strb	r3, [r7, #3]

    if(!RPDO->valid || !(*RPDO->operatingState == CO_NMT_OPERATIONAL))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	7f5b      	ldrb	r3, [r3, #29]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d004      	beq.n	80054c0 <CO_RPDO_process+0x1e>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b05      	cmp	r3, #5
 80054be:	d009      	beq.n	80054d4 <CO_RPDO_process+0x32>
    {
        RPDO->CANrxNew[0] = RPDO->CANrxNew[1] = false;
 80054c0:	2100      	movs	r1, #0
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	460a      	mov	r2, r1
 80054c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	460a      	mov	r2, r1
 80054ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                }
            }
#endif
        }
    }
}
 80054d2:	e043      	b.n	800555c <CO_RPDO_process+0xba>
    else if(!RPDO->synchronous || syncWas)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	7f9b      	ldrb	r3, [r3, #30]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d002      	beq.n	80054e2 <CO_RPDO_process+0x40>
 80054dc:	78fb      	ldrb	r3, [r7, #3]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d03c      	beq.n	800555c <CO_RPDO_process+0xba>
        uint8_t bufNo = 0;
 80054e2:	2300      	movs	r3, #0
 80054e4:	75fb      	strb	r3, [r7, #23]
        if(RPDO->synchronous && !RPDO->SYNC->CANrxToggle) {
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	7f9b      	ldrb	r3, [r3, #30]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d02e      	beq.n	800554c <CO_RPDO_process+0xaa>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	7ddb      	ldrb	r3, [r3, #23]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d129      	bne.n	800554c <CO_RPDO_process+0xaa>
            bufNo = 1;
 80054f8:	2301      	movs	r3, #1
 80054fa:	75fb      	strb	r3, [r7, #23]
        while(RPDO->CANrxNew[bufNo]){
 80054fc:	e026      	b.n	800554c <CO_RPDO_process+0xaa>
            i = RPDO->dataLength;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	7fdb      	ldrb	r3, [r3, #31]
 8005502:	82bb      	strh	r3, [r7, #20]
            pPDOdataByte = &RPDO->CANrxData[bufNo][0];
 8005504:	7dfb      	ldrb	r3, [r7, #23]
 8005506:	3308      	adds	r3, #8
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	4413      	add	r3, r2
 800550e:	3302      	adds	r3, #2
 8005510:	613b      	str	r3, [r7, #16]
            ppODdataByte = &RPDO->mapPointer[0];
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	3320      	adds	r3, #32
 8005516:	60fb      	str	r3, [r7, #12]
            RPDO->CANrxNew[bufNo] = false;
 8005518:	7dfb      	ldrb	r3, [r7, #23]
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	4413      	add	r3, r2
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            for(; i>0; i--) {
 8005524:	e00e      	b.n	8005544 <CO_RPDO_process+0xa2>
                **(ppODdataByte++) = *(pPDOdataByte++);
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	613a      	str	r2, [r7, #16]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	1d11      	adds	r1, r2, #4
 8005530:	60f9      	str	r1, [r7, #12]
 8005532:	6812      	ldr	r2, [r2, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	7013      	strb	r3, [r2, #0]
            for(; i>0; i--) {
 8005538:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800553c:	b29b      	uxth	r3, r3
 800553e:	3b01      	subs	r3, #1
 8005540:	b29b      	uxth	r3, r3
 8005542:	82bb      	strh	r3, [r7, #20]
 8005544:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005548:	2b00      	cmp	r3, #0
 800554a:	dcec      	bgt.n	8005526 <CO_RPDO_process+0x84>
        while(RPDO->CANrxNew[bufNo]){
 800554c:	7dfb      	ldrb	r3, [r7, #23]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	4413      	add	r3, r2
 8005552:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1d0      	bne.n	80054fe <CO_RPDO_process+0x5c>
}
 800555c:	bf00      	nop
 800555e:	371c      	adds	r7, #28
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <CO_TPDO_process>:
void CO_TPDO_process(
        CO_TPDO_t              *TPDO,
        CO_SYNC_t              *SYNC,
        bool_t                  syncWas,
        uint32_t                timeDifference_us)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	603b      	str	r3, [r7, #0]
 8005574:	4613      	mov	r3, r2
 8005576:	71fb      	strb	r3, [r7, #7]
    if(TPDO->valid && *TPDO->operatingState == CO_NMT_OPERATIONAL){
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	7e5b      	ldrb	r3, [r3, #25]
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 8091 	beq.w	80056a4 <CO_TPDO_process+0x13c>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	2b05      	cmp	r3, #5
 800558a:	f040 808b 	bne.w	80056a4 <CO_TPDO_process+0x13c>

        /* Send PDO by application request or by Event timer */
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	7a1b      	ldrb	r3, [r3, #8]
 8005594:	2bfc      	cmp	r3, #252	; 0xfc
 8005596:	d92c      	bls.n	80055f2 <CO_TPDO_process+0x8a>
            if(TPDO->inhibitTimer == 0 && (TPDO->sendRequest || (TPDO->TPDOCommPar->eventTimer && TPDO->eventTimer == 0))){
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559c:	2b00      	cmp	r3, #0
 800559e:	f040 808e 	bne.w	80056be <CO_TPDO_process+0x156>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	7edb      	ldrb	r3, [r3, #27]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d109      	bne.n	80055be <CO_TPDO_process+0x56>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	89db      	ldrh	r3, [r3, #14]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 8084 	beq.w	80056be <CO_TPDO_process+0x156>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d17f      	bne.n	80056be <CO_TPDO_process+0x156>
                if(CO_TPDOsend(TPDO) == CO_ERROR_NO){
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f7ff ff3c 	bl	800543c <CO_TPDOsend>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d179      	bne.n	80056be <CO_TPDO_process+0x156>
                    /* successfully sent */
                    TPDO->inhibitTimer = ((uint32_t) TPDO->TPDOCommPar->inhibitTime) * 100;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	895b      	ldrh	r3, [r3, #10]
 80055d0:	461a      	mov	r2, r3
 80055d2:	2364      	movs	r3, #100	; 0x64
 80055d4:	fb03 f202 	mul.w	r2, r3, r2
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	641a      	str	r2, [r3, #64]	; 0x40
                    TPDO->eventTimer = ((uint32_t) TPDO->TPDOCommPar->eventTimer) * 1000;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	89db      	ldrh	r3, [r3, #14]
 80055e2:	461a      	mov	r2, r3
 80055e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055e8:	fb03 f202 	mul.w	r2, r3, r2
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	645a      	str	r2, [r3, #68]	; 0x44
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 80055f0:	e065      	b.n	80056be <CO_TPDO_process+0x156>
                }
            }
        }

        /* Synchronous PDOs */
        else if(SYNC && syncWas){
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d062      	beq.n	80056be <CO_TPDO_process+0x156>
 80055f8:	79fb      	ldrb	r3, [r7, #7]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d05f      	beq.n	80056be <CO_TPDO_process+0x156>
            /* send synchronous acyclic PDO */
            if(TPDO->TPDOCommPar->transmissionType == 0){
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	7a1b      	ldrb	r3, [r3, #8]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d107      	bne.n	8005618 <CO_TPDO_process+0xb0>
                if(TPDO->sendRequest) CO_TPDOsend(TPDO);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	7edb      	ldrb	r3, [r3, #27]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d056      	beq.n	80056be <CO_TPDO_process+0x156>
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f7ff ff13 	bl	800543c <CO_TPDOsend>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 8005616:	e052      	b.n	80056be <CO_TPDO_process+0x156>
            }
            /* send synchronous cyclic PDO */
            else{
                /* is the start of synchronous TPDO transmission */
                if(TPDO->syncCounter == 255){
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800561e:	2bff      	cmp	r3, #255	; 0xff
 8005620:	d113      	bne.n	800564a <CO_TPDO_process+0xe2>
                    if(SYNC->counterOverflowValue && TPDO->TPDOCommPar->SYNCStartValue)
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	7d1b      	ldrb	r3, [r3, #20]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d009      	beq.n	800563e <CO_TPDO_process+0xd6>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	7c1b      	ldrb	r3, [r3, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d004      	beq.n	800563e <CO_TPDO_process+0xd6>
                        TPDO->syncCounter = 254;   /* SYNCStartValue is in use */
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	22fe      	movs	r2, #254	; 0xfe
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800563c:	e005      	b.n	800564a <CO_TPDO_process+0xe2>
                    else
                        TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	7a1a      	ldrb	r2, [r3, #8]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                }
                /* if the SYNCStartValue is in use, start first TPDO after SYNC with matched SYNCStartValue. */
                if(TPDO->syncCounter == 254){
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005650:	2bfe      	cmp	r3, #254	; 0xfe
 8005652:	d110      	bne.n	8005676 <CO_TPDO_process+0x10e>
                    if(SYNC->counter == TPDO->TPDOCommPar->SYNCStartValue){
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	7e1a      	ldrb	r2, [r3, #24]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	7c1b      	ldrb	r3, [r3, #16]
 800565e:	429a      	cmp	r2, r3
 8005660:	d12d      	bne.n	80056be <CO_TPDO_process+0x156>
                        TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	7a1a      	ldrb	r2, [r3, #8]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                        CO_TPDOsend(TPDO);
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f7ff fee4 	bl	800543c <CO_TPDOsend>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 8005674:	e023      	b.n	80056be <CO_TPDO_process+0x156>
                    }
                }
                /* Send PDO after every N-th Sync */
                else if(--TPDO->syncCounter == 0){
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800567c:	3b01      	subs	r3, #1
 800567e:	b2da      	uxtb	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800568c:	2b00      	cmp	r3, #0
 800568e:	d116      	bne.n	80056be <CO_TPDO_process+0x156>
                    TPDO->syncCounter = TPDO->TPDOCommPar->transmissionType;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	7a1a      	ldrb	r2, [r3, #8]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                    CO_TPDOsend(TPDO);
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f7ff fecd 	bl	800543c <CO_TPDOsend>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 80056a2:	e00c      	b.n	80056be <CO_TPDO_process+0x156>
        }

    }
    else{
        /* Not operational or valid. Force TPDO first send after operational or valid. */
        if(TPDO->TPDOCommPar->transmissionType>=254) TPDO->sendRequest = 1;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	7a1b      	ldrb	r3, [r3, #8]
 80056aa:	2bfd      	cmp	r3, #253	; 0xfd
 80056ac:	d903      	bls.n	80056b6 <CO_TPDO_process+0x14e>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2201      	movs	r2, #1
 80056b2:	76da      	strb	r2, [r3, #27]
 80056b4:	e004      	b.n	80056c0 <CO_TPDO_process+0x158>
        else                                         TPDO->sendRequest = 0;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	76da      	strb	r2, [r3, #27]
 80056bc:	e000      	b.n	80056c0 <CO_TPDO_process+0x158>
        if(TPDO->TPDOCommPar->transmissionType >= 253){
 80056be:	bf00      	nop
    }

    /* update timers */
    TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us) : 0;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d204      	bcs.n	80056d4 <CO_TPDO_process+0x16c>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	e000      	b.n	80056d6 <CO_TPDO_process+0x16e>
 80056d4:	2300      	movs	r3, #0
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	6413      	str	r3, [r2, #64]	; 0x40
    TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us) ? (TPDO->eventTimer - timeDifference_us) : 0;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d204      	bcs.n	80056ee <CO_TPDO_process+0x186>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	e000      	b.n	80056f0 <CO_TPDO_process+0x188>
 80056ee:	2300      	movs	r3, #0
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	6453      	str	r3, [r2, #68]	; 0x44
}
 80056f4:	bf00      	nop
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <CO_memcpy>:
    #error CO_SDO_BUFFER_SIZE must be greater than 7
#endif


/* Helper functions. **********************************************************/
void CO_memcpy(uint8_t dest[], const uint8_t src[], const uint16_t size){
 80056fc:	b480      	push	{r7}
 80056fe:	b087      	sub	sp, #28
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	4613      	mov	r3, r2
 8005708:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    for(i = 0; i < size; i++){
 800570a:	2300      	movs	r3, #0
 800570c:	82fb      	strh	r3, [r7, #22]
 800570e:	e00a      	b.n	8005726 <CO_memcpy+0x2a>
        dest[i] = src[i];
 8005710:	8afb      	ldrh	r3, [r7, #22]
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	441a      	add	r2, r3
 8005716:	8afb      	ldrh	r3, [r7, #22]
 8005718:	68f9      	ldr	r1, [r7, #12]
 800571a:	440b      	add	r3, r1
 800571c:	7812      	ldrb	r2, [r2, #0]
 800571e:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < size; i++){
 8005720:	8afb      	ldrh	r3, [r7, #22]
 8005722:	3301      	adds	r3, #1
 8005724:	82fb      	strh	r3, [r7, #22]
 8005726:	8afa      	ldrh	r2, [r7, #22]
 8005728:	88fb      	ldrh	r3, [r7, #6]
 800572a:	429a      	cmp	r2, r3
 800572c:	d3f0      	bcc.n	8005710 <CO_memcpy+0x14>
    }
}
 800572e:	bf00      	nop
 8005730:	bf00      	nop
 8005732:	371c      	adds	r7, #28
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <CO_getUint32>:
    b.u8[0] = data[0];
    b.u8[1] = data[1];
    return b.u16[0];
}

uint32_t CO_getUint32(const uint8_t data[]){
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
    CO_bytes_t b;
    b.u8[0] = data[0];
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	723b      	strb	r3, [r7, #8]
    b.u8[1] = data[1];
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	785b      	ldrb	r3, [r3, #1]
 800574e:	727b      	strb	r3, [r7, #9]
    b.u8[2] = data[2];
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	789b      	ldrb	r3, [r3, #2]
 8005754:	72bb      	strb	r3, [r7, #10]
    b.u8[3] = data[3];
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	78db      	ldrb	r3, [r3, #3]
 800575a:	72fb      	strb	r3, [r7, #11]
    return b.u32[0];
 800575c:	68bb      	ldr	r3, [r7, #8]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <CO_setUint32>:
    b.u16[0] = value;
    data[0] = b.u8[0];
    data[1] = b.u8[1];
}

void CO_setUint32(uint8_t data[], const uint32_t value){
 800576a:	b480      	push	{r7}
 800576c:	b085      	sub	sp, #20
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
 8005772:	6039      	str	r1, [r7, #0]
    CO_bytes_t b;
    b.u32[0] = value;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	60bb      	str	r3, [r7, #8]
    data[0] = b.u8[0];
 8005778:	7a3a      	ldrb	r2, [r7, #8]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	701a      	strb	r2, [r3, #0]
    data[1] = b.u8[1];
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	3301      	adds	r3, #1
 8005782:	7a7a      	ldrb	r2, [r7, #9]
 8005784:	701a      	strb	r2, [r3, #0]
    data[2] = b.u8[2];
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	3302      	adds	r3, #2
 800578a:	7aba      	ldrb	r2, [r7, #10]
 800578c:	701a      	strb	r2, [r3, #0]
    data[3] = b.u8[3];
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3303      	adds	r3, #3
 8005792:	7afa      	ldrb	r2, [r7, #11]
 8005794:	701a      	strb	r2, [r3, #0]
}
 8005796:	bf00      	nop
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <CO_memcpySwap2>:

#ifdef CO_LITTLE_ENDIAN
void CO_memcpySwap2(void* dest, const void* src){
 80057a2:	b480      	push	{r7}
 80057a4:	b085      	sub	sp, #20
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	6039      	str	r1, [r7, #0]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	60fb      	str	r3, [r7, #12]
    csrc = (char *) src;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	60bb      	str	r3, [r7, #8]
    cdest[0] = csrc[0];
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	781a      	ldrb	r2, [r3, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	3301      	adds	r3, #1
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	7852      	ldrb	r2, [r2, #1]
 80057c4:	701a      	strb	r2, [r3, #0]
}
 80057c6:	bf00      	nop
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <CO_memcpySwap4>:
void CO_memcpySwap4(void* dest, const void* src){
 80057d2:	b480      	push	{r7}
 80057d4:	b085      	sub	sp, #20
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	6039      	str	r1, [r7, #0]
    char *cdest;
    char *csrc;
    cdest = (char *) dest;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	60fb      	str	r3, [r7, #12]
    csrc = (char *) src;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	60bb      	str	r3, [r7, #8]
    cdest[0] = csrc[0];
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	781a      	ldrb	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	701a      	strb	r2, [r3, #0]
    cdest[1] = csrc[1];
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	3301      	adds	r3, #1
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	7852      	ldrb	r2, [r2, #1]
 80057f4:	701a      	strb	r2, [r3, #0]
    cdest[2] = csrc[2];
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	3302      	adds	r3, #2
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	7892      	ldrb	r2, [r2, #2]
 80057fe:	701a      	strb	r2, [r3, #0]
    cdest[3] = csrc[3];
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	3303      	adds	r3, #3
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	78d2      	ldrb	r2, [r2, #3]
 8005808:	701a      	strb	r2, [r3, #0]
}
 800580a:	bf00      	nop
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <CO_SDO_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SDO_receive(void *object, const CO_CANrxMsg_t *msg);
static void CO_SDO_receive(void *object, const CO_CANrxMsg_t *msg){
 8005816:	b590      	push	{r4, r7, lr}
 8005818:	b087      	sub	sp, #28
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	6039      	str	r1, [r7, #0]
    CO_SDO_t *SDO;

    SDO = (CO_SDO_t*)object;   /* this is the correct pointer type of the first argument */
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	613b      	str	r3, [r7, #16]
     * starting another SDO request, this request is dropped. Especially if
     * processing function has slow response.
     * See: https://github.com/CANopenNode/CANopenNode/issues/39 */

    /* verify message length and message overflow (previous message was not processed yet) */
    if((msg->DLC == 8U) && (!SDO->CANrxNew)){
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	f893 3020 	ldrb.w	r3, [r3, #32]
 800582a:	2b08      	cmp	r3, #8
 800582c:	f040 80af 	bne.w	800598e <CO_SDO_receive+0x178>
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8005836:	2b00      	cmp	r3, #0
 8005838:	f040 80a9 	bne.w	800598e <CO_SDO_receive+0x178>
        if(SDO->state != CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) {
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005842:	2b15      	cmp	r3, #21
 8005844:	d02c      	beq.n	80058a0 <CO_SDO_receive+0x8a>
            /* copy data and set 'new message' flag */
            SDO->CANrxData[0] = msg->data[0];
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	701a      	strb	r2, [r3, #0]
            SDO->CANrxData[1] = msg->data[1];
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	705a      	strb	r2, [r3, #1]
            SDO->CANrxData[2] = msg->data[2];
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	709a      	strb	r2, [r3, #2]
            SDO->CANrxData[3] = msg->data[3];
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	70da      	strb	r2, [r3, #3]
            SDO->CANrxData[4] = msg->data[4];
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	711a      	strb	r2, [r3, #4]
            SDO->CANrxData[5] = msg->data[5];
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	715a      	strb	r2, [r3, #5]
            SDO->CANrxData[6] = msg->data[6];
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	719a      	strb	r2, [r3, #6]
            SDO->CANrxData[7] = msg->data[7];
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	71da      	strb	r2, [r3, #7]

            SDO->CANrxNew = true;
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800589e:	e06a      	b.n	8005976 <CO_SDO_receive+0x160>
        }
        else {
            /* block download, copy data directly */
            uint8_t seqno;

            SDO->CANrxData[0] = msg->data[0];
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	701a      	strb	r2, [r3, #0]
            seqno = SDO->CANrxData[0] & 0x7fU;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058b2:	73fb      	strb	r3, [r7, #15]
            SDO->timeoutTimer = 0;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

            /* check correct sequence number. */
            if(seqno == (SDO->sequence + 1U)) {
 80058bc:	7bfa      	ldrb	r2, [r7, #15]
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80058c4:	3301      	adds	r3, #1
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d142      	bne.n	8005950 <CO_SDO_receive+0x13a>
                /* sequence is correct */
                uint8_t i;

                SDO->sequence++;
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80058d0:	3301      	adds	r3, #1
 80058d2:	b2da      	uxtb	r2, r3
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

                /* copy data */
                for(i=1; i<8; i++) {
 80058da:	2301      	movs	r3, #1
 80058dc:	75fb      	strb	r3, [r7, #23]
 80058de:	e01e      	b.n	800591e <CO_SDO_receive+0x108>
                    SDO->ODF_arg.data[SDO->bufferOffset++] = msg->data[i]; //SDO->ODF_arg.data is equal as SDO->databuffer
 80058e0:	7dfa      	ldrb	r2, [r7, #23]
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80058ea:	1c58      	adds	r0, r3, #1
 80058ec:	b284      	uxth	r4, r0
 80058ee:	6938      	ldr	r0, [r7, #16]
 80058f0:	8704      	strh	r4, [r0, #56]	; 0x38
 80058f2:	440b      	add	r3, r1
 80058f4:	6839      	ldr	r1, [r7, #0]
 80058f6:	440a      	add	r2, r1
 80058f8:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80058fc:	701a      	strb	r2, [r3, #0]
                    if(SDO->bufferOffset >= CO_SDO_BUFFER_SIZE) {
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005902:	2b1f      	cmp	r3, #31
 8005904:	d908      	bls.n	8005918 <CO_SDO_receive+0x102>
                        /* buffer full, break reception */
                        SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	2216      	movs	r2, #22
 800590a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                        SDO->CANrxNew = true;
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                        break;
 8005916:	e005      	b.n	8005924 <CO_SDO_receive+0x10e>
                for(i=1; i<8; i++) {
 8005918:	7dfb      	ldrb	r3, [r7, #23]
 800591a:	3301      	adds	r3, #1
 800591c:	75fb      	strb	r3, [r7, #23]
 800591e:	7dfb      	ldrb	r3, [r7, #23]
 8005920:	2b07      	cmp	r3, #7
 8005922:	d9dd      	bls.n	80058e0 <CO_SDO_receive+0xca>
                    }
                }

                /* break reception if last segment or block sequence is too large */
                if(((SDO->CANrxData[0] & 0x80U) == 0x80U) || (SDO->sequence >= SDO->blksize)) {
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	b25b      	sxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	db07      	blt.n	800593e <CO_SDO_receive+0x128>
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800593a:	429a      	cmp	r2, r3
 800593c:	d31b      	bcc.n	8005976 <CO_SDO_receive+0x160>
                    SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	2216      	movs	r2, #22
 8005942:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                    SDO->CANrxNew = true;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800594e:	e012      	b.n	8005976 <CO_SDO_receive+0x160>
                }
            }
            else if((seqno == SDO->sequence) || (SDO->sequence == 0U)){
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005956:	7bfa      	ldrb	r2, [r7, #15]
 8005958:	429a      	cmp	r2, r3
 800595a:	d00c      	beq.n	8005976 <CO_SDO_receive+0x160>
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005962:	2b00      	cmp	r3, #0
 8005964:	d007      	beq.n	8005976 <CO_SDO_receive+0x160>
                /* Ignore message, if it is duplicate or if sequence didn't started yet. */
            }
            else {
                /* seqno is totally wrong, break reception. */
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	2216      	movs	r2, #22
 800596a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                SDO->CANrxNew = true;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
            }
        }

        /* Optional signal to RTOS, which can resume task, which handles SDO server. */
        if(SDO->CANrxNew && SDO->pFunctSignal != NULL) {
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800597c:	2b00      	cmp	r3, #0
 800597e:	d006      	beq.n	800598e <CO_SDO_receive+0x178>
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <CO_SDO_receive+0x178>
            SDO->pFunctSignal();
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598c:	4798      	blx	r3
        }
    }
}
 800598e:	bf00      	nop
 8005990:	371c      	adds	r7, #28
 8005992:	46bd      	mov	sp, r7
 8005994:	bd90      	pop	{r4, r7, pc}

08005996 <CO_ODF_1200>:
 * from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1200(CO_ODF_arg_t *ODF_arg);
static CO_SDO_abortCode_t CO_ODF_1200(CO_ODF_arg_t *ODF_arg){
 8005996:	b580      	push	{r7, lr}
 8005998:	b086      	sub	sp, #24
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
    uint8_t *nodeId;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 800599e:	2300      	movs	r3, #0
 80059a0:	617b      	str	r3, [r7, #20]

    nodeId = (uint8_t*) ODF_arg->object;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	613b      	str	r3, [r7, #16]
    value = CO_getUint32(ODF_arg->data);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff fec5 	bl	800573c <CO_getUint32>
 80059b2:	60f8      	str	r0, [r7, #12]

    /* if SDO reading Object dictionary 0x1200, add nodeId to the value */
    if((ODF_arg->reading) && (ODF_arg->subIndex > 0U)){
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	7ddb      	ldrb	r3, [r3, #23]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00e      	beq.n	80059da <CO_ODF_1200+0x44>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	7d9b      	ldrb	r3, [r3, #22]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00a      	beq.n	80059da <CO_ODF_1200+0x44>
        CO_setUint32(ODF_arg->data, value + *nodeId);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	4619      	mov	r1, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	440b      	add	r3, r1
 80059d2:	4619      	mov	r1, r3
 80059d4:	4610      	mov	r0, r2
 80059d6:	f7ff fec8 	bl	800576a <CO_setUint32>
    }

    return ret;
 80059da:	697b      	ldr	r3, [r7, #20]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3718      	adds	r7, #24
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <CO_SDO_init>:
        uint8_t                 nodeId,
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08a      	sub	sp, #40	; 0x28
 80059e8:	af04      	add	r7, sp, #16
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
 80059f0:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if(SDO==NULL || CANdevRx==NULL || CANdevTx==NULL){
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d005      	beq.n	8005a04 <CO_SDO_init+0x20>
 80059f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d002      	beq.n	8005a04 <CO_SDO_init+0x20>
 80059fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d102      	bne.n	8005a0a <CO_SDO_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005a04:	f04f 33ff 	mov.w	r3, #4294967295
 8005a08:	e092      	b.n	8005b30 <CO_SDO_init+0x14c>
    }

    /* configure own object dictionary */
    if(parentSDO == NULL){
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d135      	bne.n	8005a7c <CO_SDO_init+0x98>
        uint16_t i;

        SDO->ownOD = true;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = OD;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a1c:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = ODSize;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005a22:	861a      	strh	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = ODExtensions;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a28:	635a      	str	r2, [r3, #52]	; 0x34

        /* clear pointers in ODExtensions */
        for(i=0U; i<ODSize; i++){
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	82fb      	strh	r3, [r7, #22]
 8005a2e:	e020      	b.n	8005a72 <CO_SDO_init+0x8e>
            SDO->ODExtensions[i].pODFunc = NULL;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a34:	8afa      	ldrh	r2, [r7, #22]
 8005a36:	4613      	mov	r3, r2
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	440b      	add	r3, r1
 8005a40:	2200      	movs	r2, #0
 8005a42:	601a      	str	r2, [r3, #0]
            SDO->ODExtensions[i].object = NULL;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a48:	8afa      	ldrh	r2, [r7, #22]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	440b      	add	r3, r1
 8005a54:	2200      	movs	r2, #0
 8005a56:	605a      	str	r2, [r3, #4]
            SDO->ODExtensions[i].flags = NULL;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a5c:	8afa      	ldrh	r2, [r7, #22]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	4413      	add	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	440b      	add	r3, r1
 8005a68:	2200      	movs	r2, #0
 8005a6a:	609a      	str	r2, [r3, #8]
        for(i=0U; i<ODSize; i++){
 8005a6c:	8afb      	ldrh	r3, [r7, #22]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	82fb      	strh	r3, [r7, #22]
 8005a72:	8afa      	ldrh	r2, [r7, #22]
 8005a74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d3da      	bcc.n	8005a30 <CO_SDO_init+0x4c>
 8005a7a:	e00f      	b.n	8005a9c <CO_SDO_init+0xb8>
        }
    }
    /* copy object dictionary from parent */
    else{
        SDO->ownOD = false;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SDO->OD = parentSDO->OD;
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	62da      	str	r2, [r3, #44]	; 0x2c
        SDO->ODSize = parentSDO->ODSize;
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	861a      	strh	r2, [r3, #48]	; 0x30
        SDO->ODExtensions = parentSDO->ODExtensions;
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Configure object variables */
    SDO->nodeId = nodeId;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005aa2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    SDO->state = CO_SDO_ST_IDLE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    SDO->CANrxNew = false;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    SDO->pFunctSignal = NULL;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	671a      	str	r2, [r3, #112]	; 0x70


    /* Configure Object dictionary entry at index 0x1200 */
    if(ObjDictIndex_SDOServerParameter == OD_H1200_SDO_SERVER_PARAM){
 8005abc:	887b      	ldrh	r3, [r7, #2]
 8005abe:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8005ac2:	d10a      	bne.n	8005ada <CO_SDO_init+0xf6>
        CO_OD_configure(SDO, ObjDictIndex_SDOServerParameter, CO_ODF_1200, (void*)&SDO->nodeId, 0U, 0U);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	3360      	adds	r3, #96	; 0x60
 8005ac8:	8879      	ldrh	r1, [r7, #2]
 8005aca:	2200      	movs	r2, #0
 8005acc:	9201      	str	r2, [sp, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	9200      	str	r2, [sp, #0]
 8005ad2:	4a19      	ldr	r2, [pc, #100]	; (8005b38 <CO_SDO_init+0x154>)
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 f833 	bl	8005b40 <CO_OD_configure>
    }

    if((COB_IDClientToServer & 0x80000000) != 0 || (COB_IDServerToClient & 0x80000000) != 0 ){
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	db02      	blt.n	8005ae6 <CO_SDO_init+0x102>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	da03      	bge.n	8005aee <CO_SDO_init+0x10a>
        // SDO is invalid
        COB_IDClientToServer = 0;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60bb      	str	r3, [r7, #8]
        COB_IDServerToClient = 0;
 8005aea:	2300      	movs	r3, #0
 8005aec:	607b      	str	r3, [r7, #4]
    }
    /* configure SDO server CAN reception */
    CO_CANrxBufferInit(
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8005af4:	4b11      	ldr	r3, [pc, #68]	; (8005b3c <CO_SDO_init+0x158>)
 8005af6:	9302      	str	r3, [sp, #8]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	9301      	str	r3, [sp, #4]
 8005afc:	2300      	movs	r3, #0
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005b04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005b06:	f002 f888 	bl	8007c1a <CO_CANrxBufferInit>
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process received message */

    /* configure SDO server CAN transmission */
    SDO->CANdevTx = CANdevTx;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b0e:	675a      	str	r2, [r3, #116]	; 0x74
    SDO->CANtxBuff = CO_CANtxBufferInit(
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8005b18:	2300      	movs	r3, #0
 8005b1a:	9301      	str	r3, [sp, #4]
 8005b1c:	2308      	movs	r3, #8
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	2300      	movs	r3, #0
 8005b22:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005b24:	f002 f8fd 	bl	8007d22 <CO_CANtxBufferInit>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	679a      	str	r2, [r3, #120]	; 0x78
            COB_IDServerToClient,   /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */

    return CO_ERROR_NO;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3718      	adds	r7, #24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	08005997 	.word	0x08005997
 8005b3c:	08005817 	.word	0x08005817

08005b40 <CO_OD_configure>:
        uint16_t                index,
        CO_SDO_abortCode_t    (*pODFunc)(CO_ODF_arg_t *ODF_arg),
        void                   *object,
        uint8_t                *flags,
        uint8_t                 flagsSize)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b088      	sub	sp, #32
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	607a      	str	r2, [r7, #4]
 8005b4a:	603b      	str	r3, [r7, #0]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	817b      	strh	r3, [r7, #10]
    uint16_t entryNo;

    entryNo = CO_OD_find(SDO, index);
 8005b50:	897b      	ldrh	r3, [r7, #10]
 8005b52:	4619      	mov	r1, r3
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 f849 	bl	8005bec <CO_OD_find>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	83bb      	strh	r3, [r7, #28]
    if(entryNo < 0xFFFFU){
 8005b5e:	8bbb      	ldrh	r3, [r7, #28]
 8005b60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d03d      	beq.n	8005be4 <CO_OD_configure+0xa4>
        CO_OD_extension_t *ext = &SDO->ODExtensions[entryNo];
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005b6c:	8bba      	ldrh	r2, [r7, #28]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	4413      	add	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	440b      	add	r3, r1
 8005b78:	61bb      	str	r3, [r7, #24]
        uint8_t maxSubIndex = SDO->OD[entryNo].maxSubIndex;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b7e:	8bba      	ldrh	r2, [r7, #28]
 8005b80:	4613      	mov	r3, r2
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	4413      	add	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	440b      	add	r3, r1
 8005b8a:	789b      	ldrb	r3, [r3, #2]
 8005b8c:	75fb      	strb	r3, [r7, #23]

        ext->pODFunc = pODFunc;
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	601a      	str	r2, [r3, #0]
        ext->object = object;
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	605a      	str	r2, [r3, #4]
        if((flags != NULL) && (flagsSize != 0U) && (flagsSize == maxSubIndex)){
 8005b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d01d      	beq.n	8005bdc <CO_OD_configure+0x9c>
 8005ba0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d019      	beq.n	8005bdc <CO_OD_configure+0x9c>
 8005ba8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8005bac:	7dfb      	ldrb	r3, [r7, #23]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d114      	bne.n	8005bdc <CO_OD_configure+0x9c>
            uint16_t i;
            ext->flags = flags;
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bb6:	609a      	str	r2, [r3, #8]
            for(i=0U; i<=maxSubIndex; i++){
 8005bb8:	2300      	movs	r3, #0
 8005bba:	83fb      	strh	r3, [r7, #30]
 8005bbc:	e008      	b.n	8005bd0 <CO_OD_configure+0x90>
                ext->flags[i] = 0U;
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	689a      	ldr	r2, [r3, #8]
 8005bc2:	8bfb      	ldrh	r3, [r7, #30]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<=maxSubIndex; i++){
 8005bca:	8bfb      	ldrh	r3, [r7, #30]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	83fb      	strh	r3, [r7, #30]
 8005bd0:	7dfb      	ldrb	r3, [r7, #23]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	8bfa      	ldrh	r2, [r7, #30]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d9f1      	bls.n	8005bbe <CO_OD_configure+0x7e>
        if((flags != NULL) && (flagsSize != 0U) && (flagsSize == maxSubIndex)){
 8005bda:	e003      	b.n	8005be4 <CO_OD_configure+0xa4>
            }
        }
        else{
            ext->flags = NULL;
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	2200      	movs	r2, #0
 8005be0:	609a      	str	r2, [r3, #8]
        }
    }
}
 8005be2:	e7ff      	b.n	8005be4 <CO_OD_configure+0xa4>
 8005be4:	bf00      	nop
 8005be6:	3720      	adds	r7, #32
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <CO_OD_find>:


/******************************************************************************/
uint16_t CO_OD_find(CO_SDO_t *SDO, uint16_t index){
 8005bec:	b480      	push	{r7}
 8005bee:	b087      	sub	sp, #28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	807b      	strh	r3, [r7, #2]
    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. */
    /* If Object Dictionary has up to 2^N entries, then N is max number of loop passes. */
    uint16_t cur, min, max;
    const CO_OD_entry_t* object;

    min = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	82fb      	strh	r3, [r7, #22]
    max = SDO->ODSize - 1U;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005c00:	3b01      	subs	r3, #1
 8005c02:	82bb      	strh	r3, [r7, #20]
    while(min < max){
 8005c04:	e027      	b.n	8005c56 <CO_OD_find+0x6a>
        cur = (min + max) / 2;
 8005c06:	8afa      	ldrh	r2, [r7, #22]
 8005c08:	8abb      	ldrh	r3, [r7, #20]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	0fda      	lsrs	r2, r3, #31
 8005c0e:	4413      	add	r3, r2
 8005c10:	105b      	asrs	r3, r3, #1
 8005c12:	81fb      	strh	r3, [r7, #14]
        object = &SDO->OD[cur];
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c18:	89fa      	ldrh	r2, [r7, #14]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	005b      	lsls	r3, r3, #1
 8005c1e:	4413      	add	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	440b      	add	r3, r1
 8005c24:	613b      	str	r3, [r7, #16]
        /* Is object matched */
        if(index == object->index){
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	887a      	ldrh	r2, [r7, #2]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d101      	bne.n	8005c34 <CO_OD_find+0x48>
            return cur;
 8005c30:	89fb      	ldrh	r3, [r7, #14]
 8005c32:	e02a      	b.n	8005c8a <CO_OD_find+0x9e>
        }
        if(index < object->index){
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	887a      	ldrh	r2, [r7, #2]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d208      	bcs.n	8005c50 <CO_OD_find+0x64>
            max = cur;
 8005c3e:	89fb      	ldrh	r3, [r7, #14]
 8005c40:	82bb      	strh	r3, [r7, #20]
            if(max) max--;
 8005c42:	8abb      	ldrh	r3, [r7, #20]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d006      	beq.n	8005c56 <CO_OD_find+0x6a>
 8005c48:	8abb      	ldrh	r3, [r7, #20]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	82bb      	strh	r3, [r7, #20]
 8005c4e:	e002      	b.n	8005c56 <CO_OD_find+0x6a>
        }
        else
            min = cur + 1U;
 8005c50:	89fb      	ldrh	r3, [r7, #14]
 8005c52:	3301      	adds	r3, #1
 8005c54:	82fb      	strh	r3, [r7, #22]
    while(min < max){
 8005c56:	8afa      	ldrh	r2, [r7, #22]
 8005c58:	8abb      	ldrh	r3, [r7, #20]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d3d3      	bcc.n	8005c06 <CO_OD_find+0x1a>
    }

    if(min == max){
 8005c5e:	8afa      	ldrh	r2, [r7, #22]
 8005c60:	8abb      	ldrh	r3, [r7, #20]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d10f      	bne.n	8005c86 <CO_OD_find+0x9a>
        object = &SDO->OD[min];
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c6a:	8afa      	ldrh	r2, [r7, #22]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	005b      	lsls	r3, r3, #1
 8005c70:	4413      	add	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	440b      	add	r3, r1
 8005c76:	613b      	str	r3, [r7, #16]
        /* Is object matched */
        if(index == object->index){
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	881b      	ldrh	r3, [r3, #0]
 8005c7c:	887a      	ldrh	r2, [r7, #2]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d101      	bne.n	8005c86 <CO_OD_find+0x9a>
            return min;
 8005c82:	8afb      	ldrh	r3, [r7, #22]
 8005c84:	e001      	b.n	8005c8a <CO_OD_find+0x9e>
        }
    }

    return 0xFFFFU;  /* object does not exist in OD */
 8005c86:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	371c      	adds	r7, #28
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <CO_OD_getLength>:


/******************************************************************************/
uint16_t CO_OD_getLength(CO_SDO_t *SDO, uint16_t entryNo, uint8_t subIndex){
 8005c96:	b480      	push	{r7}
 8005c98:	b085      	sub	sp, #20
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	807b      	strh	r3, [r7, #2]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	707b      	strb	r3, [r7, #1]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005caa:	887a      	ldrh	r2, [r7, #2]
 8005cac:	4613      	mov	r3, r2
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	4413      	add	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	440b      	add	r3, r1
 8005cb6:	60fb      	str	r3, [r7, #12]

    if(entryNo == 0xFFFFU){
 8005cb8:	887b      	ldrh	r3, [r7, #2]
 8005cba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d101      	bne.n	8005cc6 <CO_OD_getLength+0x30>
        return 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	e02e      	b.n	8005d24 <CO_OD_getLength+0x8e>
    }

    if(object->maxSubIndex == 0U){    /* Object type is Var */
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	789b      	ldrb	r3, [r3, #2]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d108      	bne.n	8005ce0 <CO_OD_getLength+0x4a>
        if(object->pData == 0){ /* data type is domain */
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <CO_OD_getLength+0x44>
            return CO_SDO_BUFFER_SIZE;
 8005cd6:	2320      	movs	r3, #32
 8005cd8:	e024      	b.n	8005d24 <CO_OD_getLength+0x8e>
        }
        else{
            return object->length;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	88db      	ldrh	r3, [r3, #6]
 8005cde:	e021      	b.n	8005d24 <CO_OD_getLength+0x8e>
        }
    }
    else if(object->attribute != 0U){ /* Object type is Array */
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	889b      	ldrh	r3, [r3, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00d      	beq.n	8005d04 <CO_OD_getLength+0x6e>
        if(subIndex == 0U){
 8005ce8:	787b      	ldrb	r3, [r7, #1]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <CO_OD_getLength+0x5c>
            return 1U;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e018      	b.n	8005d24 <CO_OD_getLength+0x8e>
        }
        else if(object->pData == 0){
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <CO_OD_getLength+0x68>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
 8005cfa:	2320      	movs	r3, #32
 8005cfc:	e012      	b.n	8005d24 <CO_OD_getLength+0x8e>
        }
        else{
            return object->length;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	88db      	ldrh	r3, [r3, #6]
 8005d02:	e00f      	b.n	8005d24 <CO_OD_getLength+0x8e>
        }
    }
    else{                            /* Object type is Record */
        if(((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData == 0){
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	689a      	ldr	r2, [r3, #8]
 8005d08:	787b      	ldrb	r3, [r7, #1]
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	4413      	add	r3, r2
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <CO_OD_getLength+0x82>
            /* data type is domain */
            return CO_SDO_BUFFER_SIZE;
 8005d14:	2320      	movs	r3, #32
 8005d16:	e005      	b.n	8005d24 <CO_OD_getLength+0x8e>
        }
        else{
            return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].length;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	787b      	ldrb	r3, [r7, #1]
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	4413      	add	r3, r2
 8005d22:	88db      	ldrh	r3, [r3, #6]
        }
    }
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <CO_OD_getAttribute>:


/******************************************************************************/
uint16_t CO_OD_getAttribute(CO_SDO_t *SDO, uint16_t entryNo, uint8_t subIndex){
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	807b      	strh	r3, [r7, #2]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	707b      	strb	r3, [r7, #1]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d44:	887a      	ldrh	r2, [r7, #2]
 8005d46:	4613      	mov	r3, r2
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	4413      	add	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	440b      	add	r3, r1
 8005d50:	60bb      	str	r3, [r7, #8]

    if(entryNo == 0xFFFFU){
 8005d52:	887b      	ldrh	r3, [r7, #2]
 8005d54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d101      	bne.n	8005d60 <CO_OD_getAttribute+0x30>
        return 0U;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	e034      	b.n	8005dca <CO_OD_getAttribute+0x9a>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	789b      	ldrb	r3, [r3, #2]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d102      	bne.n	8005d6e <CO_OD_getAttribute+0x3e>
        return object->attribute;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	889b      	ldrh	r3, [r3, #4]
 8005d6c:	e02d      	b.n	8005dca <CO_OD_getAttribute+0x9a>
    }
    else if(object->attribute != 0U){/* Object type is Array */
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	889b      	ldrh	r3, [r3, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d023      	beq.n	8005dbe <CO_OD_getAttribute+0x8e>
        bool_t exception_1003 = false;
 8005d76:	2300      	movs	r3, #0
 8005d78:	73fb      	strb	r3, [r7, #15]
        uint16_t attr = object->attribute;
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	889b      	ldrh	r3, [r3, #4]
 8005d7e:	81bb      	strh	r3, [r7, #12]

        /* Special exception: Object 1003,00 should be writable */
        if(object->index == 0x1003 && subIndex == 0) {
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	f241 0203 	movw	r2, #4099	; 0x1003
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d108      	bne.n	8005d9e <CO_OD_getAttribute+0x6e>
 8005d8c:	787b      	ldrb	r3, [r7, #1]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d105      	bne.n	8005d9e <CO_OD_getAttribute+0x6e>
            exception_1003 = true;
 8005d92:	2301      	movs	r3, #1
 8005d94:	73fb      	strb	r3, [r7, #15]
            attr |= CO_ODA_WRITEABLE;
 8005d96:	89bb      	ldrh	r3, [r7, #12]
 8005d98:	f043 0308 	orr.w	r3, r3, #8
 8005d9c:	81bb      	strh	r3, [r7, #12]
        }

        if(subIndex == 0U  && exception_1003 == false){
 8005d9e:	787b      	ldrb	r3, [r7, #1]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10a      	bne.n	8005dba <CO_OD_getAttribute+0x8a>
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d107      	bne.n	8005dba <CO_OD_getAttribute+0x8a>
            /* First subIndex is readonly */
            attr &= ~(CO_ODA_WRITEABLE | CO_ODA_RPDO_MAPABLE);
 8005daa:	89bb      	ldrh	r3, [r7, #12]
 8005dac:	f023 0318 	bic.w	r3, r3, #24
 8005db0:	81bb      	strh	r3, [r7, #12]
            attr |= CO_ODA_READABLE;
 8005db2:	89bb      	ldrh	r3, [r7, #12]
 8005db4:	f043 0304 	orr.w	r3, r3, #4
 8005db8:	81bb      	strh	r3, [r7, #12]
        }
        return attr;
 8005dba:	89bb      	ldrh	r3, [r7, #12]
 8005dbc:	e005      	b.n	8005dca <CO_OD_getAttribute+0x9a>
    }
    else{                            /* Object type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].attribute;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	689a      	ldr	r2, [r3, #8]
 8005dc2:	787b      	ldrb	r3, [r7, #1]
 8005dc4:	00db      	lsls	r3, r3, #3
 8005dc6:	4413      	add	r3, r2
 8005dc8:	889b      	ldrh	r3, [r3, #4]
    }
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <CO_OD_getDataPointer>:


/******************************************************************************/
void* CO_OD_getDataPointer(CO_SDO_t *SDO, uint16_t entryNo, uint8_t subIndex){
 8005dd6:	b480      	push	{r7}
 8005dd8:	b085      	sub	sp, #20
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
 8005dde:	460b      	mov	r3, r1
 8005de0:	807b      	strh	r3, [r7, #2]
 8005de2:	4613      	mov	r3, r2
 8005de4:	707b      	strb	r3, [r7, #1]
    const CO_OD_entry_t* object = &SDO->OD[entryNo];
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005dea:	887a      	ldrh	r2, [r7, #2]
 8005dec:	4613      	mov	r3, r2
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	4413      	add	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	440b      	add	r3, r1
 8005df6:	60fb      	str	r3, [r7, #12]

    if(entryNo == 0xFFFFU){
 8005df8:	887b      	ldrh	r3, [r7, #2]
 8005dfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d101      	bne.n	8005e06 <CO_OD_getDataPointer+0x30>
        return 0;
 8005e02:	2300      	movs	r3, #0
 8005e04:	e026      	b.n	8005e54 <CO_OD_getDataPointer+0x7e>
    }

    if(object->maxSubIndex == 0U){   /* Object type is Var */
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	789b      	ldrb	r3, [r3, #2]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d102      	bne.n	8005e14 <CO_OD_getDataPointer+0x3e>
        return object->pData;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	e01f      	b.n	8005e54 <CO_OD_getDataPointer+0x7e>
    }
    else if(object->attribute != 0U){/* Object type is Array */
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	889b      	ldrh	r3, [r3, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d015      	beq.n	8005e48 <CO_OD_getDataPointer+0x72>
        if(subIndex==0){
 8005e1c:	787b      	ldrb	r3, [r7, #1]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d102      	bne.n	8005e28 <CO_OD_getDataPointer+0x52>
            /* this is the data, for the subIndex 0 in the array */
            return (void*) &object->maxSubIndex;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	3302      	adds	r3, #2
 8005e26:	e015      	b.n	8005e54 <CO_OD_getDataPointer+0x7e>
        }
        else if(object->pData == 0){
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <CO_OD_getDataPointer+0x5e>
            /* data type is domain */
            return 0;
 8005e30:	2300      	movs	r3, #0
 8005e32:	e00f      	b.n	8005e54 <CO_OD_getDataPointer+0x7e>
        }
        else{
            return (void*)(((int8_t*)object->pData) + ((subIndex-1) * object->length));
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	787a      	ldrb	r2, [r7, #1]
 8005e3a:	3a01      	subs	r2, #1
 8005e3c:	68f9      	ldr	r1, [r7, #12]
 8005e3e:	88c9      	ldrh	r1, [r1, #6]
 8005e40:	fb01 f202 	mul.w	r2, r1, r2
 8005e44:	4413      	add	r3, r2
 8005e46:	e005      	b.n	8005e54 <CO_OD_getDataPointer+0x7e>
        }
    }
    else{                            /* Object Type is Record */
        return ((const CO_OD_entryRecord_t*)(object->pData))[subIndex].pData;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	787b      	ldrb	r3, [r7, #1]
 8005e4e:	00db      	lsls	r3, r3, #3
 8005e50:	4413      	add	r3, r2
 8005e52:	681b      	ldr	r3, [r3, #0]
    }
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <CO_OD_getFlagsPointer>:


/******************************************************************************/
uint8_t* CO_OD_getFlagsPointer(CO_SDO_t *SDO, uint16_t entryNo, uint8_t subIndex){
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	807b      	strh	r3, [r7, #2]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	707b      	strb	r3, [r7, #1]
    CO_OD_extension_t* ext;

    if((entryNo == 0xFFFFU) || (SDO->ODExtensions == 0)){
 8005e70:	887b      	ldrh	r3, [r7, #2]
 8005e72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d003      	beq.n	8005e82 <CO_OD_getFlagsPointer+0x22>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <CO_OD_getFlagsPointer+0x26>
        return 0;
 8005e82:	2300      	movs	r3, #0
 8005e84:	e00c      	b.n	8005ea0 <CO_OD_getFlagsPointer+0x40>
    }

    ext = &SDO->ODExtensions[entryNo];
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005e8a:	887a      	ldrh	r2, [r7, #2]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	4413      	add	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	440b      	add	r3, r1
 8005e96:	60fb      	str	r3, [r7, #12]

    return &ext->flags[subIndex];
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	689a      	ldr	r2, [r3, #8]
 8005e9c:	787b      	ldrb	r3, [r7, #1]
 8005e9e:	4413      	add	r3, r2
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <CO_SDO_initTransfer>:


/******************************************************************************/
uint32_t CO_SDO_initTransfer(CO_SDO_t *SDO, uint16_t index, uint8_t subIndex){
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	807b      	strh	r3, [r7, #2]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	707b      	strb	r3, [r7, #1]

    SDO->ODF_arg.index = index;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	887a      	ldrh	r2, [r7, #2]
 8005ec0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    SDO->ODF_arg.subIndex = subIndex;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	787a      	ldrb	r2, [r7, #1]
 8005ec8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

    /* find object in Object Dictionary */
    SDO->entryNo = CO_OD_find(SDO, index);
 8005ecc:	887b      	ldrh	r3, [r7, #2]
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f7ff fe8b 	bl	8005bec <CO_OD_find>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	461a      	mov	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	875a      	strh	r2, [r3, #58]	; 0x3a
    if(SDO->entryNo == 0xFFFFU){
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005ee2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d101      	bne.n	8005eee <CO_SDO_initTransfer+0x42>
        return CO_SDO_AB_NOT_EXIST ;     /* object does not exist in OD */
 8005eea:	4b44      	ldr	r3, [pc, #272]	; (8005ffc <CO_SDO_initTransfer+0x150>)
 8005eec:	e082      	b.n	8005ff4 <CO_SDO_initTransfer+0x148>
    }

    /* verify existance of subIndex */
    if(subIndex > SDO->OD[SDO->entryNo].maxSubIndex &&
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	460b      	mov	r3, r1
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	440b      	add	r3, r1
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	789b      	ldrb	r3, [r3, #2]
 8005f04:	787a      	ldrb	r2, [r7, #1]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d90e      	bls.n	8005f28 <CO_SDO_initTransfer+0x7c>
            SDO->OD[SDO->entryNo].pData != NULL)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005f12:	4619      	mov	r1, r3
 8005f14:	460b      	mov	r3, r1
 8005f16:	005b      	lsls	r3, r3, #1
 8005f18:	440b      	add	r3, r1
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	689b      	ldr	r3, [r3, #8]
    if(subIndex > SDO->OD[SDO->entryNo].maxSubIndex &&
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <CO_SDO_initTransfer+0x7c>
    {
        return CO_SDO_AB_SUB_UNKNOWN;     /* Sub-index does not exist. */
 8005f24:	4b36      	ldr	r3, [pc, #216]	; (8006000 <CO_SDO_initTransfer+0x154>)
 8005f26:	e065      	b.n	8005ff4 <CO_SDO_initTransfer+0x148>
    }

    /* pointer to data in Object dictionary */
    SDO->ODF_arg.ODdataStorage = CO_OD_getDataPointer(SDO, SDO->entryNo, subIndex);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005f2c:	787a      	ldrb	r2, [r7, #1]
 8005f2e:	4619      	mov	r1, r3
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f7ff ff50 	bl	8005dd6 <CO_OD_getDataPointer>
 8005f36:	4602      	mov	r2, r0
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* fill ODF_arg */
    SDO->ODF_arg.object = NULL;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	63da      	str	r2, [r3, #60]	; 0x3c
    if(SDO->ODExtensions){
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00e      	beq.n	8005f68 <CO_SDO_initTransfer+0xbc>
        CO_OD_extension_t *ext = &SDO->ODExtensions[SDO->entryNo];
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005f52:	4619      	mov	r1, r3
 8005f54:	460b      	mov	r3, r1
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	440b      	add	r3, r1
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
        SDO->ODF_arg.object = ext->object;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    SDO->ODF_arg.data = SDO->databuffer;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f103 0208 	add.w	r2, r3, #8
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	641a      	str	r2, [r3, #64]	; 0x40
    SDO->ODF_arg.dataLength = CO_OD_getLength(SDO, SDO->entryNo, subIndex);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005f76:	787a      	ldrb	r2, [r7, #1]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7ff fe8b 	bl	8005c96 <CO_OD_getLength>
 8005f80:	4603      	mov	r3, r0
 8005f82:	461a      	mov	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    SDO->ODF_arg.attribute = CO_OD_getAttribute(SDO, SDO->entryNo, subIndex);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005f8e:	787a      	ldrb	r2, [r7, #1]
 8005f90:	4619      	mov	r1, r3
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff fecc 	bl	8005d30 <CO_OD_getAttribute>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    SDO->ODF_arg.pFlags = CO_OD_getFlagsPointer(SDO, SDO->entryNo, subIndex);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005fa6:	787a      	ldrb	r2, [r7, #1]
 8005fa8:	4619      	mov	r1, r3
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7ff ff58 	bl	8005e60 <CO_OD_getFlagsPointer>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	64da      	str	r2, [r3, #76]	; 0x4c

    SDO->ODF_arg.firstSegment = true;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    SDO->ODF_arg.lastSegment = true;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

    /* indicate total data length, if not domain */
    SDO->ODF_arg.dataLengthTotal = (SDO->ODF_arg.ODdataStorage) ? SDO->ODF_arg.dataLength : 0U;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d004      	beq.n	8005fd8 <CO_SDO_initTransfer+0x12c>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	e000      	b.n	8005fda <CO_SDO_initTransfer+0x12e>
 8005fd8:	2200      	movs	r2, #0
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	659a      	str	r2, [r3, #88]	; 0x58

    SDO->ODF_arg.offset = 0U;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* verify length */
    if(SDO->ODF_arg.dataLength > CO_SDO_BUFFER_SIZE){
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005fea:	2b20      	cmp	r3, #32
 8005fec:	d901      	bls.n	8005ff2 <CO_SDO_initTransfer+0x146>
        return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
 8005fee:	4b05      	ldr	r3, [pc, #20]	; (8006004 <CO_SDO_initTransfer+0x158>)
 8005ff0:	e000      	b.n	8005ff4 <CO_SDO_initTransfer+0x148>
    }

    return 0U;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	06020000 	.word	0x06020000
 8006000:	06090011 	.word	0x06090011
 8006004:	06040047 	.word	0x06040047

08006008 <CO_SDO_readOD>:


/******************************************************************************/
uint32_t CO_SDO_readOD(CO_SDO_t *SDO, uint16_t SDOBufferSize){
 8006008:	b580      	push	{r7, lr}
 800600a:	b08a      	sub	sp, #40	; 0x28
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	460b      	mov	r3, r1
 8006012:	807b      	strh	r3, [r7, #2]
    uint8_t *SDObuffer = SDO->ODF_arg.data;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006018:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t *ODdata = (uint8_t*)SDO->ODF_arg.ODdataStorage;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601e:	623b      	str	r3, [r7, #32]
    uint16_t length = SDO->ODF_arg.dataLength;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006026:	83fb      	strh	r3, [r7, #30]
    CO_OD_extension_t *ext = 0;
 8006028:	2300      	movs	r3, #0
 800602a:	61bb      	str	r3, [r7, #24]

    /* is object readable? */
    if((SDO->ODF_arg.attribute & CO_ODA_READABLE) == 0)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8006032:	f003 0304 	and.w	r3, r3, #4
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <CO_SDO_readOD+0x36>
        return CO_SDO_AB_WRITEONLY;     /* attempt to read a write-only object */
 800603a:	4b33      	ldr	r3, [pc, #204]	; (8006108 <CO_SDO_readOD+0x100>)
 800603c:	e060      	b.n	8006100 <CO_SDO_readOD+0xf8>

    /* find extension */
    if(SDO->ODExtensions != NULL){
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00a      	beq.n	800605c <CO_SDO_readOD+0x54>
        ext = &SDO->ODExtensions[SDO->entryNo];
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800604e:	4619      	mov	r1, r3
 8006050:	460b      	mov	r3, r1
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	440b      	add	r3, r1
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	61bb      	str	r3, [r7, #24]
    }

    /* copy data from OD to SDO buffer if not domain */
    if(ODdata != NULL){
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d01a      	beq.n	8006098 <CO_SDO_readOD+0x90>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006062:	f3ef 8310 	mrs	r3, PRIMASK
 8006066:	60fb      	str	r3, [r7, #12]
  return(result);
 8006068:	68fb      	ldr	r3, [r7, #12]
        CO_LOCK_OD();
 800606a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800606c:	b672      	cpsid	i
}
 800606e:	bf00      	nop
        while(length--) *(SDObuffer++) = *(ODdata++);
 8006070:	e007      	b.n	8006082 <CO_SDO_readOD+0x7a>
 8006072:	6a3a      	ldr	r2, [r7, #32]
 8006074:	1c53      	adds	r3, r2, #1
 8006076:	623b      	str	r3, [r7, #32]
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	1c59      	adds	r1, r3, #1
 800607c:	6279      	str	r1, [r7, #36]	; 0x24
 800607e:	7812      	ldrb	r2, [r2, #0]
 8006080:	701a      	strb	r2, [r3, #0]
 8006082:	8bfb      	ldrh	r3, [r7, #30]
 8006084:	1e5a      	subs	r2, r3, #1
 8006086:	83fa      	strh	r2, [r7, #30]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1f2      	bne.n	8006072 <CO_SDO_readOD+0x6a>
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	f383 8810 	msr	PRIMASK, r3
}
 8006096:	e005      	b.n	80060a4 <CO_SDO_readOD+0x9c>
        CO_UNLOCK_OD();
    }
    /* if domain, Object dictionary function MUST exist */
    else{
        if(ext->pODFunc == NULL){
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <CO_SDO_readOD+0x9c>
            return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
 80060a0:	4b1a      	ldr	r3, [pc, #104]	; (800610c <CO_SDO_readOD+0x104>)
 80060a2:	e02d      	b.n	8006100 <CO_SDO_readOD+0xf8>
        }
    }

    /* call Object dictionary function if registered */
    SDO->ODF_arg.reading = true;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    if(ext->pODFunc != NULL){
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d018      	beq.n	80060e6 <CO_SDO_readOD+0xde>
        uint32_t abortCode = ext->pODFunc(&SDO->ODF_arg);
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	323c      	adds	r2, #60	; 0x3c
 80060bc:	4610      	mov	r0, r2
 80060be:	4798      	blx	r3
 80060c0:	6138      	str	r0, [r7, #16]
        if(abortCode != 0U){
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d001      	beq.n	80060cc <CO_SDO_readOD+0xc4>
            return abortCode;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	e019      	b.n	8006100 <CO_SDO_readOD+0xf8>
        }

        /* dataLength (upadted by pODFunc) must be inside limits */
        if((SDO->ODF_arg.dataLength == 0U) || (SDO->ODF_arg.dataLength > SDOBufferSize)){
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d005      	beq.n	80060e2 <CO_SDO_readOD+0xda>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80060dc:	887a      	ldrh	r2, [r7, #2]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d201      	bcs.n	80060e6 <CO_SDO_readOD+0xde>
            return CO_SDO_AB_DEVICE_INCOMPAT;     /* general internal incompatibility in the device */
 80060e2:	4b0a      	ldr	r3, [pc, #40]	; (800610c <CO_SDO_readOD+0x104>)
 80060e4:	e00c      	b.n	8006100 <CO_SDO_readOD+0xf8>
        }
    }
    SDO->ODF_arg.offset += SDO->ODF_arg.dataLength;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 80060f0:	441a      	add	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	65da      	str	r2, [r3, #92]	; 0x5c
    SDO->ODF_arg.firstSegment = false;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            *(buf2--) = b;
        }
    }
#endif

    return 0U;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3728      	adds	r7, #40	; 0x28
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	06010001 	.word	0x06010001
 800610c:	06040047 	.word	0x06040047

08006110 <CO_SDO_writeOD>:


/******************************************************************************/
uint32_t CO_SDO_writeOD(CO_SDO_t *SDO, uint16_t length){
 8006110:	b580      	push	{r7, lr}
 8006112:	b08a      	sub	sp, #40	; 0x28
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	460b      	mov	r3, r1
 800611a:	807b      	strh	r3, [r7, #2]
    uint8_t *SDObuffer = SDO->ODF_arg.data;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006120:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t *ODdata = (uint8_t*)SDO->ODF_arg.ODdataStorage;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006126:	623b      	str	r3, [r7, #32]
    bool_t exception_1003 = false;
 8006128:	2300      	movs	r3, #0
 800612a:	77fb      	strb	r3, [r7, #31]

    /* is object writeable? */
    if((SDO->ODF_arg.attribute & CO_ODA_WRITEABLE) == 0){
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8006132:	f003 0308 	and.w	r3, r3, #8
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <CO_SDO_writeOD+0x2e>
        return CO_SDO_AB_READONLY;     /* attempt to write a read-only object */
 800613a:	4b3a      	ldr	r3, [pc, #232]	; (8006224 <CO_SDO_writeOD+0x114>)
 800613c:	e06e      	b.n	800621c <CO_SDO_writeOD+0x10c>
    }

    /* length of domain data is application specific and not verified */
    if(ODdata == 0){
 800613e:	6a3b      	ldr	r3, [r7, #32]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d104      	bne.n	800614e <CO_SDO_writeOD+0x3e>
        SDO->ODF_arg.dataLength = length;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	887a      	ldrh	r2, [r7, #2]
 8006148:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800614c:	e007      	b.n	800615e <CO_SDO_writeOD+0x4e>
    }

    /* verify length except for domain data type */
    else if(SDO->ODF_arg.dataLength != length){
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006154:	887a      	ldrh	r2, [r7, #2]
 8006156:	429a      	cmp	r2, r3
 8006158:	d001      	beq.n	800615e <CO_SDO_writeOD+0x4e>
        return CO_SDO_AB_TYPE_MISMATCH;     /* Length of service parameter does not match */
 800615a:	4b33      	ldr	r3, [pc, #204]	; (8006228 <CO_SDO_writeOD+0x118>)
 800615c:	e05e      	b.n	800621c <CO_SDO_writeOD+0x10c>
        }
    }
#endif

    /* call Object dictionary function if registered */
    SDO->ODF_arg.reading = false;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    if(SDO->ODExtensions != NULL){
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800616a:	2b00      	cmp	r3, #0
 800616c:	d01a      	beq.n	80061a4 <CO_SDO_writeOD+0x94>
        CO_OD_extension_t *ext = &SDO->ODExtensions[SDO->entryNo];
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006176:	4619      	mov	r1, r3
 8006178:	460b      	mov	r3, r1
 800617a:	005b      	lsls	r3, r3, #1
 800617c:	440b      	add	r3, r1
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	61bb      	str	r3, [r7, #24]

        if(ext->pODFunc != NULL){
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00b      	beq.n	80061a4 <CO_SDO_writeOD+0x94>
            uint32_t abortCode = ext->pODFunc(&SDO->ODF_arg);
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	323c      	adds	r2, #60	; 0x3c
 8006194:	4610      	mov	r0, r2
 8006196:	4798      	blx	r3
 8006198:	6178      	str	r0, [r7, #20]
            if(abortCode != 0U){
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d001      	beq.n	80061a4 <CO_SDO_writeOD+0x94>
                return abortCode;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	e03b      	b.n	800621c <CO_SDO_writeOD+0x10c>
            }
        }
    }
    SDO->ODF_arg.offset += SDO->ODF_arg.dataLength;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 80061ae:	441a      	add	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	65da      	str	r2, [r3, #92]	; 0x5c
    SDO->ODF_arg.firstSegment = false;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Special exception: 1003,00 is writable from network, but not in OD  */
    if(SDO->ODF_arg.index == 0x1003 && SDO->ODF_arg.subIndex == 0) {
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d106      	bne.n	80061d8 <CO_SDO_writeOD+0xc8>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <CO_SDO_writeOD+0xc8>
        exception_1003 = true;
 80061d4:	2301      	movs	r3, #1
 80061d6:	77fb      	strb	r3, [r7, #31]
    }

    /* copy data from SDO buffer to OD if not domain */
    if(ODdata != NULL && exception_1003 == false){
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d01d      	beq.n	800621a <CO_SDO_writeOD+0x10a>
 80061de:	7ffb      	ldrb	r3, [r7, #31]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d11a      	bne.n	800621a <CO_SDO_writeOD+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061e4:	f3ef 8310 	mrs	r3, PRIMASK
 80061e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80061ea:	68fb      	ldr	r3, [r7, #12]
        CO_LOCK_OD();
 80061ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80061ee:	b672      	cpsid	i
}
 80061f0:	bf00      	nop
        while(length--){
 80061f2:	e007      	b.n	8006204 <CO_SDO_writeOD+0xf4>
            *(ODdata++) = *(SDObuffer++);
 80061f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f6:	1c53      	adds	r3, r2, #1
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
 80061fa:	6a3b      	ldr	r3, [r7, #32]
 80061fc:	1c59      	adds	r1, r3, #1
 80061fe:	6239      	str	r1, [r7, #32]
 8006200:	7812      	ldrb	r2, [r2, #0]
 8006202:	701a      	strb	r2, [r3, #0]
        while(length--){
 8006204:	887b      	ldrh	r3, [r7, #2]
 8006206:	1e5a      	subs	r2, r3, #1
 8006208:	807a      	strh	r2, [r7, #2]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1f2      	bne.n	80061f4 <CO_SDO_writeOD+0xe4>
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	f383 8810 	msr	PRIMASK, r3
}
 8006218:	bf00      	nop
        }
        CO_UNLOCK_OD();
    }

    return 0;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3728      	adds	r7, #40	; 0x28
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	06010002 	.word	0x06010002
 8006228:	06070010 	.word	0x06070010

0800622c <CO_SDO_abort>:


/******************************************************************************/
static void CO_SDO_abort(CO_SDO_t *SDO, uint32_t code){
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
    SDO->CANtxBuff->data[0] = 0x80;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800623a:	2280      	movs	r2, #128	; 0x80
 800623c:	715a      	strb	r2, [r3, #5]
    SDO->CANtxBuff->data[1] = SDO->ODF_arg.index & 0xFF;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006248:	b2d2      	uxtb	r2, r2
 800624a:	719a      	strb	r2, [r3, #6]
    SDO->CANtxBuff->data[2] = (SDO->ODF_arg.index>>8) & 0xFF;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006252:	0a1b      	lsrs	r3, r3, #8
 8006254:	b29a      	uxth	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	71da      	strb	r2, [r3, #7]
    SDO->CANtxBuff->data[3] = SDO->ODF_arg.subIndex;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8006268:	721a      	strb	r2, [r3, #8]
    CO_memcpySwap4(&SDO->CANtxBuff->data[4], &code);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800626e:	3309      	adds	r3, #9
 8006270:	463a      	mov	r2, r7
 8006272:	4611      	mov	r1, r2
 8006274:	4618      	mov	r0, r3
 8006276:	f7ff faac 	bl	80057d2 <CO_memcpySwap4>
    SDO->state = CO_SDO_ST_IDLE;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    SDO->CANrxNew = false;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006292:	4619      	mov	r1, r3
 8006294:	4610      	mov	r0, r2
 8006296:	f001 fd87 	bl	8007da8 <CO_CANsend>
}
 800629a:	bf00      	nop
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
	...

080062a4 <CO_SDO_process>:
        CO_SDO_t               *SDO,
        bool_t                  NMTisPreOrOperational,
        uint16_t                timeDifference_ms,
        uint16_t                SDOtimeoutTime,
        uint16_t               *timerNext_ms)
{
 80062a4:	b590      	push	{r4, r7, lr}
 80062a6:	b093      	sub	sp, #76	; 0x4c
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	4608      	mov	r0, r1
 80062ae:	4611      	mov	r1, r2
 80062b0:	461a      	mov	r2, r3
 80062b2:	4603      	mov	r3, r0
 80062b4:	72fb      	strb	r3, [r7, #11]
 80062b6:	460b      	mov	r3, r1
 80062b8:	813b      	strh	r3, [r7, #8]
 80062ba:	4613      	mov	r3, r2
 80062bc:	80fb      	strh	r3, [r7, #6]
    CO_SDO_state_t state = CO_SDO_ST_IDLE;
 80062be:	2300      	movs	r3, #0
 80062c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    bool_t timeoutSubblockDownolad = false;
 80062c4:	2300      	movs	r3, #0
 80062c6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    bool_t sendResponse = false;
 80062ca:	2300      	movs	r3, #0
 80062cc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

    /* return if idle */
    if((SDO->state == CO_SDO_ST_IDLE) && (!SDO->CANrxNew)){
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d107      	bne.n	80062ea <CO_SDO_process+0x46>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d102      	bne.n	80062ea <CO_SDO_process+0x46>
        return 0;
 80062e4:	2300      	movs	r3, #0
 80062e6:	f001 b83e 	b.w	8007366 <CO_SDO_process+0x10c2>
    }

    /* SDO is allowed to work only in operational or pre-operational NMT state */
    if(!NMTisPreOrOperational){
 80062ea:	7afb      	ldrb	r3, [r7, #11]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10a      	bne.n	8006306 <CO_SDO_process+0x62>
        SDO->state = CO_SDO_ST_IDLE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        SDO->CANrxNew = false;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        return 0;
 8006300:	2300      	movs	r3, #0
 8006302:	f001 b830 	b.w	8007366 <CO_SDO_process+0x10c2>
    }

    /* Is something new to process? */
    if((!SDO->CANtxBuff->bufferFull) && ((SDO->CANrxNew) || (SDO->state == CO_SDO_ST_UPLOAD_BL_SUBBLOCK))){
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800630a:	7b5b      	ldrb	r3, [r3, #13]
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	f040 80d6 	bne.w	80064c0 <CO_SDO_process+0x21c>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800631a:	2b00      	cmp	r3, #0
 800631c:	d105      	bne.n	800632a <CO_SDO_process+0x86>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006324:	2b26      	cmp	r3, #38	; 0x26
 8006326:	f040 80cb 	bne.w	80064c0 <CO_SDO_process+0x21c>
        uint8_t CCS = SDO->CANrxData[0] >> 5;   /* Client command specifier */
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	095b      	lsrs	r3, r3, #5
 8006330:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

        /* reset timeout */
        if(SDO->state != CO_SDO_ST_UPLOAD_BL_SUBBLOCK)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800633a:	2b26      	cmp	r3, #38	; 0x26
 800633c:	d003      	beq.n	8006346 <CO_SDO_process+0xa2>
            SDO->timeoutTimer = 0;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

        /* clear response buffer */
        SDO->CANtxBuff->data[0] = SDO->CANtxBuff->data[1] = SDO->CANtxBuff->data[2] = SDO->CANtxBuff->data[3] = 0;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800634a:	2200      	movs	r2, #0
 800634c:	721a      	strb	r2, [r3, #8]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8006352:	7a1b      	ldrb	r3, [r3, #8]
 8006354:	71d3      	strb	r3, [r2, #7]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800635a:	79d2      	ldrb	r2, [r2, #7]
 800635c:	719a      	strb	r2, [r3, #6]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8006362:	799b      	ldrb	r3, [r3, #6]
 8006364:	7153      	strb	r3, [r2, #5]
        SDO->CANtxBuff->data[4] = SDO->CANtxBuff->data[5] = SDO->CANtxBuff->data[6] = SDO->CANtxBuff->data[7] = 0;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800636a:	2200      	movs	r2, #0
 800636c:	731a      	strb	r2, [r3, #12]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8006372:	7b1b      	ldrb	r3, [r3, #12]
 8006374:	72d3      	strb	r3, [r2, #11]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800637a:	7ad2      	ldrb	r2, [r2, #11]
 800637c:	729a      	strb	r2, [r3, #10]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8006382:	7a9b      	ldrb	r3, [r3, #10]
 8006384:	7253      	strb	r3, [r2, #9]

        /* Is abort from client? */
        if((SDO->CANrxNew) && (SDO->CANrxData[0] == CCS_ABORT)){
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00f      	beq.n	80063b0 <CO_SDO_process+0x10c>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	2b80      	cmp	r3, #128	; 0x80
 8006396:	d10b      	bne.n	80063b0 <CO_SDO_process+0x10c>
            SDO->state = CO_SDO_ST_IDLE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            SDO->CANrxNew = false;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
            return -1;
 80063a8:	f04f 33ff 	mov.w	r3, #4294967295
 80063ac:	f000 bfdb 	b.w	8007366 <CO_SDO_process+0x10c2>
        }

        /* continue with previous SDO communication or start new */
        if(SDO->state != CO_SDO_ST_IDLE){
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d005      	beq.n	80063c6 <CO_SDO_process+0x122>
            state = SDO->state;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80063c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80063c4:	e07c      	b.n	80064c0 <CO_SDO_process+0x21c>
        else{
            uint32_t abortCode;
            uint16_t index;

            /* Is client command specifier valid */
            if((CCS != CCS_DOWNLOAD_INITIATE) && (CCS != CCS_UPLOAD_INITIATE) &&
 80063c6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d013      	beq.n	80063f6 <CO_SDO_process+0x152>
 80063ce:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d00f      	beq.n	80063f6 <CO_SDO_process+0x152>
 80063d6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80063da:	2b06      	cmp	r3, #6
 80063dc:	d00b      	beq.n	80063f6 <CO_SDO_process+0x152>
                (CCS != CCS_DOWNLOAD_BLOCK) && (CCS != CCS_UPLOAD_BLOCK)){
 80063de:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80063e2:	2b05      	cmp	r3, #5
 80063e4:	d007      	beq.n	80063f6 <CO_SDO_process+0x152>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 80063e6:	49b3      	ldr	r1, [pc, #716]	; (80066b4 <CO_SDO_process+0x410>)
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f7ff ff1f 	bl	800622c <CO_SDO_abort>
                return -1;
 80063ee:	f04f 33ff 	mov.w	r3, #4294967295
 80063f2:	f000 bfb8 	b.w	8007366 <CO_SDO_process+0x10c2>
            }

            /* init ODF_arg */
            index = SDO->CANrxData[2];
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	789b      	ldrb	r3, [r3, #2]
 80063fa:	877b      	strh	r3, [r7, #58]	; 0x3a
            index = index << 8 | SDO->CANrxData[1];
 80063fc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80063fe:	021b      	lsls	r3, r3, #8
 8006400:	b21a      	sxth	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	785b      	ldrb	r3, [r3, #1]
 8006406:	b21b      	sxth	r3, r3
 8006408:	4313      	orrs	r3, r2
 800640a:	b21b      	sxth	r3, r3
 800640c:	877b      	strh	r3, [r7, #58]	; 0x3a
            abortCode = CO_SDO_initTransfer(SDO, index, SDO->CANrxData[3]);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	78da      	ldrb	r2, [r3, #3]
 8006412:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006414:	4619      	mov	r1, r3
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f7ff fd48 	bl	8005eac <CO_SDO_initTransfer>
 800641c:	6378      	str	r0, [r7, #52]	; 0x34
            if(abortCode != 0U){
 800641e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006420:	2b00      	cmp	r3, #0
 8006422:	d007      	beq.n	8006434 <CO_SDO_process+0x190>
                CO_SDO_abort(SDO, abortCode);
 8006424:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f7ff ff00 	bl	800622c <CO_SDO_abort>
                return -1;
 800642c:	f04f 33ff 	mov.w	r3, #4294967295
 8006430:	f000 bf99 	b.w	8007366 <CO_SDO_process+0x10c2>
            }

            /* download */
            if((CCS == CCS_DOWNLOAD_INITIATE) || (CCS == CCS_DOWNLOAD_BLOCK)){
 8006434:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006438:	2b01      	cmp	r3, #1
 800643a:	d003      	beq.n	8006444 <CO_SDO_process+0x1a0>
 800643c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006440:	2b06      	cmp	r3, #6
 8006442:	d11a      	bne.n	800647a <CO_SDO_process+0x1d6>
                if((SDO->ODF_arg.attribute & CO_ODA_WRITEABLE) == 0U){
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800644a:	f003 0308 	and.w	r3, r3, #8
 800644e:	2b00      	cmp	r3, #0
 8006450:	d107      	bne.n	8006462 <CO_SDO_process+0x1be>
                    CO_SDO_abort(SDO, CO_SDO_AB_READONLY); /* attempt to write a read-only object */
 8006452:	4999      	ldr	r1, [pc, #612]	; (80066b8 <CO_SDO_process+0x414>)
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f7ff fee9 	bl	800622c <CO_SDO_abort>
                    return -1;
 800645a:	f04f 33ff 	mov.w	r3, #4294967295
 800645e:	f000 bf82 	b.w	8007366 <CO_SDO_process+0x10c2>
                }

                /* set state machine to normal or block download */
                if(CCS == CCS_DOWNLOAD_INITIATE){
 8006462:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006466:	2b01      	cmp	r3, #1
 8006468:	d103      	bne.n	8006472 <CO_SDO_process+0x1ce>
                    state = CO_SDO_ST_DOWNLOAD_INITIATE;
 800646a:	2311      	movs	r3, #17
 800646c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if(CCS == CCS_DOWNLOAD_INITIATE){
 8006470:	e026      	b.n	80064c0 <CO_SDO_process+0x21c>
                }
                else{
                    state = CO_SDO_ST_DOWNLOAD_BL_INITIATE;
 8006472:	2314      	movs	r3, #20
 8006474:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if(CCS == CCS_DOWNLOAD_INITIATE){
 8006478:	e022      	b.n	80064c0 <CO_SDO_process+0x21c>
                }
            }

            /* upload */
            else{
                abortCode = CO_SDO_readOD(SDO, CO_SDO_BUFFER_SIZE);
 800647a:	2120      	movs	r1, #32
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f7ff fdc3 	bl	8006008 <CO_SDO_readOD>
 8006482:	6378      	str	r0, [r7, #52]	; 0x34
                if(abortCode != 0U){
 8006484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006486:	2b00      	cmp	r3, #0
 8006488:	d007      	beq.n	800649a <CO_SDO_process+0x1f6>
                    CO_SDO_abort(SDO, abortCode);
 800648a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f7ff fecd 	bl	800622c <CO_SDO_abort>
                    return -1;
 8006492:	f04f 33ff 	mov.w	r3, #4294967295
 8006496:	f000 bf66 	b.w	8007366 <CO_SDO_process+0x10c2>
                }

                /* if data size is large enough set state machine to block upload, otherwise set to normal transfer */
                if((CCS == CCS_UPLOAD_BLOCK) && (SDO->ODF_arg.dataLength > SDO->CANrxData[5])){
 800649a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800649e:	2b05      	cmp	r3, #5
 80064a0:	d10b      	bne.n	80064ba <CO_SDO_process+0x216>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	795b      	ldrb	r3, [r3, #5]
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d903      	bls.n	80064ba <CO_SDO_process+0x216>
                    state = CO_SDO_ST_UPLOAD_BL_INITIATE;
 80064b2:	2324      	movs	r3, #36	; 0x24
 80064b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80064b8:	e002      	b.n	80064c0 <CO_SDO_process+0x21c>
                }
                else{
                    state = CO_SDO_ST_UPLOAD_INITIATE;
 80064ba:	2321      	movs	r3, #33	; 0x21
 80064bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }
        }
    }

    /* verify SDO timeout */
    if(SDO->timeoutTimer < SDOtimeoutTime){
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80064c6:	88fa      	ldrh	r2, [r7, #6]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d908      	bls.n	80064de <CO_SDO_process+0x23a>
        SDO->timeoutTimer += timeDifference_ms;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80064d2:	893b      	ldrh	r3, [r7, #8]
 80064d4:	4413      	add	r3, r2
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    }
    if(SDO->timeoutTimer >= SDOtimeoutTime){
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80064e4:	88fa      	ldrh	r2, [r7, #6]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d81e      	bhi.n	8006528 <CO_SDO_process+0x284>
        if((SDO->state == CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK) && (SDO->sequence != 0) && (!SDO->CANtxBuff->bufferFull)){
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80064f0:	2b15      	cmp	r3, #21
 80064f2:	d111      	bne.n	8006518 <CO_SDO_process+0x274>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00c      	beq.n	8006518 <CO_SDO_process+0x274>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006502:	7b5b      	ldrb	r3, [r3, #13]
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d106      	bne.n	8006518 <CO_SDO_process+0x274>
            timeoutSubblockDownolad = true;
 800650a:	2301      	movs	r3, #1
 800650c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            state = CO_SDO_ST_DOWNLOAD_BL_SUB_RESP;
 8006510:	2316      	movs	r3, #22
 8006512:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006516:	e007      	b.n	8006528 <CO_SDO_process+0x284>
        }
        else{
            CO_SDO_abort(SDO, CO_SDO_AB_TIMEOUT); /* SDO protocol timed out */
 8006518:	4968      	ldr	r1, [pc, #416]	; (80066bc <CO_SDO_process+0x418>)
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f7ff fe86 	bl	800622c <CO_SDO_abort>
            return -1;
 8006520:	f04f 33ff 	mov.w	r3, #4294967295
 8006524:	f000 bf1f 	b.w	8007366 <CO_SDO_process+0x10c2>
        }
    }

    /* return immediately if still idle */
    if(state == CO_SDO_ST_IDLE){
 8006528:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800652c:	2b00      	cmp	r3, #0
 800652e:	d102      	bne.n	8006536 <CO_SDO_process+0x292>
        return 0;
 8006530:	2300      	movs	r3, #0
 8006532:	f000 bf18 	b.w	8007366 <CO_SDO_process+0x10c2>
    }

    /* state machine (buffer is freed (SDO->CANrxNew = 0;) at the end) */
    switch(state){
 8006536:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800653a:	3b11      	subs	r3, #17
 800653c:	2b16      	cmp	r3, #22
 800653e:	f200 86f2 	bhi.w	8007326 <CO_SDO_process+0x1082>
 8006542:	a201      	add	r2, pc, #4	; (adr r2, 8006548 <CO_SDO_process+0x2a4>)
 8006544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006548:	080065a5 	.word	0x080065a5
 800654c:	080066e5 	.word	0x080066e5
 8006550:	08007327 	.word	0x08007327
 8006554:	08006863 	.word	0x08006863
 8006558:	08007335 	.word	0x08007335
 800655c:	0800693d 	.word	0x0800693d
 8006560:	08006a83 	.word	0x08006a83
 8006564:	08007327 	.word	0x08007327
 8006568:	08007327 	.word	0x08007327
 800656c:	08007327 	.word	0x08007327
 8006570:	08007327 	.word	0x08007327
 8006574:	08007327 	.word	0x08007327
 8006578:	08007327 	.word	0x08007327
 800657c:	08007327 	.word	0x08007327
 8006580:	08007327 	.word	0x08007327
 8006584:	08007327 	.word	0x08007327
 8006588:	08006b5b 	.word	0x08006b5b
 800658c:	08006c3d 	.word	0x08006c3d
 8006590:	08007327 	.word	0x08007327
 8006594:	08006e5d 	.word	0x08006e5d
 8006598:	08006f69 	.word	0x08006f69
 800659c:	08006fa9 	.word	0x08006fa9
 80065a0:	08007303 	.word	0x08007303
        uint16_t len, i;
        bool_t lastSegmentInSubblock;

        case CO_SDO_ST_DOWNLOAD_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[0] = 0x60;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065a8:	2260      	movs	r2, #96	; 0x60
 80065aa:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	7852      	ldrb	r2, [r2, #1]
 80065b4:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	7892      	ldrb	r2, [r2, #2]
 80065be:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	78d2      	ldrb	r2, [r2, #3]
 80065c8:	721a      	strb	r2, [r3, #8]

            /* Expedited transfer */
            if((SDO->CANrxData[0] & 0x02U) != 0U){
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d049      	beq.n	800666a <CO_SDO_process+0x3c6>
                /* is size indicated? Get message length */
                if((SDO->CANrxData[0] & 0x01U) != 0U){
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00c      	beq.n	80065fc <CO_SDO_process+0x358>
                    len = 4U - ((SDO->CANrxData[0] >> 2U) & 0x03U);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	089b      	lsrs	r3, r3, #2
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	f003 0303 	and.w	r3, r3, #3
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	f1c3 0304 	rsb	r3, r3, #4
 80065f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80065fa:	e004      	b.n	8006606 <CO_SDO_process+0x362>
                }
                else{
                    len = SDO->ODF_arg.dataLength;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006602:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
                }

                /* copy data to SDO buffer */
                SDO->ODF_arg.data[0] = SDO->CANrxData[4];
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	7912      	ldrb	r2, [r2, #4]
 800660e:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[1] = SDO->CANrxData[5];
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006614:	3301      	adds	r3, #1
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	7952      	ldrb	r2, [r2, #5]
 800661a:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[2] = SDO->CANrxData[6];
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006620:	3302      	adds	r3, #2
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	7992      	ldrb	r2, [r2, #6]
 8006626:	701a      	strb	r2, [r3, #0]
                SDO->ODF_arg.data[3] = SDO->CANrxData[7];
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662c:	3303      	adds	r3, #3
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	79d2      	ldrb	r2, [r2, #7]
 8006632:	701a      	strb	r2, [r3, #0]

                /* write data to the Object dictionary */
                abortCode = CO_SDO_writeOD(SDO, len);
 8006634:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006638:	4619      	mov	r1, r3
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f7ff fd68 	bl	8006110 <CO_SDO_writeOD>
 8006640:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
 8006642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006644:	2b00      	cmp	r3, #0
 8006646:	d007      	beq.n	8006658 <CO_SDO_process+0x3b4>
                    CO_SDO_abort(SDO, abortCode);
 8006648:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f7ff fdee 	bl	800622c <CO_SDO_abort>
                    return -1;
 8006650:	f04f 33ff 	mov.w	r3, #4294967295
 8006654:	f000 be87 	b.w	8007366 <CO_SDO_process+0x10c2>
                }

                /* finish the communication */
                SDO->state = CO_SDO_ST_IDLE;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                sendResponse = true;
 8006660:	2301      	movs	r3, #1
 8006662:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                SDO->bufferOffset = 0;
                SDO->sequence = 0;
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENTED;
                sendResponse = true;
            }
            break;
 8006666:	f000 be66 	b.w	8007336 <CO_SDO_process+0x1092>
                if((SDO->CANrxData[0]&0x01) != 0){
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	2b00      	cmp	r3, #0
 8006674:	d026      	beq.n	80066c4 <CO_SDO_process+0x420>
                    CO_memcpySwap4(&lenRx, &SDO->CANrxData[4]);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	1d1a      	adds	r2, r3, #4
 800667a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800667e:	4611      	mov	r1, r2
 8006680:	4618      	mov	r0, r3
 8006682:	f7ff f8a6 	bl	80057d2 <CO_memcpySwap4>
                    SDO->ODF_arg.dataLengthTotal = lenRx;
 8006686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	659a      	str	r2, [r3, #88]	; 0x58
                    if((lenRx != SDO->ODF_arg.dataLength) && (SDO->ODF_arg.ODdataStorage != 0)){
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006692:	461a      	mov	r2, r3
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	429a      	cmp	r2, r3
 8006698:	d014      	beq.n	80066c4 <CO_SDO_process+0x420>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d010      	beq.n	80066c4 <CO_SDO_process+0x420>
                        CO_SDO_abort(SDO, CO_SDO_AB_TYPE_MISMATCH);  /* Length of service parameter does not match */
 80066a2:	4907      	ldr	r1, [pc, #28]	; (80066c0 <CO_SDO_process+0x41c>)
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f7ff fdc1 	bl	800622c <CO_SDO_abort>
                        return -1;
 80066aa:	f04f 33ff 	mov.w	r3, #4294967295
 80066ae:	f000 be5a 	b.w	8007366 <CO_SDO_process+0x10c2>
 80066b2:	bf00      	nop
 80066b4:	05040001 	.word	0x05040001
 80066b8:	06010002 	.word	0x06010002
 80066bc:	05040000 	.word	0x05040000
 80066c0:	06070010 	.word	0x06070010
                SDO->bufferOffset = 0;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	871a      	strh	r2, [r3, #56]	; 0x38
                SDO->sequence = 0;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENTED;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2212      	movs	r2, #18
 80066d6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                sendResponse = true;
 80066da:	2301      	movs	r3, #1
 80066dc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 80066e0:	f000 be29 	b.w	8007336 <CO_SDO_process+0x1092>
        }

        case CO_SDO_ST_DOWNLOAD_SEGMENTED:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE0) != 0x00U){
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d007      	beq.n	8006700 <CO_SDO_process+0x45c>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 80066f0:	4998      	ldr	r1, [pc, #608]	; (8006954 <CO_SDO_process+0x6b0>)
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f7ff fd9a 	bl	800622c <CO_SDO_abort>
                return -1;
 80066f8:	f04f 33ff 	mov.w	r3, #4294967295
 80066fc:	f000 be33 	b.w	8007366 <CO_SDO_process+0x10c2>
            }

            /* verify toggle bit */
            i = (SDO->CANrxData[0]&0x10U) ? 1U : 0U;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	091b      	lsrs	r3, r3, #4
 8006706:	b29b      	uxth	r3, r3
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            if(i != SDO->sequence){
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006716:	b29b      	uxth	r3, r3
 8006718:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800671c:	429a      	cmp	r2, r3
 800671e:	d007      	beq.n	8006730 <CO_SDO_process+0x48c>
                CO_SDO_abort(SDO, CO_SDO_AB_TOGGLE_BIT);/* toggle bit not alternated */
 8006720:	498d      	ldr	r1, [pc, #564]	; (8006958 <CO_SDO_process+0x6b4>)
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f7ff fd82 	bl	800622c <CO_SDO_abort>
                return -1;
 8006728:	f04f 33ff 	mov.w	r3, #4294967295
 800672c:	f000 be1b 	b.w	8007366 <CO_SDO_process+0x10c2>
            }

            /* get size of data in message */
            len = 7U - ((SDO->CANrxData[0] >> 1U) & 0x07U);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	085b      	lsrs	r3, r3, #1
 8006736:	b2db      	uxtb	r3, r3
 8006738:	b29b      	uxth	r3, r3
 800673a:	43db      	mvns	r3, r3
 800673c:	b29b      	uxth	r3, r3
 800673e:	f003 0307 	and.w	r3, r3, #7
 8006742:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

            /* verify length. Domain data type enables length larger than SDO buffer size */
            if((SDO->bufferOffset + len) > SDO->ODF_arg.dataLength){
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800674a:	461a      	mov	r2, r3
 800674c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006750:	4413      	add	r3, r2
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 8006758:	4293      	cmp	r3, r2
 800675a:	dd28      	ble.n	80067ae <CO_SDO_process+0x50a>
                if(SDO->ODF_arg.ODdataStorage != 0){
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006760:	2b00      	cmp	r3, #0
 8006762:	d007      	beq.n	8006774 <CO_SDO_process+0x4d0>
                    CO_SDO_abort(SDO, CO_SDO_AB_DATA_LONG);  /* Length of service parameter too high */
 8006764:	497d      	ldr	r1, [pc, #500]	; (800695c <CO_SDO_process+0x6b8>)
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f7ff fd60 	bl	800622c <CO_SDO_abort>
                    return -1;
 800676c:	f04f 33ff 	mov.w	r3, #4294967295
 8006770:	f000 bdf9 	b.w	8007366 <CO_SDO_process+0x10c2>
                }
                else{
                    /* empty buffer in domain data type */
                    SDO->ODF_arg.lastSegment = false;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
                    abortCode = CO_SDO_writeOD(SDO, SDO->bufferOffset);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8006780:	4619      	mov	r1, r3
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f7ff fcc4 	bl	8006110 <CO_SDO_writeOD>
 8006788:	62f8      	str	r0, [r7, #44]	; 0x2c
                    if(abortCode != 0U){
 800678a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678c:	2b00      	cmp	r3, #0
 800678e:	d007      	beq.n	80067a0 <CO_SDO_process+0x4fc>
                        CO_SDO_abort(SDO, abortCode);
 8006790:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f7ff fd4a 	bl	800622c <CO_SDO_abort>
                        return -1;
 8006798:	f04f 33ff 	mov.w	r3, #4294967295
 800679c:	f000 bde3 	b.w	8007366 <CO_SDO_process+0x10c2>
                    }

                    SDO->ODF_arg.dataLength = CO_SDO_BUFFER_SIZE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2220      	movs	r2, #32
 80067a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                    SDO->bufferOffset = 0;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	871a      	strh	r2, [r3, #56]	; 0x38
                }
            }

            /* copy data to buffer */
            for(i=0U; i<len; i++)
 80067ae:	2300      	movs	r3, #0
 80067b0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80067b4:	e013      	b.n	80067de <CO_SDO_process+0x53a>
                SDO->ODF_arg.data[SDO->bufferOffset++] = SDO->CANrxData[i+1];
 80067b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80067ba:	1c5a      	adds	r2, r3, #1
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80067c4:	1c58      	adds	r0, r3, #1
 80067c6:	b284      	uxth	r4, r0
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	8704      	strh	r4, [r0, #56]	; 0x38
 80067cc:	440b      	add	r3, r1
 80067ce:	68f9      	ldr	r1, [r7, #12]
 80067d0:	5c8a      	ldrb	r2, [r1, r2]
 80067d2:	701a      	strb	r2, [r3, #0]
            for(i=0U; i<len; i++)
 80067d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80067d8:	3301      	adds	r3, #1
 80067da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80067de:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80067e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d3e5      	bcc.n	80067b6 <CO_SDO_process+0x512>

            /* If no more segments to be downloaded, write data to the Object dictionary */
            if((SDO->CANrxData[0] & 0x01U) != 0U){
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d019      	beq.n	800682a <CO_SDO_process+0x586>
                SDO->ODF_arg.lastSegment = true;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
                abortCode = CO_SDO_writeOD(SDO, SDO->bufferOffset);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8006802:	4619      	mov	r1, r3
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f7ff fc83 	bl	8006110 <CO_SDO_writeOD>
 800680a:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
 800680c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680e:	2b00      	cmp	r3, #0
 8006810:	d007      	beq.n	8006822 <CO_SDO_process+0x57e>
                    CO_SDO_abort(SDO, abortCode);
 8006812:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f7ff fd09 	bl	800622c <CO_SDO_abort>
                    return -1;
 800681a:	f04f 33ff 	mov.w	r3, #4294967295
 800681e:	f000 bda2 	b.w	8007366 <CO_SDO_process+0x10c2>
                }

                /* finish */
                SDO->state = CO_SDO_ST_IDLE;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            }

            /* download segment response and alternate toggle bit */
            SDO->CANtxBuff->data[0] = 0x20 | (SDO->sequence ? 0x10 : 0x00);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <CO_SDO_process+0x594>
 8006834:	2230      	movs	r2, #48	; 0x30
 8006836:	e000      	b.n	800683a <CO_SDO_process+0x596>
 8006838:	2220      	movs	r2, #32
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800683e:	715a      	strb	r2, [r3, #5]
            SDO->sequence = (SDO->sequence) ? 0 : 1;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006846:	2b00      	cmp	r3, #0
 8006848:	bf0c      	ite	eq
 800684a:	2301      	moveq	r3, #1
 800684c:	2300      	movne	r3, #0
 800684e:	b2db      	uxtb	r3, r3
 8006850:	461a      	mov	r2, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
            sendResponse = true;
 8006858:	2301      	movs	r3, #1
 800685a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 800685e:	f000 bd6a 	b.w	8007336 <CO_SDO_process+0x1092>
        }

        case CO_SDO_ST_DOWNLOAD_BL_INITIATE:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE1U) != 0xC0U){
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
 800686a:	2bc0      	cmp	r3, #192	; 0xc0
 800686c:	d007      	beq.n	800687e <CO_SDO_process+0x5da>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 800686e:	4939      	ldr	r1, [pc, #228]	; (8006954 <CO_SDO_process+0x6b0>)
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f7ff fcdb 	bl	800622c <CO_SDO_abort>
                return -1;
 8006876:	f04f 33ff 	mov.w	r3, #4294967295
 800687a:	f000 bd74 	b.w	8007366 <CO_SDO_process+0x10c2>
            }

            /* prepare response */
            SDO->CANtxBuff->data[0] = 0xA4;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006882:	22a4      	movs	r2, #164	; 0xa4
 8006884:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	7852      	ldrb	r2, [r2, #1]
 800688e:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	7892      	ldrb	r2, [r2, #2]
 8006898:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	78d2      	ldrb	r2, [r2, #3]
 80068a2:	721a      	strb	r2, [r3, #8]

            /* blksize */
            SDO->blksize = (CO_SDO_BUFFER_SIZE > (7*127)) ? 127 : (CO_SDO_BUFFER_SIZE / 7);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2204      	movs	r2, #4
 80068a8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
            SDO->CANtxBuff->data[4] = SDO->blksize;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 80068b6:	725a      	strb	r2, [r3, #9]

            /* is CRC enabled */
            SDO->crcEnabled = (SDO->CANrxData[0] & 0x04) ? true : false;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	109b      	asrs	r3, r3, #2
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	f003 0301 	and.w	r3, r3, #1
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
            SDO->crc = 0;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

            /* verify length if size is indicated */
            if((SDO->CANrxData[0]&0x02) != 0U){
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d01d      	beq.n	800691c <CO_SDO_process+0x678>
                uint32_t lenRx;
                CO_memcpySwap4(&lenRx, &SDO->CANrxData[4]);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	1d1a      	adds	r2, r3, #4
 80068e4:	f107 0320 	add.w	r3, r7, #32
 80068e8:	4611      	mov	r1, r2
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fe ff71 	bl	80057d2 <CO_memcpySwap4>
                SDO->ODF_arg.dataLengthTotal = lenRx;
 80068f0:	6a3a      	ldr	r2, [r7, #32]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	659a      	str	r2, [r3, #88]	; 0x58

                /* verify length except for domain data type */
                if((lenRx != SDO->ODF_arg.dataLength) && (SDO->ODF_arg.ODdataStorage != 0)){
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80068fc:	461a      	mov	r2, r3
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	429a      	cmp	r2, r3
 8006902:	d00b      	beq.n	800691c <CO_SDO_process+0x678>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006908:	2b00      	cmp	r3, #0
 800690a:	d007      	beq.n	800691c <CO_SDO_process+0x678>
                    CO_SDO_abort(SDO, CO_SDO_AB_TYPE_MISMATCH);  /* Length of service parameter does not match */
 800690c:	4914      	ldr	r1, [pc, #80]	; (8006960 <CO_SDO_process+0x6bc>)
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f7ff fc8c 	bl	800622c <CO_SDO_abort>
                    return -1;
 8006914:	f04f 33ff 	mov.w	r3, #4294967295
 8006918:	f000 bd25 	b.w	8007366 <CO_SDO_process+0x10c2>
                }
            }

            SDO->bufferOffset = 0;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	871a      	strh	r2, [r3, #56]	; 0x38
            SDO->sequence = 0;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
            SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2215      	movs	r2, #21
 800692e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

            /* send response */
            sendResponse = true;
 8006932:	2301      	movs	r3, #1
 8006934:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 8006938:	f000 bcfd 	b.w	8007336 <CO_SDO_process+0x1092>
        }

        case CO_SDO_ST_DOWNLOAD_BL_SUB_RESP:{
            /* no new message received, SDO timeout occured, try to response */
            lastSegmentInSubblock = (!timeoutSubblockDownolad &&
                        ((SDO->CANrxData[0] & 0x80U) == 0x80U)) ? true : false;
 800693c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10f      	bne.n	8006964 <CO_SDO_process+0x6c0>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	b25b      	sxtb	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	da0a      	bge.n	8006964 <CO_SDO_process+0x6c0>
 800694e:	2301      	movs	r3, #1
 8006950:	e009      	b.n	8006966 <CO_SDO_process+0x6c2>
 8006952:	bf00      	nop
 8006954:	05040001 	.word	0x05040001
 8006958:	05030000 	.word	0x05030000
 800695c:	06070012 	.word	0x06070012
 8006960:	06070010 	.word	0x06070010
 8006964:	2300      	movs	r3, #0
            lastSegmentInSubblock = (!timeoutSubblockDownolad &&
 8006966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            /* prepare response */
            SDO->CANtxBuff->data[0] = 0xA2;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800696e:	22a2      	movs	r2, #162	; 0xa2
 8006970:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = SDO->sequence;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	f892 2062 	ldrb.w	r2, [r2, #98]	; 0x62
 800697c:	719a      	strb	r2, [r3, #6]
            SDO->sequence = 0;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

            /* empty buffer in domain data type if not last segment */
            if((SDO->ODF_arg.ODdataStorage == 0) && (SDO->bufferOffset != 0) && !lastSegmentInSubblock){
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800698a:	2b00      	cmp	r3, #0
 800698c:	d139      	bne.n	8006a02 <CO_SDO_process+0x75e>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8006992:	2b00      	cmp	r3, #0
 8006994:	d035      	beq.n	8006a02 <CO_SDO_process+0x75e>
 8006996:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800699a:	2b00      	cmp	r3, #0
 800699c:	d131      	bne.n	8006a02 <CO_SDO_process+0x75e>
                /* calculate CRC on next bytes, if enabled */
                if(SDO->crcEnabled){
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00f      	beq.n	80069c8 <CO_SDO_process+0x724>
                    SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->bufferOffset, SDO->crc);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80069b0:	4619      	mov	r1, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80069b8:	461a      	mov	r2, r3
 80069ba:	f001 fbcb 	bl	8008154 <crc16_ccitt>
 80069be:	4603      	mov	r3, r0
 80069c0:	461a      	mov	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
                }

                /* write data to the Object dictionary */
                SDO->ODF_arg.lastSegment = false;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
                abortCode = CO_SDO_writeOD(SDO, SDO->bufferOffset);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80069d4:	4619      	mov	r1, r3
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f7ff fb9a 	bl	8006110 <CO_SDO_writeOD>
 80069dc:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
 80069de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d007      	beq.n	80069f4 <CO_SDO_process+0x750>
                    CO_SDO_abort(SDO, abortCode);
 80069e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f7ff fc20 	bl	800622c <CO_SDO_abort>
                    return -1;
 80069ec:	f04f 33ff 	mov.w	r3, #4294967295
 80069f0:	f000 bcb9 	b.w	8007366 <CO_SDO_process+0x10c2>
                }

                SDO->ODF_arg.dataLength = CO_SDO_BUFFER_SIZE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2220      	movs	r2, #32
 80069f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                SDO->bufferOffset = 0;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	871a      	strh	r2, [r3, #56]	; 0x38
            }

            /* blksize */
            len = CO_SDO_BUFFER_SIZE - SDO->bufferOffset;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8006a06:	f1c3 0320 	rsb	r3, r3, #32
 8006a0a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            SDO->blksize = (len > (7*127)) ? 127 : (len / 7);
 8006a0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006a12:	f240 3279 	movw	r2, #889	; 0x379
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d80b      	bhi.n	8006a32 <CO_SDO_process+0x78e>
 8006a1a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8006a1e:	4ba9      	ldr	r3, [pc, #676]	; (8006cc4 <CO_SDO_process+0xa20>)
 8006a20:	fba3 1302 	umull	r1, r3, r3, r2
 8006a24:	1ad2      	subs	r2, r2, r3
 8006a26:	0852      	lsrs	r2, r2, #1
 8006a28:	4413      	add	r3, r2
 8006a2a:	089b      	lsrs	r3, r3, #2
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	b2da      	uxtb	r2, r3
 8006a30:	e000      	b.n	8006a34 <CO_SDO_process+0x790>
 8006a32:	227f      	movs	r2, #127	; 0x7f
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
            SDO->CANtxBuff->data[2] = SDO->blksize;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 8006a44:	71da      	strb	r2, [r3, #7]

            /* set next state */
            if(lastSegmentInSubblock) {
 8006a46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d004      	beq.n	8006a58 <CO_SDO_process+0x7b4>
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_END;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2217      	movs	r2, #23
 8006a52:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8006a56:	e00f      	b.n	8006a78 <CO_SDO_process+0x7d4>
            }
            else if(SDO->bufferOffset >= CO_SDO_BUFFER_SIZE) {
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8006a5c:	2b1f      	cmp	r3, #31
 8006a5e:	d907      	bls.n	8006a70 <CO_SDO_process+0x7cc>
                CO_SDO_abort(SDO, CO_SDO_AB_DEVICE_INCOMPAT);
 8006a60:	4999      	ldr	r1, [pc, #612]	; (8006cc8 <CO_SDO_process+0xa24>)
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f7ff fbe2 	bl	800622c <CO_SDO_abort>
                return -1;
 8006a68:	f04f 33ff 	mov.w	r3, #4294967295
 8006a6c:	f000 bc7b 	b.w	8007366 <CO_SDO_process+0x10c2>
            }
            else {
                SDO->state = CO_SDO_ST_DOWNLOAD_BL_SUBBLOCK;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2215      	movs	r2, #21
 8006a74:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            }

            /* send response */
            sendResponse = true;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

            break;
 8006a7e:	f000 bc5a 	b.w	8007336 <CO_SDO_process+0x1092>
        }

        case CO_SDO_ST_DOWNLOAD_BL_END:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE1U) != 0xC1U){
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
 8006a8a:	2bc1      	cmp	r3, #193	; 0xc1
 8006a8c:	d007      	beq.n	8006a9e <CO_SDO_process+0x7fa>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8006a8e:	498f      	ldr	r1, [pc, #572]	; (8006ccc <CO_SDO_process+0xa28>)
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f7ff fbcb 	bl	800622c <CO_SDO_abort>
                return -1;
 8006a96:	f04f 33ff 	mov.w	r3, #4294967295
 8006a9a:	f000 bc64 	b.w	8007366 <CO_SDO_process+0x10c2>
            }

            /* number of bytes in the last segment of the last block that do not contain data. */
            len = (SDO->CANrxData[0]>>2U) & 0x07U;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	089b      	lsrs	r3, r3, #2
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	f003 0307 	and.w	r3, r3, #7
 8006aac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            SDO->bufferOffset -= len;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8006ab4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	871a      	strh	r2, [r3, #56]	; 0x38

            /* calculate and verify CRC, if enabled */
            if(SDO->crcEnabled){
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d025      	beq.n	8006b16 <CO_SDO_process+0x872>
                uint16_t crc;
                SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->bufferOffset, SDO->crc);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006ada:	461a      	mov	r2, r3
 8006adc:	f001 fb3a 	bl	8008154 <crc16_ccitt>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

                CO_memcpySwap2(&crc, &SDO->CANrxData[1]);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	1c5a      	adds	r2, r3, #1
 8006aee:	f107 031e 	add.w	r3, r7, #30
 8006af2:	4611      	mov	r1, r2
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7fe fe54 	bl	80057a2 <CO_memcpySwap2>

                if(SDO->crc != crc){
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8006b00:	8bfb      	ldrh	r3, [r7, #30]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d007      	beq.n	8006b16 <CO_SDO_process+0x872>
                    CO_SDO_abort(SDO, CO_SDO_AB_CRC);   /* CRC error (block mode only). */
 8006b06:	4972      	ldr	r1, [pc, #456]	; (8006cd0 <CO_SDO_process+0xa2c>)
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f7ff fb8f 	bl	800622c <CO_SDO_abort>
                    return -1;
 8006b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b12:	f000 bc28 	b.w	8007366 <CO_SDO_process+0x10c2>
                }
            }

            /* write data to the Object dictionary */
            SDO->ODF_arg.lastSegment = true;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
            abortCode = CO_SDO_writeOD(SDO, SDO->bufferOffset);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8006b22:	4619      	mov	r1, r3
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f7ff faf3 	bl	8006110 <CO_SDO_writeOD>
 8006b2a:	62f8      	str	r0, [r7, #44]	; 0x2c
            if(abortCode != 0U){
 8006b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d007      	beq.n	8006b42 <CO_SDO_process+0x89e>
                CO_SDO_abort(SDO, abortCode);
 8006b32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f7ff fb79 	bl	800622c <CO_SDO_abort>
                return -1;
 8006b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b3e:	f000 bc12 	b.w	8007366 <CO_SDO_process+0x10c2>
            }

            /* send response */
            SDO->CANtxBuff->data[0] = 0xA1;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b46:	22a1      	movs	r2, #161	; 0xa1
 8006b48:	715a      	strb	r2, [r3, #5]
            SDO->state = CO_SDO_ST_IDLE;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            sendResponse = true;
 8006b52:	2301      	movs	r3, #1
 8006b54:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 8006b58:	e3ed      	b.n	8007336 <CO_SDO_process+0x1092>
        }

        case CO_SDO_ST_UPLOAD_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	7852      	ldrb	r2, [r2, #1]
 8006b62:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	7892      	ldrb	r2, [r2, #2]
 8006b6c:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	78d2      	ldrb	r2, [r2, #3]
 8006b76:	721a      	strb	r2, [r3, #8]

            /* Expedited transfer */
            if(SDO->ODF_arg.dataLength <= 4U){
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006b7e:	2b04      	cmp	r3, #4
 8006b80:	d834      	bhi.n	8006bec <CO_SDO_process+0x948>
                for(i=0U; i<SDO->ODF_arg.dataLength; i++)
 8006b82:	2300      	movs	r3, #0
 8006b84:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006b88:	e012      	b.n	8006bb0 <CO_SDO_process+0x90c>
                    SDO->CANtxBuff->data[4U+i] = SDO->ODF_arg.data[i];
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b92:	18d1      	adds	r1, r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006b98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	7809      	ldrb	r1, [r1, #0]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	460a      	mov	r2, r1
 8006ba4:	715a      	strb	r2, [r3, #5]
                for(i=0U; i<SDO->ODF_arg.dataLength; i++)
 8006ba6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006baa:	3301      	adds	r3, #1
 8006bac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006bb6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d3e5      	bcc.n	8006b8a <CO_SDO_process+0x8e6>

                SDO->CANtxBuff->data[0] = 0x43U | ((4U-SDO->ODF_arg.dataLength) << 2U);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	f1c3 0304 	rsb	r3, r3, #4
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bd4:	f042 0243 	orr.w	r2, r2, #67	; 0x43
 8006bd8:	b2d2      	uxtb	r2, r2
 8006bda:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

                sendResponse = true;
 8006be4:	2301      	movs	r3, #1
 8006be6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                }

                /* send response */
                sendResponse = true;
            }
            break;
 8006bea:	e3a4      	b.n	8007336 <CO_SDO_process+0x1092>
                SDO->bufferOffset = 0U;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	871a      	strh	r2, [r3, #56]	; 0x38
                SDO->sequence = 0U;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENTED;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2222      	movs	r2, #34	; 0x22
 8006bfe:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                if(SDO->ODF_arg.dataLengthTotal != 0U){
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d010      	beq.n	8006c2c <CO_SDO_process+0x988>
                    uint32_t len = SDO->ODF_arg.dataLengthTotal;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c0e:	61bb      	str	r3, [r7, #24]
                    CO_memcpySwap4(&SDO->CANtxBuff->data[4], &len);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c14:	3309      	adds	r3, #9
 8006c16:	f107 0218 	add.w	r2, r7, #24
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7fe fdd8 	bl	80057d2 <CO_memcpySwap4>
                    SDO->CANtxBuff->data[0] = 0x41U;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c26:	2241      	movs	r2, #65	; 0x41
 8006c28:	715a      	strb	r2, [r3, #5]
 8006c2a:	e003      	b.n	8006c34 <CO_SDO_process+0x990>
                    SDO->CANtxBuff->data[0] = 0x40U;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c30:	2240      	movs	r2, #64	; 0x40
 8006c32:	715a      	strb	r2, [r3, #5]
                sendResponse = true;
 8006c34:	2301      	movs	r3, #1
 8006c36:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 8006c3a:	e37c      	b.n	8007336 <CO_SDO_process+0x1092>
        }

        case CO_SDO_ST_UPLOAD_SEGMENTED:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE0U) != 0x60U){
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006c44:	2b60      	cmp	r3, #96	; 0x60
 8006c46:	d006      	beq.n	8006c56 <CO_SDO_process+0x9b2>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8006c48:	4920      	ldr	r1, [pc, #128]	; (8006ccc <CO_SDO_process+0xa28>)
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f7ff faee 	bl	800622c <CO_SDO_abort>
                return -1;
 8006c50:	f04f 33ff 	mov.w	r3, #4294967295
 8006c54:	e387      	b.n	8007366 <CO_SDO_process+0x10c2>
            }

            /* verify toggle bit */
            i = ((SDO->CANrxData[0]&0x10U) != 0) ? 1U : 0U;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	091b      	lsrs	r3, r3, #4
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            if(i != SDO->sequence){
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d006      	beq.n	8006c84 <CO_SDO_process+0x9e0>
                CO_SDO_abort(SDO, CO_SDO_AB_TOGGLE_BIT);/* toggle bit not alternated */
 8006c76:	4917      	ldr	r1, [pc, #92]	; (8006cd4 <CO_SDO_process+0xa30>)
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f7ff fad7 	bl	800622c <CO_SDO_abort>
                return -1;
 8006c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c82:	e370      	b.n	8007366 <CO_SDO_process+0x10c2>
            }

            /* calculate length to be sent */
            len = SDO->ODF_arg.dataLength - SDO->bufferOffset;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            if(len > 7U) len = 7U;
 8006c94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006c98:	2b07      	cmp	r3, #7
 8006c9a:	d902      	bls.n	8006ca2 <CO_SDO_process+0x9fe>
 8006c9c:	2307      	movs	r3, #7
 8006c9e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

            /* If data type is domain, re-fill the data buffer if neccessary and indicated so. */
            if((SDO->ODF_arg.ODdataStorage == 0) && (len < 7U) && (!SDO->ODF_arg.lastSegment)){
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d17a      	bne.n	8006da0 <CO_SDO_process+0xafc>
 8006caa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006cae:	2b06      	cmp	r3, #6
 8006cb0:	d876      	bhi.n	8006da0 <CO_SDO_process+0xafc>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d171      	bne.n	8006da0 <CO_SDO_process+0xafc>
                /* copy previous data to the beginning */
                for(i=0U; i<len; i++){
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006cc2:	e01e      	b.n	8006d02 <CO_SDO_process+0xa5e>
 8006cc4:	24924925 	.word	0x24924925
 8006cc8:	06040047 	.word	0x06040047
 8006ccc:	05040001 	.word	0x05040001
 8006cd0:	05040004 	.word	0x05040004
 8006cd4:	05030000 	.word	0x05030000
                    SDO->ODF_arg.data[i] = SDO->ODF_arg.data[SDO->bufferOffset+i];
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8006ce0:	4611      	mov	r1, r2
 8006ce2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006ce6:	440a      	add	r2, r1
 8006ce8:	441a      	add	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006cee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006cf2:	440b      	add	r3, r1
 8006cf4:	7812      	ldrb	r2, [r2, #0]
 8006cf6:	701a      	strb	r2, [r3, #0]
                for(i=0U; i<len; i++){
 8006cf8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006d02:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006d06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d3e4      	bcc.n	8006cd8 <CO_SDO_process+0xa34>
                }

                /* move the beginning of the data buffer */
                SDO->ODF_arg.data += len;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006d16:	441a      	add	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	641a      	str	r2, [r3, #64]	; 0x40
                SDO->ODF_arg.dataLength = CO_OD_getLength(SDO, SDO->entryNo, SDO->ODF_arg.subIndex) - len;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006d26:	461a      	mov	r2, r3
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f7fe ffb4 	bl	8005c96 <CO_OD_getLength>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	461a      	mov	r2, r3
 8006d32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

                /* read next data from Object dictionary function */
                abortCode = CO_SDO_readOD(SDO, CO_SDO_BUFFER_SIZE);
 8006d40:	2120      	movs	r1, #32
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f7ff f960 	bl	8006008 <CO_SDO_readOD>
 8006d48:	62f8      	str	r0, [r7, #44]	; 0x2c
                if(abortCode != 0U){
 8006d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d006      	beq.n	8006d5e <CO_SDO_process+0xaba>
                    CO_SDO_abort(SDO, abortCode);
 8006d50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f7ff fa6a 	bl	800622c <CO_SDO_abort>
                    return -1;
 8006d58:	f04f 33ff 	mov.w	r3, #4294967295
 8006d5c:	e303      	b.n	8007366 <CO_SDO_process+0x10c2>
                }

                /* return to the original data buffer */
                SDO->ODF_arg.data -= len;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006d66:	425b      	negs	r3, r3
 8006d68:	441a      	add	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	641a      	str	r2, [r3, #64]	; 0x40
                SDO->ODF_arg.dataLength +=  len;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8006d74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006d78:	4413      	add	r3, r2
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                SDO->bufferOffset = 0;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	871a      	strh	r2, [r3, #56]	; 0x38

                /* re-calculate the length */
                len = SDO->ODF_arg.dataLength;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006d8e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
                if(len > 7U) len = 7U;
 8006d92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006d96:	2b07      	cmp	r3, #7
 8006d98:	d902      	bls.n	8006da0 <CO_SDO_process+0xafc>
 8006d9a:	2307      	movs	r3, #7
 8006d9c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            }

            /* fill response data bytes */
            for(i=0U; i<len; i++)
 8006da0:	2300      	movs	r3, #0
 8006da2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006da6:	e016      	b.n	8006dd6 <CO_SDO_process+0xb32>
                SDO->CANtxBuff->data[i+1] = SDO->ODF_arg.data[SDO->bufferOffset++];
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8006db0:	1c59      	adds	r1, r3, #1
 8006db2:	b288      	uxth	r0, r1
 8006db4:	68f9      	ldr	r1, [r7, #12]
 8006db6:	8708      	strh	r0, [r1, #56]	; 0x38
 8006db8:	18d1      	adds	r1, r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006dbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	7809      	ldrb	r1, [r1, #0]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	460a      	mov	r2, r1
 8006dca:	715a      	strb	r2, [r3, #5]
            for(i=0U; i<len; i++)
 8006dcc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006dd6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006dda:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d3e2      	bcc.n	8006da8 <CO_SDO_process+0xb04>

            /* first response byte */
            SDO->CANtxBuff->data[0] = 0x00 | (SDO->sequence ? 0x10 : 0x00) | ((7-len)<<1);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <CO_SDO_process+0xb4c>
 8006dec:	2210      	movs	r2, #16
 8006dee:	e000      	b.n	8006df2 <CO_SDO_process+0xb4e>
 8006df0:	2200      	movs	r2, #0
 8006df2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006df6:	f1c3 0307 	rsb	r3, r3, #7
 8006dfa:	005b      	lsls	r3, r3, #1
 8006dfc:	b25b      	sxtb	r3, r3
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	b25a      	sxtb	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e06:	b2d2      	uxtb	r2, r2
 8006e08:	715a      	strb	r2, [r3, #5]
            SDO->sequence = (SDO->sequence) ? 0 : 1;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	bf0c      	ite	eq
 8006e14:	2301      	moveq	r3, #1
 8006e16:	2300      	movne	r3, #0
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

            /* verify end of transfer */
            if((SDO->bufferOffset == SDO->ODF_arg.dataLength) && (SDO->ODF_arg.lastSegment)){
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d111      	bne.n	8006e54 <CO_SDO_process+0xbb0>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00c      	beq.n	8006e54 <CO_SDO_process+0xbb0>
                SDO->CANtxBuff->data[0] |= 0x01;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e3e:	795a      	ldrb	r2, [r3, #5]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e44:	f042 0201 	orr.w	r2, r2, #1
 8006e48:	b2d2      	uxtb	r2, r2
 8006e4a:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            }

            /* send response */
            sendResponse = true;
 8006e54:	2301      	movs	r3, #1
 8006e56:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 8006e5a:	e26c      	b.n	8007336 <CO_SDO_process+0x1092>
        }

        case CO_SDO_ST_UPLOAD_BL_INITIATE:{
            /* default response */
            SDO->CANtxBuff->data[1] = SDO->CANrxData[1];
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	7852      	ldrb	r2, [r2, #1]
 8006e64:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = SDO->CANrxData[2];
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	7892      	ldrb	r2, [r2, #2]
 8006e6e:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->CANrxData[3];
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	78d2      	ldrb	r2, [r2, #3]
 8006e78:	721a      	strb	r2, [r3, #8]

            /* calculate CRC, if enabled */
            if((SDO->CANrxData[0] & 0x04U) != 0U){
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	f003 0304 	and.w	r3, r3, #4
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d012      	beq.n	8006eac <CO_SDO_process+0xc08>
                SDO->crcEnabled = true;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
                SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->ODF_arg.dataLength, 0);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006e98:	2200      	movs	r2, #0
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	f001 f95a 	bl	8008154 <crc16_ccitt>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8006eaa:	e007      	b.n	8006ebc <CO_SDO_process+0xc18>
            }
            else{
                SDO->crcEnabled = false;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
                SDO->crc = 0;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
            }

            /* Number of segments per block */
            SDO->blksize = SDO->CANrxData[4];
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	791a      	ldrb	r2, [r3, #4]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66

            /* verify client subcommand */
            if((SDO->CANrxData[0]&0x03U) != 0x00U){
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	f003 0303 	and.w	r3, r3, #3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d006      	beq.n	8006ee0 <CO_SDO_process+0xc3c>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8006ed2:	499e      	ldr	r1, [pc, #632]	; (800714c <CO_SDO_process+0xea8>)
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f7ff f9a9 	bl	800622c <CO_SDO_abort>
                return -1;
 8006eda:	f04f 33ff 	mov.w	r3, #4294967295
 8006ede:	e242      	b.n	8007366 <CO_SDO_process+0x10c2>
            }

            /* verify blksize and if SDO data buffer is large enough */
            if((SDO->blksize < 1U) || (SDO->blksize > 127U) ||
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d016      	beq.n	8006f18 <CO_SDO_process+0xc74>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8006ef0:	b25b      	sxtb	r3, r3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	db10      	blt.n	8006f18 <CO_SDO_process+0xc74>
               (((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment))){
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8006efc:	461a      	mov	r2, r3
 8006efe:	4613      	mov	r3, r2
 8006f00:	00db      	lsls	r3, r3, #3
 8006f02:	1a9b      	subs	r3, r3, r2
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
            if((SDO->blksize < 1U) || (SDO->blksize > 127U) ||
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d90b      	bls.n	8006f26 <CO_SDO_process+0xc82>
               (((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment))){
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d106      	bne.n	8006f26 <CO_SDO_process+0xc82>
                CO_SDO_abort(SDO, CO_SDO_AB_BLOCK_SIZE); /* Invalid block size (block mode only). */
 8006f18:	498d      	ldr	r1, [pc, #564]	; (8007150 <CO_SDO_process+0xeac>)
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f7ff f986 	bl	800622c <CO_SDO_abort>
                return -1;
 8006f20:	f04f 33ff 	mov.w	r3, #4294967295
 8006f24:	e21f      	b.n	8007366 <CO_SDO_process+0x10c2>
            }

            /* indicate data size, if known */
            if(SDO->ODF_arg.dataLengthTotal != 0U){
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d010      	beq.n	8006f50 <CO_SDO_process+0xcac>
                uint32_t len = SDO->ODF_arg.dataLengthTotal;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f32:	617b      	str	r3, [r7, #20]
                CO_memcpySwap4(&SDO->CANtxBuff->data[4], &len);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f38:	3309      	adds	r3, #9
 8006f3a:	f107 0214 	add.w	r2, r7, #20
 8006f3e:	4611      	mov	r1, r2
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fe fc46 	bl	80057d2 <CO_memcpySwap4>
                SDO->CANtxBuff->data[0] = 0xC6U;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f4a:	22c6      	movs	r2, #198	; 0xc6
 8006f4c:	715a      	strb	r2, [r3, #5]
 8006f4e:	e003      	b.n	8006f58 <CO_SDO_process+0xcb4>
            }
            else{
                SDO->CANtxBuff->data[0] = 0xC4U;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f54:	22c4      	movs	r2, #196	; 0xc4
 8006f56:	715a      	strb	r2, [r3, #5]
            }

            /* send response */
            SDO->state = CO_SDO_ST_UPLOAD_BL_INITIATE_2;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2225      	movs	r2, #37	; 0x25
 8006f5c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            sendResponse = true;
 8006f60:	2301      	movs	r3, #1
 8006f62:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 8006f66:	e1e6      	b.n	8007336 <CO_SDO_process+0x1092>
        }

        case CO_SDO_ST_UPLOAD_BL_INITIATE_2:{
            /* verify client command specifier and subcommand */
            if((SDO->CANrxData[0]&0xE3U) != 0xA3U){
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
 8006f70:	2ba3      	cmp	r3, #163	; 0xa3
 8006f72:	d006      	beq.n	8006f82 <CO_SDO_process+0xcde>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8006f74:	4975      	ldr	r1, [pc, #468]	; (800714c <CO_SDO_process+0xea8>)
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f7ff f958 	bl	800622c <CO_SDO_abort>
                return -1;
 8006f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f80:	e1f1      	b.n	8007366 <CO_SDO_process+0x10c2>
            }

            SDO->bufferOffset = 0;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	871a      	strh	r2, [r3, #56]	; 0x38
            SDO->sequence = 0;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
            SDO->endOfTransfer = false;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
            SDO->CANrxNew = false;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
            SDO->state = CO_SDO_ST_UPLOAD_BL_SUBBLOCK;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2226      	movs	r2, #38	; 0x26
 8006fa4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            /* continue in next case */
        }

        case CO_SDO_ST_UPLOAD_BL_SUBBLOCK:{
            /* is block confirmation received */
            if(SDO->CANrxNew){
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f000 8121 	beq.w	80071f6 <CO_SDO_process+0xf52>
                uint8_t ackseq;
                uint16_t j;

                /* verify client command specifier and subcommand */
                if((SDO->CANrxData[0]&0xE3U) != 0xA2U){
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	f003 03e3 	and.w	r3, r3, #227	; 0xe3
 8006fbc:	2ba2      	cmp	r3, #162	; 0xa2
 8006fbe:	d006      	beq.n	8006fce <CO_SDO_process+0xd2a>
                    CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 8006fc0:	4962      	ldr	r1, [pc, #392]	; (800714c <CO_SDO_process+0xea8>)
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f7ff f932 	bl	800622c <CO_SDO_abort>
                    return -1;
 8006fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8006fcc:	e1cb      	b.n	8007366 <CO_SDO_process+0x10c2>
                }

                ackseq = SDO->CANrxData[1];   /* sequence number of the last segment, that was received correctly. */
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	785b      	ldrb	r3, [r3, #1]
 8006fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

                /* verify if response is too early */
                if(ackseq > SDO->sequence){
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006fdc:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d906      	bls.n	8006ff2 <CO_SDO_process+0xd4e>
                    CO_SDO_abort(SDO, CO_SDO_AB_SEQ_NUM); /* Invalid sequence */
 8006fe4:	495b      	ldr	r1, [pc, #364]	; (8007154 <CO_SDO_process+0xeb0>)
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f7ff f920 	bl	800622c <CO_SDO_abort>
                    return -1;
 8006fec:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff0:	e1b9      	b.n	8007366 <CO_SDO_process+0x10c2>
                }

                /* end of transfer */
                if((SDO->endOfTransfer) && (ackseq == SDO->blksize)){
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d02a      	beq.n	8007052 <CO_SDO_process+0xdae>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8007002:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007006:	429a      	cmp	r2, r3
 8007008:	d123      	bne.n	8007052 <CO_SDO_process+0xdae>
                    /* first response byte */
                    SDO->CANtxBuff->data[0] = 0xC1 | ((7 - SDO->lastLen) << 2);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8007010:	f1c3 0307 	rsb	r3, r3, #7
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	b25b      	sxtb	r3, r3
 8007018:	f063 033e 	orn	r3, r3, #62	; 0x3e
 800701c:	b25a      	sxtb	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007022:	b2d2      	uxtb	r2, r2
 8007024:	715a      	strb	r2, [r3, #5]

                    /* CRC */
                    if(SDO->crcEnabled)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800702c:	2b00      	cmp	r3, #0
 800702e:	d008      	beq.n	8007042 <CO_SDO_process+0xd9e>
                        CO_memcpySwap2(&SDO->CANtxBuff->data[1], &SDO->crc);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007034:	1d9a      	adds	r2, r3, #6
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	3368      	adds	r3, #104	; 0x68
 800703a:	4619      	mov	r1, r3
 800703c:	4610      	mov	r0, r2
 800703e:	f7fe fbb0 	bl	80057a2 <CO_memcpySwap2>

                    SDO->state = CO_SDO_ST_UPLOAD_BL_END;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2227      	movs	r2, #39	; 0x27
 8007046:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

                    /* send response */
                    sendResponse = true;
 800704a:	2301      	movs	r3, #1
 800704c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                    break;
 8007050:	e171      	b.n	8007336 <CO_SDO_process+0x1092>
                }

                /* move remaining data to the beginning */
                for(i=ackseq*7, j=0; i<SDO->ODF_arg.dataLength; i++, j++)
 8007052:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007056:	b29b      	uxth	r3, r3
 8007058:	461a      	mov	r2, r3
 800705a:	00d2      	lsls	r2, r2, #3
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007062:	2300      	movs	r3, #0
 8007064:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007066:	e012      	b.n	800708e <CO_SDO_process+0xdea>
                    SDO->ODF_arg.data[j] = SDO->ODF_arg.data[i];
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800706c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007070:	441a      	add	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007076:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007078:	440b      	add	r3, r1
 800707a:	7812      	ldrb	r2, [r2, #0]
 800707c:	701a      	strb	r2, [r3, #0]
                for(i=ackseq*7, j=0; i<SDO->ODF_arg.dataLength; i++, j++)
 800707e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007082:	3301      	adds	r3, #1
 8007084:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007088:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800708a:	3301      	adds	r3, #1
 800708c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007094:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007098:	429a      	cmp	r2, r3
 800709a:	d3e5      	bcc.n	8007068 <CO_SDO_process+0xdc4>

                /* set remaining data length in buffer */
                SDO->ODF_arg.dataLength -= ackseq * 7U;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80070a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	4619      	mov	r1, r3
 80070aa:	00c9      	lsls	r1, r1, #3
 80070ac:	1acb      	subs	r3, r1, r3
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

                /* new block size */
                SDO->blksize = SDO->CANrxData[2];
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	789a      	ldrb	r2, [r3, #2]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66

                /* If data type is domain, re-fill the data buffer if necessary and indicated so. */
                if((SDO->ODF_arg.ODdataStorage == 0) && (SDO->ODF_arg.dataLength < (SDO->blksize*7U)) && (!SDO->ODF_arg.lastSegment)){
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d16d      	bne.n	80071a8 <CO_SDO_process+0xf04>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80070d2:	4619      	mov	r1, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80070da:	461a      	mov	r2, r3
 80070dc:	4613      	mov	r3, r2
 80070de:	00db      	lsls	r3, r3, #3
 80070e0:	1a9b      	subs	r3, r3, r2
 80070e2:	4299      	cmp	r1, r3
 80070e4:	d260      	bcs.n	80071a8 <CO_SDO_process+0xf04>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d15b      	bne.n	80071a8 <CO_SDO_process+0xf04>
                    /* move the beginning of the data buffer */
                    len = SDO->ODF_arg.dataLength; /* length of valid data in buffer */
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80070f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
                    SDO->ODF_arg.data += len;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007102:	441a      	add	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	641a      	str	r2, [r3, #64]	; 0x40
                    SDO->ODF_arg.dataLength = CO_OD_getLength(SDO, SDO->entryNo, SDO->ODF_arg.subIndex) - len;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007112:	461a      	mov	r2, r3
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f7fe fdbe 	bl	8005c96 <CO_OD_getLength>
 800711a:	4603      	mov	r3, r0
 800711c:	461a      	mov	r2, r3
 800711e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	b29a      	uxth	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

                    /* read next data from Object dictionary function */
                    abortCode = CO_SDO_readOD(SDO, CO_SDO_BUFFER_SIZE);
 800712c:	2120      	movs	r1, #32
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f7fe ff6a 	bl	8006008 <CO_SDO_readOD>
 8007134:	62f8      	str	r0, [r7, #44]	; 0x2c
                    if(abortCode != 0U){
 8007136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00d      	beq.n	8007158 <CO_SDO_process+0xeb4>
                        CO_SDO_abort(SDO, abortCode);
 800713c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f7ff f874 	bl	800622c <CO_SDO_abort>
                        return -1;
 8007144:	f04f 33ff 	mov.w	r3, #4294967295
 8007148:	e10d      	b.n	8007366 <CO_SDO_process+0x10c2>
 800714a:	bf00      	nop
 800714c:	05040001 	.word	0x05040001
 8007150:	05040002 	.word	0x05040002
 8007154:	05040003 	.word	0x05040003
                    }

                    /* calculate CRC on next bytes, if enabled */
                    if(SDO->crcEnabled){
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800715e:	2b00      	cmp	r3, #0
 8007160:	d010      	beq.n	8007184 <CO_SDO_process+0xee0>
                        SDO->crc = crc16_ccitt(SDO->ODF_arg.data, SDO->ODF_arg.dataLength, SDO->crc);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800716c:	4619      	mov	r1, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007174:	461a      	mov	r2, r3
 8007176:	f000 ffed 	bl	8008154 <crc16_ccitt>
 800717a:	4603      	mov	r3, r0
 800717c:	461a      	mov	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
                    }

                  /* return to the original data buffer */
                    SDO->ODF_arg.data -= len;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007188:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800718c:	425b      	negs	r3, r3
 800718e:	441a      	add	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	641a      	str	r2, [r3, #64]	; 0x40
                    SDO->ODF_arg.dataLength +=  len;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800719a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800719e:	4413      	add	r3, r2
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                }

                /* verify if SDO data buffer is large enough */
                if(((SDO->blksize*7U) > SDO->ODF_arg.dataLength) && (!SDO->ODF_arg.lastSegment)){
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80071ae:	461a      	mov	r2, r3
 80071b0:	4613      	mov	r3, r2
 80071b2:	00db      	lsls	r3, r3, #3
 80071b4:	1a9b      	subs	r3, r3, r2
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 80071bc:	4293      	cmp	r3, r2
 80071be:	d90b      	bls.n	80071d8 <CO_SDO_process+0xf34>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d106      	bne.n	80071d8 <CO_SDO_process+0xf34>
                    CO_SDO_abort(SDO, CO_SDO_AB_BLOCK_SIZE); /* Invalid block size (block mode only). */
 80071ca:	4969      	ldr	r1, [pc, #420]	; (8007370 <CO_SDO_process+0x10cc>)
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f7ff f82d 	bl	800622c <CO_SDO_abort>
                    return -1;
 80071d2:	f04f 33ff 	mov.w	r3, #4294967295
 80071d6:	e0c6      	b.n	8007366 <CO_SDO_process+0x10c2>
                }

                SDO->bufferOffset = 0U;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	871a      	strh	r2, [r3, #56]	; 0x38
                SDO->sequence = 0U;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
                SDO->endOfTransfer = false;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

                /* clear flag here */
                SDO->CANrxNew = false;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
            }

            /* return, if all segments was already transfered or on end of transfer */
            if((SDO->sequence == SDO->blksize) || (SDO->endOfTransfer)){
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8007202:	429a      	cmp	r2, r3
 8007204:	d004      	beq.n	8007210 <CO_SDO_process+0xf6c>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800720c:	2b00      	cmp	r3, #0
 800720e:	d001      	beq.n	8007214 <CO_SDO_process+0xf70>
                return 1;/* don't clear the SDO->CANrxNew flag, so return directly */
 8007210:	2301      	movs	r3, #1
 8007212:	e0a8      	b.n	8007366 <CO_SDO_process+0x10c2>
            }

            /* reset timeout */
            SDO->timeoutTimer = 0;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

            /* calculate length to be sent */
            len = SDO->ODF_arg.dataLength - SDO->bufferOffset;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            if(len > 7U){
 800722c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007230:	2b07      	cmp	r3, #7
 8007232:	d902      	bls.n	800723a <CO_SDO_process+0xf96>
                len = 7U;
 8007234:	2307      	movs	r3, #7
 8007236:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            }

            /* fill response data bytes */
            for(i=0U; i<len; i++){
 800723a:	2300      	movs	r3, #0
 800723c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007240:	e016      	b.n	8007270 <CO_SDO_process+0xfcc>
                SDO->CANtxBuff->data[i+1] = SDO->ODF_arg.data[SDO->bufferOffset++];
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800724a:	1c59      	adds	r1, r3, #1
 800724c:	b288      	uxth	r0, r1
 800724e:	68f9      	ldr	r1, [r7, #12]
 8007250:	8708      	strh	r0, [r1, #56]	; 0x38
 8007252:	18d1      	adds	r1, r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007258:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800725c:	3301      	adds	r3, #1
 800725e:	7809      	ldrb	r1, [r1, #0]
 8007260:	4413      	add	r3, r2
 8007262:	460a      	mov	r2, r1
 8007264:	715a      	strb	r2, [r3, #5]
            for(i=0U; i<len; i++){
 8007266:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800726a:	3301      	adds	r3, #1
 800726c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007270:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007274:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007278:	429a      	cmp	r2, r3
 800727a:	d3e2      	bcc.n	8007242 <CO_SDO_process+0xf9e>
            }

            /* first response byte */
            SDO->CANtxBuff->data[0] = ++SDO->sequence;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007282:	3301      	adds	r3, #1
 8007284:	b2da      	uxtb	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	f892 2062 	ldrb.w	r2, [r2, #98]	; 0x62
 8007296:	715a      	strb	r2, [r3, #5]

            /* verify end of transfer */
            if((SDO->bufferOffset == SDO->ODF_arg.dataLength) && (SDO->ODF_arg.lastSegment)){
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d11d      	bne.n	80072e2 <CO_SDO_process+0x103e>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d018      	beq.n	80072e2 <CO_SDO_process+0x103e>
                SDO->CANtxBuff->data[0] |= 0x80;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072b4:	795a      	ldrb	r2, [r3, #5]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072be:	b2d2      	uxtb	r2, r2
 80072c0:	715a      	strb	r2, [r3, #5]
                SDO->lastLen = len;
 80072c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80072c6:	b2da      	uxtb	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                SDO->blksize = SDO->sequence;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
                SDO->endOfTransfer = true;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
            }

            /* send response */
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072ea:	4619      	mov	r1, r3
 80072ec:	4610      	mov	r0, r2
 80072ee:	f000 fd5b 	bl	8007da8 <CO_CANsend>

            /* Set timerNext_ms to 0 to inform OS to call this function again without delay. */
            if(timerNext_ms != NULL){
 80072f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d002      	beq.n	80072fe <CO_SDO_process+0x105a>
                *timerNext_ms = 0;
 80072f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072fa:	2200      	movs	r2, #0
 80072fc:	801a      	strh	r2, [r3, #0]
            }

            /* don't clear the SDO->CANrxNew flag, so return directly */
            return 1;
 80072fe:	2301      	movs	r3, #1
 8007300:	e031      	b.n	8007366 <CO_SDO_process+0x10c2>
        }

        case CO_SDO_ST_UPLOAD_BL_END:{
            /* verify client command specifier */
            if((SDO->CANrxData[0]&0xE1U) != 0xA1U){
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	f003 03e1 	and.w	r3, r3, #225	; 0xe1
 800730a:	2ba1      	cmp	r3, #161	; 0xa1
 800730c:	d006      	beq.n	800731c <CO_SDO_process+0x1078>
                CO_SDO_abort(SDO, CO_SDO_AB_CMD);/* Client command specifier not valid or unknown. */
 800730e:	4919      	ldr	r1, [pc, #100]	; (8007374 <CO_SDO_process+0x10d0>)
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f7fe ff8b 	bl	800622c <CO_SDO_abort>
                return -1;
 8007316:	f04f 33ff 	mov.w	r3, #4294967295
 800731a:	e024      	b.n	8007366 <CO_SDO_process+0x10c2>
            }

            SDO->state = CO_SDO_ST_IDLE;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
            break;
 8007324:	e007      	b.n	8007336 <CO_SDO_process+0x1092>
        }

        default:{
            CO_SDO_abort(SDO, CO_SDO_AB_DEVICE_INCOMPAT);/* general internal incompatibility in the device */
 8007326:	4914      	ldr	r1, [pc, #80]	; (8007378 <CO_SDO_process+0x10d4>)
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f7fe ff7f 	bl	800622c <CO_SDO_abort>
            return -1;
 800732e:	f04f 33ff 	mov.w	r3, #4294967295
 8007332:	e018      	b.n	8007366 <CO_SDO_process+0x10c2>
            break;
 8007334:	bf00      	nop
        }
    }

    /* free buffer and send message */
    SDO->CANrxNew = false;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    if(sendResponse) {
 800733e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007342:	2b00      	cmp	r3, #0
 8007344:	d007      	beq.n	8007356 <CO_SDO_process+0x10b2>
        CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800734e:	4619      	mov	r1, r3
 8007350:	4610      	mov	r0, r2
 8007352:	f000 fd29 	bl	8007da8 <CO_CANsend>
    }

    if(SDO->state != CO_SDO_ST_IDLE){
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <CO_SDO_process+0x10c0>
        return 1;
 8007360:	2301      	movs	r3, #1
 8007362:	e000      	b.n	8007366 <CO_SDO_process+0x10c2>
    }

    return 0;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	374c      	adds	r7, #76	; 0x4c
 800736a:	46bd      	mov	sp, r7
 800736c:	bd90      	pop	{r4, r7, pc}
 800736e:	bf00      	nop
 8007370:	05040002 	.word	0x05040002
 8007374:	05040001 	.word	0x05040001
 8007378:	06040047 	.word	0x06040047

0800737c <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, const CO_CANrxMsg_t *msg){
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
    CO_SYNC_t *SYNC;
    uint8_t operState;

    SYNC = (CO_SYNC_t*)object;   /* this is the correct pointer type of the first argument */
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	60fb      	str	r3, [r7, #12]
    operState = *SYNC->operatingState;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	72fb      	strb	r3, [r7, #11]

    if((operState == CO_NMT_OPERATIONAL) || (operState == CO_NMT_PRE_OPERATIONAL)){
 8007392:	7afb      	ldrb	r3, [r7, #11]
 8007394:	2b05      	cmp	r3, #5
 8007396:	d002      	beq.n	800739e <CO_SYNC_receive+0x22>
 8007398:	7afb      	ldrb	r3, [r7, #11]
 800739a:	2b7f      	cmp	r3, #127	; 0x7f
 800739c:	d13b      	bne.n	8007416 <CO_SYNC_receive+0x9a>
        if(SYNC->counterOverflowValue == 0){
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	7d1b      	ldrb	r3, [r3, #20]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d112      	bne.n	80073cc <CO_SYNC_receive+0x50>
            if(msg->DLC == 0U){
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d103      	bne.n	80073b8 <CO_SYNC_receive+0x3c>
                SYNC->CANrxNew = true;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2201      	movs	r2, #1
 80073b4:	759a      	strb	r2, [r3, #22]
 80073b6:	e020      	b.n	80073fa <CO_SYNC_receive+0x7e>
            }
            else{
                SYNC->receiveError = (uint16_t)msg->DLC | 0x0100U;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073be:	b29b      	uxth	r3, r3
 80073c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	841a      	strh	r2, [r3, #32]
 80073ca:	e016      	b.n	80073fa <CO_SYNC_receive+0x7e>
            }
        }
        else{
            if(msg->DLC == 1U){
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d108      	bne.n	80073e8 <CO_SYNC_receive+0x6c>
                SYNC->counter = msg->data[0];
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	761a      	strb	r2, [r3, #24]
                SYNC->CANrxNew = true;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2201      	movs	r2, #1
 80073e4:	759a      	strb	r2, [r3, #22]
 80073e6:	e008      	b.n	80073fa <CO_SYNC_receive+0x7e>
            }
            else{
                SYNC->receiveError = (uint16_t)msg->DLC | 0x0200U;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	841a      	strh	r2, [r3, #32]
            }
        }
        if(SYNC->CANrxNew) {
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	7d9b      	ldrb	r3, [r3, #22]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d009      	beq.n	8007416 <CO_SYNC_receive+0x9a>
            SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	7ddb      	ldrb	r3, [r3, #23]
 8007406:	2b00      	cmp	r3, #0
 8007408:	bf0c      	ite	eq
 800740a:	2301      	moveq	r3, #1
 800740c:	2300      	movne	r3, #0
 800740e:	b2db      	uxtb	r3, r3
 8007410:	461a      	mov	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	75da      	strb	r2, [r3, #23]
        }
    }
}
 8007416:	bf00      	nop
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
	...

08007424 <CO_ODF_1005>:
/*
 * Function for accessing _COB ID SYNC Message_ (index 0x1005) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1005(CO_ODF_arg_t *ODF_arg){
 8007424:	b580      	push	{r7, lr}
 8007426:	b08a      	sub	sp, #40	; 0x28
 8007428:	af04      	add	r7, sp, #16
 800742a:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 800742c:	2300      	movs	r3, #0
 800742e:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	60fb      	str	r3, [r7, #12]
    value = CO_getUint32(ODF_arg->data);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	4618      	mov	r0, r3
 800743c:	f7fe f97e 	bl	800573c <CO_getUint32>
 8007440:	60b8      	str	r0, [r7, #8]

    if(!ODF_arg->reading){
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	7ddb      	ldrb	r3, [r3, #23]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d159      	bne.n	80074fe <CO_ODF_1005+0xda>
        uint8_t configureSyncProducer = 0;
 800744a:	2300      	movs	r3, #0
 800744c:	74fb      	strb	r3, [r7, #19]

        /* only 11-bit CAN identifier is supported */
        if(value & 0x20000000UL){
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d002      	beq.n	800745e <CO_ODF_1005+0x3a>
            ret = CO_SDO_AB_INVALID_VALUE;
 8007458:	4b2b      	ldr	r3, [pc, #172]	; (8007508 <CO_ODF_1005+0xe4>)
 800745a:	617b      	str	r3, [r7, #20]
 800745c:	e00d      	b.n	800747a <CO_ODF_1005+0x56>
        }
        else{
            /* is 'generate Sync messge' bit set? */
            if(value & 0x40000000UL){
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d008      	beq.n	800747a <CO_ODF_1005+0x56>
                /* if bit was set before, value can not be changed */
                if(SYNC->isProducer){
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	7a1b      	ldrb	r3, [r3, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d002      	beq.n	8007476 <CO_ODF_1005+0x52>
                    ret = CO_SDO_AB_DATA_DEV_STATE;
 8007470:	4b26      	ldr	r3, [pc, #152]	; (800750c <CO_ODF_1005+0xe8>)
 8007472:	617b      	str	r3, [r7, #20]
 8007474:	e001      	b.n	800747a <CO_ODF_1005+0x56>
                }
                else{
                    configureSyncProducer = 1;
 8007476:	2301      	movs	r3, #1
 8007478:	74fb      	strb	r3, [r7, #19]
                }
            }
        }

        /* configure sync producer and consumer */
        if(ret == CO_SDO_AB_NONE){
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d13e      	bne.n	80074fe <CO_ODF_1005+0xda>
            SYNC->COB_ID = (uint16_t)(value & 0x7FFU);
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	b29b      	uxth	r3, r3
 8007484:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007488:	b29a      	uxth	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	815a      	strh	r2, [r3, #10]

            if(configureSyncProducer){
 800748e:	7cfb      	ldrb	r3, [r7, #19]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d021      	beq.n	80074d8 <CO_ODF_1005+0xb4>
                uint8_t len = 0U;
 8007494:	2300      	movs	r3, #0
 8007496:	74bb      	strb	r3, [r7, #18]
                if(SYNC->counterOverflowValue != 0U){
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	7d1b      	ldrb	r3, [r3, #20]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d007      	beq.n	80074b0 <CO_ODF_1005+0x8c>
                    len = 1U;
 80074a0:	2301      	movs	r3, #1
 80074a2:	74bb      	strb	r3, [r7, #18]
                    SYNC->counter = 0U;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	761a      	strb	r2, [r3, #24]
                    SYNC->timer = 0U;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	61da      	str	r2, [r3, #28]
                }
                SYNC->CANtxBuff = CO_CANtxBufferInit(
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	895a      	ldrh	r2, [r3, #10]
 80074bc:	2300      	movs	r3, #0
 80074be:	9301      	str	r3, [sp, #4]
 80074c0:	7cbb      	ldrb	r3, [r7, #18]
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	2300      	movs	r3, #0
 80074c6:	f000 fc2c 	bl	8007d22 <CO_CANtxBufferInit>
 80074ca:	4602      	mov	r2, r0
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	631a      	str	r2, [r3, #48]	; 0x30
                        SYNC->CANdevTxIdx,      /* index of specific buffer inside CAN module */
                        SYNC->COB_ID,           /* CAN identifier */
                        0,                      /* rtr */
                        len,                    /* number of data bytes */
                        0);                     /* synchronous message flag bit */
                SYNC->isProducer = true;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2201      	movs	r2, #1
 80074d4:	721a      	strb	r2, [r3, #8]
 80074d6:	e002      	b.n	80074de <CO_ODF_1005+0xba>
            }
            else{
                SYNC->isProducer = false;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	721a      	strb	r2, [r3, #8]
            }

            CO_CANrxBufferInit(
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	895a      	ldrh	r2, [r3, #10]
 80074ea:	4b09      	ldr	r3, [pc, #36]	; (8007510 <CO_ODF_1005+0xec>)
 80074ec:	9302      	str	r3, [sp, #8]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	9301      	str	r3, [sp, #4]
 80074f2:	2300      	movs	r3, #0
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80074fa:	f000 fb8e 	bl	8007c1a <CO_CANrxBufferInit>
                    (void*)SYNC,            /* object passed to receive function */
                    CO_SYNC_receive);       /* this function will process received message */
        }
    }

    return ret;
 80074fe:	697b      	ldr	r3, [r7, #20]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3718      	adds	r7, #24
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	06090030 	.word	0x06090030
 800750c:	08000022 	.word	0x08000022
 8007510:	0800737d 	.word	0x0800737d

08007514 <CO_ODF_1006>:
/*
 * Function for accessing _Communication cycle period_ (index 0x1006) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1006(CO_ODF_arg_t *ODF_arg){
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint32_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 800751c:	2300      	movs	r3, #0
 800751e:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	613b      	str	r3, [r7, #16]
    value = CO_getUint32(ODF_arg->data);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	4618      	mov	r0, r3
 800752c:	f7fe f906 	bl	800573c <CO_getUint32>
 8007530:	60f8      	str	r0, [r7, #12]

    if(!ODF_arg->reading){
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	7ddb      	ldrb	r3, [r3, #23]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d11f      	bne.n	800757a <CO_ODF_1006+0x66>
        /* period transition from 0 to something */
        if((SYNC->periodTime == 0) && (value != 0)){
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d105      	bne.n	800754e <CO_ODF_1006+0x3a>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d002      	beq.n	800754e <CO_ODF_1006+0x3a>
            SYNC->counter = 0;
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	2200      	movs	r2, #0
 800754c:	761a      	strb	r2, [r3, #24]
        }

        SYNC->periodTime = value;
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	60da      	str	r2, [r3, #12]
        SYNC->periodTimeoutTime = (value / 2U) * 3U;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	085a      	lsrs	r2, r3, #1
 8007558:	4613      	mov	r3, r2
 800755a:	005b      	lsls	r3, r3, #1
 800755c:	441a      	add	r2, r3
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	611a      	str	r2, [r3, #16]
        /* overflow? */
        if(SYNC->periodTimeoutTime < value){
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	429a      	cmp	r2, r3
 800756a:	d903      	bls.n	8007574 <CO_ODF_1006+0x60>
            SYNC->periodTimeoutTime = 0xFFFFFFFFUL;
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	f04f 32ff 	mov.w	r2, #4294967295
 8007572:	611a      	str	r2, [r3, #16]
        }

        SYNC->timer = 0;
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	2200      	movs	r2, #0
 8007578:	61da      	str	r2, [r3, #28]
    }

    return ret;
 800757a:	697b      	ldr	r3, [r7, #20]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3718      	adds	r7, #24
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <CO_ODF_1019>:
/**
 * Function for accessing _Synchronous counter overflow value_ (index 0x1019) from SDO server.
 *
 * For more information see file CO_SDO.h.
 */
static CO_SDO_abortCode_t CO_ODF_1019(CO_ODF_arg_t *ODF_arg){
 8007584:	b580      	push	{r7, lr}
 8007586:	b088      	sub	sp, #32
 8007588:	af02      	add	r7, sp, #8
 800758a:	6078      	str	r0, [r7, #4]
    CO_SYNC_t *SYNC;
    uint8_t value;
    CO_SDO_abortCode_t ret = CO_SDO_AB_NONE;
 800758c:	2300      	movs	r3, #0
 800758e:	617b      	str	r3, [r7, #20]

    SYNC = (CO_SYNC_t*) ODF_arg->object;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	60fb      	str	r3, [r7, #12]
    value = ODF_arg->data[0];
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	72fb      	strb	r3, [r7, #11]

    if(!ODF_arg->reading){
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	7ddb      	ldrb	r3, [r3, #23]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d129      	bne.n	80075fa <CO_ODF_1019+0x76>
        uint8_t len = 0U;
 80075a6:	2300      	movs	r3, #0
 80075a8:	74fb      	strb	r3, [r7, #19]

        if(SYNC->periodTime){
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d002      	beq.n	80075b8 <CO_ODF_1019+0x34>
            ret = CO_SDO_AB_DATA_DEV_STATE;
 80075b2:	4b14      	ldr	r3, [pc, #80]	; (8007604 <CO_ODF_1019+0x80>)
 80075b4:	617b      	str	r3, [r7, #20]
 80075b6:	e020      	b.n	80075fa <CO_ODF_1019+0x76>
        }
        else if((value == 1) || (value > 240 && value <= 255)){
 80075b8:	7afb      	ldrb	r3, [r7, #11]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d002      	beq.n	80075c4 <CO_ODF_1019+0x40>
 80075be:	7afb      	ldrb	r3, [r7, #11]
 80075c0:	2bf0      	cmp	r3, #240	; 0xf0
 80075c2:	d902      	bls.n	80075ca <CO_ODF_1019+0x46>
            ret = CO_SDO_AB_INVALID_VALUE;
 80075c4:	4b10      	ldr	r3, [pc, #64]	; (8007608 <CO_ODF_1019+0x84>)
 80075c6:	617b      	str	r3, [r7, #20]
 80075c8:	e017      	b.n	80075fa <CO_ODF_1019+0x76>
        }
        else{
            SYNC->counterOverflowValue = value;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	7afa      	ldrb	r2, [r7, #11]
 80075ce:	751a      	strb	r2, [r3, #20]
            if(value != 0){
 80075d0:	7afb      	ldrb	r3, [r7, #11]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d001      	beq.n	80075da <CO_ODF_1019+0x56>
                len = 1U;
 80075d6:	2301      	movs	r3, #1
 80075d8:	74fb      	strb	r3, [r7, #19]
            }

            SYNC->CANtxBuff = CO_CANtxBufferInit(
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	895a      	ldrh	r2, [r3, #10]
 80075e6:	2300      	movs	r3, #0
 80075e8:	9301      	str	r3, [sp, #4]
 80075ea:	7cfb      	ldrb	r3, [r7, #19]
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	2300      	movs	r3, #0
 80075f0:	f000 fb97 	bl	8007d22 <CO_CANtxBufferInit>
 80075f4:	4602      	mov	r2, r0
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	631a      	str	r2, [r3, #48]	; 0x30
                    len,                    /* number of data bytes */
                    0);                     /* synchronous message flag bit */
        }
    }

    return ret;
 80075fa:	697b      	ldr	r3, [r7, #20]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3718      	adds	r7, #24
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	08000022 	.word	0x08000022
 8007608:	06090030 	.word	0x06090030

0800760c <CO_SYNC_init>:
        uint8_t                 synchronousCounterOverflowValue,
        CO_CANmodule_t         *CANdevRx,
        uint16_t                CANdevRxIdx,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b08a      	sub	sp, #40	; 0x28
 8007610:	af04      	add	r7, sp, #16
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
 8007618:	603b      	str	r3, [r7, #0]
    uint8_t len = 0;
 800761a:	2300      	movs	r3, #0
 800761c:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if(SYNC==NULL || em==NULL || SDO==NULL || operatingState==NULL ||
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00e      	beq.n	8007642 <CO_SYNC_init+0x36>
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00b      	beq.n	8007642 <CO_SYNC_init+0x36>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d008      	beq.n	8007642 <CO_SYNC_init+0x36>
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d005      	beq.n	8007642 <CO_SYNC_init+0x36>
 8007636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <CO_SYNC_init+0x36>
        CANdevRx==NULL || CANdevTx==NULL){
 800763c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800763e:	2b00      	cmp	r3, #0
 8007640:	d102      	bne.n	8007648 <CO_SYNC_init+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007642:	f04f 33ff 	mov.w	r3, #4294967295
 8007646:	e08d      	b.n	8007764 <CO_SYNC_init+0x158>
    }

    /* Configure object variables */
    SYNC->isProducer = (COB_ID_SYNCMessage&0x40000000L) ? true : false;
 8007648:	6a3b      	ldr	r3, [r7, #32]
 800764a:	0f9b      	lsrs	r3, r3, #30
 800764c:	b2db      	uxtb	r3, r3
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	b2da      	uxtb	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	721a      	strb	r2, [r3, #8]
    SYNC->COB_ID = COB_ID_SYNCMessage&0x7FF;
 8007658:	6a3b      	ldr	r3, [r7, #32]
 800765a:	b29b      	uxth	r3, r3
 800765c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007660:	b29a      	uxth	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	815a      	strh	r2, [r3, #10]

    SYNC->periodTime = communicationCyclePeriod;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800766a:	60da      	str	r2, [r3, #12]
    SYNC->periodTimeoutTime = communicationCyclePeriod / 2 * 3;
 800766c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766e:	085a      	lsrs	r2, r3, #1
 8007670:	4613      	mov	r3, r2
 8007672:	005b      	lsls	r3, r3, #1
 8007674:	441a      	add	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	611a      	str	r2, [r3, #16]
    /* overflow? */
    if(SYNC->periodTimeoutTime < communicationCyclePeriod) SYNC->periodTimeoutTime = 0xFFFFFFFFL;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007680:	429a      	cmp	r2, r3
 8007682:	d903      	bls.n	800768c <CO_SYNC_init+0x80>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f04f 32ff 	mov.w	r2, #4294967295
 800768a:	611a      	str	r2, [r3, #16]

    SYNC->counterOverflowValue = synchronousCounterOverflowValue;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8007692:	751a      	strb	r2, [r3, #20]
    if(synchronousCounterOverflowValue) len = 1;
 8007694:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007698:	2b00      	cmp	r3, #0
 800769a:	d001      	beq.n	80076a0 <CO_SYNC_init+0x94>
 800769c:	2301      	movs	r3, #1
 800769e:	75fb      	strb	r3, [r7, #23]

    SYNC->curentSyncTimeIsInsideWindow = true;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2201      	movs	r2, #1
 80076a4:	755a      	strb	r2, [r3, #21]

    SYNC->CANrxNew = false;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	759a      	strb	r2, [r3, #22]
    SYNC->CANrxToggle = false;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	75da      	strb	r2, [r3, #23]
    SYNC->timer = 0;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	61da      	str	r2, [r3, #28]
    SYNC->counter = 0;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	761a      	strb	r2, [r3, #24]
    SYNC->receiveError = 0U;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	841a      	strh	r2, [r3, #32]

    SYNC->em = em;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	601a      	str	r2, [r3, #0]
    SYNC->operatingState = operatingState;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	605a      	str	r2, [r3, #4]

    SYNC->CANdevRx = CANdevRx;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076d4:	625a      	str	r2, [r3, #36]	; 0x24
    SYNC->CANdevRxIdx = CANdevRxIdx;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80076da:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Configure Object dictionary entry at index 0x1005, 0x1006 and 0x1019 */
    CO_OD_configure(SDO, OD_H1005_COBID_SYNC,        CO_ODF_1005, (void*)SYNC, 0, 0);
 80076dc:	2300      	movs	r3, #0
 80076de:	9301      	str	r3, [sp, #4]
 80076e0:	2300      	movs	r3, #0
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	4a21      	ldr	r2, [pc, #132]	; (800776c <CO_SYNC_init+0x160>)
 80076e8:	f241 0105 	movw	r1, #4101	; 0x1005
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f7fe fa27 	bl	8005b40 <CO_OD_configure>
    CO_OD_configure(SDO, OD_H1006_COMM_CYCL_PERIOD,  CO_ODF_1006, (void*)SYNC, 0, 0);
 80076f2:	2300      	movs	r3, #0
 80076f4:	9301      	str	r3, [sp, #4]
 80076f6:	2300      	movs	r3, #0
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	4a1c      	ldr	r2, [pc, #112]	; (8007770 <CO_SYNC_init+0x164>)
 80076fe:	f241 0106 	movw	r1, #4102	; 0x1006
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f7fe fa1c 	bl	8005b40 <CO_OD_configure>
    CO_OD_configure(SDO, OD_H1019_SYNC_CNT_OVERFLOW, CO_ODF_1019, (void*)SYNC, 0, 0);
 8007708:	2300      	movs	r3, #0
 800770a:	9301      	str	r3, [sp, #4]
 800770c:	2300      	movs	r3, #0
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	4a18      	ldr	r2, [pc, #96]	; (8007774 <CO_SYNC_init+0x168>)
 8007714:	f241 0119 	movw	r1, #4121	; 0x1019
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f7fe fa11 	bl	8005b40 <CO_OD_configure>

    /* configure SYNC CAN reception */
    CO_CANrxBufferInit(
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	895a      	ldrh	r2, [r3, #10]
 8007722:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8007724:	4b14      	ldr	r3, [pc, #80]	; (8007778 <CO_SYNC_init+0x16c>)
 8007726:	9302      	str	r3, [sp, #8]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	9301      	str	r3, [sp, #4]
 800772c:	2300      	movs	r3, #0
 800772e:	9300      	str	r3, [sp, #0]
 8007730:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007734:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007736:	f000 fa70 	bl	8007c1a <CO_CANrxBufferInit>
            0,                      /* rtr */
            (void*)SYNC,            /* object passed to receive function */
            CO_SYNC_receive);       /* this function will process received message */

    /* configure SYNC CAN transmission */
    SYNC->CANdevTx = CANdevTx;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800773e:	62da      	str	r2, [r3, #44]	; 0x2c
    SYNC->CANdevTxIdx = CANdevTxIdx;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8007744:	869a      	strh	r2, [r3, #52]	; 0x34
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	895a      	ldrh	r2, [r3, #10]
 800774a:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 800774c:	2300      	movs	r3, #0
 800774e:	9301      	str	r3, [sp, #4]
 8007750:	7dfb      	ldrb	r3, [r7, #23]
 8007752:	9300      	str	r3, [sp, #0]
 8007754:	2300      	movs	r3, #0
 8007756:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007758:	f000 fae3 	bl	8007d22 <CO_CANtxBufferInit>
 800775c:	4602      	mov	r2, r0
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	631a      	str	r2, [r3, #48]	; 0x30
            SYNC->COB_ID,           /* CAN identifier */
            0,                      /* rtr */
            len,                    /* number of data bytes */
            0);                     /* synchronous message flag bit */

    return CO_ERROR_NO;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3718      	adds	r7, #24
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	08007425 	.word	0x08007425
 8007770:	08007515 	.word	0x08007515
 8007774:	08007585 	.word	0x08007585
 8007778:	0800737d 	.word	0x0800737d

0800777c <CO_SYNC_process>:
/******************************************************************************/
uint8_t CO_SYNC_process(
        CO_SYNC_t              *SYNC,
        uint32_t                timeDifference_us,
        uint32_t                ObjDict_synchronousWindowLength)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b086      	sub	sp, #24
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
    uint8_t ret = 0;
 8007788:	2300      	movs	r3, #0
 800778a:	75fb      	strb	r3, [r7, #23]
    uint32_t timerNew;

    if(*SYNC->operatingState == CO_NMT_OPERATIONAL || *SYNC->operatingState == CO_NMT_PRE_OPERATIONAL){
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	2b05      	cmp	r3, #5
 8007794:	d005      	beq.n	80077a2 <CO_SYNC_process+0x26>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	2b7f      	cmp	r3, #127	; 0x7f
 800779e:	f040 8084 	bne.w	80078aa <CO_SYNC_process+0x12e>
        /* update sync timer, no overflow */
        timerNew = SYNC->timer + timeDifference_us;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	69db      	ldr	r3, [r3, #28]
 80077a6:	68ba      	ldr	r2, [r7, #8]
 80077a8:	4413      	add	r3, r2
 80077aa:	613b      	str	r3, [r7, #16]
        if(timerNew > SYNC->timer) SYNC->timer = timerNew;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	69db      	ldr	r3, [r3, #28]
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d902      	bls.n	80077bc <CO_SYNC_process+0x40>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	61da      	str	r2, [r3, #28]

        /* was SYNC just received */
        if(SYNC->CANrxNew){
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	7d9b      	ldrb	r3, [r3, #22]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d007      	beq.n	80077d4 <CO_SYNC_process+0x58>
            SYNC->timer = 0;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	61da      	str	r2, [r3, #28]
            ret = 1;
 80077ca:	2301      	movs	r3, #1
 80077cc:	75fb      	strb	r3, [r7, #23]
            SYNC->CANrxNew = false;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	759a      	strb	r2, [r3, #22]
        }

        /* SYNC producer */
        if(SYNC->isProducer && SYNC->periodTime){
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	7a1b      	ldrb	r3, [r3, #8]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d034      	beq.n	8007846 <CO_SYNC_process+0xca>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d030      	beq.n	8007846 <CO_SYNC_process+0xca>
            if(SYNC->timer >= SYNC->periodTime){
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	69da      	ldr	r2, [r3, #28]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d32a      	bcc.n	8007846 <CO_SYNC_process+0xca>
                if(++SYNC->counter > SYNC->counterOverflowValue) SYNC->counter = 1;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	7e1b      	ldrb	r3, [r3, #24]
 80077f4:	3301      	adds	r3, #1
 80077f6:	b2da      	uxtb	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	761a      	strb	r2, [r3, #24]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	7e1a      	ldrb	r2, [r3, #24]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	7d1b      	ldrb	r3, [r3, #20]
 8007804:	429a      	cmp	r2, r3
 8007806:	d902      	bls.n	800780e <CO_SYNC_process+0x92>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2201      	movs	r2, #1
 800780c:	761a      	strb	r2, [r3, #24]
                SYNC->timer = 0;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	61da      	str	r2, [r3, #28]
                ret = 1;
 8007814:	2301      	movs	r3, #1
 8007816:	75fb      	strb	r3, [r7, #23]
                SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	7ddb      	ldrb	r3, [r3, #23]
 800781c:	2b00      	cmp	r3, #0
 800781e:	bf0c      	ite	eq
 8007820:	2301      	moveq	r3, #1
 8007822:	2300      	movne	r3, #0
 8007824:	b2db      	uxtb	r3, r3
 8007826:	461a      	mov	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	75da      	strb	r2, [r3, #23]
                SYNC->CANtxBuff->data[0] = SYNC->counter;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	7e12      	ldrb	r2, [r2, #24]
 8007834:	715a      	strb	r2, [r3, #5]
                CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783e:	4619      	mov	r1, r3
 8007840:	4610      	mov	r0, r2
 8007842:	f000 fab1 	bl	8007da8 <CO_CANsend>
            }
        }

        /* Synchronous PDOs are allowed only inside time window */
        if(ObjDict_synchronousWindowLength){
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d012      	beq.n	8007872 <CO_SYNC_process+0xf6>
            if(SYNC->timer > ObjDict_synchronousWindowLength){
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	69db      	ldr	r3, [r3, #28]
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	429a      	cmp	r2, r3
 8007854:	d209      	bcs.n	800786a <CO_SYNC_process+0xee>
                if(SYNC->curentSyncTimeIsInsideWindow){
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	7d5b      	ldrb	r3, [r3, #21]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <CO_SYNC_process+0xe6>
                    ret = 2;
 800785e:	2302      	movs	r3, #2
 8007860:	75fb      	strb	r3, [r7, #23]
                }
                SYNC->curentSyncTimeIsInsideWindow = false;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	755a      	strb	r2, [r3, #21]
 8007868:	e006      	b.n	8007878 <CO_SYNC_process+0xfc>
            }
            else{
                SYNC->curentSyncTimeIsInsideWindow = true;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2201      	movs	r2, #1
 800786e:	755a      	strb	r2, [r3, #21]
 8007870:	e002      	b.n	8007878 <CO_SYNC_process+0xfc>
            }
        }
        else{
            SYNC->curentSyncTimeIsInsideWindow = true;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2201      	movs	r2, #1
 8007876:	755a      	strb	r2, [r3, #21]
        }

        /* Verify timeout of SYNC */
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d018      	beq.n	80078b2 <CO_SYNC_process+0x136>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	69da      	ldr	r2, [r3, #28]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	429a      	cmp	r2, r3
 800788a:	d912      	bls.n	80078b2 <CO_SYNC_process+0x136>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	2b05      	cmp	r3, #5
 8007894:	d10d      	bne.n	80078b2 <CO_SYNC_process+0x136>
            CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT, CO_EMC_COMMUNICATION, SYNC->timer);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6818      	ldr	r0, [r3, #0]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 80078a2:	2118      	movs	r1, #24
 80078a4:	f7fb ffbc 	bl	8003820 <CO_errorReport>
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
 80078a8:	e003      	b.n	80078b2 <CO_SYNC_process+0x136>
    }
    else {
        SYNC->CANrxNew = false;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	759a      	strb	r2, [r3, #22]
 80078b0:	e000      	b.n	80078b4 <CO_SYNC_process+0x138>
        if(SYNC->periodTime && SYNC->timer > SYNC->periodTimeoutTime && *SYNC->operatingState == CO_NMT_OPERATIONAL)
 80078b2:	bf00      	nop
    }

    /* verify error from receive function */
    if(SYNC->receiveError != 0U){
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	8c1b      	ldrh	r3, [r3, #32]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00b      	beq.n	80078d4 <CO_SYNC_process+0x158>
        CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH, CO_EMC_SYNC_DATA_LENGTH, (uint32_t)SYNC->receiveError);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6818      	ldr	r0, [r3, #0]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	8c1b      	ldrh	r3, [r3, #32]
 80078c4:	f248 2240 	movw	r2, #33344	; 0x8240
 80078c8:	2119      	movs	r1, #25
 80078ca:	f7fb ffa9 	bl	8003820 <CO_errorReport>
        SYNC->receiveError = 0U;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	841a      	strh	r2, [r3, #32]
    }

    return ret;
 80078d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3718      	adds	r7, #24
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <prepareTxHeader>:
 * \param [in]	buffer ponyer to CO_CANtx_t with CANopen configuration data
 *
 * \ingroup CO_driver
 ******************************************************************************/
void prepareTxHeader(CAN_TxHeaderTypeDef *TxHeader, CO_CANtx_t *buffer)
{
 80078de:	b480      	push	{r7}
 80078e0:	b083      	sub	sp, #12
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	6039      	str	r1, [r7, #0]
	/* Map buffer data to the HAL CAN tx header data*/
	TxHeader->ExtId = 0u;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	605a      	str	r2, [r3, #4]
	TxHeader->IDE = 0;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	609a      	str	r2, [r3, #8]
	TxHeader->DLC = buffer->DLC;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	791b      	ldrb	r3, [r3, #4]
 80078f8:	461a      	mov	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	611a      	str	r2, [r3, #16]
	TxHeader->StdId = ( buffer->ident >> 2 );
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	089a      	lsrs	r2, r3, #2
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	601a      	str	r2, [r3, #0]
	TxHeader->RTR = ( buffer->ident & 0x2 );
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0202 	and.w	r2, r3, #2
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	60da      	str	r2, [r3, #12]
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* \brief 	Cube MX callbacks for Fifo0 and Fifo1
 * \details It is assumed that only one CANmodule is (CO->CANmodule[0]) is used.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
	if(RxFifo_Callback_CanModule_p != NULL)
 8007928:	4b06      	ldr	r3, [pc, #24]	; (8007944 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d004      	beq.n	800793a <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	{
		CO_CANinterrupt_Rx(RxFifo_Callback_CanModule_p);
 8007930:	4b04      	ldr	r3, [pc, #16]	; (8007944 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4618      	mov	r0, r3
 8007936:	f000 fb59 	bl	8007fec <CO_CANinterrupt_Rx>
		 *but for some reason interrupts get activated as soon as HAL_NVIC_EnableIRQ is called.
		 *According to Cube CAN docs HAL_CAN_ActivateNotification should be executed to
		 *activate callbacks.
		 */
	}
}
 800793a:	bf00      	nop
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	20000640 	.word	0x20000640

08007948 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
	if(RxFifo_Callback_CanModule_p != NULL)
 8007950:	4b06      	ldr	r3, [pc, #24]	; (800796c <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d004      	beq.n	8007962 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a>
	{
		CO_CANinterrupt_Rx(RxFifo_Callback_CanModule_p);
 8007958:	4b04      	ldr	r3, [pc, #16]	; (800796c <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4618      	mov	r0, r3
 800795e:	f000 fb45 	bl	8007fec <CO_CANinterrupt_Rx>
	}
	else
	{
		;//TODO add assert here
	}
}
 8007962:	bf00      	nop
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	20000640 	.word	0x20000640

08007970 <CO_CANsetConfigurationMode>:

void CO_CANsetConfigurationMode(int32_t CANbaseAddress){
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
	/* Put CAN module in configuration mode */
	/* HAL is responsible for that */
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <CO_CANsetNormalMode>:

/******************************************************************************/
CO_ReturnError_t CO_CANsetNormalMode(CO_CANmodule_t *CANmodule){
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
	/* Put CAN module in normal mode */

	CO_ReturnError_t Error = CO_ERROR_NO;
 800798c:	2300      	movs	r3, #0
 800798e:	73fb      	strb	r3, [r7, #15]
	if(HAL_CAN_Start(CANmodule->CANbaseAddress) != HAL_OK)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4618      	mov	r0, r3
 8007996:	f001 fd42 	bl	800941e <HAL_CAN_Start>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d001      	beq.n	80079a4 <CO_CANsetNormalMode+0x20>
	{
		/* Start Error */
		Error = CO_ERROR_HAL;
 80079a0:	23f1      	movs	r3, #241	; 0xf1
 80079a2:	73fb      	strb	r3, [r7, #15]
	}

	/* Enable CAN interrupts */

	   HAL_NVIC_SetPriority(CAN1_TX_IRQn, 1, 0);
 80079a4:	2200      	movs	r2, #0
 80079a6:	2101      	movs	r1, #1
 80079a8:	2013      	movs	r0, #19
 80079aa:	f002 fb35 	bl	800a018 <HAL_NVIC_SetPriority>
	   HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80079ae:	2013      	movs	r0, #19
 80079b0:	f002 fb4e 	bl	800a050 <HAL_NVIC_EnableIRQ>
	   HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 80079b4:	2200      	movs	r2, #0
 80079b6:	2101      	movs	r1, #1
 80079b8:	2014      	movs	r0, #20
 80079ba:	f002 fb2d 	bl	800a018 <HAL_NVIC_SetPriority>
	   HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80079be:	2014      	movs	r0, #20
 80079c0:	f002 fb46 	bl	800a050 <HAL_NVIC_EnableIRQ>
	   HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 80079c4:	2200      	movs	r2, #0
 80079c6:	2101      	movs	r1, #1
 80079c8:	2015      	movs	r0, #21
 80079ca:	f002 fb25 	bl	800a018 <HAL_NVIC_SetPriority>
	   HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80079ce:	2015      	movs	r0, #21
 80079d0:	f002 fb3e 	bl	800a050 <HAL_NVIC_EnableIRQ>

	if(HAL_CAN_ActivateNotification( CANmodule->CANbaseAddress,
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2113      	movs	r1, #19
 80079da:	4618      	mov	r0, r3
 80079dc:	f001 ffce 	bl	800997c <HAL_CAN_ActivateNotification>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <CO_CANsetNormalMode+0x66>
			CAN_IT_RX_FIFO1_MSG_PENDING |
			CAN_IT_TX_MAILBOX_EMPTY)
			!= HAL_OK)
	{
		/* Notification Error */
		Error = CO_ERROR_HAL;
 80079e6:	23f1      	movs	r3, #241	; 0xf1
 80079e8:	73fb      	strb	r3, [r7, #15]
	}

	CANmodule->CANnormal = true;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	749a      	strb	r2, [r3, #18]
	return Error;
 80079f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <CO_CANmodule_init>:
		CO_CANrx_t              rxArray[],
		uint16_t                rxSize,
		CO_CANtx_t              txArray[],
		uint16_t                txSize,
		uint16_t                CANbitRate)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b086      	sub	sp, #24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
 8007a08:	807b      	strh	r3, [r7, #2]
	uint16_t i;

	/* verify arguments */
	if(CANmodule==NULL || rxArray==NULL || txArray==NULL)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d005      	beq.n	8007a1c <CO_CANmodule_init+0x20>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d002      	beq.n	8007a1c <CO_CANmodule_init+0x20>
 8007a16:	6a3b      	ldr	r3, [r7, #32]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d102      	bne.n	8007a22 <CO_CANmodule_init+0x26>
	{
		return CO_ERROR_ILLEGAL_ARGUMENT;
 8007a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a20:	e0e0      	b.n	8007be4 <CO_CANmodule_init+0x1e8>
	else
	{
		;//do nothing
	}

	RxFifo_Callback_CanModule_p = CANmodule;
 8007a22:	4a72      	ldr	r2, [pc, #456]	; (8007bec <CO_CANmodule_init+0x1f0>)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6013      	str	r3, [r2, #0]

	/* Configure object variables */
	CANmodule->CANbaseAddress = (CAN_HandleTypeDef*)HALCanObject;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	601a      	str	r2, [r3, #0]
	CANmodule->rxArray = rxArray;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	605a      	str	r2, [r3, #4]
	CANmodule->rxSize = rxSize;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	887a      	ldrh	r2, [r7, #2]
 8007a38:	811a      	strh	r2, [r3, #8]
	CANmodule->txArray = txArray;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6a3a      	ldr	r2, [r7, #32]
 8007a3e:	60da      	str	r2, [r3, #12]
	CANmodule->txSize = txSize;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007a44:	821a      	strh	r2, [r3, #16]
	CANmodule->CANnormal = false;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	749a      	strb	r2, [r3, #18]
	CANmodule->useCANrxFilters = false;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	74da      	strb	r2, [r3, #19]
	CANmodule->bufferInhibitFlag = false;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	751a      	strb	r2, [r3, #20]
	CANmodule->firstCANtxMessage = true;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	755a      	strb	r2, [r3, #21]
	CANmodule->CANtxCount = 0U;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	82da      	strh	r2, [r3, #22]
	CANmodule->errOld = 0U;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	619a      	str	r2, [r3, #24]
	CANmodule->em = NULL;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	61da      	str	r2, [r3, #28]

	for(i=0U; i<rxSize; i++)
 8007a70:	2300      	movs	r3, #0
 8007a72:	82fb      	strh	r3, [r7, #22]
 8007a74:	e016      	b.n	8007aa4 <CO_CANmodule_init+0xa8>
	{
		rxArray[i].ident = 0U;
 8007a76:	8afa      	ldrh	r2, [r7, #22]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	005b      	lsls	r3, r3, #1
 8007a7c:	4413      	add	r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	461a      	mov	r2, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4413      	add	r3, r2
 8007a86:	2200      	movs	r2, #0
 8007a88:	801a      	strh	r2, [r3, #0]
		rxArray[i].pFunct = NULL;
 8007a8a:	8afa      	ldrh	r2, [r7, #22]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	005b      	lsls	r3, r3, #1
 8007a90:	4413      	add	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	461a      	mov	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4413      	add	r3, r2
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	609a      	str	r2, [r3, #8]
	for(i=0U; i<rxSize; i++)
 8007a9e:	8afb      	ldrh	r3, [r7, #22]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	82fb      	strh	r3, [r7, #22]
 8007aa4:	8afa      	ldrh	r2, [r7, #22]
 8007aa6:	887b      	ldrh	r3, [r7, #2]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d3e4      	bcc.n	8007a76 <CO_CANmodule_init+0x7a>
	}

	for(i=0U; i<txSize; i++)
 8007aac:	2300      	movs	r3, #0
 8007aae:	82fb      	strh	r3, [r7, #22]
 8007ab0:	e008      	b.n	8007ac4 <CO_CANmodule_init+0xc8>
	{
		txArray[i].bufferFull = false;
 8007ab2:	8afb      	ldrh	r3, [r7, #22]
 8007ab4:	011b      	lsls	r3, r3, #4
 8007ab6:	6a3a      	ldr	r2, [r7, #32]
 8007ab8:	4413      	add	r3, r2
 8007aba:	2200      	movs	r2, #0
 8007abc:	735a      	strb	r2, [r3, #13]
	for(i=0U; i<txSize; i++)
 8007abe:	8afb      	ldrh	r3, [r7, #22]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	82fb      	strh	r3, [r7, #22]
 8007ac4:	8afa      	ldrh	r2, [r7, #22]
 8007ac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d3f2      	bcc.n	8007ab2 <CO_CANmodule_init+0xb6>
	}

	/* Configure CAN module registers */
	/* Configuration is handled by CubeMX HAL*/
	CO_CANmodule_disable(CANmodule);
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f000 f891 	bl	8007bf4 <CO_CANmodule_disable>
	HAL_CAN_MspDeInit(CANmodule->CANbaseAddress);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7f9 fc5a 	bl	8001390 <HAL_CAN_MspDeInit>
	HAL_CAN_MspInit(CANmodule->CANbaseAddress); /* NVIC and GPIO */
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7f9 fc01 	bl	80012e8 <HAL_CAN_MspInit>

	CANmodule->CANbaseAddress->Instance = CAN1;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a41      	ldr	r2, [pc, #260]	; (8007bf0 <CO_CANmodule_init+0x1f4>)
 8007aec:	601a      	str	r2, [r3, #0]
	CANmodule->CANbaseAddress->Init.Mode = CAN_MODE_NORMAL;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2200      	movs	r2, #0
 8007af4:	609a      	str	r2, [r3, #8]
	CANmodule->CANbaseAddress->Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2200      	movs	r2, #0
 8007afc:	60da      	str	r2, [r3, #12]
	CANmodule->CANbaseAddress->Init.TimeTriggeredMode = DISABLE;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2200      	movs	r2, #0
 8007b04:	761a      	strb	r2, [r3, #24]
	CANmodule->CANbaseAddress->Init.AutoBusOff = DISABLE;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	765a      	strb	r2, [r3, #25]
	CANmodule->CANbaseAddress->Init.AutoWakeUp = DISABLE;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2200      	movs	r2, #0
 8007b14:	769a      	strb	r2, [r3, #26]
	CANmodule->CANbaseAddress->Init.AutoRetransmission = ENABLE;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	76da      	strb	r2, [r3, #27]
	CANmodule->CANbaseAddress->Init.ReceiveFifoLocked = DISABLE;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2200      	movs	r2, #0
 8007b24:	771a      	strb	r2, [r3, #28]
	CANmodule->CANbaseAddress->Init.TransmitFifoPriority = DISABLE;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	775a      	strb	r2, [r3, #29]
	CANmodule->CANbaseAddress->Init.TimeSeg2 = CAN_BS2_2TQ;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007b36:	615a      	str	r2, [r3, #20]
	CANmodule->CANbaseAddress->Init.TimeSeg1 = CAN_BS1_2TQ;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007b40:	611a      	str	r2, [r3, #16]
    50 		 	0.0000		100			16				13		2		87.5		  0x001c0063
    20 		 	0.0000		250			16				13		2		87.5		  0x0007018f
    10 		 	0.0000		500			16				13		2		87.5		  0x001c01f3
	 */

	uint32_t Prescaler = 500;
 8007b42:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007b46:	613b      	str	r3, [r7, #16]

	switch(CANbitRate) {
 8007b48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b4e:	d01d      	beq.n	8007b8c <CO_CANmodule_init+0x190>
 8007b50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b54:	dc33      	bgt.n	8007bbe <CO_CANmodule_init+0x1c2>
 8007b56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007b5a:	d01a      	beq.n	8007b92 <CO_CANmodule_init+0x196>
 8007b5c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007b60:	dc2d      	bgt.n	8007bbe <CO_CANmodule_init+0x1c2>
 8007b62:	2bfa      	cmp	r3, #250	; 0xfa
 8007b64:	d018      	beq.n	8007b98 <CO_CANmodule_init+0x19c>
 8007b66:	2bfa      	cmp	r3, #250	; 0xfa
 8007b68:	dc29      	bgt.n	8007bbe <CO_CANmodule_init+0x1c2>
 8007b6a:	2b7d      	cmp	r3, #125	; 0x7d
 8007b6c:	d017      	beq.n	8007b9e <CO_CANmodule_init+0x1a2>
 8007b6e:	2b7d      	cmp	r3, #125	; 0x7d
 8007b70:	dc25      	bgt.n	8007bbe <CO_CANmodule_init+0x1c2>
 8007b72:	2b64      	cmp	r3, #100	; 0x64
 8007b74:	d016      	beq.n	8007ba4 <CO_CANmodule_init+0x1a8>
 8007b76:	2b64      	cmp	r3, #100	; 0x64
 8007b78:	dc21      	bgt.n	8007bbe <CO_CANmodule_init+0x1c2>
 8007b7a:	2b32      	cmp	r3, #50	; 0x32
 8007b7c:	d015      	beq.n	8007baa <CO_CANmodule_init+0x1ae>
 8007b7e:	2b32      	cmp	r3, #50	; 0x32
 8007b80:	dc1d      	bgt.n	8007bbe <CO_CANmodule_init+0x1c2>
 8007b82:	2b0a      	cmp	r3, #10
 8007b84:	d017      	beq.n	8007bb6 <CO_CANmodule_init+0x1ba>
 8007b86:	2b14      	cmp	r3, #20
 8007b88:	d012      	beq.n	8007bb0 <CO_CANmodule_init+0x1b4>
 8007b8a:	e018      	b.n	8007bbe <CO_CANmodule_init+0x1c2>
	case 1000:
		Prescaler = 5;
 8007b8c:	2305      	movs	r3, #5
 8007b8e:	613b      	str	r3, [r7, #16]
		break;
 8007b90:	e018      	b.n	8007bc4 <CO_CANmodule_init+0x1c8>
	case 500:
		Prescaler = 10;
 8007b92:	230a      	movs	r3, #10
 8007b94:	613b      	str	r3, [r7, #16]
		break;
 8007b96:	e015      	b.n	8007bc4 <CO_CANmodule_init+0x1c8>
	case 250:
		Prescaler = 20;
 8007b98:	2314      	movs	r3, #20
 8007b9a:	613b      	str	r3, [r7, #16]
		break;
 8007b9c:	e012      	b.n	8007bc4 <CO_CANmodule_init+0x1c8>
	case 125:
		Prescaler = 40;
 8007b9e:	2328      	movs	r3, #40	; 0x28
 8007ba0:	613b      	str	r3, [r7, #16]
		break;
 8007ba2:	e00f      	b.n	8007bc4 <CO_CANmodule_init+0x1c8>
	case 100:
		Prescaler = 50;
 8007ba4:	2332      	movs	r3, #50	; 0x32
 8007ba6:	613b      	str	r3, [r7, #16]
		break;
 8007ba8:	e00c      	b.n	8007bc4 <CO_CANmodule_init+0x1c8>
	case 50:
		Prescaler = 100;
 8007baa:	2364      	movs	r3, #100	; 0x64
 8007bac:	613b      	str	r3, [r7, #16]
		break;
 8007bae:	e009      	b.n	8007bc4 <CO_CANmodule_init+0x1c8>
	case 20:
		Prescaler = 250;
 8007bb0:	23fa      	movs	r3, #250	; 0xfa
 8007bb2:	613b      	str	r3, [r7, #16]
		break;
 8007bb4:	e006      	b.n	8007bc4 <CO_CANmodule_init+0x1c8>
	case 10:
		Prescaler = 500;
 8007bb6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007bba:	613b      	str	r3, [r7, #16]
		break;
 8007bbc:	e002      	b.n	8007bc4 <CO_CANmodule_init+0x1c8>

	default :
		return  CO_ERROR_ILLEGAL_BAUDRATE;
 8007bbe:	f06f 0303 	mvn.w	r3, #3
 8007bc2:	e00f      	b.n	8007be4 <CO_CANmodule_init+0x1e8>
	}

	CANmodule->CANbaseAddress->Init.Prescaler = 1;//Prescaler;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	605a      	str	r2, [r3, #4]

	if (HAL_CAN_Init(CANmodule->CANbaseAddress) != HAL_OK)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f001 fa5f 	bl	8009094 <HAL_CAN_Init>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d002      	beq.n	8007be2 <CO_CANmodule_init+0x1e6>
	{
		//_Error_Handler(__FILE__, __LINE__);
		return CO_ERROR_HAL;
 8007bdc:	f06f 030e 	mvn.w	r3, #14
 8007be0:	e000      	b.n	8007be4 <CO_CANmodule_init+0x1e8>
	}

	return CO_ERROR_NO;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3718      	adds	r7, #24
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	20000640 	.word	0x20000640
 8007bf0:	40006400 	.word	0x40006400

08007bf4 <CO_CANmodule_disable>:


/******************************************************************************/
void CO_CANmodule_disable(CO_CANmodule_t *CANmodule){
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
	/* turn off the module */
	/* handled by CubeMX HAL*/
	HAL_CAN_DeactivateNotification(CANmodule->CANbaseAddress ,
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2113      	movs	r1, #19
 8007c02:	4618      	mov	r0, r3
 8007c04:	f001 fee0 	bl	80099c8 <HAL_CAN_DeactivateNotification>
			CAN_IT_RX_FIFO0_MSG_PENDING |
			CAN_IT_RX_FIFO1_MSG_PENDING |
			CAN_IT_TX_MAILBOX_EMPTY);
	HAL_CAN_Stop(CANmodule->CANbaseAddress);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f001 fc4a 	bl	80094a6 <HAL_CAN_Stop>
}
 8007c12:	bf00      	nop
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <CO_CANrxBufferInit>:
		uint16_t                ident,
		uint16_t                mask,
		bool_t                  rtr,
		void                   *object,
		void                  (*pFunct)(void *object, const CO_CANrxMsg_t *message))
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b090      	sub	sp, #64	; 0x40
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	60f8      	str	r0, [r7, #12]
 8007c22:	4608      	mov	r0, r1
 8007c24:	4611      	mov	r1, r2
 8007c26:	461a      	mov	r2, r3
 8007c28:	4603      	mov	r3, r0
 8007c2a:	817b      	strh	r3, [r7, #10]
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	813b      	strh	r3, [r7, #8]
 8007c30:	4613      	mov	r3, r2
 8007c32:	80fb      	strh	r3, [r7, #6]
	CO_ReturnError_t ret = CO_ERROR_NO;
 8007c34:	2300      	movs	r3, #0
 8007c36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if((CANmodule!=NULL) && (object!=NULL) && (pFunct!=NULL) && (index < CANmodule->rxSize)){
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d065      	beq.n	8007d0c <CO_CANrxBufferInit+0xf2>
 8007c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d062      	beq.n	8007d0c <CO_CANrxBufferInit+0xf2>
 8007c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d05f      	beq.n	8007d0c <CO_CANrxBufferInit+0xf2>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	891b      	ldrh	r3, [r3, #8]
 8007c50:	897a      	ldrh	r2, [r7, #10]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d25a      	bcs.n	8007d0c <CO_CANrxBufferInit+0xf2>
		/* buffer, which will be configured */
		CO_CANrx_t *buffer = &CANmodule->rxArray[index];
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6859      	ldr	r1, [r3, #4]
 8007c5a:	897a      	ldrh	r2, [r7, #10]
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	005b      	lsls	r3, r3, #1
 8007c60:	4413      	add	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	440b      	add	r3, r1
 8007c66:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Configure object variables */
		buffer->object = object;
 8007c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c6c:	605a      	str	r2, [r3, #4]
		buffer->pFunct = pFunct;
 8007c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c72:	609a      	str	r2, [r3, #8]

		/* CAN identifier and CAN mask, bit aligned with CAN module. Different on different microcontrollers. */
		buffer->ident = (ident & 0x07FF) << 2;
 8007c74:	893b      	ldrh	r3, [r7, #8]
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	f641 73fc 	movw	r3, #8188	; 0x1ffc
 8007c7e:	4013      	ands	r3, r2
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c84:	801a      	strh	r2, [r3, #0]
		if (rtr)
 8007c86:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d006      	beq.n	8007c9c <CO_CANrxBufferInit+0x82>
		{
			buffer->ident |= 0x02;
 8007c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c90:	881b      	ldrh	r3, [r3, #0]
 8007c92:	f043 0302 	orr.w	r3, r3, #2
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9a:	801a      	strh	r2, [r3, #0]
		}
		buffer->mask = (mask & 0x07FF) << 2;
 8007c9c:	88fb      	ldrh	r3, [r7, #6]
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	f641 73fc 	movw	r3, #8188	; 0x1ffc
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cac:	805a      	strh	r2, [r3, #2]
		buffer->mask |= 0x02;
 8007cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb0:	885b      	ldrh	r3, [r3, #2]
 8007cb2:	f043 0302 	orr.w	r3, r3, #2
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cba:	805a      	strh	r2, [r3, #2]

		/* Set CAN hardware module filter and mask. */
		if(CANmodule->useCANrxFilters)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	7cdb      	ldrb	r3, [r3, #19]
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d126      	bne.n	8007d14 <CO_CANrxBufferInit+0xfa>
		else
		{
			/*no hardware filters*/
			CAN_FilterTypeDef FilterConfig;

			FilterConfig.FilterBank = 0;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	627b      	str	r3, [r7, #36]	; 0x24
			FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	62bb      	str	r3, [r7, #40]	; 0x28
			FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
			FilterConfig.FilterIdHigh = 0x033<<5;
 8007cd2:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8007cd6:	613b      	str	r3, [r7, #16]
			FilterConfig.FilterIdLow = 0x0;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	617b      	str	r3, [r7, #20]
			FilterConfig.FilterMaskIdHigh = 0x0;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	61bb      	str	r3, [r7, #24]
			FilterConfig.FilterMaskIdLow = 0x0;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	61fb      	str	r3, [r7, #28]
			FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	623b      	str	r3, [r7, #32]
			FilterConfig.FilterActivation = ENABLE;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	633b      	str	r3, [r7, #48]	; 0x30
			FilterConfig.SlaveStartFilterBank = 14;
 8007cec:	230e      	movs	r3, #14
 8007cee:	637b      	str	r3, [r7, #52]	; 0x34

			if(HAL_CAN_ConfigFilter(CANmodule->CANbaseAddress, &FilterConfig)!=HAL_OK)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f107 0210 	add.w	r2, r7, #16
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f001 fac5 	bl	800928a <HAL_CAN_ConfigFilter>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d006      	beq.n	8007d14 <CO_CANrxBufferInit+0xfa>
			{
				return CO_ERROR_HAL;
 8007d06:	f06f 030e 	mvn.w	r3, #14
 8007d0a:	e006      	b.n	8007d1a <CO_CANrxBufferInit+0x100>
			}
		}
	}
	else
	{
		ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8007d0c:	23ff      	movs	r3, #255	; 0xff
 8007d0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007d12:	e000      	b.n	8007d16 <CO_CANrxBufferInit+0xfc>
	if((CANmodule!=NULL) && (object!=NULL) && (pFunct!=NULL) && (index < CANmodule->rxSize)){
 8007d14:	bf00      	nop
	}
	return ret;
 8007d16:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3740      	adds	r7, #64	; 0x40
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <CO_CANtxBufferInit>:
		uint16_t                index,
		uint16_t                ident,
		bool_t                  rtr,
		uint8_t                 noOfBytes,
		bool_t                  syncFlag)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b087      	sub	sp, #28
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	4608      	mov	r0, r1
 8007d2c:	4611      	mov	r1, r2
 8007d2e:	461a      	mov	r2, r3
 8007d30:	4603      	mov	r3, r0
 8007d32:	817b      	strh	r3, [r7, #10]
 8007d34:	460b      	mov	r3, r1
 8007d36:	813b      	strh	r3, [r7, #8]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	71fb      	strb	r3, [r7, #7]
	CO_CANtx_t *buffer = NULL;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	617b      	str	r3, [r7, #20]

	if((CANmodule != NULL) && (index < CANmodule->txSize)){
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d029      	beq.n	8007d9a <CO_CANtxBufferInit+0x78>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	8a1b      	ldrh	r3, [r3, #16]
 8007d4a:	897a      	ldrh	r2, [r7, #10]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d224      	bcs.n	8007d9a <CO_CANtxBufferInit+0x78>
		/* get specific buffer */
		buffer = &CANmodule->txArray[index];
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	68da      	ldr	r2, [r3, #12]
 8007d54:	897b      	ldrh	r3, [r7, #10]
 8007d56:	011b      	lsls	r3, r3, #4
 8007d58:	4413      	add	r3, r2
 8007d5a:	617b      	str	r3, [r7, #20]

		/* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer.*/

		buffer->ident &= 0x7FF;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	601a      	str	r2, [r3, #0]
		buffer->ident = ident << 2;
 8007d68:	893b      	ldrh	r3, [r7, #8]
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	601a      	str	r2, [r3, #0]
		if (rtr) buffer->ident |= 0x02;
 8007d72:	79fb      	ldrb	r3, [r7, #7]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d005      	beq.n	8007d84 <CO_CANtxBufferInit+0x62>
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f043 0202 	orr.w	r2, r3, #2
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	601a      	str	r2, [r3, #0]

		buffer->DLC = noOfBytes;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007d8a:	711a      	strb	r2, [r3, #4]
		buffer->bufferFull = false;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	735a      	strb	r2, [r3, #13]
		buffer->syncFlag = syncFlag;
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8007d98:	739a      	strb	r2, [r3, #14]
	}

	return buffer;
 8007d9a:	697b      	ldr	r3, [r7, #20]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	371c      	adds	r7, #28
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t CO_CANsend(CO_CANmodule_t *CANmodule, CO_CANtx_t *buffer)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b088      	sub	sp, #32
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
	CO_ReturnError_t err = CO_ERROR_NO;
 8007db2:	2300      	movs	r3, #0
 8007db4:	77fb      	strb	r3, [r7, #31]

	/* Verify overflow */
	if(buffer->bufferFull){
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	7b5b      	ldrb	r3, [r3, #13]
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00f      	beq.n	8007de0 <CO_CANsend+0x38>
		if(!CANmodule->firstCANtxMessage){
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	7d5b      	ldrb	r3, [r3, #21]
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d108      	bne.n	8007ddc <CO_CANsend+0x34>
			/* don't set error, if bootup message is still on buffers */
			CO_errorReport((CO_EM_t*)CANmodule->em, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, buffer->ident);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	69d8      	ldr	r0, [r3, #28]
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f248 1210 	movw	r2, #33040	; 0x8110
 8007dd6:	2114      	movs	r1, #20
 8007dd8:	f7fb fd22 	bl	8003820 <CO_errorReport>
		}
		err = CO_ERROR_TX_OVERFLOW;
 8007ddc:	23f7      	movs	r3, #247	; 0xf7
 8007dde:	77fb      	strb	r3, [r7, #31]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007de0:	f3ef 8310 	mrs	r3, PRIMASK
 8007de4:	617b      	str	r3, [r7, #20]
  return(result);
 8007de6:	697b      	ldr	r3, [r7, #20]
	}

	uint32_t TxMailboxNum;
	/* if CAN TX buffer is free, send message */
	CO_LOCK_CAN_SEND();
 8007de8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8007dea:	b672      	cpsid	i
}
 8007dec:	bf00      	nop

	prepareTxHeader(&TxHeader, buffer);
 8007dee:	6839      	ldr	r1, [r7, #0]
 8007df0:	481c      	ldr	r0, [pc, #112]	; (8007e64 <CO_CANsend+0xbc>)
 8007df2:	f7ff fd74 	bl	80078de <prepareTxHeader>

	if ((CANmodule->CANtxCount == 0) &&
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	8adb      	ldrh	r3, [r3, #22]
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d11b      	bne.n	8007e38 <CO_CANsend+0x90>
			(HAL_CAN_GetTxMailboxesFreeLevel(CANmodule->CANbaseAddress) > 0 )) {
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4618      	mov	r0, r3
 8007e06:	f001 fc72 	bl	80096ee <HAL_CAN_GetTxMailboxesFreeLevel>
 8007e0a:	4603      	mov	r3, r0
	if ((CANmodule->CANtxCount == 0) &&
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d013      	beq.n	8007e38 <CO_CANsend+0x90>
		CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	7b9b      	ldrb	r3, [r3, #14]
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	751a      	strb	r2, [r3, #20]

		if( HAL_CAN_AddTxMessage(CANmodule->CANbaseAddress,
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6818      	ldr	r0, [r3, #0]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	1d5a      	adds	r2, r3, #5
 8007e22:	f107 030c 	add.w	r3, r7, #12
 8007e26:	490f      	ldr	r1, [pc, #60]	; (8007e64 <CO_CANsend+0xbc>)
 8007e28:	f001 fb86 	bl	8009538 <HAL_CAN_AddTxMessage>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00c      	beq.n	8007e4c <CO_CANsend+0xa4>
				&TxHeader,
				&buffer->data[0],
				&TxMailboxNum)
				!= HAL_OK)
		{
			err = CO_ERROR_HAL;
 8007e32:	23f1      	movs	r3, #241	; 0xf1
 8007e34:	77fb      	strb	r3, [r7, #31]
		if( HAL_CAN_AddTxMessage(CANmodule->CANbaseAddress,
 8007e36:	e009      	b.n	8007e4c <CO_CANsend+0xa4>
		}
	}
	/* if no buffer is free, message will be sent in the task */
	else
	{
		buffer->bufferFull = true;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	735a      	strb	r2, [r3, #13]
		CANmodule->CANtxCount++;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	8adb      	ldrh	r3, [r3, #22]
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	3301      	adds	r3, #1
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	82da      	strh	r2, [r3, #22]
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	f383 8810 	msr	PRIMASK, r3
}
 8007e56:	bf00      	nop
	}
	CO_UNLOCK_CAN_SEND();

	return err;
 8007e58:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3720      	adds	r7, #32
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	20000644 	.word	0x20000644

08007e68 <CO_CANclearPendingSyncPDOs>:


/******************************************************************************/
void CO_CANclearPendingSyncPDOs(CO_CANmodule_t *CANmodule)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b088      	sub	sp, #32
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
	uint32_t tpdoDeleted = 0U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e74:	f3ef 8310 	mrs	r3, PRIMASK
 8007e78:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e7a:	68fb      	ldr	r3, [r7, #12]

	CO_LOCK_CAN_SEND();
 8007e7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e7e:	b672      	cpsid	i
}
 8007e80:	bf00      	nop
      {
    	HAL_CAN_AbortTxRequest(CANmodule->);
      }
	 */

	if(/*messageIsOnCanBuffer && */CANmodule->bufferInhibitFlag){
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	7d1b      	ldrb	r3, [r3, #20]
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d004      	beq.n	8007e96 <CO_CANclearPendingSyncPDOs+0x2e>
		/* clear TXREQ */
		CANmodule->bufferInhibitFlag = false;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	751a      	strb	r2, [r3, #20]
		tpdoDeleted = 1U;
 8007e92:	2301      	movs	r3, #1
 8007e94:	61fb      	str	r3, [r7, #28]
	}
	/* delete also pending synchronous TPDOs in TX buffers */
	if(CANmodule->CANtxCount != 0U){
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	8adb      	ldrh	r3, [r3, #22]
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d025      	beq.n	8007eec <CO_CANclearPendingSyncPDOs+0x84>
		uint16_t i;
		CO_CANtx_t *buffer = &CANmodule->txArray[0];
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	617b      	str	r3, [r7, #20]
		for(i = CANmodule->txSize; i > 0U; i--){
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	8a1b      	ldrh	r3, [r3, #16]
 8007eaa:	837b      	strh	r3, [r7, #26]
 8007eac:	e01b      	b.n	8007ee6 <CO_CANclearPendingSyncPDOs+0x7e>
			if(buffer->bufferFull){
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	7b5b      	ldrb	r3, [r3, #13]
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d010      	beq.n	8007eda <CO_CANclearPendingSyncPDOs+0x72>
				if(buffer->syncFlag){
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	7b9b      	ldrb	r3, [r3, #14]
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00b      	beq.n	8007eda <CO_CANclearPendingSyncPDOs+0x72>
					buffer->bufferFull = false;
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	735a      	strb	r2, [r3, #13]
					CANmodule->CANtxCount--;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	8adb      	ldrh	r3, [r3, #22]
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	b29a      	uxth	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	82da      	strh	r2, [r3, #22]
					tpdoDeleted = 2U;
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	61fb      	str	r3, [r7, #28]
				}
			}
			buffer++;
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	3310      	adds	r3, #16
 8007ede:	617b      	str	r3, [r7, #20]
		for(i = CANmodule->txSize; i > 0U; i--){
 8007ee0:	8b7b      	ldrh	r3, [r7, #26]
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	837b      	strh	r3, [r7, #26]
 8007ee6:	8b7b      	ldrh	r3, [r7, #26]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1e0      	bne.n	8007eae <CO_CANclearPendingSyncPDOs+0x46>
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	f383 8810 	msr	PRIMASK, r3
}
 8007ef6:	bf00      	nop
		}
	}
	CO_UNLOCK_CAN_SEND();


	if(tpdoDeleted != 0U){
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d007      	beq.n	8007f0e <CO_CANclearPendingSyncPDOs+0xa6>
		CO_errorReport((CO_EM_t*)CANmodule->em, CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, tpdoDeleted);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	69d8      	ldr	r0, [r3, #28]
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8007f08:	2115      	movs	r1, #21
 8007f0a:	f7fb fc89 	bl	8003820 <CO_errorReport>
	}
}
 8007f0e:	bf00      	nop
 8007f10:	3720      	adds	r7, #32
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <CO_CANverifyErrors>:


/******************************************************************************/
void CO_CANverifyErrors(CO_CANmodule_t *CANmodule){
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b086      	sub	sp, #24
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
	CO_EM_t* em = (CO_EM_t*)CANmodule->em;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	69db      	ldr	r3, [r3, #28]
 8007f22:	617b      	str	r3, [r7, #20]
	uint32_t HalCanErrorCode = CANmodule->CANbaseAddress->ErrorCode;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2a:	613b      	str	r3, [r7, #16]

	if(CANmodule->errOld != HalCanErrorCode)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	699b      	ldr	r3, [r3, #24]
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d055      	beq.n	8007fe2 <CO_CANverifyErrors+0xcc>
	{
		CANmodule->errOld = HalCanErrorCode;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	693a      	ldr	r2, [r7, #16]
 8007f3a:	619a      	str	r2, [r3, #24]
		if(HalCanErrorCode & HAL_CAN_ERROR_BOF)
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	f003 0304 	and.w	r3, r3, #4
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d007      	beq.n	8007f56 <CO_CANverifyErrors+0x40>
		{                               /* bus off */
			CO_errorReport(em, CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, HalCanErrorCode);
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	f248 1240 	movw	r2, #33088	; 0x8140
 8007f4c:	2112      	movs	r1, #18
 8007f4e:	6978      	ldr	r0, [r7, #20]
 8007f50:	f7fb fc66 	bl	8003820 <CO_errorReport>
 8007f54:	e034      	b.n	8007fc0 <CO_CANverifyErrors+0xaa>
		}
		else{                                               /* not bus off */
			CO_errorReset(em, CO_EM_CAN_TX_BUS_OFF, HalCanErrorCode);
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	2112      	movs	r1, #18
 8007f5a:	6978      	ldr	r0, [r7, #20]
 8007f5c:	f7fb fd07 	bl	800396e <CO_errorReset>

			if(HalCanErrorCode & HAL_CAN_ERROR_EWG)
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d005      	beq.n	8007f76 <CO_CANverifyErrors+0x60>
			{     											/* bus warning */
				CO_errorReport(em, CO_EM_CAN_BUS_WARNING, CO_EMC_NO_ERROR, HalCanErrorCode);
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	2101      	movs	r1, #1
 8007f70:	6978      	ldr	r0, [r7, #20]
 8007f72:	f7fb fc55 	bl	8003820 <CO_errorReport>
			}
			else
			{
				//do nothing
			}
			if(HalCanErrorCode & HAL_CAN_ERROR_EPV)
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	f003 0302 	and.w	r3, r3, #2
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00c      	beq.n	8007f9a <CO_CANverifyErrors+0x84>
			{      											/* TX/RX bus passive */
				if(!CANmodule->firstCANtxMessage)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	7d5b      	ldrb	r3, [r3, #21]
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d11a      	bne.n	8007fc0 <CO_CANverifyErrors+0xaa>
				{
					CO_errorReport(em, CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, HalCanErrorCode);
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	f248 1220 	movw	r2, #33056	; 0x8120
 8007f90:	2107      	movs	r1, #7
 8007f92:	6978      	ldr	r0, [r7, #20]
 8007f94:	f7fb fc44 	bl	8003820 <CO_errorReport>
 8007f98:	e012      	b.n	8007fc0 <CO_CANverifyErrors+0xaa>
				{
					//do nothing
				}
			}
			else{
				bool_t isError = CO_isError(em, CO_EM_CAN_TX_BUS_PASSIVE);
 8007f9a:	2107      	movs	r1, #7
 8007f9c:	6978      	ldr	r0, [r7, #20]
 8007f9e:	f7fb fd88 	bl	8003ab2 <CO_isError>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	73fb      	strb	r3, [r7, #15]
				if(isError)
 8007fa6:	7bfb      	ldrb	r3, [r7, #15]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d009      	beq.n	8007fc0 <CO_CANverifyErrors+0xaa>
				{
					CO_errorReset(em, CO_EM_CAN_TX_BUS_PASSIVE, HalCanErrorCode);
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	2107      	movs	r1, #7
 8007fb0:	6978      	ldr	r0, [r7, #20]
 8007fb2:	f7fb fcdc 	bl	800396e <CO_errorReset>
					CO_errorReset(em, CO_EM_CAN_TX_OVERFLOW, HalCanErrorCode);
 8007fb6:	693a      	ldr	r2, [r7, #16]
 8007fb8:	2114      	movs	r1, #20
 8007fba:	6978      	ldr	r0, [r7, #20]
 8007fbc:	f7fb fcd7 	bl	800396e <CO_errorReset>
				//do nothing
			}

		}

		if((HalCanErrorCode & HAL_CAN_ERROR_RX_FOV0) || (HalCanErrorCode & HAL_CAN_ERROR_RX_FOV1))
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d104      	bne.n	8007fd4 <CO_CANverifyErrors+0xbe>
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d006      	beq.n	8007fe2 <CO_CANverifyErrors+0xcc>
		{                                 					/* CAN RX bus overflow */
			CO_errorReport(em, CO_EM_CAN_RXB_OVERFLOW, CO_EMC_CAN_OVERRUN, HalCanErrorCode);
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	f248 1210 	movw	r2, #33040	; 0x8110
 8007fda:	2113      	movs	r1, #19
 8007fdc:	6978      	ldr	r0, [r7, #20]
 8007fde:	f7fb fc1f 	bl	8003820 <CO_errorReport>
		else
		{
			//do nothing
		}
	}
}
 8007fe2:	bf00      	nop
 8007fe4:	3718      	adds	r7, #24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
	...

08007fec <CO_CANinterrupt_Rx>:

/*Interrupt handlers*/
/******************************************************************************/
void CO_CANinterrupt_Rx(const CO_CANmodule_t *CANmodule)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b086      	sub	sp, #24
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
	/* receive interrupt */

	static CO_CANrxMsg_t CANmessage;
	bool_t msgMatched = false;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	75fb      	strb	r3, [r7, #23]
	CO_CANrx_t *MsgBuff = CANmodule->rxArray; /* receive message buffer from CO_CANmodule_t object. */
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	613b      	str	r3, [r7, #16]
	HAL_CAN_GetRxMessage(CANmodule->CANbaseAddress, CAN_RX_FIFO0, &CANmessage.RxHeader, &CANmessage.data[0]);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6818      	ldr	r0, [r3, #0]
 8008002:	4b25      	ldr	r3, [pc, #148]	; (8008098 <CO_CANinterrupt_Rx+0xac>)
 8008004:	4a25      	ldr	r2, [pc, #148]	; (800809c <CO_CANinterrupt_Rx+0xb0>)
 8008006:	2100      	movs	r1, #0
 8008008:	f001 fba6 	bl	8009758 <HAL_CAN_GetRxMessage>

	/*dirty hack, consider change to a pointer here*/
	CANmessage.DLC = (uint8_t)CANmessage.RxHeader.DLC;
 800800c:	4b23      	ldr	r3, [pc, #140]	; (800809c <CO_CANinterrupt_Rx+0xb0>)
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	b2da      	uxtb	r2, r3
 8008012:	4b22      	ldr	r3, [pc, #136]	; (800809c <CO_CANinterrupt_Rx+0xb0>)
 8008014:	f883 2020 	strb.w	r2, [r3, #32]
	CANmessage.ident = CANmessage.RxHeader.StdId;
 8008018:	4b20      	ldr	r3, [pc, #128]	; (800809c <CO_CANinterrupt_Rx+0xb0>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a1f      	ldr	r2, [pc, #124]	; (800809c <CO_CANinterrupt_Rx+0xb0>)
 800801e:	61d3      	str	r3, [r2, #28]

	uint32_t index;
	/* Search rxArray form CANmodule for the same CAN-ID. */
	for (index = 0; index < CANmodule->rxSize; index++)
 8008020:	2300      	movs	r3, #0
 8008022:	60fb      	str	r3, [r7, #12]
 8008024:	e01d      	b.n	8008062 <CO_CANinterrupt_Rx+0x76>
	{
		uint16_t msg = (((uint16_t)(CANmessage.RxHeader.StdId << 2)) | (uint16_t)(CANmessage.RxHeader.RTR));
 8008026:	4b1d      	ldr	r3, [pc, #116]	; (800809c <CO_CANinterrupt_Rx+0xb0>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	b29b      	uxth	r3, r3
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	b29a      	uxth	r2, r3
 8008030:	4b1a      	ldr	r3, [pc, #104]	; (800809c <CO_CANinterrupt_Rx+0xb0>)
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	b29b      	uxth	r3, r3
 8008036:	4313      	orrs	r3, r2
 8008038:	817b      	strh	r3, [r7, #10]
		if (((msg ^ MsgBuff->ident) & MsgBuff->mask) == 0)
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	881a      	ldrh	r2, [r3, #0]
 800803e:	897b      	ldrh	r3, [r7, #10]
 8008040:	4053      	eors	r3, r2
 8008042:	b29a      	uxth	r2, r3
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	885b      	ldrh	r3, [r3, #2]
 8008048:	4013      	ands	r3, r2
 800804a:	b29b      	uxth	r3, r3
 800804c:	2b00      	cmp	r3, #0
 800804e:	d102      	bne.n	8008056 <CO_CANinterrupt_Rx+0x6a>
		{
			msgMatched = true;
 8008050:	2301      	movs	r3, #1
 8008052:	75fb      	strb	r3, [r7, #23]
			break;
 8008054:	e00b      	b.n	800806e <CO_CANinterrupt_Rx+0x82>
		}
		MsgBuff++;
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	330c      	adds	r3, #12
 800805a:	613b      	str	r3, [r7, #16]
	for (index = 0; index < CANmodule->rxSize; index++)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	3301      	adds	r3, #1
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	891b      	ldrh	r3, [r3, #8]
 8008066:	461a      	mov	r2, r3
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	4293      	cmp	r3, r2
 800806c:	d3db      	bcc.n	8008026 <CO_CANinterrupt_Rx+0x3a>
	}

	/* Call specific function, which will process the message */
	if(msgMatched && (MsgBuff != NULL) && (MsgBuff->pFunct != NULL))
 800806e:	7dfb      	ldrb	r3, [r7, #23]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00d      	beq.n	8008090 <CO_CANinterrupt_Rx+0xa4>
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00a      	beq.n	8008090 <CO_CANinterrupt_Rx+0xa4>
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d006      	beq.n	8008090 <CO_CANinterrupt_Rx+0xa4>
	{
		MsgBuff->pFunct(MsgBuff->object, &CANmessage);
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	6852      	ldr	r2, [r2, #4]
 800808a:	4904      	ldr	r1, [pc, #16]	; (800809c <CO_CANinterrupt_Rx+0xb0>)
 800808c:	4610      	mov	r0, r2
 800808e:	4798      	blx	r3
	//                buffer++;
	//            }
	//        }

	/*CubeMx HAL is responsible for clearing interrupt flags and all the dirty work. */
}
 8008090:	bf00      	nop
 8008092:	3718      	adds	r7, #24
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	2000067d 	.word	0x2000067d
 800809c:	2000065c 	.word	0x2000065c

080080a0 <CO_CANpolling_Tx>:


void CO_CANpolling_Tx(CO_CANmodule_t *CANmodule)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b086      	sub	sp, #24
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetTxMailboxesFreeLevel((CAN_HandleTypeDef*)CANmodule->CANbaseAddress) > 0)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4618      	mov	r0, r3
 80080ae:	f001 fb1e 	bl	80096ee <HAL_CAN_GetTxMailboxesFreeLevel>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d047      	beq.n	8008148 <CO_CANpolling_Tx+0xa8>
	{
		/* First CAN message (bootup) was sent successfully */
		CANmodule->firstCANtxMessage = false;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	755a      	strb	r2, [r3, #21]
		/* Clear flag from previous message */
		CANmodule->bufferInhibitFlag = false;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	751a      	strb	r2, [r3, #20]
		/* Are there any new messages waiting to be send */
		if(CANmodule->CANtxCount > 0U)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	8adb      	ldrh	r3, [r3, #22]
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d03c      	beq.n	8008148 <CO_CANpolling_Tx+0xa8>
		{
			uint16_t i;             /* index of transmitting message */

			/* first buffer */
			CO_CANtx_t *buffer = &CANmodule->txArray[0];
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	613b      	str	r3, [r7, #16]
			/* search through whole array of pointers to transmit message buffers. */
			for(i = CANmodule->txSize; i > 0U; i--)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	8a1b      	ldrh	r3, [r3, #16]
 80080d8:	82fb      	strh	r3, [r7, #22]
 80080da:	e02a      	b.n	8008132 <CO_CANpolling_Tx+0x92>
			{
				/* if message buffer is full, send it. */
				if(buffer->bufferFull)
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	7b5b      	ldrb	r3, [r3, #13]
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d01f      	beq.n	8008126 <CO_CANpolling_Tx+0x86>
				{

					/* Copy message to CAN buffer */
					CANmodule->bufferInhibitFlag = buffer->syncFlag;
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	7b9b      	ldrb	r3, [r3, #14]
 80080ea:	b2da      	uxtb	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	751a      	strb	r2, [r3, #20]

					uint32_t TxMailboxNum;

					prepareTxHeader(&TxHeader, buffer);
 80080f0:	6939      	ldr	r1, [r7, #16]
 80080f2:	4817      	ldr	r0, [pc, #92]	; (8008150 <CO_CANpolling_Tx+0xb0>)
 80080f4:	f7ff fbf3 	bl	80078de <prepareTxHeader>
					if( HAL_CAN_AddTxMessage(CANmodule->CANbaseAddress,
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6818      	ldr	r0, [r3, #0]
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	1d5a      	adds	r2, r3, #5
 8008100:	f107 030c 	add.w	r3, r7, #12
 8008104:	4912      	ldr	r1, [pc, #72]	; (8008150 <CO_CANpolling_Tx+0xb0>)
 8008106:	f001 fa17 	bl	8009538 <HAL_CAN_AddTxMessage>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d114      	bne.n	800813a <CO_CANpolling_Tx+0x9a>
					{
						;//do nothing
					}
					else
					{
						buffer->bufferFull = false;
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	2200      	movs	r2, #0
 8008114:	735a      	strb	r2, [r3, #13]
						CANmodule->CANtxCount--;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	8adb      	ldrh	r3, [r3, #22]
 800811a:	b29b      	uxth	r3, r3
 800811c:	3b01      	subs	r3, #1
 800811e:	b29a      	uxth	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	82da      	strh	r2, [r3, #22]
					}

					break;                      /* exit for loop */
 8008124:	e009      	b.n	800813a <CO_CANpolling_Tx+0x9a>
				}
				else
				{
					/*do nothing*/;
				}
				buffer++;
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	3310      	adds	r3, #16
 800812a:	613b      	str	r3, [r7, #16]
			for(i = CANmodule->txSize; i > 0U; i--)
 800812c:	8afb      	ldrh	r3, [r7, #22]
 800812e:	3b01      	subs	r3, #1
 8008130:	82fb      	strh	r3, [r7, #22]
 8008132:	8afb      	ldrh	r3, [r7, #22]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1d1      	bne.n	80080dc <CO_CANpolling_Tx+0x3c>
 8008138:	e000      	b.n	800813c <CO_CANpolling_Tx+0x9c>
					break;                      /* exit for loop */
 800813a:	bf00      	nop
			}/* end of for loop */

			/* Clear counter if no more messages */
			if(i == 0U)
 800813c:	8afb      	ldrh	r3, [r7, #22]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d102      	bne.n	8008148 <CO_CANpolling_Tx+0xa8>
			{
				CANmodule->CANtxCount = 0U;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	82da      	strh	r2, [r3, #22]
			{
				/*do nothing*/;
			}
		}
	}
}
 8008148:	bf00      	nop
 800814a:	3718      	adds	r7, #24
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	20000644 	.word	0x20000644

08008154 <crc16_ccitt>:
/******************************************************************************/
unsigned short crc16_ccitt(
        const unsigned char     block[],
        unsigned int            blockLength,
        unsigned short          crc)
{
 8008154:	b480      	push	{r7}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	4613      	mov	r3, r2
 8008160:	80fb      	strh	r3, [r7, #6]
    unsigned int i;

    for(i=0U; i<blockLength; i++){
 8008162:	2300      	movs	r3, #0
 8008164:	617b      	str	r3, [r7, #20]
 8008166:	e015      	b.n	8008194 <crc16_ccitt+0x40>
        unsigned short tmp = (crc >> 8) ^ (unsigned short) block[i];
 8008168:	88fb      	ldrh	r3, [r7, #6]
 800816a:	0a1b      	lsrs	r3, r3, #8
 800816c:	b29a      	uxth	r2, r3
 800816e:	68f9      	ldr	r1, [r7, #12]
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	440b      	add	r3, r1
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	b29b      	uxth	r3, r3
 8008178:	4053      	eors	r3, r2
 800817a:	827b      	strh	r3, [r7, #18]
        crc = ((unsigned short)(crc << 8U)) ^ crc16_ccitt_table[tmp];
 800817c:	88fb      	ldrh	r3, [r7, #6]
 800817e:	021b      	lsls	r3, r3, #8
 8008180:	b29a      	uxth	r2, r3
 8008182:	8a7b      	ldrh	r3, [r7, #18]
 8008184:	4909      	ldr	r1, [pc, #36]	; (80081ac <crc16_ccitt+0x58>)
 8008186:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800818a:	4053      	eors	r3, r2
 800818c:	80fb      	strh	r3, [r7, #6]
    for(i=0U; i<blockLength; i++){
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	3301      	adds	r3, #1
 8008192:	617b      	str	r3, [r7, #20]
 8008194:	697a      	ldr	r2, [r7, #20]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	429a      	cmp	r2, r3
 800819a:	d3e5      	bcc.n	8008168 <crc16_ccitt+0x14>
    }
    return crc;
 800819c:	88fb      	ldrh	r3, [r7, #6]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	371c      	adds	r7, #28
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	080143dc 	.word	0x080143dc

080081b0 <PCM9600begin>:
#include <stdint.h>
#include <stdbool.h>
#include <main.h>
#include <MCP9600.h>

bool PCM9600begin(PCM9600_t *module, I2C_HandleTypeDef hi2c1){
 80081b0:	b084      	sub	sp, #16
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b082      	sub	sp, #8
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	f107 0014 	add.w	r0, r7, #20
 80081be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	module->hi2c = hi2c1;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f107 0314 	add.w	r3, r7, #20
 80081ca:	224c      	movs	r2, #76	; 0x4c
 80081cc:	4619      	mov	r1, r3
 80081ce:	f009 f857 	bl	8011280 <memcpy>
	module->sensor_ID = 0x80;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2280      	movs	r2, #128	; 0x80
 80081d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	return 1;
 80081da:	2301      	movs	r3, #1
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081e6:	b004      	add	sp, #16
 80081e8:	4770      	bx	lr

080081ea <getThermocoupleTemp>:
}

/*----------------------------- Sensor Measurements ---------------------*/

uint8_t getThermocoupleTemp(PCM9600_t *module, bool units)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b084      	sub	sp, #16
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	460b      	mov	r3, r1
 80081f4:	70fb      	strb	r3, [r7, #3]
  int16_t raw = readDoubleRegister(module, HOT_JUNC_TEMP);
 80081f6:	2100      	movs	r1, #0
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 f822 	bl	8008242 <readDoubleRegister>
 80081fe:	4603      	mov	r3, r0
 8008200:	81fb      	strh	r3, [r7, #14]
  uint8_t LSB = raw & 0x00FF;
 8008202:	89fb      	ldrh	r3, [r7, #14]
 8008204:	737b      	strb	r3, [r7, #13]
  uint8_t MSB = raw>>8;
 8008206:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800820a:	121b      	asrs	r3, r3, #8
 800820c:	b21b      	sxth	r3, r3
 800820e:	733b      	strb	r3, [r7, #12]

  if((MSB & 0x80) == 0x80){
 8008210:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8008214:	2b00      	cmp	r3, #0
 8008216:	da08      	bge.n	800822a <getThermocoupleTemp+0x40>
	  return(((MSB*16)+(LSB/16))-4096);
 8008218:	7b3b      	ldrb	r3, [r7, #12]
 800821a:	011b      	lsls	r3, r3, #4
 800821c:	b2da      	uxtb	r2, r3
 800821e:	7b7b      	ldrb	r3, [r7, #13]
 8008220:	091b      	lsrs	r3, r3, #4
 8008222:	b2db      	uxtb	r3, r3
 8008224:	4413      	add	r3, r2
 8008226:	b2db      	uxtb	r3, r3
 8008228:	e007      	b.n	800823a <getThermocoupleTemp+0x50>
  }
  else{
	  return(((MSB*16)+(LSB/16)));
 800822a:	7b3b      	ldrb	r3, [r7, #12]
 800822c:	011b      	lsls	r3, r3, #4
 800822e:	b2da      	uxtb	r2, r3
 8008230:	7b7b      	ldrb	r3, [r7, #13]
 8008232:	091b      	lsrs	r3, r3, #4
 8008234:	b2db      	uxtb	r3, r3
 8008236:	4413      	add	r3, r2
 8008238:	b2db      	uxtb	r3, r3
  }
}
 800823a:	4618      	mov	r0, r3
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <readDoubleRegister>:
  return read8bits;

}

uint16_t readDoubleRegister(PCM9600_t *module, MCP9600_Register reg)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b086      	sub	sp, #24
 8008246:	af02      	add	r7, sp, #8
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	460b      	mov	r3, r1
 800824c:	70fb      	strb	r3, [r7, #3]
  //Attempt to read the register until we exit with no error code
  //This attempts to fix the bug where clock stretching sometimes failes, as
  //described in the MCP9600 eratta
	uint8_t read[2]={0,0};
 800824e:	2300      	movs	r3, #0
 8008250:	81bb      	strh	r3, [r7, #12]
	uint16_t read16bits = 0;
 8008252:	2300      	movs	r3, #0
 8008254:	81fb      	strh	r3, [r7, #14]

	while(HAL_I2C_Master_Transmit(&module->hi2c, 0xCE, &reg, 1, HAL_MAX_DELAY) != HAL_OK);
 8008256:	bf00      	nop
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	1cfa      	adds	r2, r7, #3
 800825c:	f04f 33ff 	mov.w	r3, #4294967295
 8008260:	9300      	str	r3, [sp, #0]
 8008262:	2301      	movs	r3, #1
 8008264:	21ce      	movs	r1, #206	; 0xce
 8008266:	f002 fb89 	bl	800a97c <HAL_I2C_Master_Transmit>
 800826a:	4603      	mov	r3, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1f3      	bne.n	8008258 <readDoubleRegister+0x16>
	while(HAL_I2C_IsDeviceReady(&module->hi2c,0xCE,10,200)!=HAL_OK);
 8008270:	bf00      	nop
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	23c8      	movs	r3, #200	; 0xc8
 8008276:	220a      	movs	r2, #10
 8008278:	21ce      	movs	r1, #206	; 0xce
 800827a:	f002 fd69 	bl	800ad50 <HAL_I2C_IsDeviceReady>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1f6      	bne.n	8008272 <readDoubleRegister+0x30>
	while(HAL_I2C_Master_Receive(&module->hi2c, 0XCF, read, sizeof(read), HAL_MAX_DELAY)!= HAL_OK);
 8008284:	bf00      	nop
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f107 020c 	add.w	r2, r7, #12
 800828c:	f04f 33ff 	mov.w	r3, #4294967295
 8008290:	9300      	str	r3, [sp, #0]
 8008292:	2302      	movs	r3, #2
 8008294:	21cf      	movs	r1, #207	; 0xcf
 8008296:	f002 fc65 	bl	800ab64 <HAL_I2C_Master_Receive>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1f2      	bne.n	8008286 <readDoubleRegister+0x44>
	read16bits = (read[0] << 8) | read[1];
 80082a0:	7b3b      	ldrb	r3, [r7, #12]
 80082a2:	021b      	lsls	r3, r3, #8
 80082a4:	b21a      	sxth	r2, r3
 80082a6:	7b7b      	ldrb	r3, [r7, #13]
 80082a8:	b21b      	sxth	r3, r3
 80082aa:	4313      	orrs	r3, r2
 80082ac:	b21b      	sxth	r3, r3
 80082ae:	81fb      	strh	r3, [r7, #14]
	return read16bits;
 80082b0:	89fb      	ldrh	r3, [r7, #14]


}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b082      	sub	sp, #8
 80082be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80082c0:	2300      	movs	r3, #0
 80082c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80082c4:	2003      	movs	r0, #3
 80082c6:	f001 fe9c 	bl	800a002 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80082ca:	2000      	movs	r0, #0
 80082cc:	f7fa f802 	bl	80022d4 <HAL_InitTick>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d002      	beq.n	80082dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	71fb      	strb	r3, [r7, #7]
 80082da:	e001      	b.n	80082e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80082dc:	f7f9 ffd2 	bl	8002284 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80082e0:	79fb      	ldrb	r3, [r7, #7]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3708      	adds	r7, #8
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
	...

080082ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80082ec:	b480      	push	{r7}
 80082ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80082f0:	4b06      	ldr	r3, [pc, #24]	; (800830c <HAL_IncTick+0x20>)
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	461a      	mov	r2, r3
 80082f6:	4b06      	ldr	r3, [pc, #24]	; (8008310 <HAL_IncTick+0x24>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4413      	add	r3, r2
 80082fc:	4a04      	ldr	r2, [pc, #16]	; (8008310 <HAL_IncTick+0x24>)
 80082fe:	6013      	str	r3, [r2, #0]
}
 8008300:	bf00      	nop
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	200003dc 	.word	0x200003dc
 8008310:	20008c24 	.word	0x20008c24

08008314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008314:	b480      	push	{r7}
 8008316:	af00      	add	r7, sp, #0
  return uwTick;
 8008318:	4b03      	ldr	r3, [pc, #12]	; (8008328 <HAL_GetTick+0x14>)
 800831a:	681b      	ldr	r3, [r3, #0]
}
 800831c:	4618      	mov	r0, r3
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	20008c24 	.word	0x20008c24

0800832c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	431a      	orrs	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	609a      	str	r2, [r3, #8]
}
 8008346:	bf00      	nop
 8008348:	370c      	adds	r7, #12
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr

08008352 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008352:	b480      	push	{r7}
 8008354:	b083      	sub	sp, #12
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
 800835a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	431a      	orrs	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	609a      	str	r2, [r3, #8]
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8008388:	4618      	mov	r0, r3
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008394:	b480      	push	{r7}
 8008396:	b087      	sub	sp, #28
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
 80083a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	3360      	adds	r3, #96	; 0x60
 80083a6:	461a      	mov	r2, r3
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4413      	add	r3, r2
 80083ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	4b08      	ldr	r3, [pc, #32]	; (80083d8 <LL_ADC_SetOffset+0x44>)
 80083b6:	4013      	ands	r3, r2
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	430a      	orrs	r2, r1
 80083c2:	4313      	orrs	r3, r2
 80083c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80083cc:	bf00      	nop
 80083ce:	371c      	adds	r7, #28
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr
 80083d8:	03fff000 	.word	0x03fff000

080083dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	3360      	adds	r3, #96	; 0x60
 80083ea:	461a      	mov	r2, r3
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	4413      	add	r3, r2
 80083f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008408:	b480      	push	{r7}
 800840a:	b087      	sub	sp, #28
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	3360      	adds	r3, #96	; 0x60
 8008418:	461a      	mov	r2, r3
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	4413      	add	r3, r2
 8008420:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	431a      	orrs	r2, r3
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8008432:	bf00      	nop
 8008434:	371c      	adds	r7, #28
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr

0800843e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800843e:	b480      	push	{r7}
 8008440:	b087      	sub	sp, #28
 8008442:	af00      	add	r7, sp, #0
 8008444:	60f8      	str	r0, [r7, #12]
 8008446:	60b9      	str	r1, [r7, #8]
 8008448:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	3330      	adds	r3, #48	; 0x30
 800844e:	461a      	mov	r2, r3
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	0a1b      	lsrs	r3, r3, #8
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	f003 030c 	and.w	r3, r3, #12
 800845a:	4413      	add	r3, r2
 800845c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	f003 031f 	and.w	r3, r3, #31
 8008468:	211f      	movs	r1, #31
 800846a:	fa01 f303 	lsl.w	r3, r1, r3
 800846e:	43db      	mvns	r3, r3
 8008470:	401a      	ands	r2, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	0e9b      	lsrs	r3, r3, #26
 8008476:	f003 011f 	and.w	r1, r3, #31
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	f003 031f 	and.w	r3, r3, #31
 8008480:	fa01 f303 	lsl.w	r3, r1, r3
 8008484:	431a      	orrs	r2, r3
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800848a:	bf00      	nop
 800848c:	371c      	adds	r7, #28
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr

08008496 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008496:	b480      	push	{r7}
 8008498:	b087      	sub	sp, #28
 800849a:	af00      	add	r7, sp, #0
 800849c:	60f8      	str	r0, [r7, #12]
 800849e:	60b9      	str	r1, [r7, #8]
 80084a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	3314      	adds	r3, #20
 80084a6:	461a      	mov	r2, r3
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	0e5b      	lsrs	r3, r3, #25
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	f003 0304 	and.w	r3, r3, #4
 80084b2:	4413      	add	r3, r2
 80084b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	0d1b      	lsrs	r3, r3, #20
 80084be:	f003 031f 	and.w	r3, r3, #31
 80084c2:	2107      	movs	r1, #7
 80084c4:	fa01 f303 	lsl.w	r3, r1, r3
 80084c8:	43db      	mvns	r3, r3
 80084ca:	401a      	ands	r2, r3
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	0d1b      	lsrs	r3, r3, #20
 80084d0:	f003 031f 	and.w	r3, r3, #31
 80084d4:	6879      	ldr	r1, [r7, #4]
 80084d6:	fa01 f303 	lsl.w	r3, r1, r3
 80084da:	431a      	orrs	r2, r3
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80084e0:	bf00      	nop
 80084e2:	371c      	adds	r7, #28
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008504:	43db      	mvns	r3, r3
 8008506:	401a      	ands	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f003 0318 	and.w	r3, r3, #24
 800850e:	4908      	ldr	r1, [pc, #32]	; (8008530 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008510:	40d9      	lsrs	r1, r3
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	400b      	ands	r3, r1
 8008516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800851a:	431a      	orrs	r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008522:	bf00      	nop
 8008524:	3714      	adds	r7, #20
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	0007ffff 	.word	0x0007ffff

08008534 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8008544:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	6093      	str	r3, [r2, #8]
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800856c:	d101      	bne.n	8008572 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800856e:	2301      	movs	r3, #1
 8008570:	e000      	b.n	8008574 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008590:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008594:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085bc:	d101      	bne.n	80085c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80085be:	2301      	movs	r3, #1
 80085c0:	e000      	b.n	80085c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	f003 0301 	and.w	r3, r3, #1
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d101      	bne.n	80085e8 <LL_ADC_IsEnabled+0x18>
 80085e4:	2301      	movs	r3, #1
 80085e6:	e000      	b.n	80085ea <LL_ADC_IsEnabled+0x1a>
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	370c      	adds	r7, #12
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr

080085f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80085f6:	b480      	push	{r7}
 80085f8:	b083      	sub	sp, #12
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	f003 0304 	and.w	r3, r3, #4
 8008606:	2b04      	cmp	r3, #4
 8008608:	d101      	bne.n	800860e <LL_ADC_REG_IsConversionOngoing+0x18>
 800860a:	2301      	movs	r3, #1
 800860c:	e000      	b.n	8008610 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	f003 0308 	and.w	r3, r3, #8
 800862c:	2b08      	cmp	r3, #8
 800862e:	d101      	bne.n	8008634 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008630:	2301      	movs	r3, #1
 8008632:	e000      	b.n	8008636 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	370c      	adds	r7, #12
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
	...

08008644 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b088      	sub	sp, #32
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800864c:	2300      	movs	r3, #0
 800864e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008650:	2300      	movs	r3, #0
 8008652:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d101      	bne.n	800865e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e12c      	b.n	80088b8 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008668:	2b00      	cmp	r3, #0
 800866a:	d109      	bne.n	8008680 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f7f8 fc9b 	bl	8000fa8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4618      	mov	r0, r3
 8008686:	f7ff ff67 	bl	8008558 <LL_ADC_IsDeepPowerDownEnabled>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d004      	beq.n	800869a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4618      	mov	r0, r3
 8008696:	f7ff ff4d 	bl	8008534 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4618      	mov	r0, r3
 80086a0:	f7ff ff82 	bl	80085a8 <LL_ADC_IsInternalRegulatorEnabled>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d115      	bne.n	80086d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7ff ff66 	bl	8008580 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80086b4:	4b82      	ldr	r3, [pc, #520]	; (80088c0 <HAL_ADC_Init+0x27c>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	099b      	lsrs	r3, r3, #6
 80086ba:	4a82      	ldr	r2, [pc, #520]	; (80088c4 <HAL_ADC_Init+0x280>)
 80086bc:	fba2 2303 	umull	r2, r3, r2, r3
 80086c0:	099b      	lsrs	r3, r3, #6
 80086c2:	3301      	adds	r3, #1
 80086c4:	005b      	lsls	r3, r3, #1
 80086c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80086c8:	e002      	b.n	80086d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	3b01      	subs	r3, #1
 80086ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1f9      	bne.n	80086ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4618      	mov	r0, r3
 80086dc:	f7ff ff64 	bl	80085a8 <LL_ADC_IsInternalRegulatorEnabled>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10d      	bne.n	8008702 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ea:	f043 0210 	orr.w	r2, r3, #16
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086f6:	f043 0201 	orr.w	r2, r3, #1
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4618      	mov	r0, r3
 8008708:	f7ff ff75 	bl	80085f6 <LL_ADC_REG_IsConversionOngoing>
 800870c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008712:	f003 0310 	and.w	r3, r3, #16
 8008716:	2b00      	cmp	r3, #0
 8008718:	f040 80c5 	bne.w	80088a6 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	2b00      	cmp	r3, #0
 8008720:	f040 80c1 	bne.w	80088a6 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008728:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800872c:	f043 0202 	orr.w	r2, r3, #2
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4618      	mov	r0, r3
 800873a:	f7ff ff49 	bl	80085d0 <LL_ADC_IsEnabled>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10b      	bne.n	800875c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008744:	4860      	ldr	r0, [pc, #384]	; (80088c8 <HAL_ADC_Init+0x284>)
 8008746:	f7ff ff43 	bl	80085d0 <LL_ADC_IsEnabled>
 800874a:	4603      	mov	r3, r0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d105      	bne.n	800875c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	4619      	mov	r1, r3
 8008756:	485d      	ldr	r0, [pc, #372]	; (80088cc <HAL_ADC_Init+0x288>)
 8008758:	f7ff fde8 	bl	800832c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	7e5b      	ldrb	r3, [r3, #25]
 8008760:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008766:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800876c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8008772:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f893 3020 	ldrb.w	r3, [r3, #32]
 800877a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800877c:	4313      	orrs	r3, r2
 800877e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d106      	bne.n	8008798 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878e:	3b01      	subs	r3, #1
 8008790:	045b      	lsls	r3, r3, #17
 8008792:	69ba      	ldr	r2, [r7, #24]
 8008794:	4313      	orrs	r3, r2
 8008796:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879c:	2b00      	cmp	r3, #0
 800879e:	d009      	beq.n	80087b4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80087ae:	69ba      	ldr	r2, [r7, #24]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68da      	ldr	r2, [r3, #12]
 80087ba:	4b45      	ldr	r3, [pc, #276]	; (80088d0 <HAL_ADC_Init+0x28c>)
 80087bc:	4013      	ands	r3, r2
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	6812      	ldr	r2, [r2, #0]
 80087c2:	69b9      	ldr	r1, [r7, #24]
 80087c4:	430b      	orrs	r3, r1
 80087c6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7ff ff12 	bl	80085f6 <LL_ADC_REG_IsConversionOngoing>
 80087d2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4618      	mov	r0, r3
 80087da:	f7ff ff1f 	bl	800861c <LL_ADC_INJ_IsConversionOngoing>
 80087de:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d13d      	bne.n	8008862 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d13a      	bne.n	8008862 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80087f0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80087f8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80087fa:	4313      	orrs	r3, r2
 80087fc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008808:	f023 0302 	bic.w	r3, r3, #2
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	6812      	ldr	r2, [r2, #0]
 8008810:	69b9      	ldr	r1, [r7, #24]
 8008812:	430b      	orrs	r3, r1
 8008814:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800881c:	2b01      	cmp	r3, #1
 800881e:	d118      	bne.n	8008852 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800882a:	f023 0304 	bic.w	r3, r3, #4
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008836:	4311      	orrs	r1, r2
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800883c:	4311      	orrs	r1, r2
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008842:	430a      	orrs	r2, r1
 8008844:	431a      	orrs	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f042 0201 	orr.w	r2, r2, #1
 800884e:	611a      	str	r2, [r3, #16]
 8008850:	e007      	b.n	8008862 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	691a      	ldr	r2, [r3, #16]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f022 0201 	bic.w	r2, r2, #1
 8008860:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d10c      	bne.n	8008884 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008870:	f023 010f 	bic.w	r1, r3, #15
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	69db      	ldr	r3, [r3, #28]
 8008878:	1e5a      	subs	r2, r3, #1
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	430a      	orrs	r2, r1
 8008880:	631a      	str	r2, [r3, #48]	; 0x30
 8008882:	e007      	b.n	8008894 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f022 020f 	bic.w	r2, r2, #15
 8008892:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008898:	f023 0303 	bic.w	r3, r3, #3
 800889c:	f043 0201 	orr.w	r2, r3, #1
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	655a      	str	r2, [r3, #84]	; 0x54
 80088a4:	e007      	b.n	80088b6 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088aa:	f043 0210 	orr.w	r2, r3, #16
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80088b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3720      	adds	r7, #32
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	200003d4 	.word	0x200003d4
 80088c4:	053e2d63 	.word	0x053e2d63
 80088c8:	50040000 	.word	0x50040000
 80088cc:	50040300 	.word	0x50040300
 80088d0:	fff0c007 	.word	0xfff0c007

080088d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b0b6      	sub	sp, #216	; 0xd8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80088e4:	2300      	movs	r3, #0
 80088e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d101      	bne.n	80088f6 <HAL_ADC_ConfigChannel+0x22>
 80088f2:	2302      	movs	r3, #2
 80088f4:	e3b9      	b.n	800906a <HAL_ADC_ConfigChannel+0x796>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2201      	movs	r2, #1
 80088fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4618      	mov	r0, r3
 8008904:	f7ff fe77 	bl	80085f6 <LL_ADC_REG_IsConversionOngoing>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	f040 839e 	bne.w	800904c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	2b05      	cmp	r3, #5
 8008916:	d824      	bhi.n	8008962 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	3b02      	subs	r3, #2
 800891e:	2b03      	cmp	r3, #3
 8008920:	d81b      	bhi.n	800895a <HAL_ADC_ConfigChannel+0x86>
 8008922:	a201      	add	r2, pc, #4	; (adr r2, 8008928 <HAL_ADC_ConfigChannel+0x54>)
 8008924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008928:	08008939 	.word	0x08008939
 800892c:	08008941 	.word	0x08008941
 8008930:	08008949 	.word	0x08008949
 8008934:	08008951 	.word	0x08008951
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	220c      	movs	r2, #12
 800893c:	605a      	str	r2, [r3, #4]
          break;
 800893e:	e011      	b.n	8008964 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	2212      	movs	r2, #18
 8008944:	605a      	str	r2, [r3, #4]
          break;
 8008946:	e00d      	b.n	8008964 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	2218      	movs	r2, #24
 800894c:	605a      	str	r2, [r3, #4]
          break;
 800894e:	e009      	b.n	8008964 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008956:	605a      	str	r2, [r3, #4]
          break;
 8008958:	e004      	b.n	8008964 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	2206      	movs	r2, #6
 800895e:	605a      	str	r2, [r3, #4]
          break;
 8008960:	e000      	b.n	8008964 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8008962:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6818      	ldr	r0, [r3, #0]
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	6859      	ldr	r1, [r3, #4]
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	461a      	mov	r2, r3
 8008972:	f7ff fd64 	bl	800843e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4618      	mov	r0, r3
 800897c:	f7ff fe3b 	bl	80085f6 <LL_ADC_REG_IsConversionOngoing>
 8008980:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4618      	mov	r0, r3
 800898a:	f7ff fe47 	bl	800861c <LL_ADC_INJ_IsConversionOngoing>
 800898e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008992:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008996:	2b00      	cmp	r3, #0
 8008998:	f040 81a6 	bne.w	8008ce8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800899c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f040 81a1 	bne.w	8008ce8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6818      	ldr	r0, [r3, #0]
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	6819      	ldr	r1, [r3, #0]
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	461a      	mov	r2, r3
 80089b4:	f7ff fd6f 	bl	8008496 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	695a      	ldr	r2, [r3, #20]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	08db      	lsrs	r3, r3, #3
 80089c4:	f003 0303 	and.w	r3, r3, #3
 80089c8:	005b      	lsls	r3, r3, #1
 80089ca:	fa02 f303 	lsl.w	r3, r2, r3
 80089ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	2b04      	cmp	r3, #4
 80089d8:	d00a      	beq.n	80089f0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6818      	ldr	r0, [r3, #0]
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	6919      	ldr	r1, [r3, #16]
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089ea:	f7ff fcd3 	bl	8008394 <LL_ADC_SetOffset>
 80089ee:	e17b      	b.n	8008ce8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2100      	movs	r1, #0
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7ff fcf0 	bl	80083dc <LL_ADC_GetOffsetChannel>
 80089fc:	4603      	mov	r3, r0
 80089fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10a      	bne.n	8008a1c <HAL_ADC_ConfigChannel+0x148>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2100      	movs	r1, #0
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7ff fce5 	bl	80083dc <LL_ADC_GetOffsetChannel>
 8008a12:	4603      	mov	r3, r0
 8008a14:	0e9b      	lsrs	r3, r3, #26
 8008a16:	f003 021f 	and.w	r2, r3, #31
 8008a1a:	e01e      	b.n	8008a5a <HAL_ADC_ConfigChannel+0x186>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2100      	movs	r1, #0
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7ff fcda 	bl	80083dc <LL_ADC_GetOffsetChannel>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008a32:	fa93 f3a3 	rbit	r3, r3
 8008a36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008a3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8008a42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d101      	bne.n	8008a4e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8008a4a:	2320      	movs	r3, #32
 8008a4c:	e004      	b.n	8008a58 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8008a4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008a52:	fab3 f383 	clz	r3, r3
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d105      	bne.n	8008a72 <HAL_ADC_ConfigChannel+0x19e>
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	0e9b      	lsrs	r3, r3, #26
 8008a6c:	f003 031f 	and.w	r3, r3, #31
 8008a70:	e018      	b.n	8008aa4 <HAL_ADC_ConfigChannel+0x1d0>
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008a7e:	fa93 f3a3 	rbit	r3, r3
 8008a82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8008a86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8008a8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d101      	bne.n	8008a9a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8008a96:	2320      	movs	r3, #32
 8008a98:	e004      	b.n	8008aa4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8008a9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a9e:	fab3 f383 	clz	r3, r3
 8008aa2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d106      	bne.n	8008ab6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2200      	movs	r2, #0
 8008aae:	2100      	movs	r1, #0
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7ff fca9 	bl	8008408 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2101      	movs	r1, #1
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7ff fc8d 	bl	80083dc <LL_ADC_GetOffsetChannel>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d10a      	bne.n	8008ae2 <HAL_ADC_ConfigChannel+0x20e>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7ff fc82 	bl	80083dc <LL_ADC_GetOffsetChannel>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	0e9b      	lsrs	r3, r3, #26
 8008adc:	f003 021f 	and.w	r2, r3, #31
 8008ae0:	e01e      	b.n	8008b20 <HAL_ADC_ConfigChannel+0x24c>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2101      	movs	r1, #1
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7ff fc77 	bl	80083dc <LL_ADC_GetOffsetChannel>
 8008aee:	4603      	mov	r3, r0
 8008af0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008af4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008af8:	fa93 f3a3 	rbit	r3, r3
 8008afc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8008b00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8008b08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d101      	bne.n	8008b14 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8008b10:	2320      	movs	r3, #32
 8008b12:	e004      	b.n	8008b1e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8008b14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008b18:	fab3 f383 	clz	r3, r3
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d105      	bne.n	8008b38 <HAL_ADC_ConfigChannel+0x264>
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	0e9b      	lsrs	r3, r3, #26
 8008b32:	f003 031f 	and.w	r3, r3, #31
 8008b36:	e018      	b.n	8008b6a <HAL_ADC_ConfigChannel+0x296>
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b44:	fa93 f3a3 	rbit	r3, r3
 8008b48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8008b4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008b50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8008b54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d101      	bne.n	8008b60 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8008b5c:	2320      	movs	r3, #32
 8008b5e:	e004      	b.n	8008b6a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8008b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b64:	fab3 f383 	clz	r3, r3
 8008b68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d106      	bne.n	8008b7c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2200      	movs	r2, #0
 8008b74:	2101      	movs	r1, #1
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7ff fc46 	bl	8008408 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2102      	movs	r1, #2
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7ff fc2a 	bl	80083dc <LL_ADC_GetOffsetChannel>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d10a      	bne.n	8008ba8 <HAL_ADC_ConfigChannel+0x2d4>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2102      	movs	r1, #2
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7ff fc1f 	bl	80083dc <LL_ADC_GetOffsetChannel>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	0e9b      	lsrs	r3, r3, #26
 8008ba2:	f003 021f 	and.w	r2, r3, #31
 8008ba6:	e01e      	b.n	8008be6 <HAL_ADC_ConfigChannel+0x312>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2102      	movs	r1, #2
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7ff fc14 	bl	80083dc <LL_ADC_GetOffsetChannel>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bbe:	fa93 f3a3 	rbit	r3, r3
 8008bc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8008bc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008bca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8008bce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d101      	bne.n	8008bda <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8008bd6:	2320      	movs	r3, #32
 8008bd8:	e004      	b.n	8008be4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8008bda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008bde:	fab3 f383 	clz	r3, r3
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d105      	bne.n	8008bfe <HAL_ADC_ConfigChannel+0x32a>
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	0e9b      	lsrs	r3, r3, #26
 8008bf8:	f003 031f 	and.w	r3, r3, #31
 8008bfc:	e016      	b.n	8008c2c <HAL_ADC_ConfigChannel+0x358>
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c0a:	fa93 f3a3 	rbit	r3, r3
 8008c0e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8008c10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008c12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8008c16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d101      	bne.n	8008c22 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8008c1e:	2320      	movs	r3, #32
 8008c20:	e004      	b.n	8008c2c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8008c22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c26:	fab3 f383 	clz	r3, r3
 8008c2a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d106      	bne.n	8008c3e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2200      	movs	r2, #0
 8008c36:	2102      	movs	r1, #2
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f7ff fbe5 	bl	8008408 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2103      	movs	r1, #3
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7ff fbc9 	bl	80083dc <LL_ADC_GetOffsetChannel>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d10a      	bne.n	8008c6a <HAL_ADC_ConfigChannel+0x396>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2103      	movs	r1, #3
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7ff fbbe 	bl	80083dc <LL_ADC_GetOffsetChannel>
 8008c60:	4603      	mov	r3, r0
 8008c62:	0e9b      	lsrs	r3, r3, #26
 8008c64:	f003 021f 	and.w	r2, r3, #31
 8008c68:	e017      	b.n	8008c9a <HAL_ADC_ConfigChannel+0x3c6>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2103      	movs	r1, #3
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7ff fbb3 	bl	80083dc <LL_ADC_GetOffsetChannel>
 8008c76:	4603      	mov	r3, r0
 8008c78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c7c:	fa93 f3a3 	rbit	r3, r3
 8008c80:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8008c82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c84:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8008c86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d101      	bne.n	8008c90 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8008c8c:	2320      	movs	r3, #32
 8008c8e:	e003      	b.n	8008c98 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8008c90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c92:	fab3 f383 	clz	r3, r3
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d105      	bne.n	8008cb2 <HAL_ADC_ConfigChannel+0x3de>
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	0e9b      	lsrs	r3, r3, #26
 8008cac:	f003 031f 	and.w	r3, r3, #31
 8008cb0:	e011      	b.n	8008cd6 <HAL_ADC_ConfigChannel+0x402>
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008cba:	fa93 f3a3 	rbit	r3, r3
 8008cbe:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008cc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cc2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8008cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d101      	bne.n	8008cce <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8008cca:	2320      	movs	r3, #32
 8008ccc:	e003      	b.n	8008cd6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8008cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cd0:	fab3 f383 	clz	r3, r3
 8008cd4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d106      	bne.n	8008ce8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	2103      	movs	r1, #3
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7ff fb90 	bl	8008408 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7ff fc6f 	bl	80085d0 <LL_ADC_IsEnabled>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f040 813f 	bne.w	8008f78 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6818      	ldr	r0, [r3, #0]
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	6819      	ldr	r1, [r3, #0]
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	461a      	mov	r2, r3
 8008d08:	f7ff fbf0 	bl	80084ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	4a8e      	ldr	r2, [pc, #568]	; (8008f4c <HAL_ADC_ConfigChannel+0x678>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	f040 8130 	bne.w	8008f78 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d10b      	bne.n	8008d40 <HAL_ADC_ConfigChannel+0x46c>
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	0e9b      	lsrs	r3, r3, #26
 8008d2e:	3301      	adds	r3, #1
 8008d30:	f003 031f 	and.w	r3, r3, #31
 8008d34:	2b09      	cmp	r3, #9
 8008d36:	bf94      	ite	ls
 8008d38:	2301      	movls	r3, #1
 8008d3a:	2300      	movhi	r3, #0
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	e019      	b.n	8008d74 <HAL_ADC_ConfigChannel+0x4a0>
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d48:	fa93 f3a3 	rbit	r3, r3
 8008d4c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8008d4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d50:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8008d52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d101      	bne.n	8008d5c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8008d58:	2320      	movs	r3, #32
 8008d5a:	e003      	b.n	8008d64 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8008d5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d5e:	fab3 f383 	clz	r3, r3
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	3301      	adds	r3, #1
 8008d66:	f003 031f 	and.w	r3, r3, #31
 8008d6a:	2b09      	cmp	r3, #9
 8008d6c:	bf94      	ite	ls
 8008d6e:	2301      	movls	r3, #1
 8008d70:	2300      	movhi	r3, #0
 8008d72:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d079      	beq.n	8008e6c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d107      	bne.n	8008d94 <HAL_ADC_ConfigChannel+0x4c0>
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	0e9b      	lsrs	r3, r3, #26
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	069b      	lsls	r3, r3, #26
 8008d8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008d92:	e015      	b.n	8008dc0 <HAL_ADC_ConfigChannel+0x4ec>
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d9c:	fa93 f3a3 	rbit	r3, r3
 8008da0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008da4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8008da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d101      	bne.n	8008db0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8008dac:	2320      	movs	r3, #32
 8008dae:	e003      	b.n	8008db8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8008db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008db2:	fab3 f383 	clz	r3, r3
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	3301      	adds	r3, #1
 8008dba:	069b      	lsls	r3, r3, #26
 8008dbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d109      	bne.n	8008de0 <HAL_ADC_ConfigChannel+0x50c>
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	0e9b      	lsrs	r3, r3, #26
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	f003 031f 	and.w	r3, r3, #31
 8008dd8:	2101      	movs	r1, #1
 8008dda:	fa01 f303 	lsl.w	r3, r1, r3
 8008dde:	e017      	b.n	8008e10 <HAL_ADC_ConfigChannel+0x53c>
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008de8:	fa93 f3a3 	rbit	r3, r3
 8008dec:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8008dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008df0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8008df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d101      	bne.n	8008dfc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8008df8:	2320      	movs	r3, #32
 8008dfa:	e003      	b.n	8008e04 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8008dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dfe:	fab3 f383 	clz	r3, r3
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	3301      	adds	r3, #1
 8008e06:	f003 031f 	and.w	r3, r3, #31
 8008e0a:	2101      	movs	r1, #1
 8008e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e10:	ea42 0103 	orr.w	r1, r2, r3
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10a      	bne.n	8008e36 <HAL_ADC_ConfigChannel+0x562>
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	0e9b      	lsrs	r3, r3, #26
 8008e26:	3301      	adds	r3, #1
 8008e28:	f003 021f 	and.w	r2, r3, #31
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	005b      	lsls	r3, r3, #1
 8008e30:	4413      	add	r3, r2
 8008e32:	051b      	lsls	r3, r3, #20
 8008e34:	e018      	b.n	8008e68 <HAL_ADC_ConfigChannel+0x594>
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3e:	fa93 f3a3 	rbit	r3, r3
 8008e42:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8008e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d101      	bne.n	8008e52 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8008e4e:	2320      	movs	r3, #32
 8008e50:	e003      	b.n	8008e5a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8008e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e54:	fab3 f383 	clz	r3, r3
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	f003 021f 	and.w	r2, r3, #31
 8008e60:	4613      	mov	r3, r2
 8008e62:	005b      	lsls	r3, r3, #1
 8008e64:	4413      	add	r3, r2
 8008e66:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008e68:	430b      	orrs	r3, r1
 8008e6a:	e080      	b.n	8008f6e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d107      	bne.n	8008e88 <HAL_ADC_ConfigChannel+0x5b4>
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	0e9b      	lsrs	r3, r3, #26
 8008e7e:	3301      	adds	r3, #1
 8008e80:	069b      	lsls	r3, r3, #26
 8008e82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008e86:	e015      	b.n	8008eb4 <HAL_ADC_ConfigChannel+0x5e0>
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e90:	fa93 f3a3 	rbit	r3, r3
 8008e94:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8008e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e98:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8008e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d101      	bne.n	8008ea4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8008ea0:	2320      	movs	r3, #32
 8008ea2:	e003      	b.n	8008eac <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8008ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea6:	fab3 f383 	clz	r3, r3
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	3301      	adds	r3, #1
 8008eae:	069b      	lsls	r3, r3, #26
 8008eb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d109      	bne.n	8008ed4 <HAL_ADC_ConfigChannel+0x600>
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	0e9b      	lsrs	r3, r3, #26
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	f003 031f 	and.w	r3, r3, #31
 8008ecc:	2101      	movs	r1, #1
 8008ece:	fa01 f303 	lsl.w	r3, r1, r3
 8008ed2:	e017      	b.n	8008f04 <HAL_ADC_ConfigChannel+0x630>
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008eda:	6a3b      	ldr	r3, [r7, #32]
 8008edc:	fa93 f3a3 	rbit	r3, r3
 8008ee0:	61fb      	str	r3, [r7, #28]
  return result;
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d101      	bne.n	8008ef0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8008eec:	2320      	movs	r3, #32
 8008eee:	e003      	b.n	8008ef8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8008ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef2:	fab3 f383 	clz	r3, r3
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	3301      	adds	r3, #1
 8008efa:	f003 031f 	and.w	r3, r3, #31
 8008efe:	2101      	movs	r1, #1
 8008f00:	fa01 f303 	lsl.w	r3, r1, r3
 8008f04:	ea42 0103 	orr.w	r1, r2, r3
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d10d      	bne.n	8008f30 <HAL_ADC_ConfigChannel+0x65c>
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	0e9b      	lsrs	r3, r3, #26
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	f003 021f 	and.w	r2, r3, #31
 8008f20:	4613      	mov	r3, r2
 8008f22:	005b      	lsls	r3, r3, #1
 8008f24:	4413      	add	r3, r2
 8008f26:	3b1e      	subs	r3, #30
 8008f28:	051b      	lsls	r3, r3, #20
 8008f2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008f2e:	e01d      	b.n	8008f6c <HAL_ADC_ConfigChannel+0x698>
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	fa93 f3a3 	rbit	r3, r3
 8008f3c:	613b      	str	r3, [r7, #16]
  return result;
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d103      	bne.n	8008f50 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8008f48:	2320      	movs	r3, #32
 8008f4a:	e005      	b.n	8008f58 <HAL_ADC_ConfigChannel+0x684>
 8008f4c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	fab3 f383 	clz	r3, r3
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	3301      	adds	r3, #1
 8008f5a:	f003 021f 	and.w	r2, r3, #31
 8008f5e:	4613      	mov	r3, r2
 8008f60:	005b      	lsls	r3, r3, #1
 8008f62:	4413      	add	r3, r2
 8008f64:	3b1e      	subs	r3, #30
 8008f66:	051b      	lsls	r3, r3, #20
 8008f68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008f6c:	430b      	orrs	r3, r1
 8008f6e:	683a      	ldr	r2, [r7, #0]
 8008f70:	6892      	ldr	r2, [r2, #8]
 8008f72:	4619      	mov	r1, r3
 8008f74:	f7ff fa8f 	bl	8008496 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	4b3d      	ldr	r3, [pc, #244]	; (8009074 <HAL_ADC_ConfigChannel+0x7a0>)
 8008f7e:	4013      	ands	r3, r2
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d06c      	beq.n	800905e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008f84:	483c      	ldr	r0, [pc, #240]	; (8009078 <HAL_ADC_ConfigChannel+0x7a4>)
 8008f86:	f7ff f9f7 	bl	8008378 <LL_ADC_GetCommonPathInternalCh>
 8008f8a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a3a      	ldr	r2, [pc, #232]	; (800907c <HAL_ADC_ConfigChannel+0x7a8>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d127      	bne.n	8008fe8 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008f98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008f9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d121      	bne.n	8008fe8 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a35      	ldr	r2, [pc, #212]	; (8009080 <HAL_ADC_ConfigChannel+0x7ac>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d157      	bne.n	800905e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008fae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008fb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	482f      	ldr	r0, [pc, #188]	; (8009078 <HAL_ADC_ConfigChannel+0x7a4>)
 8008fba:	f7ff f9ca 	bl	8008352 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008fbe:	4b31      	ldr	r3, [pc, #196]	; (8009084 <HAL_ADC_ConfigChannel+0x7b0>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	099b      	lsrs	r3, r3, #6
 8008fc4:	4a30      	ldr	r2, [pc, #192]	; (8009088 <HAL_ADC_ConfigChannel+0x7b4>)
 8008fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8008fca:	099b      	lsrs	r3, r3, #6
 8008fcc:	1c5a      	adds	r2, r3, #1
 8008fce:	4613      	mov	r3, r2
 8008fd0:	005b      	lsls	r3, r3, #1
 8008fd2:	4413      	add	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008fd8:	e002      	b.n	8008fe0 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	3b01      	subs	r3, #1
 8008fde:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1f9      	bne.n	8008fda <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008fe6:	e03a      	b.n	800905e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a27      	ldr	r2, [pc, #156]	; (800908c <HAL_ADC_ConfigChannel+0x7b8>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d113      	bne.n	800901a <HAL_ADC_ConfigChannel+0x746>
 8008ff2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008ff6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d10d      	bne.n	800901a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a1f      	ldr	r2, [pc, #124]	; (8009080 <HAL_ADC_ConfigChannel+0x7ac>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d12a      	bne.n	800905e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009008:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800900c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009010:	4619      	mov	r1, r3
 8009012:	4819      	ldr	r0, [pc, #100]	; (8009078 <HAL_ADC_ConfigChannel+0x7a4>)
 8009014:	f7ff f99d 	bl	8008352 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009018:	e021      	b.n	800905e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a1c      	ldr	r2, [pc, #112]	; (8009090 <HAL_ADC_ConfigChannel+0x7bc>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d11c      	bne.n	800905e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009024:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800902c:	2b00      	cmp	r3, #0
 800902e:	d116      	bne.n	800905e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a12      	ldr	r2, [pc, #72]	; (8009080 <HAL_ADC_ConfigChannel+0x7ac>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d111      	bne.n	800905e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800903a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800903e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009042:	4619      	mov	r1, r3
 8009044:	480c      	ldr	r0, [pc, #48]	; (8009078 <HAL_ADC_ConfigChannel+0x7a4>)
 8009046:	f7ff f984 	bl	8008352 <LL_ADC_SetCommonPathInternalCh>
 800904a:	e008      	b.n	800905e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009050:	f043 0220 	orr.w	r2, r3, #32
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8009066:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800906a:	4618      	mov	r0, r3
 800906c:	37d8      	adds	r7, #216	; 0xd8
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	80080000 	.word	0x80080000
 8009078:	50040300 	.word	0x50040300
 800907c:	c7520000 	.word	0xc7520000
 8009080:	50040000 	.word	0x50040000
 8009084:	200003d4 	.word	0x200003d4
 8009088:	053e2d63 	.word	0x053e2d63
 800908c:	cb840000 	.word	0xcb840000
 8009090:	80000001 	.word	0x80000001

08009094 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d101      	bne.n	80090a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	e0ed      	b.n	8009282 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d102      	bne.n	80090b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7f8 f918 	bl	80012e8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f022 0202 	bic.w	r2, r2, #2
 80090c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80090c8:	f7ff f924 	bl	8008314 <HAL_GetTick>
 80090cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80090ce:	e012      	b.n	80090f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80090d0:	f7ff f920 	bl	8008314 <HAL_GetTick>
 80090d4:	4602      	mov	r2, r0
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	1ad3      	subs	r3, r2, r3
 80090da:	2b0a      	cmp	r3, #10
 80090dc:	d90b      	bls.n	80090f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2205      	movs	r2, #5
 80090ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e0c5      	b.n	8009282 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	f003 0302 	and.w	r3, r3, #2
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1e5      	bne.n	80090d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f042 0201 	orr.w	r2, r2, #1
 8009112:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009114:	f7ff f8fe 	bl	8008314 <HAL_GetTick>
 8009118:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800911a:	e012      	b.n	8009142 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800911c:	f7ff f8fa 	bl	8008314 <HAL_GetTick>
 8009120:	4602      	mov	r2, r0
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	1ad3      	subs	r3, r2, r3
 8009126:	2b0a      	cmp	r3, #10
 8009128:	d90b      	bls.n	8009142 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2205      	movs	r2, #5
 800913a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e09f      	b.n	8009282 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	f003 0301 	and.w	r3, r3, #1
 800914c:	2b00      	cmp	r3, #0
 800914e:	d0e5      	beq.n	800911c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	7e1b      	ldrb	r3, [r3, #24]
 8009154:	2b01      	cmp	r3, #1
 8009156:	d108      	bne.n	800916a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009166:	601a      	str	r2, [r3, #0]
 8009168:	e007      	b.n	800917a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009178:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	7e5b      	ldrb	r3, [r3, #25]
 800917e:	2b01      	cmp	r3, #1
 8009180:	d108      	bne.n	8009194 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009190:	601a      	str	r2, [r3, #0]
 8009192:	e007      	b.n	80091a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	7e9b      	ldrb	r3, [r3, #26]
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d108      	bne.n	80091be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f042 0220 	orr.w	r2, r2, #32
 80091ba:	601a      	str	r2, [r3, #0]
 80091bc:	e007      	b.n	80091ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f022 0220 	bic.w	r2, r2, #32
 80091cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	7edb      	ldrb	r3, [r3, #27]
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d108      	bne.n	80091e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f022 0210 	bic.w	r2, r2, #16
 80091e4:	601a      	str	r2, [r3, #0]
 80091e6:	e007      	b.n	80091f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f042 0210 	orr.w	r2, r2, #16
 80091f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	7f1b      	ldrb	r3, [r3, #28]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d108      	bne.n	8009212 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f042 0208 	orr.w	r2, r2, #8
 800920e:	601a      	str	r2, [r3, #0]
 8009210:	e007      	b.n	8009222 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f022 0208 	bic.w	r2, r2, #8
 8009220:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	7f5b      	ldrb	r3, [r3, #29]
 8009226:	2b01      	cmp	r3, #1
 8009228:	d108      	bne.n	800923c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f042 0204 	orr.w	r2, r2, #4
 8009238:	601a      	str	r2, [r3, #0]
 800923a:	e007      	b.n	800924c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f022 0204 	bic.w	r2, r2, #4
 800924a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	689a      	ldr	r2, [r3, #8]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	431a      	orrs	r2, r3
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	431a      	orrs	r2, r3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	695b      	ldr	r3, [r3, #20]
 8009260:	ea42 0103 	orr.w	r1, r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	1e5a      	subs	r2, r3, #1
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	430a      	orrs	r2, r1
 8009270:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800928a:	b480      	push	{r7}
 800928c:	b087      	sub	sp, #28
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
 8009292:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80092a0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80092a2:	7cfb      	ldrb	r3, [r7, #19]
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d003      	beq.n	80092b0 <HAL_CAN_ConfigFilter+0x26>
 80092a8:	7cfb      	ldrb	r3, [r7, #19]
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	f040 80aa 	bne.w	8009404 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80092b6:	f043 0201 	orr.w	r2, r3, #1
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	695b      	ldr	r3, [r3, #20]
 80092c4:	f003 031f 	and.w	r3, r3, #31
 80092c8:	2201      	movs	r2, #1
 80092ca:	fa02 f303 	lsl.w	r3, r2, r3
 80092ce:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	43db      	mvns	r3, r3
 80092da:	401a      	ands	r2, r3
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	69db      	ldr	r3, [r3, #28]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d123      	bne.n	8009332 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	43db      	mvns	r3, r3
 80092f4:	401a      	ands	r2, r3
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009308:	683a      	ldr	r2, [r7, #0]
 800930a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800930c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	3248      	adds	r2, #72	; 0x48
 8009312:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009326:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009328:	6979      	ldr	r1, [r7, #20]
 800932a:	3348      	adds	r3, #72	; 0x48
 800932c:	00db      	lsls	r3, r3, #3
 800932e:	440b      	add	r3, r1
 8009330:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	69db      	ldr	r3, [r3, #28]
 8009336:	2b01      	cmp	r3, #1
 8009338:	d122      	bne.n	8009380 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	431a      	orrs	r2, r3
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009356:	683a      	ldr	r2, [r7, #0]
 8009358:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800935a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	3248      	adds	r2, #72	; 0x48
 8009360:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009374:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009376:	6979      	ldr	r1, [r7, #20]
 8009378:	3348      	adds	r3, #72	; 0x48
 800937a:	00db      	lsls	r3, r3, #3
 800937c:	440b      	add	r3, r1
 800937e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	699b      	ldr	r3, [r3, #24]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d109      	bne.n	800939c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	43db      	mvns	r3, r3
 8009392:	401a      	ands	r2, r3
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800939a:	e007      	b.n	80093ac <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	431a      	orrs	r2, r3
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	691b      	ldr	r3, [r3, #16]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d109      	bne.n	80093c8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	43db      	mvns	r3, r3
 80093be:	401a      	ands	r2, r3
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80093c6:	e007      	b.n	80093d8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	431a      	orrs	r2, r3
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	6a1b      	ldr	r3, [r3, #32]
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d107      	bne.n	80093f0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	431a      	orrs	r2, r3
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80093f6:	f023 0201 	bic.w	r2, r3, #1
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	e006      	b.n	8009412 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009408:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009410:	2301      	movs	r3, #1
  }
}
 8009412:	4618      	mov	r0, r3
 8009414:	371c      	adds	r7, #28
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr

0800941e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b084      	sub	sp, #16
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f893 3020 	ldrb.w	r3, [r3, #32]
 800942c:	b2db      	uxtb	r3, r3
 800942e:	2b01      	cmp	r3, #1
 8009430:	d12e      	bne.n	8009490 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2202      	movs	r2, #2
 8009436:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f022 0201 	bic.w	r2, r2, #1
 8009448:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800944a:	f7fe ff63 	bl	8008314 <HAL_GetTick>
 800944e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009450:	e012      	b.n	8009478 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009452:	f7fe ff5f 	bl	8008314 <HAL_GetTick>
 8009456:	4602      	mov	r2, r0
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	2b0a      	cmp	r3, #10
 800945e:	d90b      	bls.n	8009478 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009464:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2205      	movs	r2, #5
 8009470:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	e012      	b.n	800949e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	f003 0301 	and.w	r3, r3, #1
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1e5      	bne.n	8009452 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800948c:	2300      	movs	r3, #0
 800948e:	e006      	b.n	800949e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009494:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800949c:	2301      	movs	r3, #1
  }
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b084      	sub	sp, #16
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	d133      	bne.n	8009522 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f042 0201 	orr.w	r2, r2, #1
 80094c8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80094ca:	f7fe ff23 	bl	8008314 <HAL_GetTick>
 80094ce:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80094d0:	e012      	b.n	80094f8 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80094d2:	f7fe ff1f 	bl	8008314 <HAL_GetTick>
 80094d6:	4602      	mov	r2, r0
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	1ad3      	subs	r3, r2, r3
 80094dc:	2b0a      	cmp	r3, #10
 80094de:	d90b      	bls.n	80094f8 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2205      	movs	r2, #5
 80094f0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	e01b      	b.n	8009530 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	f003 0301 	and.w	r3, r3, #1
 8009502:	2b00      	cmp	r3, #0
 8009504:	d0e5      	beq.n	80094d2 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f022 0202 	bic.w	r2, r2, #2
 8009514:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2201      	movs	r2, #1
 800951a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800951e:	2300      	movs	r3, #0
 8009520:	e006      	b.n	8009530 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009526:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
  }
}
 8009530:	4618      	mov	r0, r3
 8009532:	3710      	adds	r7, #16
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8009538:	b480      	push	{r7}
 800953a:	b089      	sub	sp, #36	; 0x24
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	607a      	str	r2, [r7, #4]
 8009544:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800954c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8009556:	7ffb      	ldrb	r3, [r7, #31]
 8009558:	2b01      	cmp	r3, #1
 800955a:	d003      	beq.n	8009564 <HAL_CAN_AddTxMessage+0x2c>
 800955c:	7ffb      	ldrb	r3, [r7, #31]
 800955e:	2b02      	cmp	r3, #2
 8009560:	f040 80b8 	bne.w	80096d4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800956a:	2b00      	cmp	r3, #0
 800956c:	d10a      	bne.n	8009584 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009574:	2b00      	cmp	r3, #0
 8009576:	d105      	bne.n	8009584 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800957e:	2b00      	cmp	r3, #0
 8009580:	f000 80a0 	beq.w	80096c4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	0e1b      	lsrs	r3, r3, #24
 8009588:	f003 0303 	and.w	r3, r3, #3
 800958c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	2b02      	cmp	r3, #2
 8009592:	d907      	bls.n	80095a4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009598:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80095a0:	2301      	movs	r3, #1
 80095a2:	e09e      	b.n	80096e2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80095a4:	2201      	movs	r2, #1
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	409a      	lsls	r2, r3
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10d      	bne.n	80095d2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80095c0:	68f9      	ldr	r1, [r7, #12]
 80095c2:	6809      	ldr	r1, [r1, #0]
 80095c4:	431a      	orrs	r2, r3
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	3318      	adds	r3, #24
 80095ca:	011b      	lsls	r3, r3, #4
 80095cc:	440b      	add	r3, r1
 80095ce:	601a      	str	r2, [r3, #0]
 80095d0:	e00f      	b.n	80095f2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80095dc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80095e2:	68f9      	ldr	r1, [r7, #12]
 80095e4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80095e6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	3318      	adds	r3, #24
 80095ec:	011b      	lsls	r3, r3, #4
 80095ee:	440b      	add	r3, r1
 80095f0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6819      	ldr	r1, [r3, #0]
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	691a      	ldr	r2, [r3, #16]
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	3318      	adds	r3, #24
 80095fe:	011b      	lsls	r3, r3, #4
 8009600:	440b      	add	r3, r1
 8009602:	3304      	adds	r3, #4
 8009604:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	7d1b      	ldrb	r3, [r3, #20]
 800960a:	2b01      	cmp	r3, #1
 800960c:	d111      	bne.n	8009632 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	3318      	adds	r3, #24
 8009616:	011b      	lsls	r3, r3, #4
 8009618:	4413      	add	r3, r2
 800961a:	3304      	adds	r3, #4
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	6811      	ldr	r1, [r2, #0]
 8009622:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	3318      	adds	r3, #24
 800962a:	011b      	lsls	r3, r3, #4
 800962c:	440b      	add	r3, r1
 800962e:	3304      	adds	r3, #4
 8009630:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	3307      	adds	r3, #7
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	061a      	lsls	r2, r3, #24
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	3306      	adds	r3, #6
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	041b      	lsls	r3, r3, #16
 8009642:	431a      	orrs	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	3305      	adds	r3, #5
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	021b      	lsls	r3, r3, #8
 800964c:	4313      	orrs	r3, r2
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	3204      	adds	r2, #4
 8009652:	7812      	ldrb	r2, [r2, #0]
 8009654:	4610      	mov	r0, r2
 8009656:	68fa      	ldr	r2, [r7, #12]
 8009658:	6811      	ldr	r1, [r2, #0]
 800965a:	ea43 0200 	orr.w	r2, r3, r0
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	011b      	lsls	r3, r3, #4
 8009662:	440b      	add	r3, r1
 8009664:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8009668:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	3303      	adds	r3, #3
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	061a      	lsls	r2, r3, #24
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	3302      	adds	r3, #2
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	041b      	lsls	r3, r3, #16
 800967a:	431a      	orrs	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	3301      	adds	r3, #1
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	021b      	lsls	r3, r3, #8
 8009684:	4313      	orrs	r3, r2
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	7812      	ldrb	r2, [r2, #0]
 800968a:	4610      	mov	r0, r2
 800968c:	68fa      	ldr	r2, [r7, #12]
 800968e:	6811      	ldr	r1, [r2, #0]
 8009690:	ea43 0200 	orr.w	r2, r3, r0
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	011b      	lsls	r3, r3, #4
 8009698:	440b      	add	r3, r1
 800969a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800969e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	3318      	adds	r3, #24
 80096a8:	011b      	lsls	r3, r3, #4
 80096aa:	4413      	add	r3, r2
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	6811      	ldr	r1, [r2, #0]
 80096b2:	f043 0201 	orr.w	r2, r3, #1
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	3318      	adds	r3, #24
 80096ba:	011b      	lsls	r3, r3, #4
 80096bc:	440b      	add	r3, r1
 80096be:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80096c0:	2300      	movs	r3, #0
 80096c2:	e00e      	b.n	80096e2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	e006      	b.n	80096e2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80096e0:	2301      	movs	r3, #1
  }
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3724      	adds	r7, #36	; 0x24
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr

080096ee <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80096ee:	b480      	push	{r7}
 80096f0:	b085      	sub	sp, #20
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80096f6:	2300      	movs	r3, #0
 80096f8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009700:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8009702:	7afb      	ldrb	r3, [r7, #11]
 8009704:	2b01      	cmp	r3, #1
 8009706:	d002      	beq.n	800970e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8009708:	7afb      	ldrb	r3, [r7, #11]
 800970a:	2b02      	cmp	r3, #2
 800970c:	d11d      	bne.n	800974a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009718:	2b00      	cmp	r3, #0
 800971a:	d002      	beq.n	8009722 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	3301      	adds	r3, #1
 8009720:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800972c:	2b00      	cmp	r3, #0
 800972e:	d002      	beq.n	8009736 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	3301      	adds	r3, #1
 8009734:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009740:	2b00      	cmp	r3, #0
 8009742:	d002      	beq.n	800974a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	3301      	adds	r3, #1
 8009748:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800974a:	68fb      	ldr	r3, [r7, #12]
}
 800974c:	4618      	mov	r0, r3
 800974e:	3714      	adds	r7, #20
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8009758:	b480      	push	{r7}
 800975a:	b087      	sub	sp, #28
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	607a      	str	r2, [r7, #4]
 8009764:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f893 3020 	ldrb.w	r3, [r3, #32]
 800976c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800976e:	7dfb      	ldrb	r3, [r7, #23]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d003      	beq.n	800977c <HAL_CAN_GetRxMessage+0x24>
 8009774:	7dfb      	ldrb	r3, [r7, #23]
 8009776:	2b02      	cmp	r3, #2
 8009778:	f040 80f3 	bne.w	8009962 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d10e      	bne.n	80097a0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	f003 0303 	and.w	r3, r3, #3
 800978c:	2b00      	cmp	r3, #0
 800978e:	d116      	bne.n	80097be <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009794:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800979c:	2301      	movs	r3, #1
 800979e:	e0e7      	b.n	8009970 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	f003 0303 	and.w	r3, r3, #3
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d107      	bne.n	80097be <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e0d8      	b.n	8009970 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	331b      	adds	r3, #27
 80097c6:	011b      	lsls	r3, r3, #4
 80097c8:	4413      	add	r3, r2
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f003 0204 	and.w	r2, r3, #4
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d10c      	bne.n	80097f6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	331b      	adds	r3, #27
 80097e4:	011b      	lsls	r3, r3, #4
 80097e6:	4413      	add	r3, r2
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	0d5b      	lsrs	r3, r3, #21
 80097ec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	601a      	str	r2, [r3, #0]
 80097f4:	e00b      	b.n	800980e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	331b      	adds	r3, #27
 80097fe:	011b      	lsls	r3, r3, #4
 8009800:	4413      	add	r3, r2
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	08db      	lsrs	r3, r3, #3
 8009806:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	331b      	adds	r3, #27
 8009816:	011b      	lsls	r3, r3, #4
 8009818:	4413      	add	r3, r2
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f003 0202 	and.w	r2, r3, #2
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	331b      	adds	r3, #27
 800982c:	011b      	lsls	r3, r3, #4
 800982e:	4413      	add	r3, r2
 8009830:	3304      	adds	r3, #4
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 020f 	and.w	r2, r3, #15
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	331b      	adds	r3, #27
 8009844:	011b      	lsls	r3, r3, #4
 8009846:	4413      	add	r3, r2
 8009848:	3304      	adds	r3, #4
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	0a1b      	lsrs	r3, r3, #8
 800984e:	b2da      	uxtb	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	331b      	adds	r3, #27
 800985c:	011b      	lsls	r3, r3, #4
 800985e:	4413      	add	r3, r2
 8009860:	3304      	adds	r3, #4
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	0c1b      	lsrs	r3, r3, #16
 8009866:	b29a      	uxth	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	011b      	lsls	r3, r3, #4
 8009874:	4413      	add	r3, r2
 8009876:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	b2da      	uxtb	r2, r3
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	011b      	lsls	r3, r3, #4
 800988a:	4413      	add	r3, r2
 800988c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	0a1a      	lsrs	r2, r3, #8
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	3301      	adds	r3, #1
 8009898:	b2d2      	uxtb	r2, r2
 800989a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	011b      	lsls	r3, r3, #4
 80098a4:	4413      	add	r3, r2
 80098a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	0c1a      	lsrs	r2, r3, #16
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	3302      	adds	r3, #2
 80098b2:	b2d2      	uxtb	r2, r2
 80098b4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	011b      	lsls	r3, r3, #4
 80098be:	4413      	add	r3, r2
 80098c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	0e1a      	lsrs	r2, r3, #24
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	3303      	adds	r3, #3
 80098cc:	b2d2      	uxtb	r2, r2
 80098ce:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	011b      	lsls	r3, r3, #4
 80098d8:	4413      	add	r3, r2
 80098da:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	3304      	adds	r3, #4
 80098e4:	b2d2      	uxtb	r2, r2
 80098e6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	011b      	lsls	r3, r3, #4
 80098f0:	4413      	add	r3, r2
 80098f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	0a1a      	lsrs	r2, r3, #8
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	3305      	adds	r3, #5
 80098fe:	b2d2      	uxtb	r2, r2
 8009900:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	011b      	lsls	r3, r3, #4
 800990a:	4413      	add	r3, r2
 800990c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	0c1a      	lsrs	r2, r3, #16
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	3306      	adds	r3, #6
 8009918:	b2d2      	uxtb	r2, r2
 800991a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	011b      	lsls	r3, r3, #4
 8009924:	4413      	add	r3, r2
 8009926:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	0e1a      	lsrs	r2, r3, #24
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	3307      	adds	r3, #7
 8009932:	b2d2      	uxtb	r2, r2
 8009934:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d108      	bne.n	800994e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	68da      	ldr	r2, [r3, #12]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f042 0220 	orr.w	r2, r2, #32
 800994a:	60da      	str	r2, [r3, #12]
 800994c:	e007      	b.n	800995e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	691a      	ldr	r2, [r3, #16]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f042 0220 	orr.w	r2, r2, #32
 800995c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800995e:	2300      	movs	r3, #0
 8009960:	e006      	b.n	8009970 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009966:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800996e:	2301      	movs	r3, #1
  }
}
 8009970:	4618      	mov	r0, r3
 8009972:	371c      	adds	r7, #28
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f893 3020 	ldrb.w	r3, [r3, #32]
 800998c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800998e:	7bfb      	ldrb	r3, [r7, #15]
 8009990:	2b01      	cmp	r3, #1
 8009992:	d002      	beq.n	800999a <HAL_CAN_ActivateNotification+0x1e>
 8009994:	7bfb      	ldrb	r3, [r7, #15]
 8009996:	2b02      	cmp	r3, #2
 8009998:	d109      	bne.n	80099ae <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	6959      	ldr	r1, [r3, #20]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	683a      	ldr	r2, [r7, #0]
 80099a6:	430a      	orrs	r2, r1
 80099a8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80099aa:	2300      	movs	r3, #0
 80099ac:	e006      	b.n	80099bc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80099ba:	2301      	movs	r3, #1
  }
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3714      	adds	r7, #20
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80099d8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80099da:	7bfb      	ldrb	r3, [r7, #15]
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d002      	beq.n	80099e6 <HAL_CAN_DeactivateNotification+0x1e>
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
 80099e2:	2b02      	cmp	r3, #2
 80099e4:	d10a      	bne.n	80099fc <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	6959      	ldr	r1, [r3, #20]
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	43da      	mvns	r2, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	400a      	ands	r2, r1
 80099f6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80099f8:	2300      	movs	r3, #0
 80099fa:	e006      	b.n	8009a0a <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a00:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009a08:	2301      	movs	r3, #1
  }
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3714      	adds	r7, #20
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr

08009a16 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b08a      	sub	sp, #40	; 0x28
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	695b      	ldr	r3, [r3, #20]
 8009a28:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	691b      	ldr	r3, [r3, #16]
 8009a48:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	699b      	ldr	r3, [r3, #24]
 8009a50:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8009a52:	6a3b      	ldr	r3, [r7, #32]
 8009a54:	f003 0301 	and.w	r3, r3, #1
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d07c      	beq.n	8009b56 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8009a5c:	69bb      	ldr	r3, [r7, #24]
 8009a5e:	f003 0301 	and.w	r3, r3, #1
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d023      	beq.n	8009aae <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	f003 0302 	and.w	r3, r3, #2
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d003      	beq.n	8009a80 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 f983 	bl	8009d84 <HAL_CAN_TxMailbox0CompleteCallback>
 8009a7e:	e016      	b.n	8009aae <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	f003 0304 	and.w	r3, r3, #4
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d004      	beq.n	8009a94 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8009a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009a90:	627b      	str	r3, [r7, #36]	; 0x24
 8009a92:	e00c      	b.n	8009aae <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	f003 0308 	and.w	r3, r3, #8
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d004      	beq.n	8009aa8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8009a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8009aa6:	e002      	b.n	8009aae <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 f989 	bl	8009dc0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d024      	beq.n	8009b02 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ac0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8009ac2:	69bb      	ldr	r3, [r7, #24]
 8009ac4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d003      	beq.n	8009ad4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 f963 	bl	8009d98 <HAL_CAN_TxMailbox1CompleteCallback>
 8009ad2:	e016      	b.n	8009b02 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d004      	beq.n	8009ae8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8009ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8009ae6:	e00c      	b.n	8009b02 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d004      	beq.n	8009afc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009af8:	627b      	str	r3, [r7, #36]	; 0x24
 8009afa:	e002      	b.n	8009b02 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 f969 	bl	8009dd4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009b02:	69bb      	ldr	r3, [r7, #24]
 8009b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d024      	beq.n	8009b56 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009b14:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d003      	beq.n	8009b28 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 f943 	bl	8009dac <HAL_CAN_TxMailbox2CompleteCallback>
 8009b26:	e016      	b.n	8009b56 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d004      	beq.n	8009b3c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8009b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b38:	627b      	str	r3, [r7, #36]	; 0x24
 8009b3a:	e00c      	b.n	8009b56 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8009b3c:	69bb      	ldr	r3, [r7, #24]
 8009b3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d004      	beq.n	8009b50 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8009b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8009b4e:	e002      	b.n	8009b56 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 f949 	bl	8009de8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8009b56:	6a3b      	ldr	r3, [r7, #32]
 8009b58:	f003 0308 	and.w	r3, r3, #8
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d00c      	beq.n	8009b7a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	f003 0310 	and.w	r3, r3, #16
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d007      	beq.n	8009b7a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009b70:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2210      	movs	r2, #16
 8009b78:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8009b7a:	6a3b      	ldr	r3, [r7, #32]
 8009b7c:	f003 0304 	and.w	r3, r3, #4
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d00b      	beq.n	8009b9c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	f003 0308 	and.w	r3, r3, #8
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d006      	beq.n	8009b9c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	2208      	movs	r2, #8
 8009b94:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 f930 	bl	8009dfc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8009b9c:	6a3b      	ldr	r3, [r7, #32]
 8009b9e:	f003 0302 	and.w	r3, r3, #2
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d009      	beq.n	8009bba <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	f003 0303 	and.w	r3, r3, #3
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d002      	beq.n	8009bba <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f7fd feb3 	bl	8007920 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8009bba:	6a3b      	ldr	r3, [r7, #32]
 8009bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d00c      	beq.n	8009bde <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	f003 0310 	and.w	r3, r3, #16
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d007      	beq.n	8009bde <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8009bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009bd4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2210      	movs	r2, #16
 8009bdc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009bde:	6a3b      	ldr	r3, [r7, #32]
 8009be0:	f003 0320 	and.w	r3, r3, #32
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00b      	beq.n	8009c00 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	f003 0308 	and.w	r3, r3, #8
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d006      	beq.n	8009c00 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2208      	movs	r2, #8
 8009bf8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 f908 	bl	8009e10 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009c00:	6a3b      	ldr	r3, [r7, #32]
 8009c02:	f003 0310 	and.w	r3, r3, #16
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d009      	beq.n	8009c1e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	691b      	ldr	r3, [r3, #16]
 8009c10:	f003 0303 	and.w	r3, r3, #3
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d002      	beq.n	8009c1e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f7fd fe95 	bl	8007948 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8009c1e:	6a3b      	ldr	r3, [r7, #32]
 8009c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d00b      	beq.n	8009c40 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	f003 0310 	and.w	r3, r3, #16
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d006      	beq.n	8009c40 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	2210      	movs	r2, #16
 8009c38:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 f8f2 	bl	8009e24 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8009c40:	6a3b      	ldr	r3, [r7, #32]
 8009c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d00b      	beq.n	8009c62 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	f003 0308 	and.w	r3, r3, #8
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d006      	beq.n	8009c62 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2208      	movs	r2, #8
 8009c5a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f8eb 	bl	8009e38 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8009c62:	6a3b      	ldr	r3, [r7, #32]
 8009c64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d07b      	beq.n	8009d64 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	f003 0304 	and.w	r3, r3, #4
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d072      	beq.n	8009d5c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009c76:	6a3b      	ldr	r3, [r7, #32]
 8009c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d008      	beq.n	8009c92 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d003      	beq.n	8009c92 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8c:	f043 0301 	orr.w	r3, r3, #1
 8009c90:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009c92:	6a3b      	ldr	r3, [r7, #32]
 8009c94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d008      	beq.n	8009cae <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d003      	beq.n	8009cae <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8009ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca8:	f043 0302 	orr.w	r3, r3, #2
 8009cac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009cae:	6a3b      	ldr	r3, [r7, #32]
 8009cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d008      	beq.n	8009cca <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d003      	beq.n	8009cca <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8009cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc4:	f043 0304 	orr.w	r3, r3, #4
 8009cc8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009cca:	6a3b      	ldr	r3, [r7, #32]
 8009ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d043      	beq.n	8009d5c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d03e      	beq.n	8009d5c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ce4:	2b60      	cmp	r3, #96	; 0x60
 8009ce6:	d02b      	beq.n	8009d40 <HAL_CAN_IRQHandler+0x32a>
 8009ce8:	2b60      	cmp	r3, #96	; 0x60
 8009cea:	d82e      	bhi.n	8009d4a <HAL_CAN_IRQHandler+0x334>
 8009cec:	2b50      	cmp	r3, #80	; 0x50
 8009cee:	d022      	beq.n	8009d36 <HAL_CAN_IRQHandler+0x320>
 8009cf0:	2b50      	cmp	r3, #80	; 0x50
 8009cf2:	d82a      	bhi.n	8009d4a <HAL_CAN_IRQHandler+0x334>
 8009cf4:	2b40      	cmp	r3, #64	; 0x40
 8009cf6:	d019      	beq.n	8009d2c <HAL_CAN_IRQHandler+0x316>
 8009cf8:	2b40      	cmp	r3, #64	; 0x40
 8009cfa:	d826      	bhi.n	8009d4a <HAL_CAN_IRQHandler+0x334>
 8009cfc:	2b30      	cmp	r3, #48	; 0x30
 8009cfe:	d010      	beq.n	8009d22 <HAL_CAN_IRQHandler+0x30c>
 8009d00:	2b30      	cmp	r3, #48	; 0x30
 8009d02:	d822      	bhi.n	8009d4a <HAL_CAN_IRQHandler+0x334>
 8009d04:	2b10      	cmp	r3, #16
 8009d06:	d002      	beq.n	8009d0e <HAL_CAN_IRQHandler+0x2f8>
 8009d08:	2b20      	cmp	r3, #32
 8009d0a:	d005      	beq.n	8009d18 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8009d0c:	e01d      	b.n	8009d4a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8009d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d10:	f043 0308 	orr.w	r3, r3, #8
 8009d14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009d16:	e019      	b.n	8009d4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8009d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1a:	f043 0310 	orr.w	r3, r3, #16
 8009d1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009d20:	e014      	b.n	8009d4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8009d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d24:	f043 0320 	orr.w	r3, r3, #32
 8009d28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009d2a:	e00f      	b.n	8009d4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8009d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009d34:	e00a      	b.n	8009d4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8009d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009d3e:	e005      	b.n	8009d4c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8009d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009d48:	e000      	b.n	8009d4c <HAL_CAN_IRQHandler+0x336>
            break;
 8009d4a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	699a      	ldr	r2, [r3, #24]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009d5a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	2204      	movs	r2, #4
 8009d62:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8009d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d008      	beq.n	8009d7c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d70:	431a      	orrs	r2, r3
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 f868 	bl	8009e4c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8009d7c:	bf00      	nop
 8009d7e:	3728      	adds	r7, #40	; 0x28
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8009d8c:	bf00      	nop
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8009da0:	bf00      	nop
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8009db4:	bf00      	nop
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8009ddc:	bf00      	nop
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8009df0:	bf00      	nop
 8009df2:	370c      	adds	r7, #12
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8009e04:	bf00      	nop
 8009e06:	370c      	adds	r7, #12
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b083      	sub	sp, #12
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8009e18:	bf00      	nop
 8009e1a:	370c      	adds	r7, #12
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b083      	sub	sp, #12
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8009e2c:	bf00      	nop
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8009e40:	bf00      	nop
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8009e54:	bf00      	nop
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b085      	sub	sp, #20
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f003 0307 	and.w	r3, r3, #7
 8009e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009e70:	4b0c      	ldr	r3, [pc, #48]	; (8009ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009e76:	68ba      	ldr	r2, [r7, #8]
 8009e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009e7c:	4013      	ands	r3, r2
 8009e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009e92:	4a04      	ldr	r2, [pc, #16]	; (8009ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	60d3      	str	r3, [r2, #12]
}
 8009e98:	bf00      	nop
 8009e9a:	3714      	adds	r7, #20
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr
 8009ea4:	e000ed00 	.word	0xe000ed00

08009ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009eac:	4b04      	ldr	r3, [pc, #16]	; (8009ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	0a1b      	lsrs	r3, r3, #8
 8009eb2:	f003 0307 	and.w	r3, r3, #7
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr
 8009ec0:	e000ed00 	.word	0xe000ed00

08009ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	4603      	mov	r3, r0
 8009ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	db0b      	blt.n	8009eee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009ed6:	79fb      	ldrb	r3, [r7, #7]
 8009ed8:	f003 021f 	and.w	r2, r3, #31
 8009edc:	4907      	ldr	r1, [pc, #28]	; (8009efc <__NVIC_EnableIRQ+0x38>)
 8009ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ee2:	095b      	lsrs	r3, r3, #5
 8009ee4:	2001      	movs	r0, #1
 8009ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8009eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009eee:	bf00      	nop
 8009ef0:	370c      	adds	r7, #12
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	e000e100 	.word	0xe000e100

08009f00 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b083      	sub	sp, #12
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	4603      	mov	r3, r0
 8009f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	db12      	blt.n	8009f38 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009f12:	79fb      	ldrb	r3, [r7, #7]
 8009f14:	f003 021f 	and.w	r2, r3, #31
 8009f18:	490a      	ldr	r1, [pc, #40]	; (8009f44 <__NVIC_DisableIRQ+0x44>)
 8009f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f1e:	095b      	lsrs	r3, r3, #5
 8009f20:	2001      	movs	r0, #1
 8009f22:	fa00 f202 	lsl.w	r2, r0, r2
 8009f26:	3320      	adds	r3, #32
 8009f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8009f2c:	f3bf 8f4f 	dsb	sy
}
 8009f30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009f32:	f3bf 8f6f 	isb	sy
}
 8009f36:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8009f38:	bf00      	nop
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr
 8009f44:	e000e100 	.word	0xe000e100

08009f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	4603      	mov	r3, r0
 8009f50:	6039      	str	r1, [r7, #0]
 8009f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	db0a      	blt.n	8009f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	b2da      	uxtb	r2, r3
 8009f60:	490c      	ldr	r1, [pc, #48]	; (8009f94 <__NVIC_SetPriority+0x4c>)
 8009f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f66:	0112      	lsls	r2, r2, #4
 8009f68:	b2d2      	uxtb	r2, r2
 8009f6a:	440b      	add	r3, r1
 8009f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009f70:	e00a      	b.n	8009f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	b2da      	uxtb	r2, r3
 8009f76:	4908      	ldr	r1, [pc, #32]	; (8009f98 <__NVIC_SetPriority+0x50>)
 8009f78:	79fb      	ldrb	r3, [r7, #7]
 8009f7a:	f003 030f 	and.w	r3, r3, #15
 8009f7e:	3b04      	subs	r3, #4
 8009f80:	0112      	lsls	r2, r2, #4
 8009f82:	b2d2      	uxtb	r2, r2
 8009f84:	440b      	add	r3, r1
 8009f86:	761a      	strb	r2, [r3, #24]
}
 8009f88:	bf00      	nop
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr
 8009f94:	e000e100 	.word	0xe000e100
 8009f98:	e000ed00 	.word	0xe000ed00

08009f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b089      	sub	sp, #36	; 0x24
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f003 0307 	and.w	r3, r3, #7
 8009fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	f1c3 0307 	rsb	r3, r3, #7
 8009fb6:	2b04      	cmp	r3, #4
 8009fb8:	bf28      	it	cs
 8009fba:	2304      	movcs	r3, #4
 8009fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	3304      	adds	r3, #4
 8009fc2:	2b06      	cmp	r3, #6
 8009fc4:	d902      	bls.n	8009fcc <NVIC_EncodePriority+0x30>
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	3b03      	subs	r3, #3
 8009fca:	e000      	b.n	8009fce <NVIC_EncodePriority+0x32>
 8009fcc:	2300      	movs	r3, #0
 8009fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8009fd4:	69bb      	ldr	r3, [r7, #24]
 8009fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8009fda:	43da      	mvns	r2, r3
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	401a      	ands	r2, r3
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	fa01 f303 	lsl.w	r3, r1, r3
 8009fee:	43d9      	mvns	r1, r3
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ff4:	4313      	orrs	r3, r2
         );
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3724      	adds	r7, #36	; 0x24
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr

0800a002 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b082      	sub	sp, #8
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f7ff ff28 	bl	8009e60 <__NVIC_SetPriorityGrouping>
}
 800a010:	bf00      	nop
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b086      	sub	sp, #24
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	4603      	mov	r3, r0
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	607a      	str	r2, [r7, #4]
 800a024:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a026:	2300      	movs	r3, #0
 800a028:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a02a:	f7ff ff3d 	bl	8009ea8 <__NVIC_GetPriorityGrouping>
 800a02e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	68b9      	ldr	r1, [r7, #8]
 800a034:	6978      	ldr	r0, [r7, #20]
 800a036:	f7ff ffb1 	bl	8009f9c <NVIC_EncodePriority>
 800a03a:	4602      	mov	r2, r0
 800a03c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a040:	4611      	mov	r1, r2
 800a042:	4618      	mov	r0, r3
 800a044:	f7ff ff80 	bl	8009f48 <__NVIC_SetPriority>
}
 800a048:	bf00      	nop
 800a04a:	3718      	adds	r7, #24
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	4603      	mov	r3, r0
 800a058:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a05a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a05e:	4618      	mov	r0, r3
 800a060:	f7ff ff30 	bl	8009ec4 <__NVIC_EnableIRQ>
}
 800a064:	bf00      	nop
 800a066:	3708      	adds	r7, #8
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	4603      	mov	r3, r0
 800a074:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800a076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7ff ff40 	bl	8009f00 <__NVIC_DisableIRQ>
}
 800a080:	bf00      	nop
 800a082:	3708      	adds	r7, #8
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a088:	b480      	push	{r7}
 800a08a:	b085      	sub	sp, #20
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d101      	bne.n	800a09a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	e098      	b.n	800a1cc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	461a      	mov	r2, r3
 800a0a0:	4b4d      	ldr	r3, [pc, #308]	; (800a1d8 <HAL_DMA_Init+0x150>)
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d80f      	bhi.n	800a0c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	4b4b      	ldr	r3, [pc, #300]	; (800a1dc <HAL_DMA_Init+0x154>)
 800a0ae:	4413      	add	r3, r2
 800a0b0:	4a4b      	ldr	r2, [pc, #300]	; (800a1e0 <HAL_DMA_Init+0x158>)
 800a0b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0b6:	091b      	lsrs	r3, r3, #4
 800a0b8:	009a      	lsls	r2, r3, #2
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	4a48      	ldr	r2, [pc, #288]	; (800a1e4 <HAL_DMA_Init+0x15c>)
 800a0c2:	641a      	str	r2, [r3, #64]	; 0x40
 800a0c4:	e00e      	b.n	800a0e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	4b46      	ldr	r3, [pc, #280]	; (800a1e8 <HAL_DMA_Init+0x160>)
 800a0ce:	4413      	add	r3, r2
 800a0d0:	4a43      	ldr	r2, [pc, #268]	; (800a1e0 <HAL_DMA_Init+0x158>)
 800a0d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0d6:	091b      	lsrs	r3, r3, #4
 800a0d8:	009a      	lsls	r2, r3, #2
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	4a42      	ldr	r2, [pc, #264]	; (800a1ec <HAL_DMA_Init+0x164>)
 800a0e2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2202      	movs	r2, #2
 800a0e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a0fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a108:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	691b      	ldr	r3, [r3, #16]
 800a10e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a114:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	699b      	ldr	r3, [r3, #24]
 800a11a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a120:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a1b      	ldr	r3, [r3, #32]
 800a126:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	4313      	orrs	r3, r2
 800a12c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	68fa      	ldr	r2, [r7, #12]
 800a134:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	689b      	ldr	r3, [r3, #8]
 800a13a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a13e:	d039      	beq.n	800a1b4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a144:	4a27      	ldr	r2, [pc, #156]	; (800a1e4 <HAL_DMA_Init+0x15c>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d11a      	bne.n	800a180 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800a14a:	4b29      	ldr	r3, [pc, #164]	; (800a1f0 <HAL_DMA_Init+0x168>)
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a152:	f003 031c 	and.w	r3, r3, #28
 800a156:	210f      	movs	r1, #15
 800a158:	fa01 f303 	lsl.w	r3, r1, r3
 800a15c:	43db      	mvns	r3, r3
 800a15e:	4924      	ldr	r1, [pc, #144]	; (800a1f0 <HAL_DMA_Init+0x168>)
 800a160:	4013      	ands	r3, r2
 800a162:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800a164:	4b22      	ldr	r3, [pc, #136]	; (800a1f0 <HAL_DMA_Init+0x168>)
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6859      	ldr	r1, [r3, #4]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a170:	f003 031c 	and.w	r3, r3, #28
 800a174:	fa01 f303 	lsl.w	r3, r1, r3
 800a178:	491d      	ldr	r1, [pc, #116]	; (800a1f0 <HAL_DMA_Init+0x168>)
 800a17a:	4313      	orrs	r3, r2
 800a17c:	600b      	str	r3, [r1, #0]
 800a17e:	e019      	b.n	800a1b4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800a180:	4b1c      	ldr	r3, [pc, #112]	; (800a1f4 <HAL_DMA_Init+0x16c>)
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a188:	f003 031c 	and.w	r3, r3, #28
 800a18c:	210f      	movs	r1, #15
 800a18e:	fa01 f303 	lsl.w	r3, r1, r3
 800a192:	43db      	mvns	r3, r3
 800a194:	4917      	ldr	r1, [pc, #92]	; (800a1f4 <HAL_DMA_Init+0x16c>)
 800a196:	4013      	ands	r3, r2
 800a198:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800a19a:	4b16      	ldr	r3, [pc, #88]	; (800a1f4 <HAL_DMA_Init+0x16c>)
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6859      	ldr	r1, [r3, #4]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1a6:	f003 031c 	and.w	r3, r3, #28
 800a1aa:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ae:	4911      	ldr	r1, [pc, #68]	; (800a1f4 <HAL_DMA_Init+0x16c>)
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3714      	adds	r7, #20
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr
 800a1d8:	40020407 	.word	0x40020407
 800a1dc:	bffdfff8 	.word	0xbffdfff8
 800a1e0:	cccccccd 	.word	0xcccccccd
 800a1e4:	40020000 	.word	0x40020000
 800a1e8:	bffdfbf8 	.word	0xbffdfbf8
 800a1ec:	40020400 	.word	0x40020400
 800a1f0:	400200a8 	.word	0x400200a8
 800a1f4:	400204a8 	.word	0x400204a8

0800a1f8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a200:	2300      	movs	r3, #0
 800a202:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	d005      	beq.n	800a21c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2204      	movs	r2, #4
 800a214:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	73fb      	strb	r3, [r7, #15]
 800a21a:	e029      	b.n	800a270 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f022 020e 	bic.w	r2, r2, #14
 800a22a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f022 0201 	bic.w	r2, r2, #1
 800a23a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a240:	f003 021c 	and.w	r2, r3, #28
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a248:	2101      	movs	r1, #1
 800a24a:	fa01 f202 	lsl.w	r2, r1, r2
 800a24e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2201      	movs	r2, #1
 800a254:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a264:	2b00      	cmp	r3, #0
 800a266:	d003      	beq.n	800a270 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	4798      	blx	r3
    }
  }
  return status;
 800a270:	7bfb      	ldrb	r3, [r7, #15]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b084      	sub	sp, #16
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a296:	f003 031c 	and.w	r3, r3, #28
 800a29a:	2204      	movs	r2, #4
 800a29c:	409a      	lsls	r2, r3
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	4013      	ands	r3, r2
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d026      	beq.n	800a2f4 <HAL_DMA_IRQHandler+0x7a>
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	f003 0304 	and.w	r3, r3, #4
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d021      	beq.n	800a2f4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f003 0320 	and.w	r3, r3, #32
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d107      	bne.n	800a2ce <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f022 0204 	bic.w	r2, r2, #4
 800a2cc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2d2:	f003 021c 	and.w	r2, r3, #28
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2da:	2104      	movs	r1, #4
 800a2dc:	fa01 f202 	lsl.w	r2, r1, r2
 800a2e0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d071      	beq.n	800a3ce <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800a2f2:	e06c      	b.n	800a3ce <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2f8:	f003 031c 	and.w	r3, r3, #28
 800a2fc:	2202      	movs	r2, #2
 800a2fe:	409a      	lsls	r2, r3
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	4013      	ands	r3, r2
 800a304:	2b00      	cmp	r3, #0
 800a306:	d02e      	beq.n	800a366 <HAL_DMA_IRQHandler+0xec>
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	f003 0302 	and.w	r3, r3, #2
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d029      	beq.n	800a366 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f003 0320 	and.w	r3, r3, #32
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d10b      	bne.n	800a338 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f022 020a 	bic.w	r2, r2, #10
 800a32e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2201      	movs	r2, #1
 800a334:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a33c:	f003 021c 	and.w	r2, r3, #28
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a344:	2102      	movs	r1, #2
 800a346:	fa01 f202 	lsl.w	r2, r1, r2
 800a34a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2200      	movs	r2, #0
 800a350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d038      	beq.n	800a3ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800a364:	e033      	b.n	800a3ce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a36a:	f003 031c 	and.w	r3, r3, #28
 800a36e:	2208      	movs	r2, #8
 800a370:	409a      	lsls	r2, r3
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	4013      	ands	r3, r2
 800a376:	2b00      	cmp	r3, #0
 800a378:	d02a      	beq.n	800a3d0 <HAL_DMA_IRQHandler+0x156>
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	f003 0308 	and.w	r3, r3, #8
 800a380:	2b00      	cmp	r3, #0
 800a382:	d025      	beq.n	800a3d0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f022 020e 	bic.w	r2, r2, #14
 800a392:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a398:	f003 021c 	and.w	r2, r3, #28
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a0:	2101      	movs	r1, #1
 800a3a2:	fa01 f202 	lsl.w	r2, r1, r2
 800a3a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d004      	beq.n	800a3d0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a3ce:	bf00      	nop
 800a3d0:	bf00      	nop
}
 800a3d2:	3710      	adds	r7, #16
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b083      	sub	sp, #12
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a3e6:	b2db      	uxtb	r3, r3
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	370c      	adds	r7, #12
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b087      	sub	sp, #28
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a3fe:	2300      	movs	r3, #0
 800a400:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a402:	e148      	b.n	800a696 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	2101      	movs	r1, #1
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	fa01 f303 	lsl.w	r3, r1, r3
 800a410:	4013      	ands	r3, r2
 800a412:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2b00      	cmp	r3, #0
 800a418:	f000 813a 	beq.w	800a690 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	2b01      	cmp	r3, #1
 800a422:	d00b      	beq.n	800a43c <HAL_GPIO_Init+0x48>
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	2b02      	cmp	r3, #2
 800a42a:	d007      	beq.n	800a43c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a430:	2b11      	cmp	r3, #17
 800a432:	d003      	beq.n	800a43c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	2b12      	cmp	r3, #18
 800a43a:	d130      	bne.n	800a49e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	005b      	lsls	r3, r3, #1
 800a446:	2203      	movs	r2, #3
 800a448:	fa02 f303 	lsl.w	r3, r2, r3
 800a44c:	43db      	mvns	r3, r3
 800a44e:	693a      	ldr	r2, [r7, #16]
 800a450:	4013      	ands	r3, r2
 800a452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	68da      	ldr	r2, [r3, #12]
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	005b      	lsls	r3, r3, #1
 800a45c:	fa02 f303 	lsl.w	r3, r2, r3
 800a460:	693a      	ldr	r2, [r7, #16]
 800a462:	4313      	orrs	r3, r2
 800a464:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	693a      	ldr	r2, [r7, #16]
 800a46a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a472:	2201      	movs	r2, #1
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	fa02 f303 	lsl.w	r3, r2, r3
 800a47a:	43db      	mvns	r3, r3
 800a47c:	693a      	ldr	r2, [r7, #16]
 800a47e:	4013      	ands	r3, r2
 800a480:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	091b      	lsrs	r3, r3, #4
 800a488:	f003 0201 	and.w	r2, r3, #1
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	fa02 f303 	lsl.w	r3, r2, r3
 800a492:	693a      	ldr	r2, [r7, #16]
 800a494:	4313      	orrs	r3, r2
 800a496:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	693a      	ldr	r2, [r7, #16]
 800a49c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	005b      	lsls	r3, r3, #1
 800a4a8:	2203      	movs	r2, #3
 800a4aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ae:	43db      	mvns	r3, r3
 800a4b0:	693a      	ldr	r2, [r7, #16]
 800a4b2:	4013      	ands	r3, r2
 800a4b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	689a      	ldr	r2, [r3, #8]
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	005b      	lsls	r3, r3, #1
 800a4be:	fa02 f303 	lsl.w	r3, r2, r3
 800a4c2:	693a      	ldr	r2, [r7, #16]
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	693a      	ldr	r2, [r7, #16]
 800a4cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	d003      	beq.n	800a4de <HAL_GPIO_Init+0xea>
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	2b12      	cmp	r3, #18
 800a4dc:	d123      	bne.n	800a526 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	08da      	lsrs	r2, r3, #3
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	3208      	adds	r2, #8
 800a4e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	f003 0307 	and.w	r3, r3, #7
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	220f      	movs	r2, #15
 800a4f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a4fa:	43db      	mvns	r3, r3
 800a4fc:	693a      	ldr	r2, [r7, #16]
 800a4fe:	4013      	ands	r3, r2
 800a500:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	691a      	ldr	r2, [r3, #16]
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	f003 0307 	and.w	r3, r3, #7
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	fa02 f303 	lsl.w	r3, r2, r3
 800a512:	693a      	ldr	r2, [r7, #16]
 800a514:	4313      	orrs	r3, r2
 800a516:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	08da      	lsrs	r2, r3, #3
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	3208      	adds	r2, #8
 800a520:	6939      	ldr	r1, [r7, #16]
 800a522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	005b      	lsls	r3, r3, #1
 800a530:	2203      	movs	r2, #3
 800a532:	fa02 f303 	lsl.w	r3, r2, r3
 800a536:	43db      	mvns	r3, r3
 800a538:	693a      	ldr	r2, [r7, #16]
 800a53a:	4013      	ands	r3, r2
 800a53c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	f003 0203 	and.w	r2, r3, #3
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	005b      	lsls	r3, r3, #1
 800a54a:	fa02 f303 	lsl.w	r3, r2, r3
 800a54e:	693a      	ldr	r2, [r7, #16]
 800a550:	4313      	orrs	r3, r2
 800a552:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	693a      	ldr	r2, [r7, #16]
 800a558:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a562:	2b00      	cmp	r3, #0
 800a564:	f000 8094 	beq.w	800a690 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a568:	4b52      	ldr	r3, [pc, #328]	; (800a6b4 <HAL_GPIO_Init+0x2c0>)
 800a56a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a56c:	4a51      	ldr	r2, [pc, #324]	; (800a6b4 <HAL_GPIO_Init+0x2c0>)
 800a56e:	f043 0301 	orr.w	r3, r3, #1
 800a572:	6613      	str	r3, [r2, #96]	; 0x60
 800a574:	4b4f      	ldr	r3, [pc, #316]	; (800a6b4 <HAL_GPIO_Init+0x2c0>)
 800a576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a578:	f003 0301 	and.w	r3, r3, #1
 800a57c:	60bb      	str	r3, [r7, #8]
 800a57e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800a580:	4a4d      	ldr	r2, [pc, #308]	; (800a6b8 <HAL_GPIO_Init+0x2c4>)
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	089b      	lsrs	r3, r3, #2
 800a586:	3302      	adds	r3, #2
 800a588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a58c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	f003 0303 	and.w	r3, r3, #3
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	220f      	movs	r2, #15
 800a598:	fa02 f303 	lsl.w	r3, r2, r3
 800a59c:	43db      	mvns	r3, r3
 800a59e:	693a      	ldr	r2, [r7, #16]
 800a5a0:	4013      	ands	r3, r2
 800a5a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a5aa:	d00d      	beq.n	800a5c8 <HAL_GPIO_Init+0x1d4>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	4a43      	ldr	r2, [pc, #268]	; (800a6bc <HAL_GPIO_Init+0x2c8>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d007      	beq.n	800a5c4 <HAL_GPIO_Init+0x1d0>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4a42      	ldr	r2, [pc, #264]	; (800a6c0 <HAL_GPIO_Init+0x2cc>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d101      	bne.n	800a5c0 <HAL_GPIO_Init+0x1cc>
 800a5bc:	2302      	movs	r3, #2
 800a5be:	e004      	b.n	800a5ca <HAL_GPIO_Init+0x1d6>
 800a5c0:	2307      	movs	r3, #7
 800a5c2:	e002      	b.n	800a5ca <HAL_GPIO_Init+0x1d6>
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e000      	b.n	800a5ca <HAL_GPIO_Init+0x1d6>
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	697a      	ldr	r2, [r7, #20]
 800a5cc:	f002 0203 	and.w	r2, r2, #3
 800a5d0:	0092      	lsls	r2, r2, #2
 800a5d2:	4093      	lsls	r3, r2
 800a5d4:	693a      	ldr	r2, [r7, #16]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a5da:	4937      	ldr	r1, [pc, #220]	; (800a6b8 <HAL_GPIO_Init+0x2c4>)
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	089b      	lsrs	r3, r3, #2
 800a5e0:	3302      	adds	r3, #2
 800a5e2:	693a      	ldr	r2, [r7, #16]
 800a5e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a5e8:	4b36      	ldr	r3, [pc, #216]	; (800a6c4 <HAL_GPIO_Init+0x2d0>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	43db      	mvns	r3, r3
 800a5f2:	693a      	ldr	r2, [r7, #16]
 800a5f4:	4013      	ands	r3, r2
 800a5f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a600:	2b00      	cmp	r3, #0
 800a602:	d003      	beq.n	800a60c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800a604:	693a      	ldr	r2, [r7, #16]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	4313      	orrs	r3, r2
 800a60a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a60c:	4a2d      	ldr	r2, [pc, #180]	; (800a6c4 <HAL_GPIO_Init+0x2d0>)
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800a612:	4b2c      	ldr	r3, [pc, #176]	; (800a6c4 <HAL_GPIO_Init+0x2d0>)
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	43db      	mvns	r3, r3
 800a61c:	693a      	ldr	r2, [r7, #16]
 800a61e:	4013      	ands	r3, r2
 800a620:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d003      	beq.n	800a636 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800a62e:	693a      	ldr	r2, [r7, #16]
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	4313      	orrs	r3, r2
 800a634:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a636:	4a23      	ldr	r2, [pc, #140]	; (800a6c4 <HAL_GPIO_Init+0x2d0>)
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a63c:	4b21      	ldr	r3, [pc, #132]	; (800a6c4 <HAL_GPIO_Init+0x2d0>)
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	43db      	mvns	r3, r3
 800a646:	693a      	ldr	r2, [r7, #16]
 800a648:	4013      	ands	r3, r2
 800a64a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a654:	2b00      	cmp	r3, #0
 800a656:	d003      	beq.n	800a660 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800a658:	693a      	ldr	r2, [r7, #16]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	4313      	orrs	r3, r2
 800a65e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a660:	4a18      	ldr	r2, [pc, #96]	; (800a6c4 <HAL_GPIO_Init+0x2d0>)
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a666:	4b17      	ldr	r3, [pc, #92]	; (800a6c4 <HAL_GPIO_Init+0x2d0>)
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	43db      	mvns	r3, r3
 800a670:	693a      	ldr	r2, [r7, #16]
 800a672:	4013      	ands	r3, r2
 800a674:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d003      	beq.n	800a68a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800a682:	693a      	ldr	r2, [r7, #16]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	4313      	orrs	r3, r2
 800a688:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a68a:	4a0e      	ldr	r2, [pc, #56]	; (800a6c4 <HAL_GPIO_Init+0x2d0>)
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	3301      	adds	r3, #1
 800a694:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	fa22 f303 	lsr.w	r3, r2, r3
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	f47f aeaf 	bne.w	800a404 <HAL_GPIO_Init+0x10>
  }
}
 800a6a6:	bf00      	nop
 800a6a8:	bf00      	nop
 800a6aa:	371c      	adds	r7, #28
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr
 800a6b4:	40021000 	.word	0x40021000
 800a6b8:	40010000 	.word	0x40010000
 800a6bc:	48000400 	.word	0x48000400
 800a6c0:	48000800 	.word	0x48000800
 800a6c4:	40010400 	.word	0x40010400

0800a6c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b087      	sub	sp, #28
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800a6d6:	e0ab      	b.n	800a830 <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a6d8:	2201      	movs	r2, #1
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a6e0:	683a      	ldr	r2, [r7, #0]
 800a6e2:	4013      	ands	r3, r2
 800a6e4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	f000 809e 	beq.w	800a82a <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800a6ee:	4a57      	ldr	r2, [pc, #348]	; (800a84c <HAL_GPIO_DeInit+0x184>)
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	089b      	lsrs	r3, r3, #2
 800a6f4:	3302      	adds	r3, #2
 800a6f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6fa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	f003 0303 	and.w	r3, r3, #3
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	220f      	movs	r2, #15
 800a706:	fa02 f303 	lsl.w	r3, r2, r3
 800a70a:	68fa      	ldr	r2, [r7, #12]
 800a70c:	4013      	ands	r3, r2
 800a70e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a716:	d00d      	beq.n	800a734 <HAL_GPIO_DeInit+0x6c>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	4a4d      	ldr	r2, [pc, #308]	; (800a850 <HAL_GPIO_DeInit+0x188>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d007      	beq.n	800a730 <HAL_GPIO_DeInit+0x68>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	4a4c      	ldr	r2, [pc, #304]	; (800a854 <HAL_GPIO_DeInit+0x18c>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d101      	bne.n	800a72c <HAL_GPIO_DeInit+0x64>
 800a728:	2302      	movs	r3, #2
 800a72a:	e004      	b.n	800a736 <HAL_GPIO_DeInit+0x6e>
 800a72c:	2307      	movs	r3, #7
 800a72e:	e002      	b.n	800a736 <HAL_GPIO_DeInit+0x6e>
 800a730:	2301      	movs	r3, #1
 800a732:	e000      	b.n	800a736 <HAL_GPIO_DeInit+0x6e>
 800a734:	2300      	movs	r3, #0
 800a736:	697a      	ldr	r2, [r7, #20]
 800a738:	f002 0203 	and.w	r2, r2, #3
 800a73c:	0092      	lsls	r2, r2, #2
 800a73e:	4093      	lsls	r3, r2
 800a740:	68fa      	ldr	r2, [r7, #12]
 800a742:	429a      	cmp	r2, r3
 800a744:	d132      	bne.n	800a7ac <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800a746:	4b44      	ldr	r3, [pc, #272]	; (800a858 <HAL_GPIO_DeInit+0x190>)
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	43db      	mvns	r3, r3
 800a74e:	4942      	ldr	r1, [pc, #264]	; (800a858 <HAL_GPIO_DeInit+0x190>)
 800a750:	4013      	ands	r3, r2
 800a752:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800a754:	4b40      	ldr	r3, [pc, #256]	; (800a858 <HAL_GPIO_DeInit+0x190>)
 800a756:	685a      	ldr	r2, [r3, #4]
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	43db      	mvns	r3, r3
 800a75c:	493e      	ldr	r1, [pc, #248]	; (800a858 <HAL_GPIO_DeInit+0x190>)
 800a75e:	4013      	ands	r3, r2
 800a760:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800a762:	4b3d      	ldr	r3, [pc, #244]	; (800a858 <HAL_GPIO_DeInit+0x190>)
 800a764:	689a      	ldr	r2, [r3, #8]
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	43db      	mvns	r3, r3
 800a76a:	493b      	ldr	r1, [pc, #236]	; (800a858 <HAL_GPIO_DeInit+0x190>)
 800a76c:	4013      	ands	r3, r2
 800a76e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800a770:	4b39      	ldr	r3, [pc, #228]	; (800a858 <HAL_GPIO_DeInit+0x190>)
 800a772:	68da      	ldr	r2, [r3, #12]
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	43db      	mvns	r3, r3
 800a778:	4937      	ldr	r1, [pc, #220]	; (800a858 <HAL_GPIO_DeInit+0x190>)
 800a77a:	4013      	ands	r3, r2
 800a77c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	f003 0303 	and.w	r3, r3, #3
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	220f      	movs	r2, #15
 800a788:	fa02 f303 	lsl.w	r3, r2, r3
 800a78c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800a78e:	4a2f      	ldr	r2, [pc, #188]	; (800a84c <HAL_GPIO_DeInit+0x184>)
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	089b      	lsrs	r3, r3, #2
 800a794:	3302      	adds	r3, #2
 800a796:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	43da      	mvns	r2, r3
 800a79e:	482b      	ldr	r0, [pc, #172]	; (800a84c <HAL_GPIO_DeInit+0x184>)
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	089b      	lsrs	r3, r3, #2
 800a7a4:	400a      	ands	r2, r1
 800a7a6:	3302      	adds	r3, #2
 800a7a8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	005b      	lsls	r3, r3, #1
 800a7b4:	2103      	movs	r1, #3
 800a7b6:	fa01 f303 	lsl.w	r3, r1, r3
 800a7ba:	431a      	orrs	r2, r3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	08da      	lsrs	r2, r3, #3
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	3208      	adds	r2, #8
 800a7c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	f003 0307 	and.w	r3, r3, #7
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	220f      	movs	r2, #15
 800a7d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a7da:	43db      	mvns	r3, r3
 800a7dc:	697a      	ldr	r2, [r7, #20]
 800a7de:	08d2      	lsrs	r2, r2, #3
 800a7e0:	4019      	ands	r1, r3
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	3208      	adds	r2, #8
 800a7e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	689a      	ldr	r2, [r3, #8]
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	005b      	lsls	r3, r3, #1
 800a7f2:	2103      	movs	r1, #3
 800a7f4:	fa01 f303 	lsl.w	r3, r1, r3
 800a7f8:	43db      	mvns	r3, r3
 800a7fa:	401a      	ands	r2, r3
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	685a      	ldr	r2, [r3, #4]
 800a804:	2101      	movs	r1, #1
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	fa01 f303 	lsl.w	r3, r1, r3
 800a80c:	43db      	mvns	r3, r3
 800a80e:	401a      	ands	r2, r3
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	68da      	ldr	r2, [r3, #12]
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	005b      	lsls	r3, r3, #1
 800a81c:	2103      	movs	r1, #3
 800a81e:	fa01 f303 	lsl.w	r3, r1, r3
 800a822:	43db      	mvns	r3, r3
 800a824:	401a      	ands	r2, r3
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	3301      	adds	r3, #1
 800a82e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800a830:	683a      	ldr	r2, [r7, #0]
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	fa22 f303 	lsr.w	r3, r2, r3
 800a838:	2b00      	cmp	r3, #0
 800a83a:	f47f af4d 	bne.w	800a6d8 <HAL_GPIO_DeInit+0x10>
  }
}
 800a83e:	bf00      	nop
 800a840:	bf00      	nop
 800a842:	371c      	adds	r7, #28
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr
 800a84c:	40010000 	.word	0x40010000
 800a850:	48000400 	.word	0x48000400
 800a854:	48000800 	.word	0x48000800
 800a858:	40010400 	.word	0x40010400

0800a85c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d101      	bne.n	800a86e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a86a:	2301      	movs	r3, #1
 800a86c:	e081      	b.n	800a972 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a874:	b2db      	uxtb	r3, r3
 800a876:	2b00      	cmp	r3, #0
 800a878:	d106      	bne.n	800a888 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2200      	movs	r2, #0
 800a87e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f7f7 fbde 	bl	8002044 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2224      	movs	r2, #36	; 0x24
 800a88c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f022 0201 	bic.w	r2, r2, #1
 800a89e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	685a      	ldr	r2, [r3, #4]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a8ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	689a      	ldr	r2, [r3, #8]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a8bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	68db      	ldr	r3, [r3, #12]
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d107      	bne.n	800a8d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	689a      	ldr	r2, [r3, #8]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a8d2:	609a      	str	r2, [r3, #8]
 800a8d4:	e006      	b.n	800a8e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	689a      	ldr	r2, [r3, #8]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a8e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	2b02      	cmp	r3, #2
 800a8ea:	d104      	bne.n	800a8f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a8f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	6812      	ldr	r2, [r2, #0]
 800a900:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a908:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	68da      	ldr	r2, [r3, #12]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a918:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	691a      	ldr	r2, [r3, #16]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	695b      	ldr	r3, [r3, #20]
 800a922:	ea42 0103 	orr.w	r1, r2, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	699b      	ldr	r3, [r3, #24]
 800a92a:	021a      	lsls	r2, r3, #8
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	430a      	orrs	r2, r1
 800a932:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	69d9      	ldr	r1, [r3, #28]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6a1a      	ldr	r2, [r3, #32]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	430a      	orrs	r2, r1
 800a942:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f042 0201 	orr.w	r2, r2, #1
 800a952:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2200      	movs	r2, #0
 800a958:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2220      	movs	r2, #32
 800a95e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	3708      	adds	r7, #8
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
	...

0800a97c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b088      	sub	sp, #32
 800a980:	af02      	add	r7, sp, #8
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	607a      	str	r2, [r7, #4]
 800a986:	461a      	mov	r2, r3
 800a988:	460b      	mov	r3, r1
 800a98a:	817b      	strh	r3, [r7, #10]
 800a98c:	4613      	mov	r3, r2
 800a98e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a996:	b2db      	uxtb	r3, r3
 800a998:	2b20      	cmp	r3, #32
 800a99a:	f040 80da 	bne.w	800ab52 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d101      	bne.n	800a9ac <HAL_I2C_Master_Transmit+0x30>
 800a9a8:	2302      	movs	r3, #2
 800a9aa:	e0d3      	b.n	800ab54 <HAL_I2C_Master_Transmit+0x1d8>
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a9b4:	f7fd fcae 	bl	8008314 <HAL_GetTick>
 800a9b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	9300      	str	r3, [sp, #0]
 800a9be:	2319      	movs	r3, #25
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f001 f803 	bl	800b9d2 <I2C_WaitOnFlagUntilTimeout>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d001      	beq.n	800a9d6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	e0be      	b.n	800ab54 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2221      	movs	r2, #33	; 0x21
 800a9da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2210      	movs	r2, #16
 800a9e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	893a      	ldrh	r2, [r7, #8]
 800a9f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	2bff      	cmp	r3, #255	; 0xff
 800aa06:	d90e      	bls.n	800aa26 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	22ff      	movs	r2, #255	; 0xff
 800aa0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa12:	b2da      	uxtb	r2, r3
 800aa14:	8979      	ldrh	r1, [r7, #10]
 800aa16:	4b51      	ldr	r3, [pc, #324]	; (800ab5c <HAL_I2C_Master_Transmit+0x1e0>)
 800aa18:	9300      	str	r3, [sp, #0]
 800aa1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	f001 f966 	bl	800bcf0 <I2C_TransferConfig>
 800aa24:	e06c      	b.n	800ab00 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa2a:	b29a      	uxth	r2, r3
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa34:	b2da      	uxtb	r2, r3
 800aa36:	8979      	ldrh	r1, [r7, #10]
 800aa38:	4b48      	ldr	r3, [pc, #288]	; (800ab5c <HAL_I2C_Master_Transmit+0x1e0>)
 800aa3a:	9300      	str	r3, [sp, #0]
 800aa3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	f001 f955 	bl	800bcf0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800aa46:	e05b      	b.n	800ab00 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa48:	697a      	ldr	r2, [r7, #20]
 800aa4a:	6a39      	ldr	r1, [r7, #32]
 800aa4c:	68f8      	ldr	r0, [r7, #12]
 800aa4e:	f001 f800 	bl	800ba52 <I2C_WaitOnTXISFlagUntilTimeout>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d001      	beq.n	800aa5c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	e07b      	b.n	800ab54 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa60:	781a      	ldrb	r2, [r3, #0]
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6c:	1c5a      	adds	r2, r3, #1
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	3b01      	subs	r3, #1
 800aa7a:	b29a      	uxth	r2, r3
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa84:	3b01      	subs	r3, #1
 800aa86:	b29a      	uxth	r2, r3
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d034      	beq.n	800ab00 <HAL_I2C_Master_Transmit+0x184>
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d130      	bne.n	800ab00 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	9300      	str	r3, [sp, #0]
 800aaa2:	6a3b      	ldr	r3, [r7, #32]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	2180      	movs	r1, #128	; 0x80
 800aaa8:	68f8      	ldr	r0, [r7, #12]
 800aaaa:	f000 ff92 	bl	800b9d2 <I2C_WaitOnFlagUntilTimeout>
 800aaae:	4603      	mov	r3, r0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d001      	beq.n	800aab8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800aab4:	2301      	movs	r3, #1
 800aab6:	e04d      	b.n	800ab54 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	2bff      	cmp	r3, #255	; 0xff
 800aac0:	d90e      	bls.n	800aae0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	22ff      	movs	r2, #255	; 0xff
 800aac6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aacc:	b2da      	uxtb	r2, r3
 800aace:	8979      	ldrh	r1, [r7, #10]
 800aad0:	2300      	movs	r3, #0
 800aad2:	9300      	str	r3, [sp, #0]
 800aad4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f001 f909 	bl	800bcf0 <I2C_TransferConfig>
 800aade:	e00f      	b.n	800ab00 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aae4:	b29a      	uxth	r2, r3
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aaee:	b2da      	uxtb	r2, r3
 800aaf0:	8979      	ldrh	r1, [r7, #10]
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	9300      	str	r3, [sp, #0]
 800aaf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aafa:	68f8      	ldr	r0, [r7, #12]
 800aafc:	f001 f8f8 	bl	800bcf0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d19e      	bne.n	800aa48 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab0a:	697a      	ldr	r2, [r7, #20]
 800ab0c:	6a39      	ldr	r1, [r7, #32]
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	f000 ffdf 	bl	800bad2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ab14:	4603      	mov	r3, r0
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d001      	beq.n	800ab1e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	e01a      	b.n	800ab54 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	2220      	movs	r2, #32
 800ab24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	6859      	ldr	r1, [r3, #4]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	4b0b      	ldr	r3, [pc, #44]	; (800ab60 <HAL_I2C_Master_Transmit+0x1e4>)
 800ab32:	400b      	ands	r3, r1
 800ab34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2220      	movs	r2, #32
 800ab3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2200      	movs	r2, #0
 800ab42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	e000      	b.n	800ab54 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800ab52:	2302      	movs	r3, #2
  }
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3718      	adds	r7, #24
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	80002000 	.word	0x80002000
 800ab60:	fe00e800 	.word	0xfe00e800

0800ab64 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b088      	sub	sp, #32
 800ab68:	af02      	add	r7, sp, #8
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	607a      	str	r2, [r7, #4]
 800ab6e:	461a      	mov	r2, r3
 800ab70:	460b      	mov	r3, r1
 800ab72:	817b      	strh	r3, [r7, #10]
 800ab74:	4613      	mov	r3, r2
 800ab76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	2b20      	cmp	r3, #32
 800ab82:	f040 80db 	bne.w	800ad3c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d101      	bne.n	800ab94 <HAL_I2C_Master_Receive+0x30>
 800ab90:	2302      	movs	r3, #2
 800ab92:	e0d4      	b.n	800ad3e <HAL_I2C_Master_Receive+0x1da>
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2201      	movs	r2, #1
 800ab98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ab9c:	f7fd fbba 	bl	8008314 <HAL_GetTick>
 800aba0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	9300      	str	r3, [sp, #0]
 800aba6:	2319      	movs	r3, #25
 800aba8:	2201      	movs	r2, #1
 800abaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800abae:	68f8      	ldr	r0, [r7, #12]
 800abb0:	f000 ff0f 	bl	800b9d2 <I2C_WaitOnFlagUntilTimeout>
 800abb4:	4603      	mov	r3, r0
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d001      	beq.n	800abbe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800abba:	2301      	movs	r3, #1
 800abbc:	e0bf      	b.n	800ad3e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2222      	movs	r2, #34	; 0x22
 800abc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2210      	movs	r2, #16
 800abca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2200      	movs	r2, #0
 800abd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	893a      	ldrh	r2, [r7, #8]
 800abde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2200      	movs	r2, #0
 800abe4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abea:	b29b      	uxth	r3, r3
 800abec:	2bff      	cmp	r3, #255	; 0xff
 800abee:	d90e      	bls.n	800ac0e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	22ff      	movs	r2, #255	; 0xff
 800abf4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abfa:	b2da      	uxtb	r2, r3
 800abfc:	8979      	ldrh	r1, [r7, #10]
 800abfe:	4b52      	ldr	r3, [pc, #328]	; (800ad48 <HAL_I2C_Master_Receive+0x1e4>)
 800ac00:	9300      	str	r3, [sp, #0]
 800ac02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ac06:	68f8      	ldr	r0, [r7, #12]
 800ac08:	f001 f872 	bl	800bcf0 <I2C_TransferConfig>
 800ac0c:	e06d      	b.n	800acea <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac12:	b29a      	uxth	r2, r3
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac1c:	b2da      	uxtb	r2, r3
 800ac1e:	8979      	ldrh	r1, [r7, #10]
 800ac20:	4b49      	ldr	r3, [pc, #292]	; (800ad48 <HAL_I2C_Master_Receive+0x1e4>)
 800ac22:	9300      	str	r3, [sp, #0]
 800ac24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ac28:	68f8      	ldr	r0, [r7, #12]
 800ac2a:	f001 f861 	bl	800bcf0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800ac2e:	e05c      	b.n	800acea <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac30:	697a      	ldr	r2, [r7, #20]
 800ac32:	6a39      	ldr	r1, [r7, #32]
 800ac34:	68f8      	ldr	r0, [r7, #12]
 800ac36:	f000 ff89 	bl	800bb4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d001      	beq.n	800ac44 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800ac40:	2301      	movs	r3, #1
 800ac42:	e07c      	b.n	800ad3e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac4e:	b2d2      	uxtb	r2, r2
 800ac50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac56:	1c5a      	adds	r2, r3, #1
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac60:	3b01      	subs	r3, #1
 800ac62:	b29a      	uxth	r2, r3
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	3b01      	subs	r3, #1
 800ac70:	b29a      	uxth	r2, r3
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d034      	beq.n	800acea <HAL_I2C_Master_Receive+0x186>
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d130      	bne.n	800acea <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	9300      	str	r3, [sp, #0]
 800ac8c:	6a3b      	ldr	r3, [r7, #32]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	2180      	movs	r1, #128	; 0x80
 800ac92:	68f8      	ldr	r0, [r7, #12]
 800ac94:	f000 fe9d 	bl	800b9d2 <I2C_WaitOnFlagUntilTimeout>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d001      	beq.n	800aca2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e04d      	b.n	800ad3e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	2bff      	cmp	r3, #255	; 0xff
 800acaa:	d90e      	bls.n	800acca <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	22ff      	movs	r2, #255	; 0xff
 800acb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acb6:	b2da      	uxtb	r2, r3
 800acb8:	8979      	ldrh	r1, [r7, #10]
 800acba:	2300      	movs	r3, #0
 800acbc:	9300      	str	r3, [sp, #0]
 800acbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	f001 f814 	bl	800bcf0 <I2C_TransferConfig>
 800acc8:	e00f      	b.n	800acea <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acce:	b29a      	uxth	r2, r3
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acd8:	b2da      	uxtb	r2, r3
 800acda:	8979      	ldrh	r1, [r7, #10]
 800acdc:	2300      	movs	r3, #0
 800acde:	9300      	str	r3, [sp, #0]
 800ace0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ace4:	68f8      	ldr	r0, [r7, #12]
 800ace6:	f001 f803 	bl	800bcf0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acee:	b29b      	uxth	r3, r3
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d19d      	bne.n	800ac30 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800acf4:	697a      	ldr	r2, [r7, #20]
 800acf6:	6a39      	ldr	r1, [r7, #32]
 800acf8:	68f8      	ldr	r0, [r7, #12]
 800acfa:	f000 feea 	bl	800bad2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800acfe:	4603      	mov	r3, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d001      	beq.n	800ad08 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800ad04:	2301      	movs	r3, #1
 800ad06:	e01a      	b.n	800ad3e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	2220      	movs	r2, #32
 800ad0e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	6859      	ldr	r1, [r3, #4]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	4b0c      	ldr	r3, [pc, #48]	; (800ad4c <HAL_I2C_Master_Receive+0x1e8>)
 800ad1c:	400b      	ands	r3, r1
 800ad1e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2220      	movs	r2, #32
 800ad24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	e000      	b.n	800ad3e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800ad3c:	2302      	movs	r3, #2
  }
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3718      	adds	r7, #24
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	80002400 	.word	0x80002400
 800ad4c:	fe00e800 	.word	0xfe00e800

0800ad50 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b08a      	sub	sp, #40	; 0x28
 800ad54:	af02      	add	r7, sp, #8
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	607a      	str	r2, [r7, #4]
 800ad5a:	603b      	str	r3, [r7, #0]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800ad60:	2300      	movs	r3, #0
 800ad62:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	2b20      	cmp	r3, #32
 800ad6e:	f040 80f1 	bne.w	800af54 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	699b      	ldr	r3, [r3, #24]
 800ad78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad80:	d101      	bne.n	800ad86 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800ad82:	2302      	movs	r3, #2
 800ad84:	e0e7      	b.n	800af56 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d101      	bne.n	800ad94 <HAL_I2C_IsDeviceReady+0x44>
 800ad90:	2302      	movs	r3, #2
 800ad92:	e0e0      	b.n	800af56 <HAL_I2C_IsDeviceReady+0x206>
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2201      	movs	r2, #1
 800ad98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2224      	movs	r2, #36	; 0x24
 800ada0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2200      	movs	r2, #0
 800ada8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d107      	bne.n	800adc2 <HAL_I2C_IsDeviceReady+0x72>
 800adb2:	897b      	ldrh	r3, [r7, #10]
 800adb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800adb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800adbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800adc0:	e004      	b.n	800adcc <HAL_I2C_IsDeviceReady+0x7c>
 800adc2:	897b      	ldrh	r3, [r7, #10]
 800adc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800adc8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800adcc:	68fa      	ldr	r2, [r7, #12]
 800adce:	6812      	ldr	r2, [r2, #0]
 800add0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800add2:	f7fd fa9f 	bl	8008314 <HAL_GetTick>
 800add6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	699b      	ldr	r3, [r3, #24]
 800adde:	f003 0320 	and.w	r3, r3, #32
 800ade2:	2b20      	cmp	r3, #32
 800ade4:	bf0c      	ite	eq
 800ade6:	2301      	moveq	r3, #1
 800ade8:	2300      	movne	r3, #0
 800adea:	b2db      	uxtb	r3, r3
 800adec:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	699b      	ldr	r3, [r3, #24]
 800adf4:	f003 0310 	and.w	r3, r3, #16
 800adf8:	2b10      	cmp	r3, #16
 800adfa:	bf0c      	ite	eq
 800adfc:	2301      	moveq	r3, #1
 800adfe:	2300      	movne	r3, #0
 800ae00:	b2db      	uxtb	r3, r3
 800ae02:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800ae04:	e034      	b.n	800ae70 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae0c:	d01a      	beq.n	800ae44 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ae0e:	f7fd fa81 	bl	8008314 <HAL_GetTick>
 800ae12:	4602      	mov	r2, r0
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	1ad3      	subs	r3, r2, r3
 800ae18:	683a      	ldr	r2, [r7, #0]
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d302      	bcc.n	800ae24 <HAL_I2C_IsDeviceReady+0xd4>
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d10f      	bne.n	800ae44 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2220      	movs	r2, #32
 800ae28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae30:	f043 0220 	orr.w	r2, r3, #32
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800ae40:	2301      	movs	r3, #1
 800ae42:	e088      	b.n	800af56 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	699b      	ldr	r3, [r3, #24]
 800ae4a:	f003 0320 	and.w	r3, r3, #32
 800ae4e:	2b20      	cmp	r3, #32
 800ae50:	bf0c      	ite	eq
 800ae52:	2301      	moveq	r3, #1
 800ae54:	2300      	movne	r3, #0
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	699b      	ldr	r3, [r3, #24]
 800ae60:	f003 0310 	and.w	r3, r3, #16
 800ae64:	2b10      	cmp	r3, #16
 800ae66:	bf0c      	ite	eq
 800ae68:	2301      	moveq	r3, #1
 800ae6a:	2300      	movne	r3, #0
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800ae70:	7ffb      	ldrb	r3, [r7, #31]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d102      	bne.n	800ae7c <HAL_I2C_IsDeviceReady+0x12c>
 800ae76:	7fbb      	ldrb	r3, [r7, #30]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d0c4      	beq.n	800ae06 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	699b      	ldr	r3, [r3, #24]
 800ae82:	f003 0310 	and.w	r3, r3, #16
 800ae86:	2b10      	cmp	r3, #16
 800ae88:	d01a      	beq.n	800aec0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800ae8a:	69bb      	ldr	r3, [r7, #24]
 800ae8c:	9300      	str	r3, [sp, #0]
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	2200      	movs	r2, #0
 800ae92:	2120      	movs	r1, #32
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f000 fd9c 	bl	800b9d2 <I2C_WaitOnFlagUntilTimeout>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d001      	beq.n	800aea4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800aea0:	2301      	movs	r3, #1
 800aea2:	e058      	b.n	800af56 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2220      	movs	r2, #32
 800aeaa:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2220      	movs	r2, #32
 800aeb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800aebc:	2300      	movs	r3, #0
 800aebe:	e04a      	b.n	800af56 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800aec0:	69bb      	ldr	r3, [r7, #24]
 800aec2:	9300      	str	r3, [sp, #0]
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	2200      	movs	r2, #0
 800aec8:	2120      	movs	r1, #32
 800aeca:	68f8      	ldr	r0, [r7, #12]
 800aecc:	f000 fd81 	bl	800b9d2 <I2C_WaitOnFlagUntilTimeout>
 800aed0:	4603      	mov	r3, r0
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d001      	beq.n	800aeda <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800aed6:	2301      	movs	r3, #1
 800aed8:	e03d      	b.n	800af56 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2210      	movs	r2, #16
 800aee0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	2220      	movs	r2, #32
 800aee8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d118      	bne.n	800af24 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	685a      	ldr	r2, [r3, #4]
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800af00:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800af02:	69bb      	ldr	r3, [r7, #24]
 800af04:	9300      	str	r3, [sp, #0]
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	2200      	movs	r2, #0
 800af0a:	2120      	movs	r1, #32
 800af0c:	68f8      	ldr	r0, [r7, #12]
 800af0e:	f000 fd60 	bl	800b9d2 <I2C_WaitOnFlagUntilTimeout>
 800af12:	4603      	mov	r3, r0
 800af14:	2b00      	cmp	r3, #0
 800af16:	d001      	beq.n	800af1c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800af18:	2301      	movs	r3, #1
 800af1a:	e01c      	b.n	800af56 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	2220      	movs	r2, #32
 800af22:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	3301      	adds	r3, #1
 800af28:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	429a      	cmp	r2, r3
 800af30:	f63f af3b 	bhi.w	800adaa <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2220      	movs	r2, #32
 800af38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af40:	f043 0220 	orr.w	r2, r3, #32
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2200      	movs	r2, #0
 800af4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800af50:	2301      	movs	r3, #1
 800af52:	e000      	b.n	800af56 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800af54:	2302      	movs	r3, #2
  }
}
 800af56:	4618      	mov	r0, r3
 800af58:	3720      	adds	r7, #32
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}

0800af5e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800af5e:	b580      	push	{r7, lr}
 800af60:	b084      	sub	sp, #16
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	699b      	ldr	r3, [r3, #24]
 800af6c:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d005      	beq.n	800af8a <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af82:	68ba      	ldr	r2, [r7, #8]
 800af84:	68f9      	ldr	r1, [r7, #12]
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	4798      	blx	r3
  }
}
 800af8a:	bf00      	nop
 800af8c:	3710      	adds	r7, #16
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}

0800af92 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800af92:	b580      	push	{r7, lr}
 800af94:	b086      	sub	sp, #24
 800af96:	af00      	add	r7, sp, #0
 800af98:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	699b      	ldr	r3, [r3, #24]
 800afa0:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	0a1b      	lsrs	r3, r3, #8
 800afae:	f003 0301 	and.w	r3, r3, #1
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d010      	beq.n	800afd8 <HAL_I2C_ER_IRQHandler+0x46>
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	09db      	lsrs	r3, r3, #7
 800afba:	f003 0301 	and.w	r3, r3, #1
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d00a      	beq.n	800afd8 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afc6:	f043 0201 	orr.w	r2, r3, #1
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800afd6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	0a9b      	lsrs	r3, r3, #10
 800afdc:	f003 0301 	and.w	r3, r3, #1
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d010      	beq.n	800b006 <HAL_I2C_ER_IRQHandler+0x74>
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	09db      	lsrs	r3, r3, #7
 800afe8:	f003 0301 	and.w	r3, r3, #1
 800afec:	2b00      	cmp	r3, #0
 800afee:	d00a      	beq.n	800b006 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aff4:	f043 0208 	orr.w	r2, r3, #8
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b004:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	0a5b      	lsrs	r3, r3, #9
 800b00a:	f003 0301 	and.w	r3, r3, #1
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d010      	beq.n	800b034 <HAL_I2C_ER_IRQHandler+0xa2>
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	09db      	lsrs	r3, r3, #7
 800b016:	f003 0301 	and.w	r3, r3, #1
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00a      	beq.n	800b034 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b022:	f043 0202 	orr.w	r2, r3, #2
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b032:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b038:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f003 030b 	and.w	r3, r3, #11
 800b040:	2b00      	cmp	r3, #0
 800b042:	d003      	beq.n	800b04c <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800b044:	68f9      	ldr	r1, [r7, #12]
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 fb8a 	bl	800b760 <I2C_ITError>
  }
}
 800b04c:	bf00      	nop
 800b04e:	3718      	adds	r7, #24
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800b05c:	bf00      	nop
 800b05e:	370c      	adds	r7, #12
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b068:	b480      	push	{r7}
 800b06a:	b083      	sub	sp, #12
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800b070:	bf00      	nop
 800b072:	370c      	adds	r7, #12
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr

0800b07c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	460b      	mov	r3, r1
 800b086:	70fb      	strb	r3, [r7, #3]
 800b088:	4613      	mov	r3, r2
 800b08a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800b08c:	bf00      	nop
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800b0a0:	bf00      	nop
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800b0b4:	bf00      	nop
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800b0c8:	bf00      	nop
 800b0ca:	370c      	adds	r7, #12
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr

0800b0d4 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b086      	sub	sp, #24
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d101      	bne.n	800b0f8 <I2C_Slave_ISR_IT+0x24>
 800b0f4:	2302      	movs	r3, #2
 800b0f6:	e0ec      	b.n	800b2d2 <I2C_Slave_ISR_IT+0x1fe>
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	095b      	lsrs	r3, r3, #5
 800b104:	f003 0301 	and.w	r3, r3, #1
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d009      	beq.n	800b120 <I2C_Slave_ISR_IT+0x4c>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	095b      	lsrs	r3, r3, #5
 800b110:	f003 0301 	and.w	r3, r3, #1
 800b114:	2b00      	cmp	r3, #0
 800b116:	d003      	beq.n	800b120 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800b118:	6939      	ldr	r1, [r7, #16]
 800b11a:	68f8      	ldr	r0, [r7, #12]
 800b11c:	f000 f9c0 	bl	800b4a0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	091b      	lsrs	r3, r3, #4
 800b124:	f003 0301 	and.w	r3, r3, #1
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d04d      	beq.n	800b1c8 <I2C_Slave_ISR_IT+0xf4>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	091b      	lsrs	r3, r3, #4
 800b130:	f003 0301 	and.w	r3, r3, #1
 800b134:	2b00      	cmp	r3, #0
 800b136:	d047      	beq.n	800b1c8 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d128      	bne.n	800b194 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	2b28      	cmp	r3, #40	; 0x28
 800b14c:	d108      	bne.n	800b160 <I2C_Slave_ISR_IT+0x8c>
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b154:	d104      	bne.n	800b160 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800b156:	6939      	ldr	r1, [r7, #16]
 800b158:	68f8      	ldr	r0, [r7, #12]
 800b15a:	f000 faab 	bl	800b6b4 <I2C_ITListenCplt>
 800b15e:	e032      	b.n	800b1c6 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b166:	b2db      	uxtb	r3, r3
 800b168:	2b29      	cmp	r3, #41	; 0x29
 800b16a:	d10e      	bne.n	800b18a <I2C_Slave_ISR_IT+0xb6>
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b172:	d00a      	beq.n	800b18a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	2210      	movs	r2, #16
 800b17a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	f000 fbe6 	bl	800b94e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b182:	68f8      	ldr	r0, [r7, #12]
 800b184:	f000 f92d 	bl	800b3e2 <I2C_ITSlaveSeqCplt>
 800b188:	e01d      	b.n	800b1c6 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	2210      	movs	r2, #16
 800b190:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800b192:	e096      	b.n	800b2c2 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2210      	movs	r2, #16
 800b19a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1a0:	f043 0204 	orr.w	r2, r3, #4
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d004      	beq.n	800b1b8 <I2C_Slave_ISR_IT+0xe4>
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b1b4:	f040 8085 	bne.w	800b2c2 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1bc:	4619      	mov	r1, r3
 800b1be:	68f8      	ldr	r0, [r7, #12]
 800b1c0:	f000 face 	bl	800b760 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b1c4:	e07d      	b.n	800b2c2 <I2C_Slave_ISR_IT+0x1ee>
 800b1c6:	e07c      	b.n	800b2c2 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	089b      	lsrs	r3, r3, #2
 800b1cc:	f003 0301 	and.w	r3, r3, #1
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d030      	beq.n	800b236 <I2C_Slave_ISR_IT+0x162>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	089b      	lsrs	r3, r3, #2
 800b1d8:	f003 0301 	and.w	r3, r3, #1
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d02a      	beq.n	800b236 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d018      	beq.n	800b21c <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f4:	b2d2      	uxtb	r2, r2
 800b1f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fc:	1c5a      	adds	r2, r3, #1
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b206:	3b01      	subs	r3, #1
 800b208:	b29a      	uxth	r2, r3
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b212:	b29b      	uxth	r3, r3
 800b214:	3b01      	subs	r3, #1
 800b216:	b29a      	uxth	r2, r3
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b220:	b29b      	uxth	r3, r3
 800b222:	2b00      	cmp	r3, #0
 800b224:	d14f      	bne.n	800b2c6 <I2C_Slave_ISR_IT+0x1f2>
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b22c:	d04b      	beq.n	800b2c6 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800b22e:	68f8      	ldr	r0, [r7, #12]
 800b230:	f000 f8d7 	bl	800b3e2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800b234:	e047      	b.n	800b2c6 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	08db      	lsrs	r3, r3, #3
 800b23a:	f003 0301 	and.w	r3, r3, #1
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d00a      	beq.n	800b258 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	08db      	lsrs	r3, r3, #3
 800b246:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d004      	beq.n	800b258 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800b24e:	6939      	ldr	r1, [r7, #16]
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f000 f842 	bl	800b2da <I2C_ITAddrCplt>
 800b256:	e037      	b.n	800b2c8 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	085b      	lsrs	r3, r3, #1
 800b25c:	f003 0301 	and.w	r3, r3, #1
 800b260:	2b00      	cmp	r3, #0
 800b262:	d031      	beq.n	800b2c8 <I2C_Slave_ISR_IT+0x1f4>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	085b      	lsrs	r3, r3, #1
 800b268:	f003 0301 	and.w	r3, r3, #1
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d02b      	beq.n	800b2c8 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b274:	b29b      	uxth	r3, r3
 800b276:	2b00      	cmp	r3, #0
 800b278:	d018      	beq.n	800b2ac <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27e:	781a      	ldrb	r2, [r3, #0]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28a:	1c5a      	adds	r2, r3, #1
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b294:	b29b      	uxth	r3, r3
 800b296:	3b01      	subs	r3, #1
 800b298:	b29a      	uxth	r2, r3
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2a2:	3b01      	subs	r3, #1
 800b2a4:	b29a      	uxth	r2, r3
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	851a      	strh	r2, [r3, #40]	; 0x28
 800b2aa:	e00d      	b.n	800b2c8 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b2b2:	d002      	beq.n	800b2ba <I2C_Slave_ISR_IT+0x1e6>
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d106      	bne.n	800b2c8 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	f000 f891 	bl	800b3e2 <I2C_ITSlaveSeqCplt>
 800b2c0:	e002      	b.n	800b2c8 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800b2c2:	bf00      	nop
 800b2c4:	e000      	b.n	800b2c8 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800b2c6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b2d0:	2300      	movs	r3, #0
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3718      	adds	r7, #24
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}

0800b2da <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b084      	sub	sp, #16
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
 800b2e2:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b2f0:	2b28      	cmp	r3, #40	; 0x28
 800b2f2:	d16a      	bne.n	800b3ca <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	699b      	ldr	r3, [r3, #24]
 800b2fa:	0c1b      	lsrs	r3, r3, #16
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	f003 0301 	and.w	r3, r3, #1
 800b302:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	699b      	ldr	r3, [r3, #24]
 800b30a:	0c1b      	lsrs	r3, r3, #16
 800b30c:	b29b      	uxth	r3, r3
 800b30e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800b312:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	689b      	ldr	r3, [r3, #8]
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b320:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	b29b      	uxth	r3, r3
 800b32a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800b32e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	68db      	ldr	r3, [r3, #12]
 800b334:	2b02      	cmp	r3, #2
 800b336:	d138      	bne.n	800b3aa <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800b338:	897b      	ldrh	r3, [r7, #10]
 800b33a:	09db      	lsrs	r3, r3, #7
 800b33c:	b29a      	uxth	r2, r3
 800b33e:	89bb      	ldrh	r3, [r7, #12]
 800b340:	4053      	eors	r3, r2
 800b342:	b29b      	uxth	r3, r3
 800b344:	f003 0306 	and.w	r3, r3, #6
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d11c      	bne.n	800b386 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800b34c:	897b      	ldrh	r3, [r7, #10]
 800b34e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b354:	1c5a      	adds	r2, r3, #1
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b35e:	2b02      	cmp	r3, #2
 800b360:	d13b      	bne.n	800b3da <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2200      	movs	r2, #0
 800b366:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	2208      	movs	r2, #8
 800b36e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b378:	89ba      	ldrh	r2, [r7, #12]
 800b37a:	7bfb      	ldrb	r3, [r7, #15]
 800b37c:	4619      	mov	r1, r3
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f7ff fe7c 	bl	800b07c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b384:	e029      	b.n	800b3da <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800b386:	893b      	ldrh	r3, [r7, #8]
 800b388:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b38a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f000 fcdc 	bl	800bd4c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2200      	movs	r2, #0
 800b398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b39c:	89ba      	ldrh	r2, [r7, #12]
 800b39e:	7bfb      	ldrb	r3, [r7, #15]
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f7ff fe6a 	bl	800b07c <HAL_I2C_AddrCallback>
}
 800b3a8:	e017      	b.n	800b3da <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b3aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 fccc 	bl	800bd4c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b3bc:	89ba      	ldrh	r2, [r7, #12]
 800b3be:	7bfb      	ldrb	r3, [r7, #15]
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f7ff fe5a 	bl	800b07c <HAL_I2C_AddrCallback>
}
 800b3c8:	e007      	b.n	800b3da <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2208      	movs	r2, #8
 800b3d0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800b3da:	bf00      	nop
 800b3dc:	3710      	adds	r7, #16
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}

0800b3e2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b3e2:	b580      	push	{r7, lr}
 800b3e4:	b084      	sub	sp, #16
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	0b9b      	lsrs	r3, r3, #14
 800b3fe:	f003 0301 	and.w	r3, r3, #1
 800b402:	2b00      	cmp	r3, #0
 800b404:	d008      	beq.n	800b418 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b414:	601a      	str	r2, [r3, #0]
 800b416:	e00d      	b.n	800b434 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	0bdb      	lsrs	r3, r3, #15
 800b41c:	f003 0301 	and.w	r3, r3, #1
 800b420:	2b00      	cmp	r3, #0
 800b422:	d007      	beq.n	800b434 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b432:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	2b29      	cmp	r3, #41	; 0x29
 800b43e:	d112      	bne.n	800b466 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2228      	movs	r2, #40	; 0x28
 800b444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2221      	movs	r2, #33	; 0x21
 800b44c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b44e:	2101      	movs	r1, #1
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 fc7b 	bl	800bd4c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2200      	movs	r2, #0
 800b45a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f7ff fdf8 	bl	800b054 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b464:	e017      	b.n	800b496 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b46c:	b2db      	uxtb	r3, r3
 800b46e:	2b2a      	cmp	r3, #42	; 0x2a
 800b470:	d111      	bne.n	800b496 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2228      	movs	r2, #40	; 0x28
 800b476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2222      	movs	r2, #34	; 0x22
 800b47e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b480:	2102      	movs	r1, #2
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 fc62 	bl	800bd4c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2200      	movs	r2, #0
 800b48c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f7ff fde9 	bl	800b068 <HAL_I2C_SlaveRxCpltCallback>
}
 800b496:	bf00      	nop
 800b498:	3710      	adds	r7, #16
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
	...

0800b4a0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b086      	sub	sp, #24
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4bc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2220      	movs	r2, #32
 800b4c4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b4c6:	7bfb      	ldrb	r3, [r7, #15]
 800b4c8:	2b21      	cmp	r3, #33	; 0x21
 800b4ca:	d002      	beq.n	800b4d2 <I2C_ITSlaveCplt+0x32>
 800b4cc:	7bfb      	ldrb	r3, [r7, #15]
 800b4ce:	2b29      	cmp	r3, #41	; 0x29
 800b4d0:	d108      	bne.n	800b4e4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800b4d2:	f248 0101 	movw	r1, #32769	; 0x8001
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 fc38 	bl	800bd4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2221      	movs	r2, #33	; 0x21
 800b4e0:	631a      	str	r2, [r3, #48]	; 0x30
 800b4e2:	e00d      	b.n	800b500 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b4e4:	7bfb      	ldrb	r3, [r7, #15]
 800b4e6:	2b22      	cmp	r3, #34	; 0x22
 800b4e8:	d002      	beq.n	800b4f0 <I2C_ITSlaveCplt+0x50>
 800b4ea:	7bfb      	ldrb	r3, [r7, #15]
 800b4ec:	2b2a      	cmp	r3, #42	; 0x2a
 800b4ee:	d107      	bne.n	800b500 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800b4f0:	f248 0102 	movw	r1, #32770	; 0x8002
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 fc29 	bl	800bd4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2222      	movs	r2, #34	; 0x22
 800b4fe:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	685a      	ldr	r2, [r3, #4]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b50e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	6859      	ldr	r1, [r3, #4]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	4b64      	ldr	r3, [pc, #400]	; (800b6ac <I2C_ITSlaveCplt+0x20c>)
 800b51c:	400b      	ands	r3, r1
 800b51e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f000 fa14 	bl	800b94e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	0b9b      	lsrs	r3, r3, #14
 800b52a:	f003 0301 	and.w	r3, r3, #1
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d013      	beq.n	800b55a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b540:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b546:	2b00      	cmp	r3, #0
 800b548:	d020      	beq.n	800b58c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	b29a      	uxth	r2, r3
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b558:	e018      	b.n	800b58c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	0bdb      	lsrs	r3, r3, #15
 800b55e:	f003 0301 	and.w	r3, r3, #1
 800b562:	2b00      	cmp	r3, #0
 800b564:	d012      	beq.n	800b58c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b574:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d006      	beq.n	800b58c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	b29a      	uxth	r2, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	089b      	lsrs	r3, r3, #2
 800b590:	f003 0301 	and.w	r3, r3, #1
 800b594:	2b00      	cmp	r3, #0
 800b596:	d020      	beq.n	800b5da <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	f023 0304 	bic.w	r3, r3, #4
 800b59e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5aa:	b2d2      	uxtb	r2, r2
 800b5ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b2:	1c5a      	adds	r2, r3, #1
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d00c      	beq.n	800b5da <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5c4:	3b01      	subs	r3, #1
 800b5c6:	b29a      	uxth	r2, r3
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	3b01      	subs	r3, #1
 800b5d4:	b29a      	uxth	r2, r3
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d005      	beq.n	800b5f0 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5e8:	f043 0204 	orr.w	r2, r3, #4
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b602:	2b00      	cmp	r3, #0
 800b604:	d010      	beq.n	800b628 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b60a:	4619      	mov	r1, r3
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 f8a7 	bl	800b760 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	2b28      	cmp	r3, #40	; 0x28
 800b61c:	d141      	bne.n	800b6a2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800b61e:	6979      	ldr	r1, [r7, #20]
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f000 f847 	bl	800b6b4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b626:	e03c      	b.n	800b6a2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b62c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b630:	d014      	beq.n	800b65c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f7ff fed5 	bl	800b3e2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	4a1d      	ldr	r2, [pc, #116]	; (800b6b0 <I2C_ITSlaveCplt+0x210>)
 800b63c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2220      	movs	r2, #32
 800b642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2200      	movs	r2, #0
 800b64a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2200      	movs	r2, #0
 800b650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f7ff fd1f 	bl	800b098 <HAL_I2C_ListenCpltCallback>
}
 800b65a:	e022      	b.n	800b6a2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b662:	b2db      	uxtb	r3, r3
 800b664:	2b22      	cmp	r3, #34	; 0x22
 800b666:	d10e      	bne.n	800b686 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2220      	movs	r2, #32
 800b66c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2200      	movs	r2, #0
 800b674:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2200      	movs	r2, #0
 800b67a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f7ff fcf2 	bl	800b068 <HAL_I2C_SlaveRxCpltCallback>
}
 800b684:	e00d      	b.n	800b6a2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2220      	movs	r2, #32
 800b68a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2200      	movs	r2, #0
 800b692:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2200      	movs	r2, #0
 800b698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f7ff fcd9 	bl	800b054 <HAL_I2C_SlaveTxCpltCallback>
}
 800b6a2:	bf00      	nop
 800b6a4:	3718      	adds	r7, #24
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	fe00e800 	.word	0xfe00e800
 800b6b0:	ffff0000 	.word	0xffff0000

0800b6b4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	4a26      	ldr	r2, [pc, #152]	; (800b75c <I2C_ITListenCplt+0xa8>)
 800b6c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2220      	movs	r2, #32
 800b6ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	089b      	lsrs	r3, r3, #2
 800b6e4:	f003 0301 	and.w	r3, r3, #1
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d022      	beq.n	800b732 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f6:	b2d2      	uxtb	r2, r2
 800b6f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6fe:	1c5a      	adds	r2, r3, #1
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d012      	beq.n	800b732 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b710:	3b01      	subs	r3, #1
 800b712:	b29a      	uxth	r2, r3
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	3b01      	subs	r3, #1
 800b720:	b29a      	uxth	r2, r3
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b72a:	f043 0204 	orr.w	r2, r3, #4
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b732:	f248 0103 	movw	r1, #32771	; 0x8003
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 fb08 	bl	800bd4c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	2210      	movs	r2, #16
 800b742:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f7ff fca3 	bl	800b098 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800b752:	bf00      	nop
 800b754:	3708      	adds	r7, #8
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop
 800b75c:	ffff0000 	.word	0xffff0000

0800b760 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b770:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2200      	movs	r2, #0
 800b776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	4a5d      	ldr	r2, [pc, #372]	; (800b8f4 <I2C_ITError+0x194>)
 800b77e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2200      	movs	r2, #0
 800b784:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	431a      	orrs	r2, r3
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b792:	7bfb      	ldrb	r3, [r7, #15]
 800b794:	2b28      	cmp	r3, #40	; 0x28
 800b796:	d005      	beq.n	800b7a4 <I2C_ITError+0x44>
 800b798:	7bfb      	ldrb	r3, [r7, #15]
 800b79a:	2b29      	cmp	r3, #41	; 0x29
 800b79c:	d002      	beq.n	800b7a4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800b79e:	7bfb      	ldrb	r3, [r7, #15]
 800b7a0:	2b2a      	cmp	r3, #42	; 0x2a
 800b7a2:	d10b      	bne.n	800b7bc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b7a4:	2103      	movs	r1, #3
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f000 fad0 	bl	800bd4c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2228      	movs	r2, #40	; 0x28
 800b7b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	4a50      	ldr	r2, [pc, #320]	; (800b8f8 <I2C_ITError+0x198>)
 800b7b8:	635a      	str	r2, [r3, #52]	; 0x34
 800b7ba:	e011      	b.n	800b7e0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b7bc:	f248 0103 	movw	r1, #32771	; 0x8003
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 fac3 	bl	800bd4c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7cc:	b2db      	uxtb	r3, r3
 800b7ce:	2b60      	cmp	r3, #96	; 0x60
 800b7d0:	d003      	beq.n	800b7da <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2220      	movs	r2, #32
 800b7d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7e4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d039      	beq.n	800b862 <I2C_ITError+0x102>
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	2b11      	cmp	r3, #17
 800b7f2:	d002      	beq.n	800b7fa <I2C_ITError+0x9a>
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	2b21      	cmp	r3, #33	; 0x21
 800b7f8:	d133      	bne.n	800b862 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b808:	d107      	bne.n	800b81a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b818:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b81e:	4618      	mov	r0, r3
 800b820:	f7fe fdda 	bl	800a3d8 <HAL_DMA_GetState>
 800b824:	4603      	mov	r3, r0
 800b826:	2b01      	cmp	r3, #1
 800b828:	d017      	beq.n	800b85a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b82e:	4a33      	ldr	r2, [pc, #204]	; (800b8fc <I2C_ITError+0x19c>)
 800b830:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2200      	movs	r2, #0
 800b836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b83e:	4618      	mov	r0, r3
 800b840:	f7fe fcda 	bl	800a1f8 <HAL_DMA_Abort_IT>
 800b844:	4603      	mov	r3, r0
 800b846:	2b00      	cmp	r3, #0
 800b848:	d04d      	beq.n	800b8e6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b84e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b854:	4610      	mov	r0, r2
 800b856:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b858:	e045      	b.n	800b8e6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 f850 	bl	800b900 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b860:	e041      	b.n	800b8e6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b866:	2b00      	cmp	r3, #0
 800b868:	d039      	beq.n	800b8de <I2C_ITError+0x17e>
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	2b12      	cmp	r3, #18
 800b86e:	d002      	beq.n	800b876 <I2C_ITError+0x116>
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	2b22      	cmp	r3, #34	; 0x22
 800b874:	d133      	bne.n	800b8de <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b880:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b884:	d107      	bne.n	800b896 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b894:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fe fd9c 	bl	800a3d8 <HAL_DMA_GetState>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d017      	beq.n	800b8d6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8aa:	4a14      	ldr	r2, [pc, #80]	; (800b8fc <I2C_ITError+0x19c>)
 800b8ac:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7fe fc9c 	bl	800a1f8 <HAL_DMA_Abort_IT>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d011      	beq.n	800b8ea <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b8d0:	4610      	mov	r0, r2
 800b8d2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b8d4:	e009      	b.n	800b8ea <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f000 f812 	bl	800b900 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b8dc:	e005      	b.n	800b8ea <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 f80e 	bl	800b900 <I2C_TreatErrorCallback>
  }
}
 800b8e4:	e002      	b.n	800b8ec <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b8e6:	bf00      	nop
 800b8e8:	e000      	b.n	800b8ec <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b8ea:	bf00      	nop
}
 800b8ec:	bf00      	nop
 800b8ee:	3710      	adds	r7, #16
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	ffff0000 	.word	0xffff0000
 800b8f8:	0800b0d5 	.word	0x0800b0d5
 800b8fc:	0800b997 	.word	0x0800b997

0800b900 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	2b60      	cmp	r3, #96	; 0x60
 800b912:	d10e      	bne.n	800b932 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2220      	movs	r2, #32
 800b918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2200      	movs	r2, #0
 800b920:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2200      	movs	r2, #0
 800b926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f7ff fbc8 	bl	800b0c0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b930:	e009      	b.n	800b946 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2200      	movs	r2, #0
 800b936:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2200      	movs	r2, #0
 800b93c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f7ff fbb3 	bl	800b0ac <HAL_I2C_ErrorCallback>
}
 800b946:	bf00      	nop
 800b948:	3708      	adds	r7, #8
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b94e:	b480      	push	{r7}
 800b950:	b083      	sub	sp, #12
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	699b      	ldr	r3, [r3, #24]
 800b95c:	f003 0302 	and.w	r3, r3, #2
 800b960:	2b02      	cmp	r3, #2
 800b962:	d103      	bne.n	800b96c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	2200      	movs	r2, #0
 800b96a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	699b      	ldr	r3, [r3, #24]
 800b972:	f003 0301 	and.w	r3, r3, #1
 800b976:	2b01      	cmp	r3, #1
 800b978:	d007      	beq.n	800b98a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	699a      	ldr	r2, [r3, #24]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f042 0201 	orr.w	r2, r2, #1
 800b988:	619a      	str	r2, [r3, #24]
  }
}
 800b98a:	bf00      	nop
 800b98c:	370c      	adds	r7, #12
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr

0800b996 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b996:	b580      	push	{r7, lr}
 800b998:	b084      	sub	sp, #16
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9a2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d003      	beq.n	800b9b4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d003      	beq.n	800b9c4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800b9c4:	68f8      	ldr	r0, [r7, #12]
 800b9c6:	f7ff ff9b 	bl	800b900 <I2C_TreatErrorCallback>
}
 800b9ca:	bf00      	nop
 800b9cc:	3710      	adds	r7, #16
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}

0800b9d2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b9d2:	b580      	push	{r7, lr}
 800b9d4:	b084      	sub	sp, #16
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	60f8      	str	r0, [r7, #12]
 800b9da:	60b9      	str	r1, [r7, #8]
 800b9dc:	603b      	str	r3, [r7, #0]
 800b9de:	4613      	mov	r3, r2
 800b9e0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b9e2:	e022      	b.n	800ba2a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ea:	d01e      	beq.n	800ba2a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9ec:	f7fc fc92 	bl	8008314 <HAL_GetTick>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	69bb      	ldr	r3, [r7, #24]
 800b9f4:	1ad3      	subs	r3, r2, r3
 800b9f6:	683a      	ldr	r2, [r7, #0]
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d302      	bcc.n	800ba02 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d113      	bne.n	800ba2a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba06:	f043 0220 	orr.w	r2, r3, #32
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2220      	movs	r2, #32
 800ba12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2200      	movs	r2, #0
 800ba22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800ba26:	2301      	movs	r3, #1
 800ba28:	e00f      	b.n	800ba4a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	699a      	ldr	r2, [r3, #24]
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	4013      	ands	r3, r2
 800ba34:	68ba      	ldr	r2, [r7, #8]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	bf0c      	ite	eq
 800ba3a:	2301      	moveq	r3, #1
 800ba3c:	2300      	movne	r3, #0
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	461a      	mov	r2, r3
 800ba42:	79fb      	ldrb	r3, [r7, #7]
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d0cd      	beq.n	800b9e4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ba48:	2300      	movs	r3, #0
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ba52:	b580      	push	{r7, lr}
 800ba54:	b084      	sub	sp, #16
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	60f8      	str	r0, [r7, #12]
 800ba5a:	60b9      	str	r1, [r7, #8]
 800ba5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ba5e:	e02c      	b.n	800baba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	68b9      	ldr	r1, [r7, #8]
 800ba64:	68f8      	ldr	r0, [r7, #12]
 800ba66:	f000 f8dd 	bl	800bc24 <I2C_IsAcknowledgeFailed>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d001      	beq.n	800ba74 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ba70:	2301      	movs	r3, #1
 800ba72:	e02a      	b.n	800baca <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba7a:	d01e      	beq.n	800baba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba7c:	f7fc fc4a 	bl	8008314 <HAL_GetTick>
 800ba80:	4602      	mov	r2, r0
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	1ad3      	subs	r3, r2, r3
 800ba86:	68ba      	ldr	r2, [r7, #8]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d302      	bcc.n	800ba92 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d113      	bne.n	800baba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba96:	f043 0220 	orr.w	r2, r3, #32
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2220      	movs	r2, #32
 800baa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2200      	movs	r2, #0
 800baaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2200      	movs	r2, #0
 800bab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bab6:	2301      	movs	r3, #1
 800bab8:	e007      	b.n	800baca <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	699b      	ldr	r3, [r3, #24]
 800bac0:	f003 0302 	and.w	r3, r3, #2
 800bac4:	2b02      	cmp	r3, #2
 800bac6:	d1cb      	bne.n	800ba60 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bac8:	2300      	movs	r3, #0
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3710      	adds	r7, #16
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b084      	sub	sp, #16
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	60f8      	str	r0, [r7, #12]
 800bada:	60b9      	str	r1, [r7, #8]
 800badc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bade:	e028      	b.n	800bb32 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	68b9      	ldr	r1, [r7, #8]
 800bae4:	68f8      	ldr	r0, [r7, #12]
 800bae6:	f000 f89d 	bl	800bc24 <I2C_IsAcknowledgeFailed>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d001      	beq.n	800baf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800baf0:	2301      	movs	r3, #1
 800baf2:	e026      	b.n	800bb42 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800baf4:	f7fc fc0e 	bl	8008314 <HAL_GetTick>
 800baf8:	4602      	mov	r2, r0
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	1ad3      	subs	r3, r2, r3
 800bafe:	68ba      	ldr	r2, [r7, #8]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d302      	bcc.n	800bb0a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d113      	bne.n	800bb32 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb0e:	f043 0220 	orr.w	r2, r3, #32
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2220      	movs	r2, #32
 800bb1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2200      	movs	r2, #0
 800bb22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e007      	b.n	800bb42 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	699b      	ldr	r3, [r3, #24]
 800bb38:	f003 0320 	and.w	r3, r3, #32
 800bb3c:	2b20      	cmp	r3, #32
 800bb3e:	d1cf      	bne.n	800bae0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3710      	adds	r7, #16
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
	...

0800bb4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	60b9      	str	r1, [r7, #8]
 800bb56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bb58:	e055      	b.n	800bc06 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	68b9      	ldr	r1, [r7, #8]
 800bb5e:	68f8      	ldr	r0, [r7, #12]
 800bb60:	f000 f860 	bl	800bc24 <I2C_IsAcknowledgeFailed>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d001      	beq.n	800bb6e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	e053      	b.n	800bc16 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	699b      	ldr	r3, [r3, #24]
 800bb74:	f003 0320 	and.w	r3, r3, #32
 800bb78:	2b20      	cmp	r3, #32
 800bb7a:	d129      	bne.n	800bbd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	699b      	ldr	r3, [r3, #24]
 800bb82:	f003 0304 	and.w	r3, r3, #4
 800bb86:	2b04      	cmp	r3, #4
 800bb88:	d105      	bne.n	800bb96 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d001      	beq.n	800bb96 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800bb92:	2300      	movs	r3, #0
 800bb94:	e03f      	b.n	800bc16 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	2220      	movs	r2, #32
 800bb9c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	6859      	ldr	r1, [r3, #4]
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	4b1d      	ldr	r3, [pc, #116]	; (800bc20 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800bbaa:	400b      	ands	r3, r1
 800bbac:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2220      	movs	r2, #32
 800bbb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bbcc:	2301      	movs	r3, #1
 800bbce:	e022      	b.n	800bc16 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbd0:	f7fc fba0 	bl	8008314 <HAL_GetTick>
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	1ad3      	subs	r3, r2, r3
 800bbda:	68ba      	ldr	r2, [r7, #8]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d302      	bcc.n	800bbe6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d10f      	bne.n	800bc06 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbea:	f043 0220 	orr.w	r2, r3, #32
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2220      	movs	r2, #32
 800bbf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800bc02:	2301      	movs	r3, #1
 800bc04:	e007      	b.n	800bc16 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	699b      	ldr	r3, [r3, #24]
 800bc0c:	f003 0304 	and.w	r3, r3, #4
 800bc10:	2b04      	cmp	r3, #4
 800bc12:	d1a2      	bne.n	800bb5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bc14:	2300      	movs	r3, #0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3710      	adds	r7, #16
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	fe00e800 	.word	0xfe00e800

0800bc24 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	699b      	ldr	r3, [r3, #24]
 800bc36:	f003 0310 	and.w	r3, r3, #16
 800bc3a:	2b10      	cmp	r3, #16
 800bc3c:	d151      	bne.n	800bce2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bc3e:	e022      	b.n	800bc86 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc46:	d01e      	beq.n	800bc86 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc48:	f7fc fb64 	bl	8008314 <HAL_GetTick>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	1ad3      	subs	r3, r2, r3
 800bc52:	68ba      	ldr	r2, [r7, #8]
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d302      	bcc.n	800bc5e <I2C_IsAcknowledgeFailed+0x3a>
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d113      	bne.n	800bc86 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc62:	f043 0220 	orr.w	r2, r3, #32
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2220      	movs	r2, #32
 800bc6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2200      	movs	r2, #0
 800bc76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800bc82:	2301      	movs	r3, #1
 800bc84:	e02e      	b.n	800bce4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	699b      	ldr	r3, [r3, #24]
 800bc8c:	f003 0320 	and.w	r3, r3, #32
 800bc90:	2b20      	cmp	r3, #32
 800bc92:	d1d5      	bne.n	800bc40 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2210      	movs	r2, #16
 800bc9a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2220      	movs	r2, #32
 800bca2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bca4:	68f8      	ldr	r0, [r7, #12]
 800bca6:	f7ff fe52 	bl	800b94e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	6859      	ldr	r1, [r3, #4]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	4b0d      	ldr	r3, [pc, #52]	; (800bcec <I2C_IsAcknowledgeFailed+0xc8>)
 800bcb6:	400b      	ands	r3, r1
 800bcb8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcbe:	f043 0204 	orr.w	r2, r3, #4
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	2220      	movs	r2, #32
 800bcca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800bcde:	2301      	movs	r3, #1
 800bce0:	e000      	b.n	800bce4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800bce2:	2300      	movs	r3, #0
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3710      	adds	r7, #16
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	fe00e800 	.word	0xfe00e800

0800bcf0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b085      	sub	sp, #20
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	607b      	str	r3, [r7, #4]
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	817b      	strh	r3, [r7, #10]
 800bcfe:	4613      	mov	r3, r2
 800bd00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	685a      	ldr	r2, [r3, #4]
 800bd08:	69bb      	ldr	r3, [r7, #24]
 800bd0a:	0d5b      	lsrs	r3, r3, #21
 800bd0c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800bd10:	4b0d      	ldr	r3, [pc, #52]	; (800bd48 <I2C_TransferConfig+0x58>)
 800bd12:	430b      	orrs	r3, r1
 800bd14:	43db      	mvns	r3, r3
 800bd16:	ea02 0103 	and.w	r1, r2, r3
 800bd1a:	897b      	ldrh	r3, [r7, #10]
 800bd1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bd20:	7a7b      	ldrb	r3, [r7, #9]
 800bd22:	041b      	lsls	r3, r3, #16
 800bd24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bd28:	431a      	orrs	r2, r3
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	431a      	orrs	r2, r3
 800bd2e:	69bb      	ldr	r3, [r7, #24]
 800bd30:	431a      	orrs	r2, r3
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	430a      	orrs	r2, r1
 800bd38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800bd3a:	bf00      	nop
 800bd3c:	3714      	adds	r7, #20
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd44:	4770      	bx	lr
 800bd46:	bf00      	nop
 800bd48:	03ff63ff 	.word	0x03ff63ff

0800bd4c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b085      	sub	sp, #20
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	460b      	mov	r3, r1
 800bd56:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800bd5c:	887b      	ldrh	r3, [r7, #2]
 800bd5e:	f003 0301 	and.w	r3, r3, #1
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d00f      	beq.n	800bd86 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800bd6c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd74:	b2db      	uxtb	r3, r3
 800bd76:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bd7a:	2b28      	cmp	r3, #40	; 0x28
 800bd7c:	d003      	beq.n	800bd86 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800bd84:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800bd86:	887b      	ldrh	r3, [r7, #2]
 800bd88:	f003 0302 	and.w	r3, r3, #2
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d00f      	beq.n	800bdb0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800bd96:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bda4:	2b28      	cmp	r3, #40	; 0x28
 800bda6:	d003      	beq.n	800bdb0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800bdae:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800bdb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	da03      	bge.n	800bdc0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800bdbe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800bdc0:	887b      	ldrh	r3, [r7, #2]
 800bdc2:	2b10      	cmp	r3, #16
 800bdc4:	d103      	bne.n	800bdce <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800bdcc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800bdce:	887b      	ldrh	r3, [r7, #2]
 800bdd0:	2b20      	cmp	r3, #32
 800bdd2:	d103      	bne.n	800bddc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f043 0320 	orr.w	r3, r3, #32
 800bdda:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800bddc:	887b      	ldrh	r3, [r7, #2]
 800bdde:	2b40      	cmp	r3, #64	; 0x40
 800bde0:	d103      	bne.n	800bdea <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bde8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	6819      	ldr	r1, [r3, #0]
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	43da      	mvns	r2, r3
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	400a      	ands	r2, r1
 800bdfa:	601a      	str	r2, [r3, #0]
}
 800bdfc:	bf00      	nop
 800bdfe:	3714      	adds	r7, #20
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr

0800be08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800be08:	b480      	push	{r7}
 800be0a:	b083      	sub	sp, #12
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be18:	b2db      	uxtb	r3, r3
 800be1a:	2b20      	cmp	r3, #32
 800be1c:	d138      	bne.n	800be90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800be24:	2b01      	cmp	r3, #1
 800be26:	d101      	bne.n	800be2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800be28:	2302      	movs	r3, #2
 800be2a:	e032      	b.n	800be92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2201      	movs	r2, #1
 800be30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2224      	movs	r2, #36	; 0x24
 800be38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f022 0201 	bic.w	r2, r2, #1
 800be4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	681a      	ldr	r2, [r3, #0]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800be5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	6819      	ldr	r1, [r3, #0]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	683a      	ldr	r2, [r7, #0]
 800be68:	430a      	orrs	r2, r1
 800be6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	681a      	ldr	r2, [r3, #0]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f042 0201 	orr.w	r2, r2, #1
 800be7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2220      	movs	r2, #32
 800be80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2200      	movs	r2, #0
 800be88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800be8c:	2300      	movs	r3, #0
 800be8e:	e000      	b.n	800be92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800be90:	2302      	movs	r3, #2
  }
}
 800be92:	4618      	mov	r0, r3
 800be94:	370c      	adds	r7, #12
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr

0800be9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800be9e:	b480      	push	{r7}
 800bea0:	b085      	sub	sp, #20
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	6078      	str	r0, [r7, #4]
 800bea6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	2b20      	cmp	r3, #32
 800beb2:	d139      	bne.n	800bf28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800beba:	2b01      	cmp	r3, #1
 800bebc:	d101      	bne.n	800bec2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bebe:	2302      	movs	r3, #2
 800bec0:	e033      	b.n	800bf2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2201      	movs	r2, #1
 800bec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2224      	movs	r2, #36	; 0x24
 800bece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f022 0201 	bic.w	r2, r2, #1
 800bee0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800bef0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	021b      	lsls	r3, r3, #8
 800bef6:	68fa      	ldr	r2, [r7, #12]
 800bef8:	4313      	orrs	r3, r2
 800befa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	68fa      	ldr	r2, [r7, #12]
 800bf02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f042 0201 	orr.w	r2, r2, #1
 800bf12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2220      	movs	r2, #32
 800bf18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bf24:	2300      	movs	r3, #0
 800bf26:	e000      	b.n	800bf2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bf28:	2302      	movs	r3, #2
  }
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3714      	adds	r7, #20
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf34:	4770      	bx	lr
	...

0800bf38 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bf3c:	4b05      	ldr	r3, [pc, #20]	; (800bf54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a04      	ldr	r2, [pc, #16]	; (800bf54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bf42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf46:	6013      	str	r3, [r2, #0]
}
 800bf48:	bf00      	nop
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf50:	4770      	bx	lr
 800bf52:	bf00      	nop
 800bf54:	40007000 	.word	0x40007000

0800bf58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800bf5c:	4b04      	ldr	r3, [pc, #16]	; (800bf70 <HAL_PWREx_GetVoltageRange+0x18>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	46bd      	mov	sp, r7
 800bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6c:	4770      	bx	lr
 800bf6e:	bf00      	nop
 800bf70:	40007000 	.word	0x40007000

0800bf74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b085      	sub	sp, #20
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf82:	d130      	bne.n	800bfe6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800bf84:	4b23      	ldr	r3, [pc, #140]	; (800c014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bf8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf90:	d038      	beq.n	800c004 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800bf92:	4b20      	ldr	r3, [pc, #128]	; (800c014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800bf9a:	4a1e      	ldr	r2, [pc, #120]	; (800c014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bf9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bfa0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800bfa2:	4b1d      	ldr	r3, [pc, #116]	; (800c018 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	2232      	movs	r2, #50	; 0x32
 800bfa8:	fb02 f303 	mul.w	r3, r2, r3
 800bfac:	4a1b      	ldr	r2, [pc, #108]	; (800c01c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800bfae:	fba2 2303 	umull	r2, r3, r2, r3
 800bfb2:	0c9b      	lsrs	r3, r3, #18
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bfb8:	e002      	b.n	800bfc0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	3b01      	subs	r3, #1
 800bfbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bfc0:	4b14      	ldr	r3, [pc, #80]	; (800c014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bfc2:	695b      	ldr	r3, [r3, #20]
 800bfc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bfc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfcc:	d102      	bne.n	800bfd4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d1f2      	bne.n	800bfba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800bfd4:	4b0f      	ldr	r3, [pc, #60]	; (800c014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bfd6:	695b      	ldr	r3, [r3, #20]
 800bfd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bfdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfe0:	d110      	bne.n	800c004 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800bfe2:	2303      	movs	r3, #3
 800bfe4:	e00f      	b.n	800c006 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800bfe6:	4b0b      	ldr	r3, [pc, #44]	; (800c014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bfee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bff2:	d007      	beq.n	800c004 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800bff4:	4b07      	ldr	r3, [pc, #28]	; (800c014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800bffc:	4a05      	ldr	r2, [pc, #20]	; (800c014 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c002:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800c004:	2300      	movs	r3, #0
}
 800c006:	4618      	mov	r0, r3
 800c008:	3714      	adds	r7, #20
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr
 800c012:	bf00      	nop
 800c014:	40007000 	.word	0x40007000
 800c018:	200003d4 	.word	0x200003d4
 800c01c:	431bde83 	.word	0x431bde83

0800c020 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b088      	sub	sp, #32
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d102      	bne.n	800c034 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c02e:	2301      	movs	r3, #1
 800c030:	f000 bc11 	b.w	800c856 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c034:	4ba0      	ldr	r3, [pc, #640]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c036:	689b      	ldr	r3, [r3, #8]
 800c038:	f003 030c 	and.w	r3, r3, #12
 800c03c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c03e:	4b9e      	ldr	r3, [pc, #632]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c040:	68db      	ldr	r3, [r3, #12]
 800c042:	f003 0303 	and.w	r3, r3, #3
 800c046:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f003 0310 	and.w	r3, r3, #16
 800c050:	2b00      	cmp	r3, #0
 800c052:	f000 80e4 	beq.w	800c21e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c056:	69bb      	ldr	r3, [r7, #24]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d007      	beq.n	800c06c <HAL_RCC_OscConfig+0x4c>
 800c05c:	69bb      	ldr	r3, [r7, #24]
 800c05e:	2b0c      	cmp	r3, #12
 800c060:	f040 808b 	bne.w	800c17a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	2b01      	cmp	r3, #1
 800c068:	f040 8087 	bne.w	800c17a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c06c:	4b92      	ldr	r3, [pc, #584]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f003 0302 	and.w	r3, r3, #2
 800c074:	2b00      	cmp	r3, #0
 800c076:	d005      	beq.n	800c084 <HAL_RCC_OscConfig+0x64>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	699b      	ldr	r3, [r3, #24]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d101      	bne.n	800c084 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800c080:	2301      	movs	r3, #1
 800c082:	e3e8      	b.n	800c856 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6a1a      	ldr	r2, [r3, #32]
 800c088:	4b8b      	ldr	r3, [pc, #556]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f003 0308 	and.w	r3, r3, #8
 800c090:	2b00      	cmp	r3, #0
 800c092:	d004      	beq.n	800c09e <HAL_RCC_OscConfig+0x7e>
 800c094:	4b88      	ldr	r3, [pc, #544]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c09c:	e005      	b.n	800c0aa <HAL_RCC_OscConfig+0x8a>
 800c09e:	4b86      	ldr	r3, [pc, #536]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c0a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c0a4:	091b      	lsrs	r3, r3, #4
 800c0a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d223      	bcs.n	800c0f6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6a1b      	ldr	r3, [r3, #32]
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f000 fdaa 	bl	800cc0c <RCC_SetFlashLatencyFromMSIRange>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d001      	beq.n	800c0c2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	e3c9      	b.n	800c856 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c0c2:	4b7d      	ldr	r3, [pc, #500]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4a7c      	ldr	r2, [pc, #496]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c0c8:	f043 0308 	orr.w	r3, r3, #8
 800c0cc:	6013      	str	r3, [r2, #0]
 800c0ce:	4b7a      	ldr	r3, [pc, #488]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6a1b      	ldr	r3, [r3, #32]
 800c0da:	4977      	ldr	r1, [pc, #476]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c0e0:	4b75      	ldr	r3, [pc, #468]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	69db      	ldr	r3, [r3, #28]
 800c0ec:	021b      	lsls	r3, r3, #8
 800c0ee:	4972      	ldr	r1, [pc, #456]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	604b      	str	r3, [r1, #4]
 800c0f4:	e025      	b.n	800c142 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c0f6:	4b70      	ldr	r3, [pc, #448]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4a6f      	ldr	r2, [pc, #444]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c0fc:	f043 0308 	orr.w	r3, r3, #8
 800c100:	6013      	str	r3, [r2, #0]
 800c102:	4b6d      	ldr	r3, [pc, #436]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6a1b      	ldr	r3, [r3, #32]
 800c10e:	496a      	ldr	r1, [pc, #424]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c110:	4313      	orrs	r3, r2
 800c112:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c114:	4b68      	ldr	r3, [pc, #416]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	69db      	ldr	r3, [r3, #28]
 800c120:	021b      	lsls	r3, r3, #8
 800c122:	4965      	ldr	r1, [pc, #404]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c124:	4313      	orrs	r3, r2
 800c126:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c128:	69bb      	ldr	r3, [r7, #24]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d109      	bne.n	800c142 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6a1b      	ldr	r3, [r3, #32]
 800c132:	4618      	mov	r0, r3
 800c134:	f000 fd6a 	bl	800cc0c <RCC_SetFlashLatencyFromMSIRange>
 800c138:	4603      	mov	r3, r0
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d001      	beq.n	800c142 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800c13e:	2301      	movs	r3, #1
 800c140:	e389      	b.n	800c856 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c142:	f000 fc6f 	bl	800ca24 <HAL_RCC_GetSysClockFreq>
 800c146:	4602      	mov	r2, r0
 800c148:	4b5b      	ldr	r3, [pc, #364]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c14a:	689b      	ldr	r3, [r3, #8]
 800c14c:	091b      	lsrs	r3, r3, #4
 800c14e:	f003 030f 	and.w	r3, r3, #15
 800c152:	495a      	ldr	r1, [pc, #360]	; (800c2bc <HAL_RCC_OscConfig+0x29c>)
 800c154:	5ccb      	ldrb	r3, [r1, r3]
 800c156:	f003 031f 	and.w	r3, r3, #31
 800c15a:	fa22 f303 	lsr.w	r3, r2, r3
 800c15e:	4a58      	ldr	r2, [pc, #352]	; (800c2c0 <HAL_RCC_OscConfig+0x2a0>)
 800c160:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c162:	4b58      	ldr	r3, [pc, #352]	; (800c2c4 <HAL_RCC_OscConfig+0x2a4>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4618      	mov	r0, r3
 800c168:	f7f6 f8b4 	bl	80022d4 <HAL_InitTick>
 800c16c:	4603      	mov	r3, r0
 800c16e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800c170:	7bfb      	ldrb	r3, [r7, #15]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d052      	beq.n	800c21c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800c176:	7bfb      	ldrb	r3, [r7, #15]
 800c178:	e36d      	b.n	800c856 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	699b      	ldr	r3, [r3, #24]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d032      	beq.n	800c1e8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c182:	4b4d      	ldr	r3, [pc, #308]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4a4c      	ldr	r2, [pc, #304]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c188:	f043 0301 	orr.w	r3, r3, #1
 800c18c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c18e:	f7fc f8c1 	bl	8008314 <HAL_GetTick>
 800c192:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c194:	e008      	b.n	800c1a8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c196:	f7fc f8bd 	bl	8008314 <HAL_GetTick>
 800c19a:	4602      	mov	r2, r0
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	1ad3      	subs	r3, r2, r3
 800c1a0:	2b02      	cmp	r3, #2
 800c1a2:	d901      	bls.n	800c1a8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800c1a4:	2303      	movs	r3, #3
 800c1a6:	e356      	b.n	800c856 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c1a8:	4b43      	ldr	r3, [pc, #268]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f003 0302 	and.w	r3, r3, #2
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d0f0      	beq.n	800c196 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c1b4:	4b40      	ldr	r3, [pc, #256]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4a3f      	ldr	r2, [pc, #252]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c1ba:	f043 0308 	orr.w	r3, r3, #8
 800c1be:	6013      	str	r3, [r2, #0]
 800c1c0:	4b3d      	ldr	r3, [pc, #244]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6a1b      	ldr	r3, [r3, #32]
 800c1cc:	493a      	ldr	r1, [pc, #232]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c1d2:	4b39      	ldr	r3, [pc, #228]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	69db      	ldr	r3, [r3, #28]
 800c1de:	021b      	lsls	r3, r3, #8
 800c1e0:	4935      	ldr	r1, [pc, #212]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	604b      	str	r3, [r1, #4]
 800c1e6:	e01a      	b.n	800c21e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c1e8:	4b33      	ldr	r3, [pc, #204]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a32      	ldr	r2, [pc, #200]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c1ee:	f023 0301 	bic.w	r3, r3, #1
 800c1f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c1f4:	f7fc f88e 	bl	8008314 <HAL_GetTick>
 800c1f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c1fa:	e008      	b.n	800c20e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c1fc:	f7fc f88a 	bl	8008314 <HAL_GetTick>
 800c200:	4602      	mov	r2, r0
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	1ad3      	subs	r3, r2, r3
 800c206:	2b02      	cmp	r3, #2
 800c208:	d901      	bls.n	800c20e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800c20a:	2303      	movs	r3, #3
 800c20c:	e323      	b.n	800c856 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c20e:	4b2a      	ldr	r3, [pc, #168]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f003 0302 	and.w	r3, r3, #2
 800c216:	2b00      	cmp	r3, #0
 800c218:	d1f0      	bne.n	800c1fc <HAL_RCC_OscConfig+0x1dc>
 800c21a:	e000      	b.n	800c21e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c21c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f003 0301 	and.w	r3, r3, #1
 800c226:	2b00      	cmp	r3, #0
 800c228:	d073      	beq.n	800c312 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800c22a:	69bb      	ldr	r3, [r7, #24]
 800c22c:	2b08      	cmp	r3, #8
 800c22e:	d005      	beq.n	800c23c <HAL_RCC_OscConfig+0x21c>
 800c230:	69bb      	ldr	r3, [r7, #24]
 800c232:	2b0c      	cmp	r3, #12
 800c234:	d10e      	bne.n	800c254 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	2b03      	cmp	r3, #3
 800c23a:	d10b      	bne.n	800c254 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c23c:	4b1e      	ldr	r3, [pc, #120]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c244:	2b00      	cmp	r3, #0
 800c246:	d063      	beq.n	800c310 <HAL_RCC_OscConfig+0x2f0>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d15f      	bne.n	800c310 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800c250:	2301      	movs	r3, #1
 800c252:	e300      	b.n	800c856 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c25c:	d106      	bne.n	800c26c <HAL_RCC_OscConfig+0x24c>
 800c25e:	4b16      	ldr	r3, [pc, #88]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	4a15      	ldr	r2, [pc, #84]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c268:	6013      	str	r3, [r2, #0]
 800c26a:	e01d      	b.n	800c2a8 <HAL_RCC_OscConfig+0x288>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c274:	d10c      	bne.n	800c290 <HAL_RCC_OscConfig+0x270>
 800c276:	4b10      	ldr	r3, [pc, #64]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4a0f      	ldr	r2, [pc, #60]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c27c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c280:	6013      	str	r3, [r2, #0]
 800c282:	4b0d      	ldr	r3, [pc, #52]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	4a0c      	ldr	r2, [pc, #48]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c28c:	6013      	str	r3, [r2, #0]
 800c28e:	e00b      	b.n	800c2a8 <HAL_RCC_OscConfig+0x288>
 800c290:	4b09      	ldr	r3, [pc, #36]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a08      	ldr	r2, [pc, #32]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c29a:	6013      	str	r3, [r2, #0]
 800c29c:	4b06      	ldr	r3, [pc, #24]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a05      	ldr	r2, [pc, #20]	; (800c2b8 <HAL_RCC_OscConfig+0x298>)
 800c2a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c2a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d01b      	beq.n	800c2e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2b0:	f7fc f830 	bl	8008314 <HAL_GetTick>
 800c2b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c2b6:	e010      	b.n	800c2da <HAL_RCC_OscConfig+0x2ba>
 800c2b8:	40021000 	.word	0x40021000
 800c2bc:	08014394 	.word	0x08014394
 800c2c0:	200003d4 	.word	0x200003d4
 800c2c4:	200003d8 	.word	0x200003d8
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c2c8:	f7fc f824 	bl	8008314 <HAL_GetTick>
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	1ad3      	subs	r3, r2, r3
 800c2d2:	2b64      	cmp	r3, #100	; 0x64
 800c2d4:	d901      	bls.n	800c2da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800c2d6:	2303      	movs	r3, #3
 800c2d8:	e2bd      	b.n	800c856 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c2da:	4baf      	ldr	r3, [pc, #700]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d0f0      	beq.n	800c2c8 <HAL_RCC_OscConfig+0x2a8>
 800c2e6:	e014      	b.n	800c312 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2e8:	f7fc f814 	bl	8008314 <HAL_GetTick>
 800c2ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c2ee:	e008      	b.n	800c302 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c2f0:	f7fc f810 	bl	8008314 <HAL_GetTick>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	1ad3      	subs	r3, r2, r3
 800c2fa:	2b64      	cmp	r3, #100	; 0x64
 800c2fc:	d901      	bls.n	800c302 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800c2fe:	2303      	movs	r3, #3
 800c300:	e2a9      	b.n	800c856 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c302:	4ba5      	ldr	r3, [pc, #660]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d1f0      	bne.n	800c2f0 <HAL_RCC_OscConfig+0x2d0>
 800c30e:	e000      	b.n	800c312 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f003 0302 	and.w	r3, r3, #2
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d060      	beq.n	800c3e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800c31e:	69bb      	ldr	r3, [r7, #24]
 800c320:	2b04      	cmp	r3, #4
 800c322:	d005      	beq.n	800c330 <HAL_RCC_OscConfig+0x310>
 800c324:	69bb      	ldr	r3, [r7, #24]
 800c326:	2b0c      	cmp	r3, #12
 800c328:	d119      	bne.n	800c35e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	2b02      	cmp	r3, #2
 800c32e:	d116      	bne.n	800c35e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c330:	4b99      	ldr	r3, [pc, #612]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d005      	beq.n	800c348 <HAL_RCC_OscConfig+0x328>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	68db      	ldr	r3, [r3, #12]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d101      	bne.n	800c348 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800c344:	2301      	movs	r3, #1
 800c346:	e286      	b.n	800c856 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c348:	4b93      	ldr	r3, [pc, #588]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	691b      	ldr	r3, [r3, #16]
 800c354:	061b      	lsls	r3, r3, #24
 800c356:	4990      	ldr	r1, [pc, #576]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c358:	4313      	orrs	r3, r2
 800c35a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c35c:	e040      	b.n	800c3e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	68db      	ldr	r3, [r3, #12]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d023      	beq.n	800c3ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c366:	4b8c      	ldr	r3, [pc, #560]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	4a8b      	ldr	r2, [pc, #556]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c36c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c372:	f7fb ffcf 	bl	8008314 <HAL_GetTick>
 800c376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c378:	e008      	b.n	800c38c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c37a:	f7fb ffcb 	bl	8008314 <HAL_GetTick>
 800c37e:	4602      	mov	r2, r0
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	1ad3      	subs	r3, r2, r3
 800c384:	2b02      	cmp	r3, #2
 800c386:	d901      	bls.n	800c38c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800c388:	2303      	movs	r3, #3
 800c38a:	e264      	b.n	800c856 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c38c:	4b82      	ldr	r3, [pc, #520]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c394:	2b00      	cmp	r3, #0
 800c396:	d0f0      	beq.n	800c37a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c398:	4b7f      	ldr	r3, [pc, #508]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	691b      	ldr	r3, [r3, #16]
 800c3a4:	061b      	lsls	r3, r3, #24
 800c3a6:	497c      	ldr	r1, [pc, #496]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	604b      	str	r3, [r1, #4]
 800c3ac:	e018      	b.n	800c3e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c3ae:	4b7a      	ldr	r3, [pc, #488]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4a79      	ldr	r2, [pc, #484]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c3b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3ba:	f7fb ffab 	bl	8008314 <HAL_GetTick>
 800c3be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c3c0:	e008      	b.n	800c3d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c3c2:	f7fb ffa7 	bl	8008314 <HAL_GetTick>
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	1ad3      	subs	r3, r2, r3
 800c3cc:	2b02      	cmp	r3, #2
 800c3ce:	d901      	bls.n	800c3d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800c3d0:	2303      	movs	r3, #3
 800c3d2:	e240      	b.n	800c856 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c3d4:	4b70      	ldr	r3, [pc, #448]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d1f0      	bne.n	800c3c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f003 0308 	and.w	r3, r3, #8
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d03c      	beq.n	800c466 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	695b      	ldr	r3, [r3, #20]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d01c      	beq.n	800c42e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c3f4:	4b68      	ldr	r3, [pc, #416]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c3f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c3fa:	4a67      	ldr	r2, [pc, #412]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c3fc:	f043 0301 	orr.w	r3, r3, #1
 800c400:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c404:	f7fb ff86 	bl	8008314 <HAL_GetTick>
 800c408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c40a:	e008      	b.n	800c41e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c40c:	f7fb ff82 	bl	8008314 <HAL_GetTick>
 800c410:	4602      	mov	r2, r0
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	1ad3      	subs	r3, r2, r3
 800c416:	2b02      	cmp	r3, #2
 800c418:	d901      	bls.n	800c41e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800c41a:	2303      	movs	r3, #3
 800c41c:	e21b      	b.n	800c856 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c41e:	4b5e      	ldr	r3, [pc, #376]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c420:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c424:	f003 0302 	and.w	r3, r3, #2
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d0ef      	beq.n	800c40c <HAL_RCC_OscConfig+0x3ec>
 800c42c:	e01b      	b.n	800c466 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c42e:	4b5a      	ldr	r3, [pc, #360]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c434:	4a58      	ldr	r2, [pc, #352]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c436:	f023 0301 	bic.w	r3, r3, #1
 800c43a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c43e:	f7fb ff69 	bl	8008314 <HAL_GetTick>
 800c442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c444:	e008      	b.n	800c458 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c446:	f7fb ff65 	bl	8008314 <HAL_GetTick>
 800c44a:	4602      	mov	r2, r0
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	1ad3      	subs	r3, r2, r3
 800c450:	2b02      	cmp	r3, #2
 800c452:	d901      	bls.n	800c458 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800c454:	2303      	movs	r3, #3
 800c456:	e1fe      	b.n	800c856 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c458:	4b4f      	ldr	r3, [pc, #316]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c45a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c45e:	f003 0302 	and.w	r3, r3, #2
 800c462:	2b00      	cmp	r3, #0
 800c464:	d1ef      	bne.n	800c446 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f003 0304 	and.w	r3, r3, #4
 800c46e:	2b00      	cmp	r3, #0
 800c470:	f000 80a6 	beq.w	800c5c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c474:	2300      	movs	r3, #0
 800c476:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800c478:	4b47      	ldr	r3, [pc, #284]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c47a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c47c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c480:	2b00      	cmp	r3, #0
 800c482:	d10d      	bne.n	800c4a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c484:	4b44      	ldr	r3, [pc, #272]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c488:	4a43      	ldr	r2, [pc, #268]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c48a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c48e:	6593      	str	r3, [r2, #88]	; 0x58
 800c490:	4b41      	ldr	r3, [pc, #260]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c498:	60bb      	str	r3, [r7, #8]
 800c49a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c49c:	2301      	movs	r3, #1
 800c49e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c4a0:	4b3e      	ldr	r3, [pc, #248]	; (800c59c <HAL_RCC_OscConfig+0x57c>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d118      	bne.n	800c4de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c4ac:	4b3b      	ldr	r3, [pc, #236]	; (800c59c <HAL_RCC_OscConfig+0x57c>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4a3a      	ldr	r2, [pc, #232]	; (800c59c <HAL_RCC_OscConfig+0x57c>)
 800c4b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c4b8:	f7fb ff2c 	bl	8008314 <HAL_GetTick>
 800c4bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c4be:	e008      	b.n	800c4d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c4c0:	f7fb ff28 	bl	8008314 <HAL_GetTick>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	1ad3      	subs	r3, r2, r3
 800c4ca:	2b02      	cmp	r3, #2
 800c4cc:	d901      	bls.n	800c4d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800c4ce:	2303      	movs	r3, #3
 800c4d0:	e1c1      	b.n	800c856 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c4d2:	4b32      	ldr	r3, [pc, #200]	; (800c59c <HAL_RCC_OscConfig+0x57c>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d0f0      	beq.n	800c4c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	689b      	ldr	r3, [r3, #8]
 800c4e2:	2b01      	cmp	r3, #1
 800c4e4:	d108      	bne.n	800c4f8 <HAL_RCC_OscConfig+0x4d8>
 800c4e6:	4b2c      	ldr	r3, [pc, #176]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c4e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4ec:	4a2a      	ldr	r2, [pc, #168]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c4ee:	f043 0301 	orr.w	r3, r3, #1
 800c4f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c4f6:	e024      	b.n	800c542 <HAL_RCC_OscConfig+0x522>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	689b      	ldr	r3, [r3, #8]
 800c4fc:	2b05      	cmp	r3, #5
 800c4fe:	d110      	bne.n	800c522 <HAL_RCC_OscConfig+0x502>
 800c500:	4b25      	ldr	r3, [pc, #148]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c506:	4a24      	ldr	r2, [pc, #144]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c508:	f043 0304 	orr.w	r3, r3, #4
 800c50c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c510:	4b21      	ldr	r3, [pc, #132]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c516:	4a20      	ldr	r2, [pc, #128]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c518:	f043 0301 	orr.w	r3, r3, #1
 800c51c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c520:	e00f      	b.n	800c542 <HAL_RCC_OscConfig+0x522>
 800c522:	4b1d      	ldr	r3, [pc, #116]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c528:	4a1b      	ldr	r2, [pc, #108]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c52a:	f023 0301 	bic.w	r3, r3, #1
 800c52e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c532:	4b19      	ldr	r3, [pc, #100]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c538:	4a17      	ldr	r2, [pc, #92]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c53a:	f023 0304 	bic.w	r3, r3, #4
 800c53e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	689b      	ldr	r3, [r3, #8]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d016      	beq.n	800c578 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c54a:	f7fb fee3 	bl	8008314 <HAL_GetTick>
 800c54e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c550:	e00a      	b.n	800c568 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c552:	f7fb fedf 	bl	8008314 <HAL_GetTick>
 800c556:	4602      	mov	r2, r0
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	1ad3      	subs	r3, r2, r3
 800c55c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c560:	4293      	cmp	r3, r2
 800c562:	d901      	bls.n	800c568 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800c564:	2303      	movs	r3, #3
 800c566:	e176      	b.n	800c856 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c568:	4b0b      	ldr	r3, [pc, #44]	; (800c598 <HAL_RCC_OscConfig+0x578>)
 800c56a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c56e:	f003 0302 	and.w	r3, r3, #2
 800c572:	2b00      	cmp	r3, #0
 800c574:	d0ed      	beq.n	800c552 <HAL_RCC_OscConfig+0x532>
 800c576:	e01a      	b.n	800c5ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c578:	f7fb fecc 	bl	8008314 <HAL_GetTick>
 800c57c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c57e:	e00f      	b.n	800c5a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c580:	f7fb fec8 	bl	8008314 <HAL_GetTick>
 800c584:	4602      	mov	r2, r0
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	1ad3      	subs	r3, r2, r3
 800c58a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c58e:	4293      	cmp	r3, r2
 800c590:	d906      	bls.n	800c5a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800c592:	2303      	movs	r3, #3
 800c594:	e15f      	b.n	800c856 <HAL_RCC_OscConfig+0x836>
 800c596:	bf00      	nop
 800c598:	40021000 	.word	0x40021000
 800c59c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c5a0:	4baa      	ldr	r3, [pc, #680]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c5a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5a6:	f003 0302 	and.w	r3, r3, #2
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d1e8      	bne.n	800c580 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c5ae:	7ffb      	ldrb	r3, [r7, #31]
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	d105      	bne.n	800c5c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c5b4:	4ba5      	ldr	r3, [pc, #660]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c5b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5b8:	4aa4      	ldr	r2, [pc, #656]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c5ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c5be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f003 0320 	and.w	r3, r3, #32
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d03c      	beq.n	800c646 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d01c      	beq.n	800c60e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c5d4:	4b9d      	ldr	r3, [pc, #628]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c5d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c5da:	4a9c      	ldr	r2, [pc, #624]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c5dc:	f043 0301 	orr.w	r3, r3, #1
 800c5e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c5e4:	f7fb fe96 	bl	8008314 <HAL_GetTick>
 800c5e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c5ea:	e008      	b.n	800c5fe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c5ec:	f7fb fe92 	bl	8008314 <HAL_GetTick>
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	1ad3      	subs	r3, r2, r3
 800c5f6:	2b02      	cmp	r3, #2
 800c5f8:	d901      	bls.n	800c5fe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800c5fa:	2303      	movs	r3, #3
 800c5fc:	e12b      	b.n	800c856 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c5fe:	4b93      	ldr	r3, [pc, #588]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c600:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c604:	f003 0302 	and.w	r3, r3, #2
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d0ef      	beq.n	800c5ec <HAL_RCC_OscConfig+0x5cc>
 800c60c:	e01b      	b.n	800c646 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c60e:	4b8f      	ldr	r3, [pc, #572]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c610:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c614:	4a8d      	ldr	r2, [pc, #564]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c616:	f023 0301 	bic.w	r3, r3, #1
 800c61a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c61e:	f7fb fe79 	bl	8008314 <HAL_GetTick>
 800c622:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c624:	e008      	b.n	800c638 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c626:	f7fb fe75 	bl	8008314 <HAL_GetTick>
 800c62a:	4602      	mov	r2, r0
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	1ad3      	subs	r3, r2, r3
 800c630:	2b02      	cmp	r3, #2
 800c632:	d901      	bls.n	800c638 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800c634:	2303      	movs	r3, #3
 800c636:	e10e      	b.n	800c856 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c638:	4b84      	ldr	r3, [pc, #528]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c63a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c63e:	f003 0302 	and.w	r3, r3, #2
 800c642:	2b00      	cmp	r3, #0
 800c644:	d1ef      	bne.n	800c626 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	f000 8102 	beq.w	800c854 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c654:	2b02      	cmp	r3, #2
 800c656:	f040 80c5 	bne.w	800c7e4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800c65a:	4b7c      	ldr	r3, [pc, #496]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c65c:	68db      	ldr	r3, [r3, #12]
 800c65e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	f003 0203 	and.w	r2, r3, #3
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d12c      	bne.n	800c6c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c678:	3b01      	subs	r3, #1
 800c67a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d123      	bne.n	800c6c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c68a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d11b      	bne.n	800c6c8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c69a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d113      	bne.n	800c6c8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6aa:	085b      	lsrs	r3, r3, #1
 800c6ac:	3b01      	subs	r3, #1
 800c6ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d109      	bne.n	800c6c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6be:	085b      	lsrs	r3, r3, #1
 800c6c0:	3b01      	subs	r3, #1
 800c6c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d067      	beq.n	800c798 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c6c8:	69bb      	ldr	r3, [r7, #24]
 800c6ca:	2b0c      	cmp	r3, #12
 800c6cc:	d062      	beq.n	800c794 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c6ce:	4b5f      	ldr	r3, [pc, #380]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d001      	beq.n	800c6de <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800c6da:	2301      	movs	r3, #1
 800c6dc:	e0bb      	b.n	800c856 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c6de:	4b5b      	ldr	r3, [pc, #364]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4a5a      	ldr	r2, [pc, #360]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c6e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c6e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c6ea:	f7fb fe13 	bl	8008314 <HAL_GetTick>
 800c6ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c6f0:	e008      	b.n	800c704 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c6f2:	f7fb fe0f 	bl	8008314 <HAL_GetTick>
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	1ad3      	subs	r3, r2, r3
 800c6fc:	2b02      	cmp	r3, #2
 800c6fe:	d901      	bls.n	800c704 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800c700:	2303      	movs	r3, #3
 800c702:	e0a8      	b.n	800c856 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c704:	4b51      	ldr	r3, [pc, #324]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d1f0      	bne.n	800c6f2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c710:	4b4e      	ldr	r3, [pc, #312]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c712:	68da      	ldr	r2, [r3, #12]
 800c714:	4b4e      	ldr	r3, [pc, #312]	; (800c850 <HAL_RCC_OscConfig+0x830>)
 800c716:	4013      	ands	r3, r2
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800c71c:	687a      	ldr	r2, [r7, #4]
 800c71e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c720:	3a01      	subs	r2, #1
 800c722:	0112      	lsls	r2, r2, #4
 800c724:	4311      	orrs	r1, r2
 800c726:	687a      	ldr	r2, [r7, #4]
 800c728:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c72a:	0212      	lsls	r2, r2, #8
 800c72c:	4311      	orrs	r1, r2
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c732:	0852      	lsrs	r2, r2, #1
 800c734:	3a01      	subs	r2, #1
 800c736:	0552      	lsls	r2, r2, #21
 800c738:	4311      	orrs	r1, r2
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c73e:	0852      	lsrs	r2, r2, #1
 800c740:	3a01      	subs	r2, #1
 800c742:	0652      	lsls	r2, r2, #25
 800c744:	4311      	orrs	r1, r2
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c74a:	06d2      	lsls	r2, r2, #27
 800c74c:	430a      	orrs	r2, r1
 800c74e:	493f      	ldr	r1, [pc, #252]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c750:	4313      	orrs	r3, r2
 800c752:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c754:	4b3d      	ldr	r3, [pc, #244]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4a3c      	ldr	r2, [pc, #240]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c75a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c75e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c760:	4b3a      	ldr	r3, [pc, #232]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c762:	68db      	ldr	r3, [r3, #12]
 800c764:	4a39      	ldr	r2, [pc, #228]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c76a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c76c:	f7fb fdd2 	bl	8008314 <HAL_GetTick>
 800c770:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c772:	e008      	b.n	800c786 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c774:	f7fb fdce 	bl	8008314 <HAL_GetTick>
 800c778:	4602      	mov	r2, r0
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	1ad3      	subs	r3, r2, r3
 800c77e:	2b02      	cmp	r3, #2
 800c780:	d901      	bls.n	800c786 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800c782:	2303      	movs	r3, #3
 800c784:	e067      	b.n	800c856 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c786:	4b31      	ldr	r3, [pc, #196]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d0f0      	beq.n	800c774 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c792:	e05f      	b.n	800c854 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c794:	2301      	movs	r3, #1
 800c796:	e05e      	b.n	800c856 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c798:	4b2c      	ldr	r3, [pc, #176]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d157      	bne.n	800c854 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c7a4:	4b29      	ldr	r3, [pc, #164]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4a28      	ldr	r2, [pc, #160]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c7aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c7ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c7b0:	4b26      	ldr	r3, [pc, #152]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c7b2:	68db      	ldr	r3, [r3, #12]
 800c7b4:	4a25      	ldr	r2, [pc, #148]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c7b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c7ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c7bc:	f7fb fdaa 	bl	8008314 <HAL_GetTick>
 800c7c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c7c2:	e008      	b.n	800c7d6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c7c4:	f7fb fda6 	bl	8008314 <HAL_GetTick>
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	1ad3      	subs	r3, r2, r3
 800c7ce:	2b02      	cmp	r3, #2
 800c7d0:	d901      	bls.n	800c7d6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800c7d2:	2303      	movs	r3, #3
 800c7d4:	e03f      	b.n	800c856 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c7d6:	4b1d      	ldr	r3, [pc, #116]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d0f0      	beq.n	800c7c4 <HAL_RCC_OscConfig+0x7a4>
 800c7e2:	e037      	b.n	800c854 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c7e4:	69bb      	ldr	r3, [r7, #24]
 800c7e6:	2b0c      	cmp	r3, #12
 800c7e8:	d02d      	beq.n	800c846 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c7ea:	4b18      	ldr	r3, [pc, #96]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4a17      	ldr	r2, [pc, #92]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c7f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c7f4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c7f6:	4b15      	ldr	r3, [pc, #84]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d105      	bne.n	800c80e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800c802:	4b12      	ldr	r3, [pc, #72]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c804:	68db      	ldr	r3, [r3, #12]
 800c806:	4a11      	ldr	r2, [pc, #68]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c808:	f023 0303 	bic.w	r3, r3, #3
 800c80c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800c80e:	4b0f      	ldr	r3, [pc, #60]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c810:	68db      	ldr	r3, [r3, #12]
 800c812:	4a0e      	ldr	r2, [pc, #56]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c814:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800c818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c81c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c81e:	f7fb fd79 	bl	8008314 <HAL_GetTick>
 800c822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c824:	e008      	b.n	800c838 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c826:	f7fb fd75 	bl	8008314 <HAL_GetTick>
 800c82a:	4602      	mov	r2, r0
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	1ad3      	subs	r3, r2, r3
 800c830:	2b02      	cmp	r3, #2
 800c832:	d901      	bls.n	800c838 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800c834:	2303      	movs	r3, #3
 800c836:	e00e      	b.n	800c856 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c838:	4b04      	ldr	r3, [pc, #16]	; (800c84c <HAL_RCC_OscConfig+0x82c>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c840:	2b00      	cmp	r3, #0
 800c842:	d1f0      	bne.n	800c826 <HAL_RCC_OscConfig+0x806>
 800c844:	e006      	b.n	800c854 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c846:	2301      	movs	r3, #1
 800c848:	e005      	b.n	800c856 <HAL_RCC_OscConfig+0x836>
 800c84a:	bf00      	nop
 800c84c:	40021000 	.word	0x40021000
 800c850:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800c854:	2300      	movs	r3, #0
}
 800c856:	4618      	mov	r0, r3
 800c858:	3720      	adds	r7, #32
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop

0800c860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b084      	sub	sp, #16
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d101      	bne.n	800c874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c870:	2301      	movs	r3, #1
 800c872:	e0c8      	b.n	800ca06 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c874:	4b66      	ldr	r3, [pc, #408]	; (800ca10 <HAL_RCC_ClockConfig+0x1b0>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f003 0307 	and.w	r3, r3, #7
 800c87c:	683a      	ldr	r2, [r7, #0]
 800c87e:	429a      	cmp	r2, r3
 800c880:	d910      	bls.n	800c8a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c882:	4b63      	ldr	r3, [pc, #396]	; (800ca10 <HAL_RCC_ClockConfig+0x1b0>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f023 0207 	bic.w	r2, r3, #7
 800c88a:	4961      	ldr	r1, [pc, #388]	; (800ca10 <HAL_RCC_ClockConfig+0x1b0>)
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	4313      	orrs	r3, r2
 800c890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c892:	4b5f      	ldr	r3, [pc, #380]	; (800ca10 <HAL_RCC_ClockConfig+0x1b0>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f003 0307 	and.w	r3, r3, #7
 800c89a:	683a      	ldr	r2, [r7, #0]
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d001      	beq.n	800c8a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	e0b0      	b.n	800ca06 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f003 0301 	and.w	r3, r3, #1
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d04c      	beq.n	800c94a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	685b      	ldr	r3, [r3, #4]
 800c8b4:	2b03      	cmp	r3, #3
 800c8b6:	d107      	bne.n	800c8c8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c8b8:	4b56      	ldr	r3, [pc, #344]	; (800ca14 <HAL_RCC_ClockConfig+0x1b4>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d121      	bne.n	800c908 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	e09e      	b.n	800ca06 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	2b02      	cmp	r3, #2
 800c8ce:	d107      	bne.n	800c8e0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c8d0:	4b50      	ldr	r3, [pc, #320]	; (800ca14 <HAL_RCC_ClockConfig+0x1b4>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d115      	bne.n	800c908 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c8dc:	2301      	movs	r3, #1
 800c8de:	e092      	b.n	800ca06 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d107      	bne.n	800c8f8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c8e8:	4b4a      	ldr	r3, [pc, #296]	; (800ca14 <HAL_RCC_ClockConfig+0x1b4>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f003 0302 	and.w	r3, r3, #2
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d109      	bne.n	800c908 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	e086      	b.n	800ca06 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c8f8:	4b46      	ldr	r3, [pc, #280]	; (800ca14 <HAL_RCC_ClockConfig+0x1b4>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c900:	2b00      	cmp	r3, #0
 800c902:	d101      	bne.n	800c908 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800c904:	2301      	movs	r3, #1
 800c906:	e07e      	b.n	800ca06 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c908:	4b42      	ldr	r3, [pc, #264]	; (800ca14 <HAL_RCC_ClockConfig+0x1b4>)
 800c90a:	689b      	ldr	r3, [r3, #8]
 800c90c:	f023 0203 	bic.w	r2, r3, #3
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	493f      	ldr	r1, [pc, #252]	; (800ca14 <HAL_RCC_ClockConfig+0x1b4>)
 800c916:	4313      	orrs	r3, r2
 800c918:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c91a:	f7fb fcfb 	bl	8008314 <HAL_GetTick>
 800c91e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c920:	e00a      	b.n	800c938 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c922:	f7fb fcf7 	bl	8008314 <HAL_GetTick>
 800c926:	4602      	mov	r2, r0
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	1ad3      	subs	r3, r2, r3
 800c92c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c930:	4293      	cmp	r3, r2
 800c932:	d901      	bls.n	800c938 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800c934:	2303      	movs	r3, #3
 800c936:	e066      	b.n	800ca06 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c938:	4b36      	ldr	r3, [pc, #216]	; (800ca14 <HAL_RCC_ClockConfig+0x1b4>)
 800c93a:	689b      	ldr	r3, [r3, #8]
 800c93c:	f003 020c 	and.w	r2, r3, #12
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	009b      	lsls	r3, r3, #2
 800c946:	429a      	cmp	r2, r3
 800c948:	d1eb      	bne.n	800c922 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f003 0302 	and.w	r3, r3, #2
 800c952:	2b00      	cmp	r3, #0
 800c954:	d008      	beq.n	800c968 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c956:	4b2f      	ldr	r3, [pc, #188]	; (800ca14 <HAL_RCC_ClockConfig+0x1b4>)
 800c958:	689b      	ldr	r3, [r3, #8]
 800c95a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	492c      	ldr	r1, [pc, #176]	; (800ca14 <HAL_RCC_ClockConfig+0x1b4>)
 800c964:	4313      	orrs	r3, r2
 800c966:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c968:	4b29      	ldr	r3, [pc, #164]	; (800ca10 <HAL_RCC_ClockConfig+0x1b0>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f003 0307 	and.w	r3, r3, #7
 800c970:	683a      	ldr	r2, [r7, #0]
 800c972:	429a      	cmp	r2, r3
 800c974:	d210      	bcs.n	800c998 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c976:	4b26      	ldr	r3, [pc, #152]	; (800ca10 <HAL_RCC_ClockConfig+0x1b0>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f023 0207 	bic.w	r2, r3, #7
 800c97e:	4924      	ldr	r1, [pc, #144]	; (800ca10 <HAL_RCC_ClockConfig+0x1b0>)
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	4313      	orrs	r3, r2
 800c984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c986:	4b22      	ldr	r3, [pc, #136]	; (800ca10 <HAL_RCC_ClockConfig+0x1b0>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f003 0307 	and.w	r3, r3, #7
 800c98e:	683a      	ldr	r2, [r7, #0]
 800c990:	429a      	cmp	r2, r3
 800c992:	d001      	beq.n	800c998 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800c994:	2301      	movs	r3, #1
 800c996:	e036      	b.n	800ca06 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f003 0304 	and.w	r3, r3, #4
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d008      	beq.n	800c9b6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c9a4:	4b1b      	ldr	r3, [pc, #108]	; (800ca14 <HAL_RCC_ClockConfig+0x1b4>)
 800c9a6:	689b      	ldr	r3, [r3, #8]
 800c9a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	68db      	ldr	r3, [r3, #12]
 800c9b0:	4918      	ldr	r1, [pc, #96]	; (800ca14 <HAL_RCC_ClockConfig+0x1b4>)
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f003 0308 	and.w	r3, r3, #8
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d009      	beq.n	800c9d6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c9c2:	4b14      	ldr	r3, [pc, #80]	; (800ca14 <HAL_RCC_ClockConfig+0x1b4>)
 800c9c4:	689b      	ldr	r3, [r3, #8]
 800c9c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	691b      	ldr	r3, [r3, #16]
 800c9ce:	00db      	lsls	r3, r3, #3
 800c9d0:	4910      	ldr	r1, [pc, #64]	; (800ca14 <HAL_RCC_ClockConfig+0x1b4>)
 800c9d2:	4313      	orrs	r3, r2
 800c9d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c9d6:	f000 f825 	bl	800ca24 <HAL_RCC_GetSysClockFreq>
 800c9da:	4602      	mov	r2, r0
 800c9dc:	4b0d      	ldr	r3, [pc, #52]	; (800ca14 <HAL_RCC_ClockConfig+0x1b4>)
 800c9de:	689b      	ldr	r3, [r3, #8]
 800c9e0:	091b      	lsrs	r3, r3, #4
 800c9e2:	f003 030f 	and.w	r3, r3, #15
 800c9e6:	490c      	ldr	r1, [pc, #48]	; (800ca18 <HAL_RCC_ClockConfig+0x1b8>)
 800c9e8:	5ccb      	ldrb	r3, [r1, r3]
 800c9ea:	f003 031f 	and.w	r3, r3, #31
 800c9ee:	fa22 f303 	lsr.w	r3, r2, r3
 800c9f2:	4a0a      	ldr	r2, [pc, #40]	; (800ca1c <HAL_RCC_ClockConfig+0x1bc>)
 800c9f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c9f6:	4b0a      	ldr	r3, [pc, #40]	; (800ca20 <HAL_RCC_ClockConfig+0x1c0>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f7f5 fc6a 	bl	80022d4 <HAL_InitTick>
 800ca00:	4603      	mov	r3, r0
 800ca02:	72fb      	strb	r3, [r7, #11]

  return status;
 800ca04:	7afb      	ldrb	r3, [r7, #11]
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3710      	adds	r7, #16
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	40022000 	.word	0x40022000
 800ca14:	40021000 	.word	0x40021000
 800ca18:	08014394 	.word	0x08014394
 800ca1c:	200003d4 	.word	0x200003d4
 800ca20:	200003d8 	.word	0x200003d8

0800ca24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ca24:	b480      	push	{r7}
 800ca26:	b089      	sub	sp, #36	; 0x24
 800ca28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	61fb      	str	r3, [r7, #28]
 800ca2e:	2300      	movs	r3, #0
 800ca30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ca32:	4b3e      	ldr	r3, [pc, #248]	; (800cb2c <HAL_RCC_GetSysClockFreq+0x108>)
 800ca34:	689b      	ldr	r3, [r3, #8]
 800ca36:	f003 030c 	and.w	r3, r3, #12
 800ca3a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ca3c:	4b3b      	ldr	r3, [pc, #236]	; (800cb2c <HAL_RCC_GetSysClockFreq+0x108>)
 800ca3e:	68db      	ldr	r3, [r3, #12]
 800ca40:	f003 0303 	and.w	r3, r3, #3
 800ca44:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d005      	beq.n	800ca58 <HAL_RCC_GetSysClockFreq+0x34>
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	2b0c      	cmp	r3, #12
 800ca50:	d121      	bne.n	800ca96 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2b01      	cmp	r3, #1
 800ca56:	d11e      	bne.n	800ca96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800ca58:	4b34      	ldr	r3, [pc, #208]	; (800cb2c <HAL_RCC_GetSysClockFreq+0x108>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f003 0308 	and.w	r3, r3, #8
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d107      	bne.n	800ca74 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800ca64:	4b31      	ldr	r3, [pc, #196]	; (800cb2c <HAL_RCC_GetSysClockFreq+0x108>)
 800ca66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca6a:	0a1b      	lsrs	r3, r3, #8
 800ca6c:	f003 030f 	and.w	r3, r3, #15
 800ca70:	61fb      	str	r3, [r7, #28]
 800ca72:	e005      	b.n	800ca80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ca74:	4b2d      	ldr	r3, [pc, #180]	; (800cb2c <HAL_RCC_GetSysClockFreq+0x108>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	091b      	lsrs	r3, r3, #4
 800ca7a:	f003 030f 	and.w	r3, r3, #15
 800ca7e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ca80:	4a2b      	ldr	r2, [pc, #172]	; (800cb30 <HAL_RCC_GetSysClockFreq+0x10c>)
 800ca82:	69fb      	ldr	r3, [r7, #28]
 800ca84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca88:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d10d      	bne.n	800caac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ca90:	69fb      	ldr	r3, [r7, #28]
 800ca92:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ca94:	e00a      	b.n	800caac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	2b04      	cmp	r3, #4
 800ca9a:	d102      	bne.n	800caa2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ca9c:	4b25      	ldr	r3, [pc, #148]	; (800cb34 <HAL_RCC_GetSysClockFreq+0x110>)
 800ca9e:	61bb      	str	r3, [r7, #24]
 800caa0:	e004      	b.n	800caac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800caa2:	693b      	ldr	r3, [r7, #16]
 800caa4:	2b08      	cmp	r3, #8
 800caa6:	d101      	bne.n	800caac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800caa8:	4b22      	ldr	r3, [pc, #136]	; (800cb34 <HAL_RCC_GetSysClockFreq+0x110>)
 800caaa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	2b0c      	cmp	r3, #12
 800cab0:	d134      	bne.n	800cb1c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800cab2:	4b1e      	ldr	r3, [pc, #120]	; (800cb2c <HAL_RCC_GetSysClockFreq+0x108>)
 800cab4:	68db      	ldr	r3, [r3, #12]
 800cab6:	f003 0303 	and.w	r3, r3, #3
 800caba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	2b02      	cmp	r3, #2
 800cac0:	d003      	beq.n	800caca <HAL_RCC_GetSysClockFreq+0xa6>
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	2b03      	cmp	r3, #3
 800cac6:	d003      	beq.n	800cad0 <HAL_RCC_GetSysClockFreq+0xac>
 800cac8:	e005      	b.n	800cad6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800caca:	4b1a      	ldr	r3, [pc, #104]	; (800cb34 <HAL_RCC_GetSysClockFreq+0x110>)
 800cacc:	617b      	str	r3, [r7, #20]
      break;
 800cace:	e005      	b.n	800cadc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800cad0:	4b18      	ldr	r3, [pc, #96]	; (800cb34 <HAL_RCC_GetSysClockFreq+0x110>)
 800cad2:	617b      	str	r3, [r7, #20]
      break;
 800cad4:	e002      	b.n	800cadc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800cad6:	69fb      	ldr	r3, [r7, #28]
 800cad8:	617b      	str	r3, [r7, #20]
      break;
 800cada:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cadc:	4b13      	ldr	r3, [pc, #76]	; (800cb2c <HAL_RCC_GetSysClockFreq+0x108>)
 800cade:	68db      	ldr	r3, [r3, #12]
 800cae0:	091b      	lsrs	r3, r3, #4
 800cae2:	f003 0307 	and.w	r3, r3, #7
 800cae6:	3301      	adds	r3, #1
 800cae8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800caea:	4b10      	ldr	r3, [pc, #64]	; (800cb2c <HAL_RCC_GetSysClockFreq+0x108>)
 800caec:	68db      	ldr	r3, [r3, #12]
 800caee:	0a1b      	lsrs	r3, r3, #8
 800caf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caf4:	697a      	ldr	r2, [r7, #20]
 800caf6:	fb02 f203 	mul.w	r2, r2, r3
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb00:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cb02:	4b0a      	ldr	r3, [pc, #40]	; (800cb2c <HAL_RCC_GetSysClockFreq+0x108>)
 800cb04:	68db      	ldr	r3, [r3, #12]
 800cb06:	0e5b      	lsrs	r3, r3, #25
 800cb08:	f003 0303 	and.w	r3, r3, #3
 800cb0c:	3301      	adds	r3, #1
 800cb0e:	005b      	lsls	r3, r3, #1
 800cb10:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800cb12:	697a      	ldr	r2, [r7, #20]
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb1a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800cb1c:	69bb      	ldr	r3, [r7, #24]
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3724      	adds	r7, #36	; 0x24
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr
 800cb2a:	bf00      	nop
 800cb2c:	40021000 	.word	0x40021000
 800cb30:	080143ac 	.word	0x080143ac
 800cb34:	00f42400 	.word	0x00f42400

0800cb38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cb3c:	4b03      	ldr	r3, [pc, #12]	; (800cb4c <HAL_RCC_GetHCLKFreq+0x14>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	46bd      	mov	sp, r7
 800cb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb48:	4770      	bx	lr
 800cb4a:	bf00      	nop
 800cb4c:	200003d4 	.word	0x200003d4

0800cb50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800cb54:	f7ff fff0 	bl	800cb38 <HAL_RCC_GetHCLKFreq>
 800cb58:	4602      	mov	r2, r0
 800cb5a:	4b06      	ldr	r3, [pc, #24]	; (800cb74 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cb5c:	689b      	ldr	r3, [r3, #8]
 800cb5e:	0a1b      	lsrs	r3, r3, #8
 800cb60:	f003 0307 	and.w	r3, r3, #7
 800cb64:	4904      	ldr	r1, [pc, #16]	; (800cb78 <HAL_RCC_GetPCLK1Freq+0x28>)
 800cb66:	5ccb      	ldrb	r3, [r1, r3]
 800cb68:	f003 031f 	and.w	r3, r3, #31
 800cb6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	bd80      	pop	{r7, pc}
 800cb74:	40021000 	.word	0x40021000
 800cb78:	080143a4 	.word	0x080143a4

0800cb7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800cb80:	f7ff ffda 	bl	800cb38 <HAL_RCC_GetHCLKFreq>
 800cb84:	4602      	mov	r2, r0
 800cb86:	4b06      	ldr	r3, [pc, #24]	; (800cba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cb88:	689b      	ldr	r3, [r3, #8]
 800cb8a:	0adb      	lsrs	r3, r3, #11
 800cb8c:	f003 0307 	and.w	r3, r3, #7
 800cb90:	4904      	ldr	r1, [pc, #16]	; (800cba4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800cb92:	5ccb      	ldrb	r3, [r1, r3]
 800cb94:	f003 031f 	and.w	r3, r3, #31
 800cb98:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	bd80      	pop	{r7, pc}
 800cba0:	40021000 	.word	0x40021000
 800cba4:	080143a4 	.word	0x080143a4

0800cba8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b083      	sub	sp, #12
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	220f      	movs	r2, #15
 800cbb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800cbb8:	4b12      	ldr	r3, [pc, #72]	; (800cc04 <HAL_RCC_GetClockConfig+0x5c>)
 800cbba:	689b      	ldr	r3, [r3, #8]
 800cbbc:	f003 0203 	and.w	r2, r3, #3
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800cbc4:	4b0f      	ldr	r3, [pc, #60]	; (800cc04 <HAL_RCC_GetClockConfig+0x5c>)
 800cbc6:	689b      	ldr	r3, [r3, #8]
 800cbc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800cbd0:	4b0c      	ldr	r3, [pc, #48]	; (800cc04 <HAL_RCC_GetClockConfig+0x5c>)
 800cbd2:	689b      	ldr	r3, [r3, #8]
 800cbd4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800cbdc:	4b09      	ldr	r3, [pc, #36]	; (800cc04 <HAL_RCC_GetClockConfig+0x5c>)
 800cbde:	689b      	ldr	r3, [r3, #8]
 800cbe0:	08db      	lsrs	r3, r3, #3
 800cbe2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800cbea:	4b07      	ldr	r3, [pc, #28]	; (800cc08 <HAL_RCC_GetClockConfig+0x60>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f003 0207 	and.w	r2, r3, #7
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	601a      	str	r2, [r3, #0]
}
 800cbf6:	bf00      	nop
 800cbf8:	370c      	adds	r7, #12
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr
 800cc02:	bf00      	nop
 800cc04:	40021000 	.word	0x40021000
 800cc08:	40022000 	.word	0x40022000

0800cc0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b086      	sub	sp, #24
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800cc14:	2300      	movs	r3, #0
 800cc16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800cc18:	4b2a      	ldr	r3, [pc, #168]	; (800ccc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cc1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d003      	beq.n	800cc2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800cc24:	f7ff f998 	bl	800bf58 <HAL_PWREx_GetVoltageRange>
 800cc28:	6178      	str	r0, [r7, #20]
 800cc2a:	e014      	b.n	800cc56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800cc2c:	4b25      	ldr	r3, [pc, #148]	; (800ccc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cc2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc30:	4a24      	ldr	r2, [pc, #144]	; (800ccc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cc32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc36:	6593      	str	r3, [r2, #88]	; 0x58
 800cc38:	4b22      	ldr	r3, [pc, #136]	; (800ccc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cc3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc40:	60fb      	str	r3, [r7, #12]
 800cc42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800cc44:	f7ff f988 	bl	800bf58 <HAL_PWREx_GetVoltageRange>
 800cc48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800cc4a:	4b1e      	ldr	r3, [pc, #120]	; (800ccc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cc4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc4e:	4a1d      	ldr	r2, [pc, #116]	; (800ccc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cc50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cc54:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc5c:	d10b      	bne.n	800cc76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2b80      	cmp	r3, #128	; 0x80
 800cc62:	d919      	bls.n	800cc98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2ba0      	cmp	r3, #160	; 0xa0
 800cc68:	d902      	bls.n	800cc70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800cc6a:	2302      	movs	r3, #2
 800cc6c:	613b      	str	r3, [r7, #16]
 800cc6e:	e013      	b.n	800cc98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800cc70:	2301      	movs	r3, #1
 800cc72:	613b      	str	r3, [r7, #16]
 800cc74:	e010      	b.n	800cc98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2b80      	cmp	r3, #128	; 0x80
 800cc7a:	d902      	bls.n	800cc82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800cc7c:	2303      	movs	r3, #3
 800cc7e:	613b      	str	r3, [r7, #16]
 800cc80:	e00a      	b.n	800cc98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2b80      	cmp	r3, #128	; 0x80
 800cc86:	d102      	bne.n	800cc8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800cc88:	2302      	movs	r3, #2
 800cc8a:	613b      	str	r3, [r7, #16]
 800cc8c:	e004      	b.n	800cc98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2b70      	cmp	r3, #112	; 0x70
 800cc92:	d101      	bne.n	800cc98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800cc94:	2301      	movs	r3, #1
 800cc96:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800cc98:	4b0b      	ldr	r3, [pc, #44]	; (800ccc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f023 0207 	bic.w	r2, r3, #7
 800cca0:	4909      	ldr	r1, [pc, #36]	; (800ccc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	4313      	orrs	r3, r2
 800cca6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800cca8:	4b07      	ldr	r3, [pc, #28]	; (800ccc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f003 0307 	and.w	r3, r3, #7
 800ccb0:	693a      	ldr	r2, [r7, #16]
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d001      	beq.n	800ccba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	e000      	b.n	800ccbc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800ccba:	2300      	movs	r3, #0
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3718      	adds	r7, #24
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}
 800ccc4:	40021000 	.word	0x40021000
 800ccc8:	40022000 	.word	0x40022000

0800cccc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b086      	sub	sp, #24
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ccd8:	2300      	movs	r3, #0
 800ccda:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d031      	beq.n	800cd4c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ccf0:	d01a      	beq.n	800cd28 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800ccf2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ccf6:	d814      	bhi.n	800cd22 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d009      	beq.n	800cd10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800ccfc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cd00:	d10f      	bne.n	800cd22 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800cd02:	4bac      	ldr	r3, [pc, #688]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cd04:	68db      	ldr	r3, [r3, #12]
 800cd06:	4aab      	ldr	r2, [pc, #684]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cd08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd0c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800cd0e:	e00c      	b.n	800cd2a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	3304      	adds	r3, #4
 800cd14:	2100      	movs	r1, #0
 800cd16:	4618      	mov	r0, r3
 800cd18:	f000 f9dc 	bl	800d0d4 <RCCEx_PLLSAI1_Config>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800cd20:	e003      	b.n	800cd2a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cd22:	2301      	movs	r3, #1
 800cd24:	74fb      	strb	r3, [r7, #19]
      break;
 800cd26:	e000      	b.n	800cd2a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800cd28:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cd2a:	7cfb      	ldrb	r3, [r7, #19]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d10b      	bne.n	800cd48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cd30:	4ba0      	ldr	r3, [pc, #640]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cd32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd3e:	499d      	ldr	r1, [pc, #628]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cd40:	4313      	orrs	r3, r2
 800cd42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800cd46:	e001      	b.n	800cd4c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd48:	7cfb      	ldrb	r3, [r7, #19]
 800cd4a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	f000 8099 	beq.w	800ce8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800cd5e:	4b95      	ldr	r3, [pc, #596]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cd60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d101      	bne.n	800cd6e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	e000      	b.n	800cd70 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800cd6e:	2300      	movs	r3, #0
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d00d      	beq.n	800cd90 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cd74:	4b8f      	ldr	r3, [pc, #572]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cd76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd78:	4a8e      	ldr	r2, [pc, #568]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cd7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd7e:	6593      	str	r3, [r2, #88]	; 0x58
 800cd80:	4b8c      	ldr	r3, [pc, #560]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cd82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd88:	60bb      	str	r3, [r7, #8]
 800cd8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cd90:	4b89      	ldr	r3, [pc, #548]	; (800cfb8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4a88      	ldr	r2, [pc, #544]	; (800cfb8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800cd96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cd9c:	f7fb faba 	bl	8008314 <HAL_GetTick>
 800cda0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800cda2:	e009      	b.n	800cdb8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cda4:	f7fb fab6 	bl	8008314 <HAL_GetTick>
 800cda8:	4602      	mov	r2, r0
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	1ad3      	subs	r3, r2, r3
 800cdae:	2b02      	cmp	r3, #2
 800cdb0:	d902      	bls.n	800cdb8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800cdb2:	2303      	movs	r3, #3
 800cdb4:	74fb      	strb	r3, [r7, #19]
        break;
 800cdb6:	e005      	b.n	800cdc4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800cdb8:	4b7f      	ldr	r3, [pc, #508]	; (800cfb8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d0ef      	beq.n	800cda4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800cdc4:	7cfb      	ldrb	r3, [r7, #19]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d155      	bne.n	800ce76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800cdca:	4b7a      	ldr	r3, [pc, #488]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cdcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cdd4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d01e      	beq.n	800ce1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cde0:	697a      	ldr	r2, [r7, #20]
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d019      	beq.n	800ce1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800cde6:	4b73      	ldr	r3, [pc, #460]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cde8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cdf0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cdf2:	4b70      	ldr	r3, [pc, #448]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cdf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdf8:	4a6e      	ldr	r2, [pc, #440]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cdfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cdfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ce02:	4b6c      	ldr	r3, [pc, #432]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ce04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce08:	4a6a      	ldr	r2, [pc, #424]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ce0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ce0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800ce12:	4a68      	ldr	r2, [pc, #416]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	f003 0301 	and.w	r3, r3, #1
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d016      	beq.n	800ce52 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce24:	f7fb fa76 	bl	8008314 <HAL_GetTick>
 800ce28:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ce2a:	e00b      	b.n	800ce44 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ce2c:	f7fb fa72 	bl	8008314 <HAL_GetTick>
 800ce30:	4602      	mov	r2, r0
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	1ad3      	subs	r3, r2, r3
 800ce36:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d902      	bls.n	800ce44 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800ce3e:	2303      	movs	r3, #3
 800ce40:	74fb      	strb	r3, [r7, #19]
            break;
 800ce42:	e006      	b.n	800ce52 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ce44:	4b5b      	ldr	r3, [pc, #364]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ce46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce4a:	f003 0302 	and.w	r3, r3, #2
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d0ec      	beq.n	800ce2c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800ce52:	7cfb      	ldrb	r3, [r7, #19]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d10b      	bne.n	800ce70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ce58:	4b56      	ldr	r3, [pc, #344]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ce5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce66:	4953      	ldr	r1, [pc, #332]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ce68:	4313      	orrs	r3, r2
 800ce6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800ce6e:	e004      	b.n	800ce7a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ce70:	7cfb      	ldrb	r3, [r7, #19]
 800ce72:	74bb      	strb	r3, [r7, #18]
 800ce74:	e001      	b.n	800ce7a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce76:	7cfb      	ldrb	r3, [r7, #19]
 800ce78:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ce7a:	7c7b      	ldrb	r3, [r7, #17]
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	d105      	bne.n	800ce8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ce80:	4b4c      	ldr	r3, [pc, #304]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ce82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce84:	4a4b      	ldr	r2, [pc, #300]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ce86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce8a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f003 0301 	and.w	r3, r3, #1
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d00a      	beq.n	800ceae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ce98:	4b46      	ldr	r3, [pc, #280]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ce9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce9e:	f023 0203 	bic.w	r2, r3, #3
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6a1b      	ldr	r3, [r3, #32]
 800cea6:	4943      	ldr	r1, [pc, #268]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cea8:	4313      	orrs	r3, r2
 800ceaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f003 0302 	and.w	r3, r3, #2
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d00a      	beq.n	800ced0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ceba:	4b3e      	ldr	r3, [pc, #248]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cec0:	f023 020c 	bic.w	r2, r3, #12
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cec8:	493a      	ldr	r1, [pc, #232]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ceca:	4313      	orrs	r3, r2
 800cecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f003 0320 	and.w	r3, r3, #32
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d00a      	beq.n	800cef2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cedc:	4b35      	ldr	r3, [pc, #212]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cee2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceea:	4932      	ldr	r1, [pc, #200]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800ceec:	4313      	orrs	r3, r2
 800ceee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d00a      	beq.n	800cf14 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cefe:	4b2d      	ldr	r3, [pc, #180]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cf00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf0c:	4929      	ldr	r1, [pc, #164]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cf0e:	4313      	orrs	r3, r2
 800cf10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d00a      	beq.n	800cf36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cf20:	4b24      	ldr	r3, [pc, #144]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cf22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf2e:	4921      	ldr	r1, [pc, #132]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cf30:	4313      	orrs	r3, r2
 800cf32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d00a      	beq.n	800cf58 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cf42:	4b1c      	ldr	r3, [pc, #112]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cf44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf50:	4918      	ldr	r1, [pc, #96]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cf52:	4313      	orrs	r3, r2
 800cf54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d00a      	beq.n	800cf7a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cf64:	4b13      	ldr	r3, [pc, #76]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cf66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf72:	4910      	ldr	r1, [pc, #64]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cf74:	4313      	orrs	r3, r2
 800cf76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d02c      	beq.n	800cfe0 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cf86:	4b0b      	ldr	r3, [pc, #44]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cf88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf8c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf94:	4907      	ldr	r1, [pc, #28]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cf96:	4313      	orrs	r3, r2
 800cf98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cfa4:	d10a      	bne.n	800cfbc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cfa6:	4b03      	ldr	r3, [pc, #12]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cfa8:	68db      	ldr	r3, [r3, #12]
 800cfaa:	4a02      	ldr	r2, [pc, #8]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800cfac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cfb0:	60d3      	str	r3, [r2, #12]
 800cfb2:	e015      	b.n	800cfe0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800cfb4:	40021000 	.word	0x40021000
 800cfb8:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cfc4:	d10c      	bne.n	800cfe0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	3304      	adds	r3, #4
 800cfca:	2101      	movs	r1, #1
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f000 f881 	bl	800d0d4 <RCCEx_PLLSAI1_Config>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800cfd6:	7cfb      	ldrb	r3, [r7, #19]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d001      	beq.n	800cfe0 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 800cfdc:	7cfb      	ldrb	r3, [r7, #19]
 800cfde:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d028      	beq.n	800d03e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cfec:	4b30      	ldr	r3, [pc, #192]	; (800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800cfee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cff2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cffa:	492d      	ldr	r1, [pc, #180]	; (800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800cffc:	4313      	orrs	r3, r2
 800cffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d006:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d00a:	d106      	bne.n	800d01a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d00c:	4b28      	ldr	r3, [pc, #160]	; (800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	4a27      	ldr	r2, [pc, #156]	; (800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800d012:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d016:	60d3      	str	r3, [r2, #12]
 800d018:	e011      	b.n	800d03e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d01e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d022:	d10c      	bne.n	800d03e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	3304      	adds	r3, #4
 800d028:	2101      	movs	r1, #1
 800d02a:	4618      	mov	r0, r3
 800d02c:	f000 f852 	bl	800d0d4 <RCCEx_PLLSAI1_Config>
 800d030:	4603      	mov	r3, r0
 800d032:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d034:	7cfb      	ldrb	r3, [r7, #19]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d001      	beq.n	800d03e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800d03a:	7cfb      	ldrb	r3, [r7, #19]
 800d03c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d046:	2b00      	cmp	r3, #0
 800d048:	d01c      	beq.n	800d084 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d04a:	4b19      	ldr	r3, [pc, #100]	; (800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800d04c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d050:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d058:	4915      	ldr	r1, [pc, #84]	; (800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800d05a:	4313      	orrs	r3, r2
 800d05c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d064:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d068:	d10c      	bne.n	800d084 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	3304      	adds	r3, #4
 800d06e:	2102      	movs	r1, #2
 800d070:	4618      	mov	r0, r3
 800d072:	f000 f82f 	bl	800d0d4 <RCCEx_PLLSAI1_Config>
 800d076:	4603      	mov	r3, r0
 800d078:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d07a:	7cfb      	ldrb	r3, [r7, #19]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d001      	beq.n	800d084 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800d080:	7cfb      	ldrb	r3, [r7, #19]
 800d082:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d00a      	beq.n	800d0a6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d090:	4b07      	ldr	r3, [pc, #28]	; (800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800d092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d096:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d09e:	4904      	ldr	r1, [pc, #16]	; (800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800d0a6:	7cbb      	ldrb	r3, [r7, #18]
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3718      	adds	r7, #24
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}
 800d0b0:	40021000 	.word	0x40021000

0800d0b4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800d0b8:	4b05      	ldr	r3, [pc, #20]	; (800d0d0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	4a04      	ldr	r2, [pc, #16]	; (800d0d0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800d0be:	f043 0304 	orr.w	r3, r3, #4
 800d0c2:	6013      	str	r3, [r2, #0]
}
 800d0c4:	bf00      	nop
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr
 800d0ce:	bf00      	nop
 800d0d0:	40021000 	.word	0x40021000

0800d0d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
 800d0dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d0e2:	4b74      	ldr	r3, [pc, #464]	; (800d2b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d0e4:	68db      	ldr	r3, [r3, #12]
 800d0e6:	f003 0303 	and.w	r3, r3, #3
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d018      	beq.n	800d120 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800d0ee:	4b71      	ldr	r3, [pc, #452]	; (800d2b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d0f0:	68db      	ldr	r3, [r3, #12]
 800d0f2:	f003 0203 	and.w	r2, r3, #3
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	d10d      	bne.n	800d11a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
       ||
 800d102:	2b00      	cmp	r3, #0
 800d104:	d009      	beq.n	800d11a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800d106:	4b6b      	ldr	r3, [pc, #428]	; (800d2b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	091b      	lsrs	r3, r3, #4
 800d10c:	f003 0307 	and.w	r3, r3, #7
 800d110:	1c5a      	adds	r2, r3, #1
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	685b      	ldr	r3, [r3, #4]
       ||
 800d116:	429a      	cmp	r2, r3
 800d118:	d047      	beq.n	800d1aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800d11a:	2301      	movs	r3, #1
 800d11c:	73fb      	strb	r3, [r7, #15]
 800d11e:	e044      	b.n	800d1aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	2b03      	cmp	r3, #3
 800d126:	d018      	beq.n	800d15a <RCCEx_PLLSAI1_Config+0x86>
 800d128:	2b03      	cmp	r3, #3
 800d12a:	d825      	bhi.n	800d178 <RCCEx_PLLSAI1_Config+0xa4>
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d002      	beq.n	800d136 <RCCEx_PLLSAI1_Config+0x62>
 800d130:	2b02      	cmp	r3, #2
 800d132:	d009      	beq.n	800d148 <RCCEx_PLLSAI1_Config+0x74>
 800d134:	e020      	b.n	800d178 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d136:	4b5f      	ldr	r3, [pc, #380]	; (800d2b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f003 0302 	and.w	r3, r3, #2
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d11d      	bne.n	800d17e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800d142:	2301      	movs	r3, #1
 800d144:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d146:	e01a      	b.n	800d17e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d148:	4b5a      	ldr	r3, [pc, #360]	; (800d2b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d150:	2b00      	cmp	r3, #0
 800d152:	d116      	bne.n	800d182 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800d154:	2301      	movs	r3, #1
 800d156:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d158:	e013      	b.n	800d182 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d15a:	4b56      	ldr	r3, [pc, #344]	; (800d2b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d162:	2b00      	cmp	r3, #0
 800d164:	d10f      	bne.n	800d186 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d166:	4b53      	ldr	r3, [pc, #332]	; (800d2b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d109      	bne.n	800d186 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800d172:	2301      	movs	r3, #1
 800d174:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d176:	e006      	b.n	800d186 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800d178:	2301      	movs	r3, #1
 800d17a:	73fb      	strb	r3, [r7, #15]
      break;
 800d17c:	e004      	b.n	800d188 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d17e:	bf00      	nop
 800d180:	e002      	b.n	800d188 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d182:	bf00      	nop
 800d184:	e000      	b.n	800d188 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d186:	bf00      	nop
    }

    if(status == HAL_OK)
 800d188:	7bfb      	ldrb	r3, [r7, #15]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d10d      	bne.n	800d1aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800d18e:	4b49      	ldr	r3, [pc, #292]	; (800d2b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d190:	68db      	ldr	r3, [r3, #12]
 800d192:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6819      	ldr	r1, [r3, #0]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	3b01      	subs	r3, #1
 800d1a0:	011b      	lsls	r3, r3, #4
 800d1a2:	430b      	orrs	r3, r1
 800d1a4:	4943      	ldr	r1, [pc, #268]	; (800d2b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1a6:	4313      	orrs	r3, r2
 800d1a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800d1aa:	7bfb      	ldrb	r3, [r7, #15]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d17c      	bne.n	800d2aa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800d1b0:	4b40      	ldr	r3, [pc, #256]	; (800d2b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4a3f      	ldr	r2, [pc, #252]	; (800d2b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d1ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1bc:	f7fb f8aa 	bl	8008314 <HAL_GetTick>
 800d1c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d1c2:	e009      	b.n	800d1d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d1c4:	f7fb f8a6 	bl	8008314 <HAL_GetTick>
 800d1c8:	4602      	mov	r2, r0
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	1ad3      	subs	r3, r2, r3
 800d1ce:	2b02      	cmp	r3, #2
 800d1d0:	d902      	bls.n	800d1d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800d1d2:	2303      	movs	r3, #3
 800d1d4:	73fb      	strb	r3, [r7, #15]
        break;
 800d1d6:	e005      	b.n	800d1e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d1d8:	4b36      	ldr	r3, [pc, #216]	; (800d2b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d1ef      	bne.n	800d1c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800d1e4:	7bfb      	ldrb	r3, [r7, #15]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d15f      	bne.n	800d2aa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d110      	bne.n	800d212 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d1f0:	4b30      	ldr	r3, [pc, #192]	; (800d2b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1f2:	691b      	ldr	r3, [r3, #16]
 800d1f4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800d1f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d1fc:	687a      	ldr	r2, [r7, #4]
 800d1fe:	6892      	ldr	r2, [r2, #8]
 800d200:	0211      	lsls	r1, r2, #8
 800d202:	687a      	ldr	r2, [r7, #4]
 800d204:	68d2      	ldr	r2, [r2, #12]
 800d206:	06d2      	lsls	r2, r2, #27
 800d208:	430a      	orrs	r2, r1
 800d20a:	492a      	ldr	r1, [pc, #168]	; (800d2b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d20c:	4313      	orrs	r3, r2
 800d20e:	610b      	str	r3, [r1, #16]
 800d210:	e027      	b.n	800d262 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	2b01      	cmp	r3, #1
 800d216:	d112      	bne.n	800d23e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d218:	4b26      	ldr	r3, [pc, #152]	; (800d2b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d21a:	691b      	ldr	r3, [r3, #16]
 800d21c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800d220:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d224:	687a      	ldr	r2, [r7, #4]
 800d226:	6892      	ldr	r2, [r2, #8]
 800d228:	0211      	lsls	r1, r2, #8
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	6912      	ldr	r2, [r2, #16]
 800d22e:	0852      	lsrs	r2, r2, #1
 800d230:	3a01      	subs	r2, #1
 800d232:	0552      	lsls	r2, r2, #21
 800d234:	430a      	orrs	r2, r1
 800d236:	491f      	ldr	r1, [pc, #124]	; (800d2b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d238:	4313      	orrs	r3, r2
 800d23a:	610b      	str	r3, [r1, #16]
 800d23c:	e011      	b.n	800d262 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d23e:	4b1d      	ldr	r3, [pc, #116]	; (800d2b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d240:	691b      	ldr	r3, [r3, #16]
 800d242:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800d246:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d24a:	687a      	ldr	r2, [r7, #4]
 800d24c:	6892      	ldr	r2, [r2, #8]
 800d24e:	0211      	lsls	r1, r2, #8
 800d250:	687a      	ldr	r2, [r7, #4]
 800d252:	6952      	ldr	r2, [r2, #20]
 800d254:	0852      	lsrs	r2, r2, #1
 800d256:	3a01      	subs	r2, #1
 800d258:	0652      	lsls	r2, r2, #25
 800d25a:	430a      	orrs	r2, r1
 800d25c:	4915      	ldr	r1, [pc, #84]	; (800d2b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d25e:	4313      	orrs	r3, r2
 800d260:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800d262:	4b14      	ldr	r3, [pc, #80]	; (800d2b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	4a13      	ldr	r2, [pc, #76]	; (800d2b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d268:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d26c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d26e:	f7fb f851 	bl	8008314 <HAL_GetTick>
 800d272:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d274:	e009      	b.n	800d28a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d276:	f7fb f84d 	bl	8008314 <HAL_GetTick>
 800d27a:	4602      	mov	r2, r0
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	1ad3      	subs	r3, r2, r3
 800d280:	2b02      	cmp	r3, #2
 800d282:	d902      	bls.n	800d28a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800d284:	2303      	movs	r3, #3
 800d286:	73fb      	strb	r3, [r7, #15]
          break;
 800d288:	e005      	b.n	800d296 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d28a:	4b0a      	ldr	r3, [pc, #40]	; (800d2b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d292:	2b00      	cmp	r3, #0
 800d294:	d0ef      	beq.n	800d276 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800d296:	7bfb      	ldrb	r3, [r7, #15]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d106      	bne.n	800d2aa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800d29c:	4b05      	ldr	r3, [pc, #20]	; (800d2b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d29e:	691a      	ldr	r2, [r3, #16]
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	699b      	ldr	r3, [r3, #24]
 800d2a4:	4903      	ldr	r1, [pc, #12]	; (800d2b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2a6:	4313      	orrs	r3, r2
 800d2a8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800d2aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3710      	adds	r7, #16
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}
 800d2b4:	40021000 	.word	0x40021000

0800d2b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b082      	sub	sp, #8
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d101      	bne.n	800d2ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	e049      	b.n	800d35e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2d0:	b2db      	uxtb	r3, r3
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d106      	bne.n	800d2e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f000 f841 	bl	800d366 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2202      	movs	r2, #2
 800d2e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681a      	ldr	r2, [r3, #0]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	3304      	adds	r3, #4
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	4610      	mov	r0, r2
 800d2f8:	f000 fb42 	bl	800d980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2201      	movs	r2, #1
 800d300:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2201      	movs	r2, #1
 800d308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2201      	movs	r2, #1
 800d310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2201      	movs	r2, #1
 800d318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2201      	movs	r2, #1
 800d320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2201      	movs	r2, #1
 800d328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2201      	movs	r2, #1
 800d330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2201      	movs	r2, #1
 800d338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2201      	movs	r2, #1
 800d340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2201      	movs	r2, #1
 800d348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2201      	movs	r2, #1
 800d350:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2201      	movs	r2, #1
 800d358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d35c:	2300      	movs	r3, #0
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3708      	adds	r7, #8
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}

0800d366 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d366:	b480      	push	{r7}
 800d368:	b083      	sub	sp, #12
 800d36a:	af00      	add	r7, sp, #0
 800d36c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d36e:	bf00      	nop
 800d370:	370c      	adds	r7, #12
 800d372:	46bd      	mov	sp, r7
 800d374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d378:	4770      	bx	lr
	...

0800d37c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b085      	sub	sp, #20
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d38a:	b2db      	uxtb	r3, r3
 800d38c:	2b01      	cmp	r3, #1
 800d38e:	d001      	beq.n	800d394 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d390:	2301      	movs	r3, #1
 800d392:	e03b      	b.n	800d40c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2202      	movs	r2, #2
 800d398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	68da      	ldr	r2, [r3, #12]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f042 0201 	orr.w	r2, r2, #1
 800d3aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	4a19      	ldr	r2, [pc, #100]	; (800d418 <HAL_TIM_Base_Start_IT+0x9c>)
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	d009      	beq.n	800d3ca <HAL_TIM_Base_Start_IT+0x4e>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3be:	d004      	beq.n	800d3ca <HAL_TIM_Base_Start_IT+0x4e>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4a15      	ldr	r2, [pc, #84]	; (800d41c <HAL_TIM_Base_Start_IT+0xa0>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d115      	bne.n	800d3f6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	689a      	ldr	r2, [r3, #8]
 800d3d0:	4b13      	ldr	r3, [pc, #76]	; (800d420 <HAL_TIM_Base_Start_IT+0xa4>)
 800d3d2:	4013      	ands	r3, r2
 800d3d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	2b06      	cmp	r3, #6
 800d3da:	d015      	beq.n	800d408 <HAL_TIM_Base_Start_IT+0x8c>
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3e2:	d011      	beq.n	800d408 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	681a      	ldr	r2, [r3, #0]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f042 0201 	orr.w	r2, r2, #1
 800d3f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3f4:	e008      	b.n	800d408 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	681a      	ldr	r2, [r3, #0]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	f042 0201 	orr.w	r2, r2, #1
 800d404:	601a      	str	r2, [r3, #0]
 800d406:	e000      	b.n	800d40a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d408:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d40a:	2300      	movs	r3, #0
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3714      	adds	r7, #20
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr
 800d418:	40012c00 	.word	0x40012c00
 800d41c:	40014000 	.word	0x40014000
 800d420:	00010007 	.word	0x00010007

0800d424 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b082      	sub	sp, #8
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d101      	bne.n	800d436 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d432:	2301      	movs	r3, #1
 800d434:	e049      	b.n	800d4ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d43c:	b2db      	uxtb	r3, r3
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d106      	bne.n	800d450 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2200      	movs	r2, #0
 800d446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f7f5 fa1a 	bl	8002884 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2202      	movs	r2, #2
 800d454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681a      	ldr	r2, [r3, #0]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	3304      	adds	r3, #4
 800d460:	4619      	mov	r1, r3
 800d462:	4610      	mov	r0, r2
 800d464:	f000 fa8c 	bl	800d980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2201      	movs	r2, #1
 800d46c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2201      	movs	r2, #1
 800d474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2201      	movs	r2, #1
 800d47c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2201      	movs	r2, #1
 800d484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2201      	movs	r2, #1
 800d48c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2201      	movs	r2, #1
 800d494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2201      	movs	r2, #1
 800d49c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d4c8:	2300      	movs	r3, #0
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3708      	adds	r7, #8
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}

0800d4d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d4d2:	b580      	push	{r7, lr}
 800d4d4:	b082      	sub	sp, #8
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	691b      	ldr	r3, [r3, #16]
 800d4e0:	f003 0302 	and.w	r3, r3, #2
 800d4e4:	2b02      	cmp	r3, #2
 800d4e6:	d122      	bne.n	800d52e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	68db      	ldr	r3, [r3, #12]
 800d4ee:	f003 0302 	and.w	r3, r3, #2
 800d4f2:	2b02      	cmp	r3, #2
 800d4f4:	d11b      	bne.n	800d52e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f06f 0202 	mvn.w	r2, #2
 800d4fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2201      	movs	r2, #1
 800d504:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	699b      	ldr	r3, [r3, #24]
 800d50c:	f003 0303 	and.w	r3, r3, #3
 800d510:	2b00      	cmp	r3, #0
 800d512:	d003      	beq.n	800d51c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f000 fa15 	bl	800d944 <HAL_TIM_IC_CaptureCallback>
 800d51a:	e005      	b.n	800d528 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f000 fa07 	bl	800d930 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f000 fa18 	bl	800d958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2200      	movs	r2, #0
 800d52c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	691b      	ldr	r3, [r3, #16]
 800d534:	f003 0304 	and.w	r3, r3, #4
 800d538:	2b04      	cmp	r3, #4
 800d53a:	d122      	bne.n	800d582 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	68db      	ldr	r3, [r3, #12]
 800d542:	f003 0304 	and.w	r3, r3, #4
 800d546:	2b04      	cmp	r3, #4
 800d548:	d11b      	bne.n	800d582 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f06f 0204 	mvn.w	r2, #4
 800d552:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2202      	movs	r2, #2
 800d558:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	699b      	ldr	r3, [r3, #24]
 800d560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d564:	2b00      	cmp	r3, #0
 800d566:	d003      	beq.n	800d570 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f000 f9eb 	bl	800d944 <HAL_TIM_IC_CaptureCallback>
 800d56e:	e005      	b.n	800d57c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f000 f9dd 	bl	800d930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f000 f9ee 	bl	800d958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2200      	movs	r2, #0
 800d580:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	691b      	ldr	r3, [r3, #16]
 800d588:	f003 0308 	and.w	r3, r3, #8
 800d58c:	2b08      	cmp	r3, #8
 800d58e:	d122      	bne.n	800d5d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	68db      	ldr	r3, [r3, #12]
 800d596:	f003 0308 	and.w	r3, r3, #8
 800d59a:	2b08      	cmp	r3, #8
 800d59c:	d11b      	bne.n	800d5d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	f06f 0208 	mvn.w	r2, #8
 800d5a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2204      	movs	r2, #4
 800d5ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	69db      	ldr	r3, [r3, #28]
 800d5b4:	f003 0303 	and.w	r3, r3, #3
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d003      	beq.n	800d5c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f000 f9c1 	bl	800d944 <HAL_TIM_IC_CaptureCallback>
 800d5c2:	e005      	b.n	800d5d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f000 f9b3 	bl	800d930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f000 f9c4 	bl	800d958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	691b      	ldr	r3, [r3, #16]
 800d5dc:	f003 0310 	and.w	r3, r3, #16
 800d5e0:	2b10      	cmp	r3, #16
 800d5e2:	d122      	bne.n	800d62a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	68db      	ldr	r3, [r3, #12]
 800d5ea:	f003 0310 	and.w	r3, r3, #16
 800d5ee:	2b10      	cmp	r3, #16
 800d5f0:	d11b      	bne.n	800d62a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f06f 0210 	mvn.w	r2, #16
 800d5fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2208      	movs	r2, #8
 800d600:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	69db      	ldr	r3, [r3, #28]
 800d608:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d003      	beq.n	800d618 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f000 f997 	bl	800d944 <HAL_TIM_IC_CaptureCallback>
 800d616:	e005      	b.n	800d624 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f000 f989 	bl	800d930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f000 f99a 	bl	800d958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2200      	movs	r2, #0
 800d628:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	691b      	ldr	r3, [r3, #16]
 800d630:	f003 0301 	and.w	r3, r3, #1
 800d634:	2b01      	cmp	r3, #1
 800d636:	d10e      	bne.n	800d656 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	68db      	ldr	r3, [r3, #12]
 800d63e:	f003 0301 	and.w	r3, r3, #1
 800d642:	2b01      	cmp	r3, #1
 800d644:	d107      	bne.n	800d656 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f06f 0201 	mvn.w	r2, #1
 800d64e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f7f4 fe01 	bl	8002258 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	691b      	ldr	r3, [r3, #16]
 800d65c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d660:	2b80      	cmp	r3, #128	; 0x80
 800d662:	d10e      	bne.n	800d682 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	68db      	ldr	r3, [r3, #12]
 800d66a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d66e:	2b80      	cmp	r3, #128	; 0x80
 800d670:	d107      	bne.n	800d682 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d67a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f000 fd49 	bl	800e114 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	691b      	ldr	r3, [r3, #16]
 800d688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d68c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d690:	d10e      	bne.n	800d6b0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	68db      	ldr	r3, [r3, #12]
 800d698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d69c:	2b80      	cmp	r3, #128	; 0x80
 800d69e:	d107      	bne.n	800d6b0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d6a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f000 fd3c 	bl	800e128 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	691b      	ldr	r3, [r3, #16]
 800d6b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6ba:	2b40      	cmp	r3, #64	; 0x40
 800d6bc:	d10e      	bne.n	800d6dc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	68db      	ldr	r3, [r3, #12]
 800d6c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6c8:	2b40      	cmp	r3, #64	; 0x40
 800d6ca:	d107      	bne.n	800d6dc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d6d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f000 f948 	bl	800d96c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	691b      	ldr	r3, [r3, #16]
 800d6e2:	f003 0320 	and.w	r3, r3, #32
 800d6e6:	2b20      	cmp	r3, #32
 800d6e8:	d10e      	bne.n	800d708 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	f003 0320 	and.w	r3, r3, #32
 800d6f4:	2b20      	cmp	r3, #32
 800d6f6:	d107      	bne.n	800d708 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	f06f 0220 	mvn.w	r2, #32
 800d700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f000 fcfc 	bl	800e100 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d708:	bf00      	nop
 800d70a:	3708      	adds	r7, #8
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b084      	sub	sp, #16
 800d714:	af00      	add	r7, sp, #0
 800d716:	60f8      	str	r0, [r7, #12]
 800d718:	60b9      	str	r1, [r7, #8]
 800d71a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d722:	2b01      	cmp	r3, #1
 800d724:	d101      	bne.n	800d72a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d726:	2302      	movs	r3, #2
 800d728:	e0fd      	b.n	800d926 <HAL_TIM_PWM_ConfigChannel+0x216>
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2201      	movs	r2, #1
 800d72e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2b14      	cmp	r3, #20
 800d736:	f200 80f0 	bhi.w	800d91a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800d73a:	a201      	add	r2, pc, #4	; (adr r2, 800d740 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800d73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d740:	0800d795 	.word	0x0800d795
 800d744:	0800d91b 	.word	0x0800d91b
 800d748:	0800d91b 	.word	0x0800d91b
 800d74c:	0800d91b 	.word	0x0800d91b
 800d750:	0800d7d5 	.word	0x0800d7d5
 800d754:	0800d91b 	.word	0x0800d91b
 800d758:	0800d91b 	.word	0x0800d91b
 800d75c:	0800d91b 	.word	0x0800d91b
 800d760:	0800d817 	.word	0x0800d817
 800d764:	0800d91b 	.word	0x0800d91b
 800d768:	0800d91b 	.word	0x0800d91b
 800d76c:	0800d91b 	.word	0x0800d91b
 800d770:	0800d857 	.word	0x0800d857
 800d774:	0800d91b 	.word	0x0800d91b
 800d778:	0800d91b 	.word	0x0800d91b
 800d77c:	0800d91b 	.word	0x0800d91b
 800d780:	0800d899 	.word	0x0800d899
 800d784:	0800d91b 	.word	0x0800d91b
 800d788:	0800d91b 	.word	0x0800d91b
 800d78c:	0800d91b 	.word	0x0800d91b
 800d790:	0800d8d9 	.word	0x0800d8d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	68b9      	ldr	r1, [r7, #8]
 800d79a:	4618      	mov	r0, r3
 800d79c:	f000 f954 	bl	800da48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	699a      	ldr	r2, [r3, #24]
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f042 0208 	orr.w	r2, r2, #8
 800d7ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	699a      	ldr	r2, [r3, #24]
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f022 0204 	bic.w	r2, r2, #4
 800d7be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	6999      	ldr	r1, [r3, #24]
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	691a      	ldr	r2, [r3, #16]
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	430a      	orrs	r2, r1
 800d7d0:	619a      	str	r2, [r3, #24]
      break;
 800d7d2:	e0a3      	b.n	800d91c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	68b9      	ldr	r1, [r7, #8]
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f000 f9b0 	bl	800db40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	699a      	ldr	r2, [r3, #24]
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d7ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	699a      	ldr	r2, [r3, #24]
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d7fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	6999      	ldr	r1, [r3, #24]
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	691b      	ldr	r3, [r3, #16]
 800d80a:	021a      	lsls	r2, r3, #8
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	430a      	orrs	r2, r1
 800d812:	619a      	str	r2, [r3, #24]
      break;
 800d814:	e082      	b.n	800d91c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	68b9      	ldr	r1, [r7, #8]
 800d81c:	4618      	mov	r0, r3
 800d81e:	f000 fa09 	bl	800dc34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	69da      	ldr	r2, [r3, #28]
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	f042 0208 	orr.w	r2, r2, #8
 800d830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	69da      	ldr	r2, [r3, #28]
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f022 0204 	bic.w	r2, r2, #4
 800d840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	69d9      	ldr	r1, [r3, #28]
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	691a      	ldr	r2, [r3, #16]
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	430a      	orrs	r2, r1
 800d852:	61da      	str	r2, [r3, #28]
      break;
 800d854:	e062      	b.n	800d91c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	68b9      	ldr	r1, [r7, #8]
 800d85c:	4618      	mov	r0, r3
 800d85e:	f000 fa61 	bl	800dd24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	69da      	ldr	r2, [r3, #28]
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	69da      	ldr	r2, [r3, #28]
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	69d9      	ldr	r1, [r3, #28]
 800d888:	68bb      	ldr	r3, [r7, #8]
 800d88a:	691b      	ldr	r3, [r3, #16]
 800d88c:	021a      	lsls	r2, r3, #8
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	430a      	orrs	r2, r1
 800d894:	61da      	str	r2, [r3, #28]
      break;
 800d896:	e041      	b.n	800d91c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	68b9      	ldr	r1, [r7, #8]
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f000 fa9e 	bl	800dde0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f042 0208 	orr.w	r2, r2, #8
 800d8b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	f022 0204 	bic.w	r2, r2, #4
 800d8c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	691a      	ldr	r2, [r3, #16]
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	430a      	orrs	r2, r1
 800d8d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d8d6:	e021      	b.n	800d91c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	68b9      	ldr	r1, [r7, #8]
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f000 fad6 	bl	800de90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d8f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d902:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	691b      	ldr	r3, [r3, #16]
 800d90e:	021a      	lsls	r2, r3, #8
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	430a      	orrs	r2, r1
 800d916:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d918:	e000      	b.n	800d91c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800d91a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2200      	movs	r2, #0
 800d920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d924:	2300      	movs	r3, #0
}
 800d926:	4618      	mov	r0, r3
 800d928:	3710      	adds	r7, #16
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}
 800d92e:	bf00      	nop

0800d930 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d930:	b480      	push	{r7}
 800d932:	b083      	sub	sp, #12
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d938:	bf00      	nop
 800d93a:	370c      	adds	r7, #12
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	4770      	bx	lr

0800d944 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d944:	b480      	push	{r7}
 800d946:	b083      	sub	sp, #12
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d94c:	bf00      	nop
 800d94e:	370c      	adds	r7, #12
 800d950:	46bd      	mov	sp, r7
 800d952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d956:	4770      	bx	lr

0800d958 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d958:	b480      	push	{r7}
 800d95a:	b083      	sub	sp, #12
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d960:	bf00      	nop
 800d962:	370c      	adds	r7, #12
 800d964:	46bd      	mov	sp, r7
 800d966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96a:	4770      	bx	lr

0800d96c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b083      	sub	sp, #12
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d974:	bf00      	nop
 800d976:	370c      	adds	r7, #12
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr

0800d980 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d980:	b480      	push	{r7}
 800d982:	b085      	sub	sp, #20
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	4a2a      	ldr	r2, [pc, #168]	; (800da3c <TIM_Base_SetConfig+0xbc>)
 800d994:	4293      	cmp	r3, r2
 800d996:	d003      	beq.n	800d9a0 <TIM_Base_SetConfig+0x20>
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d99e:	d108      	bne.n	800d9b2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	685b      	ldr	r3, [r3, #4]
 800d9ac:	68fa      	ldr	r2, [r7, #12]
 800d9ae:	4313      	orrs	r3, r2
 800d9b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	4a21      	ldr	r2, [pc, #132]	; (800da3c <TIM_Base_SetConfig+0xbc>)
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	d00b      	beq.n	800d9d2 <TIM_Base_SetConfig+0x52>
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d9c0:	d007      	beq.n	800d9d2 <TIM_Base_SetConfig+0x52>
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	4a1e      	ldr	r2, [pc, #120]	; (800da40 <TIM_Base_SetConfig+0xc0>)
 800d9c6:	4293      	cmp	r3, r2
 800d9c8:	d003      	beq.n	800d9d2 <TIM_Base_SetConfig+0x52>
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	4a1d      	ldr	r2, [pc, #116]	; (800da44 <TIM_Base_SetConfig+0xc4>)
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d108      	bne.n	800d9e4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d9d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	68db      	ldr	r3, [r3, #12]
 800d9de:	68fa      	ldr	r2, [r7, #12]
 800d9e0:	4313      	orrs	r3, r2
 800d9e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	695b      	ldr	r3, [r3, #20]
 800d9ee:	4313      	orrs	r3, r2
 800d9f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	68fa      	ldr	r2, [r7, #12]
 800d9f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	689a      	ldr	r2, [r3, #8]
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	681a      	ldr	r2, [r3, #0]
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	4a0c      	ldr	r2, [pc, #48]	; (800da3c <TIM_Base_SetConfig+0xbc>)
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d007      	beq.n	800da20 <TIM_Base_SetConfig+0xa0>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	4a0b      	ldr	r2, [pc, #44]	; (800da40 <TIM_Base_SetConfig+0xc0>)
 800da14:	4293      	cmp	r3, r2
 800da16:	d003      	beq.n	800da20 <TIM_Base_SetConfig+0xa0>
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	4a0a      	ldr	r2, [pc, #40]	; (800da44 <TIM_Base_SetConfig+0xc4>)
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d103      	bne.n	800da28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	691a      	ldr	r2, [r3, #16]
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2201      	movs	r2, #1
 800da2c:	615a      	str	r2, [r3, #20]
}
 800da2e:	bf00      	nop
 800da30:	3714      	adds	r7, #20
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr
 800da3a:	bf00      	nop
 800da3c:	40012c00 	.word	0x40012c00
 800da40:	40014000 	.word	0x40014000
 800da44:	40014400 	.word	0x40014400

0800da48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800da48:	b480      	push	{r7}
 800da4a:	b087      	sub	sp, #28
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6a1b      	ldr	r3, [r3, #32]
 800da56:	f023 0201 	bic.w	r2, r3, #1
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6a1b      	ldr	r3, [r3, #32]
 800da62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	699b      	ldr	r3, [r3, #24]
 800da6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800da76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	f023 0303 	bic.w	r3, r3, #3
 800da82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	68fa      	ldr	r2, [r7, #12]
 800da8a:	4313      	orrs	r3, r2
 800da8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	f023 0302 	bic.w	r3, r3, #2
 800da94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	689b      	ldr	r3, [r3, #8]
 800da9a:	697a      	ldr	r2, [r7, #20]
 800da9c:	4313      	orrs	r3, r2
 800da9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	4a24      	ldr	r2, [pc, #144]	; (800db34 <TIM_OC1_SetConfig+0xec>)
 800daa4:	4293      	cmp	r3, r2
 800daa6:	d007      	beq.n	800dab8 <TIM_OC1_SetConfig+0x70>
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	4a23      	ldr	r2, [pc, #140]	; (800db38 <TIM_OC1_SetConfig+0xf0>)
 800daac:	4293      	cmp	r3, r2
 800daae:	d003      	beq.n	800dab8 <TIM_OC1_SetConfig+0x70>
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	4a22      	ldr	r2, [pc, #136]	; (800db3c <TIM_OC1_SetConfig+0xf4>)
 800dab4:	4293      	cmp	r3, r2
 800dab6:	d10c      	bne.n	800dad2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	f023 0308 	bic.w	r3, r3, #8
 800dabe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	68db      	ldr	r3, [r3, #12]
 800dac4:	697a      	ldr	r2, [r7, #20]
 800dac6:	4313      	orrs	r3, r2
 800dac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	f023 0304 	bic.w	r3, r3, #4
 800dad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	4a17      	ldr	r2, [pc, #92]	; (800db34 <TIM_OC1_SetConfig+0xec>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d007      	beq.n	800daea <TIM_OC1_SetConfig+0xa2>
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	4a16      	ldr	r2, [pc, #88]	; (800db38 <TIM_OC1_SetConfig+0xf0>)
 800dade:	4293      	cmp	r3, r2
 800dae0:	d003      	beq.n	800daea <TIM_OC1_SetConfig+0xa2>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	4a15      	ldr	r2, [pc, #84]	; (800db3c <TIM_OC1_SetConfig+0xf4>)
 800dae6:	4293      	cmp	r3, r2
 800dae8:	d111      	bne.n	800db0e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800daf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800daf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	695b      	ldr	r3, [r3, #20]
 800dafe:	693a      	ldr	r2, [r7, #16]
 800db00:	4313      	orrs	r3, r2
 800db02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	699b      	ldr	r3, [r3, #24]
 800db08:	693a      	ldr	r2, [r7, #16]
 800db0a:	4313      	orrs	r3, r2
 800db0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	693a      	ldr	r2, [r7, #16]
 800db12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	68fa      	ldr	r2, [r7, #12]
 800db18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	685a      	ldr	r2, [r3, #4]
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	697a      	ldr	r2, [r7, #20]
 800db26:	621a      	str	r2, [r3, #32]
}
 800db28:	bf00      	nop
 800db2a:	371c      	adds	r7, #28
 800db2c:	46bd      	mov	sp, r7
 800db2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db32:	4770      	bx	lr
 800db34:	40012c00 	.word	0x40012c00
 800db38:	40014000 	.word	0x40014000
 800db3c:	40014400 	.word	0x40014400

0800db40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800db40:	b480      	push	{r7}
 800db42:	b087      	sub	sp, #28
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6a1b      	ldr	r3, [r3, #32]
 800db4e:	f023 0210 	bic.w	r2, r3, #16
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6a1b      	ldr	r3, [r3, #32]
 800db5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	685b      	ldr	r3, [r3, #4]
 800db60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	699b      	ldr	r3, [r3, #24]
 800db66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800db6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	021b      	lsls	r3, r3, #8
 800db82:	68fa      	ldr	r2, [r7, #12]
 800db84:	4313      	orrs	r3, r2
 800db86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	f023 0320 	bic.w	r3, r3, #32
 800db8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	689b      	ldr	r3, [r3, #8]
 800db94:	011b      	lsls	r3, r3, #4
 800db96:	697a      	ldr	r2, [r7, #20]
 800db98:	4313      	orrs	r3, r2
 800db9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	4a22      	ldr	r2, [pc, #136]	; (800dc28 <TIM_OC2_SetConfig+0xe8>)
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d10d      	bne.n	800dbc0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dbaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	68db      	ldr	r3, [r3, #12]
 800dbb0:	011b      	lsls	r3, r3, #4
 800dbb2:	697a      	ldr	r2, [r7, #20]
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	4a19      	ldr	r2, [pc, #100]	; (800dc28 <TIM_OC2_SetConfig+0xe8>)
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	d007      	beq.n	800dbd8 <TIM_OC2_SetConfig+0x98>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	4a18      	ldr	r2, [pc, #96]	; (800dc2c <TIM_OC2_SetConfig+0xec>)
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d003      	beq.n	800dbd8 <TIM_OC2_SetConfig+0x98>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	4a17      	ldr	r2, [pc, #92]	; (800dc30 <TIM_OC2_SetConfig+0xf0>)
 800dbd4:	4293      	cmp	r3, r2
 800dbd6:	d113      	bne.n	800dc00 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dbde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dbe6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	695b      	ldr	r3, [r3, #20]
 800dbec:	009b      	lsls	r3, r3, #2
 800dbee:	693a      	ldr	r2, [r7, #16]
 800dbf0:	4313      	orrs	r3, r2
 800dbf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	699b      	ldr	r3, [r3, #24]
 800dbf8:	009b      	lsls	r3, r3, #2
 800dbfa:	693a      	ldr	r2, [r7, #16]
 800dbfc:	4313      	orrs	r3, r2
 800dbfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	693a      	ldr	r2, [r7, #16]
 800dc04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	68fa      	ldr	r2, [r7, #12]
 800dc0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	685a      	ldr	r2, [r3, #4]
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	697a      	ldr	r2, [r7, #20]
 800dc18:	621a      	str	r2, [r3, #32]
}
 800dc1a:	bf00      	nop
 800dc1c:	371c      	adds	r7, #28
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc24:	4770      	bx	lr
 800dc26:	bf00      	nop
 800dc28:	40012c00 	.word	0x40012c00
 800dc2c:	40014000 	.word	0x40014000
 800dc30:	40014400 	.word	0x40014400

0800dc34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dc34:	b480      	push	{r7}
 800dc36:	b087      	sub	sp, #28
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6a1b      	ldr	r3, [r3, #32]
 800dc42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6a1b      	ldr	r3, [r3, #32]
 800dc4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	685b      	ldr	r3, [r3, #4]
 800dc54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	69db      	ldr	r3, [r3, #28]
 800dc5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dc62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f023 0303 	bic.w	r3, r3, #3
 800dc6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	68fa      	ldr	r2, [r7, #12]
 800dc76:	4313      	orrs	r3, r2
 800dc78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dc80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	689b      	ldr	r3, [r3, #8]
 800dc86:	021b      	lsls	r3, r3, #8
 800dc88:	697a      	ldr	r2, [r7, #20]
 800dc8a:	4313      	orrs	r3, r2
 800dc8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	4a21      	ldr	r2, [pc, #132]	; (800dd18 <TIM_OC3_SetConfig+0xe4>)
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d10d      	bne.n	800dcb2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dc9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	68db      	ldr	r3, [r3, #12]
 800dca2:	021b      	lsls	r3, r3, #8
 800dca4:	697a      	ldr	r2, [r7, #20]
 800dca6:	4313      	orrs	r3, r2
 800dca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dcb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	4a18      	ldr	r2, [pc, #96]	; (800dd18 <TIM_OC3_SetConfig+0xe4>)
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d007      	beq.n	800dcca <TIM_OC3_SetConfig+0x96>
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	4a17      	ldr	r2, [pc, #92]	; (800dd1c <TIM_OC3_SetConfig+0xe8>)
 800dcbe:	4293      	cmp	r3, r2
 800dcc0:	d003      	beq.n	800dcca <TIM_OC3_SetConfig+0x96>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	4a16      	ldr	r2, [pc, #88]	; (800dd20 <TIM_OC3_SetConfig+0xec>)
 800dcc6:	4293      	cmp	r3, r2
 800dcc8:	d113      	bne.n	800dcf2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dcd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dcd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	695b      	ldr	r3, [r3, #20]
 800dcde:	011b      	lsls	r3, r3, #4
 800dce0:	693a      	ldr	r2, [r7, #16]
 800dce2:	4313      	orrs	r3, r2
 800dce4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	699b      	ldr	r3, [r3, #24]
 800dcea:	011b      	lsls	r3, r3, #4
 800dcec:	693a      	ldr	r2, [r7, #16]
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	693a      	ldr	r2, [r7, #16]
 800dcf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	68fa      	ldr	r2, [r7, #12]
 800dcfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	685a      	ldr	r2, [r3, #4]
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	697a      	ldr	r2, [r7, #20]
 800dd0a:	621a      	str	r2, [r3, #32]
}
 800dd0c:	bf00      	nop
 800dd0e:	371c      	adds	r7, #28
 800dd10:	46bd      	mov	sp, r7
 800dd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd16:	4770      	bx	lr
 800dd18:	40012c00 	.word	0x40012c00
 800dd1c:	40014000 	.word	0x40014000
 800dd20:	40014400 	.word	0x40014400

0800dd24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dd24:	b480      	push	{r7}
 800dd26:	b087      	sub	sp, #28
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
 800dd2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6a1b      	ldr	r3, [r3, #32]
 800dd32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	6a1b      	ldr	r3, [r3, #32]
 800dd3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	69db      	ldr	r3, [r3, #28]
 800dd4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dd52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dd56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dd5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	021b      	lsls	r3, r3, #8
 800dd66:	68fa      	ldr	r2, [r7, #12]
 800dd68:	4313      	orrs	r3, r2
 800dd6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dd72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	689b      	ldr	r3, [r3, #8]
 800dd78:	031b      	lsls	r3, r3, #12
 800dd7a:	693a      	ldr	r2, [r7, #16]
 800dd7c:	4313      	orrs	r3, r2
 800dd7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	4a14      	ldr	r2, [pc, #80]	; (800ddd4 <TIM_OC4_SetConfig+0xb0>)
 800dd84:	4293      	cmp	r3, r2
 800dd86:	d007      	beq.n	800dd98 <TIM_OC4_SetConfig+0x74>
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	4a13      	ldr	r2, [pc, #76]	; (800ddd8 <TIM_OC4_SetConfig+0xb4>)
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d003      	beq.n	800dd98 <TIM_OC4_SetConfig+0x74>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	4a12      	ldr	r2, [pc, #72]	; (800dddc <TIM_OC4_SetConfig+0xb8>)
 800dd94:	4293      	cmp	r3, r2
 800dd96:	d109      	bne.n	800ddac <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dd9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	695b      	ldr	r3, [r3, #20]
 800dda4:	019b      	lsls	r3, r3, #6
 800dda6:	697a      	ldr	r2, [r7, #20]
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	697a      	ldr	r2, [r7, #20]
 800ddb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	68fa      	ldr	r2, [r7, #12]
 800ddb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	685a      	ldr	r2, [r3, #4]
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	693a      	ldr	r2, [r7, #16]
 800ddc4:	621a      	str	r2, [r3, #32]
}
 800ddc6:	bf00      	nop
 800ddc8:	371c      	adds	r7, #28
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd0:	4770      	bx	lr
 800ddd2:	bf00      	nop
 800ddd4:	40012c00 	.word	0x40012c00
 800ddd8:	40014000 	.word	0x40014000
 800dddc:	40014400 	.word	0x40014400

0800dde0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800dde0:	b480      	push	{r7}
 800dde2:	b087      	sub	sp, #28
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6a1b      	ldr	r3, [r3, #32]
 800ddee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6a1b      	ldr	r3, [r3, #32]
 800ddfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	685b      	ldr	r3, [r3, #4]
 800de00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800de0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	68fa      	ldr	r2, [r7, #12]
 800de1a:	4313      	orrs	r3, r2
 800de1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800de24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	689b      	ldr	r3, [r3, #8]
 800de2a:	041b      	lsls	r3, r3, #16
 800de2c:	693a      	ldr	r2, [r7, #16]
 800de2e:	4313      	orrs	r3, r2
 800de30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	4a13      	ldr	r2, [pc, #76]	; (800de84 <TIM_OC5_SetConfig+0xa4>)
 800de36:	4293      	cmp	r3, r2
 800de38:	d007      	beq.n	800de4a <TIM_OC5_SetConfig+0x6a>
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	4a12      	ldr	r2, [pc, #72]	; (800de88 <TIM_OC5_SetConfig+0xa8>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	d003      	beq.n	800de4a <TIM_OC5_SetConfig+0x6a>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	4a11      	ldr	r2, [pc, #68]	; (800de8c <TIM_OC5_SetConfig+0xac>)
 800de46:	4293      	cmp	r3, r2
 800de48:	d109      	bne.n	800de5e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800de50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	695b      	ldr	r3, [r3, #20]
 800de56:	021b      	lsls	r3, r3, #8
 800de58:	697a      	ldr	r2, [r7, #20]
 800de5a:	4313      	orrs	r3, r2
 800de5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	697a      	ldr	r2, [r7, #20]
 800de62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	68fa      	ldr	r2, [r7, #12]
 800de68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	685a      	ldr	r2, [r3, #4]
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	693a      	ldr	r2, [r7, #16]
 800de76:	621a      	str	r2, [r3, #32]
}
 800de78:	bf00      	nop
 800de7a:	371c      	adds	r7, #28
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr
 800de84:	40012c00 	.word	0x40012c00
 800de88:	40014000 	.word	0x40014000
 800de8c:	40014400 	.word	0x40014400

0800de90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800de90:	b480      	push	{r7}
 800de92:	b087      	sub	sp, #28
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6a1b      	ldr	r3, [r3, #32]
 800de9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	6a1b      	ldr	r3, [r3, #32]
 800deaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	685b      	ldr	r3, [r3, #4]
 800deb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800deb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800debe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	021b      	lsls	r3, r3, #8
 800deca:	68fa      	ldr	r2, [r7, #12]
 800decc:	4313      	orrs	r3, r2
 800dece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ded6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	689b      	ldr	r3, [r3, #8]
 800dedc:	051b      	lsls	r3, r3, #20
 800dede:	693a      	ldr	r2, [r7, #16]
 800dee0:	4313      	orrs	r3, r2
 800dee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	4a14      	ldr	r2, [pc, #80]	; (800df38 <TIM_OC6_SetConfig+0xa8>)
 800dee8:	4293      	cmp	r3, r2
 800deea:	d007      	beq.n	800defc <TIM_OC6_SetConfig+0x6c>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	4a13      	ldr	r2, [pc, #76]	; (800df3c <TIM_OC6_SetConfig+0xac>)
 800def0:	4293      	cmp	r3, r2
 800def2:	d003      	beq.n	800defc <TIM_OC6_SetConfig+0x6c>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	4a12      	ldr	r2, [pc, #72]	; (800df40 <TIM_OC6_SetConfig+0xb0>)
 800def8:	4293      	cmp	r3, r2
 800defa:	d109      	bne.n	800df10 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800df02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	695b      	ldr	r3, [r3, #20]
 800df08:	029b      	lsls	r3, r3, #10
 800df0a:	697a      	ldr	r2, [r7, #20]
 800df0c:	4313      	orrs	r3, r2
 800df0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	697a      	ldr	r2, [r7, #20]
 800df14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	68fa      	ldr	r2, [r7, #12]
 800df1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	685a      	ldr	r2, [r3, #4]
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	693a      	ldr	r2, [r7, #16]
 800df28:	621a      	str	r2, [r3, #32]
}
 800df2a:	bf00      	nop
 800df2c:	371c      	adds	r7, #28
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr
 800df36:	bf00      	nop
 800df38:	40012c00 	.word	0x40012c00
 800df3c:	40014000 	.word	0x40014000
 800df40:	40014400 	.word	0x40014400

0800df44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800df44:	b480      	push	{r7}
 800df46:	b085      	sub	sp, #20
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df54:	2b01      	cmp	r3, #1
 800df56:	d101      	bne.n	800df5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800df58:	2302      	movs	r3, #2
 800df5a:	e04f      	b.n	800dffc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2201      	movs	r2, #1
 800df60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2202      	movs	r2, #2
 800df68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	689b      	ldr	r3, [r3, #8]
 800df7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4a21      	ldr	r2, [pc, #132]	; (800e008 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800df82:	4293      	cmp	r3, r2
 800df84:	d108      	bne.n	800df98 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800df8c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	685b      	ldr	r3, [r3, #4]
 800df92:	68fa      	ldr	r2, [r7, #12]
 800df94:	4313      	orrs	r3, r2
 800df96:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	68fa      	ldr	r2, [r7, #12]
 800dfa6:	4313      	orrs	r3, r2
 800dfa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	68fa      	ldr	r2, [r7, #12]
 800dfb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	4a14      	ldr	r2, [pc, #80]	; (800e008 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800dfb8:	4293      	cmp	r3, r2
 800dfba:	d009      	beq.n	800dfd0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dfc4:	d004      	beq.n	800dfd0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	4a10      	ldr	r2, [pc, #64]	; (800e00c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d10c      	bne.n	800dfea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dfd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	689b      	ldr	r3, [r3, #8]
 800dfdc:	68ba      	ldr	r2, [r7, #8]
 800dfde:	4313      	orrs	r3, r2
 800dfe0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	68ba      	ldr	r2, [r7, #8]
 800dfe8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2201      	movs	r2, #1
 800dfee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2200      	movs	r2, #0
 800dff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dffa:	2300      	movs	r3, #0
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3714      	adds	r7, #20
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr
 800e008:	40012c00 	.word	0x40012c00
 800e00c:	40014000 	.word	0x40014000

0800e010 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e010:	b480      	push	{r7}
 800e012:	b085      	sub	sp, #20
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
 800e018:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e01a:	2300      	movs	r3, #0
 800e01c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e024:	2b01      	cmp	r3, #1
 800e026:	d101      	bne.n	800e02c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e028:	2302      	movs	r3, #2
 800e02a:	e060      	b.n	800e0ee <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2201      	movs	r2, #1
 800e030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	68db      	ldr	r3, [r3, #12]
 800e03e:	4313      	orrs	r3, r2
 800e040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	689b      	ldr	r3, [r3, #8]
 800e04c:	4313      	orrs	r3, r2
 800e04e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	4313      	orrs	r3, r2
 800e05c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	4313      	orrs	r3, r2
 800e06a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	691b      	ldr	r3, [r3, #16]
 800e076:	4313      	orrs	r3, r2
 800e078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	695b      	ldr	r3, [r3, #20]
 800e084:	4313      	orrs	r3, r2
 800e086:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e092:	4313      	orrs	r3, r2
 800e094:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	699b      	ldr	r3, [r3, #24]
 800e0a0:	041b      	lsls	r3, r3, #16
 800e0a2:	4313      	orrs	r3, r2
 800e0a4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	4a14      	ldr	r2, [pc, #80]	; (800e0fc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	d115      	bne.n	800e0dc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ba:	051b      	lsls	r3, r3, #20
 800e0bc:	4313      	orrs	r3, r2
 800e0be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	69db      	ldr	r3, [r3, #28]
 800e0ca:	4313      	orrs	r3, r2
 800e0cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	6a1b      	ldr	r3, [r3, #32]
 800e0d8:	4313      	orrs	r3, r2
 800e0da:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	68fa      	ldr	r2, [r7, #12]
 800e0e2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e0ec:	2300      	movs	r3, #0
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3714      	adds	r7, #20
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f8:	4770      	bx	lr
 800e0fa:	bf00      	nop
 800e0fc:	40012c00 	.word	0x40012c00

0800e100 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e100:	b480      	push	{r7}
 800e102:	b083      	sub	sp, #12
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e108:	bf00      	nop
 800e10a:	370c      	adds	r7, #12
 800e10c:	46bd      	mov	sp, r7
 800e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e112:	4770      	bx	lr

0800e114 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e114:	b480      	push	{r7}
 800e116:	b083      	sub	sp, #12
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e11c:	bf00      	nop
 800e11e:	370c      	adds	r7, #12
 800e120:	46bd      	mov	sp, r7
 800e122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e126:	4770      	bx	lr

0800e128 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e128:	b480      	push	{r7}
 800e12a:	b083      	sub	sp, #12
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e130:	bf00      	nop
 800e132:	370c      	adds	r7, #12
 800e134:	46bd      	mov	sp, r7
 800e136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13a:	4770      	bx	lr

0800e13c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b082      	sub	sp, #8
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d101      	bne.n	800e14e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e14a:	2301      	movs	r3, #1
 800e14c:	e040      	b.n	800e1d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e152:	2b00      	cmp	r3, #0
 800e154:	d106      	bne.n	800e164 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2200      	movs	r2, #0
 800e15a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f7f4 fc50 	bl	8002a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2224      	movs	r2, #36	; 0x24
 800e168:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	681a      	ldr	r2, [r3, #0]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	f022 0201 	bic.w	r2, r2, #1
 800e178:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f000 f82c 	bl	800e1d8 <UART_SetConfig>
 800e180:	4603      	mov	r3, r0
 800e182:	2b01      	cmp	r3, #1
 800e184:	d101      	bne.n	800e18a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800e186:	2301      	movs	r3, #1
 800e188:	e022      	b.n	800e1d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d002      	beq.n	800e198 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f000 fa2c 	bl	800e5f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	685a      	ldr	r2, [r3, #4]
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e1a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	689a      	ldr	r2, [r3, #8]
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e1b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	681a      	ldr	r2, [r3, #0]
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	f042 0201 	orr.w	r2, r2, #1
 800e1c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	f000 fab3 	bl	800e734 <UART_CheckIdleState>
 800e1ce:	4603      	mov	r3, r0
}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	3708      	adds	r7, #8
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}

0800e1d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e1d8:	b5b0      	push	{r4, r5, r7, lr}
 800e1da:	b088      	sub	sp, #32
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	689a      	ldr	r2, [r3, #8]
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	691b      	ldr	r3, [r3, #16]
 800e1ec:	431a      	orrs	r2, r3
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	695b      	ldr	r3, [r3, #20]
 800e1f2:	431a      	orrs	r2, r3
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	69db      	ldr	r3, [r3, #28]
 800e1f8:	4313      	orrs	r3, r2
 800e1fa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	681a      	ldr	r2, [r3, #0]
 800e202:	4baf      	ldr	r3, [pc, #700]	; (800e4c0 <UART_SetConfig+0x2e8>)
 800e204:	4013      	ands	r3, r2
 800e206:	687a      	ldr	r2, [r7, #4]
 800e208:	6812      	ldr	r2, [r2, #0]
 800e20a:	69f9      	ldr	r1, [r7, #28]
 800e20c:	430b      	orrs	r3, r1
 800e20e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	685b      	ldr	r3, [r3, #4]
 800e216:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	68da      	ldr	r2, [r3, #12]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	430a      	orrs	r2, r1
 800e224:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	699b      	ldr	r3, [r3, #24]
 800e22a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	4aa4      	ldr	r2, [pc, #656]	; (800e4c4 <UART_SetConfig+0x2ec>)
 800e232:	4293      	cmp	r3, r2
 800e234:	d004      	beq.n	800e240 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6a1b      	ldr	r3, [r3, #32]
 800e23a:	69fa      	ldr	r2, [r7, #28]
 800e23c:	4313      	orrs	r3, r2
 800e23e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	689b      	ldr	r3, [r3, #8]
 800e246:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	69fa      	ldr	r2, [r7, #28]
 800e250:	430a      	orrs	r2, r1
 800e252:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	4a9b      	ldr	r2, [pc, #620]	; (800e4c8 <UART_SetConfig+0x2f0>)
 800e25a:	4293      	cmp	r3, r2
 800e25c:	d121      	bne.n	800e2a2 <UART_SetConfig+0xca>
 800e25e:	4b9b      	ldr	r3, [pc, #620]	; (800e4cc <UART_SetConfig+0x2f4>)
 800e260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e264:	f003 0303 	and.w	r3, r3, #3
 800e268:	2b03      	cmp	r3, #3
 800e26a:	d817      	bhi.n	800e29c <UART_SetConfig+0xc4>
 800e26c:	a201      	add	r2, pc, #4	; (adr r2, 800e274 <UART_SetConfig+0x9c>)
 800e26e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e272:	bf00      	nop
 800e274:	0800e285 	.word	0x0800e285
 800e278:	0800e291 	.word	0x0800e291
 800e27c:	0800e28b 	.word	0x0800e28b
 800e280:	0800e297 	.word	0x0800e297
 800e284:	2301      	movs	r3, #1
 800e286:	76fb      	strb	r3, [r7, #27]
 800e288:	e070      	b.n	800e36c <UART_SetConfig+0x194>
 800e28a:	2302      	movs	r3, #2
 800e28c:	76fb      	strb	r3, [r7, #27]
 800e28e:	e06d      	b.n	800e36c <UART_SetConfig+0x194>
 800e290:	2304      	movs	r3, #4
 800e292:	76fb      	strb	r3, [r7, #27]
 800e294:	e06a      	b.n	800e36c <UART_SetConfig+0x194>
 800e296:	2308      	movs	r3, #8
 800e298:	76fb      	strb	r3, [r7, #27]
 800e29a:	e067      	b.n	800e36c <UART_SetConfig+0x194>
 800e29c:	2310      	movs	r3, #16
 800e29e:	76fb      	strb	r3, [r7, #27]
 800e2a0:	e064      	b.n	800e36c <UART_SetConfig+0x194>
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4a8a      	ldr	r2, [pc, #552]	; (800e4d0 <UART_SetConfig+0x2f8>)
 800e2a8:	4293      	cmp	r3, r2
 800e2aa:	d132      	bne.n	800e312 <UART_SetConfig+0x13a>
 800e2ac:	4b87      	ldr	r3, [pc, #540]	; (800e4cc <UART_SetConfig+0x2f4>)
 800e2ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2b2:	f003 030c 	and.w	r3, r3, #12
 800e2b6:	2b0c      	cmp	r3, #12
 800e2b8:	d828      	bhi.n	800e30c <UART_SetConfig+0x134>
 800e2ba:	a201      	add	r2, pc, #4	; (adr r2, 800e2c0 <UART_SetConfig+0xe8>)
 800e2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2c0:	0800e2f5 	.word	0x0800e2f5
 800e2c4:	0800e30d 	.word	0x0800e30d
 800e2c8:	0800e30d 	.word	0x0800e30d
 800e2cc:	0800e30d 	.word	0x0800e30d
 800e2d0:	0800e301 	.word	0x0800e301
 800e2d4:	0800e30d 	.word	0x0800e30d
 800e2d8:	0800e30d 	.word	0x0800e30d
 800e2dc:	0800e30d 	.word	0x0800e30d
 800e2e0:	0800e2fb 	.word	0x0800e2fb
 800e2e4:	0800e30d 	.word	0x0800e30d
 800e2e8:	0800e30d 	.word	0x0800e30d
 800e2ec:	0800e30d 	.word	0x0800e30d
 800e2f0:	0800e307 	.word	0x0800e307
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	76fb      	strb	r3, [r7, #27]
 800e2f8:	e038      	b.n	800e36c <UART_SetConfig+0x194>
 800e2fa:	2302      	movs	r3, #2
 800e2fc:	76fb      	strb	r3, [r7, #27]
 800e2fe:	e035      	b.n	800e36c <UART_SetConfig+0x194>
 800e300:	2304      	movs	r3, #4
 800e302:	76fb      	strb	r3, [r7, #27]
 800e304:	e032      	b.n	800e36c <UART_SetConfig+0x194>
 800e306:	2308      	movs	r3, #8
 800e308:	76fb      	strb	r3, [r7, #27]
 800e30a:	e02f      	b.n	800e36c <UART_SetConfig+0x194>
 800e30c:	2310      	movs	r3, #16
 800e30e:	76fb      	strb	r3, [r7, #27]
 800e310:	e02c      	b.n	800e36c <UART_SetConfig+0x194>
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	4a6b      	ldr	r2, [pc, #428]	; (800e4c4 <UART_SetConfig+0x2ec>)
 800e318:	4293      	cmp	r3, r2
 800e31a:	d125      	bne.n	800e368 <UART_SetConfig+0x190>
 800e31c:	4b6b      	ldr	r3, [pc, #428]	; (800e4cc <UART_SetConfig+0x2f4>)
 800e31e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e322:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e326:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e32a:	d017      	beq.n	800e35c <UART_SetConfig+0x184>
 800e32c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e330:	d817      	bhi.n	800e362 <UART_SetConfig+0x18a>
 800e332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e336:	d00b      	beq.n	800e350 <UART_SetConfig+0x178>
 800e338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e33c:	d811      	bhi.n	800e362 <UART_SetConfig+0x18a>
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d003      	beq.n	800e34a <UART_SetConfig+0x172>
 800e342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e346:	d006      	beq.n	800e356 <UART_SetConfig+0x17e>
 800e348:	e00b      	b.n	800e362 <UART_SetConfig+0x18a>
 800e34a:	2300      	movs	r3, #0
 800e34c:	76fb      	strb	r3, [r7, #27]
 800e34e:	e00d      	b.n	800e36c <UART_SetConfig+0x194>
 800e350:	2302      	movs	r3, #2
 800e352:	76fb      	strb	r3, [r7, #27]
 800e354:	e00a      	b.n	800e36c <UART_SetConfig+0x194>
 800e356:	2304      	movs	r3, #4
 800e358:	76fb      	strb	r3, [r7, #27]
 800e35a:	e007      	b.n	800e36c <UART_SetConfig+0x194>
 800e35c:	2308      	movs	r3, #8
 800e35e:	76fb      	strb	r3, [r7, #27]
 800e360:	e004      	b.n	800e36c <UART_SetConfig+0x194>
 800e362:	2310      	movs	r3, #16
 800e364:	76fb      	strb	r3, [r7, #27]
 800e366:	e001      	b.n	800e36c <UART_SetConfig+0x194>
 800e368:	2310      	movs	r3, #16
 800e36a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4a54      	ldr	r2, [pc, #336]	; (800e4c4 <UART_SetConfig+0x2ec>)
 800e372:	4293      	cmp	r3, r2
 800e374:	d173      	bne.n	800e45e <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e376:	7efb      	ldrb	r3, [r7, #27]
 800e378:	2b08      	cmp	r3, #8
 800e37a:	d824      	bhi.n	800e3c6 <UART_SetConfig+0x1ee>
 800e37c:	a201      	add	r2, pc, #4	; (adr r2, 800e384 <UART_SetConfig+0x1ac>)
 800e37e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e382:	bf00      	nop
 800e384:	0800e3a9 	.word	0x0800e3a9
 800e388:	0800e3c7 	.word	0x0800e3c7
 800e38c:	0800e3b1 	.word	0x0800e3b1
 800e390:	0800e3c7 	.word	0x0800e3c7
 800e394:	0800e3b7 	.word	0x0800e3b7
 800e398:	0800e3c7 	.word	0x0800e3c7
 800e39c:	0800e3c7 	.word	0x0800e3c7
 800e3a0:	0800e3c7 	.word	0x0800e3c7
 800e3a4:	0800e3bf 	.word	0x0800e3bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e3a8:	f7fe fbd2 	bl	800cb50 <HAL_RCC_GetPCLK1Freq>
 800e3ac:	6178      	str	r0, [r7, #20]
        break;
 800e3ae:	e00f      	b.n	800e3d0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e3b0:	4b48      	ldr	r3, [pc, #288]	; (800e4d4 <UART_SetConfig+0x2fc>)
 800e3b2:	617b      	str	r3, [r7, #20]
        break;
 800e3b4:	e00c      	b.n	800e3d0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e3b6:	f7fe fb35 	bl	800ca24 <HAL_RCC_GetSysClockFreq>
 800e3ba:	6178      	str	r0, [r7, #20]
        break;
 800e3bc:	e008      	b.n	800e3d0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e3be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e3c2:	617b      	str	r3, [r7, #20]
        break;
 800e3c4:	e004      	b.n	800e3d0 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	76bb      	strb	r3, [r7, #26]
        break;
 800e3ce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e3d0:	697b      	ldr	r3, [r7, #20]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	f000 80fe 	beq.w	800e5d4 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	685a      	ldr	r2, [r3, #4]
 800e3dc:	4613      	mov	r3, r2
 800e3de:	005b      	lsls	r3, r3, #1
 800e3e0:	4413      	add	r3, r2
 800e3e2:	697a      	ldr	r2, [r7, #20]
 800e3e4:	429a      	cmp	r2, r3
 800e3e6:	d305      	bcc.n	800e3f4 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	685b      	ldr	r3, [r3, #4]
 800e3ec:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e3ee:	697a      	ldr	r2, [r7, #20]
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	d902      	bls.n	800e3fa <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	76bb      	strb	r3, [r7, #26]
 800e3f8:	e0ec      	b.n	800e5d4 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f04f 0100 	mov.w	r1, #0
 800e402:	f04f 0200 	mov.w	r2, #0
 800e406:	f04f 0300 	mov.w	r3, #0
 800e40a:	020b      	lsls	r3, r1, #8
 800e40c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e410:	0202      	lsls	r2, r0, #8
 800e412:	6879      	ldr	r1, [r7, #4]
 800e414:	6849      	ldr	r1, [r1, #4]
 800e416:	0849      	lsrs	r1, r1, #1
 800e418:	4608      	mov	r0, r1
 800e41a:	f04f 0100 	mov.w	r1, #0
 800e41e:	1814      	adds	r4, r2, r0
 800e420:	eb43 0501 	adc.w	r5, r3, r1
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	685b      	ldr	r3, [r3, #4]
 800e428:	461a      	mov	r2, r3
 800e42a:	f04f 0300 	mov.w	r3, #0
 800e42e:	4620      	mov	r0, r4
 800e430:	4629      	mov	r1, r5
 800e432:	f7f2 fbd9 	bl	8000be8 <__aeabi_uldivmod>
 800e436:	4602      	mov	r2, r0
 800e438:	460b      	mov	r3, r1
 800e43a:	4613      	mov	r3, r2
 800e43c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e444:	d308      	bcc.n	800e458 <UART_SetConfig+0x280>
 800e446:	693b      	ldr	r3, [r7, #16]
 800e448:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e44c:	d204      	bcs.n	800e458 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	693a      	ldr	r2, [r7, #16]
 800e454:	60da      	str	r2, [r3, #12]
 800e456:	e0bd      	b.n	800e5d4 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 800e458:	2301      	movs	r3, #1
 800e45a:	76bb      	strb	r3, [r7, #26]
 800e45c:	e0ba      	b.n	800e5d4 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	69db      	ldr	r3, [r3, #28]
 800e462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e466:	d168      	bne.n	800e53a <UART_SetConfig+0x362>
  {
    switch (clocksource)
 800e468:	7efb      	ldrb	r3, [r7, #27]
 800e46a:	2b08      	cmp	r3, #8
 800e46c:	d834      	bhi.n	800e4d8 <UART_SetConfig+0x300>
 800e46e:	a201      	add	r2, pc, #4	; (adr r2, 800e474 <UART_SetConfig+0x29c>)
 800e470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e474:	0800e499 	.word	0x0800e499
 800e478:	0800e4a1 	.word	0x0800e4a1
 800e47c:	0800e4a9 	.word	0x0800e4a9
 800e480:	0800e4d9 	.word	0x0800e4d9
 800e484:	0800e4af 	.word	0x0800e4af
 800e488:	0800e4d9 	.word	0x0800e4d9
 800e48c:	0800e4d9 	.word	0x0800e4d9
 800e490:	0800e4d9 	.word	0x0800e4d9
 800e494:	0800e4b7 	.word	0x0800e4b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e498:	f7fe fb5a 	bl	800cb50 <HAL_RCC_GetPCLK1Freq>
 800e49c:	6178      	str	r0, [r7, #20]
        break;
 800e49e:	e020      	b.n	800e4e2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e4a0:	f7fe fb6c 	bl	800cb7c <HAL_RCC_GetPCLK2Freq>
 800e4a4:	6178      	str	r0, [r7, #20]
        break;
 800e4a6:	e01c      	b.n	800e4e2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e4a8:	4b0a      	ldr	r3, [pc, #40]	; (800e4d4 <UART_SetConfig+0x2fc>)
 800e4aa:	617b      	str	r3, [r7, #20]
        break;
 800e4ac:	e019      	b.n	800e4e2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e4ae:	f7fe fab9 	bl	800ca24 <HAL_RCC_GetSysClockFreq>
 800e4b2:	6178      	str	r0, [r7, #20]
        break;
 800e4b4:	e015      	b.n	800e4e2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e4b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e4ba:	617b      	str	r3, [r7, #20]
        break;
 800e4bc:	e011      	b.n	800e4e2 <UART_SetConfig+0x30a>
 800e4be:	bf00      	nop
 800e4c0:	efff69f3 	.word	0xefff69f3
 800e4c4:	40008000 	.word	0x40008000
 800e4c8:	40013800 	.word	0x40013800
 800e4cc:	40021000 	.word	0x40021000
 800e4d0:	40004400 	.word	0x40004400
 800e4d4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800e4d8:	2300      	movs	r3, #0
 800e4da:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800e4dc:	2301      	movs	r3, #1
 800e4de:	76bb      	strb	r3, [r7, #26]
        break;
 800e4e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d075      	beq.n	800e5d4 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	005a      	lsls	r2, r3, #1
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	685b      	ldr	r3, [r3, #4]
 800e4f0:	085b      	lsrs	r3, r3, #1
 800e4f2:	441a      	add	r2, r3
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	685b      	ldr	r3, [r3, #4]
 800e4f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4fc:	b29b      	uxth	r3, r3
 800e4fe:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	2b0f      	cmp	r3, #15
 800e504:	d916      	bls.n	800e534 <UART_SetConfig+0x35c>
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e50c:	d212      	bcs.n	800e534 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e50e:	693b      	ldr	r3, [r7, #16]
 800e510:	b29b      	uxth	r3, r3
 800e512:	f023 030f 	bic.w	r3, r3, #15
 800e516:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	085b      	lsrs	r3, r3, #1
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	f003 0307 	and.w	r3, r3, #7
 800e522:	b29a      	uxth	r2, r3
 800e524:	89fb      	ldrh	r3, [r7, #14]
 800e526:	4313      	orrs	r3, r2
 800e528:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	89fa      	ldrh	r2, [r7, #14]
 800e530:	60da      	str	r2, [r3, #12]
 800e532:	e04f      	b.n	800e5d4 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800e534:	2301      	movs	r3, #1
 800e536:	76bb      	strb	r3, [r7, #26]
 800e538:	e04c      	b.n	800e5d4 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e53a:	7efb      	ldrb	r3, [r7, #27]
 800e53c:	2b08      	cmp	r3, #8
 800e53e:	d828      	bhi.n	800e592 <UART_SetConfig+0x3ba>
 800e540:	a201      	add	r2, pc, #4	; (adr r2, 800e548 <UART_SetConfig+0x370>)
 800e542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e546:	bf00      	nop
 800e548:	0800e56d 	.word	0x0800e56d
 800e54c:	0800e575 	.word	0x0800e575
 800e550:	0800e57d 	.word	0x0800e57d
 800e554:	0800e593 	.word	0x0800e593
 800e558:	0800e583 	.word	0x0800e583
 800e55c:	0800e593 	.word	0x0800e593
 800e560:	0800e593 	.word	0x0800e593
 800e564:	0800e593 	.word	0x0800e593
 800e568:	0800e58b 	.word	0x0800e58b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e56c:	f7fe faf0 	bl	800cb50 <HAL_RCC_GetPCLK1Freq>
 800e570:	6178      	str	r0, [r7, #20]
        break;
 800e572:	e013      	b.n	800e59c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e574:	f7fe fb02 	bl	800cb7c <HAL_RCC_GetPCLK2Freq>
 800e578:	6178      	str	r0, [r7, #20]
        break;
 800e57a:	e00f      	b.n	800e59c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e57c:	4b1b      	ldr	r3, [pc, #108]	; (800e5ec <UART_SetConfig+0x414>)
 800e57e:	617b      	str	r3, [r7, #20]
        break;
 800e580:	e00c      	b.n	800e59c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e582:	f7fe fa4f 	bl	800ca24 <HAL_RCC_GetSysClockFreq>
 800e586:	6178      	str	r0, [r7, #20]
        break;
 800e588:	e008      	b.n	800e59c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e58a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e58e:	617b      	str	r3, [r7, #20]
        break;
 800e590:	e004      	b.n	800e59c <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 800e592:	2300      	movs	r3, #0
 800e594:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800e596:	2301      	movs	r3, #1
 800e598:	76bb      	strb	r3, [r7, #26]
        break;
 800e59a:	bf00      	nop
    }

    if (pclk != 0U)
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d018      	beq.n	800e5d4 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	685b      	ldr	r3, [r3, #4]
 800e5a6:	085a      	lsrs	r2, r3, #1
 800e5a8:	697b      	ldr	r3, [r7, #20]
 800e5aa:	441a      	add	r2, r3
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	685b      	ldr	r3, [r3, #4]
 800e5b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5b4:	b29b      	uxth	r3, r3
 800e5b6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e5b8:	693b      	ldr	r3, [r7, #16]
 800e5ba:	2b0f      	cmp	r3, #15
 800e5bc:	d908      	bls.n	800e5d0 <UART_SetConfig+0x3f8>
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5c4:	d204      	bcs.n	800e5d0 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	693a      	ldr	r2, [r7, #16]
 800e5cc:	60da      	str	r2, [r3, #12]
 800e5ce:	e001      	b.n	800e5d4 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800e5e0:	7ebb      	ldrb	r3, [r7, #26]
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3720      	adds	r7, #32
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bdb0      	pop	{r4, r5, r7, pc}
 800e5ea:	bf00      	nop
 800e5ec:	00f42400 	.word	0x00f42400

0800e5f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e5f0:	b480      	push	{r7}
 800e5f2:	b083      	sub	sp, #12
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5fc:	f003 0301 	and.w	r3, r3, #1
 800e600:	2b00      	cmp	r3, #0
 800e602:	d00a      	beq.n	800e61a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	685b      	ldr	r3, [r3, #4]
 800e60a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	430a      	orrs	r2, r1
 800e618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e61e:	f003 0302 	and.w	r3, r3, #2
 800e622:	2b00      	cmp	r3, #0
 800e624:	d00a      	beq.n	800e63c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	430a      	orrs	r2, r1
 800e63a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e640:	f003 0304 	and.w	r3, r3, #4
 800e644:	2b00      	cmp	r3, #0
 800e646:	d00a      	beq.n	800e65e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	685b      	ldr	r3, [r3, #4]
 800e64e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	430a      	orrs	r2, r1
 800e65c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e662:	f003 0308 	and.w	r3, r3, #8
 800e666:	2b00      	cmp	r3, #0
 800e668:	d00a      	beq.n	800e680 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	685b      	ldr	r3, [r3, #4]
 800e670:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	430a      	orrs	r2, r1
 800e67e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e684:	f003 0310 	and.w	r3, r3, #16
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d00a      	beq.n	800e6a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	689b      	ldr	r3, [r3, #8]
 800e692:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	430a      	orrs	r2, r1
 800e6a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6a6:	f003 0320 	and.w	r3, r3, #32
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d00a      	beq.n	800e6c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	689b      	ldr	r3, [r3, #8]
 800e6b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	430a      	orrs	r2, r1
 800e6c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d01a      	beq.n	800e706 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	685b      	ldr	r3, [r3, #4]
 800e6d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	430a      	orrs	r2, r1
 800e6e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e6ee:	d10a      	bne.n	800e706 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	685b      	ldr	r3, [r3, #4]
 800e6f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	430a      	orrs	r2, r1
 800e704:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e70a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d00a      	beq.n	800e728 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	685b      	ldr	r3, [r3, #4]
 800e718:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	430a      	orrs	r2, r1
 800e726:	605a      	str	r2, [r3, #4]
  }
}
 800e728:	bf00      	nop
 800e72a:	370c      	adds	r7, #12
 800e72c:	46bd      	mov	sp, r7
 800e72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e732:	4770      	bx	lr

0800e734 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b086      	sub	sp, #24
 800e738:	af02      	add	r7, sp, #8
 800e73a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2200      	movs	r2, #0
 800e740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e744:	f7f9 fde6 	bl	8008314 <HAL_GetTick>
 800e748:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	f003 0308 	and.w	r3, r3, #8
 800e754:	2b08      	cmp	r3, #8
 800e756:	d10e      	bne.n	800e776 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e758:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e75c:	9300      	str	r3, [sp, #0]
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	2200      	movs	r2, #0
 800e762:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	f000 f82d 	bl	800e7c6 <UART_WaitOnFlagUntilTimeout>
 800e76c:	4603      	mov	r3, r0
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d001      	beq.n	800e776 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e772:	2303      	movs	r3, #3
 800e774:	e023      	b.n	800e7be <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f003 0304 	and.w	r3, r3, #4
 800e780:	2b04      	cmp	r3, #4
 800e782:	d10e      	bne.n	800e7a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e784:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e788:	9300      	str	r3, [sp, #0]
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	2200      	movs	r2, #0
 800e78e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f000 f817 	bl	800e7c6 <UART_WaitOnFlagUntilTimeout>
 800e798:	4603      	mov	r3, r0
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d001      	beq.n	800e7a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e79e:	2303      	movs	r3, #3
 800e7a0:	e00d      	b.n	800e7be <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2220      	movs	r2, #32
 800e7a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2220      	movs	r2, #32
 800e7ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800e7bc:	2300      	movs	r3, #0
}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3710      	adds	r7, #16
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}

0800e7c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e7c6:	b580      	push	{r7, lr}
 800e7c8:	b084      	sub	sp, #16
 800e7ca:	af00      	add	r7, sp, #0
 800e7cc:	60f8      	str	r0, [r7, #12]
 800e7ce:	60b9      	str	r1, [r7, #8]
 800e7d0:	603b      	str	r3, [r7, #0]
 800e7d2:	4613      	mov	r3, r2
 800e7d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e7d6:	e05e      	b.n	800e896 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e7d8:	69bb      	ldr	r3, [r7, #24]
 800e7da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7de:	d05a      	beq.n	800e896 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e7e0:	f7f9 fd98 	bl	8008314 <HAL_GetTick>
 800e7e4:	4602      	mov	r2, r0
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	1ad3      	subs	r3, r2, r3
 800e7ea:	69ba      	ldr	r2, [r7, #24]
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	d302      	bcc.n	800e7f6 <UART_WaitOnFlagUntilTimeout+0x30>
 800e7f0:	69bb      	ldr	r3, [r7, #24]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d11b      	bne.n	800e82e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	681a      	ldr	r2, [r3, #0]
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e804:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	689a      	ldr	r2, [r3, #8]
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	f022 0201 	bic.w	r2, r2, #1
 800e814:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	2220      	movs	r2, #32
 800e81a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	2220      	movs	r2, #32
 800e820:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2200      	movs	r2, #0
 800e826:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800e82a:	2303      	movs	r3, #3
 800e82c:	e043      	b.n	800e8b6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	f003 0304 	and.w	r3, r3, #4
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d02c      	beq.n	800e896 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	69db      	ldr	r3, [r3, #28]
 800e842:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e84a:	d124      	bne.n	800e896 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e854:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	681a      	ldr	r2, [r3, #0]
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e864:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	689a      	ldr	r2, [r3, #8]
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	f022 0201 	bic.w	r2, r2, #1
 800e874:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	2220      	movs	r2, #32
 800e87a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	2220      	movs	r2, #32
 800e880:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	2220      	movs	r2, #32
 800e886:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	2200      	movs	r2, #0
 800e88e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800e892:	2303      	movs	r3, #3
 800e894:	e00f      	b.n	800e8b6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	69da      	ldr	r2, [r3, #28]
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	4013      	ands	r3, r2
 800e8a0:	68ba      	ldr	r2, [r7, #8]
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	bf0c      	ite	eq
 800e8a6:	2301      	moveq	r3, #1
 800e8a8:	2300      	movne	r3, #0
 800e8aa:	b2db      	uxtb	r3, r3
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	79fb      	ldrb	r3, [r7, #7]
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d091      	beq.n	800e7d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e8b4:	2300      	movs	r3, #0
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3710      	adds	r7, #16
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}
	...

0800e8c0 <__NVIC_SetPriority>:
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b083      	sub	sp, #12
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	6039      	str	r1, [r7, #0]
 800e8ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e8cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	db0a      	blt.n	800e8ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	b2da      	uxtb	r2, r3
 800e8d8:	490c      	ldr	r1, [pc, #48]	; (800e90c <__NVIC_SetPriority+0x4c>)
 800e8da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e8de:	0112      	lsls	r2, r2, #4
 800e8e0:	b2d2      	uxtb	r2, r2
 800e8e2:	440b      	add	r3, r1
 800e8e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e8e8:	e00a      	b.n	800e900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	b2da      	uxtb	r2, r3
 800e8ee:	4908      	ldr	r1, [pc, #32]	; (800e910 <__NVIC_SetPriority+0x50>)
 800e8f0:	79fb      	ldrb	r3, [r7, #7]
 800e8f2:	f003 030f 	and.w	r3, r3, #15
 800e8f6:	3b04      	subs	r3, #4
 800e8f8:	0112      	lsls	r2, r2, #4
 800e8fa:	b2d2      	uxtb	r2, r2
 800e8fc:	440b      	add	r3, r1
 800e8fe:	761a      	strb	r2, [r3, #24]
}
 800e900:	bf00      	nop
 800e902:	370c      	adds	r7, #12
 800e904:	46bd      	mov	sp, r7
 800e906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90a:	4770      	bx	lr
 800e90c:	e000e100 	.word	0xe000e100
 800e910:	e000ed00 	.word	0xe000ed00

0800e914 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e914:	b580      	push	{r7, lr}
 800e916:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e918:	4b05      	ldr	r3, [pc, #20]	; (800e930 <SysTick_Handler+0x1c>)
 800e91a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e91c:	f001 fcfe 	bl	801031c <xTaskGetSchedulerState>
 800e920:	4603      	mov	r3, r0
 800e922:	2b01      	cmp	r3, #1
 800e924:	d001      	beq.n	800e92a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e926:	f002 fae7 	bl	8010ef8 <xPortSysTickHandler>
  }
}
 800e92a:	bf00      	nop
 800e92c:	bd80      	pop	{r7, pc}
 800e92e:	bf00      	nop
 800e930:	e000e010 	.word	0xe000e010

0800e934 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e934:	b580      	push	{r7, lr}
 800e936:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e938:	2100      	movs	r1, #0
 800e93a:	f06f 0004 	mvn.w	r0, #4
 800e93e:	f7ff ffbf 	bl	800e8c0 <__NVIC_SetPriority>
#endif
}
 800e942:	bf00      	nop
 800e944:	bd80      	pop	{r7, pc}
	...

0800e948 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e948:	b480      	push	{r7}
 800e94a:	b083      	sub	sp, #12
 800e94c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e94e:	f3ef 8305 	mrs	r3, IPSR
 800e952:	603b      	str	r3, [r7, #0]
  return(result);
 800e954:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e956:	2b00      	cmp	r3, #0
 800e958:	d003      	beq.n	800e962 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e95a:	f06f 0305 	mvn.w	r3, #5
 800e95e:	607b      	str	r3, [r7, #4]
 800e960:	e00c      	b.n	800e97c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e962:	4b0a      	ldr	r3, [pc, #40]	; (800e98c <osKernelInitialize+0x44>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d105      	bne.n	800e976 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e96a:	4b08      	ldr	r3, [pc, #32]	; (800e98c <osKernelInitialize+0x44>)
 800e96c:	2201      	movs	r2, #1
 800e96e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e970:	2300      	movs	r3, #0
 800e972:	607b      	str	r3, [r7, #4]
 800e974:	e002      	b.n	800e97c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e976:	f04f 33ff 	mov.w	r3, #4294967295
 800e97a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e97c:	687b      	ldr	r3, [r7, #4]
}
 800e97e:	4618      	mov	r0, r3
 800e980:	370c      	adds	r7, #12
 800e982:	46bd      	mov	sp, r7
 800e984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e988:	4770      	bx	lr
 800e98a:	bf00      	nop
 800e98c:	20000688 	.word	0x20000688

0800e990 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e990:	b580      	push	{r7, lr}
 800e992:	b082      	sub	sp, #8
 800e994:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e996:	f3ef 8305 	mrs	r3, IPSR
 800e99a:	603b      	str	r3, [r7, #0]
  return(result);
 800e99c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d003      	beq.n	800e9aa <osKernelStart+0x1a>
    stat = osErrorISR;
 800e9a2:	f06f 0305 	mvn.w	r3, #5
 800e9a6:	607b      	str	r3, [r7, #4]
 800e9a8:	e010      	b.n	800e9cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e9aa:	4b0b      	ldr	r3, [pc, #44]	; (800e9d8 <osKernelStart+0x48>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	2b01      	cmp	r3, #1
 800e9b0:	d109      	bne.n	800e9c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e9b2:	f7ff ffbf 	bl	800e934 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e9b6:	4b08      	ldr	r3, [pc, #32]	; (800e9d8 <osKernelStart+0x48>)
 800e9b8:	2202      	movs	r2, #2
 800e9ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e9bc:	f001 f866 	bl	800fa8c <vTaskStartScheduler>
      stat = osOK;
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	607b      	str	r3, [r7, #4]
 800e9c4:	e002      	b.n	800e9cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e9c6:	f04f 33ff 	mov.w	r3, #4294967295
 800e9ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e9cc:	687b      	ldr	r3, [r7, #4]
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3708      	adds	r7, #8
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}
 800e9d6:	bf00      	nop
 800e9d8:	20000688 	.word	0x20000688

0800e9dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b08e      	sub	sp, #56	; 0x38
 800e9e0:	af04      	add	r7, sp, #16
 800e9e2:	60f8      	str	r0, [r7, #12]
 800e9e4:	60b9      	str	r1, [r7, #8]
 800e9e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e9ec:	f3ef 8305 	mrs	r3, IPSR
 800e9f0:	617b      	str	r3, [r7, #20]
  return(result);
 800e9f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d17e      	bne.n	800eaf6 <osThreadNew+0x11a>
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d07b      	beq.n	800eaf6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e9fe:	2380      	movs	r3, #128	; 0x80
 800ea00:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ea02:	2318      	movs	r3, #24
 800ea04:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ea06:	2300      	movs	r3, #0
 800ea08:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ea0a:	f04f 33ff 	mov.w	r3, #4294967295
 800ea0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d045      	beq.n	800eaa2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d002      	beq.n	800ea24 <osThreadNew+0x48>
        name = attr->name;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	699b      	ldr	r3, [r3, #24]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d002      	beq.n	800ea32 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	699b      	ldr	r3, [r3, #24]
 800ea30:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ea32:	69fb      	ldr	r3, [r7, #28]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d008      	beq.n	800ea4a <osThreadNew+0x6e>
 800ea38:	69fb      	ldr	r3, [r7, #28]
 800ea3a:	2b38      	cmp	r3, #56	; 0x38
 800ea3c:	d805      	bhi.n	800ea4a <osThreadNew+0x6e>
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	685b      	ldr	r3, [r3, #4]
 800ea42:	f003 0301 	and.w	r3, r3, #1
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d001      	beq.n	800ea4e <osThreadNew+0x72>
        return (NULL);
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	e054      	b.n	800eaf8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	695b      	ldr	r3, [r3, #20]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d003      	beq.n	800ea5e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	695b      	ldr	r3, [r3, #20]
 800ea5a:	089b      	lsrs	r3, r3, #2
 800ea5c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	689b      	ldr	r3, [r3, #8]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d00e      	beq.n	800ea84 <osThreadNew+0xa8>
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	68db      	ldr	r3, [r3, #12]
 800ea6a:	2b5b      	cmp	r3, #91	; 0x5b
 800ea6c:	d90a      	bls.n	800ea84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d006      	beq.n	800ea84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	695b      	ldr	r3, [r3, #20]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d002      	beq.n	800ea84 <osThreadNew+0xa8>
        mem = 1;
 800ea7e:	2301      	movs	r3, #1
 800ea80:	61bb      	str	r3, [r7, #24]
 800ea82:	e010      	b.n	800eaa6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	689b      	ldr	r3, [r3, #8]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d10c      	bne.n	800eaa6 <osThreadNew+0xca>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	68db      	ldr	r3, [r3, #12]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d108      	bne.n	800eaa6 <osThreadNew+0xca>
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	691b      	ldr	r3, [r3, #16]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d104      	bne.n	800eaa6 <osThreadNew+0xca>
          mem = 0;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	61bb      	str	r3, [r7, #24]
 800eaa0:	e001      	b.n	800eaa6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800eaa6:	69bb      	ldr	r3, [r7, #24]
 800eaa8:	2b01      	cmp	r3, #1
 800eaaa:	d110      	bne.n	800eace <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800eab0:	687a      	ldr	r2, [r7, #4]
 800eab2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800eab4:	9202      	str	r2, [sp, #8]
 800eab6:	9301      	str	r3, [sp, #4]
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	9300      	str	r3, [sp, #0]
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	6a3a      	ldr	r2, [r7, #32]
 800eac0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eac2:	68f8      	ldr	r0, [r7, #12]
 800eac4:	f000 fe0c 	bl	800f6e0 <xTaskCreateStatic>
 800eac8:	4603      	mov	r3, r0
 800eaca:	613b      	str	r3, [r7, #16]
 800eacc:	e013      	b.n	800eaf6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800eace:	69bb      	ldr	r3, [r7, #24]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d110      	bne.n	800eaf6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ead4:	6a3b      	ldr	r3, [r7, #32]
 800ead6:	b29a      	uxth	r2, r3
 800ead8:	f107 0310 	add.w	r3, r7, #16
 800eadc:	9301      	str	r3, [sp, #4]
 800eade:	69fb      	ldr	r3, [r7, #28]
 800eae0:	9300      	str	r3, [sp, #0]
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eae6:	68f8      	ldr	r0, [r7, #12]
 800eae8:	f000 fe57 	bl	800f79a <xTaskCreate>
 800eaec:	4603      	mov	r3, r0
 800eaee:	2b01      	cmp	r3, #1
 800eaf0:	d001      	beq.n	800eaf6 <osThreadNew+0x11a>
            hTask = NULL;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800eaf6:	693b      	ldr	r3, [r7, #16]
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	3728      	adds	r7, #40	; 0x28
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b084      	sub	sp, #16
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb08:	f3ef 8305 	mrs	r3, IPSR
 800eb0c:	60bb      	str	r3, [r7, #8]
  return(result);
 800eb0e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d003      	beq.n	800eb1c <osDelay+0x1c>
    stat = osErrorISR;
 800eb14:	f06f 0305 	mvn.w	r3, #5
 800eb18:	60fb      	str	r3, [r7, #12]
 800eb1a:	e007      	b.n	800eb2c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d002      	beq.n	800eb2c <osDelay+0x2c>
      vTaskDelay(ticks);
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	f000 ff7c 	bl	800fa24 <vTaskDelay>
    }
  }

  return (stat);
 800eb2c:	68fb      	ldr	r3, [r7, #12]
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	3710      	adds	r7, #16
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}
	...

0800eb38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800eb38:	b480      	push	{r7}
 800eb3a:	b085      	sub	sp, #20
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	60b9      	str	r1, [r7, #8]
 800eb42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	4a07      	ldr	r2, [pc, #28]	; (800eb64 <vApplicationGetIdleTaskMemory+0x2c>)
 800eb48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	4a06      	ldr	r2, [pc, #24]	; (800eb68 <vApplicationGetIdleTaskMemory+0x30>)
 800eb4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2280      	movs	r2, #128	; 0x80
 800eb54:	601a      	str	r2, [r3, #0]
}
 800eb56:	bf00      	nop
 800eb58:	3714      	adds	r7, #20
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb60:	4770      	bx	lr
 800eb62:	bf00      	nop
 800eb64:	2000068c 	.word	0x2000068c
 800eb68:	200006e8 	.word	0x200006e8

0800eb6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800eb6c:	b480      	push	{r7}
 800eb6e:	b085      	sub	sp, #20
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	60f8      	str	r0, [r7, #12]
 800eb74:	60b9      	str	r1, [r7, #8]
 800eb76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	4a07      	ldr	r2, [pc, #28]	; (800eb98 <vApplicationGetTimerTaskMemory+0x2c>)
 800eb7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	4a06      	ldr	r2, [pc, #24]	; (800eb9c <vApplicationGetTimerTaskMemory+0x30>)
 800eb82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eb8a:	601a      	str	r2, [r3, #0]
}
 800eb8c:	bf00      	nop
 800eb8e:	3714      	adds	r7, #20
 800eb90:	46bd      	mov	sp, r7
 800eb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb96:	4770      	bx	lr
 800eb98:	200008e8 	.word	0x200008e8
 800eb9c:	20000944 	.word	0x20000944

0800eba0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800eba0:	b480      	push	{r7}
 800eba2:	b083      	sub	sp, #12
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f103 0208 	add.w	r2, r3, #8
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f04f 32ff 	mov.w	r2, #4294967295
 800ebb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	f103 0208 	add.w	r2, r3, #8
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f103 0208 	add.w	r2, r3, #8
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ebd4:	bf00      	nop
 800ebd6:	370c      	adds	r7, #12
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebde:	4770      	bx	lr

0800ebe0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	b083      	sub	sp, #12
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2200      	movs	r2, #0
 800ebec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ebee:	bf00      	nop
 800ebf0:	370c      	adds	r7, #12
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf8:	4770      	bx	lr

0800ebfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ebfa:	b480      	push	{r7}
 800ebfc:	b085      	sub	sp, #20
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	6078      	str	r0, [r7, #4]
 800ec02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	685b      	ldr	r3, [r3, #4]
 800ec08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	68fa      	ldr	r2, [r7, #12]
 800ec0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	689a      	ldr	r2, [r3, #8]
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	689b      	ldr	r3, [r3, #8]
 800ec1c:	683a      	ldr	r2, [r7, #0]
 800ec1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	683a      	ldr	r2, [r7, #0]
 800ec24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	687a      	ldr	r2, [r7, #4]
 800ec2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	1c5a      	adds	r2, r3, #1
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	601a      	str	r2, [r3, #0]
}
 800ec36:	bf00      	nop
 800ec38:	3714      	adds	r7, #20
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec40:	4770      	bx	lr

0800ec42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ec42:	b480      	push	{r7}
 800ec44:	b085      	sub	sp, #20
 800ec46:	af00      	add	r7, sp, #0
 800ec48:	6078      	str	r0, [r7, #4]
 800ec4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec58:	d103      	bne.n	800ec62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	691b      	ldr	r3, [r3, #16]
 800ec5e:	60fb      	str	r3, [r7, #12]
 800ec60:	e00c      	b.n	800ec7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	3308      	adds	r3, #8
 800ec66:	60fb      	str	r3, [r7, #12]
 800ec68:	e002      	b.n	800ec70 <vListInsert+0x2e>
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	685b      	ldr	r3, [r3, #4]
 800ec6e:	60fb      	str	r3, [r7, #12]
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	685b      	ldr	r3, [r3, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	68ba      	ldr	r2, [r7, #8]
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d2f6      	bcs.n	800ec6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	685a      	ldr	r2, [r3, #4]
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	683a      	ldr	r2, [r7, #0]
 800ec8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	68fa      	ldr	r2, [r7, #12]
 800ec90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	683a      	ldr	r2, [r7, #0]
 800ec96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	687a      	ldr	r2, [r7, #4]
 800ec9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	1c5a      	adds	r2, r3, #1
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	601a      	str	r2, [r3, #0]
}
 800eca8:	bf00      	nop
 800ecaa:	3714      	adds	r7, #20
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr

0800ecb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b085      	sub	sp, #20
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	691b      	ldr	r3, [r3, #16]
 800ecc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	685b      	ldr	r3, [r3, #4]
 800ecc6:	687a      	ldr	r2, [r7, #4]
 800ecc8:	6892      	ldr	r2, [r2, #8]
 800ecca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	689b      	ldr	r3, [r3, #8]
 800ecd0:	687a      	ldr	r2, [r7, #4]
 800ecd2:	6852      	ldr	r2, [r2, #4]
 800ecd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	685b      	ldr	r3, [r3, #4]
 800ecda:	687a      	ldr	r2, [r7, #4]
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d103      	bne.n	800ece8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	689a      	ldr	r2, [r3, #8]
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2200      	movs	r2, #0
 800ecec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	1e5a      	subs	r2, r3, #1
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	681b      	ldr	r3, [r3, #0]
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	3714      	adds	r7, #20
 800ed00:	46bd      	mov	sp, r7
 800ed02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed06:	4770      	bx	lr

0800ed08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b084      	sub	sp, #16
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
 800ed10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d10a      	bne.n	800ed32 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ed1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed20:	f383 8811 	msr	BASEPRI, r3
 800ed24:	f3bf 8f6f 	isb	sy
 800ed28:	f3bf 8f4f 	dsb	sy
 800ed2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ed2e:	bf00      	nop
 800ed30:	e7fe      	b.n	800ed30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ed32:	f002 f84f 	bl	8010dd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	681a      	ldr	r2, [r3, #0]
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed3e:	68f9      	ldr	r1, [r7, #12]
 800ed40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ed42:	fb01 f303 	mul.w	r3, r1, r3
 800ed46:	441a      	add	r2, r3
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	2200      	movs	r2, #0
 800ed50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	681a      	ldr	r2, [r3, #0]
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	681a      	ldr	r2, [r3, #0]
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed62:	3b01      	subs	r3, #1
 800ed64:	68f9      	ldr	r1, [r7, #12]
 800ed66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ed68:	fb01 f303 	mul.w	r3, r1, r3
 800ed6c:	441a      	add	r2, r3
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	22ff      	movs	r2, #255	; 0xff
 800ed76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	22ff      	movs	r2, #255	; 0xff
 800ed7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d114      	bne.n	800edb2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	691b      	ldr	r3, [r3, #16]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d01a      	beq.n	800edc6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	3310      	adds	r3, #16
 800ed94:	4618      	mov	r0, r3
 800ed96:	f001 f903 	bl	800ffa0 <xTaskRemoveFromEventList>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d012      	beq.n	800edc6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800eda0:	4b0c      	ldr	r3, [pc, #48]	; (800edd4 <xQueueGenericReset+0xcc>)
 800eda2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eda6:	601a      	str	r2, [r3, #0]
 800eda8:	f3bf 8f4f 	dsb	sy
 800edac:	f3bf 8f6f 	isb	sy
 800edb0:	e009      	b.n	800edc6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	3310      	adds	r3, #16
 800edb6:	4618      	mov	r0, r3
 800edb8:	f7ff fef2 	bl	800eba0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	3324      	adds	r3, #36	; 0x24
 800edc0:	4618      	mov	r0, r3
 800edc2:	f7ff feed 	bl	800eba0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800edc6:	f002 f835 	bl	8010e34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800edca:	2301      	movs	r3, #1
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3710      	adds	r7, #16
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}
 800edd4:	e000ed04 	.word	0xe000ed04

0800edd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b08e      	sub	sp, #56	; 0x38
 800eddc:	af02      	add	r7, sp, #8
 800edde:	60f8      	str	r0, [r7, #12]
 800ede0:	60b9      	str	r1, [r7, #8]
 800ede2:	607a      	str	r2, [r7, #4]
 800ede4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d10a      	bne.n	800ee02 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800edec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf0:	f383 8811 	msr	BASEPRI, r3
 800edf4:	f3bf 8f6f 	isb	sy
 800edf8:	f3bf 8f4f 	dsb	sy
 800edfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800edfe:	bf00      	nop
 800ee00:	e7fe      	b.n	800ee00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d10a      	bne.n	800ee1e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ee08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee0c:	f383 8811 	msr	BASEPRI, r3
 800ee10:	f3bf 8f6f 	isb	sy
 800ee14:	f3bf 8f4f 	dsb	sy
 800ee18:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ee1a:	bf00      	nop
 800ee1c:	e7fe      	b.n	800ee1c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d002      	beq.n	800ee2a <xQueueGenericCreateStatic+0x52>
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d001      	beq.n	800ee2e <xQueueGenericCreateStatic+0x56>
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	e000      	b.n	800ee30 <xQueueGenericCreateStatic+0x58>
 800ee2e:	2300      	movs	r3, #0
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d10a      	bne.n	800ee4a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ee34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee38:	f383 8811 	msr	BASEPRI, r3
 800ee3c:	f3bf 8f6f 	isb	sy
 800ee40:	f3bf 8f4f 	dsb	sy
 800ee44:	623b      	str	r3, [r7, #32]
}
 800ee46:	bf00      	nop
 800ee48:	e7fe      	b.n	800ee48 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d102      	bne.n	800ee56 <xQueueGenericCreateStatic+0x7e>
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d101      	bne.n	800ee5a <xQueueGenericCreateStatic+0x82>
 800ee56:	2301      	movs	r3, #1
 800ee58:	e000      	b.n	800ee5c <xQueueGenericCreateStatic+0x84>
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d10a      	bne.n	800ee76 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ee60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee64:	f383 8811 	msr	BASEPRI, r3
 800ee68:	f3bf 8f6f 	isb	sy
 800ee6c:	f3bf 8f4f 	dsb	sy
 800ee70:	61fb      	str	r3, [r7, #28]
}
 800ee72:	bf00      	nop
 800ee74:	e7fe      	b.n	800ee74 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ee76:	2350      	movs	r3, #80	; 0x50
 800ee78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ee7a:	697b      	ldr	r3, [r7, #20]
 800ee7c:	2b50      	cmp	r3, #80	; 0x50
 800ee7e:	d00a      	beq.n	800ee96 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ee80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee84:	f383 8811 	msr	BASEPRI, r3
 800ee88:	f3bf 8f6f 	isb	sy
 800ee8c:	f3bf 8f4f 	dsb	sy
 800ee90:	61bb      	str	r3, [r7, #24]
}
 800ee92:	bf00      	nop
 800ee94:	e7fe      	b.n	800ee94 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ee96:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ee9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d00d      	beq.n	800eebe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800eea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea4:	2201      	movs	r2, #1
 800eea6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800eeaa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800eeae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeb0:	9300      	str	r3, [sp, #0]
 800eeb2:	4613      	mov	r3, r2
 800eeb4:	687a      	ldr	r2, [r7, #4]
 800eeb6:	68b9      	ldr	r1, [r7, #8]
 800eeb8:	68f8      	ldr	r0, [r7, #12]
 800eeba:	f000 f805 	bl	800eec8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800eebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800eec0:	4618      	mov	r0, r3
 800eec2:	3730      	adds	r7, #48	; 0x30
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}

0800eec8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b084      	sub	sp, #16
 800eecc:	af00      	add	r7, sp, #0
 800eece:	60f8      	str	r0, [r7, #12]
 800eed0:	60b9      	str	r1, [r7, #8]
 800eed2:	607a      	str	r2, [r7, #4]
 800eed4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d103      	bne.n	800eee4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800eedc:	69bb      	ldr	r3, [r7, #24]
 800eede:	69ba      	ldr	r2, [r7, #24]
 800eee0:	601a      	str	r2, [r3, #0]
 800eee2:	e002      	b.n	800eeea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800eee4:	69bb      	ldr	r3, [r7, #24]
 800eee6:	687a      	ldr	r2, [r7, #4]
 800eee8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800eeea:	69bb      	ldr	r3, [r7, #24]
 800eeec:	68fa      	ldr	r2, [r7, #12]
 800eeee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800eef0:	69bb      	ldr	r3, [r7, #24]
 800eef2:	68ba      	ldr	r2, [r7, #8]
 800eef4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800eef6:	2101      	movs	r1, #1
 800eef8:	69b8      	ldr	r0, [r7, #24]
 800eefa:	f7ff ff05 	bl	800ed08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800eefe:	69bb      	ldr	r3, [r7, #24]
 800ef00:	78fa      	ldrb	r2, [r7, #3]
 800ef02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ef06:	bf00      	nop
 800ef08:	3710      	adds	r7, #16
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}
	...

0800ef10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b08e      	sub	sp, #56	; 0x38
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	60f8      	str	r0, [r7, #12]
 800ef18:	60b9      	str	r1, [r7, #8]
 800ef1a:	607a      	str	r2, [r7, #4]
 800ef1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ef1e:	2300      	movs	r3, #0
 800ef20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ef26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d10a      	bne.n	800ef42 <xQueueGenericSend+0x32>
	__asm volatile
 800ef2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef30:	f383 8811 	msr	BASEPRI, r3
 800ef34:	f3bf 8f6f 	isb	sy
 800ef38:	f3bf 8f4f 	dsb	sy
 800ef3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ef3e:	bf00      	nop
 800ef40:	e7fe      	b.n	800ef40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d103      	bne.n	800ef50 <xQueueGenericSend+0x40>
 800ef48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d101      	bne.n	800ef54 <xQueueGenericSend+0x44>
 800ef50:	2301      	movs	r3, #1
 800ef52:	e000      	b.n	800ef56 <xQueueGenericSend+0x46>
 800ef54:	2300      	movs	r3, #0
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d10a      	bne.n	800ef70 <xQueueGenericSend+0x60>
	__asm volatile
 800ef5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef5e:	f383 8811 	msr	BASEPRI, r3
 800ef62:	f3bf 8f6f 	isb	sy
 800ef66:	f3bf 8f4f 	dsb	sy
 800ef6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ef6c:	bf00      	nop
 800ef6e:	e7fe      	b.n	800ef6e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	2b02      	cmp	r3, #2
 800ef74:	d103      	bne.n	800ef7e <xQueueGenericSend+0x6e>
 800ef76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef7a:	2b01      	cmp	r3, #1
 800ef7c:	d101      	bne.n	800ef82 <xQueueGenericSend+0x72>
 800ef7e:	2301      	movs	r3, #1
 800ef80:	e000      	b.n	800ef84 <xQueueGenericSend+0x74>
 800ef82:	2300      	movs	r3, #0
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d10a      	bne.n	800ef9e <xQueueGenericSend+0x8e>
	__asm volatile
 800ef88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef8c:	f383 8811 	msr	BASEPRI, r3
 800ef90:	f3bf 8f6f 	isb	sy
 800ef94:	f3bf 8f4f 	dsb	sy
 800ef98:	623b      	str	r3, [r7, #32]
}
 800ef9a:	bf00      	nop
 800ef9c:	e7fe      	b.n	800ef9c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ef9e:	f001 f9bd 	bl	801031c <xTaskGetSchedulerState>
 800efa2:	4603      	mov	r3, r0
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d102      	bne.n	800efae <xQueueGenericSend+0x9e>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d101      	bne.n	800efb2 <xQueueGenericSend+0xa2>
 800efae:	2301      	movs	r3, #1
 800efb0:	e000      	b.n	800efb4 <xQueueGenericSend+0xa4>
 800efb2:	2300      	movs	r3, #0
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d10a      	bne.n	800efce <xQueueGenericSend+0xbe>
	__asm volatile
 800efb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efbc:	f383 8811 	msr	BASEPRI, r3
 800efc0:	f3bf 8f6f 	isb	sy
 800efc4:	f3bf 8f4f 	dsb	sy
 800efc8:	61fb      	str	r3, [r7, #28]
}
 800efca:	bf00      	nop
 800efcc:	e7fe      	b.n	800efcc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800efce:	f001 ff01 	bl	8010dd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800efd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800efd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efda:	429a      	cmp	r2, r3
 800efdc:	d302      	bcc.n	800efe4 <xQueueGenericSend+0xd4>
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	2b02      	cmp	r3, #2
 800efe2:	d129      	bne.n	800f038 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800efe4:	683a      	ldr	r2, [r7, #0]
 800efe6:	68b9      	ldr	r1, [r7, #8]
 800efe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800efea:	f000 fa0b 	bl	800f404 <prvCopyDataToQueue>
 800efee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d010      	beq.n	800f01a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800effa:	3324      	adds	r3, #36	; 0x24
 800effc:	4618      	mov	r0, r3
 800effe:	f000 ffcf 	bl	800ffa0 <xTaskRemoveFromEventList>
 800f002:	4603      	mov	r3, r0
 800f004:	2b00      	cmp	r3, #0
 800f006:	d013      	beq.n	800f030 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f008:	4b3f      	ldr	r3, [pc, #252]	; (800f108 <xQueueGenericSend+0x1f8>)
 800f00a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f00e:	601a      	str	r2, [r3, #0]
 800f010:	f3bf 8f4f 	dsb	sy
 800f014:	f3bf 8f6f 	isb	sy
 800f018:	e00a      	b.n	800f030 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d007      	beq.n	800f030 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f020:	4b39      	ldr	r3, [pc, #228]	; (800f108 <xQueueGenericSend+0x1f8>)
 800f022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f026:	601a      	str	r2, [r3, #0]
 800f028:	f3bf 8f4f 	dsb	sy
 800f02c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f030:	f001 ff00 	bl	8010e34 <vPortExitCritical>
				return pdPASS;
 800f034:	2301      	movs	r3, #1
 800f036:	e063      	b.n	800f100 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d103      	bne.n	800f046 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f03e:	f001 fef9 	bl	8010e34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f042:	2300      	movs	r3, #0
 800f044:	e05c      	b.n	800f100 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d106      	bne.n	800f05a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f04c:	f107 0314 	add.w	r3, r7, #20
 800f050:	4618      	mov	r0, r3
 800f052:	f001 f809 	bl	8010068 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f056:	2301      	movs	r3, #1
 800f058:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f05a:	f001 feeb 	bl	8010e34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f05e:	f000 fd7b 	bl	800fb58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f062:	f001 feb7 	bl	8010dd4 <vPortEnterCritical>
 800f066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f068:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f06c:	b25b      	sxtb	r3, r3
 800f06e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f072:	d103      	bne.n	800f07c <xQueueGenericSend+0x16c>
 800f074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f076:	2200      	movs	r2, #0
 800f078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f07e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f082:	b25b      	sxtb	r3, r3
 800f084:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f088:	d103      	bne.n	800f092 <xQueueGenericSend+0x182>
 800f08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f08c:	2200      	movs	r2, #0
 800f08e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f092:	f001 fecf 	bl	8010e34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f096:	1d3a      	adds	r2, r7, #4
 800f098:	f107 0314 	add.w	r3, r7, #20
 800f09c:	4611      	mov	r1, r2
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f000 fff8 	bl	8010094 <xTaskCheckForTimeOut>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d124      	bne.n	800f0f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f0aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0ac:	f000 faa2 	bl	800f5f4 <prvIsQueueFull>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d018      	beq.n	800f0e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b8:	3310      	adds	r3, #16
 800f0ba:	687a      	ldr	r2, [r7, #4]
 800f0bc:	4611      	mov	r1, r2
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f000 ff1e 	bl	800ff00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f0c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0c6:	f000 fa2d 	bl	800f524 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f0ca:	f000 fd53 	bl	800fb74 <xTaskResumeAll>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	f47f af7c 	bne.w	800efce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f0d6:	4b0c      	ldr	r3, [pc, #48]	; (800f108 <xQueueGenericSend+0x1f8>)
 800f0d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0dc:	601a      	str	r2, [r3, #0]
 800f0de:	f3bf 8f4f 	dsb	sy
 800f0e2:	f3bf 8f6f 	isb	sy
 800f0e6:	e772      	b.n	800efce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f0e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0ea:	f000 fa1b 	bl	800f524 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f0ee:	f000 fd41 	bl	800fb74 <xTaskResumeAll>
 800f0f2:	e76c      	b.n	800efce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f0f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0f6:	f000 fa15 	bl	800f524 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f0fa:	f000 fd3b 	bl	800fb74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f0fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f100:	4618      	mov	r0, r3
 800f102:	3738      	adds	r7, #56	; 0x38
 800f104:	46bd      	mov	sp, r7
 800f106:	bd80      	pop	{r7, pc}
 800f108:	e000ed04 	.word	0xe000ed04

0800f10c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b090      	sub	sp, #64	; 0x40
 800f110:	af00      	add	r7, sp, #0
 800f112:	60f8      	str	r0, [r7, #12]
 800f114:	60b9      	str	r1, [r7, #8]
 800f116:	607a      	str	r2, [r7, #4]
 800f118:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f120:	2b00      	cmp	r3, #0
 800f122:	d10a      	bne.n	800f13a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f128:	f383 8811 	msr	BASEPRI, r3
 800f12c:	f3bf 8f6f 	isb	sy
 800f130:	f3bf 8f4f 	dsb	sy
 800f134:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f136:	bf00      	nop
 800f138:	e7fe      	b.n	800f138 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d103      	bne.n	800f148 <xQueueGenericSendFromISR+0x3c>
 800f140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f144:	2b00      	cmp	r3, #0
 800f146:	d101      	bne.n	800f14c <xQueueGenericSendFromISR+0x40>
 800f148:	2301      	movs	r3, #1
 800f14a:	e000      	b.n	800f14e <xQueueGenericSendFromISR+0x42>
 800f14c:	2300      	movs	r3, #0
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d10a      	bne.n	800f168 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f156:	f383 8811 	msr	BASEPRI, r3
 800f15a:	f3bf 8f6f 	isb	sy
 800f15e:	f3bf 8f4f 	dsb	sy
 800f162:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f164:	bf00      	nop
 800f166:	e7fe      	b.n	800f166 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	2b02      	cmp	r3, #2
 800f16c:	d103      	bne.n	800f176 <xQueueGenericSendFromISR+0x6a>
 800f16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f172:	2b01      	cmp	r3, #1
 800f174:	d101      	bne.n	800f17a <xQueueGenericSendFromISR+0x6e>
 800f176:	2301      	movs	r3, #1
 800f178:	e000      	b.n	800f17c <xQueueGenericSendFromISR+0x70>
 800f17a:	2300      	movs	r3, #0
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d10a      	bne.n	800f196 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f184:	f383 8811 	msr	BASEPRI, r3
 800f188:	f3bf 8f6f 	isb	sy
 800f18c:	f3bf 8f4f 	dsb	sy
 800f190:	623b      	str	r3, [r7, #32]
}
 800f192:	bf00      	nop
 800f194:	e7fe      	b.n	800f194 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f196:	f001 feff 	bl	8010f98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f19a:	f3ef 8211 	mrs	r2, BASEPRI
 800f19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a2:	f383 8811 	msr	BASEPRI, r3
 800f1a6:	f3bf 8f6f 	isb	sy
 800f1aa:	f3bf 8f4f 	dsb	sy
 800f1ae:	61fa      	str	r2, [r7, #28]
 800f1b0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f1b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f1b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1be:	429a      	cmp	r2, r3
 800f1c0:	d302      	bcc.n	800f1c8 <xQueueGenericSendFromISR+0xbc>
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	2b02      	cmp	r3, #2
 800f1c6:	d12f      	bne.n	800f228 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f1ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f1d8:	683a      	ldr	r2, [r7, #0]
 800f1da:	68b9      	ldr	r1, [r7, #8]
 800f1dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f1de:	f000 f911 	bl	800f404 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f1e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1ea:	d112      	bne.n	800f212 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d016      	beq.n	800f222 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f6:	3324      	adds	r3, #36	; 0x24
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	f000 fed1 	bl	800ffa0 <xTaskRemoveFromEventList>
 800f1fe:	4603      	mov	r3, r0
 800f200:	2b00      	cmp	r3, #0
 800f202:	d00e      	beq.n	800f222 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d00b      	beq.n	800f222 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	2201      	movs	r2, #1
 800f20e:	601a      	str	r2, [r3, #0]
 800f210:	e007      	b.n	800f222 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f212:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f216:	3301      	adds	r3, #1
 800f218:	b2db      	uxtb	r3, r3
 800f21a:	b25a      	sxtb	r2, r3
 800f21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f21e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f222:	2301      	movs	r3, #1
 800f224:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f226:	e001      	b.n	800f22c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f228:	2300      	movs	r3, #0
 800f22a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f22c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f22e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f236:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f23a:	4618      	mov	r0, r3
 800f23c:	3740      	adds	r7, #64	; 0x40
 800f23e:	46bd      	mov	sp, r7
 800f240:	bd80      	pop	{r7, pc}
	...

0800f244 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b08c      	sub	sp, #48	; 0x30
 800f248:	af00      	add	r7, sp, #0
 800f24a:	60f8      	str	r0, [r7, #12]
 800f24c:	60b9      	str	r1, [r7, #8]
 800f24e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f250:	2300      	movs	r3, #0
 800f252:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d10a      	bne.n	800f274 <xQueueReceive+0x30>
	__asm volatile
 800f25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f262:	f383 8811 	msr	BASEPRI, r3
 800f266:	f3bf 8f6f 	isb	sy
 800f26a:	f3bf 8f4f 	dsb	sy
 800f26e:	623b      	str	r3, [r7, #32]
}
 800f270:	bf00      	nop
 800f272:	e7fe      	b.n	800f272 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d103      	bne.n	800f282 <xQueueReceive+0x3e>
 800f27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d101      	bne.n	800f286 <xQueueReceive+0x42>
 800f282:	2301      	movs	r3, #1
 800f284:	e000      	b.n	800f288 <xQueueReceive+0x44>
 800f286:	2300      	movs	r3, #0
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d10a      	bne.n	800f2a2 <xQueueReceive+0x5e>
	__asm volatile
 800f28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f290:	f383 8811 	msr	BASEPRI, r3
 800f294:	f3bf 8f6f 	isb	sy
 800f298:	f3bf 8f4f 	dsb	sy
 800f29c:	61fb      	str	r3, [r7, #28]
}
 800f29e:	bf00      	nop
 800f2a0:	e7fe      	b.n	800f2a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f2a2:	f001 f83b 	bl	801031c <xTaskGetSchedulerState>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d102      	bne.n	800f2b2 <xQueueReceive+0x6e>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d101      	bne.n	800f2b6 <xQueueReceive+0x72>
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	e000      	b.n	800f2b8 <xQueueReceive+0x74>
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d10a      	bne.n	800f2d2 <xQueueReceive+0x8e>
	__asm volatile
 800f2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c0:	f383 8811 	msr	BASEPRI, r3
 800f2c4:	f3bf 8f6f 	isb	sy
 800f2c8:	f3bf 8f4f 	dsb	sy
 800f2cc:	61bb      	str	r3, [r7, #24]
}
 800f2ce:	bf00      	nop
 800f2d0:	e7fe      	b.n	800f2d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f2d2:	f001 fd7f 	bl	8010dd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d01f      	beq.n	800f322 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f2e2:	68b9      	ldr	r1, [r7, #8]
 800f2e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2e6:	f000 f8f7 	bl	800f4d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ec:	1e5a      	subs	r2, r3, #1
 800f2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2f4:	691b      	ldr	r3, [r3, #16]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d00f      	beq.n	800f31a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2fc:	3310      	adds	r3, #16
 800f2fe:	4618      	mov	r0, r3
 800f300:	f000 fe4e 	bl	800ffa0 <xTaskRemoveFromEventList>
 800f304:	4603      	mov	r3, r0
 800f306:	2b00      	cmp	r3, #0
 800f308:	d007      	beq.n	800f31a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f30a:	4b3d      	ldr	r3, [pc, #244]	; (800f400 <xQueueReceive+0x1bc>)
 800f30c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f310:	601a      	str	r2, [r3, #0]
 800f312:	f3bf 8f4f 	dsb	sy
 800f316:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f31a:	f001 fd8b 	bl	8010e34 <vPortExitCritical>
				return pdPASS;
 800f31e:	2301      	movs	r3, #1
 800f320:	e069      	b.n	800f3f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d103      	bne.n	800f330 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f328:	f001 fd84 	bl	8010e34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f32c:	2300      	movs	r3, #0
 800f32e:	e062      	b.n	800f3f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f332:	2b00      	cmp	r3, #0
 800f334:	d106      	bne.n	800f344 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f336:	f107 0310 	add.w	r3, r7, #16
 800f33a:	4618      	mov	r0, r3
 800f33c:	f000 fe94 	bl	8010068 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f340:	2301      	movs	r3, #1
 800f342:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f344:	f001 fd76 	bl	8010e34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f348:	f000 fc06 	bl	800fb58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f34c:	f001 fd42 	bl	8010dd4 <vPortEnterCritical>
 800f350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f352:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f356:	b25b      	sxtb	r3, r3
 800f358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f35c:	d103      	bne.n	800f366 <xQueueReceive+0x122>
 800f35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f360:	2200      	movs	r2, #0
 800f362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f368:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f36c:	b25b      	sxtb	r3, r3
 800f36e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f372:	d103      	bne.n	800f37c <xQueueReceive+0x138>
 800f374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f376:	2200      	movs	r2, #0
 800f378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f37c:	f001 fd5a 	bl	8010e34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f380:	1d3a      	adds	r2, r7, #4
 800f382:	f107 0310 	add.w	r3, r7, #16
 800f386:	4611      	mov	r1, r2
 800f388:	4618      	mov	r0, r3
 800f38a:	f000 fe83 	bl	8010094 <xTaskCheckForTimeOut>
 800f38e:	4603      	mov	r3, r0
 800f390:	2b00      	cmp	r3, #0
 800f392:	d123      	bne.n	800f3dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f396:	f000 f917 	bl	800f5c8 <prvIsQueueEmpty>
 800f39a:	4603      	mov	r3, r0
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d017      	beq.n	800f3d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a2:	3324      	adds	r3, #36	; 0x24
 800f3a4:	687a      	ldr	r2, [r7, #4]
 800f3a6:	4611      	mov	r1, r2
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f000 fda9 	bl	800ff00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f3ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3b0:	f000 f8b8 	bl	800f524 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f3b4:	f000 fbde 	bl	800fb74 <xTaskResumeAll>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d189      	bne.n	800f2d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f3be:	4b10      	ldr	r3, [pc, #64]	; (800f400 <xQueueReceive+0x1bc>)
 800f3c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3c4:	601a      	str	r2, [r3, #0]
 800f3c6:	f3bf 8f4f 	dsb	sy
 800f3ca:	f3bf 8f6f 	isb	sy
 800f3ce:	e780      	b.n	800f2d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f3d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3d2:	f000 f8a7 	bl	800f524 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f3d6:	f000 fbcd 	bl	800fb74 <xTaskResumeAll>
 800f3da:	e77a      	b.n	800f2d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f3dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3de:	f000 f8a1 	bl	800f524 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f3e2:	f000 fbc7 	bl	800fb74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f3e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3e8:	f000 f8ee 	bl	800f5c8 <prvIsQueueEmpty>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	f43f af6f 	beq.w	800f2d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f3f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3730      	adds	r7, #48	; 0x30
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}
 800f3fe:	bf00      	nop
 800f400:	e000ed04 	.word	0xe000ed04

0800f404 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b086      	sub	sp, #24
 800f408:	af00      	add	r7, sp, #0
 800f40a:	60f8      	str	r0, [r7, #12]
 800f40c:	60b9      	str	r1, [r7, #8]
 800f40e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f410:	2300      	movs	r3, #0
 800f412:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f418:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d10d      	bne.n	800f43e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d14d      	bne.n	800f4c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	689b      	ldr	r3, [r3, #8]
 800f42e:	4618      	mov	r0, r3
 800f430:	f000 ff92 	bl	8010358 <xTaskPriorityDisinherit>
 800f434:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	2200      	movs	r2, #0
 800f43a:	609a      	str	r2, [r3, #8]
 800f43c:	e043      	b.n	800f4c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d119      	bne.n	800f478 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	6858      	ldr	r0, [r3, #4]
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f44c:	461a      	mov	r2, r3
 800f44e:	68b9      	ldr	r1, [r7, #8]
 800f450:	f001 ff16 	bl	8011280 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	685a      	ldr	r2, [r3, #4]
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f45c:	441a      	add	r2, r3
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	685a      	ldr	r2, [r3, #4]
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	689b      	ldr	r3, [r3, #8]
 800f46a:	429a      	cmp	r2, r3
 800f46c:	d32b      	bcc.n	800f4c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	681a      	ldr	r2, [r3, #0]
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	605a      	str	r2, [r3, #4]
 800f476:	e026      	b.n	800f4c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	68d8      	ldr	r0, [r3, #12]
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f480:	461a      	mov	r2, r3
 800f482:	68b9      	ldr	r1, [r7, #8]
 800f484:	f001 fefc 	bl	8011280 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	68da      	ldr	r2, [r3, #12]
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f490:	425b      	negs	r3, r3
 800f492:	441a      	add	r2, r3
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	68da      	ldr	r2, [r3, #12]
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	d207      	bcs.n	800f4b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	689a      	ldr	r2, [r3, #8]
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4ac:	425b      	negs	r3, r3
 800f4ae:	441a      	add	r2, r3
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2b02      	cmp	r3, #2
 800f4b8:	d105      	bne.n	800f4c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f4ba:	693b      	ldr	r3, [r7, #16]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d002      	beq.n	800f4c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f4c0:	693b      	ldr	r3, [r7, #16]
 800f4c2:	3b01      	subs	r3, #1
 800f4c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	1c5a      	adds	r2, r3, #1
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f4ce:	697b      	ldr	r3, [r7, #20]
}
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3718      	adds	r7, #24
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}

0800f4d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b082      	sub	sp, #8
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d018      	beq.n	800f51c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	68da      	ldr	r2, [r3, #12]
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4f2:	441a      	add	r2, r3
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	68da      	ldr	r2, [r3, #12]
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	689b      	ldr	r3, [r3, #8]
 800f500:	429a      	cmp	r2, r3
 800f502:	d303      	bcc.n	800f50c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681a      	ldr	r2, [r3, #0]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	68d9      	ldr	r1, [r3, #12]
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f514:	461a      	mov	r2, r3
 800f516:	6838      	ldr	r0, [r7, #0]
 800f518:	f001 feb2 	bl	8011280 <memcpy>
	}
}
 800f51c:	bf00      	nop
 800f51e:	3708      	adds	r7, #8
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}

0800f524 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b084      	sub	sp, #16
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f52c:	f001 fc52 	bl	8010dd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f536:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f538:	e011      	b.n	800f55e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d012      	beq.n	800f568 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	3324      	adds	r3, #36	; 0x24
 800f546:	4618      	mov	r0, r3
 800f548:	f000 fd2a 	bl	800ffa0 <xTaskRemoveFromEventList>
 800f54c:	4603      	mov	r3, r0
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d001      	beq.n	800f556 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f552:	f000 fe01 	bl	8010158 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f556:	7bfb      	ldrb	r3, [r7, #15]
 800f558:	3b01      	subs	r3, #1
 800f55a:	b2db      	uxtb	r3, r3
 800f55c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f55e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f562:	2b00      	cmp	r3, #0
 800f564:	dce9      	bgt.n	800f53a <prvUnlockQueue+0x16>
 800f566:	e000      	b.n	800f56a <prvUnlockQueue+0x46>
					break;
 800f568:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	22ff      	movs	r2, #255	; 0xff
 800f56e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f572:	f001 fc5f 	bl	8010e34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f576:	f001 fc2d 	bl	8010dd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f580:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f582:	e011      	b.n	800f5a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	691b      	ldr	r3, [r3, #16]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d012      	beq.n	800f5b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	3310      	adds	r3, #16
 800f590:	4618      	mov	r0, r3
 800f592:	f000 fd05 	bl	800ffa0 <xTaskRemoveFromEventList>
 800f596:	4603      	mov	r3, r0
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d001      	beq.n	800f5a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f59c:	f000 fddc 	bl	8010158 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f5a0:	7bbb      	ldrb	r3, [r7, #14]
 800f5a2:	3b01      	subs	r3, #1
 800f5a4:	b2db      	uxtb	r3, r3
 800f5a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f5a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	dce9      	bgt.n	800f584 <prvUnlockQueue+0x60>
 800f5b0:	e000      	b.n	800f5b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f5b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	22ff      	movs	r2, #255	; 0xff
 800f5b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f5bc:	f001 fc3a 	bl	8010e34 <vPortExitCritical>
}
 800f5c0:	bf00      	nop
 800f5c2:	3710      	adds	r7, #16
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}

0800f5c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b084      	sub	sp, #16
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f5d0:	f001 fc00 	bl	8010dd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d102      	bne.n	800f5e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f5dc:	2301      	movs	r3, #1
 800f5de:	60fb      	str	r3, [r7, #12]
 800f5e0:	e001      	b.n	800f5e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f5e6:	f001 fc25 	bl	8010e34 <vPortExitCritical>

	return xReturn;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
}
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	3710      	adds	r7, #16
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}

0800f5f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b084      	sub	sp, #16
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f5fc:	f001 fbea 	bl	8010dd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f608:	429a      	cmp	r2, r3
 800f60a:	d102      	bne.n	800f612 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f60c:	2301      	movs	r3, #1
 800f60e:	60fb      	str	r3, [r7, #12]
 800f610:	e001      	b.n	800f616 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f612:	2300      	movs	r3, #0
 800f614:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f616:	f001 fc0d 	bl	8010e34 <vPortExitCritical>

	return xReturn;
 800f61a:	68fb      	ldr	r3, [r7, #12]
}
 800f61c:	4618      	mov	r0, r3
 800f61e:	3710      	adds	r7, #16
 800f620:	46bd      	mov	sp, r7
 800f622:	bd80      	pop	{r7, pc}

0800f624 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f624:	b480      	push	{r7}
 800f626:	b085      	sub	sp, #20
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
 800f62c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f62e:	2300      	movs	r3, #0
 800f630:	60fb      	str	r3, [r7, #12]
 800f632:	e014      	b.n	800f65e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f634:	4a0f      	ldr	r2, [pc, #60]	; (800f674 <vQueueAddToRegistry+0x50>)
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d10b      	bne.n	800f658 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f640:	490c      	ldr	r1, [pc, #48]	; (800f674 <vQueueAddToRegistry+0x50>)
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	683a      	ldr	r2, [r7, #0]
 800f646:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f64a:	4a0a      	ldr	r2, [pc, #40]	; (800f674 <vQueueAddToRegistry+0x50>)
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	00db      	lsls	r3, r3, #3
 800f650:	4413      	add	r3, r2
 800f652:	687a      	ldr	r2, [r7, #4]
 800f654:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f656:	e006      	b.n	800f666 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	3301      	adds	r3, #1
 800f65c:	60fb      	str	r3, [r7, #12]
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	2b07      	cmp	r3, #7
 800f662:	d9e7      	bls.n	800f634 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f664:	bf00      	nop
 800f666:	bf00      	nop
 800f668:	3714      	adds	r7, #20
 800f66a:	46bd      	mov	sp, r7
 800f66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f670:	4770      	bx	lr
 800f672:	bf00      	nop
 800f674:	20008c28 	.word	0x20008c28

0800f678 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b086      	sub	sp, #24
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	60f8      	str	r0, [r7, #12]
 800f680:	60b9      	str	r1, [r7, #8]
 800f682:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f688:	f001 fba4 	bl	8010dd4 <vPortEnterCritical>
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f692:	b25b      	sxtb	r3, r3
 800f694:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f698:	d103      	bne.n	800f6a2 <vQueueWaitForMessageRestricted+0x2a>
 800f69a:	697b      	ldr	r3, [r7, #20]
 800f69c:	2200      	movs	r2, #0
 800f69e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f6a8:	b25b      	sxtb	r3, r3
 800f6aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6ae:	d103      	bne.n	800f6b8 <vQueueWaitForMessageRestricted+0x40>
 800f6b0:	697b      	ldr	r3, [r7, #20]
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f6b8:	f001 fbbc 	bl	8010e34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d106      	bne.n	800f6d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f6c4:	697b      	ldr	r3, [r7, #20]
 800f6c6:	3324      	adds	r3, #36	; 0x24
 800f6c8:	687a      	ldr	r2, [r7, #4]
 800f6ca:	68b9      	ldr	r1, [r7, #8]
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f000 fc3b 	bl	800ff48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f6d2:	6978      	ldr	r0, [r7, #20]
 800f6d4:	f7ff ff26 	bl	800f524 <prvUnlockQueue>
	}
 800f6d8:	bf00      	nop
 800f6da:	3718      	adds	r7, #24
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}

0800f6e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b08e      	sub	sp, #56	; 0x38
 800f6e4:	af04      	add	r7, sp, #16
 800f6e6:	60f8      	str	r0, [r7, #12]
 800f6e8:	60b9      	str	r1, [r7, #8]
 800f6ea:	607a      	str	r2, [r7, #4]
 800f6ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d10a      	bne.n	800f70a <xTaskCreateStatic+0x2a>
	__asm volatile
 800f6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6f8:	f383 8811 	msr	BASEPRI, r3
 800f6fc:	f3bf 8f6f 	isb	sy
 800f700:	f3bf 8f4f 	dsb	sy
 800f704:	623b      	str	r3, [r7, #32]
}
 800f706:	bf00      	nop
 800f708:	e7fe      	b.n	800f708 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d10a      	bne.n	800f726 <xTaskCreateStatic+0x46>
	__asm volatile
 800f710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f714:	f383 8811 	msr	BASEPRI, r3
 800f718:	f3bf 8f6f 	isb	sy
 800f71c:	f3bf 8f4f 	dsb	sy
 800f720:	61fb      	str	r3, [r7, #28]
}
 800f722:	bf00      	nop
 800f724:	e7fe      	b.n	800f724 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f726:	235c      	movs	r3, #92	; 0x5c
 800f728:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f72a:	693b      	ldr	r3, [r7, #16]
 800f72c:	2b5c      	cmp	r3, #92	; 0x5c
 800f72e:	d00a      	beq.n	800f746 <xTaskCreateStatic+0x66>
	__asm volatile
 800f730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f734:	f383 8811 	msr	BASEPRI, r3
 800f738:	f3bf 8f6f 	isb	sy
 800f73c:	f3bf 8f4f 	dsb	sy
 800f740:	61bb      	str	r3, [r7, #24]
}
 800f742:	bf00      	nop
 800f744:	e7fe      	b.n	800f744 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f746:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d01e      	beq.n	800f78c <xTaskCreateStatic+0xac>
 800f74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f750:	2b00      	cmp	r3, #0
 800f752:	d01b      	beq.n	800f78c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f756:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f75a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f75c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f760:	2202      	movs	r2, #2
 800f762:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f766:	2300      	movs	r3, #0
 800f768:	9303      	str	r3, [sp, #12]
 800f76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f76c:	9302      	str	r3, [sp, #8]
 800f76e:	f107 0314 	add.w	r3, r7, #20
 800f772:	9301      	str	r3, [sp, #4]
 800f774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f776:	9300      	str	r3, [sp, #0]
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	687a      	ldr	r2, [r7, #4]
 800f77c:	68b9      	ldr	r1, [r7, #8]
 800f77e:	68f8      	ldr	r0, [r7, #12]
 800f780:	f000 f850 	bl	800f824 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f784:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f786:	f000 f8dd 	bl	800f944 <prvAddNewTaskToReadyList>
 800f78a:	e001      	b.n	800f790 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f78c:	2300      	movs	r3, #0
 800f78e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f790:	697b      	ldr	r3, [r7, #20]
	}
 800f792:	4618      	mov	r0, r3
 800f794:	3728      	adds	r7, #40	; 0x28
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}

0800f79a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f79a:	b580      	push	{r7, lr}
 800f79c:	b08c      	sub	sp, #48	; 0x30
 800f79e:	af04      	add	r7, sp, #16
 800f7a0:	60f8      	str	r0, [r7, #12]
 800f7a2:	60b9      	str	r1, [r7, #8]
 800f7a4:	603b      	str	r3, [r7, #0]
 800f7a6:	4613      	mov	r3, r2
 800f7a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f7aa:	88fb      	ldrh	r3, [r7, #6]
 800f7ac:	009b      	lsls	r3, r3, #2
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f001 fc32 	bl	8011018 <pvPortMalloc>
 800f7b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d00e      	beq.n	800f7da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f7bc:	205c      	movs	r0, #92	; 0x5c
 800f7be:	f001 fc2b 	bl	8011018 <pvPortMalloc>
 800f7c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f7c4:	69fb      	ldr	r3, [r7, #28]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d003      	beq.n	800f7d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f7ca:	69fb      	ldr	r3, [r7, #28]
 800f7cc:	697a      	ldr	r2, [r7, #20]
 800f7ce:	631a      	str	r2, [r3, #48]	; 0x30
 800f7d0:	e005      	b.n	800f7de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f7d2:	6978      	ldr	r0, [r7, #20]
 800f7d4:	f001 fcae 	bl	8011134 <vPortFree>
 800f7d8:	e001      	b.n	800f7de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f7da:	2300      	movs	r3, #0
 800f7dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f7de:	69fb      	ldr	r3, [r7, #28]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d017      	beq.n	800f814 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f7e4:	69fb      	ldr	r3, [r7, #28]
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f7ec:	88fa      	ldrh	r2, [r7, #6]
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	9303      	str	r3, [sp, #12]
 800f7f2:	69fb      	ldr	r3, [r7, #28]
 800f7f4:	9302      	str	r3, [sp, #8]
 800f7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7f8:	9301      	str	r3, [sp, #4]
 800f7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7fc:	9300      	str	r3, [sp, #0]
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	68b9      	ldr	r1, [r7, #8]
 800f802:	68f8      	ldr	r0, [r7, #12]
 800f804:	f000 f80e 	bl	800f824 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f808:	69f8      	ldr	r0, [r7, #28]
 800f80a:	f000 f89b 	bl	800f944 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f80e:	2301      	movs	r3, #1
 800f810:	61bb      	str	r3, [r7, #24]
 800f812:	e002      	b.n	800f81a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f814:	f04f 33ff 	mov.w	r3, #4294967295
 800f818:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f81a:	69bb      	ldr	r3, [r7, #24]
	}
 800f81c:	4618      	mov	r0, r3
 800f81e:	3720      	adds	r7, #32
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}

0800f824 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b088      	sub	sp, #32
 800f828:	af00      	add	r7, sp, #0
 800f82a:	60f8      	str	r0, [r7, #12]
 800f82c:	60b9      	str	r1, [r7, #8]
 800f82e:	607a      	str	r2, [r7, #4]
 800f830:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f834:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	009b      	lsls	r3, r3, #2
 800f83a:	461a      	mov	r2, r3
 800f83c:	21a5      	movs	r1, #165	; 0xa5
 800f83e:	f001 fd2d 	bl	801129c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f84c:	3b01      	subs	r3, #1
 800f84e:	009b      	lsls	r3, r3, #2
 800f850:	4413      	add	r3, r2
 800f852:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f854:	69bb      	ldr	r3, [r7, #24]
 800f856:	f023 0307 	bic.w	r3, r3, #7
 800f85a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f85c:	69bb      	ldr	r3, [r7, #24]
 800f85e:	f003 0307 	and.w	r3, r3, #7
 800f862:	2b00      	cmp	r3, #0
 800f864:	d00a      	beq.n	800f87c <prvInitialiseNewTask+0x58>
	__asm volatile
 800f866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f86a:	f383 8811 	msr	BASEPRI, r3
 800f86e:	f3bf 8f6f 	isb	sy
 800f872:	f3bf 8f4f 	dsb	sy
 800f876:	617b      	str	r3, [r7, #20]
}
 800f878:	bf00      	nop
 800f87a:	e7fe      	b.n	800f87a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f87c:	68bb      	ldr	r3, [r7, #8]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d01f      	beq.n	800f8c2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f882:	2300      	movs	r3, #0
 800f884:	61fb      	str	r3, [r7, #28]
 800f886:	e012      	b.n	800f8ae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f888:	68ba      	ldr	r2, [r7, #8]
 800f88a:	69fb      	ldr	r3, [r7, #28]
 800f88c:	4413      	add	r3, r2
 800f88e:	7819      	ldrb	r1, [r3, #0]
 800f890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f892:	69fb      	ldr	r3, [r7, #28]
 800f894:	4413      	add	r3, r2
 800f896:	3334      	adds	r3, #52	; 0x34
 800f898:	460a      	mov	r2, r1
 800f89a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f89c:	68ba      	ldr	r2, [r7, #8]
 800f89e:	69fb      	ldr	r3, [r7, #28]
 800f8a0:	4413      	add	r3, r2
 800f8a2:	781b      	ldrb	r3, [r3, #0]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d006      	beq.n	800f8b6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f8a8:	69fb      	ldr	r3, [r7, #28]
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	61fb      	str	r3, [r7, #28]
 800f8ae:	69fb      	ldr	r3, [r7, #28]
 800f8b0:	2b0f      	cmp	r3, #15
 800f8b2:	d9e9      	bls.n	800f888 <prvInitialiseNewTask+0x64>
 800f8b4:	e000      	b.n	800f8b8 <prvInitialiseNewTask+0x94>
			{
				break;
 800f8b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f8c0:	e003      	b.n	800f8ca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8cc:	2b37      	cmp	r3, #55	; 0x37
 800f8ce:	d901      	bls.n	800f8d4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f8d0:	2337      	movs	r3, #55	; 0x37
 800f8d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8de:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e8:	3304      	adds	r3, #4
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f7ff f978 	bl	800ebe0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f2:	3318      	adds	r3, #24
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	f7ff f973 	bl	800ebe0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f902:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f908:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f90c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f90e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f912:	2200      	movs	r2, #0
 800f914:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f918:	2200      	movs	r2, #0
 800f91a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f91e:	683a      	ldr	r2, [r7, #0]
 800f920:	68f9      	ldr	r1, [r7, #12]
 800f922:	69b8      	ldr	r0, [r7, #24]
 800f924:	f001 f928 	bl	8010b78 <pxPortInitialiseStack>
 800f928:	4602      	mov	r2, r0
 800f92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f92c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f930:	2b00      	cmp	r3, #0
 800f932:	d002      	beq.n	800f93a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f938:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f93a:	bf00      	nop
 800f93c:	3720      	adds	r7, #32
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}
	...

0800f944 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b082      	sub	sp, #8
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f94c:	f001 fa42 	bl	8010dd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f950:	4b2d      	ldr	r3, [pc, #180]	; (800fa08 <prvAddNewTaskToReadyList+0xc4>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	3301      	adds	r3, #1
 800f956:	4a2c      	ldr	r2, [pc, #176]	; (800fa08 <prvAddNewTaskToReadyList+0xc4>)
 800f958:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f95a:	4b2c      	ldr	r3, [pc, #176]	; (800fa0c <prvAddNewTaskToReadyList+0xc8>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d109      	bne.n	800f976 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f962:	4a2a      	ldr	r2, [pc, #168]	; (800fa0c <prvAddNewTaskToReadyList+0xc8>)
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f968:	4b27      	ldr	r3, [pc, #156]	; (800fa08 <prvAddNewTaskToReadyList+0xc4>)
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	2b01      	cmp	r3, #1
 800f96e:	d110      	bne.n	800f992 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f970:	f000 fc16 	bl	80101a0 <prvInitialiseTaskLists>
 800f974:	e00d      	b.n	800f992 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f976:	4b26      	ldr	r3, [pc, #152]	; (800fa10 <prvAddNewTaskToReadyList+0xcc>)
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d109      	bne.n	800f992 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f97e:	4b23      	ldr	r3, [pc, #140]	; (800fa0c <prvAddNewTaskToReadyList+0xc8>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f988:	429a      	cmp	r2, r3
 800f98a:	d802      	bhi.n	800f992 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f98c:	4a1f      	ldr	r2, [pc, #124]	; (800fa0c <prvAddNewTaskToReadyList+0xc8>)
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f992:	4b20      	ldr	r3, [pc, #128]	; (800fa14 <prvAddNewTaskToReadyList+0xd0>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	3301      	adds	r3, #1
 800f998:	4a1e      	ldr	r2, [pc, #120]	; (800fa14 <prvAddNewTaskToReadyList+0xd0>)
 800f99a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f99c:	4b1d      	ldr	r3, [pc, #116]	; (800fa14 <prvAddNewTaskToReadyList+0xd0>)
 800f99e:	681a      	ldr	r2, [r3, #0]
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9a8:	4b1b      	ldr	r3, [pc, #108]	; (800fa18 <prvAddNewTaskToReadyList+0xd4>)
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	429a      	cmp	r2, r3
 800f9ae:	d903      	bls.n	800f9b8 <prvAddNewTaskToReadyList+0x74>
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9b4:	4a18      	ldr	r2, [pc, #96]	; (800fa18 <prvAddNewTaskToReadyList+0xd4>)
 800f9b6:	6013      	str	r3, [r2, #0]
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9bc:	4613      	mov	r3, r2
 800f9be:	009b      	lsls	r3, r3, #2
 800f9c0:	4413      	add	r3, r2
 800f9c2:	009b      	lsls	r3, r3, #2
 800f9c4:	4a15      	ldr	r2, [pc, #84]	; (800fa1c <prvAddNewTaskToReadyList+0xd8>)
 800f9c6:	441a      	add	r2, r3
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	3304      	adds	r3, #4
 800f9cc:	4619      	mov	r1, r3
 800f9ce:	4610      	mov	r0, r2
 800f9d0:	f7ff f913 	bl	800ebfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f9d4:	f001 fa2e 	bl	8010e34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f9d8:	4b0d      	ldr	r3, [pc, #52]	; (800fa10 <prvAddNewTaskToReadyList+0xcc>)
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d00e      	beq.n	800f9fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f9e0:	4b0a      	ldr	r3, [pc, #40]	; (800fa0c <prvAddNewTaskToReadyList+0xc8>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9ea:	429a      	cmp	r2, r3
 800f9ec:	d207      	bcs.n	800f9fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f9ee:	4b0c      	ldr	r3, [pc, #48]	; (800fa20 <prvAddNewTaskToReadyList+0xdc>)
 800f9f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9f4:	601a      	str	r2, [r3, #0]
 800f9f6:	f3bf 8f4f 	dsb	sy
 800f9fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f9fe:	bf00      	nop
 800fa00:	3708      	adds	r7, #8
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}
 800fa06:	bf00      	nop
 800fa08:	20001218 	.word	0x20001218
 800fa0c:	20000d44 	.word	0x20000d44
 800fa10:	20001224 	.word	0x20001224
 800fa14:	20001234 	.word	0x20001234
 800fa18:	20001220 	.word	0x20001220
 800fa1c:	20000d48 	.word	0x20000d48
 800fa20:	e000ed04 	.word	0xe000ed04

0800fa24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b084      	sub	sp, #16
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d017      	beq.n	800fa66 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fa36:	4b13      	ldr	r3, [pc, #76]	; (800fa84 <vTaskDelay+0x60>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d00a      	beq.n	800fa54 <vTaskDelay+0x30>
	__asm volatile
 800fa3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa42:	f383 8811 	msr	BASEPRI, r3
 800fa46:	f3bf 8f6f 	isb	sy
 800fa4a:	f3bf 8f4f 	dsb	sy
 800fa4e:	60bb      	str	r3, [r7, #8]
}
 800fa50:	bf00      	nop
 800fa52:	e7fe      	b.n	800fa52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fa54:	f000 f880 	bl	800fb58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fa58:	2100      	movs	r1, #0
 800fa5a:	6878      	ldr	r0, [r7, #4]
 800fa5c:	f000 fcea 	bl	8010434 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fa60:	f000 f888 	bl	800fb74 <xTaskResumeAll>
 800fa64:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d107      	bne.n	800fa7c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fa6c:	4b06      	ldr	r3, [pc, #24]	; (800fa88 <vTaskDelay+0x64>)
 800fa6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa72:	601a      	str	r2, [r3, #0]
 800fa74:	f3bf 8f4f 	dsb	sy
 800fa78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fa7c:	bf00      	nop
 800fa7e:	3710      	adds	r7, #16
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}
 800fa84:	20001240 	.word	0x20001240
 800fa88:	e000ed04 	.word	0xe000ed04

0800fa8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b08a      	sub	sp, #40	; 0x28
 800fa90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fa92:	2300      	movs	r3, #0
 800fa94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fa96:	2300      	movs	r3, #0
 800fa98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fa9a:	463a      	mov	r2, r7
 800fa9c:	1d39      	adds	r1, r7, #4
 800fa9e:	f107 0308 	add.w	r3, r7, #8
 800faa2:	4618      	mov	r0, r3
 800faa4:	f7ff f848 	bl	800eb38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800faa8:	6839      	ldr	r1, [r7, #0]
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	68ba      	ldr	r2, [r7, #8]
 800faae:	9202      	str	r2, [sp, #8]
 800fab0:	9301      	str	r3, [sp, #4]
 800fab2:	2300      	movs	r3, #0
 800fab4:	9300      	str	r3, [sp, #0]
 800fab6:	2300      	movs	r3, #0
 800fab8:	460a      	mov	r2, r1
 800faba:	4921      	ldr	r1, [pc, #132]	; (800fb40 <vTaskStartScheduler+0xb4>)
 800fabc:	4821      	ldr	r0, [pc, #132]	; (800fb44 <vTaskStartScheduler+0xb8>)
 800fabe:	f7ff fe0f 	bl	800f6e0 <xTaskCreateStatic>
 800fac2:	4603      	mov	r3, r0
 800fac4:	4a20      	ldr	r2, [pc, #128]	; (800fb48 <vTaskStartScheduler+0xbc>)
 800fac6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fac8:	4b1f      	ldr	r3, [pc, #124]	; (800fb48 <vTaskStartScheduler+0xbc>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	2b00      	cmp	r3, #0
 800face:	d002      	beq.n	800fad6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fad0:	2301      	movs	r3, #1
 800fad2:	617b      	str	r3, [r7, #20]
 800fad4:	e001      	b.n	800fada <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fad6:	2300      	movs	r3, #0
 800fad8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fada:	697b      	ldr	r3, [r7, #20]
 800fadc:	2b01      	cmp	r3, #1
 800fade:	d102      	bne.n	800fae6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fae0:	f000 fcfc 	bl	80104dc <xTimerCreateTimerTask>
 800fae4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fae6:	697b      	ldr	r3, [r7, #20]
 800fae8:	2b01      	cmp	r3, #1
 800faea:	d116      	bne.n	800fb1a <vTaskStartScheduler+0x8e>
	__asm volatile
 800faec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faf0:	f383 8811 	msr	BASEPRI, r3
 800faf4:	f3bf 8f6f 	isb	sy
 800faf8:	f3bf 8f4f 	dsb	sy
 800fafc:	613b      	str	r3, [r7, #16]
}
 800fafe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fb00:	4b12      	ldr	r3, [pc, #72]	; (800fb4c <vTaskStartScheduler+0xc0>)
 800fb02:	f04f 32ff 	mov.w	r2, #4294967295
 800fb06:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fb08:	4b11      	ldr	r3, [pc, #68]	; (800fb50 <vTaskStartScheduler+0xc4>)
 800fb0a:	2201      	movs	r2, #1
 800fb0c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fb0e:	4b11      	ldr	r3, [pc, #68]	; (800fb54 <vTaskStartScheduler+0xc8>)
 800fb10:	2200      	movs	r2, #0
 800fb12:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fb14:	f001 f8bc 	bl	8010c90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fb18:	e00e      	b.n	800fb38 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fb1a:	697b      	ldr	r3, [r7, #20]
 800fb1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb20:	d10a      	bne.n	800fb38 <vTaskStartScheduler+0xac>
	__asm volatile
 800fb22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb26:	f383 8811 	msr	BASEPRI, r3
 800fb2a:	f3bf 8f6f 	isb	sy
 800fb2e:	f3bf 8f4f 	dsb	sy
 800fb32:	60fb      	str	r3, [r7, #12]
}
 800fb34:	bf00      	nop
 800fb36:	e7fe      	b.n	800fb36 <vTaskStartScheduler+0xaa>
}
 800fb38:	bf00      	nop
 800fb3a:	3718      	adds	r7, #24
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}
 800fb40:	08013c6c 	.word	0x08013c6c
 800fb44:	08010171 	.word	0x08010171
 800fb48:	2000123c 	.word	0x2000123c
 800fb4c:	20001238 	.word	0x20001238
 800fb50:	20001224 	.word	0x20001224
 800fb54:	2000121c 	.word	0x2000121c

0800fb58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fb58:	b480      	push	{r7}
 800fb5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fb5c:	4b04      	ldr	r3, [pc, #16]	; (800fb70 <vTaskSuspendAll+0x18>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	3301      	adds	r3, #1
 800fb62:	4a03      	ldr	r2, [pc, #12]	; (800fb70 <vTaskSuspendAll+0x18>)
 800fb64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fb66:	bf00      	nop
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6e:	4770      	bx	lr
 800fb70:	20001240 	.word	0x20001240

0800fb74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b084      	sub	sp, #16
 800fb78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fb7e:	2300      	movs	r3, #0
 800fb80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fb82:	4b42      	ldr	r3, [pc, #264]	; (800fc8c <xTaskResumeAll+0x118>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d10a      	bne.n	800fba0 <xTaskResumeAll+0x2c>
	__asm volatile
 800fb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb8e:	f383 8811 	msr	BASEPRI, r3
 800fb92:	f3bf 8f6f 	isb	sy
 800fb96:	f3bf 8f4f 	dsb	sy
 800fb9a:	603b      	str	r3, [r7, #0]
}
 800fb9c:	bf00      	nop
 800fb9e:	e7fe      	b.n	800fb9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fba0:	f001 f918 	bl	8010dd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fba4:	4b39      	ldr	r3, [pc, #228]	; (800fc8c <xTaskResumeAll+0x118>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	3b01      	subs	r3, #1
 800fbaa:	4a38      	ldr	r2, [pc, #224]	; (800fc8c <xTaskResumeAll+0x118>)
 800fbac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbae:	4b37      	ldr	r3, [pc, #220]	; (800fc8c <xTaskResumeAll+0x118>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d162      	bne.n	800fc7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fbb6:	4b36      	ldr	r3, [pc, #216]	; (800fc90 <xTaskResumeAll+0x11c>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d05e      	beq.n	800fc7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fbbe:	e02f      	b.n	800fc20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbc0:	4b34      	ldr	r3, [pc, #208]	; (800fc94 <xTaskResumeAll+0x120>)
 800fbc2:	68db      	ldr	r3, [r3, #12]
 800fbc4:	68db      	ldr	r3, [r3, #12]
 800fbc6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	3318      	adds	r3, #24
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7ff f871 	bl	800ecb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	3304      	adds	r3, #4
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7ff f86c 	bl	800ecb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbe0:	4b2d      	ldr	r3, [pc, #180]	; (800fc98 <xTaskResumeAll+0x124>)
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	429a      	cmp	r2, r3
 800fbe6:	d903      	bls.n	800fbf0 <xTaskResumeAll+0x7c>
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbec:	4a2a      	ldr	r2, [pc, #168]	; (800fc98 <xTaskResumeAll+0x124>)
 800fbee:	6013      	str	r3, [r2, #0]
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbf4:	4613      	mov	r3, r2
 800fbf6:	009b      	lsls	r3, r3, #2
 800fbf8:	4413      	add	r3, r2
 800fbfa:	009b      	lsls	r3, r3, #2
 800fbfc:	4a27      	ldr	r2, [pc, #156]	; (800fc9c <xTaskResumeAll+0x128>)
 800fbfe:	441a      	add	r2, r3
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	3304      	adds	r3, #4
 800fc04:	4619      	mov	r1, r3
 800fc06:	4610      	mov	r0, r2
 800fc08:	f7fe fff7 	bl	800ebfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc10:	4b23      	ldr	r3, [pc, #140]	; (800fca0 <xTaskResumeAll+0x12c>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc16:	429a      	cmp	r2, r3
 800fc18:	d302      	bcc.n	800fc20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800fc1a:	4b22      	ldr	r3, [pc, #136]	; (800fca4 <xTaskResumeAll+0x130>)
 800fc1c:	2201      	movs	r2, #1
 800fc1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fc20:	4b1c      	ldr	r3, [pc, #112]	; (800fc94 <xTaskResumeAll+0x120>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d1cb      	bne.n	800fbc0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d001      	beq.n	800fc32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fc2e:	f000 fb55 	bl	80102dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fc32:	4b1d      	ldr	r3, [pc, #116]	; (800fca8 <xTaskResumeAll+0x134>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d010      	beq.n	800fc60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fc3e:	f000 f847 	bl	800fcd0 <xTaskIncrementTick>
 800fc42:	4603      	mov	r3, r0
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d002      	beq.n	800fc4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800fc48:	4b16      	ldr	r3, [pc, #88]	; (800fca4 <xTaskResumeAll+0x130>)
 800fc4a:	2201      	movs	r2, #1
 800fc4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	3b01      	subs	r3, #1
 800fc52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d1f1      	bne.n	800fc3e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800fc5a:	4b13      	ldr	r3, [pc, #76]	; (800fca8 <xTaskResumeAll+0x134>)
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fc60:	4b10      	ldr	r3, [pc, #64]	; (800fca4 <xTaskResumeAll+0x130>)
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d009      	beq.n	800fc7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fc68:	2301      	movs	r3, #1
 800fc6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fc6c:	4b0f      	ldr	r3, [pc, #60]	; (800fcac <xTaskResumeAll+0x138>)
 800fc6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc72:	601a      	str	r2, [r3, #0]
 800fc74:	f3bf 8f4f 	dsb	sy
 800fc78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fc7c:	f001 f8da 	bl	8010e34 <vPortExitCritical>

	return xAlreadyYielded;
 800fc80:	68bb      	ldr	r3, [r7, #8]
}
 800fc82:	4618      	mov	r0, r3
 800fc84:	3710      	adds	r7, #16
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}
 800fc8a:	bf00      	nop
 800fc8c:	20001240 	.word	0x20001240
 800fc90:	20001218 	.word	0x20001218
 800fc94:	200011d8 	.word	0x200011d8
 800fc98:	20001220 	.word	0x20001220
 800fc9c:	20000d48 	.word	0x20000d48
 800fca0:	20000d44 	.word	0x20000d44
 800fca4:	2000122c 	.word	0x2000122c
 800fca8:	20001228 	.word	0x20001228
 800fcac:	e000ed04 	.word	0xe000ed04

0800fcb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fcb0:	b480      	push	{r7}
 800fcb2:	b083      	sub	sp, #12
 800fcb4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fcb6:	4b05      	ldr	r3, [pc, #20]	; (800fccc <xTaskGetTickCount+0x1c>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fcbc:	687b      	ldr	r3, [r7, #4]
}
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	370c      	adds	r7, #12
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc8:	4770      	bx	lr
 800fcca:	bf00      	nop
 800fccc:	2000121c 	.word	0x2000121c

0800fcd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b086      	sub	sp, #24
 800fcd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fcda:	4b4f      	ldr	r3, [pc, #316]	; (800fe18 <xTaskIncrementTick+0x148>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	f040 808f 	bne.w	800fe02 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fce4:	4b4d      	ldr	r3, [pc, #308]	; (800fe1c <xTaskIncrementTick+0x14c>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	3301      	adds	r3, #1
 800fcea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fcec:	4a4b      	ldr	r2, [pc, #300]	; (800fe1c <xTaskIncrementTick+0x14c>)
 800fcee:	693b      	ldr	r3, [r7, #16]
 800fcf0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fcf2:	693b      	ldr	r3, [r7, #16]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d120      	bne.n	800fd3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fcf8:	4b49      	ldr	r3, [pc, #292]	; (800fe20 <xTaskIncrementTick+0x150>)
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d00a      	beq.n	800fd18 <xTaskIncrementTick+0x48>
	__asm volatile
 800fd02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd06:	f383 8811 	msr	BASEPRI, r3
 800fd0a:	f3bf 8f6f 	isb	sy
 800fd0e:	f3bf 8f4f 	dsb	sy
 800fd12:	603b      	str	r3, [r7, #0]
}
 800fd14:	bf00      	nop
 800fd16:	e7fe      	b.n	800fd16 <xTaskIncrementTick+0x46>
 800fd18:	4b41      	ldr	r3, [pc, #260]	; (800fe20 <xTaskIncrementTick+0x150>)
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	60fb      	str	r3, [r7, #12]
 800fd1e:	4b41      	ldr	r3, [pc, #260]	; (800fe24 <xTaskIncrementTick+0x154>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	4a3f      	ldr	r2, [pc, #252]	; (800fe20 <xTaskIncrementTick+0x150>)
 800fd24:	6013      	str	r3, [r2, #0]
 800fd26:	4a3f      	ldr	r2, [pc, #252]	; (800fe24 <xTaskIncrementTick+0x154>)
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	6013      	str	r3, [r2, #0]
 800fd2c:	4b3e      	ldr	r3, [pc, #248]	; (800fe28 <xTaskIncrementTick+0x158>)
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	3301      	adds	r3, #1
 800fd32:	4a3d      	ldr	r2, [pc, #244]	; (800fe28 <xTaskIncrementTick+0x158>)
 800fd34:	6013      	str	r3, [r2, #0]
 800fd36:	f000 fad1 	bl	80102dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fd3a:	4b3c      	ldr	r3, [pc, #240]	; (800fe2c <xTaskIncrementTick+0x15c>)
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	693a      	ldr	r2, [r7, #16]
 800fd40:	429a      	cmp	r2, r3
 800fd42:	d349      	bcc.n	800fdd8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd44:	4b36      	ldr	r3, [pc, #216]	; (800fe20 <xTaskIncrementTick+0x150>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d104      	bne.n	800fd58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd4e:	4b37      	ldr	r3, [pc, #220]	; (800fe2c <xTaskIncrementTick+0x15c>)
 800fd50:	f04f 32ff 	mov.w	r2, #4294967295
 800fd54:	601a      	str	r2, [r3, #0]
					break;
 800fd56:	e03f      	b.n	800fdd8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd58:	4b31      	ldr	r3, [pc, #196]	; (800fe20 <xTaskIncrementTick+0x150>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	68db      	ldr	r3, [r3, #12]
 800fd5e:	68db      	ldr	r3, [r3, #12]
 800fd60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fd62:	68bb      	ldr	r3, [r7, #8]
 800fd64:	685b      	ldr	r3, [r3, #4]
 800fd66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fd68:	693a      	ldr	r2, [r7, #16]
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	429a      	cmp	r2, r3
 800fd6e:	d203      	bcs.n	800fd78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fd70:	4a2e      	ldr	r2, [pc, #184]	; (800fe2c <xTaskIncrementTick+0x15c>)
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fd76:	e02f      	b.n	800fdd8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	3304      	adds	r3, #4
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f7fe ff99 	bl	800ecb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d004      	beq.n	800fd94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	3318      	adds	r3, #24
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f7fe ff90 	bl	800ecb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd98:	4b25      	ldr	r3, [pc, #148]	; (800fe30 <xTaskIncrementTick+0x160>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	429a      	cmp	r2, r3
 800fd9e:	d903      	bls.n	800fda8 <xTaskIncrementTick+0xd8>
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fda4:	4a22      	ldr	r2, [pc, #136]	; (800fe30 <xTaskIncrementTick+0x160>)
 800fda6:	6013      	str	r3, [r2, #0]
 800fda8:	68bb      	ldr	r3, [r7, #8]
 800fdaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdac:	4613      	mov	r3, r2
 800fdae:	009b      	lsls	r3, r3, #2
 800fdb0:	4413      	add	r3, r2
 800fdb2:	009b      	lsls	r3, r3, #2
 800fdb4:	4a1f      	ldr	r2, [pc, #124]	; (800fe34 <xTaskIncrementTick+0x164>)
 800fdb6:	441a      	add	r2, r3
 800fdb8:	68bb      	ldr	r3, [r7, #8]
 800fdba:	3304      	adds	r3, #4
 800fdbc:	4619      	mov	r1, r3
 800fdbe:	4610      	mov	r0, r2
 800fdc0:	f7fe ff1b 	bl	800ebfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdc8:	4b1b      	ldr	r3, [pc, #108]	; (800fe38 <xTaskIncrementTick+0x168>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdce:	429a      	cmp	r2, r3
 800fdd0:	d3b8      	bcc.n	800fd44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fdd2:	2301      	movs	r3, #1
 800fdd4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fdd6:	e7b5      	b.n	800fd44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fdd8:	4b17      	ldr	r3, [pc, #92]	; (800fe38 <xTaskIncrementTick+0x168>)
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdde:	4915      	ldr	r1, [pc, #84]	; (800fe34 <xTaskIncrementTick+0x164>)
 800fde0:	4613      	mov	r3, r2
 800fde2:	009b      	lsls	r3, r3, #2
 800fde4:	4413      	add	r3, r2
 800fde6:	009b      	lsls	r3, r3, #2
 800fde8:	440b      	add	r3, r1
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	2b01      	cmp	r3, #1
 800fdee:	d901      	bls.n	800fdf4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800fdf0:	2301      	movs	r3, #1
 800fdf2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fdf4:	4b11      	ldr	r3, [pc, #68]	; (800fe3c <xTaskIncrementTick+0x16c>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d007      	beq.n	800fe0c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	617b      	str	r3, [r7, #20]
 800fe00:	e004      	b.n	800fe0c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fe02:	4b0f      	ldr	r3, [pc, #60]	; (800fe40 <xTaskIncrementTick+0x170>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	3301      	adds	r3, #1
 800fe08:	4a0d      	ldr	r2, [pc, #52]	; (800fe40 <xTaskIncrementTick+0x170>)
 800fe0a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fe0c:	697b      	ldr	r3, [r7, #20]
}
 800fe0e:	4618      	mov	r0, r3
 800fe10:	3718      	adds	r7, #24
 800fe12:	46bd      	mov	sp, r7
 800fe14:	bd80      	pop	{r7, pc}
 800fe16:	bf00      	nop
 800fe18:	20001240 	.word	0x20001240
 800fe1c:	2000121c 	.word	0x2000121c
 800fe20:	200011d0 	.word	0x200011d0
 800fe24:	200011d4 	.word	0x200011d4
 800fe28:	20001230 	.word	0x20001230
 800fe2c:	20001238 	.word	0x20001238
 800fe30:	20001220 	.word	0x20001220
 800fe34:	20000d48 	.word	0x20000d48
 800fe38:	20000d44 	.word	0x20000d44
 800fe3c:	2000122c 	.word	0x2000122c
 800fe40:	20001228 	.word	0x20001228

0800fe44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fe44:	b480      	push	{r7}
 800fe46:	b085      	sub	sp, #20
 800fe48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fe4a:	4b28      	ldr	r3, [pc, #160]	; (800feec <vTaskSwitchContext+0xa8>)
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d003      	beq.n	800fe5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fe52:	4b27      	ldr	r3, [pc, #156]	; (800fef0 <vTaskSwitchContext+0xac>)
 800fe54:	2201      	movs	r2, #1
 800fe56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fe58:	e041      	b.n	800fede <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800fe5a:	4b25      	ldr	r3, [pc, #148]	; (800fef0 <vTaskSwitchContext+0xac>)
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe60:	4b24      	ldr	r3, [pc, #144]	; (800fef4 <vTaskSwitchContext+0xb0>)
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	60fb      	str	r3, [r7, #12]
 800fe66:	e010      	b.n	800fe8a <vTaskSwitchContext+0x46>
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d10a      	bne.n	800fe84 <vTaskSwitchContext+0x40>
	__asm volatile
 800fe6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe72:	f383 8811 	msr	BASEPRI, r3
 800fe76:	f3bf 8f6f 	isb	sy
 800fe7a:	f3bf 8f4f 	dsb	sy
 800fe7e:	607b      	str	r3, [r7, #4]
}
 800fe80:	bf00      	nop
 800fe82:	e7fe      	b.n	800fe82 <vTaskSwitchContext+0x3e>
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	3b01      	subs	r3, #1
 800fe88:	60fb      	str	r3, [r7, #12]
 800fe8a:	491b      	ldr	r1, [pc, #108]	; (800fef8 <vTaskSwitchContext+0xb4>)
 800fe8c:	68fa      	ldr	r2, [r7, #12]
 800fe8e:	4613      	mov	r3, r2
 800fe90:	009b      	lsls	r3, r3, #2
 800fe92:	4413      	add	r3, r2
 800fe94:	009b      	lsls	r3, r3, #2
 800fe96:	440b      	add	r3, r1
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d0e4      	beq.n	800fe68 <vTaskSwitchContext+0x24>
 800fe9e:	68fa      	ldr	r2, [r7, #12]
 800fea0:	4613      	mov	r3, r2
 800fea2:	009b      	lsls	r3, r3, #2
 800fea4:	4413      	add	r3, r2
 800fea6:	009b      	lsls	r3, r3, #2
 800fea8:	4a13      	ldr	r2, [pc, #76]	; (800fef8 <vTaskSwitchContext+0xb4>)
 800feaa:	4413      	add	r3, r2
 800feac:	60bb      	str	r3, [r7, #8]
 800feae:	68bb      	ldr	r3, [r7, #8]
 800feb0:	685b      	ldr	r3, [r3, #4]
 800feb2:	685a      	ldr	r2, [r3, #4]
 800feb4:	68bb      	ldr	r3, [r7, #8]
 800feb6:	605a      	str	r2, [r3, #4]
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	685a      	ldr	r2, [r3, #4]
 800febc:	68bb      	ldr	r3, [r7, #8]
 800febe:	3308      	adds	r3, #8
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d104      	bne.n	800fece <vTaskSwitchContext+0x8a>
 800fec4:	68bb      	ldr	r3, [r7, #8]
 800fec6:	685b      	ldr	r3, [r3, #4]
 800fec8:	685a      	ldr	r2, [r3, #4]
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	605a      	str	r2, [r3, #4]
 800fece:	68bb      	ldr	r3, [r7, #8]
 800fed0:	685b      	ldr	r3, [r3, #4]
 800fed2:	68db      	ldr	r3, [r3, #12]
 800fed4:	4a09      	ldr	r2, [pc, #36]	; (800fefc <vTaskSwitchContext+0xb8>)
 800fed6:	6013      	str	r3, [r2, #0]
 800fed8:	4a06      	ldr	r2, [pc, #24]	; (800fef4 <vTaskSwitchContext+0xb0>)
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	6013      	str	r3, [r2, #0]
}
 800fede:	bf00      	nop
 800fee0:	3714      	adds	r7, #20
 800fee2:	46bd      	mov	sp, r7
 800fee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee8:	4770      	bx	lr
 800feea:	bf00      	nop
 800feec:	20001240 	.word	0x20001240
 800fef0:	2000122c 	.word	0x2000122c
 800fef4:	20001220 	.word	0x20001220
 800fef8:	20000d48 	.word	0x20000d48
 800fefc:	20000d44 	.word	0x20000d44

0800ff00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b084      	sub	sp, #16
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
 800ff08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d10a      	bne.n	800ff26 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ff10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff14:	f383 8811 	msr	BASEPRI, r3
 800ff18:	f3bf 8f6f 	isb	sy
 800ff1c:	f3bf 8f4f 	dsb	sy
 800ff20:	60fb      	str	r3, [r7, #12]
}
 800ff22:	bf00      	nop
 800ff24:	e7fe      	b.n	800ff24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ff26:	4b07      	ldr	r3, [pc, #28]	; (800ff44 <vTaskPlaceOnEventList+0x44>)
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	3318      	adds	r3, #24
 800ff2c:	4619      	mov	r1, r3
 800ff2e:	6878      	ldr	r0, [r7, #4]
 800ff30:	f7fe fe87 	bl	800ec42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ff34:	2101      	movs	r1, #1
 800ff36:	6838      	ldr	r0, [r7, #0]
 800ff38:	f000 fa7c 	bl	8010434 <prvAddCurrentTaskToDelayedList>
}
 800ff3c:	bf00      	nop
 800ff3e:	3710      	adds	r7, #16
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}
 800ff44:	20000d44 	.word	0x20000d44

0800ff48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b086      	sub	sp, #24
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	60f8      	str	r0, [r7, #12]
 800ff50:	60b9      	str	r1, [r7, #8]
 800ff52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d10a      	bne.n	800ff70 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ff5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff5e:	f383 8811 	msr	BASEPRI, r3
 800ff62:	f3bf 8f6f 	isb	sy
 800ff66:	f3bf 8f4f 	dsb	sy
 800ff6a:	617b      	str	r3, [r7, #20]
}
 800ff6c:	bf00      	nop
 800ff6e:	e7fe      	b.n	800ff6e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ff70:	4b0a      	ldr	r3, [pc, #40]	; (800ff9c <vTaskPlaceOnEventListRestricted+0x54>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	3318      	adds	r3, #24
 800ff76:	4619      	mov	r1, r3
 800ff78:	68f8      	ldr	r0, [r7, #12]
 800ff7a:	f7fe fe3e 	bl	800ebfa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d002      	beq.n	800ff8a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ff84:	f04f 33ff 	mov.w	r3, #4294967295
 800ff88:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ff8a:	6879      	ldr	r1, [r7, #4]
 800ff8c:	68b8      	ldr	r0, [r7, #8]
 800ff8e:	f000 fa51 	bl	8010434 <prvAddCurrentTaskToDelayedList>
	}
 800ff92:	bf00      	nop
 800ff94:	3718      	adds	r7, #24
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}
 800ff9a:	bf00      	nop
 800ff9c:	20000d44 	.word	0x20000d44

0800ffa0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b086      	sub	sp, #24
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	68db      	ldr	r3, [r3, #12]
 800ffac:	68db      	ldr	r3, [r3, #12]
 800ffae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ffb0:	693b      	ldr	r3, [r7, #16]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d10a      	bne.n	800ffcc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ffb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffba:	f383 8811 	msr	BASEPRI, r3
 800ffbe:	f3bf 8f6f 	isb	sy
 800ffc2:	f3bf 8f4f 	dsb	sy
 800ffc6:	60fb      	str	r3, [r7, #12]
}
 800ffc8:	bf00      	nop
 800ffca:	e7fe      	b.n	800ffca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ffcc:	693b      	ldr	r3, [r7, #16]
 800ffce:	3318      	adds	r3, #24
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f7fe fe6f 	bl	800ecb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ffd6:	4b1e      	ldr	r3, [pc, #120]	; (8010050 <xTaskRemoveFromEventList+0xb0>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d11d      	bne.n	801001a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ffde:	693b      	ldr	r3, [r7, #16]
 800ffe0:	3304      	adds	r3, #4
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	f7fe fe66 	bl	800ecb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ffe8:	693b      	ldr	r3, [r7, #16]
 800ffea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffec:	4b19      	ldr	r3, [pc, #100]	; (8010054 <xTaskRemoveFromEventList+0xb4>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	429a      	cmp	r2, r3
 800fff2:	d903      	bls.n	800fffc <xTaskRemoveFromEventList+0x5c>
 800fff4:	693b      	ldr	r3, [r7, #16]
 800fff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fff8:	4a16      	ldr	r2, [pc, #88]	; (8010054 <xTaskRemoveFromEventList+0xb4>)
 800fffa:	6013      	str	r3, [r2, #0]
 800fffc:	693b      	ldr	r3, [r7, #16]
 800fffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010000:	4613      	mov	r3, r2
 8010002:	009b      	lsls	r3, r3, #2
 8010004:	4413      	add	r3, r2
 8010006:	009b      	lsls	r3, r3, #2
 8010008:	4a13      	ldr	r2, [pc, #76]	; (8010058 <xTaskRemoveFromEventList+0xb8>)
 801000a:	441a      	add	r2, r3
 801000c:	693b      	ldr	r3, [r7, #16]
 801000e:	3304      	adds	r3, #4
 8010010:	4619      	mov	r1, r3
 8010012:	4610      	mov	r0, r2
 8010014:	f7fe fdf1 	bl	800ebfa <vListInsertEnd>
 8010018:	e005      	b.n	8010026 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801001a:	693b      	ldr	r3, [r7, #16]
 801001c:	3318      	adds	r3, #24
 801001e:	4619      	mov	r1, r3
 8010020:	480e      	ldr	r0, [pc, #56]	; (801005c <xTaskRemoveFromEventList+0xbc>)
 8010022:	f7fe fdea 	bl	800ebfa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010026:	693b      	ldr	r3, [r7, #16]
 8010028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801002a:	4b0d      	ldr	r3, [pc, #52]	; (8010060 <xTaskRemoveFromEventList+0xc0>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010030:	429a      	cmp	r2, r3
 8010032:	d905      	bls.n	8010040 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010034:	2301      	movs	r3, #1
 8010036:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010038:	4b0a      	ldr	r3, [pc, #40]	; (8010064 <xTaskRemoveFromEventList+0xc4>)
 801003a:	2201      	movs	r2, #1
 801003c:	601a      	str	r2, [r3, #0]
 801003e:	e001      	b.n	8010044 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010040:	2300      	movs	r3, #0
 8010042:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010044:	697b      	ldr	r3, [r7, #20]
}
 8010046:	4618      	mov	r0, r3
 8010048:	3718      	adds	r7, #24
 801004a:	46bd      	mov	sp, r7
 801004c:	bd80      	pop	{r7, pc}
 801004e:	bf00      	nop
 8010050:	20001240 	.word	0x20001240
 8010054:	20001220 	.word	0x20001220
 8010058:	20000d48 	.word	0x20000d48
 801005c:	200011d8 	.word	0x200011d8
 8010060:	20000d44 	.word	0x20000d44
 8010064:	2000122c 	.word	0x2000122c

08010068 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010068:	b480      	push	{r7}
 801006a:	b083      	sub	sp, #12
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010070:	4b06      	ldr	r3, [pc, #24]	; (801008c <vTaskInternalSetTimeOutState+0x24>)
 8010072:	681a      	ldr	r2, [r3, #0]
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010078:	4b05      	ldr	r3, [pc, #20]	; (8010090 <vTaskInternalSetTimeOutState+0x28>)
 801007a:	681a      	ldr	r2, [r3, #0]
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	605a      	str	r2, [r3, #4]
}
 8010080:	bf00      	nop
 8010082:	370c      	adds	r7, #12
 8010084:	46bd      	mov	sp, r7
 8010086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008a:	4770      	bx	lr
 801008c:	20001230 	.word	0x20001230
 8010090:	2000121c 	.word	0x2000121c

08010094 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b088      	sub	sp, #32
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
 801009c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d10a      	bne.n	80100ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80100a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a8:	f383 8811 	msr	BASEPRI, r3
 80100ac:	f3bf 8f6f 	isb	sy
 80100b0:	f3bf 8f4f 	dsb	sy
 80100b4:	613b      	str	r3, [r7, #16]
}
 80100b6:	bf00      	nop
 80100b8:	e7fe      	b.n	80100b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d10a      	bne.n	80100d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80100c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100c4:	f383 8811 	msr	BASEPRI, r3
 80100c8:	f3bf 8f6f 	isb	sy
 80100cc:	f3bf 8f4f 	dsb	sy
 80100d0:	60fb      	str	r3, [r7, #12]
}
 80100d2:	bf00      	nop
 80100d4:	e7fe      	b.n	80100d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80100d6:	f000 fe7d 	bl	8010dd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80100da:	4b1d      	ldr	r3, [pc, #116]	; (8010150 <xTaskCheckForTimeOut+0xbc>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	685b      	ldr	r3, [r3, #4]
 80100e4:	69ba      	ldr	r2, [r7, #24]
 80100e6:	1ad3      	subs	r3, r2, r3
 80100e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100f2:	d102      	bne.n	80100fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80100f4:	2300      	movs	r3, #0
 80100f6:	61fb      	str	r3, [r7, #28]
 80100f8:	e023      	b.n	8010142 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681a      	ldr	r2, [r3, #0]
 80100fe:	4b15      	ldr	r3, [pc, #84]	; (8010154 <xTaskCheckForTimeOut+0xc0>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	429a      	cmp	r2, r3
 8010104:	d007      	beq.n	8010116 <xTaskCheckForTimeOut+0x82>
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	685b      	ldr	r3, [r3, #4]
 801010a:	69ba      	ldr	r2, [r7, #24]
 801010c:	429a      	cmp	r2, r3
 801010e:	d302      	bcc.n	8010116 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010110:	2301      	movs	r3, #1
 8010112:	61fb      	str	r3, [r7, #28]
 8010114:	e015      	b.n	8010142 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	697a      	ldr	r2, [r7, #20]
 801011c:	429a      	cmp	r2, r3
 801011e:	d20b      	bcs.n	8010138 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	681a      	ldr	r2, [r3, #0]
 8010124:	697b      	ldr	r3, [r7, #20]
 8010126:	1ad2      	subs	r2, r2, r3
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801012c:	6878      	ldr	r0, [r7, #4]
 801012e:	f7ff ff9b 	bl	8010068 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010132:	2300      	movs	r3, #0
 8010134:	61fb      	str	r3, [r7, #28]
 8010136:	e004      	b.n	8010142 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	2200      	movs	r2, #0
 801013c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801013e:	2301      	movs	r3, #1
 8010140:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010142:	f000 fe77 	bl	8010e34 <vPortExitCritical>

	return xReturn;
 8010146:	69fb      	ldr	r3, [r7, #28]
}
 8010148:	4618      	mov	r0, r3
 801014a:	3720      	adds	r7, #32
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}
 8010150:	2000121c 	.word	0x2000121c
 8010154:	20001230 	.word	0x20001230

08010158 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010158:	b480      	push	{r7}
 801015a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801015c:	4b03      	ldr	r3, [pc, #12]	; (801016c <vTaskMissedYield+0x14>)
 801015e:	2201      	movs	r2, #1
 8010160:	601a      	str	r2, [r3, #0]
}
 8010162:	bf00      	nop
 8010164:	46bd      	mov	sp, r7
 8010166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016a:	4770      	bx	lr
 801016c:	2000122c 	.word	0x2000122c

08010170 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b082      	sub	sp, #8
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010178:	f000 f852 	bl	8010220 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801017c:	4b06      	ldr	r3, [pc, #24]	; (8010198 <prvIdleTask+0x28>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	2b01      	cmp	r3, #1
 8010182:	d9f9      	bls.n	8010178 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010184:	4b05      	ldr	r3, [pc, #20]	; (801019c <prvIdleTask+0x2c>)
 8010186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801018a:	601a      	str	r2, [r3, #0]
 801018c:	f3bf 8f4f 	dsb	sy
 8010190:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010194:	e7f0      	b.n	8010178 <prvIdleTask+0x8>
 8010196:	bf00      	nop
 8010198:	20000d48 	.word	0x20000d48
 801019c:	e000ed04 	.word	0xe000ed04

080101a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b082      	sub	sp, #8
 80101a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80101a6:	2300      	movs	r3, #0
 80101a8:	607b      	str	r3, [r7, #4]
 80101aa:	e00c      	b.n	80101c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80101ac:	687a      	ldr	r2, [r7, #4]
 80101ae:	4613      	mov	r3, r2
 80101b0:	009b      	lsls	r3, r3, #2
 80101b2:	4413      	add	r3, r2
 80101b4:	009b      	lsls	r3, r3, #2
 80101b6:	4a12      	ldr	r2, [pc, #72]	; (8010200 <prvInitialiseTaskLists+0x60>)
 80101b8:	4413      	add	r3, r2
 80101ba:	4618      	mov	r0, r3
 80101bc:	f7fe fcf0 	bl	800eba0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	3301      	adds	r3, #1
 80101c4:	607b      	str	r3, [r7, #4]
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	2b37      	cmp	r3, #55	; 0x37
 80101ca:	d9ef      	bls.n	80101ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80101cc:	480d      	ldr	r0, [pc, #52]	; (8010204 <prvInitialiseTaskLists+0x64>)
 80101ce:	f7fe fce7 	bl	800eba0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80101d2:	480d      	ldr	r0, [pc, #52]	; (8010208 <prvInitialiseTaskLists+0x68>)
 80101d4:	f7fe fce4 	bl	800eba0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80101d8:	480c      	ldr	r0, [pc, #48]	; (801020c <prvInitialiseTaskLists+0x6c>)
 80101da:	f7fe fce1 	bl	800eba0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80101de:	480c      	ldr	r0, [pc, #48]	; (8010210 <prvInitialiseTaskLists+0x70>)
 80101e0:	f7fe fcde 	bl	800eba0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80101e4:	480b      	ldr	r0, [pc, #44]	; (8010214 <prvInitialiseTaskLists+0x74>)
 80101e6:	f7fe fcdb 	bl	800eba0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80101ea:	4b0b      	ldr	r3, [pc, #44]	; (8010218 <prvInitialiseTaskLists+0x78>)
 80101ec:	4a05      	ldr	r2, [pc, #20]	; (8010204 <prvInitialiseTaskLists+0x64>)
 80101ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80101f0:	4b0a      	ldr	r3, [pc, #40]	; (801021c <prvInitialiseTaskLists+0x7c>)
 80101f2:	4a05      	ldr	r2, [pc, #20]	; (8010208 <prvInitialiseTaskLists+0x68>)
 80101f4:	601a      	str	r2, [r3, #0]
}
 80101f6:	bf00      	nop
 80101f8:	3708      	adds	r7, #8
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
 80101fe:	bf00      	nop
 8010200:	20000d48 	.word	0x20000d48
 8010204:	200011a8 	.word	0x200011a8
 8010208:	200011bc 	.word	0x200011bc
 801020c:	200011d8 	.word	0x200011d8
 8010210:	200011ec 	.word	0x200011ec
 8010214:	20001204 	.word	0x20001204
 8010218:	200011d0 	.word	0x200011d0
 801021c:	200011d4 	.word	0x200011d4

08010220 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010226:	e019      	b.n	801025c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010228:	f000 fdd4 	bl	8010dd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801022c:	4b10      	ldr	r3, [pc, #64]	; (8010270 <prvCheckTasksWaitingTermination+0x50>)
 801022e:	68db      	ldr	r3, [r3, #12]
 8010230:	68db      	ldr	r3, [r3, #12]
 8010232:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	3304      	adds	r3, #4
 8010238:	4618      	mov	r0, r3
 801023a:	f7fe fd3b 	bl	800ecb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801023e:	4b0d      	ldr	r3, [pc, #52]	; (8010274 <prvCheckTasksWaitingTermination+0x54>)
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	3b01      	subs	r3, #1
 8010244:	4a0b      	ldr	r2, [pc, #44]	; (8010274 <prvCheckTasksWaitingTermination+0x54>)
 8010246:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010248:	4b0b      	ldr	r3, [pc, #44]	; (8010278 <prvCheckTasksWaitingTermination+0x58>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	3b01      	subs	r3, #1
 801024e:	4a0a      	ldr	r2, [pc, #40]	; (8010278 <prvCheckTasksWaitingTermination+0x58>)
 8010250:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010252:	f000 fdef 	bl	8010e34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f000 f810 	bl	801027c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801025c:	4b06      	ldr	r3, [pc, #24]	; (8010278 <prvCheckTasksWaitingTermination+0x58>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d1e1      	bne.n	8010228 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010264:	bf00      	nop
 8010266:	bf00      	nop
 8010268:	3708      	adds	r7, #8
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}
 801026e:	bf00      	nop
 8010270:	200011ec 	.word	0x200011ec
 8010274:	20001218 	.word	0x20001218
 8010278:	20001200 	.word	0x20001200

0801027c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801027c:	b580      	push	{r7, lr}
 801027e:	b084      	sub	sp, #16
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801028a:	2b00      	cmp	r3, #0
 801028c:	d108      	bne.n	80102a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010292:	4618      	mov	r0, r3
 8010294:	f000 ff4e 	bl	8011134 <vPortFree>
				vPortFree( pxTCB );
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f000 ff4b 	bl	8011134 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801029e:	e018      	b.n	80102d2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80102a6:	2b01      	cmp	r3, #1
 80102a8:	d103      	bne.n	80102b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80102aa:	6878      	ldr	r0, [r7, #4]
 80102ac:	f000 ff42 	bl	8011134 <vPortFree>
	}
 80102b0:	e00f      	b.n	80102d2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80102b8:	2b02      	cmp	r3, #2
 80102ba:	d00a      	beq.n	80102d2 <prvDeleteTCB+0x56>
	__asm volatile
 80102bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102c0:	f383 8811 	msr	BASEPRI, r3
 80102c4:	f3bf 8f6f 	isb	sy
 80102c8:	f3bf 8f4f 	dsb	sy
 80102cc:	60fb      	str	r3, [r7, #12]
}
 80102ce:	bf00      	nop
 80102d0:	e7fe      	b.n	80102d0 <prvDeleteTCB+0x54>
	}
 80102d2:	bf00      	nop
 80102d4:	3710      	adds	r7, #16
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd80      	pop	{r7, pc}
	...

080102dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80102dc:	b480      	push	{r7}
 80102de:	b083      	sub	sp, #12
 80102e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80102e2:	4b0c      	ldr	r3, [pc, #48]	; (8010314 <prvResetNextTaskUnblockTime+0x38>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d104      	bne.n	80102f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80102ec:	4b0a      	ldr	r3, [pc, #40]	; (8010318 <prvResetNextTaskUnblockTime+0x3c>)
 80102ee:	f04f 32ff 	mov.w	r2, #4294967295
 80102f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80102f4:	e008      	b.n	8010308 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102f6:	4b07      	ldr	r3, [pc, #28]	; (8010314 <prvResetNextTaskUnblockTime+0x38>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	68db      	ldr	r3, [r3, #12]
 80102fc:	68db      	ldr	r3, [r3, #12]
 80102fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	685b      	ldr	r3, [r3, #4]
 8010304:	4a04      	ldr	r2, [pc, #16]	; (8010318 <prvResetNextTaskUnblockTime+0x3c>)
 8010306:	6013      	str	r3, [r2, #0]
}
 8010308:	bf00      	nop
 801030a:	370c      	adds	r7, #12
 801030c:	46bd      	mov	sp, r7
 801030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010312:	4770      	bx	lr
 8010314:	200011d0 	.word	0x200011d0
 8010318:	20001238 	.word	0x20001238

0801031c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801031c:	b480      	push	{r7}
 801031e:	b083      	sub	sp, #12
 8010320:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010322:	4b0b      	ldr	r3, [pc, #44]	; (8010350 <xTaskGetSchedulerState+0x34>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d102      	bne.n	8010330 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801032a:	2301      	movs	r3, #1
 801032c:	607b      	str	r3, [r7, #4]
 801032e:	e008      	b.n	8010342 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010330:	4b08      	ldr	r3, [pc, #32]	; (8010354 <xTaskGetSchedulerState+0x38>)
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d102      	bne.n	801033e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010338:	2302      	movs	r3, #2
 801033a:	607b      	str	r3, [r7, #4]
 801033c:	e001      	b.n	8010342 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801033e:	2300      	movs	r3, #0
 8010340:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010342:	687b      	ldr	r3, [r7, #4]
	}
 8010344:	4618      	mov	r0, r3
 8010346:	370c      	adds	r7, #12
 8010348:	46bd      	mov	sp, r7
 801034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034e:	4770      	bx	lr
 8010350:	20001224 	.word	0x20001224
 8010354:	20001240 	.word	0x20001240

08010358 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010358:	b580      	push	{r7, lr}
 801035a:	b086      	sub	sp, #24
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010364:	2300      	movs	r3, #0
 8010366:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d056      	beq.n	801041c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801036e:	4b2e      	ldr	r3, [pc, #184]	; (8010428 <xTaskPriorityDisinherit+0xd0>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	693a      	ldr	r2, [r7, #16]
 8010374:	429a      	cmp	r2, r3
 8010376:	d00a      	beq.n	801038e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010378:	f04f 0350 	mov.w	r3, #80	; 0x50
 801037c:	f383 8811 	msr	BASEPRI, r3
 8010380:	f3bf 8f6f 	isb	sy
 8010384:	f3bf 8f4f 	dsb	sy
 8010388:	60fb      	str	r3, [r7, #12]
}
 801038a:	bf00      	nop
 801038c:	e7fe      	b.n	801038c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801038e:	693b      	ldr	r3, [r7, #16]
 8010390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010392:	2b00      	cmp	r3, #0
 8010394:	d10a      	bne.n	80103ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010396:	f04f 0350 	mov.w	r3, #80	; 0x50
 801039a:	f383 8811 	msr	BASEPRI, r3
 801039e:	f3bf 8f6f 	isb	sy
 80103a2:	f3bf 8f4f 	dsb	sy
 80103a6:	60bb      	str	r3, [r7, #8]
}
 80103a8:	bf00      	nop
 80103aa:	e7fe      	b.n	80103aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80103ac:	693b      	ldr	r3, [r7, #16]
 80103ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80103b0:	1e5a      	subs	r2, r3, #1
 80103b2:	693b      	ldr	r3, [r7, #16]
 80103b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80103b6:	693b      	ldr	r3, [r7, #16]
 80103b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103ba:	693b      	ldr	r3, [r7, #16]
 80103bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80103be:	429a      	cmp	r2, r3
 80103c0:	d02c      	beq.n	801041c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80103c2:	693b      	ldr	r3, [r7, #16]
 80103c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d128      	bne.n	801041c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80103ca:	693b      	ldr	r3, [r7, #16]
 80103cc:	3304      	adds	r3, #4
 80103ce:	4618      	mov	r0, r3
 80103d0:	f7fe fc70 	bl	800ecb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80103d4:	693b      	ldr	r3, [r7, #16]
 80103d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80103d8:	693b      	ldr	r3, [r7, #16]
 80103da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80103dc:	693b      	ldr	r3, [r7, #16]
 80103de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80103e4:	693b      	ldr	r3, [r7, #16]
 80103e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80103e8:	693b      	ldr	r3, [r7, #16]
 80103ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103ec:	4b0f      	ldr	r3, [pc, #60]	; (801042c <xTaskPriorityDisinherit+0xd4>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	429a      	cmp	r2, r3
 80103f2:	d903      	bls.n	80103fc <xTaskPriorityDisinherit+0xa4>
 80103f4:	693b      	ldr	r3, [r7, #16]
 80103f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103f8:	4a0c      	ldr	r2, [pc, #48]	; (801042c <xTaskPriorityDisinherit+0xd4>)
 80103fa:	6013      	str	r3, [r2, #0]
 80103fc:	693b      	ldr	r3, [r7, #16]
 80103fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010400:	4613      	mov	r3, r2
 8010402:	009b      	lsls	r3, r3, #2
 8010404:	4413      	add	r3, r2
 8010406:	009b      	lsls	r3, r3, #2
 8010408:	4a09      	ldr	r2, [pc, #36]	; (8010430 <xTaskPriorityDisinherit+0xd8>)
 801040a:	441a      	add	r2, r3
 801040c:	693b      	ldr	r3, [r7, #16]
 801040e:	3304      	adds	r3, #4
 8010410:	4619      	mov	r1, r3
 8010412:	4610      	mov	r0, r2
 8010414:	f7fe fbf1 	bl	800ebfa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010418:	2301      	movs	r3, #1
 801041a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801041c:	697b      	ldr	r3, [r7, #20]
	}
 801041e:	4618      	mov	r0, r3
 8010420:	3718      	adds	r7, #24
 8010422:	46bd      	mov	sp, r7
 8010424:	bd80      	pop	{r7, pc}
 8010426:	bf00      	nop
 8010428:	20000d44 	.word	0x20000d44
 801042c:	20001220 	.word	0x20001220
 8010430:	20000d48 	.word	0x20000d48

08010434 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b084      	sub	sp, #16
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
 801043c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801043e:	4b21      	ldr	r3, [pc, #132]	; (80104c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010444:	4b20      	ldr	r3, [pc, #128]	; (80104c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	3304      	adds	r3, #4
 801044a:	4618      	mov	r0, r3
 801044c:	f7fe fc32 	bl	800ecb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010456:	d10a      	bne.n	801046e <prvAddCurrentTaskToDelayedList+0x3a>
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d007      	beq.n	801046e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801045e:	4b1a      	ldr	r3, [pc, #104]	; (80104c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	3304      	adds	r3, #4
 8010464:	4619      	mov	r1, r3
 8010466:	4819      	ldr	r0, [pc, #100]	; (80104cc <prvAddCurrentTaskToDelayedList+0x98>)
 8010468:	f7fe fbc7 	bl	800ebfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801046c:	e026      	b.n	80104bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801046e:	68fa      	ldr	r2, [r7, #12]
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	4413      	add	r3, r2
 8010474:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010476:	4b14      	ldr	r3, [pc, #80]	; (80104c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	68ba      	ldr	r2, [r7, #8]
 801047c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801047e:	68ba      	ldr	r2, [r7, #8]
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	429a      	cmp	r2, r3
 8010484:	d209      	bcs.n	801049a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010486:	4b12      	ldr	r3, [pc, #72]	; (80104d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010488:	681a      	ldr	r2, [r3, #0]
 801048a:	4b0f      	ldr	r3, [pc, #60]	; (80104c8 <prvAddCurrentTaskToDelayedList+0x94>)
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	3304      	adds	r3, #4
 8010490:	4619      	mov	r1, r3
 8010492:	4610      	mov	r0, r2
 8010494:	f7fe fbd5 	bl	800ec42 <vListInsert>
}
 8010498:	e010      	b.n	80104bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801049a:	4b0e      	ldr	r3, [pc, #56]	; (80104d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 801049c:	681a      	ldr	r2, [r3, #0]
 801049e:	4b0a      	ldr	r3, [pc, #40]	; (80104c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	3304      	adds	r3, #4
 80104a4:	4619      	mov	r1, r3
 80104a6:	4610      	mov	r0, r2
 80104a8:	f7fe fbcb 	bl	800ec42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80104ac:	4b0a      	ldr	r3, [pc, #40]	; (80104d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	68ba      	ldr	r2, [r7, #8]
 80104b2:	429a      	cmp	r2, r3
 80104b4:	d202      	bcs.n	80104bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80104b6:	4a08      	ldr	r2, [pc, #32]	; (80104d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80104b8:	68bb      	ldr	r3, [r7, #8]
 80104ba:	6013      	str	r3, [r2, #0]
}
 80104bc:	bf00      	nop
 80104be:	3710      	adds	r7, #16
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}
 80104c4:	2000121c 	.word	0x2000121c
 80104c8:	20000d44 	.word	0x20000d44
 80104cc:	20001204 	.word	0x20001204
 80104d0:	200011d4 	.word	0x200011d4
 80104d4:	200011d0 	.word	0x200011d0
 80104d8:	20001238 	.word	0x20001238

080104dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b08a      	sub	sp, #40	; 0x28
 80104e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80104e2:	2300      	movs	r3, #0
 80104e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80104e6:	f000 fb07 	bl	8010af8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80104ea:	4b1c      	ldr	r3, [pc, #112]	; (801055c <xTimerCreateTimerTask+0x80>)
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d021      	beq.n	8010536 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80104f2:	2300      	movs	r3, #0
 80104f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80104f6:	2300      	movs	r3, #0
 80104f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80104fa:	1d3a      	adds	r2, r7, #4
 80104fc:	f107 0108 	add.w	r1, r7, #8
 8010500:	f107 030c 	add.w	r3, r7, #12
 8010504:	4618      	mov	r0, r3
 8010506:	f7fe fb31 	bl	800eb6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801050a:	6879      	ldr	r1, [r7, #4]
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	68fa      	ldr	r2, [r7, #12]
 8010510:	9202      	str	r2, [sp, #8]
 8010512:	9301      	str	r3, [sp, #4]
 8010514:	2302      	movs	r3, #2
 8010516:	9300      	str	r3, [sp, #0]
 8010518:	2300      	movs	r3, #0
 801051a:	460a      	mov	r2, r1
 801051c:	4910      	ldr	r1, [pc, #64]	; (8010560 <xTimerCreateTimerTask+0x84>)
 801051e:	4811      	ldr	r0, [pc, #68]	; (8010564 <xTimerCreateTimerTask+0x88>)
 8010520:	f7ff f8de 	bl	800f6e0 <xTaskCreateStatic>
 8010524:	4603      	mov	r3, r0
 8010526:	4a10      	ldr	r2, [pc, #64]	; (8010568 <xTimerCreateTimerTask+0x8c>)
 8010528:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801052a:	4b0f      	ldr	r3, [pc, #60]	; (8010568 <xTimerCreateTimerTask+0x8c>)
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d001      	beq.n	8010536 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010532:	2301      	movs	r3, #1
 8010534:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010536:	697b      	ldr	r3, [r7, #20]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d10a      	bne.n	8010552 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801053c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010540:	f383 8811 	msr	BASEPRI, r3
 8010544:	f3bf 8f6f 	isb	sy
 8010548:	f3bf 8f4f 	dsb	sy
 801054c:	613b      	str	r3, [r7, #16]
}
 801054e:	bf00      	nop
 8010550:	e7fe      	b.n	8010550 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010552:	697b      	ldr	r3, [r7, #20]
}
 8010554:	4618      	mov	r0, r3
 8010556:	3718      	adds	r7, #24
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}
 801055c:	20001274 	.word	0x20001274
 8010560:	08013c74 	.word	0x08013c74
 8010564:	080106a1 	.word	0x080106a1
 8010568:	20001278 	.word	0x20001278

0801056c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b08a      	sub	sp, #40	; 0x28
 8010570:	af00      	add	r7, sp, #0
 8010572:	60f8      	str	r0, [r7, #12]
 8010574:	60b9      	str	r1, [r7, #8]
 8010576:	607a      	str	r2, [r7, #4]
 8010578:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801057a:	2300      	movs	r3, #0
 801057c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d10a      	bne.n	801059a <xTimerGenericCommand+0x2e>
	__asm volatile
 8010584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010588:	f383 8811 	msr	BASEPRI, r3
 801058c:	f3bf 8f6f 	isb	sy
 8010590:	f3bf 8f4f 	dsb	sy
 8010594:	623b      	str	r3, [r7, #32]
}
 8010596:	bf00      	nop
 8010598:	e7fe      	b.n	8010598 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801059a:	4b1a      	ldr	r3, [pc, #104]	; (8010604 <xTimerGenericCommand+0x98>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d02a      	beq.n	80105f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80105a2:	68bb      	ldr	r3, [r7, #8]
 80105a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80105ae:	68bb      	ldr	r3, [r7, #8]
 80105b0:	2b05      	cmp	r3, #5
 80105b2:	dc18      	bgt.n	80105e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80105b4:	f7ff feb2 	bl	801031c <xTaskGetSchedulerState>
 80105b8:	4603      	mov	r3, r0
 80105ba:	2b02      	cmp	r3, #2
 80105bc:	d109      	bne.n	80105d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80105be:	4b11      	ldr	r3, [pc, #68]	; (8010604 <xTimerGenericCommand+0x98>)
 80105c0:	6818      	ldr	r0, [r3, #0]
 80105c2:	f107 0110 	add.w	r1, r7, #16
 80105c6:	2300      	movs	r3, #0
 80105c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105ca:	f7fe fca1 	bl	800ef10 <xQueueGenericSend>
 80105ce:	6278      	str	r0, [r7, #36]	; 0x24
 80105d0:	e012      	b.n	80105f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80105d2:	4b0c      	ldr	r3, [pc, #48]	; (8010604 <xTimerGenericCommand+0x98>)
 80105d4:	6818      	ldr	r0, [r3, #0]
 80105d6:	f107 0110 	add.w	r1, r7, #16
 80105da:	2300      	movs	r3, #0
 80105dc:	2200      	movs	r2, #0
 80105de:	f7fe fc97 	bl	800ef10 <xQueueGenericSend>
 80105e2:	6278      	str	r0, [r7, #36]	; 0x24
 80105e4:	e008      	b.n	80105f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80105e6:	4b07      	ldr	r3, [pc, #28]	; (8010604 <xTimerGenericCommand+0x98>)
 80105e8:	6818      	ldr	r0, [r3, #0]
 80105ea:	f107 0110 	add.w	r1, r7, #16
 80105ee:	2300      	movs	r3, #0
 80105f0:	683a      	ldr	r2, [r7, #0]
 80105f2:	f7fe fd8b 	bl	800f10c <xQueueGenericSendFromISR>
 80105f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80105f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80105fa:	4618      	mov	r0, r3
 80105fc:	3728      	adds	r7, #40	; 0x28
 80105fe:	46bd      	mov	sp, r7
 8010600:	bd80      	pop	{r7, pc}
 8010602:	bf00      	nop
 8010604:	20001274 	.word	0x20001274

08010608 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b088      	sub	sp, #32
 801060c:	af02      	add	r7, sp, #8
 801060e:	6078      	str	r0, [r7, #4]
 8010610:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010612:	4b22      	ldr	r3, [pc, #136]	; (801069c <prvProcessExpiredTimer+0x94>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	68db      	ldr	r3, [r3, #12]
 8010618:	68db      	ldr	r3, [r3, #12]
 801061a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	3304      	adds	r3, #4
 8010620:	4618      	mov	r0, r3
 8010622:	f7fe fb47 	bl	800ecb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010626:	697b      	ldr	r3, [r7, #20]
 8010628:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801062c:	f003 0304 	and.w	r3, r3, #4
 8010630:	2b00      	cmp	r3, #0
 8010632:	d022      	beq.n	801067a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	699a      	ldr	r2, [r3, #24]
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	18d1      	adds	r1, r2, r3
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	683a      	ldr	r2, [r7, #0]
 8010640:	6978      	ldr	r0, [r7, #20]
 8010642:	f000 f8d1 	bl	80107e8 <prvInsertTimerInActiveList>
 8010646:	4603      	mov	r3, r0
 8010648:	2b00      	cmp	r3, #0
 801064a:	d01f      	beq.n	801068c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801064c:	2300      	movs	r3, #0
 801064e:	9300      	str	r3, [sp, #0]
 8010650:	2300      	movs	r3, #0
 8010652:	687a      	ldr	r2, [r7, #4]
 8010654:	2100      	movs	r1, #0
 8010656:	6978      	ldr	r0, [r7, #20]
 8010658:	f7ff ff88 	bl	801056c <xTimerGenericCommand>
 801065c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801065e:	693b      	ldr	r3, [r7, #16]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d113      	bne.n	801068c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010668:	f383 8811 	msr	BASEPRI, r3
 801066c:	f3bf 8f6f 	isb	sy
 8010670:	f3bf 8f4f 	dsb	sy
 8010674:	60fb      	str	r3, [r7, #12]
}
 8010676:	bf00      	nop
 8010678:	e7fe      	b.n	8010678 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801067a:	697b      	ldr	r3, [r7, #20]
 801067c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010680:	f023 0301 	bic.w	r3, r3, #1
 8010684:	b2da      	uxtb	r2, r3
 8010686:	697b      	ldr	r3, [r7, #20]
 8010688:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801068c:	697b      	ldr	r3, [r7, #20]
 801068e:	6a1b      	ldr	r3, [r3, #32]
 8010690:	6978      	ldr	r0, [r7, #20]
 8010692:	4798      	blx	r3
}
 8010694:	bf00      	nop
 8010696:	3718      	adds	r7, #24
 8010698:	46bd      	mov	sp, r7
 801069a:	bd80      	pop	{r7, pc}
 801069c:	2000126c 	.word	0x2000126c

080106a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b084      	sub	sp, #16
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80106a8:	f107 0308 	add.w	r3, r7, #8
 80106ac:	4618      	mov	r0, r3
 80106ae:	f000 f857 	bl	8010760 <prvGetNextExpireTime>
 80106b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80106b4:	68bb      	ldr	r3, [r7, #8]
 80106b6:	4619      	mov	r1, r3
 80106b8:	68f8      	ldr	r0, [r7, #12]
 80106ba:	f000 f803 	bl	80106c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80106be:	f000 f8d5 	bl	801086c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80106c2:	e7f1      	b.n	80106a8 <prvTimerTask+0x8>

080106c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b084      	sub	sp, #16
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
 80106cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80106ce:	f7ff fa43 	bl	800fb58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80106d2:	f107 0308 	add.w	r3, r7, #8
 80106d6:	4618      	mov	r0, r3
 80106d8:	f000 f866 	bl	80107a8 <prvSampleTimeNow>
 80106dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80106de:	68bb      	ldr	r3, [r7, #8]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d130      	bne.n	8010746 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80106e4:	683b      	ldr	r3, [r7, #0]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d10a      	bne.n	8010700 <prvProcessTimerOrBlockTask+0x3c>
 80106ea:	687a      	ldr	r2, [r7, #4]
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	429a      	cmp	r2, r3
 80106f0:	d806      	bhi.n	8010700 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80106f2:	f7ff fa3f 	bl	800fb74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80106f6:	68f9      	ldr	r1, [r7, #12]
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f7ff ff85 	bl	8010608 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80106fe:	e024      	b.n	801074a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d008      	beq.n	8010718 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010706:	4b13      	ldr	r3, [pc, #76]	; (8010754 <prvProcessTimerOrBlockTask+0x90>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d101      	bne.n	8010714 <prvProcessTimerOrBlockTask+0x50>
 8010710:	2301      	movs	r3, #1
 8010712:	e000      	b.n	8010716 <prvProcessTimerOrBlockTask+0x52>
 8010714:	2300      	movs	r3, #0
 8010716:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010718:	4b0f      	ldr	r3, [pc, #60]	; (8010758 <prvProcessTimerOrBlockTask+0x94>)
 801071a:	6818      	ldr	r0, [r3, #0]
 801071c:	687a      	ldr	r2, [r7, #4]
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	1ad3      	subs	r3, r2, r3
 8010722:	683a      	ldr	r2, [r7, #0]
 8010724:	4619      	mov	r1, r3
 8010726:	f7fe ffa7 	bl	800f678 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801072a:	f7ff fa23 	bl	800fb74 <xTaskResumeAll>
 801072e:	4603      	mov	r3, r0
 8010730:	2b00      	cmp	r3, #0
 8010732:	d10a      	bne.n	801074a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010734:	4b09      	ldr	r3, [pc, #36]	; (801075c <prvProcessTimerOrBlockTask+0x98>)
 8010736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801073a:	601a      	str	r2, [r3, #0]
 801073c:	f3bf 8f4f 	dsb	sy
 8010740:	f3bf 8f6f 	isb	sy
}
 8010744:	e001      	b.n	801074a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010746:	f7ff fa15 	bl	800fb74 <xTaskResumeAll>
}
 801074a:	bf00      	nop
 801074c:	3710      	adds	r7, #16
 801074e:	46bd      	mov	sp, r7
 8010750:	bd80      	pop	{r7, pc}
 8010752:	bf00      	nop
 8010754:	20001270 	.word	0x20001270
 8010758:	20001274 	.word	0x20001274
 801075c:	e000ed04 	.word	0xe000ed04

08010760 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010760:	b480      	push	{r7}
 8010762:	b085      	sub	sp, #20
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010768:	4b0e      	ldr	r3, [pc, #56]	; (80107a4 <prvGetNextExpireTime+0x44>)
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d101      	bne.n	8010776 <prvGetNextExpireTime+0x16>
 8010772:	2201      	movs	r2, #1
 8010774:	e000      	b.n	8010778 <prvGetNextExpireTime+0x18>
 8010776:	2200      	movs	r2, #0
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d105      	bne.n	8010790 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010784:	4b07      	ldr	r3, [pc, #28]	; (80107a4 <prvGetNextExpireTime+0x44>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	68db      	ldr	r3, [r3, #12]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	60fb      	str	r3, [r7, #12]
 801078e:	e001      	b.n	8010794 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010790:	2300      	movs	r3, #0
 8010792:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010794:	68fb      	ldr	r3, [r7, #12]
}
 8010796:	4618      	mov	r0, r3
 8010798:	3714      	adds	r7, #20
 801079a:	46bd      	mov	sp, r7
 801079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a0:	4770      	bx	lr
 80107a2:	bf00      	nop
 80107a4:	2000126c 	.word	0x2000126c

080107a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b084      	sub	sp, #16
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80107b0:	f7ff fa7e 	bl	800fcb0 <xTaskGetTickCount>
 80107b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80107b6:	4b0b      	ldr	r3, [pc, #44]	; (80107e4 <prvSampleTimeNow+0x3c>)
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	68fa      	ldr	r2, [r7, #12]
 80107bc:	429a      	cmp	r2, r3
 80107be:	d205      	bcs.n	80107cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80107c0:	f000 f936 	bl	8010a30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	2201      	movs	r2, #1
 80107c8:	601a      	str	r2, [r3, #0]
 80107ca:	e002      	b.n	80107d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2200      	movs	r2, #0
 80107d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80107d2:	4a04      	ldr	r2, [pc, #16]	; (80107e4 <prvSampleTimeNow+0x3c>)
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80107d8:	68fb      	ldr	r3, [r7, #12]
}
 80107da:	4618      	mov	r0, r3
 80107dc:	3710      	adds	r7, #16
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}
 80107e2:	bf00      	nop
 80107e4:	2000127c 	.word	0x2000127c

080107e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b086      	sub	sp, #24
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	60f8      	str	r0, [r7, #12]
 80107f0:	60b9      	str	r1, [r7, #8]
 80107f2:	607a      	str	r2, [r7, #4]
 80107f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80107f6:	2300      	movs	r3, #0
 80107f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	68ba      	ldr	r2, [r7, #8]
 80107fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	68fa      	ldr	r2, [r7, #12]
 8010804:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010806:	68ba      	ldr	r2, [r7, #8]
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	429a      	cmp	r2, r3
 801080c:	d812      	bhi.n	8010834 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801080e:	687a      	ldr	r2, [r7, #4]
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	1ad2      	subs	r2, r2, r3
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	699b      	ldr	r3, [r3, #24]
 8010818:	429a      	cmp	r2, r3
 801081a:	d302      	bcc.n	8010822 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801081c:	2301      	movs	r3, #1
 801081e:	617b      	str	r3, [r7, #20]
 8010820:	e01b      	b.n	801085a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010822:	4b10      	ldr	r3, [pc, #64]	; (8010864 <prvInsertTimerInActiveList+0x7c>)
 8010824:	681a      	ldr	r2, [r3, #0]
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	3304      	adds	r3, #4
 801082a:	4619      	mov	r1, r3
 801082c:	4610      	mov	r0, r2
 801082e:	f7fe fa08 	bl	800ec42 <vListInsert>
 8010832:	e012      	b.n	801085a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010834:	687a      	ldr	r2, [r7, #4]
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	429a      	cmp	r2, r3
 801083a:	d206      	bcs.n	801084a <prvInsertTimerInActiveList+0x62>
 801083c:	68ba      	ldr	r2, [r7, #8]
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	429a      	cmp	r2, r3
 8010842:	d302      	bcc.n	801084a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010844:	2301      	movs	r3, #1
 8010846:	617b      	str	r3, [r7, #20]
 8010848:	e007      	b.n	801085a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801084a:	4b07      	ldr	r3, [pc, #28]	; (8010868 <prvInsertTimerInActiveList+0x80>)
 801084c:	681a      	ldr	r2, [r3, #0]
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	3304      	adds	r3, #4
 8010852:	4619      	mov	r1, r3
 8010854:	4610      	mov	r0, r2
 8010856:	f7fe f9f4 	bl	800ec42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801085a:	697b      	ldr	r3, [r7, #20]
}
 801085c:	4618      	mov	r0, r3
 801085e:	3718      	adds	r7, #24
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}
 8010864:	20001270 	.word	0x20001270
 8010868:	2000126c 	.word	0x2000126c

0801086c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b08e      	sub	sp, #56	; 0x38
 8010870:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010872:	e0ca      	b.n	8010a0a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2b00      	cmp	r3, #0
 8010878:	da18      	bge.n	80108ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801087a:	1d3b      	adds	r3, r7, #4
 801087c:	3304      	adds	r3, #4
 801087e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010882:	2b00      	cmp	r3, #0
 8010884:	d10a      	bne.n	801089c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010886:	f04f 0350 	mov.w	r3, #80	; 0x50
 801088a:	f383 8811 	msr	BASEPRI, r3
 801088e:	f3bf 8f6f 	isb	sy
 8010892:	f3bf 8f4f 	dsb	sy
 8010896:	61fb      	str	r3, [r7, #28]
}
 8010898:	bf00      	nop
 801089a:	e7fe      	b.n	801089a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801089c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80108a2:	6850      	ldr	r0, [r2, #4]
 80108a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80108a6:	6892      	ldr	r2, [r2, #8]
 80108a8:	4611      	mov	r1, r2
 80108aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	f2c0 80aa 	blt.w	8010a08 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80108b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ba:	695b      	ldr	r3, [r3, #20]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d004      	beq.n	80108ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80108c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c2:	3304      	adds	r3, #4
 80108c4:	4618      	mov	r0, r3
 80108c6:	f7fe f9f5 	bl	800ecb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80108ca:	463b      	mov	r3, r7
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7ff ff6b 	bl	80107a8 <prvSampleTimeNow>
 80108d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2b09      	cmp	r3, #9
 80108d8:	f200 8097 	bhi.w	8010a0a <prvProcessReceivedCommands+0x19e>
 80108dc:	a201      	add	r2, pc, #4	; (adr r2, 80108e4 <prvProcessReceivedCommands+0x78>)
 80108de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108e2:	bf00      	nop
 80108e4:	0801090d 	.word	0x0801090d
 80108e8:	0801090d 	.word	0x0801090d
 80108ec:	0801090d 	.word	0x0801090d
 80108f0:	08010981 	.word	0x08010981
 80108f4:	08010995 	.word	0x08010995
 80108f8:	080109df 	.word	0x080109df
 80108fc:	0801090d 	.word	0x0801090d
 8010900:	0801090d 	.word	0x0801090d
 8010904:	08010981 	.word	0x08010981
 8010908:	08010995 	.word	0x08010995
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801090c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801090e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010912:	f043 0301 	orr.w	r3, r3, #1
 8010916:	b2da      	uxtb	r2, r3
 8010918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801091a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801091e:	68ba      	ldr	r2, [r7, #8]
 8010920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010922:	699b      	ldr	r3, [r3, #24]
 8010924:	18d1      	adds	r1, r2, r3
 8010926:	68bb      	ldr	r3, [r7, #8]
 8010928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801092a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801092c:	f7ff ff5c 	bl	80107e8 <prvInsertTimerInActiveList>
 8010930:	4603      	mov	r3, r0
 8010932:	2b00      	cmp	r3, #0
 8010934:	d069      	beq.n	8010a0a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010938:	6a1b      	ldr	r3, [r3, #32]
 801093a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801093c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801093e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010944:	f003 0304 	and.w	r3, r3, #4
 8010948:	2b00      	cmp	r3, #0
 801094a:	d05e      	beq.n	8010a0a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801094c:	68ba      	ldr	r2, [r7, #8]
 801094e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010950:	699b      	ldr	r3, [r3, #24]
 8010952:	441a      	add	r2, r3
 8010954:	2300      	movs	r3, #0
 8010956:	9300      	str	r3, [sp, #0]
 8010958:	2300      	movs	r3, #0
 801095a:	2100      	movs	r1, #0
 801095c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801095e:	f7ff fe05 	bl	801056c <xTimerGenericCommand>
 8010962:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010964:	6a3b      	ldr	r3, [r7, #32]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d14f      	bne.n	8010a0a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801096a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801096e:	f383 8811 	msr	BASEPRI, r3
 8010972:	f3bf 8f6f 	isb	sy
 8010976:	f3bf 8f4f 	dsb	sy
 801097a:	61bb      	str	r3, [r7, #24]
}
 801097c:	bf00      	nop
 801097e:	e7fe      	b.n	801097e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010982:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010986:	f023 0301 	bic.w	r3, r3, #1
 801098a:	b2da      	uxtb	r2, r3
 801098c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801098e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010992:	e03a      	b.n	8010a0a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010996:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801099a:	f043 0301 	orr.w	r3, r3, #1
 801099e:	b2da      	uxtb	r2, r3
 80109a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80109a6:	68ba      	ldr	r2, [r7, #8]
 80109a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80109ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109ae:	699b      	ldr	r3, [r3, #24]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d10a      	bne.n	80109ca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80109b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109b8:	f383 8811 	msr	BASEPRI, r3
 80109bc:	f3bf 8f6f 	isb	sy
 80109c0:	f3bf 8f4f 	dsb	sy
 80109c4:	617b      	str	r3, [r7, #20]
}
 80109c6:	bf00      	nop
 80109c8:	e7fe      	b.n	80109c8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80109ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109cc:	699a      	ldr	r2, [r3, #24]
 80109ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d0:	18d1      	adds	r1, r2, r3
 80109d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80109d8:	f7ff ff06 	bl	80107e8 <prvInsertTimerInActiveList>
					break;
 80109dc:	e015      	b.n	8010a0a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80109de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80109e4:	f003 0302 	and.w	r3, r3, #2
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d103      	bne.n	80109f4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80109ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80109ee:	f000 fba1 	bl	8011134 <vPortFree>
 80109f2:	e00a      	b.n	8010a0a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80109f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80109fa:	f023 0301 	bic.w	r3, r3, #1
 80109fe:	b2da      	uxtb	r2, r3
 8010a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010a06:	e000      	b.n	8010a0a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010a08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010a0a:	4b08      	ldr	r3, [pc, #32]	; (8010a2c <prvProcessReceivedCommands+0x1c0>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	1d39      	adds	r1, r7, #4
 8010a10:	2200      	movs	r2, #0
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7fe fc16 	bl	800f244 <xQueueReceive>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	f47f af2a 	bne.w	8010874 <prvProcessReceivedCommands+0x8>
	}
}
 8010a20:	bf00      	nop
 8010a22:	bf00      	nop
 8010a24:	3730      	adds	r7, #48	; 0x30
 8010a26:	46bd      	mov	sp, r7
 8010a28:	bd80      	pop	{r7, pc}
 8010a2a:	bf00      	nop
 8010a2c:	20001274 	.word	0x20001274

08010a30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b088      	sub	sp, #32
 8010a34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010a36:	e048      	b.n	8010aca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010a38:	4b2d      	ldr	r3, [pc, #180]	; (8010af0 <prvSwitchTimerLists+0xc0>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	68db      	ldr	r3, [r3, #12]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a42:	4b2b      	ldr	r3, [pc, #172]	; (8010af0 <prvSwitchTimerLists+0xc0>)
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	68db      	ldr	r3, [r3, #12]
 8010a48:	68db      	ldr	r3, [r3, #12]
 8010a4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	3304      	adds	r3, #4
 8010a50:	4618      	mov	r0, r3
 8010a52:	f7fe f92f 	bl	800ecb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	6a1b      	ldr	r3, [r3, #32]
 8010a5a:	68f8      	ldr	r0, [r7, #12]
 8010a5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a64:	f003 0304 	and.w	r3, r3, #4
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d02e      	beq.n	8010aca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	699b      	ldr	r3, [r3, #24]
 8010a70:	693a      	ldr	r2, [r7, #16]
 8010a72:	4413      	add	r3, r2
 8010a74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010a76:	68ba      	ldr	r2, [r7, #8]
 8010a78:	693b      	ldr	r3, [r7, #16]
 8010a7a:	429a      	cmp	r2, r3
 8010a7c:	d90e      	bls.n	8010a9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	68ba      	ldr	r2, [r7, #8]
 8010a82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	68fa      	ldr	r2, [r7, #12]
 8010a88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010a8a:	4b19      	ldr	r3, [pc, #100]	; (8010af0 <prvSwitchTimerLists+0xc0>)
 8010a8c:	681a      	ldr	r2, [r3, #0]
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	3304      	adds	r3, #4
 8010a92:	4619      	mov	r1, r3
 8010a94:	4610      	mov	r0, r2
 8010a96:	f7fe f8d4 	bl	800ec42 <vListInsert>
 8010a9a:	e016      	b.n	8010aca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	9300      	str	r3, [sp, #0]
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	693a      	ldr	r2, [r7, #16]
 8010aa4:	2100      	movs	r1, #0
 8010aa6:	68f8      	ldr	r0, [r7, #12]
 8010aa8:	f7ff fd60 	bl	801056c <xTimerGenericCommand>
 8010aac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d10a      	bne.n	8010aca <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ab8:	f383 8811 	msr	BASEPRI, r3
 8010abc:	f3bf 8f6f 	isb	sy
 8010ac0:	f3bf 8f4f 	dsb	sy
 8010ac4:	603b      	str	r3, [r7, #0]
}
 8010ac6:	bf00      	nop
 8010ac8:	e7fe      	b.n	8010ac8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010aca:	4b09      	ldr	r3, [pc, #36]	; (8010af0 <prvSwitchTimerLists+0xc0>)
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d1b1      	bne.n	8010a38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010ad4:	4b06      	ldr	r3, [pc, #24]	; (8010af0 <prvSwitchTimerLists+0xc0>)
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010ada:	4b06      	ldr	r3, [pc, #24]	; (8010af4 <prvSwitchTimerLists+0xc4>)
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	4a04      	ldr	r2, [pc, #16]	; (8010af0 <prvSwitchTimerLists+0xc0>)
 8010ae0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010ae2:	4a04      	ldr	r2, [pc, #16]	; (8010af4 <prvSwitchTimerLists+0xc4>)
 8010ae4:	697b      	ldr	r3, [r7, #20]
 8010ae6:	6013      	str	r3, [r2, #0]
}
 8010ae8:	bf00      	nop
 8010aea:	3718      	adds	r7, #24
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}
 8010af0:	2000126c 	.word	0x2000126c
 8010af4:	20001270 	.word	0x20001270

08010af8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b082      	sub	sp, #8
 8010afc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010afe:	f000 f969 	bl	8010dd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010b02:	4b15      	ldr	r3, [pc, #84]	; (8010b58 <prvCheckForValidListAndQueue+0x60>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d120      	bne.n	8010b4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010b0a:	4814      	ldr	r0, [pc, #80]	; (8010b5c <prvCheckForValidListAndQueue+0x64>)
 8010b0c:	f7fe f848 	bl	800eba0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010b10:	4813      	ldr	r0, [pc, #76]	; (8010b60 <prvCheckForValidListAndQueue+0x68>)
 8010b12:	f7fe f845 	bl	800eba0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010b16:	4b13      	ldr	r3, [pc, #76]	; (8010b64 <prvCheckForValidListAndQueue+0x6c>)
 8010b18:	4a10      	ldr	r2, [pc, #64]	; (8010b5c <prvCheckForValidListAndQueue+0x64>)
 8010b1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010b1c:	4b12      	ldr	r3, [pc, #72]	; (8010b68 <prvCheckForValidListAndQueue+0x70>)
 8010b1e:	4a10      	ldr	r2, [pc, #64]	; (8010b60 <prvCheckForValidListAndQueue+0x68>)
 8010b20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010b22:	2300      	movs	r3, #0
 8010b24:	9300      	str	r3, [sp, #0]
 8010b26:	4b11      	ldr	r3, [pc, #68]	; (8010b6c <prvCheckForValidListAndQueue+0x74>)
 8010b28:	4a11      	ldr	r2, [pc, #68]	; (8010b70 <prvCheckForValidListAndQueue+0x78>)
 8010b2a:	2110      	movs	r1, #16
 8010b2c:	200a      	movs	r0, #10
 8010b2e:	f7fe f953 	bl	800edd8 <xQueueGenericCreateStatic>
 8010b32:	4603      	mov	r3, r0
 8010b34:	4a08      	ldr	r2, [pc, #32]	; (8010b58 <prvCheckForValidListAndQueue+0x60>)
 8010b36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010b38:	4b07      	ldr	r3, [pc, #28]	; (8010b58 <prvCheckForValidListAndQueue+0x60>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d005      	beq.n	8010b4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010b40:	4b05      	ldr	r3, [pc, #20]	; (8010b58 <prvCheckForValidListAndQueue+0x60>)
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	490b      	ldr	r1, [pc, #44]	; (8010b74 <prvCheckForValidListAndQueue+0x7c>)
 8010b46:	4618      	mov	r0, r3
 8010b48:	f7fe fd6c 	bl	800f624 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010b4c:	f000 f972 	bl	8010e34 <vPortExitCritical>
}
 8010b50:	bf00      	nop
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}
 8010b56:	bf00      	nop
 8010b58:	20001274 	.word	0x20001274
 8010b5c:	20001244 	.word	0x20001244
 8010b60:	20001258 	.word	0x20001258
 8010b64:	2000126c 	.word	0x2000126c
 8010b68:	20001270 	.word	0x20001270
 8010b6c:	20001320 	.word	0x20001320
 8010b70:	20001280 	.word	0x20001280
 8010b74:	08013c7c 	.word	0x08013c7c

08010b78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010b78:	b480      	push	{r7}
 8010b7a:	b085      	sub	sp, #20
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	60f8      	str	r0, [r7, #12]
 8010b80:	60b9      	str	r1, [r7, #8]
 8010b82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	3b04      	subs	r3, #4
 8010b88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010b90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	3b04      	subs	r3, #4
 8010b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	f023 0201 	bic.w	r2, r3, #1
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	3b04      	subs	r3, #4
 8010ba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010ba8:	4a0c      	ldr	r2, [pc, #48]	; (8010bdc <pxPortInitialiseStack+0x64>)
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	3b14      	subs	r3, #20
 8010bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010bb4:	687a      	ldr	r2, [r7, #4]
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	3b04      	subs	r3, #4
 8010bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	f06f 0202 	mvn.w	r2, #2
 8010bc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	3b20      	subs	r3, #32
 8010bcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010bce:	68fb      	ldr	r3, [r7, #12]
}
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	3714      	adds	r7, #20
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bda:	4770      	bx	lr
 8010bdc:	08010be1 	.word	0x08010be1

08010be0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010be0:	b480      	push	{r7}
 8010be2:	b085      	sub	sp, #20
 8010be4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010be6:	2300      	movs	r3, #0
 8010be8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010bea:	4b12      	ldr	r3, [pc, #72]	; (8010c34 <prvTaskExitError+0x54>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bf2:	d00a      	beq.n	8010c0a <prvTaskExitError+0x2a>
	__asm volatile
 8010bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bf8:	f383 8811 	msr	BASEPRI, r3
 8010bfc:	f3bf 8f6f 	isb	sy
 8010c00:	f3bf 8f4f 	dsb	sy
 8010c04:	60fb      	str	r3, [r7, #12]
}
 8010c06:	bf00      	nop
 8010c08:	e7fe      	b.n	8010c08 <prvTaskExitError+0x28>
	__asm volatile
 8010c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c0e:	f383 8811 	msr	BASEPRI, r3
 8010c12:	f3bf 8f6f 	isb	sy
 8010c16:	f3bf 8f4f 	dsb	sy
 8010c1a:	60bb      	str	r3, [r7, #8]
}
 8010c1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010c1e:	bf00      	nop
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d0fc      	beq.n	8010c20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010c26:	bf00      	nop
 8010c28:	bf00      	nop
 8010c2a:	3714      	adds	r7, #20
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c32:	4770      	bx	lr
 8010c34:	200003e0 	.word	0x200003e0
	...

08010c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010c40:	4b07      	ldr	r3, [pc, #28]	; (8010c60 <pxCurrentTCBConst2>)
 8010c42:	6819      	ldr	r1, [r3, #0]
 8010c44:	6808      	ldr	r0, [r1, #0]
 8010c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c4a:	f380 8809 	msr	PSP, r0
 8010c4e:	f3bf 8f6f 	isb	sy
 8010c52:	f04f 0000 	mov.w	r0, #0
 8010c56:	f380 8811 	msr	BASEPRI, r0
 8010c5a:	4770      	bx	lr
 8010c5c:	f3af 8000 	nop.w

08010c60 <pxCurrentTCBConst2>:
 8010c60:	20000d44 	.word	0x20000d44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010c64:	bf00      	nop
 8010c66:	bf00      	nop

08010c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010c68:	4808      	ldr	r0, [pc, #32]	; (8010c8c <prvPortStartFirstTask+0x24>)
 8010c6a:	6800      	ldr	r0, [r0, #0]
 8010c6c:	6800      	ldr	r0, [r0, #0]
 8010c6e:	f380 8808 	msr	MSP, r0
 8010c72:	f04f 0000 	mov.w	r0, #0
 8010c76:	f380 8814 	msr	CONTROL, r0
 8010c7a:	b662      	cpsie	i
 8010c7c:	b661      	cpsie	f
 8010c7e:	f3bf 8f4f 	dsb	sy
 8010c82:	f3bf 8f6f 	isb	sy
 8010c86:	df00      	svc	0
 8010c88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010c8a:	bf00      	nop
 8010c8c:	e000ed08 	.word	0xe000ed08

08010c90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b086      	sub	sp, #24
 8010c94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010c96:	4b46      	ldr	r3, [pc, #280]	; (8010db0 <xPortStartScheduler+0x120>)
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	4a46      	ldr	r2, [pc, #280]	; (8010db4 <xPortStartScheduler+0x124>)
 8010c9c:	4293      	cmp	r3, r2
 8010c9e:	d10a      	bne.n	8010cb6 <xPortStartScheduler+0x26>
	__asm volatile
 8010ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ca4:	f383 8811 	msr	BASEPRI, r3
 8010ca8:	f3bf 8f6f 	isb	sy
 8010cac:	f3bf 8f4f 	dsb	sy
 8010cb0:	613b      	str	r3, [r7, #16]
}
 8010cb2:	bf00      	nop
 8010cb4:	e7fe      	b.n	8010cb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010cb6:	4b3e      	ldr	r3, [pc, #248]	; (8010db0 <xPortStartScheduler+0x120>)
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	4a3f      	ldr	r2, [pc, #252]	; (8010db8 <xPortStartScheduler+0x128>)
 8010cbc:	4293      	cmp	r3, r2
 8010cbe:	d10a      	bne.n	8010cd6 <xPortStartScheduler+0x46>
	__asm volatile
 8010cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc4:	f383 8811 	msr	BASEPRI, r3
 8010cc8:	f3bf 8f6f 	isb	sy
 8010ccc:	f3bf 8f4f 	dsb	sy
 8010cd0:	60fb      	str	r3, [r7, #12]
}
 8010cd2:	bf00      	nop
 8010cd4:	e7fe      	b.n	8010cd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010cd6:	4b39      	ldr	r3, [pc, #228]	; (8010dbc <xPortStartScheduler+0x12c>)
 8010cd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010cda:	697b      	ldr	r3, [r7, #20]
 8010cdc:	781b      	ldrb	r3, [r3, #0]
 8010cde:	b2db      	uxtb	r3, r3
 8010ce0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010ce2:	697b      	ldr	r3, [r7, #20]
 8010ce4:	22ff      	movs	r2, #255	; 0xff
 8010ce6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010ce8:	697b      	ldr	r3, [r7, #20]
 8010cea:	781b      	ldrb	r3, [r3, #0]
 8010cec:	b2db      	uxtb	r3, r3
 8010cee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010cf0:	78fb      	ldrb	r3, [r7, #3]
 8010cf2:	b2db      	uxtb	r3, r3
 8010cf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010cf8:	b2da      	uxtb	r2, r3
 8010cfa:	4b31      	ldr	r3, [pc, #196]	; (8010dc0 <xPortStartScheduler+0x130>)
 8010cfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010cfe:	4b31      	ldr	r3, [pc, #196]	; (8010dc4 <xPortStartScheduler+0x134>)
 8010d00:	2207      	movs	r2, #7
 8010d02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010d04:	e009      	b.n	8010d1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010d06:	4b2f      	ldr	r3, [pc, #188]	; (8010dc4 <xPortStartScheduler+0x134>)
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	3b01      	subs	r3, #1
 8010d0c:	4a2d      	ldr	r2, [pc, #180]	; (8010dc4 <xPortStartScheduler+0x134>)
 8010d0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010d10:	78fb      	ldrb	r3, [r7, #3]
 8010d12:	b2db      	uxtb	r3, r3
 8010d14:	005b      	lsls	r3, r3, #1
 8010d16:	b2db      	uxtb	r3, r3
 8010d18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010d1a:	78fb      	ldrb	r3, [r7, #3]
 8010d1c:	b2db      	uxtb	r3, r3
 8010d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d22:	2b80      	cmp	r3, #128	; 0x80
 8010d24:	d0ef      	beq.n	8010d06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010d26:	4b27      	ldr	r3, [pc, #156]	; (8010dc4 <xPortStartScheduler+0x134>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	f1c3 0307 	rsb	r3, r3, #7
 8010d2e:	2b04      	cmp	r3, #4
 8010d30:	d00a      	beq.n	8010d48 <xPortStartScheduler+0xb8>
	__asm volatile
 8010d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d36:	f383 8811 	msr	BASEPRI, r3
 8010d3a:	f3bf 8f6f 	isb	sy
 8010d3e:	f3bf 8f4f 	dsb	sy
 8010d42:	60bb      	str	r3, [r7, #8]
}
 8010d44:	bf00      	nop
 8010d46:	e7fe      	b.n	8010d46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010d48:	4b1e      	ldr	r3, [pc, #120]	; (8010dc4 <xPortStartScheduler+0x134>)
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	021b      	lsls	r3, r3, #8
 8010d4e:	4a1d      	ldr	r2, [pc, #116]	; (8010dc4 <xPortStartScheduler+0x134>)
 8010d50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010d52:	4b1c      	ldr	r3, [pc, #112]	; (8010dc4 <xPortStartScheduler+0x134>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010d5a:	4a1a      	ldr	r2, [pc, #104]	; (8010dc4 <xPortStartScheduler+0x134>)
 8010d5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	b2da      	uxtb	r2, r3
 8010d62:	697b      	ldr	r3, [r7, #20]
 8010d64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010d66:	4b18      	ldr	r3, [pc, #96]	; (8010dc8 <xPortStartScheduler+0x138>)
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	4a17      	ldr	r2, [pc, #92]	; (8010dc8 <xPortStartScheduler+0x138>)
 8010d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010d70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010d72:	4b15      	ldr	r3, [pc, #84]	; (8010dc8 <xPortStartScheduler+0x138>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	4a14      	ldr	r2, [pc, #80]	; (8010dc8 <xPortStartScheduler+0x138>)
 8010d78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010d7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010d7e:	f000 f8dd 	bl	8010f3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010d82:	4b12      	ldr	r3, [pc, #72]	; (8010dcc <xPortStartScheduler+0x13c>)
 8010d84:	2200      	movs	r2, #0
 8010d86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010d88:	f000 f8fc 	bl	8010f84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010d8c:	4b10      	ldr	r3, [pc, #64]	; (8010dd0 <xPortStartScheduler+0x140>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	4a0f      	ldr	r2, [pc, #60]	; (8010dd0 <xPortStartScheduler+0x140>)
 8010d92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010d96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010d98:	f7ff ff66 	bl	8010c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010d9c:	f7ff f852 	bl	800fe44 <vTaskSwitchContext>
	prvTaskExitError();
 8010da0:	f7ff ff1e 	bl	8010be0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010da4:	2300      	movs	r3, #0
}
 8010da6:	4618      	mov	r0, r3
 8010da8:	3718      	adds	r7, #24
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}
 8010dae:	bf00      	nop
 8010db0:	e000ed00 	.word	0xe000ed00
 8010db4:	410fc271 	.word	0x410fc271
 8010db8:	410fc270 	.word	0x410fc270
 8010dbc:	e000e400 	.word	0xe000e400
 8010dc0:	20001370 	.word	0x20001370
 8010dc4:	20001374 	.word	0x20001374
 8010dc8:	e000ed20 	.word	0xe000ed20
 8010dcc:	200003e0 	.word	0x200003e0
 8010dd0:	e000ef34 	.word	0xe000ef34

08010dd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010dd4:	b480      	push	{r7}
 8010dd6:	b083      	sub	sp, #12
 8010dd8:	af00      	add	r7, sp, #0
	__asm volatile
 8010dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dde:	f383 8811 	msr	BASEPRI, r3
 8010de2:	f3bf 8f6f 	isb	sy
 8010de6:	f3bf 8f4f 	dsb	sy
 8010dea:	607b      	str	r3, [r7, #4]
}
 8010dec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010dee:	4b0f      	ldr	r3, [pc, #60]	; (8010e2c <vPortEnterCritical+0x58>)
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	3301      	adds	r3, #1
 8010df4:	4a0d      	ldr	r2, [pc, #52]	; (8010e2c <vPortEnterCritical+0x58>)
 8010df6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010df8:	4b0c      	ldr	r3, [pc, #48]	; (8010e2c <vPortEnterCritical+0x58>)
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	2b01      	cmp	r3, #1
 8010dfe:	d10f      	bne.n	8010e20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010e00:	4b0b      	ldr	r3, [pc, #44]	; (8010e30 <vPortEnterCritical+0x5c>)
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	b2db      	uxtb	r3, r3
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d00a      	beq.n	8010e20 <vPortEnterCritical+0x4c>
	__asm volatile
 8010e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e0e:	f383 8811 	msr	BASEPRI, r3
 8010e12:	f3bf 8f6f 	isb	sy
 8010e16:	f3bf 8f4f 	dsb	sy
 8010e1a:	603b      	str	r3, [r7, #0]
}
 8010e1c:	bf00      	nop
 8010e1e:	e7fe      	b.n	8010e1e <vPortEnterCritical+0x4a>
	}
}
 8010e20:	bf00      	nop
 8010e22:	370c      	adds	r7, #12
 8010e24:	46bd      	mov	sp, r7
 8010e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2a:	4770      	bx	lr
 8010e2c:	200003e0 	.word	0x200003e0
 8010e30:	e000ed04 	.word	0xe000ed04

08010e34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010e34:	b480      	push	{r7}
 8010e36:	b083      	sub	sp, #12
 8010e38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010e3a:	4b12      	ldr	r3, [pc, #72]	; (8010e84 <vPortExitCritical+0x50>)
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d10a      	bne.n	8010e58 <vPortExitCritical+0x24>
	__asm volatile
 8010e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e46:	f383 8811 	msr	BASEPRI, r3
 8010e4a:	f3bf 8f6f 	isb	sy
 8010e4e:	f3bf 8f4f 	dsb	sy
 8010e52:	607b      	str	r3, [r7, #4]
}
 8010e54:	bf00      	nop
 8010e56:	e7fe      	b.n	8010e56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010e58:	4b0a      	ldr	r3, [pc, #40]	; (8010e84 <vPortExitCritical+0x50>)
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	3b01      	subs	r3, #1
 8010e5e:	4a09      	ldr	r2, [pc, #36]	; (8010e84 <vPortExitCritical+0x50>)
 8010e60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010e62:	4b08      	ldr	r3, [pc, #32]	; (8010e84 <vPortExitCritical+0x50>)
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d105      	bne.n	8010e76 <vPortExitCritical+0x42>
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	f383 8811 	msr	BASEPRI, r3
}
 8010e74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010e76:	bf00      	nop
 8010e78:	370c      	adds	r7, #12
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e80:	4770      	bx	lr
 8010e82:	bf00      	nop
 8010e84:	200003e0 	.word	0x200003e0
	...

08010e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010e90:	f3ef 8009 	mrs	r0, PSP
 8010e94:	f3bf 8f6f 	isb	sy
 8010e98:	4b15      	ldr	r3, [pc, #84]	; (8010ef0 <pxCurrentTCBConst>)
 8010e9a:	681a      	ldr	r2, [r3, #0]
 8010e9c:	f01e 0f10 	tst.w	lr, #16
 8010ea0:	bf08      	it	eq
 8010ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eaa:	6010      	str	r0, [r2, #0]
 8010eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010eb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010eb4:	f380 8811 	msr	BASEPRI, r0
 8010eb8:	f3bf 8f4f 	dsb	sy
 8010ebc:	f3bf 8f6f 	isb	sy
 8010ec0:	f7fe ffc0 	bl	800fe44 <vTaskSwitchContext>
 8010ec4:	f04f 0000 	mov.w	r0, #0
 8010ec8:	f380 8811 	msr	BASEPRI, r0
 8010ecc:	bc09      	pop	{r0, r3}
 8010ece:	6819      	ldr	r1, [r3, #0]
 8010ed0:	6808      	ldr	r0, [r1, #0]
 8010ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ed6:	f01e 0f10 	tst.w	lr, #16
 8010eda:	bf08      	it	eq
 8010edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010ee0:	f380 8809 	msr	PSP, r0
 8010ee4:	f3bf 8f6f 	isb	sy
 8010ee8:	4770      	bx	lr
 8010eea:	bf00      	nop
 8010eec:	f3af 8000 	nop.w

08010ef0 <pxCurrentTCBConst>:
 8010ef0:	20000d44 	.word	0x20000d44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010ef4:	bf00      	nop
 8010ef6:	bf00      	nop

08010ef8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b082      	sub	sp, #8
 8010efc:	af00      	add	r7, sp, #0
	__asm volatile
 8010efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f02:	f383 8811 	msr	BASEPRI, r3
 8010f06:	f3bf 8f6f 	isb	sy
 8010f0a:	f3bf 8f4f 	dsb	sy
 8010f0e:	607b      	str	r3, [r7, #4]
}
 8010f10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010f12:	f7fe fedd 	bl	800fcd0 <xTaskIncrementTick>
 8010f16:	4603      	mov	r3, r0
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d003      	beq.n	8010f24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010f1c:	4b06      	ldr	r3, [pc, #24]	; (8010f38 <xPortSysTickHandler+0x40>)
 8010f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f22:	601a      	str	r2, [r3, #0]
 8010f24:	2300      	movs	r3, #0
 8010f26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	f383 8811 	msr	BASEPRI, r3
}
 8010f2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010f30:	bf00      	nop
 8010f32:	3708      	adds	r7, #8
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}
 8010f38:	e000ed04 	.word	0xe000ed04

08010f3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010f3c:	b480      	push	{r7}
 8010f3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010f40:	4b0b      	ldr	r3, [pc, #44]	; (8010f70 <vPortSetupTimerInterrupt+0x34>)
 8010f42:	2200      	movs	r2, #0
 8010f44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010f46:	4b0b      	ldr	r3, [pc, #44]	; (8010f74 <vPortSetupTimerInterrupt+0x38>)
 8010f48:	2200      	movs	r2, #0
 8010f4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010f4c:	4b0a      	ldr	r3, [pc, #40]	; (8010f78 <vPortSetupTimerInterrupt+0x3c>)
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	4a0a      	ldr	r2, [pc, #40]	; (8010f7c <vPortSetupTimerInterrupt+0x40>)
 8010f52:	fba2 2303 	umull	r2, r3, r2, r3
 8010f56:	099b      	lsrs	r3, r3, #6
 8010f58:	4a09      	ldr	r2, [pc, #36]	; (8010f80 <vPortSetupTimerInterrupt+0x44>)
 8010f5a:	3b01      	subs	r3, #1
 8010f5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010f5e:	4b04      	ldr	r3, [pc, #16]	; (8010f70 <vPortSetupTimerInterrupt+0x34>)
 8010f60:	2207      	movs	r2, #7
 8010f62:	601a      	str	r2, [r3, #0]
}
 8010f64:	bf00      	nop
 8010f66:	46bd      	mov	sp, r7
 8010f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6c:	4770      	bx	lr
 8010f6e:	bf00      	nop
 8010f70:	e000e010 	.word	0xe000e010
 8010f74:	e000e018 	.word	0xe000e018
 8010f78:	200003d4 	.word	0x200003d4
 8010f7c:	10624dd3 	.word	0x10624dd3
 8010f80:	e000e014 	.word	0xe000e014

08010f84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010f84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010f94 <vPortEnableVFP+0x10>
 8010f88:	6801      	ldr	r1, [r0, #0]
 8010f8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010f8e:	6001      	str	r1, [r0, #0]
 8010f90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010f92:	bf00      	nop
 8010f94:	e000ed88 	.word	0xe000ed88

08010f98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010f98:	b480      	push	{r7}
 8010f9a:	b085      	sub	sp, #20
 8010f9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010f9e:	f3ef 8305 	mrs	r3, IPSR
 8010fa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	2b0f      	cmp	r3, #15
 8010fa8:	d914      	bls.n	8010fd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010faa:	4a17      	ldr	r2, [pc, #92]	; (8011008 <vPortValidateInterruptPriority+0x70>)
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	4413      	add	r3, r2
 8010fb0:	781b      	ldrb	r3, [r3, #0]
 8010fb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010fb4:	4b15      	ldr	r3, [pc, #84]	; (801100c <vPortValidateInterruptPriority+0x74>)
 8010fb6:	781b      	ldrb	r3, [r3, #0]
 8010fb8:	7afa      	ldrb	r2, [r7, #11]
 8010fba:	429a      	cmp	r2, r3
 8010fbc:	d20a      	bcs.n	8010fd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fc2:	f383 8811 	msr	BASEPRI, r3
 8010fc6:	f3bf 8f6f 	isb	sy
 8010fca:	f3bf 8f4f 	dsb	sy
 8010fce:	607b      	str	r3, [r7, #4]
}
 8010fd0:	bf00      	nop
 8010fd2:	e7fe      	b.n	8010fd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010fd4:	4b0e      	ldr	r3, [pc, #56]	; (8011010 <vPortValidateInterruptPriority+0x78>)
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010fdc:	4b0d      	ldr	r3, [pc, #52]	; (8011014 <vPortValidateInterruptPriority+0x7c>)
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	d90a      	bls.n	8010ffa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fe8:	f383 8811 	msr	BASEPRI, r3
 8010fec:	f3bf 8f6f 	isb	sy
 8010ff0:	f3bf 8f4f 	dsb	sy
 8010ff4:	603b      	str	r3, [r7, #0]
}
 8010ff6:	bf00      	nop
 8010ff8:	e7fe      	b.n	8010ff8 <vPortValidateInterruptPriority+0x60>
	}
 8010ffa:	bf00      	nop
 8010ffc:	3714      	adds	r7, #20
 8010ffe:	46bd      	mov	sp, r7
 8011000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011004:	4770      	bx	lr
 8011006:	bf00      	nop
 8011008:	e000e3f0 	.word	0xe000e3f0
 801100c:	20001370 	.word	0x20001370
 8011010:	e000ed0c 	.word	0xe000ed0c
 8011014:	20001374 	.word	0x20001374

08011018 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b088      	sub	sp, #32
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 8011020:	2300      	movs	r3, #0
 8011022:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 8011024:	f7fe fd98 	bl	800fb58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 8011028:	4b3e      	ldr	r3, [pc, #248]	; (8011124 <pvPortMalloc+0x10c>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d104      	bne.n	801103a <pvPortMalloc+0x22>
		{
			prvHeapInit();
 8011030:	f000 f8ba 	bl	80111a8 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 8011034:	4b3b      	ldr	r3, [pc, #236]	; (8011124 <pvPortMalloc+0x10c>)
 8011036:	2201      	movs	r2, #1
 8011038:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d00e      	beq.n	801105e <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 8011040:	2308      	movs	r3, #8
 8011042:	461a      	mov	r2, r3
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	4413      	add	r3, r2
 8011048:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	f003 0307 	and.w	r3, r3, #7
 8011050:	2b00      	cmp	r3, #0
 8011052:	d004      	beq.n	801105e <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f023 0307 	bic.w	r3, r3, #7
 801105a:	3308      	adds	r3, #8
 801105c:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d057      	beq.n	8011114 <pvPortMalloc+0xfc>
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	f247 5227 	movw	r2, #29991	; 0x7527
 801106a:	4293      	cmp	r3, r2
 801106c:	d852      	bhi.n	8011114 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 801106e:	4b2e      	ldr	r3, [pc, #184]	; (8011128 <pvPortMalloc+0x110>)
 8011070:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 8011072:	4b2d      	ldr	r3, [pc, #180]	; (8011128 <pvPortMalloc+0x110>)
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011078:	e004      	b.n	8011084 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 801107a:	69fb      	ldr	r3, [r7, #28]
 801107c:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 801107e:	69fb      	ldr	r3, [r7, #28]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011084:	69fb      	ldr	r3, [r7, #28]
 8011086:	685b      	ldr	r3, [r3, #4]
 8011088:	687a      	ldr	r2, [r7, #4]
 801108a:	429a      	cmp	r2, r3
 801108c:	d903      	bls.n	8011096 <pvPortMalloc+0x7e>
 801108e:	69fb      	ldr	r3, [r7, #28]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d1f1      	bne.n	801107a <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 8011096:	69fb      	ldr	r3, [r7, #28]
 8011098:	4a24      	ldr	r2, [pc, #144]	; (801112c <pvPortMalloc+0x114>)
 801109a:	4293      	cmp	r3, r2
 801109c:	d03a      	beq.n	8011114 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 801109e:	69bb      	ldr	r3, [r7, #24]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	2208      	movs	r2, #8
 80110a4:	4413      	add	r3, r2
 80110a6:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80110a8:	69fb      	ldr	r3, [r7, #28]
 80110aa:	681a      	ldr	r2, [r3, #0]
 80110ac:	69bb      	ldr	r3, [r7, #24]
 80110ae:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80110b0:	69fb      	ldr	r3, [r7, #28]
 80110b2:	685a      	ldr	r2, [r3, #4]
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	1ad3      	subs	r3, r2, r3
 80110b8:	2208      	movs	r2, #8
 80110ba:	0052      	lsls	r2, r2, #1
 80110bc:	4293      	cmp	r3, r2
 80110be:	d922      	bls.n	8011106 <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80110c0:	69fa      	ldr	r2, [r7, #28]
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	4413      	add	r3, r2
 80110c6:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80110c8:	69fb      	ldr	r3, [r7, #28]
 80110ca:	685a      	ldr	r2, [r3, #4]
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	1ad2      	subs	r2, r2, r3
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 80110d4:	69fb      	ldr	r3, [r7, #28]
 80110d6:	687a      	ldr	r2, [r7, #4]
 80110d8:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	685b      	ldr	r3, [r3, #4]
 80110de:	60bb      	str	r3, [r7, #8]
 80110e0:	4b11      	ldr	r3, [pc, #68]	; (8011128 <pvPortMalloc+0x110>)
 80110e2:	613b      	str	r3, [r7, #16]
 80110e4:	e002      	b.n	80110ec <pvPortMalloc+0xd4>
 80110e6:	693b      	ldr	r3, [r7, #16]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	613b      	str	r3, [r7, #16]
 80110ec:	693b      	ldr	r3, [r7, #16]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	685b      	ldr	r3, [r3, #4]
 80110f2:	68ba      	ldr	r2, [r7, #8]
 80110f4:	429a      	cmp	r2, r3
 80110f6:	d8f6      	bhi.n	80110e6 <pvPortMalloc+0xce>
 80110f8:	693b      	ldr	r3, [r7, #16]
 80110fa:	681a      	ldr	r2, [r3, #0]
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	601a      	str	r2, [r3, #0]
 8011100:	693b      	ldr	r3, [r7, #16]
 8011102:	68fa      	ldr	r2, [r7, #12]
 8011104:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011106:	4b0a      	ldr	r3, [pc, #40]	; (8011130 <pvPortMalloc+0x118>)
 8011108:	681a      	ldr	r2, [r3, #0]
 801110a:	69fb      	ldr	r3, [r7, #28]
 801110c:	685b      	ldr	r3, [r3, #4]
 801110e:	1ad3      	subs	r3, r2, r3
 8011110:	4a07      	ldr	r2, [pc, #28]	; (8011130 <pvPortMalloc+0x118>)
 8011112:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011114:	f7fe fd2e 	bl	800fb74 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8011118:	697b      	ldr	r3, [r7, #20]
}
 801111a:	4618      	mov	r0, r3
 801111c:	3720      	adds	r7, #32
 801111e:	46bd      	mov	sp, r7
 8011120:	bd80      	pop	{r7, pc}
 8011122:	bf00      	nop
 8011124:	200088b8 	.word	0x200088b8
 8011128:	200088a8 	.word	0x200088a8
 801112c:	200088b0 	.word	0x200088b0
 8011130:	200003e4 	.word	0x200003e4

08011134 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011134:	b580      	push	{r7, lr}
 8011136:	b086      	sub	sp, #24
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d027      	beq.n	8011196 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 8011146:	2308      	movs	r3, #8
 8011148:	425b      	negs	r3, r3
 801114a:	693a      	ldr	r2, [r7, #16]
 801114c:	4413      	add	r3, r2
 801114e:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8011150:	693b      	ldr	r3, [r7, #16]
 8011152:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 8011154:	f7fe fd00 	bl	800fb58 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	685b      	ldr	r3, [r3, #4]
 801115c:	60bb      	str	r3, [r7, #8]
 801115e:	4b10      	ldr	r3, [pc, #64]	; (80111a0 <vPortFree+0x6c>)
 8011160:	617b      	str	r3, [r7, #20]
 8011162:	e002      	b.n	801116a <vPortFree+0x36>
 8011164:	697b      	ldr	r3, [r7, #20]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	617b      	str	r3, [r7, #20]
 801116a:	697b      	ldr	r3, [r7, #20]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	685b      	ldr	r3, [r3, #4]
 8011170:	68ba      	ldr	r2, [r7, #8]
 8011172:	429a      	cmp	r2, r3
 8011174:	d8f6      	bhi.n	8011164 <vPortFree+0x30>
 8011176:	697b      	ldr	r3, [r7, #20]
 8011178:	681a      	ldr	r2, [r3, #0]
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	601a      	str	r2, [r3, #0]
 801117e:	697b      	ldr	r3, [r7, #20]
 8011180:	68fa      	ldr	r2, [r7, #12]
 8011182:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	685a      	ldr	r2, [r3, #4]
 8011188:	4b06      	ldr	r3, [pc, #24]	; (80111a4 <vPortFree+0x70>)
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	4413      	add	r3, r2
 801118e:	4a05      	ldr	r2, [pc, #20]	; (80111a4 <vPortFree+0x70>)
 8011190:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 8011192:	f7fe fcef 	bl	800fb74 <xTaskResumeAll>
	}
}
 8011196:	bf00      	nop
 8011198:	3718      	adds	r7, #24
 801119a:	46bd      	mov	sp, r7
 801119c:	bd80      	pop	{r7, pc}
 801119e:	bf00      	nop
 80111a0:	200088a8 	.word	0x200088a8
 80111a4:	200003e4 	.word	0x200003e4

080111a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80111a8:	b480      	push	{r7}
 80111aa:	b083      	sub	sp, #12
 80111ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80111ae:	4b10      	ldr	r3, [pc, #64]	; (80111f0 <prvHeapInit+0x48>)
 80111b0:	f023 0307 	bic.w	r3, r3, #7
 80111b4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80111b6:	4a0f      	ldr	r2, [pc, #60]	; (80111f4 <prvHeapInit+0x4c>)
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80111bc:	4b0d      	ldr	r3, [pc, #52]	; (80111f4 <prvHeapInit+0x4c>)
 80111be:	2200      	movs	r2, #0
 80111c0:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 80111c2:	4b0d      	ldr	r3, [pc, #52]	; (80111f8 <prvHeapInit+0x50>)
 80111c4:	f247 5228 	movw	r2, #29992	; 0x7528
 80111c8:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 80111ca:	4b0b      	ldr	r3, [pc, #44]	; (80111f8 <prvHeapInit+0x50>)
 80111cc:	2200      	movs	r2, #0
 80111ce:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 80111d4:	683b      	ldr	r3, [r7, #0]
 80111d6:	f247 5228 	movw	r2, #29992	; 0x7528
 80111da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	4a06      	ldr	r2, [pc, #24]	; (80111f8 <prvHeapInit+0x50>)
 80111e0:	601a      	str	r2, [r3, #0]
}
 80111e2:	bf00      	nop
 80111e4:	370c      	adds	r7, #12
 80111e6:	46bd      	mov	sp, r7
 80111e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ec:	4770      	bx	lr
 80111ee:	bf00      	nop
 80111f0:	20001380 	.word	0x20001380
 80111f4:	200088a8 	.word	0x200088a8
 80111f8:	200088b0 	.word	0x200088b0

080111fc <calloc>:
 80111fc:	4b02      	ldr	r3, [pc, #8]	; (8011208 <calloc+0xc>)
 80111fe:	460a      	mov	r2, r1
 8011200:	4601      	mov	r1, r0
 8011202:	6818      	ldr	r0, [r3, #0]
 8011204:	f000 b852 	b.w	80112ac <_calloc_r>
 8011208:	200003e8 	.word	0x200003e8

0801120c <__errno>:
 801120c:	4b01      	ldr	r3, [pc, #4]	; (8011214 <__errno+0x8>)
 801120e:	6818      	ldr	r0, [r3, #0]
 8011210:	4770      	bx	lr
 8011212:	bf00      	nop
 8011214:	200003e8 	.word	0x200003e8

08011218 <__libc_init_array>:
 8011218:	b570      	push	{r4, r5, r6, lr}
 801121a:	4d0d      	ldr	r5, [pc, #52]	; (8011250 <__libc_init_array+0x38>)
 801121c:	4c0d      	ldr	r4, [pc, #52]	; (8011254 <__libc_init_array+0x3c>)
 801121e:	1b64      	subs	r4, r4, r5
 8011220:	10a4      	asrs	r4, r4, #2
 8011222:	2600      	movs	r6, #0
 8011224:	42a6      	cmp	r6, r4
 8011226:	d109      	bne.n	801123c <__libc_init_array+0x24>
 8011228:	4d0b      	ldr	r5, [pc, #44]	; (8011258 <__libc_init_array+0x40>)
 801122a:	4c0c      	ldr	r4, [pc, #48]	; (801125c <__libc_init_array+0x44>)
 801122c:	f002 fcfa 	bl	8013c24 <_init>
 8011230:	1b64      	subs	r4, r4, r5
 8011232:	10a4      	asrs	r4, r4, #2
 8011234:	2600      	movs	r6, #0
 8011236:	42a6      	cmp	r6, r4
 8011238:	d105      	bne.n	8011246 <__libc_init_array+0x2e>
 801123a:	bd70      	pop	{r4, r5, r6, pc}
 801123c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011240:	4798      	blx	r3
 8011242:	3601      	adds	r6, #1
 8011244:	e7ee      	b.n	8011224 <__libc_init_array+0xc>
 8011246:	f855 3b04 	ldr.w	r3, [r5], #4
 801124a:	4798      	blx	r3
 801124c:	3601      	adds	r6, #1
 801124e:	e7f2      	b.n	8011236 <__libc_init_array+0x1e>
 8011250:	080149c4 	.word	0x080149c4
 8011254:	080149c4 	.word	0x080149c4
 8011258:	080149c4 	.word	0x080149c4
 801125c:	080149c8 	.word	0x080149c8

08011260 <malloc>:
 8011260:	4b02      	ldr	r3, [pc, #8]	; (801126c <malloc+0xc>)
 8011262:	4601      	mov	r1, r0
 8011264:	6818      	ldr	r0, [r3, #0]
 8011266:	f000 b881 	b.w	801136c <_malloc_r>
 801126a:	bf00      	nop
 801126c:	200003e8 	.word	0x200003e8

08011270 <free>:
 8011270:	4b02      	ldr	r3, [pc, #8]	; (801127c <free+0xc>)
 8011272:	4601      	mov	r1, r0
 8011274:	6818      	ldr	r0, [r3, #0]
 8011276:	f000 b829 	b.w	80112cc <_free_r>
 801127a:	bf00      	nop
 801127c:	200003e8 	.word	0x200003e8

08011280 <memcpy>:
 8011280:	440a      	add	r2, r1
 8011282:	4291      	cmp	r1, r2
 8011284:	f100 33ff 	add.w	r3, r0, #4294967295
 8011288:	d100      	bne.n	801128c <memcpy+0xc>
 801128a:	4770      	bx	lr
 801128c:	b510      	push	{r4, lr}
 801128e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011292:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011296:	4291      	cmp	r1, r2
 8011298:	d1f9      	bne.n	801128e <memcpy+0xe>
 801129a:	bd10      	pop	{r4, pc}

0801129c <memset>:
 801129c:	4402      	add	r2, r0
 801129e:	4603      	mov	r3, r0
 80112a0:	4293      	cmp	r3, r2
 80112a2:	d100      	bne.n	80112a6 <memset+0xa>
 80112a4:	4770      	bx	lr
 80112a6:	f803 1b01 	strb.w	r1, [r3], #1
 80112aa:	e7f9      	b.n	80112a0 <memset+0x4>

080112ac <_calloc_r>:
 80112ac:	b513      	push	{r0, r1, r4, lr}
 80112ae:	434a      	muls	r2, r1
 80112b0:	4611      	mov	r1, r2
 80112b2:	9201      	str	r2, [sp, #4]
 80112b4:	f000 f85a 	bl	801136c <_malloc_r>
 80112b8:	4604      	mov	r4, r0
 80112ba:	b118      	cbz	r0, 80112c4 <_calloc_r+0x18>
 80112bc:	9a01      	ldr	r2, [sp, #4]
 80112be:	2100      	movs	r1, #0
 80112c0:	f7ff ffec 	bl	801129c <memset>
 80112c4:	4620      	mov	r0, r4
 80112c6:	b002      	add	sp, #8
 80112c8:	bd10      	pop	{r4, pc}
	...

080112cc <_free_r>:
 80112cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80112ce:	2900      	cmp	r1, #0
 80112d0:	d048      	beq.n	8011364 <_free_r+0x98>
 80112d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80112d6:	9001      	str	r0, [sp, #4]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	f1a1 0404 	sub.w	r4, r1, #4
 80112de:	bfb8      	it	lt
 80112e0:	18e4      	addlt	r4, r4, r3
 80112e2:	f001 fb95 	bl	8012a10 <__malloc_lock>
 80112e6:	4a20      	ldr	r2, [pc, #128]	; (8011368 <_free_r+0x9c>)
 80112e8:	9801      	ldr	r0, [sp, #4]
 80112ea:	6813      	ldr	r3, [r2, #0]
 80112ec:	4615      	mov	r5, r2
 80112ee:	b933      	cbnz	r3, 80112fe <_free_r+0x32>
 80112f0:	6063      	str	r3, [r4, #4]
 80112f2:	6014      	str	r4, [r2, #0]
 80112f4:	b003      	add	sp, #12
 80112f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80112fa:	f001 bb8f 	b.w	8012a1c <__malloc_unlock>
 80112fe:	42a3      	cmp	r3, r4
 8011300:	d90b      	bls.n	801131a <_free_r+0x4e>
 8011302:	6821      	ldr	r1, [r4, #0]
 8011304:	1862      	adds	r2, r4, r1
 8011306:	4293      	cmp	r3, r2
 8011308:	bf04      	itt	eq
 801130a:	681a      	ldreq	r2, [r3, #0]
 801130c:	685b      	ldreq	r3, [r3, #4]
 801130e:	6063      	str	r3, [r4, #4]
 8011310:	bf04      	itt	eq
 8011312:	1852      	addeq	r2, r2, r1
 8011314:	6022      	streq	r2, [r4, #0]
 8011316:	602c      	str	r4, [r5, #0]
 8011318:	e7ec      	b.n	80112f4 <_free_r+0x28>
 801131a:	461a      	mov	r2, r3
 801131c:	685b      	ldr	r3, [r3, #4]
 801131e:	b10b      	cbz	r3, 8011324 <_free_r+0x58>
 8011320:	42a3      	cmp	r3, r4
 8011322:	d9fa      	bls.n	801131a <_free_r+0x4e>
 8011324:	6811      	ldr	r1, [r2, #0]
 8011326:	1855      	adds	r5, r2, r1
 8011328:	42a5      	cmp	r5, r4
 801132a:	d10b      	bne.n	8011344 <_free_r+0x78>
 801132c:	6824      	ldr	r4, [r4, #0]
 801132e:	4421      	add	r1, r4
 8011330:	1854      	adds	r4, r2, r1
 8011332:	42a3      	cmp	r3, r4
 8011334:	6011      	str	r1, [r2, #0]
 8011336:	d1dd      	bne.n	80112f4 <_free_r+0x28>
 8011338:	681c      	ldr	r4, [r3, #0]
 801133a:	685b      	ldr	r3, [r3, #4]
 801133c:	6053      	str	r3, [r2, #4]
 801133e:	4421      	add	r1, r4
 8011340:	6011      	str	r1, [r2, #0]
 8011342:	e7d7      	b.n	80112f4 <_free_r+0x28>
 8011344:	d902      	bls.n	801134c <_free_r+0x80>
 8011346:	230c      	movs	r3, #12
 8011348:	6003      	str	r3, [r0, #0]
 801134a:	e7d3      	b.n	80112f4 <_free_r+0x28>
 801134c:	6825      	ldr	r5, [r4, #0]
 801134e:	1961      	adds	r1, r4, r5
 8011350:	428b      	cmp	r3, r1
 8011352:	bf04      	itt	eq
 8011354:	6819      	ldreq	r1, [r3, #0]
 8011356:	685b      	ldreq	r3, [r3, #4]
 8011358:	6063      	str	r3, [r4, #4]
 801135a:	bf04      	itt	eq
 801135c:	1949      	addeq	r1, r1, r5
 801135e:	6021      	streq	r1, [r4, #0]
 8011360:	6054      	str	r4, [r2, #4]
 8011362:	e7c7      	b.n	80112f4 <_free_r+0x28>
 8011364:	b003      	add	sp, #12
 8011366:	bd30      	pop	{r4, r5, pc}
 8011368:	200088bc 	.word	0x200088bc

0801136c <_malloc_r>:
 801136c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801136e:	1ccd      	adds	r5, r1, #3
 8011370:	f025 0503 	bic.w	r5, r5, #3
 8011374:	3508      	adds	r5, #8
 8011376:	2d0c      	cmp	r5, #12
 8011378:	bf38      	it	cc
 801137a:	250c      	movcc	r5, #12
 801137c:	2d00      	cmp	r5, #0
 801137e:	4606      	mov	r6, r0
 8011380:	db01      	blt.n	8011386 <_malloc_r+0x1a>
 8011382:	42a9      	cmp	r1, r5
 8011384:	d903      	bls.n	801138e <_malloc_r+0x22>
 8011386:	230c      	movs	r3, #12
 8011388:	6033      	str	r3, [r6, #0]
 801138a:	2000      	movs	r0, #0
 801138c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801138e:	f001 fb3f 	bl	8012a10 <__malloc_lock>
 8011392:	4921      	ldr	r1, [pc, #132]	; (8011418 <_malloc_r+0xac>)
 8011394:	680a      	ldr	r2, [r1, #0]
 8011396:	4614      	mov	r4, r2
 8011398:	b99c      	cbnz	r4, 80113c2 <_malloc_r+0x56>
 801139a:	4f20      	ldr	r7, [pc, #128]	; (801141c <_malloc_r+0xb0>)
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	b923      	cbnz	r3, 80113aa <_malloc_r+0x3e>
 80113a0:	4621      	mov	r1, r4
 80113a2:	4630      	mov	r0, r6
 80113a4:	f000 fca6 	bl	8011cf4 <_sbrk_r>
 80113a8:	6038      	str	r0, [r7, #0]
 80113aa:	4629      	mov	r1, r5
 80113ac:	4630      	mov	r0, r6
 80113ae:	f000 fca1 	bl	8011cf4 <_sbrk_r>
 80113b2:	1c43      	adds	r3, r0, #1
 80113b4:	d123      	bne.n	80113fe <_malloc_r+0x92>
 80113b6:	230c      	movs	r3, #12
 80113b8:	6033      	str	r3, [r6, #0]
 80113ba:	4630      	mov	r0, r6
 80113bc:	f001 fb2e 	bl	8012a1c <__malloc_unlock>
 80113c0:	e7e3      	b.n	801138a <_malloc_r+0x1e>
 80113c2:	6823      	ldr	r3, [r4, #0]
 80113c4:	1b5b      	subs	r3, r3, r5
 80113c6:	d417      	bmi.n	80113f8 <_malloc_r+0x8c>
 80113c8:	2b0b      	cmp	r3, #11
 80113ca:	d903      	bls.n	80113d4 <_malloc_r+0x68>
 80113cc:	6023      	str	r3, [r4, #0]
 80113ce:	441c      	add	r4, r3
 80113d0:	6025      	str	r5, [r4, #0]
 80113d2:	e004      	b.n	80113de <_malloc_r+0x72>
 80113d4:	6863      	ldr	r3, [r4, #4]
 80113d6:	42a2      	cmp	r2, r4
 80113d8:	bf0c      	ite	eq
 80113da:	600b      	streq	r3, [r1, #0]
 80113dc:	6053      	strne	r3, [r2, #4]
 80113de:	4630      	mov	r0, r6
 80113e0:	f001 fb1c 	bl	8012a1c <__malloc_unlock>
 80113e4:	f104 000b 	add.w	r0, r4, #11
 80113e8:	1d23      	adds	r3, r4, #4
 80113ea:	f020 0007 	bic.w	r0, r0, #7
 80113ee:	1ac2      	subs	r2, r0, r3
 80113f0:	d0cc      	beq.n	801138c <_malloc_r+0x20>
 80113f2:	1a1b      	subs	r3, r3, r0
 80113f4:	50a3      	str	r3, [r4, r2]
 80113f6:	e7c9      	b.n	801138c <_malloc_r+0x20>
 80113f8:	4622      	mov	r2, r4
 80113fa:	6864      	ldr	r4, [r4, #4]
 80113fc:	e7cc      	b.n	8011398 <_malloc_r+0x2c>
 80113fe:	1cc4      	adds	r4, r0, #3
 8011400:	f024 0403 	bic.w	r4, r4, #3
 8011404:	42a0      	cmp	r0, r4
 8011406:	d0e3      	beq.n	80113d0 <_malloc_r+0x64>
 8011408:	1a21      	subs	r1, r4, r0
 801140a:	4630      	mov	r0, r6
 801140c:	f000 fc72 	bl	8011cf4 <_sbrk_r>
 8011410:	3001      	adds	r0, #1
 8011412:	d1dd      	bne.n	80113d0 <_malloc_r+0x64>
 8011414:	e7cf      	b.n	80113b6 <_malloc_r+0x4a>
 8011416:	bf00      	nop
 8011418:	200088bc 	.word	0x200088bc
 801141c:	200088c0 	.word	0x200088c0

08011420 <__cvt>:
 8011420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011424:	ec55 4b10 	vmov	r4, r5, d0
 8011428:	2d00      	cmp	r5, #0
 801142a:	460e      	mov	r6, r1
 801142c:	4619      	mov	r1, r3
 801142e:	462b      	mov	r3, r5
 8011430:	bfbb      	ittet	lt
 8011432:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011436:	461d      	movlt	r5, r3
 8011438:	2300      	movge	r3, #0
 801143a:	232d      	movlt	r3, #45	; 0x2d
 801143c:	700b      	strb	r3, [r1, #0]
 801143e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011440:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011444:	4691      	mov	r9, r2
 8011446:	f023 0820 	bic.w	r8, r3, #32
 801144a:	bfbc      	itt	lt
 801144c:	4622      	movlt	r2, r4
 801144e:	4614      	movlt	r4, r2
 8011450:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011454:	d005      	beq.n	8011462 <__cvt+0x42>
 8011456:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801145a:	d100      	bne.n	801145e <__cvt+0x3e>
 801145c:	3601      	adds	r6, #1
 801145e:	2102      	movs	r1, #2
 8011460:	e000      	b.n	8011464 <__cvt+0x44>
 8011462:	2103      	movs	r1, #3
 8011464:	ab03      	add	r3, sp, #12
 8011466:	9301      	str	r3, [sp, #4]
 8011468:	ab02      	add	r3, sp, #8
 801146a:	9300      	str	r3, [sp, #0]
 801146c:	ec45 4b10 	vmov	d0, r4, r5
 8011470:	4653      	mov	r3, sl
 8011472:	4632      	mov	r2, r6
 8011474:	f000 fcdc 	bl	8011e30 <_dtoa_r>
 8011478:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801147c:	4607      	mov	r7, r0
 801147e:	d102      	bne.n	8011486 <__cvt+0x66>
 8011480:	f019 0f01 	tst.w	r9, #1
 8011484:	d022      	beq.n	80114cc <__cvt+0xac>
 8011486:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801148a:	eb07 0906 	add.w	r9, r7, r6
 801148e:	d110      	bne.n	80114b2 <__cvt+0x92>
 8011490:	783b      	ldrb	r3, [r7, #0]
 8011492:	2b30      	cmp	r3, #48	; 0x30
 8011494:	d10a      	bne.n	80114ac <__cvt+0x8c>
 8011496:	2200      	movs	r2, #0
 8011498:	2300      	movs	r3, #0
 801149a:	4620      	mov	r0, r4
 801149c:	4629      	mov	r1, r5
 801149e:	f7ef fb13 	bl	8000ac8 <__aeabi_dcmpeq>
 80114a2:	b918      	cbnz	r0, 80114ac <__cvt+0x8c>
 80114a4:	f1c6 0601 	rsb	r6, r6, #1
 80114a8:	f8ca 6000 	str.w	r6, [sl]
 80114ac:	f8da 3000 	ldr.w	r3, [sl]
 80114b0:	4499      	add	r9, r3
 80114b2:	2200      	movs	r2, #0
 80114b4:	2300      	movs	r3, #0
 80114b6:	4620      	mov	r0, r4
 80114b8:	4629      	mov	r1, r5
 80114ba:	f7ef fb05 	bl	8000ac8 <__aeabi_dcmpeq>
 80114be:	b108      	cbz	r0, 80114c4 <__cvt+0xa4>
 80114c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80114c4:	2230      	movs	r2, #48	; 0x30
 80114c6:	9b03      	ldr	r3, [sp, #12]
 80114c8:	454b      	cmp	r3, r9
 80114ca:	d307      	bcc.n	80114dc <__cvt+0xbc>
 80114cc:	9b03      	ldr	r3, [sp, #12]
 80114ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80114d0:	1bdb      	subs	r3, r3, r7
 80114d2:	4638      	mov	r0, r7
 80114d4:	6013      	str	r3, [r2, #0]
 80114d6:	b004      	add	sp, #16
 80114d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114dc:	1c59      	adds	r1, r3, #1
 80114de:	9103      	str	r1, [sp, #12]
 80114e0:	701a      	strb	r2, [r3, #0]
 80114e2:	e7f0      	b.n	80114c6 <__cvt+0xa6>

080114e4 <__exponent>:
 80114e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80114e6:	4603      	mov	r3, r0
 80114e8:	2900      	cmp	r1, #0
 80114ea:	bfb8      	it	lt
 80114ec:	4249      	neglt	r1, r1
 80114ee:	f803 2b02 	strb.w	r2, [r3], #2
 80114f2:	bfb4      	ite	lt
 80114f4:	222d      	movlt	r2, #45	; 0x2d
 80114f6:	222b      	movge	r2, #43	; 0x2b
 80114f8:	2909      	cmp	r1, #9
 80114fa:	7042      	strb	r2, [r0, #1]
 80114fc:	dd2a      	ble.n	8011554 <__exponent+0x70>
 80114fe:	f10d 0407 	add.w	r4, sp, #7
 8011502:	46a4      	mov	ip, r4
 8011504:	270a      	movs	r7, #10
 8011506:	46a6      	mov	lr, r4
 8011508:	460a      	mov	r2, r1
 801150a:	fb91 f6f7 	sdiv	r6, r1, r7
 801150e:	fb07 1516 	mls	r5, r7, r6, r1
 8011512:	3530      	adds	r5, #48	; 0x30
 8011514:	2a63      	cmp	r2, #99	; 0x63
 8011516:	f104 34ff 	add.w	r4, r4, #4294967295
 801151a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801151e:	4631      	mov	r1, r6
 8011520:	dcf1      	bgt.n	8011506 <__exponent+0x22>
 8011522:	3130      	adds	r1, #48	; 0x30
 8011524:	f1ae 0502 	sub.w	r5, lr, #2
 8011528:	f804 1c01 	strb.w	r1, [r4, #-1]
 801152c:	1c44      	adds	r4, r0, #1
 801152e:	4629      	mov	r1, r5
 8011530:	4561      	cmp	r1, ip
 8011532:	d30a      	bcc.n	801154a <__exponent+0x66>
 8011534:	f10d 0209 	add.w	r2, sp, #9
 8011538:	eba2 020e 	sub.w	r2, r2, lr
 801153c:	4565      	cmp	r5, ip
 801153e:	bf88      	it	hi
 8011540:	2200      	movhi	r2, #0
 8011542:	4413      	add	r3, r2
 8011544:	1a18      	subs	r0, r3, r0
 8011546:	b003      	add	sp, #12
 8011548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801154a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801154e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011552:	e7ed      	b.n	8011530 <__exponent+0x4c>
 8011554:	2330      	movs	r3, #48	; 0x30
 8011556:	3130      	adds	r1, #48	; 0x30
 8011558:	7083      	strb	r3, [r0, #2]
 801155a:	70c1      	strb	r1, [r0, #3]
 801155c:	1d03      	adds	r3, r0, #4
 801155e:	e7f1      	b.n	8011544 <__exponent+0x60>

08011560 <_printf_float>:
 8011560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011564:	ed2d 8b02 	vpush	{d8}
 8011568:	b08d      	sub	sp, #52	; 0x34
 801156a:	460c      	mov	r4, r1
 801156c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011570:	4616      	mov	r6, r2
 8011572:	461f      	mov	r7, r3
 8011574:	4605      	mov	r5, r0
 8011576:	f001 fa47 	bl	8012a08 <_localeconv_r>
 801157a:	f8d0 a000 	ldr.w	sl, [r0]
 801157e:	4650      	mov	r0, sl
 8011580:	f7ee fe26 	bl	80001d0 <strlen>
 8011584:	2300      	movs	r3, #0
 8011586:	930a      	str	r3, [sp, #40]	; 0x28
 8011588:	6823      	ldr	r3, [r4, #0]
 801158a:	9305      	str	r3, [sp, #20]
 801158c:	f8d8 3000 	ldr.w	r3, [r8]
 8011590:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011594:	3307      	adds	r3, #7
 8011596:	f023 0307 	bic.w	r3, r3, #7
 801159a:	f103 0208 	add.w	r2, r3, #8
 801159e:	f8c8 2000 	str.w	r2, [r8]
 80115a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80115aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80115ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80115b2:	9307      	str	r3, [sp, #28]
 80115b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80115b8:	ee08 0a10 	vmov	s16, r0
 80115bc:	4b9f      	ldr	r3, [pc, #636]	; (801183c <_printf_float+0x2dc>)
 80115be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80115c2:	f04f 32ff 	mov.w	r2, #4294967295
 80115c6:	f7ef fab1 	bl	8000b2c <__aeabi_dcmpun>
 80115ca:	bb88      	cbnz	r0, 8011630 <_printf_float+0xd0>
 80115cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80115d0:	4b9a      	ldr	r3, [pc, #616]	; (801183c <_printf_float+0x2dc>)
 80115d2:	f04f 32ff 	mov.w	r2, #4294967295
 80115d6:	f7ef fa8b 	bl	8000af0 <__aeabi_dcmple>
 80115da:	bb48      	cbnz	r0, 8011630 <_printf_float+0xd0>
 80115dc:	2200      	movs	r2, #0
 80115de:	2300      	movs	r3, #0
 80115e0:	4640      	mov	r0, r8
 80115e2:	4649      	mov	r1, r9
 80115e4:	f7ef fa7a 	bl	8000adc <__aeabi_dcmplt>
 80115e8:	b110      	cbz	r0, 80115f0 <_printf_float+0x90>
 80115ea:	232d      	movs	r3, #45	; 0x2d
 80115ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80115f0:	4b93      	ldr	r3, [pc, #588]	; (8011840 <_printf_float+0x2e0>)
 80115f2:	4894      	ldr	r0, [pc, #592]	; (8011844 <_printf_float+0x2e4>)
 80115f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80115f8:	bf94      	ite	ls
 80115fa:	4698      	movls	r8, r3
 80115fc:	4680      	movhi	r8, r0
 80115fe:	2303      	movs	r3, #3
 8011600:	6123      	str	r3, [r4, #16]
 8011602:	9b05      	ldr	r3, [sp, #20]
 8011604:	f023 0204 	bic.w	r2, r3, #4
 8011608:	6022      	str	r2, [r4, #0]
 801160a:	f04f 0900 	mov.w	r9, #0
 801160e:	9700      	str	r7, [sp, #0]
 8011610:	4633      	mov	r3, r6
 8011612:	aa0b      	add	r2, sp, #44	; 0x2c
 8011614:	4621      	mov	r1, r4
 8011616:	4628      	mov	r0, r5
 8011618:	f000 f9d8 	bl	80119cc <_printf_common>
 801161c:	3001      	adds	r0, #1
 801161e:	f040 8090 	bne.w	8011742 <_printf_float+0x1e2>
 8011622:	f04f 30ff 	mov.w	r0, #4294967295
 8011626:	b00d      	add	sp, #52	; 0x34
 8011628:	ecbd 8b02 	vpop	{d8}
 801162c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011630:	4642      	mov	r2, r8
 8011632:	464b      	mov	r3, r9
 8011634:	4640      	mov	r0, r8
 8011636:	4649      	mov	r1, r9
 8011638:	f7ef fa78 	bl	8000b2c <__aeabi_dcmpun>
 801163c:	b140      	cbz	r0, 8011650 <_printf_float+0xf0>
 801163e:	464b      	mov	r3, r9
 8011640:	2b00      	cmp	r3, #0
 8011642:	bfbc      	itt	lt
 8011644:	232d      	movlt	r3, #45	; 0x2d
 8011646:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801164a:	487f      	ldr	r0, [pc, #508]	; (8011848 <_printf_float+0x2e8>)
 801164c:	4b7f      	ldr	r3, [pc, #508]	; (801184c <_printf_float+0x2ec>)
 801164e:	e7d1      	b.n	80115f4 <_printf_float+0x94>
 8011650:	6863      	ldr	r3, [r4, #4]
 8011652:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011656:	9206      	str	r2, [sp, #24]
 8011658:	1c5a      	adds	r2, r3, #1
 801165a:	d13f      	bne.n	80116dc <_printf_float+0x17c>
 801165c:	2306      	movs	r3, #6
 801165e:	6063      	str	r3, [r4, #4]
 8011660:	9b05      	ldr	r3, [sp, #20]
 8011662:	6861      	ldr	r1, [r4, #4]
 8011664:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011668:	2300      	movs	r3, #0
 801166a:	9303      	str	r3, [sp, #12]
 801166c:	ab0a      	add	r3, sp, #40	; 0x28
 801166e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011672:	ab09      	add	r3, sp, #36	; 0x24
 8011674:	ec49 8b10 	vmov	d0, r8, r9
 8011678:	9300      	str	r3, [sp, #0]
 801167a:	6022      	str	r2, [r4, #0]
 801167c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011680:	4628      	mov	r0, r5
 8011682:	f7ff fecd 	bl	8011420 <__cvt>
 8011686:	9b06      	ldr	r3, [sp, #24]
 8011688:	9909      	ldr	r1, [sp, #36]	; 0x24
 801168a:	2b47      	cmp	r3, #71	; 0x47
 801168c:	4680      	mov	r8, r0
 801168e:	d108      	bne.n	80116a2 <_printf_float+0x142>
 8011690:	1cc8      	adds	r0, r1, #3
 8011692:	db02      	blt.n	801169a <_printf_float+0x13a>
 8011694:	6863      	ldr	r3, [r4, #4]
 8011696:	4299      	cmp	r1, r3
 8011698:	dd41      	ble.n	801171e <_printf_float+0x1be>
 801169a:	f1ab 0b02 	sub.w	fp, fp, #2
 801169e:	fa5f fb8b 	uxtb.w	fp, fp
 80116a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80116a6:	d820      	bhi.n	80116ea <_printf_float+0x18a>
 80116a8:	3901      	subs	r1, #1
 80116aa:	465a      	mov	r2, fp
 80116ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80116b0:	9109      	str	r1, [sp, #36]	; 0x24
 80116b2:	f7ff ff17 	bl	80114e4 <__exponent>
 80116b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80116b8:	1813      	adds	r3, r2, r0
 80116ba:	2a01      	cmp	r2, #1
 80116bc:	4681      	mov	r9, r0
 80116be:	6123      	str	r3, [r4, #16]
 80116c0:	dc02      	bgt.n	80116c8 <_printf_float+0x168>
 80116c2:	6822      	ldr	r2, [r4, #0]
 80116c4:	07d2      	lsls	r2, r2, #31
 80116c6:	d501      	bpl.n	80116cc <_printf_float+0x16c>
 80116c8:	3301      	adds	r3, #1
 80116ca:	6123      	str	r3, [r4, #16]
 80116cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d09c      	beq.n	801160e <_printf_float+0xae>
 80116d4:	232d      	movs	r3, #45	; 0x2d
 80116d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80116da:	e798      	b.n	801160e <_printf_float+0xae>
 80116dc:	9a06      	ldr	r2, [sp, #24]
 80116de:	2a47      	cmp	r2, #71	; 0x47
 80116e0:	d1be      	bne.n	8011660 <_printf_float+0x100>
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d1bc      	bne.n	8011660 <_printf_float+0x100>
 80116e6:	2301      	movs	r3, #1
 80116e8:	e7b9      	b.n	801165e <_printf_float+0xfe>
 80116ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80116ee:	d118      	bne.n	8011722 <_printf_float+0x1c2>
 80116f0:	2900      	cmp	r1, #0
 80116f2:	6863      	ldr	r3, [r4, #4]
 80116f4:	dd0b      	ble.n	801170e <_printf_float+0x1ae>
 80116f6:	6121      	str	r1, [r4, #16]
 80116f8:	b913      	cbnz	r3, 8011700 <_printf_float+0x1a0>
 80116fa:	6822      	ldr	r2, [r4, #0]
 80116fc:	07d0      	lsls	r0, r2, #31
 80116fe:	d502      	bpl.n	8011706 <_printf_float+0x1a6>
 8011700:	3301      	adds	r3, #1
 8011702:	440b      	add	r3, r1
 8011704:	6123      	str	r3, [r4, #16]
 8011706:	65a1      	str	r1, [r4, #88]	; 0x58
 8011708:	f04f 0900 	mov.w	r9, #0
 801170c:	e7de      	b.n	80116cc <_printf_float+0x16c>
 801170e:	b913      	cbnz	r3, 8011716 <_printf_float+0x1b6>
 8011710:	6822      	ldr	r2, [r4, #0]
 8011712:	07d2      	lsls	r2, r2, #31
 8011714:	d501      	bpl.n	801171a <_printf_float+0x1ba>
 8011716:	3302      	adds	r3, #2
 8011718:	e7f4      	b.n	8011704 <_printf_float+0x1a4>
 801171a:	2301      	movs	r3, #1
 801171c:	e7f2      	b.n	8011704 <_printf_float+0x1a4>
 801171e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011724:	4299      	cmp	r1, r3
 8011726:	db05      	blt.n	8011734 <_printf_float+0x1d4>
 8011728:	6823      	ldr	r3, [r4, #0]
 801172a:	6121      	str	r1, [r4, #16]
 801172c:	07d8      	lsls	r0, r3, #31
 801172e:	d5ea      	bpl.n	8011706 <_printf_float+0x1a6>
 8011730:	1c4b      	adds	r3, r1, #1
 8011732:	e7e7      	b.n	8011704 <_printf_float+0x1a4>
 8011734:	2900      	cmp	r1, #0
 8011736:	bfd4      	ite	le
 8011738:	f1c1 0202 	rsble	r2, r1, #2
 801173c:	2201      	movgt	r2, #1
 801173e:	4413      	add	r3, r2
 8011740:	e7e0      	b.n	8011704 <_printf_float+0x1a4>
 8011742:	6823      	ldr	r3, [r4, #0]
 8011744:	055a      	lsls	r2, r3, #21
 8011746:	d407      	bmi.n	8011758 <_printf_float+0x1f8>
 8011748:	6923      	ldr	r3, [r4, #16]
 801174a:	4642      	mov	r2, r8
 801174c:	4631      	mov	r1, r6
 801174e:	4628      	mov	r0, r5
 8011750:	47b8      	blx	r7
 8011752:	3001      	adds	r0, #1
 8011754:	d12c      	bne.n	80117b0 <_printf_float+0x250>
 8011756:	e764      	b.n	8011622 <_printf_float+0xc2>
 8011758:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801175c:	f240 80e0 	bls.w	8011920 <_printf_float+0x3c0>
 8011760:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011764:	2200      	movs	r2, #0
 8011766:	2300      	movs	r3, #0
 8011768:	f7ef f9ae 	bl	8000ac8 <__aeabi_dcmpeq>
 801176c:	2800      	cmp	r0, #0
 801176e:	d034      	beq.n	80117da <_printf_float+0x27a>
 8011770:	4a37      	ldr	r2, [pc, #220]	; (8011850 <_printf_float+0x2f0>)
 8011772:	2301      	movs	r3, #1
 8011774:	4631      	mov	r1, r6
 8011776:	4628      	mov	r0, r5
 8011778:	47b8      	blx	r7
 801177a:	3001      	adds	r0, #1
 801177c:	f43f af51 	beq.w	8011622 <_printf_float+0xc2>
 8011780:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011784:	429a      	cmp	r2, r3
 8011786:	db02      	blt.n	801178e <_printf_float+0x22e>
 8011788:	6823      	ldr	r3, [r4, #0]
 801178a:	07d8      	lsls	r0, r3, #31
 801178c:	d510      	bpl.n	80117b0 <_printf_float+0x250>
 801178e:	ee18 3a10 	vmov	r3, s16
 8011792:	4652      	mov	r2, sl
 8011794:	4631      	mov	r1, r6
 8011796:	4628      	mov	r0, r5
 8011798:	47b8      	blx	r7
 801179a:	3001      	adds	r0, #1
 801179c:	f43f af41 	beq.w	8011622 <_printf_float+0xc2>
 80117a0:	f04f 0800 	mov.w	r8, #0
 80117a4:	f104 091a 	add.w	r9, r4, #26
 80117a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117aa:	3b01      	subs	r3, #1
 80117ac:	4543      	cmp	r3, r8
 80117ae:	dc09      	bgt.n	80117c4 <_printf_float+0x264>
 80117b0:	6823      	ldr	r3, [r4, #0]
 80117b2:	079b      	lsls	r3, r3, #30
 80117b4:	f100 8105 	bmi.w	80119c2 <_printf_float+0x462>
 80117b8:	68e0      	ldr	r0, [r4, #12]
 80117ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117bc:	4298      	cmp	r0, r3
 80117be:	bfb8      	it	lt
 80117c0:	4618      	movlt	r0, r3
 80117c2:	e730      	b.n	8011626 <_printf_float+0xc6>
 80117c4:	2301      	movs	r3, #1
 80117c6:	464a      	mov	r2, r9
 80117c8:	4631      	mov	r1, r6
 80117ca:	4628      	mov	r0, r5
 80117cc:	47b8      	blx	r7
 80117ce:	3001      	adds	r0, #1
 80117d0:	f43f af27 	beq.w	8011622 <_printf_float+0xc2>
 80117d4:	f108 0801 	add.w	r8, r8, #1
 80117d8:	e7e6      	b.n	80117a8 <_printf_float+0x248>
 80117da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117dc:	2b00      	cmp	r3, #0
 80117de:	dc39      	bgt.n	8011854 <_printf_float+0x2f4>
 80117e0:	4a1b      	ldr	r2, [pc, #108]	; (8011850 <_printf_float+0x2f0>)
 80117e2:	2301      	movs	r3, #1
 80117e4:	4631      	mov	r1, r6
 80117e6:	4628      	mov	r0, r5
 80117e8:	47b8      	blx	r7
 80117ea:	3001      	adds	r0, #1
 80117ec:	f43f af19 	beq.w	8011622 <_printf_float+0xc2>
 80117f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80117f4:	4313      	orrs	r3, r2
 80117f6:	d102      	bne.n	80117fe <_printf_float+0x29e>
 80117f8:	6823      	ldr	r3, [r4, #0]
 80117fa:	07d9      	lsls	r1, r3, #31
 80117fc:	d5d8      	bpl.n	80117b0 <_printf_float+0x250>
 80117fe:	ee18 3a10 	vmov	r3, s16
 8011802:	4652      	mov	r2, sl
 8011804:	4631      	mov	r1, r6
 8011806:	4628      	mov	r0, r5
 8011808:	47b8      	blx	r7
 801180a:	3001      	adds	r0, #1
 801180c:	f43f af09 	beq.w	8011622 <_printf_float+0xc2>
 8011810:	f04f 0900 	mov.w	r9, #0
 8011814:	f104 0a1a 	add.w	sl, r4, #26
 8011818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801181a:	425b      	negs	r3, r3
 801181c:	454b      	cmp	r3, r9
 801181e:	dc01      	bgt.n	8011824 <_printf_float+0x2c4>
 8011820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011822:	e792      	b.n	801174a <_printf_float+0x1ea>
 8011824:	2301      	movs	r3, #1
 8011826:	4652      	mov	r2, sl
 8011828:	4631      	mov	r1, r6
 801182a:	4628      	mov	r0, r5
 801182c:	47b8      	blx	r7
 801182e:	3001      	adds	r0, #1
 8011830:	f43f aef7 	beq.w	8011622 <_printf_float+0xc2>
 8011834:	f109 0901 	add.w	r9, r9, #1
 8011838:	e7ee      	b.n	8011818 <_printf_float+0x2b8>
 801183a:	bf00      	nop
 801183c:	7fefffff 	.word	0x7fefffff
 8011840:	080145e0 	.word	0x080145e0
 8011844:	080145e4 	.word	0x080145e4
 8011848:	080145ec 	.word	0x080145ec
 801184c:	080145e8 	.word	0x080145e8
 8011850:	080145f0 	.word	0x080145f0
 8011854:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011856:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011858:	429a      	cmp	r2, r3
 801185a:	bfa8      	it	ge
 801185c:	461a      	movge	r2, r3
 801185e:	2a00      	cmp	r2, #0
 8011860:	4691      	mov	r9, r2
 8011862:	dc37      	bgt.n	80118d4 <_printf_float+0x374>
 8011864:	f04f 0b00 	mov.w	fp, #0
 8011868:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801186c:	f104 021a 	add.w	r2, r4, #26
 8011870:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011872:	9305      	str	r3, [sp, #20]
 8011874:	eba3 0309 	sub.w	r3, r3, r9
 8011878:	455b      	cmp	r3, fp
 801187a:	dc33      	bgt.n	80118e4 <_printf_float+0x384>
 801187c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011880:	429a      	cmp	r2, r3
 8011882:	db3b      	blt.n	80118fc <_printf_float+0x39c>
 8011884:	6823      	ldr	r3, [r4, #0]
 8011886:	07da      	lsls	r2, r3, #31
 8011888:	d438      	bmi.n	80118fc <_printf_float+0x39c>
 801188a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801188c:	9b05      	ldr	r3, [sp, #20]
 801188e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011890:	1ad3      	subs	r3, r2, r3
 8011892:	eba2 0901 	sub.w	r9, r2, r1
 8011896:	4599      	cmp	r9, r3
 8011898:	bfa8      	it	ge
 801189a:	4699      	movge	r9, r3
 801189c:	f1b9 0f00 	cmp.w	r9, #0
 80118a0:	dc35      	bgt.n	801190e <_printf_float+0x3ae>
 80118a2:	f04f 0800 	mov.w	r8, #0
 80118a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80118aa:	f104 0a1a 	add.w	sl, r4, #26
 80118ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80118b2:	1a9b      	subs	r3, r3, r2
 80118b4:	eba3 0309 	sub.w	r3, r3, r9
 80118b8:	4543      	cmp	r3, r8
 80118ba:	f77f af79 	ble.w	80117b0 <_printf_float+0x250>
 80118be:	2301      	movs	r3, #1
 80118c0:	4652      	mov	r2, sl
 80118c2:	4631      	mov	r1, r6
 80118c4:	4628      	mov	r0, r5
 80118c6:	47b8      	blx	r7
 80118c8:	3001      	adds	r0, #1
 80118ca:	f43f aeaa 	beq.w	8011622 <_printf_float+0xc2>
 80118ce:	f108 0801 	add.w	r8, r8, #1
 80118d2:	e7ec      	b.n	80118ae <_printf_float+0x34e>
 80118d4:	4613      	mov	r3, r2
 80118d6:	4631      	mov	r1, r6
 80118d8:	4642      	mov	r2, r8
 80118da:	4628      	mov	r0, r5
 80118dc:	47b8      	blx	r7
 80118de:	3001      	adds	r0, #1
 80118e0:	d1c0      	bne.n	8011864 <_printf_float+0x304>
 80118e2:	e69e      	b.n	8011622 <_printf_float+0xc2>
 80118e4:	2301      	movs	r3, #1
 80118e6:	4631      	mov	r1, r6
 80118e8:	4628      	mov	r0, r5
 80118ea:	9205      	str	r2, [sp, #20]
 80118ec:	47b8      	blx	r7
 80118ee:	3001      	adds	r0, #1
 80118f0:	f43f ae97 	beq.w	8011622 <_printf_float+0xc2>
 80118f4:	9a05      	ldr	r2, [sp, #20]
 80118f6:	f10b 0b01 	add.w	fp, fp, #1
 80118fa:	e7b9      	b.n	8011870 <_printf_float+0x310>
 80118fc:	ee18 3a10 	vmov	r3, s16
 8011900:	4652      	mov	r2, sl
 8011902:	4631      	mov	r1, r6
 8011904:	4628      	mov	r0, r5
 8011906:	47b8      	blx	r7
 8011908:	3001      	adds	r0, #1
 801190a:	d1be      	bne.n	801188a <_printf_float+0x32a>
 801190c:	e689      	b.n	8011622 <_printf_float+0xc2>
 801190e:	9a05      	ldr	r2, [sp, #20]
 8011910:	464b      	mov	r3, r9
 8011912:	4442      	add	r2, r8
 8011914:	4631      	mov	r1, r6
 8011916:	4628      	mov	r0, r5
 8011918:	47b8      	blx	r7
 801191a:	3001      	adds	r0, #1
 801191c:	d1c1      	bne.n	80118a2 <_printf_float+0x342>
 801191e:	e680      	b.n	8011622 <_printf_float+0xc2>
 8011920:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011922:	2a01      	cmp	r2, #1
 8011924:	dc01      	bgt.n	801192a <_printf_float+0x3ca>
 8011926:	07db      	lsls	r3, r3, #31
 8011928:	d538      	bpl.n	801199c <_printf_float+0x43c>
 801192a:	2301      	movs	r3, #1
 801192c:	4642      	mov	r2, r8
 801192e:	4631      	mov	r1, r6
 8011930:	4628      	mov	r0, r5
 8011932:	47b8      	blx	r7
 8011934:	3001      	adds	r0, #1
 8011936:	f43f ae74 	beq.w	8011622 <_printf_float+0xc2>
 801193a:	ee18 3a10 	vmov	r3, s16
 801193e:	4652      	mov	r2, sl
 8011940:	4631      	mov	r1, r6
 8011942:	4628      	mov	r0, r5
 8011944:	47b8      	blx	r7
 8011946:	3001      	adds	r0, #1
 8011948:	f43f ae6b 	beq.w	8011622 <_printf_float+0xc2>
 801194c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011950:	2200      	movs	r2, #0
 8011952:	2300      	movs	r3, #0
 8011954:	f7ef f8b8 	bl	8000ac8 <__aeabi_dcmpeq>
 8011958:	b9d8      	cbnz	r0, 8011992 <_printf_float+0x432>
 801195a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801195c:	f108 0201 	add.w	r2, r8, #1
 8011960:	3b01      	subs	r3, #1
 8011962:	4631      	mov	r1, r6
 8011964:	4628      	mov	r0, r5
 8011966:	47b8      	blx	r7
 8011968:	3001      	adds	r0, #1
 801196a:	d10e      	bne.n	801198a <_printf_float+0x42a>
 801196c:	e659      	b.n	8011622 <_printf_float+0xc2>
 801196e:	2301      	movs	r3, #1
 8011970:	4652      	mov	r2, sl
 8011972:	4631      	mov	r1, r6
 8011974:	4628      	mov	r0, r5
 8011976:	47b8      	blx	r7
 8011978:	3001      	adds	r0, #1
 801197a:	f43f ae52 	beq.w	8011622 <_printf_float+0xc2>
 801197e:	f108 0801 	add.w	r8, r8, #1
 8011982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011984:	3b01      	subs	r3, #1
 8011986:	4543      	cmp	r3, r8
 8011988:	dcf1      	bgt.n	801196e <_printf_float+0x40e>
 801198a:	464b      	mov	r3, r9
 801198c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011990:	e6dc      	b.n	801174c <_printf_float+0x1ec>
 8011992:	f04f 0800 	mov.w	r8, #0
 8011996:	f104 0a1a 	add.w	sl, r4, #26
 801199a:	e7f2      	b.n	8011982 <_printf_float+0x422>
 801199c:	2301      	movs	r3, #1
 801199e:	4642      	mov	r2, r8
 80119a0:	e7df      	b.n	8011962 <_printf_float+0x402>
 80119a2:	2301      	movs	r3, #1
 80119a4:	464a      	mov	r2, r9
 80119a6:	4631      	mov	r1, r6
 80119a8:	4628      	mov	r0, r5
 80119aa:	47b8      	blx	r7
 80119ac:	3001      	adds	r0, #1
 80119ae:	f43f ae38 	beq.w	8011622 <_printf_float+0xc2>
 80119b2:	f108 0801 	add.w	r8, r8, #1
 80119b6:	68e3      	ldr	r3, [r4, #12]
 80119b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80119ba:	1a5b      	subs	r3, r3, r1
 80119bc:	4543      	cmp	r3, r8
 80119be:	dcf0      	bgt.n	80119a2 <_printf_float+0x442>
 80119c0:	e6fa      	b.n	80117b8 <_printf_float+0x258>
 80119c2:	f04f 0800 	mov.w	r8, #0
 80119c6:	f104 0919 	add.w	r9, r4, #25
 80119ca:	e7f4      	b.n	80119b6 <_printf_float+0x456>

080119cc <_printf_common>:
 80119cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119d0:	4616      	mov	r6, r2
 80119d2:	4699      	mov	r9, r3
 80119d4:	688a      	ldr	r2, [r1, #8]
 80119d6:	690b      	ldr	r3, [r1, #16]
 80119d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80119dc:	4293      	cmp	r3, r2
 80119de:	bfb8      	it	lt
 80119e0:	4613      	movlt	r3, r2
 80119e2:	6033      	str	r3, [r6, #0]
 80119e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80119e8:	4607      	mov	r7, r0
 80119ea:	460c      	mov	r4, r1
 80119ec:	b10a      	cbz	r2, 80119f2 <_printf_common+0x26>
 80119ee:	3301      	adds	r3, #1
 80119f0:	6033      	str	r3, [r6, #0]
 80119f2:	6823      	ldr	r3, [r4, #0]
 80119f4:	0699      	lsls	r1, r3, #26
 80119f6:	bf42      	ittt	mi
 80119f8:	6833      	ldrmi	r3, [r6, #0]
 80119fa:	3302      	addmi	r3, #2
 80119fc:	6033      	strmi	r3, [r6, #0]
 80119fe:	6825      	ldr	r5, [r4, #0]
 8011a00:	f015 0506 	ands.w	r5, r5, #6
 8011a04:	d106      	bne.n	8011a14 <_printf_common+0x48>
 8011a06:	f104 0a19 	add.w	sl, r4, #25
 8011a0a:	68e3      	ldr	r3, [r4, #12]
 8011a0c:	6832      	ldr	r2, [r6, #0]
 8011a0e:	1a9b      	subs	r3, r3, r2
 8011a10:	42ab      	cmp	r3, r5
 8011a12:	dc26      	bgt.n	8011a62 <_printf_common+0x96>
 8011a14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011a18:	1e13      	subs	r3, r2, #0
 8011a1a:	6822      	ldr	r2, [r4, #0]
 8011a1c:	bf18      	it	ne
 8011a1e:	2301      	movne	r3, #1
 8011a20:	0692      	lsls	r2, r2, #26
 8011a22:	d42b      	bmi.n	8011a7c <_printf_common+0xb0>
 8011a24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011a28:	4649      	mov	r1, r9
 8011a2a:	4638      	mov	r0, r7
 8011a2c:	47c0      	blx	r8
 8011a2e:	3001      	adds	r0, #1
 8011a30:	d01e      	beq.n	8011a70 <_printf_common+0xa4>
 8011a32:	6823      	ldr	r3, [r4, #0]
 8011a34:	68e5      	ldr	r5, [r4, #12]
 8011a36:	6832      	ldr	r2, [r6, #0]
 8011a38:	f003 0306 	and.w	r3, r3, #6
 8011a3c:	2b04      	cmp	r3, #4
 8011a3e:	bf08      	it	eq
 8011a40:	1aad      	subeq	r5, r5, r2
 8011a42:	68a3      	ldr	r3, [r4, #8]
 8011a44:	6922      	ldr	r2, [r4, #16]
 8011a46:	bf0c      	ite	eq
 8011a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011a4c:	2500      	movne	r5, #0
 8011a4e:	4293      	cmp	r3, r2
 8011a50:	bfc4      	itt	gt
 8011a52:	1a9b      	subgt	r3, r3, r2
 8011a54:	18ed      	addgt	r5, r5, r3
 8011a56:	2600      	movs	r6, #0
 8011a58:	341a      	adds	r4, #26
 8011a5a:	42b5      	cmp	r5, r6
 8011a5c:	d11a      	bne.n	8011a94 <_printf_common+0xc8>
 8011a5e:	2000      	movs	r0, #0
 8011a60:	e008      	b.n	8011a74 <_printf_common+0xa8>
 8011a62:	2301      	movs	r3, #1
 8011a64:	4652      	mov	r2, sl
 8011a66:	4649      	mov	r1, r9
 8011a68:	4638      	mov	r0, r7
 8011a6a:	47c0      	blx	r8
 8011a6c:	3001      	adds	r0, #1
 8011a6e:	d103      	bne.n	8011a78 <_printf_common+0xac>
 8011a70:	f04f 30ff 	mov.w	r0, #4294967295
 8011a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a78:	3501      	adds	r5, #1
 8011a7a:	e7c6      	b.n	8011a0a <_printf_common+0x3e>
 8011a7c:	18e1      	adds	r1, r4, r3
 8011a7e:	1c5a      	adds	r2, r3, #1
 8011a80:	2030      	movs	r0, #48	; 0x30
 8011a82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011a86:	4422      	add	r2, r4
 8011a88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011a8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011a90:	3302      	adds	r3, #2
 8011a92:	e7c7      	b.n	8011a24 <_printf_common+0x58>
 8011a94:	2301      	movs	r3, #1
 8011a96:	4622      	mov	r2, r4
 8011a98:	4649      	mov	r1, r9
 8011a9a:	4638      	mov	r0, r7
 8011a9c:	47c0      	blx	r8
 8011a9e:	3001      	adds	r0, #1
 8011aa0:	d0e6      	beq.n	8011a70 <_printf_common+0xa4>
 8011aa2:	3601      	adds	r6, #1
 8011aa4:	e7d9      	b.n	8011a5a <_printf_common+0x8e>
	...

08011aa8 <_printf_i>:
 8011aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011aac:	460c      	mov	r4, r1
 8011aae:	4691      	mov	r9, r2
 8011ab0:	7e27      	ldrb	r7, [r4, #24]
 8011ab2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011ab4:	2f78      	cmp	r7, #120	; 0x78
 8011ab6:	4680      	mov	r8, r0
 8011ab8:	469a      	mov	sl, r3
 8011aba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011abe:	d807      	bhi.n	8011ad0 <_printf_i+0x28>
 8011ac0:	2f62      	cmp	r7, #98	; 0x62
 8011ac2:	d80a      	bhi.n	8011ada <_printf_i+0x32>
 8011ac4:	2f00      	cmp	r7, #0
 8011ac6:	f000 80d8 	beq.w	8011c7a <_printf_i+0x1d2>
 8011aca:	2f58      	cmp	r7, #88	; 0x58
 8011acc:	f000 80a3 	beq.w	8011c16 <_printf_i+0x16e>
 8011ad0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011ad4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011ad8:	e03a      	b.n	8011b50 <_printf_i+0xa8>
 8011ada:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011ade:	2b15      	cmp	r3, #21
 8011ae0:	d8f6      	bhi.n	8011ad0 <_printf_i+0x28>
 8011ae2:	a001      	add	r0, pc, #4	; (adr r0, 8011ae8 <_printf_i+0x40>)
 8011ae4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011ae8:	08011b41 	.word	0x08011b41
 8011aec:	08011b55 	.word	0x08011b55
 8011af0:	08011ad1 	.word	0x08011ad1
 8011af4:	08011ad1 	.word	0x08011ad1
 8011af8:	08011ad1 	.word	0x08011ad1
 8011afc:	08011ad1 	.word	0x08011ad1
 8011b00:	08011b55 	.word	0x08011b55
 8011b04:	08011ad1 	.word	0x08011ad1
 8011b08:	08011ad1 	.word	0x08011ad1
 8011b0c:	08011ad1 	.word	0x08011ad1
 8011b10:	08011ad1 	.word	0x08011ad1
 8011b14:	08011c61 	.word	0x08011c61
 8011b18:	08011b85 	.word	0x08011b85
 8011b1c:	08011c43 	.word	0x08011c43
 8011b20:	08011ad1 	.word	0x08011ad1
 8011b24:	08011ad1 	.word	0x08011ad1
 8011b28:	08011c83 	.word	0x08011c83
 8011b2c:	08011ad1 	.word	0x08011ad1
 8011b30:	08011b85 	.word	0x08011b85
 8011b34:	08011ad1 	.word	0x08011ad1
 8011b38:	08011ad1 	.word	0x08011ad1
 8011b3c:	08011c4b 	.word	0x08011c4b
 8011b40:	680b      	ldr	r3, [r1, #0]
 8011b42:	1d1a      	adds	r2, r3, #4
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	600a      	str	r2, [r1, #0]
 8011b48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011b4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011b50:	2301      	movs	r3, #1
 8011b52:	e0a3      	b.n	8011c9c <_printf_i+0x1f4>
 8011b54:	6825      	ldr	r5, [r4, #0]
 8011b56:	6808      	ldr	r0, [r1, #0]
 8011b58:	062e      	lsls	r6, r5, #24
 8011b5a:	f100 0304 	add.w	r3, r0, #4
 8011b5e:	d50a      	bpl.n	8011b76 <_printf_i+0xce>
 8011b60:	6805      	ldr	r5, [r0, #0]
 8011b62:	600b      	str	r3, [r1, #0]
 8011b64:	2d00      	cmp	r5, #0
 8011b66:	da03      	bge.n	8011b70 <_printf_i+0xc8>
 8011b68:	232d      	movs	r3, #45	; 0x2d
 8011b6a:	426d      	negs	r5, r5
 8011b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b70:	485e      	ldr	r0, [pc, #376]	; (8011cec <_printf_i+0x244>)
 8011b72:	230a      	movs	r3, #10
 8011b74:	e019      	b.n	8011baa <_printf_i+0x102>
 8011b76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011b7a:	6805      	ldr	r5, [r0, #0]
 8011b7c:	600b      	str	r3, [r1, #0]
 8011b7e:	bf18      	it	ne
 8011b80:	b22d      	sxthne	r5, r5
 8011b82:	e7ef      	b.n	8011b64 <_printf_i+0xbc>
 8011b84:	680b      	ldr	r3, [r1, #0]
 8011b86:	6825      	ldr	r5, [r4, #0]
 8011b88:	1d18      	adds	r0, r3, #4
 8011b8a:	6008      	str	r0, [r1, #0]
 8011b8c:	0628      	lsls	r0, r5, #24
 8011b8e:	d501      	bpl.n	8011b94 <_printf_i+0xec>
 8011b90:	681d      	ldr	r5, [r3, #0]
 8011b92:	e002      	b.n	8011b9a <_printf_i+0xf2>
 8011b94:	0669      	lsls	r1, r5, #25
 8011b96:	d5fb      	bpl.n	8011b90 <_printf_i+0xe8>
 8011b98:	881d      	ldrh	r5, [r3, #0]
 8011b9a:	4854      	ldr	r0, [pc, #336]	; (8011cec <_printf_i+0x244>)
 8011b9c:	2f6f      	cmp	r7, #111	; 0x6f
 8011b9e:	bf0c      	ite	eq
 8011ba0:	2308      	moveq	r3, #8
 8011ba2:	230a      	movne	r3, #10
 8011ba4:	2100      	movs	r1, #0
 8011ba6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011baa:	6866      	ldr	r6, [r4, #4]
 8011bac:	60a6      	str	r6, [r4, #8]
 8011bae:	2e00      	cmp	r6, #0
 8011bb0:	bfa2      	ittt	ge
 8011bb2:	6821      	ldrge	r1, [r4, #0]
 8011bb4:	f021 0104 	bicge.w	r1, r1, #4
 8011bb8:	6021      	strge	r1, [r4, #0]
 8011bba:	b90d      	cbnz	r5, 8011bc0 <_printf_i+0x118>
 8011bbc:	2e00      	cmp	r6, #0
 8011bbe:	d04d      	beq.n	8011c5c <_printf_i+0x1b4>
 8011bc0:	4616      	mov	r6, r2
 8011bc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8011bc6:	fb03 5711 	mls	r7, r3, r1, r5
 8011bca:	5dc7      	ldrb	r7, [r0, r7]
 8011bcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011bd0:	462f      	mov	r7, r5
 8011bd2:	42bb      	cmp	r3, r7
 8011bd4:	460d      	mov	r5, r1
 8011bd6:	d9f4      	bls.n	8011bc2 <_printf_i+0x11a>
 8011bd8:	2b08      	cmp	r3, #8
 8011bda:	d10b      	bne.n	8011bf4 <_printf_i+0x14c>
 8011bdc:	6823      	ldr	r3, [r4, #0]
 8011bde:	07df      	lsls	r7, r3, #31
 8011be0:	d508      	bpl.n	8011bf4 <_printf_i+0x14c>
 8011be2:	6923      	ldr	r3, [r4, #16]
 8011be4:	6861      	ldr	r1, [r4, #4]
 8011be6:	4299      	cmp	r1, r3
 8011be8:	bfde      	ittt	le
 8011bea:	2330      	movle	r3, #48	; 0x30
 8011bec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011bf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011bf4:	1b92      	subs	r2, r2, r6
 8011bf6:	6122      	str	r2, [r4, #16]
 8011bf8:	f8cd a000 	str.w	sl, [sp]
 8011bfc:	464b      	mov	r3, r9
 8011bfe:	aa03      	add	r2, sp, #12
 8011c00:	4621      	mov	r1, r4
 8011c02:	4640      	mov	r0, r8
 8011c04:	f7ff fee2 	bl	80119cc <_printf_common>
 8011c08:	3001      	adds	r0, #1
 8011c0a:	d14c      	bne.n	8011ca6 <_printf_i+0x1fe>
 8011c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8011c10:	b004      	add	sp, #16
 8011c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c16:	4835      	ldr	r0, [pc, #212]	; (8011cec <_printf_i+0x244>)
 8011c18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011c1c:	6823      	ldr	r3, [r4, #0]
 8011c1e:	680e      	ldr	r6, [r1, #0]
 8011c20:	061f      	lsls	r7, r3, #24
 8011c22:	f856 5b04 	ldr.w	r5, [r6], #4
 8011c26:	600e      	str	r6, [r1, #0]
 8011c28:	d514      	bpl.n	8011c54 <_printf_i+0x1ac>
 8011c2a:	07d9      	lsls	r1, r3, #31
 8011c2c:	bf44      	itt	mi
 8011c2e:	f043 0320 	orrmi.w	r3, r3, #32
 8011c32:	6023      	strmi	r3, [r4, #0]
 8011c34:	b91d      	cbnz	r5, 8011c3e <_printf_i+0x196>
 8011c36:	6823      	ldr	r3, [r4, #0]
 8011c38:	f023 0320 	bic.w	r3, r3, #32
 8011c3c:	6023      	str	r3, [r4, #0]
 8011c3e:	2310      	movs	r3, #16
 8011c40:	e7b0      	b.n	8011ba4 <_printf_i+0xfc>
 8011c42:	6823      	ldr	r3, [r4, #0]
 8011c44:	f043 0320 	orr.w	r3, r3, #32
 8011c48:	6023      	str	r3, [r4, #0]
 8011c4a:	2378      	movs	r3, #120	; 0x78
 8011c4c:	4828      	ldr	r0, [pc, #160]	; (8011cf0 <_printf_i+0x248>)
 8011c4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011c52:	e7e3      	b.n	8011c1c <_printf_i+0x174>
 8011c54:	065e      	lsls	r6, r3, #25
 8011c56:	bf48      	it	mi
 8011c58:	b2ad      	uxthmi	r5, r5
 8011c5a:	e7e6      	b.n	8011c2a <_printf_i+0x182>
 8011c5c:	4616      	mov	r6, r2
 8011c5e:	e7bb      	b.n	8011bd8 <_printf_i+0x130>
 8011c60:	680b      	ldr	r3, [r1, #0]
 8011c62:	6826      	ldr	r6, [r4, #0]
 8011c64:	6960      	ldr	r0, [r4, #20]
 8011c66:	1d1d      	adds	r5, r3, #4
 8011c68:	600d      	str	r5, [r1, #0]
 8011c6a:	0635      	lsls	r5, r6, #24
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	d501      	bpl.n	8011c74 <_printf_i+0x1cc>
 8011c70:	6018      	str	r0, [r3, #0]
 8011c72:	e002      	b.n	8011c7a <_printf_i+0x1d2>
 8011c74:	0671      	lsls	r1, r6, #25
 8011c76:	d5fb      	bpl.n	8011c70 <_printf_i+0x1c8>
 8011c78:	8018      	strh	r0, [r3, #0]
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	6123      	str	r3, [r4, #16]
 8011c7e:	4616      	mov	r6, r2
 8011c80:	e7ba      	b.n	8011bf8 <_printf_i+0x150>
 8011c82:	680b      	ldr	r3, [r1, #0]
 8011c84:	1d1a      	adds	r2, r3, #4
 8011c86:	600a      	str	r2, [r1, #0]
 8011c88:	681e      	ldr	r6, [r3, #0]
 8011c8a:	6862      	ldr	r2, [r4, #4]
 8011c8c:	2100      	movs	r1, #0
 8011c8e:	4630      	mov	r0, r6
 8011c90:	f7ee faa6 	bl	80001e0 <memchr>
 8011c94:	b108      	cbz	r0, 8011c9a <_printf_i+0x1f2>
 8011c96:	1b80      	subs	r0, r0, r6
 8011c98:	6060      	str	r0, [r4, #4]
 8011c9a:	6863      	ldr	r3, [r4, #4]
 8011c9c:	6123      	str	r3, [r4, #16]
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ca4:	e7a8      	b.n	8011bf8 <_printf_i+0x150>
 8011ca6:	6923      	ldr	r3, [r4, #16]
 8011ca8:	4632      	mov	r2, r6
 8011caa:	4649      	mov	r1, r9
 8011cac:	4640      	mov	r0, r8
 8011cae:	47d0      	blx	sl
 8011cb0:	3001      	adds	r0, #1
 8011cb2:	d0ab      	beq.n	8011c0c <_printf_i+0x164>
 8011cb4:	6823      	ldr	r3, [r4, #0]
 8011cb6:	079b      	lsls	r3, r3, #30
 8011cb8:	d413      	bmi.n	8011ce2 <_printf_i+0x23a>
 8011cba:	68e0      	ldr	r0, [r4, #12]
 8011cbc:	9b03      	ldr	r3, [sp, #12]
 8011cbe:	4298      	cmp	r0, r3
 8011cc0:	bfb8      	it	lt
 8011cc2:	4618      	movlt	r0, r3
 8011cc4:	e7a4      	b.n	8011c10 <_printf_i+0x168>
 8011cc6:	2301      	movs	r3, #1
 8011cc8:	4632      	mov	r2, r6
 8011cca:	4649      	mov	r1, r9
 8011ccc:	4640      	mov	r0, r8
 8011cce:	47d0      	blx	sl
 8011cd0:	3001      	adds	r0, #1
 8011cd2:	d09b      	beq.n	8011c0c <_printf_i+0x164>
 8011cd4:	3501      	adds	r5, #1
 8011cd6:	68e3      	ldr	r3, [r4, #12]
 8011cd8:	9903      	ldr	r1, [sp, #12]
 8011cda:	1a5b      	subs	r3, r3, r1
 8011cdc:	42ab      	cmp	r3, r5
 8011cde:	dcf2      	bgt.n	8011cc6 <_printf_i+0x21e>
 8011ce0:	e7eb      	b.n	8011cba <_printf_i+0x212>
 8011ce2:	2500      	movs	r5, #0
 8011ce4:	f104 0619 	add.w	r6, r4, #25
 8011ce8:	e7f5      	b.n	8011cd6 <_printf_i+0x22e>
 8011cea:	bf00      	nop
 8011cec:	080145f2 	.word	0x080145f2
 8011cf0:	08014603 	.word	0x08014603

08011cf4 <_sbrk_r>:
 8011cf4:	b538      	push	{r3, r4, r5, lr}
 8011cf6:	4d06      	ldr	r5, [pc, #24]	; (8011d10 <_sbrk_r+0x1c>)
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	4604      	mov	r4, r0
 8011cfc:	4608      	mov	r0, r1
 8011cfe:	602b      	str	r3, [r5, #0]
 8011d00:	f7f0 fc2c 	bl	800255c <_sbrk>
 8011d04:	1c43      	adds	r3, r0, #1
 8011d06:	d102      	bne.n	8011d0e <_sbrk_r+0x1a>
 8011d08:	682b      	ldr	r3, [r5, #0]
 8011d0a:	b103      	cbz	r3, 8011d0e <_sbrk_r+0x1a>
 8011d0c:	6023      	str	r3, [r4, #0]
 8011d0e:	bd38      	pop	{r3, r4, r5, pc}
 8011d10:	20008c68 	.word	0x20008c68

08011d14 <quorem>:
 8011d14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d18:	6903      	ldr	r3, [r0, #16]
 8011d1a:	690c      	ldr	r4, [r1, #16]
 8011d1c:	42a3      	cmp	r3, r4
 8011d1e:	4607      	mov	r7, r0
 8011d20:	f2c0 8081 	blt.w	8011e26 <quorem+0x112>
 8011d24:	3c01      	subs	r4, #1
 8011d26:	f101 0814 	add.w	r8, r1, #20
 8011d2a:	f100 0514 	add.w	r5, r0, #20
 8011d2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011d32:	9301      	str	r3, [sp, #4]
 8011d34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011d38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011d3c:	3301      	adds	r3, #1
 8011d3e:	429a      	cmp	r2, r3
 8011d40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011d44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011d48:	fbb2 f6f3 	udiv	r6, r2, r3
 8011d4c:	d331      	bcc.n	8011db2 <quorem+0x9e>
 8011d4e:	f04f 0e00 	mov.w	lr, #0
 8011d52:	4640      	mov	r0, r8
 8011d54:	46ac      	mov	ip, r5
 8011d56:	46f2      	mov	sl, lr
 8011d58:	f850 2b04 	ldr.w	r2, [r0], #4
 8011d5c:	b293      	uxth	r3, r2
 8011d5e:	fb06 e303 	mla	r3, r6, r3, lr
 8011d62:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011d66:	b29b      	uxth	r3, r3
 8011d68:	ebaa 0303 	sub.w	r3, sl, r3
 8011d6c:	0c12      	lsrs	r2, r2, #16
 8011d6e:	f8dc a000 	ldr.w	sl, [ip]
 8011d72:	fb06 e202 	mla	r2, r6, r2, lr
 8011d76:	fa13 f38a 	uxtah	r3, r3, sl
 8011d7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011d7e:	fa1f fa82 	uxth.w	sl, r2
 8011d82:	f8dc 2000 	ldr.w	r2, [ip]
 8011d86:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8011d8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011d8e:	b29b      	uxth	r3, r3
 8011d90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011d94:	4581      	cmp	r9, r0
 8011d96:	f84c 3b04 	str.w	r3, [ip], #4
 8011d9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011d9e:	d2db      	bcs.n	8011d58 <quorem+0x44>
 8011da0:	f855 300b 	ldr.w	r3, [r5, fp]
 8011da4:	b92b      	cbnz	r3, 8011db2 <quorem+0x9e>
 8011da6:	9b01      	ldr	r3, [sp, #4]
 8011da8:	3b04      	subs	r3, #4
 8011daa:	429d      	cmp	r5, r3
 8011dac:	461a      	mov	r2, r3
 8011dae:	d32e      	bcc.n	8011e0e <quorem+0xfa>
 8011db0:	613c      	str	r4, [r7, #16]
 8011db2:	4638      	mov	r0, r7
 8011db4:	f001 f8b6 	bl	8012f24 <__mcmp>
 8011db8:	2800      	cmp	r0, #0
 8011dba:	db24      	blt.n	8011e06 <quorem+0xf2>
 8011dbc:	3601      	adds	r6, #1
 8011dbe:	4628      	mov	r0, r5
 8011dc0:	f04f 0c00 	mov.w	ip, #0
 8011dc4:	f858 2b04 	ldr.w	r2, [r8], #4
 8011dc8:	f8d0 e000 	ldr.w	lr, [r0]
 8011dcc:	b293      	uxth	r3, r2
 8011dce:	ebac 0303 	sub.w	r3, ip, r3
 8011dd2:	0c12      	lsrs	r2, r2, #16
 8011dd4:	fa13 f38e 	uxtah	r3, r3, lr
 8011dd8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011ddc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011de0:	b29b      	uxth	r3, r3
 8011de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011de6:	45c1      	cmp	r9, r8
 8011de8:	f840 3b04 	str.w	r3, [r0], #4
 8011dec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011df0:	d2e8      	bcs.n	8011dc4 <quorem+0xb0>
 8011df2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011df6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011dfa:	b922      	cbnz	r2, 8011e06 <quorem+0xf2>
 8011dfc:	3b04      	subs	r3, #4
 8011dfe:	429d      	cmp	r5, r3
 8011e00:	461a      	mov	r2, r3
 8011e02:	d30a      	bcc.n	8011e1a <quorem+0x106>
 8011e04:	613c      	str	r4, [r7, #16]
 8011e06:	4630      	mov	r0, r6
 8011e08:	b003      	add	sp, #12
 8011e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e0e:	6812      	ldr	r2, [r2, #0]
 8011e10:	3b04      	subs	r3, #4
 8011e12:	2a00      	cmp	r2, #0
 8011e14:	d1cc      	bne.n	8011db0 <quorem+0x9c>
 8011e16:	3c01      	subs	r4, #1
 8011e18:	e7c7      	b.n	8011daa <quorem+0x96>
 8011e1a:	6812      	ldr	r2, [r2, #0]
 8011e1c:	3b04      	subs	r3, #4
 8011e1e:	2a00      	cmp	r2, #0
 8011e20:	d1f0      	bne.n	8011e04 <quorem+0xf0>
 8011e22:	3c01      	subs	r4, #1
 8011e24:	e7eb      	b.n	8011dfe <quorem+0xea>
 8011e26:	2000      	movs	r0, #0
 8011e28:	e7ee      	b.n	8011e08 <quorem+0xf4>
 8011e2a:	0000      	movs	r0, r0
 8011e2c:	0000      	movs	r0, r0
	...

08011e30 <_dtoa_r>:
 8011e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e34:	ed2d 8b02 	vpush	{d8}
 8011e38:	ec57 6b10 	vmov	r6, r7, d0
 8011e3c:	b095      	sub	sp, #84	; 0x54
 8011e3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011e40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011e44:	9105      	str	r1, [sp, #20]
 8011e46:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011e4a:	4604      	mov	r4, r0
 8011e4c:	9209      	str	r2, [sp, #36]	; 0x24
 8011e4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011e50:	b975      	cbnz	r5, 8011e70 <_dtoa_r+0x40>
 8011e52:	2010      	movs	r0, #16
 8011e54:	f7ff fa04 	bl	8011260 <malloc>
 8011e58:	4602      	mov	r2, r0
 8011e5a:	6260      	str	r0, [r4, #36]	; 0x24
 8011e5c:	b920      	cbnz	r0, 8011e68 <_dtoa_r+0x38>
 8011e5e:	4bb2      	ldr	r3, [pc, #712]	; (8012128 <_dtoa_r+0x2f8>)
 8011e60:	21ea      	movs	r1, #234	; 0xea
 8011e62:	48b2      	ldr	r0, [pc, #712]	; (801212c <_dtoa_r+0x2fc>)
 8011e64:	f001 f95e 	bl	8013124 <__assert_func>
 8011e68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011e6c:	6005      	str	r5, [r0, #0]
 8011e6e:	60c5      	str	r5, [r0, #12]
 8011e70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011e72:	6819      	ldr	r1, [r3, #0]
 8011e74:	b151      	cbz	r1, 8011e8c <_dtoa_r+0x5c>
 8011e76:	685a      	ldr	r2, [r3, #4]
 8011e78:	604a      	str	r2, [r1, #4]
 8011e7a:	2301      	movs	r3, #1
 8011e7c:	4093      	lsls	r3, r2
 8011e7e:	608b      	str	r3, [r1, #8]
 8011e80:	4620      	mov	r0, r4
 8011e82:	f000 fe11 	bl	8012aa8 <_Bfree>
 8011e86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011e88:	2200      	movs	r2, #0
 8011e8a:	601a      	str	r2, [r3, #0]
 8011e8c:	1e3b      	subs	r3, r7, #0
 8011e8e:	bfb9      	ittee	lt
 8011e90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011e94:	9303      	strlt	r3, [sp, #12]
 8011e96:	2300      	movge	r3, #0
 8011e98:	f8c8 3000 	strge.w	r3, [r8]
 8011e9c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011ea0:	4ba3      	ldr	r3, [pc, #652]	; (8012130 <_dtoa_r+0x300>)
 8011ea2:	bfbc      	itt	lt
 8011ea4:	2201      	movlt	r2, #1
 8011ea6:	f8c8 2000 	strlt.w	r2, [r8]
 8011eaa:	ea33 0309 	bics.w	r3, r3, r9
 8011eae:	d11b      	bne.n	8011ee8 <_dtoa_r+0xb8>
 8011eb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011eb2:	f242 730f 	movw	r3, #9999	; 0x270f
 8011eb6:	6013      	str	r3, [r2, #0]
 8011eb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011ebc:	4333      	orrs	r3, r6
 8011ebe:	f000 857a 	beq.w	80129b6 <_dtoa_r+0xb86>
 8011ec2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ec4:	b963      	cbnz	r3, 8011ee0 <_dtoa_r+0xb0>
 8011ec6:	4b9b      	ldr	r3, [pc, #620]	; (8012134 <_dtoa_r+0x304>)
 8011ec8:	e024      	b.n	8011f14 <_dtoa_r+0xe4>
 8011eca:	4b9b      	ldr	r3, [pc, #620]	; (8012138 <_dtoa_r+0x308>)
 8011ecc:	9300      	str	r3, [sp, #0]
 8011ece:	3308      	adds	r3, #8
 8011ed0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011ed2:	6013      	str	r3, [r2, #0]
 8011ed4:	9800      	ldr	r0, [sp, #0]
 8011ed6:	b015      	add	sp, #84	; 0x54
 8011ed8:	ecbd 8b02 	vpop	{d8}
 8011edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ee0:	4b94      	ldr	r3, [pc, #592]	; (8012134 <_dtoa_r+0x304>)
 8011ee2:	9300      	str	r3, [sp, #0]
 8011ee4:	3303      	adds	r3, #3
 8011ee6:	e7f3      	b.n	8011ed0 <_dtoa_r+0xa0>
 8011ee8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011eec:	2200      	movs	r2, #0
 8011eee:	ec51 0b17 	vmov	r0, r1, d7
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011ef8:	f7ee fde6 	bl	8000ac8 <__aeabi_dcmpeq>
 8011efc:	4680      	mov	r8, r0
 8011efe:	b158      	cbz	r0, 8011f18 <_dtoa_r+0xe8>
 8011f00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011f02:	2301      	movs	r3, #1
 8011f04:	6013      	str	r3, [r2, #0]
 8011f06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	f000 8551 	beq.w	80129b0 <_dtoa_r+0xb80>
 8011f0e:	488b      	ldr	r0, [pc, #556]	; (801213c <_dtoa_r+0x30c>)
 8011f10:	6018      	str	r0, [r3, #0]
 8011f12:	1e43      	subs	r3, r0, #1
 8011f14:	9300      	str	r3, [sp, #0]
 8011f16:	e7dd      	b.n	8011ed4 <_dtoa_r+0xa4>
 8011f18:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011f1c:	aa12      	add	r2, sp, #72	; 0x48
 8011f1e:	a913      	add	r1, sp, #76	; 0x4c
 8011f20:	4620      	mov	r0, r4
 8011f22:	f001 f8a3 	bl	801306c <__d2b>
 8011f26:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011f2a:	4683      	mov	fp, r0
 8011f2c:	2d00      	cmp	r5, #0
 8011f2e:	d07c      	beq.n	801202a <_dtoa_r+0x1fa>
 8011f30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f32:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8011f36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011f3a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8011f3e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011f42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011f46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011f4a:	4b7d      	ldr	r3, [pc, #500]	; (8012140 <_dtoa_r+0x310>)
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	4630      	mov	r0, r6
 8011f50:	4639      	mov	r1, r7
 8011f52:	f7ee f999 	bl	8000288 <__aeabi_dsub>
 8011f56:	a36e      	add	r3, pc, #440	; (adr r3, 8012110 <_dtoa_r+0x2e0>)
 8011f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f5c:	f7ee fb4c 	bl	80005f8 <__aeabi_dmul>
 8011f60:	a36d      	add	r3, pc, #436	; (adr r3, 8012118 <_dtoa_r+0x2e8>)
 8011f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f66:	f7ee f991 	bl	800028c <__adddf3>
 8011f6a:	4606      	mov	r6, r0
 8011f6c:	4628      	mov	r0, r5
 8011f6e:	460f      	mov	r7, r1
 8011f70:	f7ee fad8 	bl	8000524 <__aeabi_i2d>
 8011f74:	a36a      	add	r3, pc, #424	; (adr r3, 8012120 <_dtoa_r+0x2f0>)
 8011f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f7a:	f7ee fb3d 	bl	80005f8 <__aeabi_dmul>
 8011f7e:	4602      	mov	r2, r0
 8011f80:	460b      	mov	r3, r1
 8011f82:	4630      	mov	r0, r6
 8011f84:	4639      	mov	r1, r7
 8011f86:	f7ee f981 	bl	800028c <__adddf3>
 8011f8a:	4606      	mov	r6, r0
 8011f8c:	460f      	mov	r7, r1
 8011f8e:	f7ee fde3 	bl	8000b58 <__aeabi_d2iz>
 8011f92:	2200      	movs	r2, #0
 8011f94:	4682      	mov	sl, r0
 8011f96:	2300      	movs	r3, #0
 8011f98:	4630      	mov	r0, r6
 8011f9a:	4639      	mov	r1, r7
 8011f9c:	f7ee fd9e 	bl	8000adc <__aeabi_dcmplt>
 8011fa0:	b148      	cbz	r0, 8011fb6 <_dtoa_r+0x186>
 8011fa2:	4650      	mov	r0, sl
 8011fa4:	f7ee fabe 	bl	8000524 <__aeabi_i2d>
 8011fa8:	4632      	mov	r2, r6
 8011faa:	463b      	mov	r3, r7
 8011fac:	f7ee fd8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8011fb0:	b908      	cbnz	r0, 8011fb6 <_dtoa_r+0x186>
 8011fb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011fb6:	f1ba 0f16 	cmp.w	sl, #22
 8011fba:	d854      	bhi.n	8012066 <_dtoa_r+0x236>
 8011fbc:	4b61      	ldr	r3, [pc, #388]	; (8012144 <_dtoa_r+0x314>)
 8011fbe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fc6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011fca:	f7ee fd87 	bl	8000adc <__aeabi_dcmplt>
 8011fce:	2800      	cmp	r0, #0
 8011fd0:	d04b      	beq.n	801206a <_dtoa_r+0x23a>
 8011fd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	930e      	str	r3, [sp, #56]	; 0x38
 8011fda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011fdc:	1b5d      	subs	r5, r3, r5
 8011fde:	1e6b      	subs	r3, r5, #1
 8011fe0:	9304      	str	r3, [sp, #16]
 8011fe2:	bf43      	ittte	mi
 8011fe4:	2300      	movmi	r3, #0
 8011fe6:	f1c5 0801 	rsbmi	r8, r5, #1
 8011fea:	9304      	strmi	r3, [sp, #16]
 8011fec:	f04f 0800 	movpl.w	r8, #0
 8011ff0:	f1ba 0f00 	cmp.w	sl, #0
 8011ff4:	db3b      	blt.n	801206e <_dtoa_r+0x23e>
 8011ff6:	9b04      	ldr	r3, [sp, #16]
 8011ff8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8011ffc:	4453      	add	r3, sl
 8011ffe:	9304      	str	r3, [sp, #16]
 8012000:	2300      	movs	r3, #0
 8012002:	9306      	str	r3, [sp, #24]
 8012004:	9b05      	ldr	r3, [sp, #20]
 8012006:	2b09      	cmp	r3, #9
 8012008:	d869      	bhi.n	80120de <_dtoa_r+0x2ae>
 801200a:	2b05      	cmp	r3, #5
 801200c:	bfc4      	itt	gt
 801200e:	3b04      	subgt	r3, #4
 8012010:	9305      	strgt	r3, [sp, #20]
 8012012:	9b05      	ldr	r3, [sp, #20]
 8012014:	f1a3 0302 	sub.w	r3, r3, #2
 8012018:	bfcc      	ite	gt
 801201a:	2500      	movgt	r5, #0
 801201c:	2501      	movle	r5, #1
 801201e:	2b03      	cmp	r3, #3
 8012020:	d869      	bhi.n	80120f6 <_dtoa_r+0x2c6>
 8012022:	e8df f003 	tbb	[pc, r3]
 8012026:	4e2c      	.short	0x4e2c
 8012028:	5a4c      	.short	0x5a4c
 801202a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801202e:	441d      	add	r5, r3
 8012030:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012034:	2b20      	cmp	r3, #32
 8012036:	bfc1      	itttt	gt
 8012038:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801203c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012040:	fa09 f303 	lslgt.w	r3, r9, r3
 8012044:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012048:	bfda      	itte	le
 801204a:	f1c3 0320 	rsble	r3, r3, #32
 801204e:	fa06 f003 	lslle.w	r0, r6, r3
 8012052:	4318      	orrgt	r0, r3
 8012054:	f7ee fa56 	bl	8000504 <__aeabi_ui2d>
 8012058:	2301      	movs	r3, #1
 801205a:	4606      	mov	r6, r0
 801205c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012060:	3d01      	subs	r5, #1
 8012062:	9310      	str	r3, [sp, #64]	; 0x40
 8012064:	e771      	b.n	8011f4a <_dtoa_r+0x11a>
 8012066:	2301      	movs	r3, #1
 8012068:	e7b6      	b.n	8011fd8 <_dtoa_r+0x1a8>
 801206a:	900e      	str	r0, [sp, #56]	; 0x38
 801206c:	e7b5      	b.n	8011fda <_dtoa_r+0x1aa>
 801206e:	f1ca 0300 	rsb	r3, sl, #0
 8012072:	9306      	str	r3, [sp, #24]
 8012074:	2300      	movs	r3, #0
 8012076:	eba8 080a 	sub.w	r8, r8, sl
 801207a:	930d      	str	r3, [sp, #52]	; 0x34
 801207c:	e7c2      	b.n	8012004 <_dtoa_r+0x1d4>
 801207e:	2300      	movs	r3, #0
 8012080:	9308      	str	r3, [sp, #32]
 8012082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012084:	2b00      	cmp	r3, #0
 8012086:	dc39      	bgt.n	80120fc <_dtoa_r+0x2cc>
 8012088:	f04f 0901 	mov.w	r9, #1
 801208c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012090:	464b      	mov	r3, r9
 8012092:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012096:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012098:	2200      	movs	r2, #0
 801209a:	6042      	str	r2, [r0, #4]
 801209c:	2204      	movs	r2, #4
 801209e:	f102 0614 	add.w	r6, r2, #20
 80120a2:	429e      	cmp	r6, r3
 80120a4:	6841      	ldr	r1, [r0, #4]
 80120a6:	d92f      	bls.n	8012108 <_dtoa_r+0x2d8>
 80120a8:	4620      	mov	r0, r4
 80120aa:	f000 fcbd 	bl	8012a28 <_Balloc>
 80120ae:	9000      	str	r0, [sp, #0]
 80120b0:	2800      	cmp	r0, #0
 80120b2:	d14b      	bne.n	801214c <_dtoa_r+0x31c>
 80120b4:	4b24      	ldr	r3, [pc, #144]	; (8012148 <_dtoa_r+0x318>)
 80120b6:	4602      	mov	r2, r0
 80120b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80120bc:	e6d1      	b.n	8011e62 <_dtoa_r+0x32>
 80120be:	2301      	movs	r3, #1
 80120c0:	e7de      	b.n	8012080 <_dtoa_r+0x250>
 80120c2:	2300      	movs	r3, #0
 80120c4:	9308      	str	r3, [sp, #32]
 80120c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120c8:	eb0a 0903 	add.w	r9, sl, r3
 80120cc:	f109 0301 	add.w	r3, r9, #1
 80120d0:	2b01      	cmp	r3, #1
 80120d2:	9301      	str	r3, [sp, #4]
 80120d4:	bfb8      	it	lt
 80120d6:	2301      	movlt	r3, #1
 80120d8:	e7dd      	b.n	8012096 <_dtoa_r+0x266>
 80120da:	2301      	movs	r3, #1
 80120dc:	e7f2      	b.n	80120c4 <_dtoa_r+0x294>
 80120de:	2501      	movs	r5, #1
 80120e0:	2300      	movs	r3, #0
 80120e2:	9305      	str	r3, [sp, #20]
 80120e4:	9508      	str	r5, [sp, #32]
 80120e6:	f04f 39ff 	mov.w	r9, #4294967295
 80120ea:	2200      	movs	r2, #0
 80120ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80120f0:	2312      	movs	r3, #18
 80120f2:	9209      	str	r2, [sp, #36]	; 0x24
 80120f4:	e7cf      	b.n	8012096 <_dtoa_r+0x266>
 80120f6:	2301      	movs	r3, #1
 80120f8:	9308      	str	r3, [sp, #32]
 80120fa:	e7f4      	b.n	80120e6 <_dtoa_r+0x2b6>
 80120fc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012100:	f8cd 9004 	str.w	r9, [sp, #4]
 8012104:	464b      	mov	r3, r9
 8012106:	e7c6      	b.n	8012096 <_dtoa_r+0x266>
 8012108:	3101      	adds	r1, #1
 801210a:	6041      	str	r1, [r0, #4]
 801210c:	0052      	lsls	r2, r2, #1
 801210e:	e7c6      	b.n	801209e <_dtoa_r+0x26e>
 8012110:	636f4361 	.word	0x636f4361
 8012114:	3fd287a7 	.word	0x3fd287a7
 8012118:	8b60c8b3 	.word	0x8b60c8b3
 801211c:	3fc68a28 	.word	0x3fc68a28
 8012120:	509f79fb 	.word	0x509f79fb
 8012124:	3fd34413 	.word	0x3fd34413
 8012128:	08014621 	.word	0x08014621
 801212c:	08014638 	.word	0x08014638
 8012130:	7ff00000 	.word	0x7ff00000
 8012134:	0801461d 	.word	0x0801461d
 8012138:	08014614 	.word	0x08014614
 801213c:	080145f1 	.word	0x080145f1
 8012140:	3ff80000 	.word	0x3ff80000
 8012144:	08014730 	.word	0x08014730
 8012148:	08014697 	.word	0x08014697
 801214c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801214e:	9a00      	ldr	r2, [sp, #0]
 8012150:	601a      	str	r2, [r3, #0]
 8012152:	9b01      	ldr	r3, [sp, #4]
 8012154:	2b0e      	cmp	r3, #14
 8012156:	f200 80ad 	bhi.w	80122b4 <_dtoa_r+0x484>
 801215a:	2d00      	cmp	r5, #0
 801215c:	f000 80aa 	beq.w	80122b4 <_dtoa_r+0x484>
 8012160:	f1ba 0f00 	cmp.w	sl, #0
 8012164:	dd36      	ble.n	80121d4 <_dtoa_r+0x3a4>
 8012166:	4ac3      	ldr	r2, [pc, #780]	; (8012474 <_dtoa_r+0x644>)
 8012168:	f00a 030f 	and.w	r3, sl, #15
 801216c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012170:	ed93 7b00 	vldr	d7, [r3]
 8012174:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8012178:	ea4f 172a 	mov.w	r7, sl, asr #4
 801217c:	eeb0 8a47 	vmov.f32	s16, s14
 8012180:	eef0 8a67 	vmov.f32	s17, s15
 8012184:	d016      	beq.n	80121b4 <_dtoa_r+0x384>
 8012186:	4bbc      	ldr	r3, [pc, #752]	; (8012478 <_dtoa_r+0x648>)
 8012188:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801218c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012190:	f7ee fb5c 	bl	800084c <__aeabi_ddiv>
 8012194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012198:	f007 070f 	and.w	r7, r7, #15
 801219c:	2503      	movs	r5, #3
 801219e:	4eb6      	ldr	r6, [pc, #728]	; (8012478 <_dtoa_r+0x648>)
 80121a0:	b957      	cbnz	r7, 80121b8 <_dtoa_r+0x388>
 80121a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80121a6:	ec53 2b18 	vmov	r2, r3, d8
 80121aa:	f7ee fb4f 	bl	800084c <__aeabi_ddiv>
 80121ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80121b2:	e029      	b.n	8012208 <_dtoa_r+0x3d8>
 80121b4:	2502      	movs	r5, #2
 80121b6:	e7f2      	b.n	801219e <_dtoa_r+0x36e>
 80121b8:	07f9      	lsls	r1, r7, #31
 80121ba:	d508      	bpl.n	80121ce <_dtoa_r+0x39e>
 80121bc:	ec51 0b18 	vmov	r0, r1, d8
 80121c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80121c4:	f7ee fa18 	bl	80005f8 <__aeabi_dmul>
 80121c8:	ec41 0b18 	vmov	d8, r0, r1
 80121cc:	3501      	adds	r5, #1
 80121ce:	107f      	asrs	r7, r7, #1
 80121d0:	3608      	adds	r6, #8
 80121d2:	e7e5      	b.n	80121a0 <_dtoa_r+0x370>
 80121d4:	f000 80a6 	beq.w	8012324 <_dtoa_r+0x4f4>
 80121d8:	f1ca 0600 	rsb	r6, sl, #0
 80121dc:	4ba5      	ldr	r3, [pc, #660]	; (8012474 <_dtoa_r+0x644>)
 80121de:	4fa6      	ldr	r7, [pc, #664]	; (8012478 <_dtoa_r+0x648>)
 80121e0:	f006 020f 	and.w	r2, r6, #15
 80121e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80121e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80121f0:	f7ee fa02 	bl	80005f8 <__aeabi_dmul>
 80121f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80121f8:	1136      	asrs	r6, r6, #4
 80121fa:	2300      	movs	r3, #0
 80121fc:	2502      	movs	r5, #2
 80121fe:	2e00      	cmp	r6, #0
 8012200:	f040 8085 	bne.w	801230e <_dtoa_r+0x4de>
 8012204:	2b00      	cmp	r3, #0
 8012206:	d1d2      	bne.n	80121ae <_dtoa_r+0x37e>
 8012208:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801220a:	2b00      	cmp	r3, #0
 801220c:	f000 808c 	beq.w	8012328 <_dtoa_r+0x4f8>
 8012210:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012214:	4b99      	ldr	r3, [pc, #612]	; (801247c <_dtoa_r+0x64c>)
 8012216:	2200      	movs	r2, #0
 8012218:	4630      	mov	r0, r6
 801221a:	4639      	mov	r1, r7
 801221c:	f7ee fc5e 	bl	8000adc <__aeabi_dcmplt>
 8012220:	2800      	cmp	r0, #0
 8012222:	f000 8081 	beq.w	8012328 <_dtoa_r+0x4f8>
 8012226:	9b01      	ldr	r3, [sp, #4]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d07d      	beq.n	8012328 <_dtoa_r+0x4f8>
 801222c:	f1b9 0f00 	cmp.w	r9, #0
 8012230:	dd3c      	ble.n	80122ac <_dtoa_r+0x47c>
 8012232:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012236:	9307      	str	r3, [sp, #28]
 8012238:	2200      	movs	r2, #0
 801223a:	4b91      	ldr	r3, [pc, #580]	; (8012480 <_dtoa_r+0x650>)
 801223c:	4630      	mov	r0, r6
 801223e:	4639      	mov	r1, r7
 8012240:	f7ee f9da 	bl	80005f8 <__aeabi_dmul>
 8012244:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012248:	3501      	adds	r5, #1
 801224a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801224e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012252:	4628      	mov	r0, r5
 8012254:	f7ee f966 	bl	8000524 <__aeabi_i2d>
 8012258:	4632      	mov	r2, r6
 801225a:	463b      	mov	r3, r7
 801225c:	f7ee f9cc 	bl	80005f8 <__aeabi_dmul>
 8012260:	4b88      	ldr	r3, [pc, #544]	; (8012484 <_dtoa_r+0x654>)
 8012262:	2200      	movs	r2, #0
 8012264:	f7ee f812 	bl	800028c <__adddf3>
 8012268:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801226c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012270:	9303      	str	r3, [sp, #12]
 8012272:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012274:	2b00      	cmp	r3, #0
 8012276:	d15c      	bne.n	8012332 <_dtoa_r+0x502>
 8012278:	4b83      	ldr	r3, [pc, #524]	; (8012488 <_dtoa_r+0x658>)
 801227a:	2200      	movs	r2, #0
 801227c:	4630      	mov	r0, r6
 801227e:	4639      	mov	r1, r7
 8012280:	f7ee f802 	bl	8000288 <__aeabi_dsub>
 8012284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012288:	4606      	mov	r6, r0
 801228a:	460f      	mov	r7, r1
 801228c:	f7ee fc44 	bl	8000b18 <__aeabi_dcmpgt>
 8012290:	2800      	cmp	r0, #0
 8012292:	f040 8296 	bne.w	80127c2 <_dtoa_r+0x992>
 8012296:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801229a:	4630      	mov	r0, r6
 801229c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80122a0:	4639      	mov	r1, r7
 80122a2:	f7ee fc1b 	bl	8000adc <__aeabi_dcmplt>
 80122a6:	2800      	cmp	r0, #0
 80122a8:	f040 8288 	bne.w	80127bc <_dtoa_r+0x98c>
 80122ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80122b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80122b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	f2c0 8158 	blt.w	801256c <_dtoa_r+0x73c>
 80122bc:	f1ba 0f0e 	cmp.w	sl, #14
 80122c0:	f300 8154 	bgt.w	801256c <_dtoa_r+0x73c>
 80122c4:	4b6b      	ldr	r3, [pc, #428]	; (8012474 <_dtoa_r+0x644>)
 80122c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80122ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 80122ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	f280 80e3 	bge.w	801249c <_dtoa_r+0x66c>
 80122d6:	9b01      	ldr	r3, [sp, #4]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	f300 80df 	bgt.w	801249c <_dtoa_r+0x66c>
 80122de:	f040 826d 	bne.w	80127bc <_dtoa_r+0x98c>
 80122e2:	4b69      	ldr	r3, [pc, #420]	; (8012488 <_dtoa_r+0x658>)
 80122e4:	2200      	movs	r2, #0
 80122e6:	4640      	mov	r0, r8
 80122e8:	4649      	mov	r1, r9
 80122ea:	f7ee f985 	bl	80005f8 <__aeabi_dmul>
 80122ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80122f2:	f7ee fc07 	bl	8000b04 <__aeabi_dcmpge>
 80122f6:	9e01      	ldr	r6, [sp, #4]
 80122f8:	4637      	mov	r7, r6
 80122fa:	2800      	cmp	r0, #0
 80122fc:	f040 8243 	bne.w	8012786 <_dtoa_r+0x956>
 8012300:	9d00      	ldr	r5, [sp, #0]
 8012302:	2331      	movs	r3, #49	; 0x31
 8012304:	f805 3b01 	strb.w	r3, [r5], #1
 8012308:	f10a 0a01 	add.w	sl, sl, #1
 801230c:	e23f      	b.n	801278e <_dtoa_r+0x95e>
 801230e:	07f2      	lsls	r2, r6, #31
 8012310:	d505      	bpl.n	801231e <_dtoa_r+0x4ee>
 8012312:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012316:	f7ee f96f 	bl	80005f8 <__aeabi_dmul>
 801231a:	3501      	adds	r5, #1
 801231c:	2301      	movs	r3, #1
 801231e:	1076      	asrs	r6, r6, #1
 8012320:	3708      	adds	r7, #8
 8012322:	e76c      	b.n	80121fe <_dtoa_r+0x3ce>
 8012324:	2502      	movs	r5, #2
 8012326:	e76f      	b.n	8012208 <_dtoa_r+0x3d8>
 8012328:	9b01      	ldr	r3, [sp, #4]
 801232a:	f8cd a01c 	str.w	sl, [sp, #28]
 801232e:	930c      	str	r3, [sp, #48]	; 0x30
 8012330:	e78d      	b.n	801224e <_dtoa_r+0x41e>
 8012332:	9900      	ldr	r1, [sp, #0]
 8012334:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012336:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012338:	4b4e      	ldr	r3, [pc, #312]	; (8012474 <_dtoa_r+0x644>)
 801233a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801233e:	4401      	add	r1, r0
 8012340:	9102      	str	r1, [sp, #8]
 8012342:	9908      	ldr	r1, [sp, #32]
 8012344:	eeb0 8a47 	vmov.f32	s16, s14
 8012348:	eef0 8a67 	vmov.f32	s17, s15
 801234c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012350:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012354:	2900      	cmp	r1, #0
 8012356:	d045      	beq.n	80123e4 <_dtoa_r+0x5b4>
 8012358:	494c      	ldr	r1, [pc, #304]	; (801248c <_dtoa_r+0x65c>)
 801235a:	2000      	movs	r0, #0
 801235c:	f7ee fa76 	bl	800084c <__aeabi_ddiv>
 8012360:	ec53 2b18 	vmov	r2, r3, d8
 8012364:	f7ed ff90 	bl	8000288 <__aeabi_dsub>
 8012368:	9d00      	ldr	r5, [sp, #0]
 801236a:	ec41 0b18 	vmov	d8, r0, r1
 801236e:	4639      	mov	r1, r7
 8012370:	4630      	mov	r0, r6
 8012372:	f7ee fbf1 	bl	8000b58 <__aeabi_d2iz>
 8012376:	900c      	str	r0, [sp, #48]	; 0x30
 8012378:	f7ee f8d4 	bl	8000524 <__aeabi_i2d>
 801237c:	4602      	mov	r2, r0
 801237e:	460b      	mov	r3, r1
 8012380:	4630      	mov	r0, r6
 8012382:	4639      	mov	r1, r7
 8012384:	f7ed ff80 	bl	8000288 <__aeabi_dsub>
 8012388:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801238a:	3330      	adds	r3, #48	; 0x30
 801238c:	f805 3b01 	strb.w	r3, [r5], #1
 8012390:	ec53 2b18 	vmov	r2, r3, d8
 8012394:	4606      	mov	r6, r0
 8012396:	460f      	mov	r7, r1
 8012398:	f7ee fba0 	bl	8000adc <__aeabi_dcmplt>
 801239c:	2800      	cmp	r0, #0
 801239e:	d165      	bne.n	801246c <_dtoa_r+0x63c>
 80123a0:	4632      	mov	r2, r6
 80123a2:	463b      	mov	r3, r7
 80123a4:	4935      	ldr	r1, [pc, #212]	; (801247c <_dtoa_r+0x64c>)
 80123a6:	2000      	movs	r0, #0
 80123a8:	f7ed ff6e 	bl	8000288 <__aeabi_dsub>
 80123ac:	ec53 2b18 	vmov	r2, r3, d8
 80123b0:	f7ee fb94 	bl	8000adc <__aeabi_dcmplt>
 80123b4:	2800      	cmp	r0, #0
 80123b6:	f040 80b9 	bne.w	801252c <_dtoa_r+0x6fc>
 80123ba:	9b02      	ldr	r3, [sp, #8]
 80123bc:	429d      	cmp	r5, r3
 80123be:	f43f af75 	beq.w	80122ac <_dtoa_r+0x47c>
 80123c2:	4b2f      	ldr	r3, [pc, #188]	; (8012480 <_dtoa_r+0x650>)
 80123c4:	ec51 0b18 	vmov	r0, r1, d8
 80123c8:	2200      	movs	r2, #0
 80123ca:	f7ee f915 	bl	80005f8 <__aeabi_dmul>
 80123ce:	4b2c      	ldr	r3, [pc, #176]	; (8012480 <_dtoa_r+0x650>)
 80123d0:	ec41 0b18 	vmov	d8, r0, r1
 80123d4:	2200      	movs	r2, #0
 80123d6:	4630      	mov	r0, r6
 80123d8:	4639      	mov	r1, r7
 80123da:	f7ee f90d 	bl	80005f8 <__aeabi_dmul>
 80123de:	4606      	mov	r6, r0
 80123e0:	460f      	mov	r7, r1
 80123e2:	e7c4      	b.n	801236e <_dtoa_r+0x53e>
 80123e4:	ec51 0b17 	vmov	r0, r1, d7
 80123e8:	f7ee f906 	bl	80005f8 <__aeabi_dmul>
 80123ec:	9b02      	ldr	r3, [sp, #8]
 80123ee:	9d00      	ldr	r5, [sp, #0]
 80123f0:	930c      	str	r3, [sp, #48]	; 0x30
 80123f2:	ec41 0b18 	vmov	d8, r0, r1
 80123f6:	4639      	mov	r1, r7
 80123f8:	4630      	mov	r0, r6
 80123fa:	f7ee fbad 	bl	8000b58 <__aeabi_d2iz>
 80123fe:	9011      	str	r0, [sp, #68]	; 0x44
 8012400:	f7ee f890 	bl	8000524 <__aeabi_i2d>
 8012404:	4602      	mov	r2, r0
 8012406:	460b      	mov	r3, r1
 8012408:	4630      	mov	r0, r6
 801240a:	4639      	mov	r1, r7
 801240c:	f7ed ff3c 	bl	8000288 <__aeabi_dsub>
 8012410:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012412:	3330      	adds	r3, #48	; 0x30
 8012414:	f805 3b01 	strb.w	r3, [r5], #1
 8012418:	9b02      	ldr	r3, [sp, #8]
 801241a:	429d      	cmp	r5, r3
 801241c:	4606      	mov	r6, r0
 801241e:	460f      	mov	r7, r1
 8012420:	f04f 0200 	mov.w	r2, #0
 8012424:	d134      	bne.n	8012490 <_dtoa_r+0x660>
 8012426:	4b19      	ldr	r3, [pc, #100]	; (801248c <_dtoa_r+0x65c>)
 8012428:	ec51 0b18 	vmov	r0, r1, d8
 801242c:	f7ed ff2e 	bl	800028c <__adddf3>
 8012430:	4602      	mov	r2, r0
 8012432:	460b      	mov	r3, r1
 8012434:	4630      	mov	r0, r6
 8012436:	4639      	mov	r1, r7
 8012438:	f7ee fb6e 	bl	8000b18 <__aeabi_dcmpgt>
 801243c:	2800      	cmp	r0, #0
 801243e:	d175      	bne.n	801252c <_dtoa_r+0x6fc>
 8012440:	ec53 2b18 	vmov	r2, r3, d8
 8012444:	4911      	ldr	r1, [pc, #68]	; (801248c <_dtoa_r+0x65c>)
 8012446:	2000      	movs	r0, #0
 8012448:	f7ed ff1e 	bl	8000288 <__aeabi_dsub>
 801244c:	4602      	mov	r2, r0
 801244e:	460b      	mov	r3, r1
 8012450:	4630      	mov	r0, r6
 8012452:	4639      	mov	r1, r7
 8012454:	f7ee fb42 	bl	8000adc <__aeabi_dcmplt>
 8012458:	2800      	cmp	r0, #0
 801245a:	f43f af27 	beq.w	80122ac <_dtoa_r+0x47c>
 801245e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012460:	1e6b      	subs	r3, r5, #1
 8012462:	930c      	str	r3, [sp, #48]	; 0x30
 8012464:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012468:	2b30      	cmp	r3, #48	; 0x30
 801246a:	d0f8      	beq.n	801245e <_dtoa_r+0x62e>
 801246c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012470:	e04a      	b.n	8012508 <_dtoa_r+0x6d8>
 8012472:	bf00      	nop
 8012474:	08014730 	.word	0x08014730
 8012478:	08014708 	.word	0x08014708
 801247c:	3ff00000 	.word	0x3ff00000
 8012480:	40240000 	.word	0x40240000
 8012484:	401c0000 	.word	0x401c0000
 8012488:	40140000 	.word	0x40140000
 801248c:	3fe00000 	.word	0x3fe00000
 8012490:	4baf      	ldr	r3, [pc, #700]	; (8012750 <_dtoa_r+0x920>)
 8012492:	f7ee f8b1 	bl	80005f8 <__aeabi_dmul>
 8012496:	4606      	mov	r6, r0
 8012498:	460f      	mov	r7, r1
 801249a:	e7ac      	b.n	80123f6 <_dtoa_r+0x5c6>
 801249c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80124a0:	9d00      	ldr	r5, [sp, #0]
 80124a2:	4642      	mov	r2, r8
 80124a4:	464b      	mov	r3, r9
 80124a6:	4630      	mov	r0, r6
 80124a8:	4639      	mov	r1, r7
 80124aa:	f7ee f9cf 	bl	800084c <__aeabi_ddiv>
 80124ae:	f7ee fb53 	bl	8000b58 <__aeabi_d2iz>
 80124b2:	9002      	str	r0, [sp, #8]
 80124b4:	f7ee f836 	bl	8000524 <__aeabi_i2d>
 80124b8:	4642      	mov	r2, r8
 80124ba:	464b      	mov	r3, r9
 80124bc:	f7ee f89c 	bl	80005f8 <__aeabi_dmul>
 80124c0:	4602      	mov	r2, r0
 80124c2:	460b      	mov	r3, r1
 80124c4:	4630      	mov	r0, r6
 80124c6:	4639      	mov	r1, r7
 80124c8:	f7ed fede 	bl	8000288 <__aeabi_dsub>
 80124cc:	9e02      	ldr	r6, [sp, #8]
 80124ce:	9f01      	ldr	r7, [sp, #4]
 80124d0:	3630      	adds	r6, #48	; 0x30
 80124d2:	f805 6b01 	strb.w	r6, [r5], #1
 80124d6:	9e00      	ldr	r6, [sp, #0]
 80124d8:	1bae      	subs	r6, r5, r6
 80124da:	42b7      	cmp	r7, r6
 80124dc:	4602      	mov	r2, r0
 80124de:	460b      	mov	r3, r1
 80124e0:	d137      	bne.n	8012552 <_dtoa_r+0x722>
 80124e2:	f7ed fed3 	bl	800028c <__adddf3>
 80124e6:	4642      	mov	r2, r8
 80124e8:	464b      	mov	r3, r9
 80124ea:	4606      	mov	r6, r0
 80124ec:	460f      	mov	r7, r1
 80124ee:	f7ee fb13 	bl	8000b18 <__aeabi_dcmpgt>
 80124f2:	b9c8      	cbnz	r0, 8012528 <_dtoa_r+0x6f8>
 80124f4:	4642      	mov	r2, r8
 80124f6:	464b      	mov	r3, r9
 80124f8:	4630      	mov	r0, r6
 80124fa:	4639      	mov	r1, r7
 80124fc:	f7ee fae4 	bl	8000ac8 <__aeabi_dcmpeq>
 8012500:	b110      	cbz	r0, 8012508 <_dtoa_r+0x6d8>
 8012502:	9b02      	ldr	r3, [sp, #8]
 8012504:	07d9      	lsls	r1, r3, #31
 8012506:	d40f      	bmi.n	8012528 <_dtoa_r+0x6f8>
 8012508:	4620      	mov	r0, r4
 801250a:	4659      	mov	r1, fp
 801250c:	f000 facc 	bl	8012aa8 <_Bfree>
 8012510:	2300      	movs	r3, #0
 8012512:	702b      	strb	r3, [r5, #0]
 8012514:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012516:	f10a 0001 	add.w	r0, sl, #1
 801251a:	6018      	str	r0, [r3, #0]
 801251c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801251e:	2b00      	cmp	r3, #0
 8012520:	f43f acd8 	beq.w	8011ed4 <_dtoa_r+0xa4>
 8012524:	601d      	str	r5, [r3, #0]
 8012526:	e4d5      	b.n	8011ed4 <_dtoa_r+0xa4>
 8012528:	f8cd a01c 	str.w	sl, [sp, #28]
 801252c:	462b      	mov	r3, r5
 801252e:	461d      	mov	r5, r3
 8012530:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012534:	2a39      	cmp	r2, #57	; 0x39
 8012536:	d108      	bne.n	801254a <_dtoa_r+0x71a>
 8012538:	9a00      	ldr	r2, [sp, #0]
 801253a:	429a      	cmp	r2, r3
 801253c:	d1f7      	bne.n	801252e <_dtoa_r+0x6fe>
 801253e:	9a07      	ldr	r2, [sp, #28]
 8012540:	9900      	ldr	r1, [sp, #0]
 8012542:	3201      	adds	r2, #1
 8012544:	9207      	str	r2, [sp, #28]
 8012546:	2230      	movs	r2, #48	; 0x30
 8012548:	700a      	strb	r2, [r1, #0]
 801254a:	781a      	ldrb	r2, [r3, #0]
 801254c:	3201      	adds	r2, #1
 801254e:	701a      	strb	r2, [r3, #0]
 8012550:	e78c      	b.n	801246c <_dtoa_r+0x63c>
 8012552:	4b7f      	ldr	r3, [pc, #508]	; (8012750 <_dtoa_r+0x920>)
 8012554:	2200      	movs	r2, #0
 8012556:	f7ee f84f 	bl	80005f8 <__aeabi_dmul>
 801255a:	2200      	movs	r2, #0
 801255c:	2300      	movs	r3, #0
 801255e:	4606      	mov	r6, r0
 8012560:	460f      	mov	r7, r1
 8012562:	f7ee fab1 	bl	8000ac8 <__aeabi_dcmpeq>
 8012566:	2800      	cmp	r0, #0
 8012568:	d09b      	beq.n	80124a2 <_dtoa_r+0x672>
 801256a:	e7cd      	b.n	8012508 <_dtoa_r+0x6d8>
 801256c:	9a08      	ldr	r2, [sp, #32]
 801256e:	2a00      	cmp	r2, #0
 8012570:	f000 80c4 	beq.w	80126fc <_dtoa_r+0x8cc>
 8012574:	9a05      	ldr	r2, [sp, #20]
 8012576:	2a01      	cmp	r2, #1
 8012578:	f300 80a8 	bgt.w	80126cc <_dtoa_r+0x89c>
 801257c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801257e:	2a00      	cmp	r2, #0
 8012580:	f000 80a0 	beq.w	80126c4 <_dtoa_r+0x894>
 8012584:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012588:	9e06      	ldr	r6, [sp, #24]
 801258a:	4645      	mov	r5, r8
 801258c:	9a04      	ldr	r2, [sp, #16]
 801258e:	2101      	movs	r1, #1
 8012590:	441a      	add	r2, r3
 8012592:	4620      	mov	r0, r4
 8012594:	4498      	add	r8, r3
 8012596:	9204      	str	r2, [sp, #16]
 8012598:	f000 fb42 	bl	8012c20 <__i2b>
 801259c:	4607      	mov	r7, r0
 801259e:	2d00      	cmp	r5, #0
 80125a0:	dd0b      	ble.n	80125ba <_dtoa_r+0x78a>
 80125a2:	9b04      	ldr	r3, [sp, #16]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	dd08      	ble.n	80125ba <_dtoa_r+0x78a>
 80125a8:	42ab      	cmp	r3, r5
 80125aa:	9a04      	ldr	r2, [sp, #16]
 80125ac:	bfa8      	it	ge
 80125ae:	462b      	movge	r3, r5
 80125b0:	eba8 0803 	sub.w	r8, r8, r3
 80125b4:	1aed      	subs	r5, r5, r3
 80125b6:	1ad3      	subs	r3, r2, r3
 80125b8:	9304      	str	r3, [sp, #16]
 80125ba:	9b06      	ldr	r3, [sp, #24]
 80125bc:	b1fb      	cbz	r3, 80125fe <_dtoa_r+0x7ce>
 80125be:	9b08      	ldr	r3, [sp, #32]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	f000 809f 	beq.w	8012704 <_dtoa_r+0x8d4>
 80125c6:	2e00      	cmp	r6, #0
 80125c8:	dd11      	ble.n	80125ee <_dtoa_r+0x7be>
 80125ca:	4639      	mov	r1, r7
 80125cc:	4632      	mov	r2, r6
 80125ce:	4620      	mov	r0, r4
 80125d0:	f000 fbe2 	bl	8012d98 <__pow5mult>
 80125d4:	465a      	mov	r2, fp
 80125d6:	4601      	mov	r1, r0
 80125d8:	4607      	mov	r7, r0
 80125da:	4620      	mov	r0, r4
 80125dc:	f000 fb36 	bl	8012c4c <__multiply>
 80125e0:	4659      	mov	r1, fp
 80125e2:	9007      	str	r0, [sp, #28]
 80125e4:	4620      	mov	r0, r4
 80125e6:	f000 fa5f 	bl	8012aa8 <_Bfree>
 80125ea:	9b07      	ldr	r3, [sp, #28]
 80125ec:	469b      	mov	fp, r3
 80125ee:	9b06      	ldr	r3, [sp, #24]
 80125f0:	1b9a      	subs	r2, r3, r6
 80125f2:	d004      	beq.n	80125fe <_dtoa_r+0x7ce>
 80125f4:	4659      	mov	r1, fp
 80125f6:	4620      	mov	r0, r4
 80125f8:	f000 fbce 	bl	8012d98 <__pow5mult>
 80125fc:	4683      	mov	fp, r0
 80125fe:	2101      	movs	r1, #1
 8012600:	4620      	mov	r0, r4
 8012602:	f000 fb0d 	bl	8012c20 <__i2b>
 8012606:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012608:	2b00      	cmp	r3, #0
 801260a:	4606      	mov	r6, r0
 801260c:	dd7c      	ble.n	8012708 <_dtoa_r+0x8d8>
 801260e:	461a      	mov	r2, r3
 8012610:	4601      	mov	r1, r0
 8012612:	4620      	mov	r0, r4
 8012614:	f000 fbc0 	bl	8012d98 <__pow5mult>
 8012618:	9b05      	ldr	r3, [sp, #20]
 801261a:	2b01      	cmp	r3, #1
 801261c:	4606      	mov	r6, r0
 801261e:	dd76      	ble.n	801270e <_dtoa_r+0x8de>
 8012620:	2300      	movs	r3, #0
 8012622:	9306      	str	r3, [sp, #24]
 8012624:	6933      	ldr	r3, [r6, #16]
 8012626:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801262a:	6918      	ldr	r0, [r3, #16]
 801262c:	f000 faa8 	bl	8012b80 <__hi0bits>
 8012630:	f1c0 0020 	rsb	r0, r0, #32
 8012634:	9b04      	ldr	r3, [sp, #16]
 8012636:	4418      	add	r0, r3
 8012638:	f010 001f 	ands.w	r0, r0, #31
 801263c:	f000 8086 	beq.w	801274c <_dtoa_r+0x91c>
 8012640:	f1c0 0320 	rsb	r3, r0, #32
 8012644:	2b04      	cmp	r3, #4
 8012646:	dd7f      	ble.n	8012748 <_dtoa_r+0x918>
 8012648:	f1c0 001c 	rsb	r0, r0, #28
 801264c:	9b04      	ldr	r3, [sp, #16]
 801264e:	4403      	add	r3, r0
 8012650:	4480      	add	r8, r0
 8012652:	4405      	add	r5, r0
 8012654:	9304      	str	r3, [sp, #16]
 8012656:	f1b8 0f00 	cmp.w	r8, #0
 801265a:	dd05      	ble.n	8012668 <_dtoa_r+0x838>
 801265c:	4659      	mov	r1, fp
 801265e:	4642      	mov	r2, r8
 8012660:	4620      	mov	r0, r4
 8012662:	f000 fbf3 	bl	8012e4c <__lshift>
 8012666:	4683      	mov	fp, r0
 8012668:	9b04      	ldr	r3, [sp, #16]
 801266a:	2b00      	cmp	r3, #0
 801266c:	dd05      	ble.n	801267a <_dtoa_r+0x84a>
 801266e:	4631      	mov	r1, r6
 8012670:	461a      	mov	r2, r3
 8012672:	4620      	mov	r0, r4
 8012674:	f000 fbea 	bl	8012e4c <__lshift>
 8012678:	4606      	mov	r6, r0
 801267a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801267c:	2b00      	cmp	r3, #0
 801267e:	d069      	beq.n	8012754 <_dtoa_r+0x924>
 8012680:	4631      	mov	r1, r6
 8012682:	4658      	mov	r0, fp
 8012684:	f000 fc4e 	bl	8012f24 <__mcmp>
 8012688:	2800      	cmp	r0, #0
 801268a:	da63      	bge.n	8012754 <_dtoa_r+0x924>
 801268c:	2300      	movs	r3, #0
 801268e:	4659      	mov	r1, fp
 8012690:	220a      	movs	r2, #10
 8012692:	4620      	mov	r0, r4
 8012694:	f000 fa2a 	bl	8012aec <__multadd>
 8012698:	9b08      	ldr	r3, [sp, #32]
 801269a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801269e:	4683      	mov	fp, r0
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	f000 818f 	beq.w	80129c4 <_dtoa_r+0xb94>
 80126a6:	4639      	mov	r1, r7
 80126a8:	2300      	movs	r3, #0
 80126aa:	220a      	movs	r2, #10
 80126ac:	4620      	mov	r0, r4
 80126ae:	f000 fa1d 	bl	8012aec <__multadd>
 80126b2:	f1b9 0f00 	cmp.w	r9, #0
 80126b6:	4607      	mov	r7, r0
 80126b8:	f300 808e 	bgt.w	80127d8 <_dtoa_r+0x9a8>
 80126bc:	9b05      	ldr	r3, [sp, #20]
 80126be:	2b02      	cmp	r3, #2
 80126c0:	dc50      	bgt.n	8012764 <_dtoa_r+0x934>
 80126c2:	e089      	b.n	80127d8 <_dtoa_r+0x9a8>
 80126c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80126c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80126ca:	e75d      	b.n	8012588 <_dtoa_r+0x758>
 80126cc:	9b01      	ldr	r3, [sp, #4]
 80126ce:	1e5e      	subs	r6, r3, #1
 80126d0:	9b06      	ldr	r3, [sp, #24]
 80126d2:	42b3      	cmp	r3, r6
 80126d4:	bfbf      	itttt	lt
 80126d6:	9b06      	ldrlt	r3, [sp, #24]
 80126d8:	9606      	strlt	r6, [sp, #24]
 80126da:	1af2      	sublt	r2, r6, r3
 80126dc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80126de:	bfb6      	itet	lt
 80126e0:	189b      	addlt	r3, r3, r2
 80126e2:	1b9e      	subge	r6, r3, r6
 80126e4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80126e6:	9b01      	ldr	r3, [sp, #4]
 80126e8:	bfb8      	it	lt
 80126ea:	2600      	movlt	r6, #0
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	bfb5      	itete	lt
 80126f0:	eba8 0503 	sublt.w	r5, r8, r3
 80126f4:	9b01      	ldrge	r3, [sp, #4]
 80126f6:	2300      	movlt	r3, #0
 80126f8:	4645      	movge	r5, r8
 80126fa:	e747      	b.n	801258c <_dtoa_r+0x75c>
 80126fc:	9e06      	ldr	r6, [sp, #24]
 80126fe:	9f08      	ldr	r7, [sp, #32]
 8012700:	4645      	mov	r5, r8
 8012702:	e74c      	b.n	801259e <_dtoa_r+0x76e>
 8012704:	9a06      	ldr	r2, [sp, #24]
 8012706:	e775      	b.n	80125f4 <_dtoa_r+0x7c4>
 8012708:	9b05      	ldr	r3, [sp, #20]
 801270a:	2b01      	cmp	r3, #1
 801270c:	dc18      	bgt.n	8012740 <_dtoa_r+0x910>
 801270e:	9b02      	ldr	r3, [sp, #8]
 8012710:	b9b3      	cbnz	r3, 8012740 <_dtoa_r+0x910>
 8012712:	9b03      	ldr	r3, [sp, #12]
 8012714:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012718:	b9a3      	cbnz	r3, 8012744 <_dtoa_r+0x914>
 801271a:	9b03      	ldr	r3, [sp, #12]
 801271c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012720:	0d1b      	lsrs	r3, r3, #20
 8012722:	051b      	lsls	r3, r3, #20
 8012724:	b12b      	cbz	r3, 8012732 <_dtoa_r+0x902>
 8012726:	9b04      	ldr	r3, [sp, #16]
 8012728:	3301      	adds	r3, #1
 801272a:	9304      	str	r3, [sp, #16]
 801272c:	f108 0801 	add.w	r8, r8, #1
 8012730:	2301      	movs	r3, #1
 8012732:	9306      	str	r3, [sp, #24]
 8012734:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012736:	2b00      	cmp	r3, #0
 8012738:	f47f af74 	bne.w	8012624 <_dtoa_r+0x7f4>
 801273c:	2001      	movs	r0, #1
 801273e:	e779      	b.n	8012634 <_dtoa_r+0x804>
 8012740:	2300      	movs	r3, #0
 8012742:	e7f6      	b.n	8012732 <_dtoa_r+0x902>
 8012744:	9b02      	ldr	r3, [sp, #8]
 8012746:	e7f4      	b.n	8012732 <_dtoa_r+0x902>
 8012748:	d085      	beq.n	8012656 <_dtoa_r+0x826>
 801274a:	4618      	mov	r0, r3
 801274c:	301c      	adds	r0, #28
 801274e:	e77d      	b.n	801264c <_dtoa_r+0x81c>
 8012750:	40240000 	.word	0x40240000
 8012754:	9b01      	ldr	r3, [sp, #4]
 8012756:	2b00      	cmp	r3, #0
 8012758:	dc38      	bgt.n	80127cc <_dtoa_r+0x99c>
 801275a:	9b05      	ldr	r3, [sp, #20]
 801275c:	2b02      	cmp	r3, #2
 801275e:	dd35      	ble.n	80127cc <_dtoa_r+0x99c>
 8012760:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012764:	f1b9 0f00 	cmp.w	r9, #0
 8012768:	d10d      	bne.n	8012786 <_dtoa_r+0x956>
 801276a:	4631      	mov	r1, r6
 801276c:	464b      	mov	r3, r9
 801276e:	2205      	movs	r2, #5
 8012770:	4620      	mov	r0, r4
 8012772:	f000 f9bb 	bl	8012aec <__multadd>
 8012776:	4601      	mov	r1, r0
 8012778:	4606      	mov	r6, r0
 801277a:	4658      	mov	r0, fp
 801277c:	f000 fbd2 	bl	8012f24 <__mcmp>
 8012780:	2800      	cmp	r0, #0
 8012782:	f73f adbd 	bgt.w	8012300 <_dtoa_r+0x4d0>
 8012786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012788:	9d00      	ldr	r5, [sp, #0]
 801278a:	ea6f 0a03 	mvn.w	sl, r3
 801278e:	f04f 0800 	mov.w	r8, #0
 8012792:	4631      	mov	r1, r6
 8012794:	4620      	mov	r0, r4
 8012796:	f000 f987 	bl	8012aa8 <_Bfree>
 801279a:	2f00      	cmp	r7, #0
 801279c:	f43f aeb4 	beq.w	8012508 <_dtoa_r+0x6d8>
 80127a0:	f1b8 0f00 	cmp.w	r8, #0
 80127a4:	d005      	beq.n	80127b2 <_dtoa_r+0x982>
 80127a6:	45b8      	cmp	r8, r7
 80127a8:	d003      	beq.n	80127b2 <_dtoa_r+0x982>
 80127aa:	4641      	mov	r1, r8
 80127ac:	4620      	mov	r0, r4
 80127ae:	f000 f97b 	bl	8012aa8 <_Bfree>
 80127b2:	4639      	mov	r1, r7
 80127b4:	4620      	mov	r0, r4
 80127b6:	f000 f977 	bl	8012aa8 <_Bfree>
 80127ba:	e6a5      	b.n	8012508 <_dtoa_r+0x6d8>
 80127bc:	2600      	movs	r6, #0
 80127be:	4637      	mov	r7, r6
 80127c0:	e7e1      	b.n	8012786 <_dtoa_r+0x956>
 80127c2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80127c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80127c8:	4637      	mov	r7, r6
 80127ca:	e599      	b.n	8012300 <_dtoa_r+0x4d0>
 80127cc:	9b08      	ldr	r3, [sp, #32]
 80127ce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	f000 80fd 	beq.w	80129d2 <_dtoa_r+0xba2>
 80127d8:	2d00      	cmp	r5, #0
 80127da:	dd05      	ble.n	80127e8 <_dtoa_r+0x9b8>
 80127dc:	4639      	mov	r1, r7
 80127de:	462a      	mov	r2, r5
 80127e0:	4620      	mov	r0, r4
 80127e2:	f000 fb33 	bl	8012e4c <__lshift>
 80127e6:	4607      	mov	r7, r0
 80127e8:	9b06      	ldr	r3, [sp, #24]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d05c      	beq.n	80128a8 <_dtoa_r+0xa78>
 80127ee:	6879      	ldr	r1, [r7, #4]
 80127f0:	4620      	mov	r0, r4
 80127f2:	f000 f919 	bl	8012a28 <_Balloc>
 80127f6:	4605      	mov	r5, r0
 80127f8:	b928      	cbnz	r0, 8012806 <_dtoa_r+0x9d6>
 80127fa:	4b80      	ldr	r3, [pc, #512]	; (80129fc <_dtoa_r+0xbcc>)
 80127fc:	4602      	mov	r2, r0
 80127fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012802:	f7ff bb2e 	b.w	8011e62 <_dtoa_r+0x32>
 8012806:	693a      	ldr	r2, [r7, #16]
 8012808:	3202      	adds	r2, #2
 801280a:	0092      	lsls	r2, r2, #2
 801280c:	f107 010c 	add.w	r1, r7, #12
 8012810:	300c      	adds	r0, #12
 8012812:	f7fe fd35 	bl	8011280 <memcpy>
 8012816:	2201      	movs	r2, #1
 8012818:	4629      	mov	r1, r5
 801281a:	4620      	mov	r0, r4
 801281c:	f000 fb16 	bl	8012e4c <__lshift>
 8012820:	9b00      	ldr	r3, [sp, #0]
 8012822:	3301      	adds	r3, #1
 8012824:	9301      	str	r3, [sp, #4]
 8012826:	9b00      	ldr	r3, [sp, #0]
 8012828:	444b      	add	r3, r9
 801282a:	9307      	str	r3, [sp, #28]
 801282c:	9b02      	ldr	r3, [sp, #8]
 801282e:	f003 0301 	and.w	r3, r3, #1
 8012832:	46b8      	mov	r8, r7
 8012834:	9306      	str	r3, [sp, #24]
 8012836:	4607      	mov	r7, r0
 8012838:	9b01      	ldr	r3, [sp, #4]
 801283a:	4631      	mov	r1, r6
 801283c:	3b01      	subs	r3, #1
 801283e:	4658      	mov	r0, fp
 8012840:	9302      	str	r3, [sp, #8]
 8012842:	f7ff fa67 	bl	8011d14 <quorem>
 8012846:	4603      	mov	r3, r0
 8012848:	3330      	adds	r3, #48	; 0x30
 801284a:	9004      	str	r0, [sp, #16]
 801284c:	4641      	mov	r1, r8
 801284e:	4658      	mov	r0, fp
 8012850:	9308      	str	r3, [sp, #32]
 8012852:	f000 fb67 	bl	8012f24 <__mcmp>
 8012856:	463a      	mov	r2, r7
 8012858:	4681      	mov	r9, r0
 801285a:	4631      	mov	r1, r6
 801285c:	4620      	mov	r0, r4
 801285e:	f000 fb7d 	bl	8012f5c <__mdiff>
 8012862:	68c2      	ldr	r2, [r0, #12]
 8012864:	9b08      	ldr	r3, [sp, #32]
 8012866:	4605      	mov	r5, r0
 8012868:	bb02      	cbnz	r2, 80128ac <_dtoa_r+0xa7c>
 801286a:	4601      	mov	r1, r0
 801286c:	4658      	mov	r0, fp
 801286e:	f000 fb59 	bl	8012f24 <__mcmp>
 8012872:	9b08      	ldr	r3, [sp, #32]
 8012874:	4602      	mov	r2, r0
 8012876:	4629      	mov	r1, r5
 8012878:	4620      	mov	r0, r4
 801287a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801287e:	f000 f913 	bl	8012aa8 <_Bfree>
 8012882:	9b05      	ldr	r3, [sp, #20]
 8012884:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012886:	9d01      	ldr	r5, [sp, #4]
 8012888:	ea43 0102 	orr.w	r1, r3, r2
 801288c:	9b06      	ldr	r3, [sp, #24]
 801288e:	430b      	orrs	r3, r1
 8012890:	9b08      	ldr	r3, [sp, #32]
 8012892:	d10d      	bne.n	80128b0 <_dtoa_r+0xa80>
 8012894:	2b39      	cmp	r3, #57	; 0x39
 8012896:	d029      	beq.n	80128ec <_dtoa_r+0xabc>
 8012898:	f1b9 0f00 	cmp.w	r9, #0
 801289c:	dd01      	ble.n	80128a2 <_dtoa_r+0xa72>
 801289e:	9b04      	ldr	r3, [sp, #16]
 80128a0:	3331      	adds	r3, #49	; 0x31
 80128a2:	9a02      	ldr	r2, [sp, #8]
 80128a4:	7013      	strb	r3, [r2, #0]
 80128a6:	e774      	b.n	8012792 <_dtoa_r+0x962>
 80128a8:	4638      	mov	r0, r7
 80128aa:	e7b9      	b.n	8012820 <_dtoa_r+0x9f0>
 80128ac:	2201      	movs	r2, #1
 80128ae:	e7e2      	b.n	8012876 <_dtoa_r+0xa46>
 80128b0:	f1b9 0f00 	cmp.w	r9, #0
 80128b4:	db06      	blt.n	80128c4 <_dtoa_r+0xa94>
 80128b6:	9905      	ldr	r1, [sp, #20]
 80128b8:	ea41 0909 	orr.w	r9, r1, r9
 80128bc:	9906      	ldr	r1, [sp, #24]
 80128be:	ea59 0101 	orrs.w	r1, r9, r1
 80128c2:	d120      	bne.n	8012906 <_dtoa_r+0xad6>
 80128c4:	2a00      	cmp	r2, #0
 80128c6:	ddec      	ble.n	80128a2 <_dtoa_r+0xa72>
 80128c8:	4659      	mov	r1, fp
 80128ca:	2201      	movs	r2, #1
 80128cc:	4620      	mov	r0, r4
 80128ce:	9301      	str	r3, [sp, #4]
 80128d0:	f000 fabc 	bl	8012e4c <__lshift>
 80128d4:	4631      	mov	r1, r6
 80128d6:	4683      	mov	fp, r0
 80128d8:	f000 fb24 	bl	8012f24 <__mcmp>
 80128dc:	2800      	cmp	r0, #0
 80128de:	9b01      	ldr	r3, [sp, #4]
 80128e0:	dc02      	bgt.n	80128e8 <_dtoa_r+0xab8>
 80128e2:	d1de      	bne.n	80128a2 <_dtoa_r+0xa72>
 80128e4:	07da      	lsls	r2, r3, #31
 80128e6:	d5dc      	bpl.n	80128a2 <_dtoa_r+0xa72>
 80128e8:	2b39      	cmp	r3, #57	; 0x39
 80128ea:	d1d8      	bne.n	801289e <_dtoa_r+0xa6e>
 80128ec:	9a02      	ldr	r2, [sp, #8]
 80128ee:	2339      	movs	r3, #57	; 0x39
 80128f0:	7013      	strb	r3, [r2, #0]
 80128f2:	462b      	mov	r3, r5
 80128f4:	461d      	mov	r5, r3
 80128f6:	3b01      	subs	r3, #1
 80128f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80128fc:	2a39      	cmp	r2, #57	; 0x39
 80128fe:	d050      	beq.n	80129a2 <_dtoa_r+0xb72>
 8012900:	3201      	adds	r2, #1
 8012902:	701a      	strb	r2, [r3, #0]
 8012904:	e745      	b.n	8012792 <_dtoa_r+0x962>
 8012906:	2a00      	cmp	r2, #0
 8012908:	dd03      	ble.n	8012912 <_dtoa_r+0xae2>
 801290a:	2b39      	cmp	r3, #57	; 0x39
 801290c:	d0ee      	beq.n	80128ec <_dtoa_r+0xabc>
 801290e:	3301      	adds	r3, #1
 8012910:	e7c7      	b.n	80128a2 <_dtoa_r+0xa72>
 8012912:	9a01      	ldr	r2, [sp, #4]
 8012914:	9907      	ldr	r1, [sp, #28]
 8012916:	f802 3c01 	strb.w	r3, [r2, #-1]
 801291a:	428a      	cmp	r2, r1
 801291c:	d02a      	beq.n	8012974 <_dtoa_r+0xb44>
 801291e:	4659      	mov	r1, fp
 8012920:	2300      	movs	r3, #0
 8012922:	220a      	movs	r2, #10
 8012924:	4620      	mov	r0, r4
 8012926:	f000 f8e1 	bl	8012aec <__multadd>
 801292a:	45b8      	cmp	r8, r7
 801292c:	4683      	mov	fp, r0
 801292e:	f04f 0300 	mov.w	r3, #0
 8012932:	f04f 020a 	mov.w	r2, #10
 8012936:	4641      	mov	r1, r8
 8012938:	4620      	mov	r0, r4
 801293a:	d107      	bne.n	801294c <_dtoa_r+0xb1c>
 801293c:	f000 f8d6 	bl	8012aec <__multadd>
 8012940:	4680      	mov	r8, r0
 8012942:	4607      	mov	r7, r0
 8012944:	9b01      	ldr	r3, [sp, #4]
 8012946:	3301      	adds	r3, #1
 8012948:	9301      	str	r3, [sp, #4]
 801294a:	e775      	b.n	8012838 <_dtoa_r+0xa08>
 801294c:	f000 f8ce 	bl	8012aec <__multadd>
 8012950:	4639      	mov	r1, r7
 8012952:	4680      	mov	r8, r0
 8012954:	2300      	movs	r3, #0
 8012956:	220a      	movs	r2, #10
 8012958:	4620      	mov	r0, r4
 801295a:	f000 f8c7 	bl	8012aec <__multadd>
 801295e:	4607      	mov	r7, r0
 8012960:	e7f0      	b.n	8012944 <_dtoa_r+0xb14>
 8012962:	f1b9 0f00 	cmp.w	r9, #0
 8012966:	9a00      	ldr	r2, [sp, #0]
 8012968:	bfcc      	ite	gt
 801296a:	464d      	movgt	r5, r9
 801296c:	2501      	movle	r5, #1
 801296e:	4415      	add	r5, r2
 8012970:	f04f 0800 	mov.w	r8, #0
 8012974:	4659      	mov	r1, fp
 8012976:	2201      	movs	r2, #1
 8012978:	4620      	mov	r0, r4
 801297a:	9301      	str	r3, [sp, #4]
 801297c:	f000 fa66 	bl	8012e4c <__lshift>
 8012980:	4631      	mov	r1, r6
 8012982:	4683      	mov	fp, r0
 8012984:	f000 face 	bl	8012f24 <__mcmp>
 8012988:	2800      	cmp	r0, #0
 801298a:	dcb2      	bgt.n	80128f2 <_dtoa_r+0xac2>
 801298c:	d102      	bne.n	8012994 <_dtoa_r+0xb64>
 801298e:	9b01      	ldr	r3, [sp, #4]
 8012990:	07db      	lsls	r3, r3, #31
 8012992:	d4ae      	bmi.n	80128f2 <_dtoa_r+0xac2>
 8012994:	462b      	mov	r3, r5
 8012996:	461d      	mov	r5, r3
 8012998:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801299c:	2a30      	cmp	r2, #48	; 0x30
 801299e:	d0fa      	beq.n	8012996 <_dtoa_r+0xb66>
 80129a0:	e6f7      	b.n	8012792 <_dtoa_r+0x962>
 80129a2:	9a00      	ldr	r2, [sp, #0]
 80129a4:	429a      	cmp	r2, r3
 80129a6:	d1a5      	bne.n	80128f4 <_dtoa_r+0xac4>
 80129a8:	f10a 0a01 	add.w	sl, sl, #1
 80129ac:	2331      	movs	r3, #49	; 0x31
 80129ae:	e779      	b.n	80128a4 <_dtoa_r+0xa74>
 80129b0:	4b13      	ldr	r3, [pc, #76]	; (8012a00 <_dtoa_r+0xbd0>)
 80129b2:	f7ff baaf 	b.w	8011f14 <_dtoa_r+0xe4>
 80129b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	f47f aa86 	bne.w	8011eca <_dtoa_r+0x9a>
 80129be:	4b11      	ldr	r3, [pc, #68]	; (8012a04 <_dtoa_r+0xbd4>)
 80129c0:	f7ff baa8 	b.w	8011f14 <_dtoa_r+0xe4>
 80129c4:	f1b9 0f00 	cmp.w	r9, #0
 80129c8:	dc03      	bgt.n	80129d2 <_dtoa_r+0xba2>
 80129ca:	9b05      	ldr	r3, [sp, #20]
 80129cc:	2b02      	cmp	r3, #2
 80129ce:	f73f aec9 	bgt.w	8012764 <_dtoa_r+0x934>
 80129d2:	9d00      	ldr	r5, [sp, #0]
 80129d4:	4631      	mov	r1, r6
 80129d6:	4658      	mov	r0, fp
 80129d8:	f7ff f99c 	bl	8011d14 <quorem>
 80129dc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80129e0:	f805 3b01 	strb.w	r3, [r5], #1
 80129e4:	9a00      	ldr	r2, [sp, #0]
 80129e6:	1aaa      	subs	r2, r5, r2
 80129e8:	4591      	cmp	r9, r2
 80129ea:	ddba      	ble.n	8012962 <_dtoa_r+0xb32>
 80129ec:	4659      	mov	r1, fp
 80129ee:	2300      	movs	r3, #0
 80129f0:	220a      	movs	r2, #10
 80129f2:	4620      	mov	r0, r4
 80129f4:	f000 f87a 	bl	8012aec <__multadd>
 80129f8:	4683      	mov	fp, r0
 80129fa:	e7eb      	b.n	80129d4 <_dtoa_r+0xba4>
 80129fc:	08014697 	.word	0x08014697
 8012a00:	080145f0 	.word	0x080145f0
 8012a04:	08014614 	.word	0x08014614

08012a08 <_localeconv_r>:
 8012a08:	4800      	ldr	r0, [pc, #0]	; (8012a0c <_localeconv_r+0x4>)
 8012a0a:	4770      	bx	lr
 8012a0c:	2000053c 	.word	0x2000053c

08012a10 <__malloc_lock>:
 8012a10:	4801      	ldr	r0, [pc, #4]	; (8012a18 <__malloc_lock+0x8>)
 8012a12:	f000 bbb8 	b.w	8013186 <__retarget_lock_acquire_recursive>
 8012a16:	bf00      	nop
 8012a18:	20008c70 	.word	0x20008c70

08012a1c <__malloc_unlock>:
 8012a1c:	4801      	ldr	r0, [pc, #4]	; (8012a24 <__malloc_unlock+0x8>)
 8012a1e:	f000 bbb3 	b.w	8013188 <__retarget_lock_release_recursive>
 8012a22:	bf00      	nop
 8012a24:	20008c70 	.word	0x20008c70

08012a28 <_Balloc>:
 8012a28:	b570      	push	{r4, r5, r6, lr}
 8012a2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012a2c:	4604      	mov	r4, r0
 8012a2e:	460d      	mov	r5, r1
 8012a30:	b976      	cbnz	r6, 8012a50 <_Balloc+0x28>
 8012a32:	2010      	movs	r0, #16
 8012a34:	f7fe fc14 	bl	8011260 <malloc>
 8012a38:	4602      	mov	r2, r0
 8012a3a:	6260      	str	r0, [r4, #36]	; 0x24
 8012a3c:	b920      	cbnz	r0, 8012a48 <_Balloc+0x20>
 8012a3e:	4b18      	ldr	r3, [pc, #96]	; (8012aa0 <_Balloc+0x78>)
 8012a40:	4818      	ldr	r0, [pc, #96]	; (8012aa4 <_Balloc+0x7c>)
 8012a42:	2166      	movs	r1, #102	; 0x66
 8012a44:	f000 fb6e 	bl	8013124 <__assert_func>
 8012a48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012a4c:	6006      	str	r6, [r0, #0]
 8012a4e:	60c6      	str	r6, [r0, #12]
 8012a50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012a52:	68f3      	ldr	r3, [r6, #12]
 8012a54:	b183      	cbz	r3, 8012a78 <_Balloc+0x50>
 8012a56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a58:	68db      	ldr	r3, [r3, #12]
 8012a5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012a5e:	b9b8      	cbnz	r0, 8012a90 <_Balloc+0x68>
 8012a60:	2101      	movs	r1, #1
 8012a62:	fa01 f605 	lsl.w	r6, r1, r5
 8012a66:	1d72      	adds	r2, r6, #5
 8012a68:	0092      	lsls	r2, r2, #2
 8012a6a:	4620      	mov	r0, r4
 8012a6c:	f7fe fc1e 	bl	80112ac <_calloc_r>
 8012a70:	b160      	cbz	r0, 8012a8c <_Balloc+0x64>
 8012a72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012a76:	e00e      	b.n	8012a96 <_Balloc+0x6e>
 8012a78:	2221      	movs	r2, #33	; 0x21
 8012a7a:	2104      	movs	r1, #4
 8012a7c:	4620      	mov	r0, r4
 8012a7e:	f7fe fc15 	bl	80112ac <_calloc_r>
 8012a82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a84:	60f0      	str	r0, [r6, #12]
 8012a86:	68db      	ldr	r3, [r3, #12]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d1e4      	bne.n	8012a56 <_Balloc+0x2e>
 8012a8c:	2000      	movs	r0, #0
 8012a8e:	bd70      	pop	{r4, r5, r6, pc}
 8012a90:	6802      	ldr	r2, [r0, #0]
 8012a92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012a96:	2300      	movs	r3, #0
 8012a98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012a9c:	e7f7      	b.n	8012a8e <_Balloc+0x66>
 8012a9e:	bf00      	nop
 8012aa0:	08014621 	.word	0x08014621
 8012aa4:	080146a8 	.word	0x080146a8

08012aa8 <_Bfree>:
 8012aa8:	b570      	push	{r4, r5, r6, lr}
 8012aaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012aac:	4605      	mov	r5, r0
 8012aae:	460c      	mov	r4, r1
 8012ab0:	b976      	cbnz	r6, 8012ad0 <_Bfree+0x28>
 8012ab2:	2010      	movs	r0, #16
 8012ab4:	f7fe fbd4 	bl	8011260 <malloc>
 8012ab8:	4602      	mov	r2, r0
 8012aba:	6268      	str	r0, [r5, #36]	; 0x24
 8012abc:	b920      	cbnz	r0, 8012ac8 <_Bfree+0x20>
 8012abe:	4b09      	ldr	r3, [pc, #36]	; (8012ae4 <_Bfree+0x3c>)
 8012ac0:	4809      	ldr	r0, [pc, #36]	; (8012ae8 <_Bfree+0x40>)
 8012ac2:	218a      	movs	r1, #138	; 0x8a
 8012ac4:	f000 fb2e 	bl	8013124 <__assert_func>
 8012ac8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012acc:	6006      	str	r6, [r0, #0]
 8012ace:	60c6      	str	r6, [r0, #12]
 8012ad0:	b13c      	cbz	r4, 8012ae2 <_Bfree+0x3a>
 8012ad2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012ad4:	6862      	ldr	r2, [r4, #4]
 8012ad6:	68db      	ldr	r3, [r3, #12]
 8012ad8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012adc:	6021      	str	r1, [r4, #0]
 8012ade:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012ae2:	bd70      	pop	{r4, r5, r6, pc}
 8012ae4:	08014621 	.word	0x08014621
 8012ae8:	080146a8 	.word	0x080146a8

08012aec <__multadd>:
 8012aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012af0:	690e      	ldr	r6, [r1, #16]
 8012af2:	4607      	mov	r7, r0
 8012af4:	4698      	mov	r8, r3
 8012af6:	460c      	mov	r4, r1
 8012af8:	f101 0014 	add.w	r0, r1, #20
 8012afc:	2300      	movs	r3, #0
 8012afe:	6805      	ldr	r5, [r0, #0]
 8012b00:	b2a9      	uxth	r1, r5
 8012b02:	fb02 8101 	mla	r1, r2, r1, r8
 8012b06:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8012b0a:	0c2d      	lsrs	r5, r5, #16
 8012b0c:	fb02 c505 	mla	r5, r2, r5, ip
 8012b10:	b289      	uxth	r1, r1
 8012b12:	3301      	adds	r3, #1
 8012b14:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012b18:	429e      	cmp	r6, r3
 8012b1a:	f840 1b04 	str.w	r1, [r0], #4
 8012b1e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8012b22:	dcec      	bgt.n	8012afe <__multadd+0x12>
 8012b24:	f1b8 0f00 	cmp.w	r8, #0
 8012b28:	d022      	beq.n	8012b70 <__multadd+0x84>
 8012b2a:	68a3      	ldr	r3, [r4, #8]
 8012b2c:	42b3      	cmp	r3, r6
 8012b2e:	dc19      	bgt.n	8012b64 <__multadd+0x78>
 8012b30:	6861      	ldr	r1, [r4, #4]
 8012b32:	4638      	mov	r0, r7
 8012b34:	3101      	adds	r1, #1
 8012b36:	f7ff ff77 	bl	8012a28 <_Balloc>
 8012b3a:	4605      	mov	r5, r0
 8012b3c:	b928      	cbnz	r0, 8012b4a <__multadd+0x5e>
 8012b3e:	4602      	mov	r2, r0
 8012b40:	4b0d      	ldr	r3, [pc, #52]	; (8012b78 <__multadd+0x8c>)
 8012b42:	480e      	ldr	r0, [pc, #56]	; (8012b7c <__multadd+0x90>)
 8012b44:	21b5      	movs	r1, #181	; 0xb5
 8012b46:	f000 faed 	bl	8013124 <__assert_func>
 8012b4a:	6922      	ldr	r2, [r4, #16]
 8012b4c:	3202      	adds	r2, #2
 8012b4e:	f104 010c 	add.w	r1, r4, #12
 8012b52:	0092      	lsls	r2, r2, #2
 8012b54:	300c      	adds	r0, #12
 8012b56:	f7fe fb93 	bl	8011280 <memcpy>
 8012b5a:	4621      	mov	r1, r4
 8012b5c:	4638      	mov	r0, r7
 8012b5e:	f7ff ffa3 	bl	8012aa8 <_Bfree>
 8012b62:	462c      	mov	r4, r5
 8012b64:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012b68:	3601      	adds	r6, #1
 8012b6a:	f8c3 8014 	str.w	r8, [r3, #20]
 8012b6e:	6126      	str	r6, [r4, #16]
 8012b70:	4620      	mov	r0, r4
 8012b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b76:	bf00      	nop
 8012b78:	08014697 	.word	0x08014697
 8012b7c:	080146a8 	.word	0x080146a8

08012b80 <__hi0bits>:
 8012b80:	0c03      	lsrs	r3, r0, #16
 8012b82:	041b      	lsls	r3, r3, #16
 8012b84:	b9d3      	cbnz	r3, 8012bbc <__hi0bits+0x3c>
 8012b86:	0400      	lsls	r0, r0, #16
 8012b88:	2310      	movs	r3, #16
 8012b8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012b8e:	bf04      	itt	eq
 8012b90:	0200      	lsleq	r0, r0, #8
 8012b92:	3308      	addeq	r3, #8
 8012b94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012b98:	bf04      	itt	eq
 8012b9a:	0100      	lsleq	r0, r0, #4
 8012b9c:	3304      	addeq	r3, #4
 8012b9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012ba2:	bf04      	itt	eq
 8012ba4:	0080      	lsleq	r0, r0, #2
 8012ba6:	3302      	addeq	r3, #2
 8012ba8:	2800      	cmp	r0, #0
 8012baa:	db05      	blt.n	8012bb8 <__hi0bits+0x38>
 8012bac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012bb0:	f103 0301 	add.w	r3, r3, #1
 8012bb4:	bf08      	it	eq
 8012bb6:	2320      	moveq	r3, #32
 8012bb8:	4618      	mov	r0, r3
 8012bba:	4770      	bx	lr
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	e7e4      	b.n	8012b8a <__hi0bits+0xa>

08012bc0 <__lo0bits>:
 8012bc0:	6803      	ldr	r3, [r0, #0]
 8012bc2:	f013 0207 	ands.w	r2, r3, #7
 8012bc6:	4601      	mov	r1, r0
 8012bc8:	d00b      	beq.n	8012be2 <__lo0bits+0x22>
 8012bca:	07da      	lsls	r2, r3, #31
 8012bcc:	d424      	bmi.n	8012c18 <__lo0bits+0x58>
 8012bce:	0798      	lsls	r0, r3, #30
 8012bd0:	bf49      	itett	mi
 8012bd2:	085b      	lsrmi	r3, r3, #1
 8012bd4:	089b      	lsrpl	r3, r3, #2
 8012bd6:	2001      	movmi	r0, #1
 8012bd8:	600b      	strmi	r3, [r1, #0]
 8012bda:	bf5c      	itt	pl
 8012bdc:	600b      	strpl	r3, [r1, #0]
 8012bde:	2002      	movpl	r0, #2
 8012be0:	4770      	bx	lr
 8012be2:	b298      	uxth	r0, r3
 8012be4:	b9b0      	cbnz	r0, 8012c14 <__lo0bits+0x54>
 8012be6:	0c1b      	lsrs	r3, r3, #16
 8012be8:	2010      	movs	r0, #16
 8012bea:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012bee:	bf04      	itt	eq
 8012bf0:	0a1b      	lsreq	r3, r3, #8
 8012bf2:	3008      	addeq	r0, #8
 8012bf4:	071a      	lsls	r2, r3, #28
 8012bf6:	bf04      	itt	eq
 8012bf8:	091b      	lsreq	r3, r3, #4
 8012bfa:	3004      	addeq	r0, #4
 8012bfc:	079a      	lsls	r2, r3, #30
 8012bfe:	bf04      	itt	eq
 8012c00:	089b      	lsreq	r3, r3, #2
 8012c02:	3002      	addeq	r0, #2
 8012c04:	07da      	lsls	r2, r3, #31
 8012c06:	d403      	bmi.n	8012c10 <__lo0bits+0x50>
 8012c08:	085b      	lsrs	r3, r3, #1
 8012c0a:	f100 0001 	add.w	r0, r0, #1
 8012c0e:	d005      	beq.n	8012c1c <__lo0bits+0x5c>
 8012c10:	600b      	str	r3, [r1, #0]
 8012c12:	4770      	bx	lr
 8012c14:	4610      	mov	r0, r2
 8012c16:	e7e8      	b.n	8012bea <__lo0bits+0x2a>
 8012c18:	2000      	movs	r0, #0
 8012c1a:	4770      	bx	lr
 8012c1c:	2020      	movs	r0, #32
 8012c1e:	4770      	bx	lr

08012c20 <__i2b>:
 8012c20:	b510      	push	{r4, lr}
 8012c22:	460c      	mov	r4, r1
 8012c24:	2101      	movs	r1, #1
 8012c26:	f7ff feff 	bl	8012a28 <_Balloc>
 8012c2a:	4602      	mov	r2, r0
 8012c2c:	b928      	cbnz	r0, 8012c3a <__i2b+0x1a>
 8012c2e:	4b05      	ldr	r3, [pc, #20]	; (8012c44 <__i2b+0x24>)
 8012c30:	4805      	ldr	r0, [pc, #20]	; (8012c48 <__i2b+0x28>)
 8012c32:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012c36:	f000 fa75 	bl	8013124 <__assert_func>
 8012c3a:	2301      	movs	r3, #1
 8012c3c:	6144      	str	r4, [r0, #20]
 8012c3e:	6103      	str	r3, [r0, #16]
 8012c40:	bd10      	pop	{r4, pc}
 8012c42:	bf00      	nop
 8012c44:	08014697 	.word	0x08014697
 8012c48:	080146a8 	.word	0x080146a8

08012c4c <__multiply>:
 8012c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c50:	4614      	mov	r4, r2
 8012c52:	690a      	ldr	r2, [r1, #16]
 8012c54:	6923      	ldr	r3, [r4, #16]
 8012c56:	429a      	cmp	r2, r3
 8012c58:	bfb8      	it	lt
 8012c5a:	460b      	movlt	r3, r1
 8012c5c:	460d      	mov	r5, r1
 8012c5e:	bfbc      	itt	lt
 8012c60:	4625      	movlt	r5, r4
 8012c62:	461c      	movlt	r4, r3
 8012c64:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012c68:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012c6c:	68ab      	ldr	r3, [r5, #8]
 8012c6e:	6869      	ldr	r1, [r5, #4]
 8012c70:	eb0a 0709 	add.w	r7, sl, r9
 8012c74:	42bb      	cmp	r3, r7
 8012c76:	b085      	sub	sp, #20
 8012c78:	bfb8      	it	lt
 8012c7a:	3101      	addlt	r1, #1
 8012c7c:	f7ff fed4 	bl	8012a28 <_Balloc>
 8012c80:	b930      	cbnz	r0, 8012c90 <__multiply+0x44>
 8012c82:	4602      	mov	r2, r0
 8012c84:	4b42      	ldr	r3, [pc, #264]	; (8012d90 <__multiply+0x144>)
 8012c86:	4843      	ldr	r0, [pc, #268]	; (8012d94 <__multiply+0x148>)
 8012c88:	f240 115d 	movw	r1, #349	; 0x15d
 8012c8c:	f000 fa4a 	bl	8013124 <__assert_func>
 8012c90:	f100 0614 	add.w	r6, r0, #20
 8012c94:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012c98:	4633      	mov	r3, r6
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	4543      	cmp	r3, r8
 8012c9e:	d31e      	bcc.n	8012cde <__multiply+0x92>
 8012ca0:	f105 0c14 	add.w	ip, r5, #20
 8012ca4:	f104 0314 	add.w	r3, r4, #20
 8012ca8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012cac:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012cb0:	9202      	str	r2, [sp, #8]
 8012cb2:	ebac 0205 	sub.w	r2, ip, r5
 8012cb6:	3a15      	subs	r2, #21
 8012cb8:	f022 0203 	bic.w	r2, r2, #3
 8012cbc:	3204      	adds	r2, #4
 8012cbe:	f105 0115 	add.w	r1, r5, #21
 8012cc2:	458c      	cmp	ip, r1
 8012cc4:	bf38      	it	cc
 8012cc6:	2204      	movcc	r2, #4
 8012cc8:	9201      	str	r2, [sp, #4]
 8012cca:	9a02      	ldr	r2, [sp, #8]
 8012ccc:	9303      	str	r3, [sp, #12]
 8012cce:	429a      	cmp	r2, r3
 8012cd0:	d808      	bhi.n	8012ce4 <__multiply+0x98>
 8012cd2:	2f00      	cmp	r7, #0
 8012cd4:	dc55      	bgt.n	8012d82 <__multiply+0x136>
 8012cd6:	6107      	str	r7, [r0, #16]
 8012cd8:	b005      	add	sp, #20
 8012cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cde:	f843 2b04 	str.w	r2, [r3], #4
 8012ce2:	e7db      	b.n	8012c9c <__multiply+0x50>
 8012ce4:	f8b3 a000 	ldrh.w	sl, [r3]
 8012ce8:	f1ba 0f00 	cmp.w	sl, #0
 8012cec:	d020      	beq.n	8012d30 <__multiply+0xe4>
 8012cee:	f105 0e14 	add.w	lr, r5, #20
 8012cf2:	46b1      	mov	r9, r6
 8012cf4:	2200      	movs	r2, #0
 8012cf6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8012cfa:	f8d9 b000 	ldr.w	fp, [r9]
 8012cfe:	b2a1      	uxth	r1, r4
 8012d00:	fa1f fb8b 	uxth.w	fp, fp
 8012d04:	fb0a b101 	mla	r1, sl, r1, fp
 8012d08:	4411      	add	r1, r2
 8012d0a:	f8d9 2000 	ldr.w	r2, [r9]
 8012d0e:	0c24      	lsrs	r4, r4, #16
 8012d10:	0c12      	lsrs	r2, r2, #16
 8012d12:	fb0a 2404 	mla	r4, sl, r4, r2
 8012d16:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8012d1a:	b289      	uxth	r1, r1
 8012d1c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012d20:	45f4      	cmp	ip, lr
 8012d22:	f849 1b04 	str.w	r1, [r9], #4
 8012d26:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8012d2a:	d8e4      	bhi.n	8012cf6 <__multiply+0xaa>
 8012d2c:	9901      	ldr	r1, [sp, #4]
 8012d2e:	5072      	str	r2, [r6, r1]
 8012d30:	9a03      	ldr	r2, [sp, #12]
 8012d32:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012d36:	3304      	adds	r3, #4
 8012d38:	f1b9 0f00 	cmp.w	r9, #0
 8012d3c:	d01f      	beq.n	8012d7e <__multiply+0x132>
 8012d3e:	6834      	ldr	r4, [r6, #0]
 8012d40:	f105 0114 	add.w	r1, r5, #20
 8012d44:	46b6      	mov	lr, r6
 8012d46:	f04f 0a00 	mov.w	sl, #0
 8012d4a:	880a      	ldrh	r2, [r1, #0]
 8012d4c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8012d50:	fb09 b202 	mla	r2, r9, r2, fp
 8012d54:	4492      	add	sl, r2
 8012d56:	b2a4      	uxth	r4, r4
 8012d58:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012d5c:	f84e 4b04 	str.w	r4, [lr], #4
 8012d60:	f851 4b04 	ldr.w	r4, [r1], #4
 8012d64:	f8be 2000 	ldrh.w	r2, [lr]
 8012d68:	0c24      	lsrs	r4, r4, #16
 8012d6a:	fb09 2404 	mla	r4, r9, r4, r2
 8012d6e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8012d72:	458c      	cmp	ip, r1
 8012d74:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012d78:	d8e7      	bhi.n	8012d4a <__multiply+0xfe>
 8012d7a:	9a01      	ldr	r2, [sp, #4]
 8012d7c:	50b4      	str	r4, [r6, r2]
 8012d7e:	3604      	adds	r6, #4
 8012d80:	e7a3      	b.n	8012cca <__multiply+0x7e>
 8012d82:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d1a5      	bne.n	8012cd6 <__multiply+0x8a>
 8012d8a:	3f01      	subs	r7, #1
 8012d8c:	e7a1      	b.n	8012cd2 <__multiply+0x86>
 8012d8e:	bf00      	nop
 8012d90:	08014697 	.word	0x08014697
 8012d94:	080146a8 	.word	0x080146a8

08012d98 <__pow5mult>:
 8012d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d9c:	4615      	mov	r5, r2
 8012d9e:	f012 0203 	ands.w	r2, r2, #3
 8012da2:	4606      	mov	r6, r0
 8012da4:	460f      	mov	r7, r1
 8012da6:	d007      	beq.n	8012db8 <__pow5mult+0x20>
 8012da8:	4c25      	ldr	r4, [pc, #148]	; (8012e40 <__pow5mult+0xa8>)
 8012daa:	3a01      	subs	r2, #1
 8012dac:	2300      	movs	r3, #0
 8012dae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012db2:	f7ff fe9b 	bl	8012aec <__multadd>
 8012db6:	4607      	mov	r7, r0
 8012db8:	10ad      	asrs	r5, r5, #2
 8012dba:	d03d      	beq.n	8012e38 <__pow5mult+0xa0>
 8012dbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012dbe:	b97c      	cbnz	r4, 8012de0 <__pow5mult+0x48>
 8012dc0:	2010      	movs	r0, #16
 8012dc2:	f7fe fa4d 	bl	8011260 <malloc>
 8012dc6:	4602      	mov	r2, r0
 8012dc8:	6270      	str	r0, [r6, #36]	; 0x24
 8012dca:	b928      	cbnz	r0, 8012dd8 <__pow5mult+0x40>
 8012dcc:	4b1d      	ldr	r3, [pc, #116]	; (8012e44 <__pow5mult+0xac>)
 8012dce:	481e      	ldr	r0, [pc, #120]	; (8012e48 <__pow5mult+0xb0>)
 8012dd0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012dd4:	f000 f9a6 	bl	8013124 <__assert_func>
 8012dd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012ddc:	6004      	str	r4, [r0, #0]
 8012dde:	60c4      	str	r4, [r0, #12]
 8012de0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012de4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012de8:	b94c      	cbnz	r4, 8012dfe <__pow5mult+0x66>
 8012dea:	f240 2171 	movw	r1, #625	; 0x271
 8012dee:	4630      	mov	r0, r6
 8012df0:	f7ff ff16 	bl	8012c20 <__i2b>
 8012df4:	2300      	movs	r3, #0
 8012df6:	f8c8 0008 	str.w	r0, [r8, #8]
 8012dfa:	4604      	mov	r4, r0
 8012dfc:	6003      	str	r3, [r0, #0]
 8012dfe:	f04f 0900 	mov.w	r9, #0
 8012e02:	07eb      	lsls	r3, r5, #31
 8012e04:	d50a      	bpl.n	8012e1c <__pow5mult+0x84>
 8012e06:	4639      	mov	r1, r7
 8012e08:	4622      	mov	r2, r4
 8012e0a:	4630      	mov	r0, r6
 8012e0c:	f7ff ff1e 	bl	8012c4c <__multiply>
 8012e10:	4639      	mov	r1, r7
 8012e12:	4680      	mov	r8, r0
 8012e14:	4630      	mov	r0, r6
 8012e16:	f7ff fe47 	bl	8012aa8 <_Bfree>
 8012e1a:	4647      	mov	r7, r8
 8012e1c:	106d      	asrs	r5, r5, #1
 8012e1e:	d00b      	beq.n	8012e38 <__pow5mult+0xa0>
 8012e20:	6820      	ldr	r0, [r4, #0]
 8012e22:	b938      	cbnz	r0, 8012e34 <__pow5mult+0x9c>
 8012e24:	4622      	mov	r2, r4
 8012e26:	4621      	mov	r1, r4
 8012e28:	4630      	mov	r0, r6
 8012e2a:	f7ff ff0f 	bl	8012c4c <__multiply>
 8012e2e:	6020      	str	r0, [r4, #0]
 8012e30:	f8c0 9000 	str.w	r9, [r0]
 8012e34:	4604      	mov	r4, r0
 8012e36:	e7e4      	b.n	8012e02 <__pow5mult+0x6a>
 8012e38:	4638      	mov	r0, r7
 8012e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e3e:	bf00      	nop
 8012e40:	080147f8 	.word	0x080147f8
 8012e44:	08014621 	.word	0x08014621
 8012e48:	080146a8 	.word	0x080146a8

08012e4c <__lshift>:
 8012e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e50:	460c      	mov	r4, r1
 8012e52:	6849      	ldr	r1, [r1, #4]
 8012e54:	6923      	ldr	r3, [r4, #16]
 8012e56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012e5a:	68a3      	ldr	r3, [r4, #8]
 8012e5c:	4607      	mov	r7, r0
 8012e5e:	4691      	mov	r9, r2
 8012e60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012e64:	f108 0601 	add.w	r6, r8, #1
 8012e68:	42b3      	cmp	r3, r6
 8012e6a:	db0b      	blt.n	8012e84 <__lshift+0x38>
 8012e6c:	4638      	mov	r0, r7
 8012e6e:	f7ff fddb 	bl	8012a28 <_Balloc>
 8012e72:	4605      	mov	r5, r0
 8012e74:	b948      	cbnz	r0, 8012e8a <__lshift+0x3e>
 8012e76:	4602      	mov	r2, r0
 8012e78:	4b28      	ldr	r3, [pc, #160]	; (8012f1c <__lshift+0xd0>)
 8012e7a:	4829      	ldr	r0, [pc, #164]	; (8012f20 <__lshift+0xd4>)
 8012e7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012e80:	f000 f950 	bl	8013124 <__assert_func>
 8012e84:	3101      	adds	r1, #1
 8012e86:	005b      	lsls	r3, r3, #1
 8012e88:	e7ee      	b.n	8012e68 <__lshift+0x1c>
 8012e8a:	2300      	movs	r3, #0
 8012e8c:	f100 0114 	add.w	r1, r0, #20
 8012e90:	f100 0210 	add.w	r2, r0, #16
 8012e94:	4618      	mov	r0, r3
 8012e96:	4553      	cmp	r3, sl
 8012e98:	db33      	blt.n	8012f02 <__lshift+0xb6>
 8012e9a:	6920      	ldr	r0, [r4, #16]
 8012e9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012ea0:	f104 0314 	add.w	r3, r4, #20
 8012ea4:	f019 091f 	ands.w	r9, r9, #31
 8012ea8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012eac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012eb0:	d02b      	beq.n	8012f0a <__lshift+0xbe>
 8012eb2:	f1c9 0e20 	rsb	lr, r9, #32
 8012eb6:	468a      	mov	sl, r1
 8012eb8:	2200      	movs	r2, #0
 8012eba:	6818      	ldr	r0, [r3, #0]
 8012ebc:	fa00 f009 	lsl.w	r0, r0, r9
 8012ec0:	4302      	orrs	r2, r0
 8012ec2:	f84a 2b04 	str.w	r2, [sl], #4
 8012ec6:	f853 2b04 	ldr.w	r2, [r3], #4
 8012eca:	459c      	cmp	ip, r3
 8012ecc:	fa22 f20e 	lsr.w	r2, r2, lr
 8012ed0:	d8f3      	bhi.n	8012eba <__lshift+0x6e>
 8012ed2:	ebac 0304 	sub.w	r3, ip, r4
 8012ed6:	3b15      	subs	r3, #21
 8012ed8:	f023 0303 	bic.w	r3, r3, #3
 8012edc:	3304      	adds	r3, #4
 8012ede:	f104 0015 	add.w	r0, r4, #21
 8012ee2:	4584      	cmp	ip, r0
 8012ee4:	bf38      	it	cc
 8012ee6:	2304      	movcc	r3, #4
 8012ee8:	50ca      	str	r2, [r1, r3]
 8012eea:	b10a      	cbz	r2, 8012ef0 <__lshift+0xa4>
 8012eec:	f108 0602 	add.w	r6, r8, #2
 8012ef0:	3e01      	subs	r6, #1
 8012ef2:	4638      	mov	r0, r7
 8012ef4:	612e      	str	r6, [r5, #16]
 8012ef6:	4621      	mov	r1, r4
 8012ef8:	f7ff fdd6 	bl	8012aa8 <_Bfree>
 8012efc:	4628      	mov	r0, r5
 8012efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f02:	f842 0f04 	str.w	r0, [r2, #4]!
 8012f06:	3301      	adds	r3, #1
 8012f08:	e7c5      	b.n	8012e96 <__lshift+0x4a>
 8012f0a:	3904      	subs	r1, #4
 8012f0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f10:	f841 2f04 	str.w	r2, [r1, #4]!
 8012f14:	459c      	cmp	ip, r3
 8012f16:	d8f9      	bhi.n	8012f0c <__lshift+0xc0>
 8012f18:	e7ea      	b.n	8012ef0 <__lshift+0xa4>
 8012f1a:	bf00      	nop
 8012f1c:	08014697 	.word	0x08014697
 8012f20:	080146a8 	.word	0x080146a8

08012f24 <__mcmp>:
 8012f24:	b530      	push	{r4, r5, lr}
 8012f26:	6902      	ldr	r2, [r0, #16]
 8012f28:	690c      	ldr	r4, [r1, #16]
 8012f2a:	1b12      	subs	r2, r2, r4
 8012f2c:	d10e      	bne.n	8012f4c <__mcmp+0x28>
 8012f2e:	f100 0314 	add.w	r3, r0, #20
 8012f32:	3114      	adds	r1, #20
 8012f34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012f38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012f3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012f40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012f44:	42a5      	cmp	r5, r4
 8012f46:	d003      	beq.n	8012f50 <__mcmp+0x2c>
 8012f48:	d305      	bcc.n	8012f56 <__mcmp+0x32>
 8012f4a:	2201      	movs	r2, #1
 8012f4c:	4610      	mov	r0, r2
 8012f4e:	bd30      	pop	{r4, r5, pc}
 8012f50:	4283      	cmp	r3, r0
 8012f52:	d3f3      	bcc.n	8012f3c <__mcmp+0x18>
 8012f54:	e7fa      	b.n	8012f4c <__mcmp+0x28>
 8012f56:	f04f 32ff 	mov.w	r2, #4294967295
 8012f5a:	e7f7      	b.n	8012f4c <__mcmp+0x28>

08012f5c <__mdiff>:
 8012f5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f60:	460c      	mov	r4, r1
 8012f62:	4606      	mov	r6, r0
 8012f64:	4611      	mov	r1, r2
 8012f66:	4620      	mov	r0, r4
 8012f68:	4617      	mov	r7, r2
 8012f6a:	f7ff ffdb 	bl	8012f24 <__mcmp>
 8012f6e:	1e05      	subs	r5, r0, #0
 8012f70:	d110      	bne.n	8012f94 <__mdiff+0x38>
 8012f72:	4629      	mov	r1, r5
 8012f74:	4630      	mov	r0, r6
 8012f76:	f7ff fd57 	bl	8012a28 <_Balloc>
 8012f7a:	b930      	cbnz	r0, 8012f8a <__mdiff+0x2e>
 8012f7c:	4b39      	ldr	r3, [pc, #228]	; (8013064 <__mdiff+0x108>)
 8012f7e:	4602      	mov	r2, r0
 8012f80:	f240 2132 	movw	r1, #562	; 0x232
 8012f84:	4838      	ldr	r0, [pc, #224]	; (8013068 <__mdiff+0x10c>)
 8012f86:	f000 f8cd 	bl	8013124 <__assert_func>
 8012f8a:	2301      	movs	r3, #1
 8012f8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012f90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f94:	bfa4      	itt	ge
 8012f96:	463b      	movge	r3, r7
 8012f98:	4627      	movge	r7, r4
 8012f9a:	4630      	mov	r0, r6
 8012f9c:	6879      	ldr	r1, [r7, #4]
 8012f9e:	bfa6      	itte	ge
 8012fa0:	461c      	movge	r4, r3
 8012fa2:	2500      	movge	r5, #0
 8012fa4:	2501      	movlt	r5, #1
 8012fa6:	f7ff fd3f 	bl	8012a28 <_Balloc>
 8012faa:	b920      	cbnz	r0, 8012fb6 <__mdiff+0x5a>
 8012fac:	4b2d      	ldr	r3, [pc, #180]	; (8013064 <__mdiff+0x108>)
 8012fae:	4602      	mov	r2, r0
 8012fb0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012fb4:	e7e6      	b.n	8012f84 <__mdiff+0x28>
 8012fb6:	693e      	ldr	r6, [r7, #16]
 8012fb8:	60c5      	str	r5, [r0, #12]
 8012fba:	6925      	ldr	r5, [r4, #16]
 8012fbc:	f107 0114 	add.w	r1, r7, #20
 8012fc0:	f104 0914 	add.w	r9, r4, #20
 8012fc4:	f100 0e14 	add.w	lr, r0, #20
 8012fc8:	f107 0210 	add.w	r2, r7, #16
 8012fcc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012fd0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8012fd4:	46f2      	mov	sl, lr
 8012fd6:	2700      	movs	r7, #0
 8012fd8:	f859 3b04 	ldr.w	r3, [r9], #4
 8012fdc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012fe0:	fa1f f883 	uxth.w	r8, r3
 8012fe4:	fa17 f78b 	uxtah	r7, r7, fp
 8012fe8:	0c1b      	lsrs	r3, r3, #16
 8012fea:	eba7 0808 	sub.w	r8, r7, r8
 8012fee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012ff2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012ff6:	fa1f f888 	uxth.w	r8, r8
 8012ffa:	141f      	asrs	r7, r3, #16
 8012ffc:	454d      	cmp	r5, r9
 8012ffe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013002:	f84a 3b04 	str.w	r3, [sl], #4
 8013006:	d8e7      	bhi.n	8012fd8 <__mdiff+0x7c>
 8013008:	1b2b      	subs	r3, r5, r4
 801300a:	3b15      	subs	r3, #21
 801300c:	f023 0303 	bic.w	r3, r3, #3
 8013010:	3304      	adds	r3, #4
 8013012:	3415      	adds	r4, #21
 8013014:	42a5      	cmp	r5, r4
 8013016:	bf38      	it	cc
 8013018:	2304      	movcc	r3, #4
 801301a:	4419      	add	r1, r3
 801301c:	4473      	add	r3, lr
 801301e:	469e      	mov	lr, r3
 8013020:	460d      	mov	r5, r1
 8013022:	4565      	cmp	r5, ip
 8013024:	d30e      	bcc.n	8013044 <__mdiff+0xe8>
 8013026:	f10c 0203 	add.w	r2, ip, #3
 801302a:	1a52      	subs	r2, r2, r1
 801302c:	f022 0203 	bic.w	r2, r2, #3
 8013030:	3903      	subs	r1, #3
 8013032:	458c      	cmp	ip, r1
 8013034:	bf38      	it	cc
 8013036:	2200      	movcc	r2, #0
 8013038:	441a      	add	r2, r3
 801303a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801303e:	b17b      	cbz	r3, 8013060 <__mdiff+0x104>
 8013040:	6106      	str	r6, [r0, #16]
 8013042:	e7a5      	b.n	8012f90 <__mdiff+0x34>
 8013044:	f855 8b04 	ldr.w	r8, [r5], #4
 8013048:	fa17 f488 	uxtah	r4, r7, r8
 801304c:	1422      	asrs	r2, r4, #16
 801304e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8013052:	b2a4      	uxth	r4, r4
 8013054:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8013058:	f84e 4b04 	str.w	r4, [lr], #4
 801305c:	1417      	asrs	r7, r2, #16
 801305e:	e7e0      	b.n	8013022 <__mdiff+0xc6>
 8013060:	3e01      	subs	r6, #1
 8013062:	e7ea      	b.n	801303a <__mdiff+0xde>
 8013064:	08014697 	.word	0x08014697
 8013068:	080146a8 	.word	0x080146a8

0801306c <__d2b>:
 801306c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013070:	4689      	mov	r9, r1
 8013072:	2101      	movs	r1, #1
 8013074:	ec57 6b10 	vmov	r6, r7, d0
 8013078:	4690      	mov	r8, r2
 801307a:	f7ff fcd5 	bl	8012a28 <_Balloc>
 801307e:	4604      	mov	r4, r0
 8013080:	b930      	cbnz	r0, 8013090 <__d2b+0x24>
 8013082:	4602      	mov	r2, r0
 8013084:	4b25      	ldr	r3, [pc, #148]	; (801311c <__d2b+0xb0>)
 8013086:	4826      	ldr	r0, [pc, #152]	; (8013120 <__d2b+0xb4>)
 8013088:	f240 310a 	movw	r1, #778	; 0x30a
 801308c:	f000 f84a 	bl	8013124 <__assert_func>
 8013090:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013094:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013098:	bb35      	cbnz	r5, 80130e8 <__d2b+0x7c>
 801309a:	2e00      	cmp	r6, #0
 801309c:	9301      	str	r3, [sp, #4]
 801309e:	d028      	beq.n	80130f2 <__d2b+0x86>
 80130a0:	4668      	mov	r0, sp
 80130a2:	9600      	str	r6, [sp, #0]
 80130a4:	f7ff fd8c 	bl	8012bc0 <__lo0bits>
 80130a8:	9900      	ldr	r1, [sp, #0]
 80130aa:	b300      	cbz	r0, 80130ee <__d2b+0x82>
 80130ac:	9a01      	ldr	r2, [sp, #4]
 80130ae:	f1c0 0320 	rsb	r3, r0, #32
 80130b2:	fa02 f303 	lsl.w	r3, r2, r3
 80130b6:	430b      	orrs	r3, r1
 80130b8:	40c2      	lsrs	r2, r0
 80130ba:	6163      	str	r3, [r4, #20]
 80130bc:	9201      	str	r2, [sp, #4]
 80130be:	9b01      	ldr	r3, [sp, #4]
 80130c0:	61a3      	str	r3, [r4, #24]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	bf14      	ite	ne
 80130c6:	2202      	movne	r2, #2
 80130c8:	2201      	moveq	r2, #1
 80130ca:	6122      	str	r2, [r4, #16]
 80130cc:	b1d5      	cbz	r5, 8013104 <__d2b+0x98>
 80130ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80130d2:	4405      	add	r5, r0
 80130d4:	f8c9 5000 	str.w	r5, [r9]
 80130d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80130dc:	f8c8 0000 	str.w	r0, [r8]
 80130e0:	4620      	mov	r0, r4
 80130e2:	b003      	add	sp, #12
 80130e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80130ec:	e7d5      	b.n	801309a <__d2b+0x2e>
 80130ee:	6161      	str	r1, [r4, #20]
 80130f0:	e7e5      	b.n	80130be <__d2b+0x52>
 80130f2:	a801      	add	r0, sp, #4
 80130f4:	f7ff fd64 	bl	8012bc0 <__lo0bits>
 80130f8:	9b01      	ldr	r3, [sp, #4]
 80130fa:	6163      	str	r3, [r4, #20]
 80130fc:	2201      	movs	r2, #1
 80130fe:	6122      	str	r2, [r4, #16]
 8013100:	3020      	adds	r0, #32
 8013102:	e7e3      	b.n	80130cc <__d2b+0x60>
 8013104:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013108:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801310c:	f8c9 0000 	str.w	r0, [r9]
 8013110:	6918      	ldr	r0, [r3, #16]
 8013112:	f7ff fd35 	bl	8012b80 <__hi0bits>
 8013116:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801311a:	e7df      	b.n	80130dc <__d2b+0x70>
 801311c:	08014697 	.word	0x08014697
 8013120:	080146a8 	.word	0x080146a8

08013124 <__assert_func>:
 8013124:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013126:	4614      	mov	r4, r2
 8013128:	461a      	mov	r2, r3
 801312a:	4b09      	ldr	r3, [pc, #36]	; (8013150 <__assert_func+0x2c>)
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	4605      	mov	r5, r0
 8013130:	68d8      	ldr	r0, [r3, #12]
 8013132:	b14c      	cbz	r4, 8013148 <__assert_func+0x24>
 8013134:	4b07      	ldr	r3, [pc, #28]	; (8013154 <__assert_func+0x30>)
 8013136:	9100      	str	r1, [sp, #0]
 8013138:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801313c:	4906      	ldr	r1, [pc, #24]	; (8013158 <__assert_func+0x34>)
 801313e:	462b      	mov	r3, r5
 8013140:	f000 f80e 	bl	8013160 <fiprintf>
 8013144:	f000 fa5a 	bl	80135fc <abort>
 8013148:	4b04      	ldr	r3, [pc, #16]	; (801315c <__assert_func+0x38>)
 801314a:	461c      	mov	r4, r3
 801314c:	e7f3      	b.n	8013136 <__assert_func+0x12>
 801314e:	bf00      	nop
 8013150:	200003e8 	.word	0x200003e8
 8013154:	08014804 	.word	0x08014804
 8013158:	08014811 	.word	0x08014811
 801315c:	0801483f 	.word	0x0801483f

08013160 <fiprintf>:
 8013160:	b40e      	push	{r1, r2, r3}
 8013162:	b503      	push	{r0, r1, lr}
 8013164:	4601      	mov	r1, r0
 8013166:	ab03      	add	r3, sp, #12
 8013168:	4805      	ldr	r0, [pc, #20]	; (8013180 <fiprintf+0x20>)
 801316a:	f853 2b04 	ldr.w	r2, [r3], #4
 801316e:	6800      	ldr	r0, [r0, #0]
 8013170:	9301      	str	r3, [sp, #4]
 8013172:	f000 f845 	bl	8013200 <_vfiprintf_r>
 8013176:	b002      	add	sp, #8
 8013178:	f85d eb04 	ldr.w	lr, [sp], #4
 801317c:	b003      	add	sp, #12
 801317e:	4770      	bx	lr
 8013180:	200003e8 	.word	0x200003e8

08013184 <__retarget_lock_init_recursive>:
 8013184:	4770      	bx	lr

08013186 <__retarget_lock_acquire_recursive>:
 8013186:	4770      	bx	lr

08013188 <__retarget_lock_release_recursive>:
 8013188:	4770      	bx	lr

0801318a <__ascii_mbtowc>:
 801318a:	b082      	sub	sp, #8
 801318c:	b901      	cbnz	r1, 8013190 <__ascii_mbtowc+0x6>
 801318e:	a901      	add	r1, sp, #4
 8013190:	b142      	cbz	r2, 80131a4 <__ascii_mbtowc+0x1a>
 8013192:	b14b      	cbz	r3, 80131a8 <__ascii_mbtowc+0x1e>
 8013194:	7813      	ldrb	r3, [r2, #0]
 8013196:	600b      	str	r3, [r1, #0]
 8013198:	7812      	ldrb	r2, [r2, #0]
 801319a:	1e10      	subs	r0, r2, #0
 801319c:	bf18      	it	ne
 801319e:	2001      	movne	r0, #1
 80131a0:	b002      	add	sp, #8
 80131a2:	4770      	bx	lr
 80131a4:	4610      	mov	r0, r2
 80131a6:	e7fb      	b.n	80131a0 <__ascii_mbtowc+0x16>
 80131a8:	f06f 0001 	mvn.w	r0, #1
 80131ac:	e7f8      	b.n	80131a0 <__ascii_mbtowc+0x16>

080131ae <__sfputc_r>:
 80131ae:	6893      	ldr	r3, [r2, #8]
 80131b0:	3b01      	subs	r3, #1
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	b410      	push	{r4}
 80131b6:	6093      	str	r3, [r2, #8]
 80131b8:	da08      	bge.n	80131cc <__sfputc_r+0x1e>
 80131ba:	6994      	ldr	r4, [r2, #24]
 80131bc:	42a3      	cmp	r3, r4
 80131be:	db01      	blt.n	80131c4 <__sfputc_r+0x16>
 80131c0:	290a      	cmp	r1, #10
 80131c2:	d103      	bne.n	80131cc <__sfputc_r+0x1e>
 80131c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80131c8:	f000 b94a 	b.w	8013460 <__swbuf_r>
 80131cc:	6813      	ldr	r3, [r2, #0]
 80131ce:	1c58      	adds	r0, r3, #1
 80131d0:	6010      	str	r0, [r2, #0]
 80131d2:	7019      	strb	r1, [r3, #0]
 80131d4:	4608      	mov	r0, r1
 80131d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80131da:	4770      	bx	lr

080131dc <__sfputs_r>:
 80131dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131de:	4606      	mov	r6, r0
 80131e0:	460f      	mov	r7, r1
 80131e2:	4614      	mov	r4, r2
 80131e4:	18d5      	adds	r5, r2, r3
 80131e6:	42ac      	cmp	r4, r5
 80131e8:	d101      	bne.n	80131ee <__sfputs_r+0x12>
 80131ea:	2000      	movs	r0, #0
 80131ec:	e007      	b.n	80131fe <__sfputs_r+0x22>
 80131ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131f2:	463a      	mov	r2, r7
 80131f4:	4630      	mov	r0, r6
 80131f6:	f7ff ffda 	bl	80131ae <__sfputc_r>
 80131fa:	1c43      	adds	r3, r0, #1
 80131fc:	d1f3      	bne.n	80131e6 <__sfputs_r+0xa>
 80131fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013200 <_vfiprintf_r>:
 8013200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013204:	460d      	mov	r5, r1
 8013206:	b09d      	sub	sp, #116	; 0x74
 8013208:	4614      	mov	r4, r2
 801320a:	4698      	mov	r8, r3
 801320c:	4606      	mov	r6, r0
 801320e:	b118      	cbz	r0, 8013218 <_vfiprintf_r+0x18>
 8013210:	6983      	ldr	r3, [r0, #24]
 8013212:	b90b      	cbnz	r3, 8013218 <_vfiprintf_r+0x18>
 8013214:	f000 fb14 	bl	8013840 <__sinit>
 8013218:	4b89      	ldr	r3, [pc, #548]	; (8013440 <_vfiprintf_r+0x240>)
 801321a:	429d      	cmp	r5, r3
 801321c:	d11b      	bne.n	8013256 <_vfiprintf_r+0x56>
 801321e:	6875      	ldr	r5, [r6, #4]
 8013220:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013222:	07d9      	lsls	r1, r3, #31
 8013224:	d405      	bmi.n	8013232 <_vfiprintf_r+0x32>
 8013226:	89ab      	ldrh	r3, [r5, #12]
 8013228:	059a      	lsls	r2, r3, #22
 801322a:	d402      	bmi.n	8013232 <_vfiprintf_r+0x32>
 801322c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801322e:	f7ff ffaa 	bl	8013186 <__retarget_lock_acquire_recursive>
 8013232:	89ab      	ldrh	r3, [r5, #12]
 8013234:	071b      	lsls	r3, r3, #28
 8013236:	d501      	bpl.n	801323c <_vfiprintf_r+0x3c>
 8013238:	692b      	ldr	r3, [r5, #16]
 801323a:	b9eb      	cbnz	r3, 8013278 <_vfiprintf_r+0x78>
 801323c:	4629      	mov	r1, r5
 801323e:	4630      	mov	r0, r6
 8013240:	f000 f96e 	bl	8013520 <__swsetup_r>
 8013244:	b1c0      	cbz	r0, 8013278 <_vfiprintf_r+0x78>
 8013246:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013248:	07dc      	lsls	r4, r3, #31
 801324a:	d50e      	bpl.n	801326a <_vfiprintf_r+0x6a>
 801324c:	f04f 30ff 	mov.w	r0, #4294967295
 8013250:	b01d      	add	sp, #116	; 0x74
 8013252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013256:	4b7b      	ldr	r3, [pc, #492]	; (8013444 <_vfiprintf_r+0x244>)
 8013258:	429d      	cmp	r5, r3
 801325a:	d101      	bne.n	8013260 <_vfiprintf_r+0x60>
 801325c:	68b5      	ldr	r5, [r6, #8]
 801325e:	e7df      	b.n	8013220 <_vfiprintf_r+0x20>
 8013260:	4b79      	ldr	r3, [pc, #484]	; (8013448 <_vfiprintf_r+0x248>)
 8013262:	429d      	cmp	r5, r3
 8013264:	bf08      	it	eq
 8013266:	68f5      	ldreq	r5, [r6, #12]
 8013268:	e7da      	b.n	8013220 <_vfiprintf_r+0x20>
 801326a:	89ab      	ldrh	r3, [r5, #12]
 801326c:	0598      	lsls	r0, r3, #22
 801326e:	d4ed      	bmi.n	801324c <_vfiprintf_r+0x4c>
 8013270:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013272:	f7ff ff89 	bl	8013188 <__retarget_lock_release_recursive>
 8013276:	e7e9      	b.n	801324c <_vfiprintf_r+0x4c>
 8013278:	2300      	movs	r3, #0
 801327a:	9309      	str	r3, [sp, #36]	; 0x24
 801327c:	2320      	movs	r3, #32
 801327e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013282:	f8cd 800c 	str.w	r8, [sp, #12]
 8013286:	2330      	movs	r3, #48	; 0x30
 8013288:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801344c <_vfiprintf_r+0x24c>
 801328c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013290:	f04f 0901 	mov.w	r9, #1
 8013294:	4623      	mov	r3, r4
 8013296:	469a      	mov	sl, r3
 8013298:	f813 2b01 	ldrb.w	r2, [r3], #1
 801329c:	b10a      	cbz	r2, 80132a2 <_vfiprintf_r+0xa2>
 801329e:	2a25      	cmp	r2, #37	; 0x25
 80132a0:	d1f9      	bne.n	8013296 <_vfiprintf_r+0x96>
 80132a2:	ebba 0b04 	subs.w	fp, sl, r4
 80132a6:	d00b      	beq.n	80132c0 <_vfiprintf_r+0xc0>
 80132a8:	465b      	mov	r3, fp
 80132aa:	4622      	mov	r2, r4
 80132ac:	4629      	mov	r1, r5
 80132ae:	4630      	mov	r0, r6
 80132b0:	f7ff ff94 	bl	80131dc <__sfputs_r>
 80132b4:	3001      	adds	r0, #1
 80132b6:	f000 80aa 	beq.w	801340e <_vfiprintf_r+0x20e>
 80132ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80132bc:	445a      	add	r2, fp
 80132be:	9209      	str	r2, [sp, #36]	; 0x24
 80132c0:	f89a 3000 	ldrb.w	r3, [sl]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	f000 80a2 	beq.w	801340e <_vfiprintf_r+0x20e>
 80132ca:	2300      	movs	r3, #0
 80132cc:	f04f 32ff 	mov.w	r2, #4294967295
 80132d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80132d4:	f10a 0a01 	add.w	sl, sl, #1
 80132d8:	9304      	str	r3, [sp, #16]
 80132da:	9307      	str	r3, [sp, #28]
 80132dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80132e0:	931a      	str	r3, [sp, #104]	; 0x68
 80132e2:	4654      	mov	r4, sl
 80132e4:	2205      	movs	r2, #5
 80132e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132ea:	4858      	ldr	r0, [pc, #352]	; (801344c <_vfiprintf_r+0x24c>)
 80132ec:	f7ec ff78 	bl	80001e0 <memchr>
 80132f0:	9a04      	ldr	r2, [sp, #16]
 80132f2:	b9d8      	cbnz	r0, 801332c <_vfiprintf_r+0x12c>
 80132f4:	06d1      	lsls	r1, r2, #27
 80132f6:	bf44      	itt	mi
 80132f8:	2320      	movmi	r3, #32
 80132fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80132fe:	0713      	lsls	r3, r2, #28
 8013300:	bf44      	itt	mi
 8013302:	232b      	movmi	r3, #43	; 0x2b
 8013304:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013308:	f89a 3000 	ldrb.w	r3, [sl]
 801330c:	2b2a      	cmp	r3, #42	; 0x2a
 801330e:	d015      	beq.n	801333c <_vfiprintf_r+0x13c>
 8013310:	9a07      	ldr	r2, [sp, #28]
 8013312:	4654      	mov	r4, sl
 8013314:	2000      	movs	r0, #0
 8013316:	f04f 0c0a 	mov.w	ip, #10
 801331a:	4621      	mov	r1, r4
 801331c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013320:	3b30      	subs	r3, #48	; 0x30
 8013322:	2b09      	cmp	r3, #9
 8013324:	d94e      	bls.n	80133c4 <_vfiprintf_r+0x1c4>
 8013326:	b1b0      	cbz	r0, 8013356 <_vfiprintf_r+0x156>
 8013328:	9207      	str	r2, [sp, #28]
 801332a:	e014      	b.n	8013356 <_vfiprintf_r+0x156>
 801332c:	eba0 0308 	sub.w	r3, r0, r8
 8013330:	fa09 f303 	lsl.w	r3, r9, r3
 8013334:	4313      	orrs	r3, r2
 8013336:	9304      	str	r3, [sp, #16]
 8013338:	46a2      	mov	sl, r4
 801333a:	e7d2      	b.n	80132e2 <_vfiprintf_r+0xe2>
 801333c:	9b03      	ldr	r3, [sp, #12]
 801333e:	1d19      	adds	r1, r3, #4
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	9103      	str	r1, [sp, #12]
 8013344:	2b00      	cmp	r3, #0
 8013346:	bfbb      	ittet	lt
 8013348:	425b      	neglt	r3, r3
 801334a:	f042 0202 	orrlt.w	r2, r2, #2
 801334e:	9307      	strge	r3, [sp, #28]
 8013350:	9307      	strlt	r3, [sp, #28]
 8013352:	bfb8      	it	lt
 8013354:	9204      	strlt	r2, [sp, #16]
 8013356:	7823      	ldrb	r3, [r4, #0]
 8013358:	2b2e      	cmp	r3, #46	; 0x2e
 801335a:	d10c      	bne.n	8013376 <_vfiprintf_r+0x176>
 801335c:	7863      	ldrb	r3, [r4, #1]
 801335e:	2b2a      	cmp	r3, #42	; 0x2a
 8013360:	d135      	bne.n	80133ce <_vfiprintf_r+0x1ce>
 8013362:	9b03      	ldr	r3, [sp, #12]
 8013364:	1d1a      	adds	r2, r3, #4
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	9203      	str	r2, [sp, #12]
 801336a:	2b00      	cmp	r3, #0
 801336c:	bfb8      	it	lt
 801336e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013372:	3402      	adds	r4, #2
 8013374:	9305      	str	r3, [sp, #20]
 8013376:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801345c <_vfiprintf_r+0x25c>
 801337a:	7821      	ldrb	r1, [r4, #0]
 801337c:	2203      	movs	r2, #3
 801337e:	4650      	mov	r0, sl
 8013380:	f7ec ff2e 	bl	80001e0 <memchr>
 8013384:	b140      	cbz	r0, 8013398 <_vfiprintf_r+0x198>
 8013386:	2340      	movs	r3, #64	; 0x40
 8013388:	eba0 000a 	sub.w	r0, r0, sl
 801338c:	fa03 f000 	lsl.w	r0, r3, r0
 8013390:	9b04      	ldr	r3, [sp, #16]
 8013392:	4303      	orrs	r3, r0
 8013394:	3401      	adds	r4, #1
 8013396:	9304      	str	r3, [sp, #16]
 8013398:	f814 1b01 	ldrb.w	r1, [r4], #1
 801339c:	482c      	ldr	r0, [pc, #176]	; (8013450 <_vfiprintf_r+0x250>)
 801339e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80133a2:	2206      	movs	r2, #6
 80133a4:	f7ec ff1c 	bl	80001e0 <memchr>
 80133a8:	2800      	cmp	r0, #0
 80133aa:	d03f      	beq.n	801342c <_vfiprintf_r+0x22c>
 80133ac:	4b29      	ldr	r3, [pc, #164]	; (8013454 <_vfiprintf_r+0x254>)
 80133ae:	bb1b      	cbnz	r3, 80133f8 <_vfiprintf_r+0x1f8>
 80133b0:	9b03      	ldr	r3, [sp, #12]
 80133b2:	3307      	adds	r3, #7
 80133b4:	f023 0307 	bic.w	r3, r3, #7
 80133b8:	3308      	adds	r3, #8
 80133ba:	9303      	str	r3, [sp, #12]
 80133bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133be:	443b      	add	r3, r7
 80133c0:	9309      	str	r3, [sp, #36]	; 0x24
 80133c2:	e767      	b.n	8013294 <_vfiprintf_r+0x94>
 80133c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80133c8:	460c      	mov	r4, r1
 80133ca:	2001      	movs	r0, #1
 80133cc:	e7a5      	b.n	801331a <_vfiprintf_r+0x11a>
 80133ce:	2300      	movs	r3, #0
 80133d0:	3401      	adds	r4, #1
 80133d2:	9305      	str	r3, [sp, #20]
 80133d4:	4619      	mov	r1, r3
 80133d6:	f04f 0c0a 	mov.w	ip, #10
 80133da:	4620      	mov	r0, r4
 80133dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80133e0:	3a30      	subs	r2, #48	; 0x30
 80133e2:	2a09      	cmp	r2, #9
 80133e4:	d903      	bls.n	80133ee <_vfiprintf_r+0x1ee>
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d0c5      	beq.n	8013376 <_vfiprintf_r+0x176>
 80133ea:	9105      	str	r1, [sp, #20]
 80133ec:	e7c3      	b.n	8013376 <_vfiprintf_r+0x176>
 80133ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80133f2:	4604      	mov	r4, r0
 80133f4:	2301      	movs	r3, #1
 80133f6:	e7f0      	b.n	80133da <_vfiprintf_r+0x1da>
 80133f8:	ab03      	add	r3, sp, #12
 80133fa:	9300      	str	r3, [sp, #0]
 80133fc:	462a      	mov	r2, r5
 80133fe:	4b16      	ldr	r3, [pc, #88]	; (8013458 <_vfiprintf_r+0x258>)
 8013400:	a904      	add	r1, sp, #16
 8013402:	4630      	mov	r0, r6
 8013404:	f7fe f8ac 	bl	8011560 <_printf_float>
 8013408:	4607      	mov	r7, r0
 801340a:	1c78      	adds	r0, r7, #1
 801340c:	d1d6      	bne.n	80133bc <_vfiprintf_r+0x1bc>
 801340e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013410:	07d9      	lsls	r1, r3, #31
 8013412:	d405      	bmi.n	8013420 <_vfiprintf_r+0x220>
 8013414:	89ab      	ldrh	r3, [r5, #12]
 8013416:	059a      	lsls	r2, r3, #22
 8013418:	d402      	bmi.n	8013420 <_vfiprintf_r+0x220>
 801341a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801341c:	f7ff feb4 	bl	8013188 <__retarget_lock_release_recursive>
 8013420:	89ab      	ldrh	r3, [r5, #12]
 8013422:	065b      	lsls	r3, r3, #25
 8013424:	f53f af12 	bmi.w	801324c <_vfiprintf_r+0x4c>
 8013428:	9809      	ldr	r0, [sp, #36]	; 0x24
 801342a:	e711      	b.n	8013250 <_vfiprintf_r+0x50>
 801342c:	ab03      	add	r3, sp, #12
 801342e:	9300      	str	r3, [sp, #0]
 8013430:	462a      	mov	r2, r5
 8013432:	4b09      	ldr	r3, [pc, #36]	; (8013458 <_vfiprintf_r+0x258>)
 8013434:	a904      	add	r1, sp, #16
 8013436:	4630      	mov	r0, r6
 8013438:	f7fe fb36 	bl	8011aa8 <_printf_i>
 801343c:	e7e4      	b.n	8013408 <_vfiprintf_r+0x208>
 801343e:	bf00      	nop
 8013440:	0801497c 	.word	0x0801497c
 8013444:	0801499c 	.word	0x0801499c
 8013448:	0801495c 	.word	0x0801495c
 801344c:	0801484a 	.word	0x0801484a
 8013450:	08014854 	.word	0x08014854
 8013454:	08011561 	.word	0x08011561
 8013458:	080131dd 	.word	0x080131dd
 801345c:	08014850 	.word	0x08014850

08013460 <__swbuf_r>:
 8013460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013462:	460e      	mov	r6, r1
 8013464:	4614      	mov	r4, r2
 8013466:	4605      	mov	r5, r0
 8013468:	b118      	cbz	r0, 8013472 <__swbuf_r+0x12>
 801346a:	6983      	ldr	r3, [r0, #24]
 801346c:	b90b      	cbnz	r3, 8013472 <__swbuf_r+0x12>
 801346e:	f000 f9e7 	bl	8013840 <__sinit>
 8013472:	4b21      	ldr	r3, [pc, #132]	; (80134f8 <__swbuf_r+0x98>)
 8013474:	429c      	cmp	r4, r3
 8013476:	d12b      	bne.n	80134d0 <__swbuf_r+0x70>
 8013478:	686c      	ldr	r4, [r5, #4]
 801347a:	69a3      	ldr	r3, [r4, #24]
 801347c:	60a3      	str	r3, [r4, #8]
 801347e:	89a3      	ldrh	r3, [r4, #12]
 8013480:	071a      	lsls	r2, r3, #28
 8013482:	d52f      	bpl.n	80134e4 <__swbuf_r+0x84>
 8013484:	6923      	ldr	r3, [r4, #16]
 8013486:	b36b      	cbz	r3, 80134e4 <__swbuf_r+0x84>
 8013488:	6923      	ldr	r3, [r4, #16]
 801348a:	6820      	ldr	r0, [r4, #0]
 801348c:	1ac0      	subs	r0, r0, r3
 801348e:	6963      	ldr	r3, [r4, #20]
 8013490:	b2f6      	uxtb	r6, r6
 8013492:	4283      	cmp	r3, r0
 8013494:	4637      	mov	r7, r6
 8013496:	dc04      	bgt.n	80134a2 <__swbuf_r+0x42>
 8013498:	4621      	mov	r1, r4
 801349a:	4628      	mov	r0, r5
 801349c:	f000 f93c 	bl	8013718 <_fflush_r>
 80134a0:	bb30      	cbnz	r0, 80134f0 <__swbuf_r+0x90>
 80134a2:	68a3      	ldr	r3, [r4, #8]
 80134a4:	3b01      	subs	r3, #1
 80134a6:	60a3      	str	r3, [r4, #8]
 80134a8:	6823      	ldr	r3, [r4, #0]
 80134aa:	1c5a      	adds	r2, r3, #1
 80134ac:	6022      	str	r2, [r4, #0]
 80134ae:	701e      	strb	r6, [r3, #0]
 80134b0:	6963      	ldr	r3, [r4, #20]
 80134b2:	3001      	adds	r0, #1
 80134b4:	4283      	cmp	r3, r0
 80134b6:	d004      	beq.n	80134c2 <__swbuf_r+0x62>
 80134b8:	89a3      	ldrh	r3, [r4, #12]
 80134ba:	07db      	lsls	r3, r3, #31
 80134bc:	d506      	bpl.n	80134cc <__swbuf_r+0x6c>
 80134be:	2e0a      	cmp	r6, #10
 80134c0:	d104      	bne.n	80134cc <__swbuf_r+0x6c>
 80134c2:	4621      	mov	r1, r4
 80134c4:	4628      	mov	r0, r5
 80134c6:	f000 f927 	bl	8013718 <_fflush_r>
 80134ca:	b988      	cbnz	r0, 80134f0 <__swbuf_r+0x90>
 80134cc:	4638      	mov	r0, r7
 80134ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134d0:	4b0a      	ldr	r3, [pc, #40]	; (80134fc <__swbuf_r+0x9c>)
 80134d2:	429c      	cmp	r4, r3
 80134d4:	d101      	bne.n	80134da <__swbuf_r+0x7a>
 80134d6:	68ac      	ldr	r4, [r5, #8]
 80134d8:	e7cf      	b.n	801347a <__swbuf_r+0x1a>
 80134da:	4b09      	ldr	r3, [pc, #36]	; (8013500 <__swbuf_r+0xa0>)
 80134dc:	429c      	cmp	r4, r3
 80134de:	bf08      	it	eq
 80134e0:	68ec      	ldreq	r4, [r5, #12]
 80134e2:	e7ca      	b.n	801347a <__swbuf_r+0x1a>
 80134e4:	4621      	mov	r1, r4
 80134e6:	4628      	mov	r0, r5
 80134e8:	f000 f81a 	bl	8013520 <__swsetup_r>
 80134ec:	2800      	cmp	r0, #0
 80134ee:	d0cb      	beq.n	8013488 <__swbuf_r+0x28>
 80134f0:	f04f 37ff 	mov.w	r7, #4294967295
 80134f4:	e7ea      	b.n	80134cc <__swbuf_r+0x6c>
 80134f6:	bf00      	nop
 80134f8:	0801497c 	.word	0x0801497c
 80134fc:	0801499c 	.word	0x0801499c
 8013500:	0801495c 	.word	0x0801495c

08013504 <__ascii_wctomb>:
 8013504:	b149      	cbz	r1, 801351a <__ascii_wctomb+0x16>
 8013506:	2aff      	cmp	r2, #255	; 0xff
 8013508:	bf85      	ittet	hi
 801350a:	238a      	movhi	r3, #138	; 0x8a
 801350c:	6003      	strhi	r3, [r0, #0]
 801350e:	700a      	strbls	r2, [r1, #0]
 8013510:	f04f 30ff 	movhi.w	r0, #4294967295
 8013514:	bf98      	it	ls
 8013516:	2001      	movls	r0, #1
 8013518:	4770      	bx	lr
 801351a:	4608      	mov	r0, r1
 801351c:	4770      	bx	lr
	...

08013520 <__swsetup_r>:
 8013520:	4b32      	ldr	r3, [pc, #200]	; (80135ec <__swsetup_r+0xcc>)
 8013522:	b570      	push	{r4, r5, r6, lr}
 8013524:	681d      	ldr	r5, [r3, #0]
 8013526:	4606      	mov	r6, r0
 8013528:	460c      	mov	r4, r1
 801352a:	b125      	cbz	r5, 8013536 <__swsetup_r+0x16>
 801352c:	69ab      	ldr	r3, [r5, #24]
 801352e:	b913      	cbnz	r3, 8013536 <__swsetup_r+0x16>
 8013530:	4628      	mov	r0, r5
 8013532:	f000 f985 	bl	8013840 <__sinit>
 8013536:	4b2e      	ldr	r3, [pc, #184]	; (80135f0 <__swsetup_r+0xd0>)
 8013538:	429c      	cmp	r4, r3
 801353a:	d10f      	bne.n	801355c <__swsetup_r+0x3c>
 801353c:	686c      	ldr	r4, [r5, #4]
 801353e:	89a3      	ldrh	r3, [r4, #12]
 8013540:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013544:	0719      	lsls	r1, r3, #28
 8013546:	d42c      	bmi.n	80135a2 <__swsetup_r+0x82>
 8013548:	06dd      	lsls	r5, r3, #27
 801354a:	d411      	bmi.n	8013570 <__swsetup_r+0x50>
 801354c:	2309      	movs	r3, #9
 801354e:	6033      	str	r3, [r6, #0]
 8013550:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013554:	81a3      	strh	r3, [r4, #12]
 8013556:	f04f 30ff 	mov.w	r0, #4294967295
 801355a:	e03e      	b.n	80135da <__swsetup_r+0xba>
 801355c:	4b25      	ldr	r3, [pc, #148]	; (80135f4 <__swsetup_r+0xd4>)
 801355e:	429c      	cmp	r4, r3
 8013560:	d101      	bne.n	8013566 <__swsetup_r+0x46>
 8013562:	68ac      	ldr	r4, [r5, #8]
 8013564:	e7eb      	b.n	801353e <__swsetup_r+0x1e>
 8013566:	4b24      	ldr	r3, [pc, #144]	; (80135f8 <__swsetup_r+0xd8>)
 8013568:	429c      	cmp	r4, r3
 801356a:	bf08      	it	eq
 801356c:	68ec      	ldreq	r4, [r5, #12]
 801356e:	e7e6      	b.n	801353e <__swsetup_r+0x1e>
 8013570:	0758      	lsls	r0, r3, #29
 8013572:	d512      	bpl.n	801359a <__swsetup_r+0x7a>
 8013574:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013576:	b141      	cbz	r1, 801358a <__swsetup_r+0x6a>
 8013578:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801357c:	4299      	cmp	r1, r3
 801357e:	d002      	beq.n	8013586 <__swsetup_r+0x66>
 8013580:	4630      	mov	r0, r6
 8013582:	f7fd fea3 	bl	80112cc <_free_r>
 8013586:	2300      	movs	r3, #0
 8013588:	6363      	str	r3, [r4, #52]	; 0x34
 801358a:	89a3      	ldrh	r3, [r4, #12]
 801358c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013590:	81a3      	strh	r3, [r4, #12]
 8013592:	2300      	movs	r3, #0
 8013594:	6063      	str	r3, [r4, #4]
 8013596:	6923      	ldr	r3, [r4, #16]
 8013598:	6023      	str	r3, [r4, #0]
 801359a:	89a3      	ldrh	r3, [r4, #12]
 801359c:	f043 0308 	orr.w	r3, r3, #8
 80135a0:	81a3      	strh	r3, [r4, #12]
 80135a2:	6923      	ldr	r3, [r4, #16]
 80135a4:	b94b      	cbnz	r3, 80135ba <__swsetup_r+0x9a>
 80135a6:	89a3      	ldrh	r3, [r4, #12]
 80135a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80135ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80135b0:	d003      	beq.n	80135ba <__swsetup_r+0x9a>
 80135b2:	4621      	mov	r1, r4
 80135b4:	4630      	mov	r0, r6
 80135b6:	f000 fa05 	bl	80139c4 <__smakebuf_r>
 80135ba:	89a0      	ldrh	r0, [r4, #12]
 80135bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80135c0:	f010 0301 	ands.w	r3, r0, #1
 80135c4:	d00a      	beq.n	80135dc <__swsetup_r+0xbc>
 80135c6:	2300      	movs	r3, #0
 80135c8:	60a3      	str	r3, [r4, #8]
 80135ca:	6963      	ldr	r3, [r4, #20]
 80135cc:	425b      	negs	r3, r3
 80135ce:	61a3      	str	r3, [r4, #24]
 80135d0:	6923      	ldr	r3, [r4, #16]
 80135d2:	b943      	cbnz	r3, 80135e6 <__swsetup_r+0xc6>
 80135d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80135d8:	d1ba      	bne.n	8013550 <__swsetup_r+0x30>
 80135da:	bd70      	pop	{r4, r5, r6, pc}
 80135dc:	0781      	lsls	r1, r0, #30
 80135de:	bf58      	it	pl
 80135e0:	6963      	ldrpl	r3, [r4, #20]
 80135e2:	60a3      	str	r3, [r4, #8]
 80135e4:	e7f4      	b.n	80135d0 <__swsetup_r+0xb0>
 80135e6:	2000      	movs	r0, #0
 80135e8:	e7f7      	b.n	80135da <__swsetup_r+0xba>
 80135ea:	bf00      	nop
 80135ec:	200003e8 	.word	0x200003e8
 80135f0:	0801497c 	.word	0x0801497c
 80135f4:	0801499c 	.word	0x0801499c
 80135f8:	0801495c 	.word	0x0801495c

080135fc <abort>:
 80135fc:	b508      	push	{r3, lr}
 80135fe:	2006      	movs	r0, #6
 8013600:	f000 fa48 	bl	8013a94 <raise>
 8013604:	2001      	movs	r0, #1
 8013606:	f7ee ff31 	bl	800246c <_exit>
	...

0801360c <__sflush_r>:
 801360c:	898a      	ldrh	r2, [r1, #12]
 801360e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013612:	4605      	mov	r5, r0
 8013614:	0710      	lsls	r0, r2, #28
 8013616:	460c      	mov	r4, r1
 8013618:	d458      	bmi.n	80136cc <__sflush_r+0xc0>
 801361a:	684b      	ldr	r3, [r1, #4]
 801361c:	2b00      	cmp	r3, #0
 801361e:	dc05      	bgt.n	801362c <__sflush_r+0x20>
 8013620:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013622:	2b00      	cmp	r3, #0
 8013624:	dc02      	bgt.n	801362c <__sflush_r+0x20>
 8013626:	2000      	movs	r0, #0
 8013628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801362c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801362e:	2e00      	cmp	r6, #0
 8013630:	d0f9      	beq.n	8013626 <__sflush_r+0x1a>
 8013632:	2300      	movs	r3, #0
 8013634:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013638:	682f      	ldr	r7, [r5, #0]
 801363a:	602b      	str	r3, [r5, #0]
 801363c:	d032      	beq.n	80136a4 <__sflush_r+0x98>
 801363e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013640:	89a3      	ldrh	r3, [r4, #12]
 8013642:	075a      	lsls	r2, r3, #29
 8013644:	d505      	bpl.n	8013652 <__sflush_r+0x46>
 8013646:	6863      	ldr	r3, [r4, #4]
 8013648:	1ac0      	subs	r0, r0, r3
 801364a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801364c:	b10b      	cbz	r3, 8013652 <__sflush_r+0x46>
 801364e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013650:	1ac0      	subs	r0, r0, r3
 8013652:	2300      	movs	r3, #0
 8013654:	4602      	mov	r2, r0
 8013656:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013658:	6a21      	ldr	r1, [r4, #32]
 801365a:	4628      	mov	r0, r5
 801365c:	47b0      	blx	r6
 801365e:	1c43      	adds	r3, r0, #1
 8013660:	89a3      	ldrh	r3, [r4, #12]
 8013662:	d106      	bne.n	8013672 <__sflush_r+0x66>
 8013664:	6829      	ldr	r1, [r5, #0]
 8013666:	291d      	cmp	r1, #29
 8013668:	d82c      	bhi.n	80136c4 <__sflush_r+0xb8>
 801366a:	4a2a      	ldr	r2, [pc, #168]	; (8013714 <__sflush_r+0x108>)
 801366c:	40ca      	lsrs	r2, r1
 801366e:	07d6      	lsls	r6, r2, #31
 8013670:	d528      	bpl.n	80136c4 <__sflush_r+0xb8>
 8013672:	2200      	movs	r2, #0
 8013674:	6062      	str	r2, [r4, #4]
 8013676:	04d9      	lsls	r1, r3, #19
 8013678:	6922      	ldr	r2, [r4, #16]
 801367a:	6022      	str	r2, [r4, #0]
 801367c:	d504      	bpl.n	8013688 <__sflush_r+0x7c>
 801367e:	1c42      	adds	r2, r0, #1
 8013680:	d101      	bne.n	8013686 <__sflush_r+0x7a>
 8013682:	682b      	ldr	r3, [r5, #0]
 8013684:	b903      	cbnz	r3, 8013688 <__sflush_r+0x7c>
 8013686:	6560      	str	r0, [r4, #84]	; 0x54
 8013688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801368a:	602f      	str	r7, [r5, #0]
 801368c:	2900      	cmp	r1, #0
 801368e:	d0ca      	beq.n	8013626 <__sflush_r+0x1a>
 8013690:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013694:	4299      	cmp	r1, r3
 8013696:	d002      	beq.n	801369e <__sflush_r+0x92>
 8013698:	4628      	mov	r0, r5
 801369a:	f7fd fe17 	bl	80112cc <_free_r>
 801369e:	2000      	movs	r0, #0
 80136a0:	6360      	str	r0, [r4, #52]	; 0x34
 80136a2:	e7c1      	b.n	8013628 <__sflush_r+0x1c>
 80136a4:	6a21      	ldr	r1, [r4, #32]
 80136a6:	2301      	movs	r3, #1
 80136a8:	4628      	mov	r0, r5
 80136aa:	47b0      	blx	r6
 80136ac:	1c41      	adds	r1, r0, #1
 80136ae:	d1c7      	bne.n	8013640 <__sflush_r+0x34>
 80136b0:	682b      	ldr	r3, [r5, #0]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d0c4      	beq.n	8013640 <__sflush_r+0x34>
 80136b6:	2b1d      	cmp	r3, #29
 80136b8:	d001      	beq.n	80136be <__sflush_r+0xb2>
 80136ba:	2b16      	cmp	r3, #22
 80136bc:	d101      	bne.n	80136c2 <__sflush_r+0xb6>
 80136be:	602f      	str	r7, [r5, #0]
 80136c0:	e7b1      	b.n	8013626 <__sflush_r+0x1a>
 80136c2:	89a3      	ldrh	r3, [r4, #12]
 80136c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80136c8:	81a3      	strh	r3, [r4, #12]
 80136ca:	e7ad      	b.n	8013628 <__sflush_r+0x1c>
 80136cc:	690f      	ldr	r7, [r1, #16]
 80136ce:	2f00      	cmp	r7, #0
 80136d0:	d0a9      	beq.n	8013626 <__sflush_r+0x1a>
 80136d2:	0793      	lsls	r3, r2, #30
 80136d4:	680e      	ldr	r6, [r1, #0]
 80136d6:	bf08      	it	eq
 80136d8:	694b      	ldreq	r3, [r1, #20]
 80136da:	600f      	str	r7, [r1, #0]
 80136dc:	bf18      	it	ne
 80136de:	2300      	movne	r3, #0
 80136e0:	eba6 0807 	sub.w	r8, r6, r7
 80136e4:	608b      	str	r3, [r1, #8]
 80136e6:	f1b8 0f00 	cmp.w	r8, #0
 80136ea:	dd9c      	ble.n	8013626 <__sflush_r+0x1a>
 80136ec:	6a21      	ldr	r1, [r4, #32]
 80136ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80136f0:	4643      	mov	r3, r8
 80136f2:	463a      	mov	r2, r7
 80136f4:	4628      	mov	r0, r5
 80136f6:	47b0      	blx	r6
 80136f8:	2800      	cmp	r0, #0
 80136fa:	dc06      	bgt.n	801370a <__sflush_r+0xfe>
 80136fc:	89a3      	ldrh	r3, [r4, #12]
 80136fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013702:	81a3      	strh	r3, [r4, #12]
 8013704:	f04f 30ff 	mov.w	r0, #4294967295
 8013708:	e78e      	b.n	8013628 <__sflush_r+0x1c>
 801370a:	4407      	add	r7, r0
 801370c:	eba8 0800 	sub.w	r8, r8, r0
 8013710:	e7e9      	b.n	80136e6 <__sflush_r+0xda>
 8013712:	bf00      	nop
 8013714:	20400001 	.word	0x20400001

08013718 <_fflush_r>:
 8013718:	b538      	push	{r3, r4, r5, lr}
 801371a:	690b      	ldr	r3, [r1, #16]
 801371c:	4605      	mov	r5, r0
 801371e:	460c      	mov	r4, r1
 8013720:	b913      	cbnz	r3, 8013728 <_fflush_r+0x10>
 8013722:	2500      	movs	r5, #0
 8013724:	4628      	mov	r0, r5
 8013726:	bd38      	pop	{r3, r4, r5, pc}
 8013728:	b118      	cbz	r0, 8013732 <_fflush_r+0x1a>
 801372a:	6983      	ldr	r3, [r0, #24]
 801372c:	b90b      	cbnz	r3, 8013732 <_fflush_r+0x1a>
 801372e:	f000 f887 	bl	8013840 <__sinit>
 8013732:	4b14      	ldr	r3, [pc, #80]	; (8013784 <_fflush_r+0x6c>)
 8013734:	429c      	cmp	r4, r3
 8013736:	d11b      	bne.n	8013770 <_fflush_r+0x58>
 8013738:	686c      	ldr	r4, [r5, #4]
 801373a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d0ef      	beq.n	8013722 <_fflush_r+0xa>
 8013742:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013744:	07d0      	lsls	r0, r2, #31
 8013746:	d404      	bmi.n	8013752 <_fflush_r+0x3a>
 8013748:	0599      	lsls	r1, r3, #22
 801374a:	d402      	bmi.n	8013752 <_fflush_r+0x3a>
 801374c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801374e:	f7ff fd1a 	bl	8013186 <__retarget_lock_acquire_recursive>
 8013752:	4628      	mov	r0, r5
 8013754:	4621      	mov	r1, r4
 8013756:	f7ff ff59 	bl	801360c <__sflush_r>
 801375a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801375c:	07da      	lsls	r2, r3, #31
 801375e:	4605      	mov	r5, r0
 8013760:	d4e0      	bmi.n	8013724 <_fflush_r+0xc>
 8013762:	89a3      	ldrh	r3, [r4, #12]
 8013764:	059b      	lsls	r3, r3, #22
 8013766:	d4dd      	bmi.n	8013724 <_fflush_r+0xc>
 8013768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801376a:	f7ff fd0d 	bl	8013188 <__retarget_lock_release_recursive>
 801376e:	e7d9      	b.n	8013724 <_fflush_r+0xc>
 8013770:	4b05      	ldr	r3, [pc, #20]	; (8013788 <_fflush_r+0x70>)
 8013772:	429c      	cmp	r4, r3
 8013774:	d101      	bne.n	801377a <_fflush_r+0x62>
 8013776:	68ac      	ldr	r4, [r5, #8]
 8013778:	e7df      	b.n	801373a <_fflush_r+0x22>
 801377a:	4b04      	ldr	r3, [pc, #16]	; (801378c <_fflush_r+0x74>)
 801377c:	429c      	cmp	r4, r3
 801377e:	bf08      	it	eq
 8013780:	68ec      	ldreq	r4, [r5, #12]
 8013782:	e7da      	b.n	801373a <_fflush_r+0x22>
 8013784:	0801497c 	.word	0x0801497c
 8013788:	0801499c 	.word	0x0801499c
 801378c:	0801495c 	.word	0x0801495c

08013790 <std>:
 8013790:	2300      	movs	r3, #0
 8013792:	b510      	push	{r4, lr}
 8013794:	4604      	mov	r4, r0
 8013796:	e9c0 3300 	strd	r3, r3, [r0]
 801379a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801379e:	6083      	str	r3, [r0, #8]
 80137a0:	8181      	strh	r1, [r0, #12]
 80137a2:	6643      	str	r3, [r0, #100]	; 0x64
 80137a4:	81c2      	strh	r2, [r0, #14]
 80137a6:	6183      	str	r3, [r0, #24]
 80137a8:	4619      	mov	r1, r3
 80137aa:	2208      	movs	r2, #8
 80137ac:	305c      	adds	r0, #92	; 0x5c
 80137ae:	f7fd fd75 	bl	801129c <memset>
 80137b2:	4b05      	ldr	r3, [pc, #20]	; (80137c8 <std+0x38>)
 80137b4:	6263      	str	r3, [r4, #36]	; 0x24
 80137b6:	4b05      	ldr	r3, [pc, #20]	; (80137cc <std+0x3c>)
 80137b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80137ba:	4b05      	ldr	r3, [pc, #20]	; (80137d0 <std+0x40>)
 80137bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80137be:	4b05      	ldr	r3, [pc, #20]	; (80137d4 <std+0x44>)
 80137c0:	6224      	str	r4, [r4, #32]
 80137c2:	6323      	str	r3, [r4, #48]	; 0x30
 80137c4:	bd10      	pop	{r4, pc}
 80137c6:	bf00      	nop
 80137c8:	08013acd 	.word	0x08013acd
 80137cc:	08013aef 	.word	0x08013aef
 80137d0:	08013b27 	.word	0x08013b27
 80137d4:	08013b4b 	.word	0x08013b4b

080137d8 <_cleanup_r>:
 80137d8:	4901      	ldr	r1, [pc, #4]	; (80137e0 <_cleanup_r+0x8>)
 80137da:	f000 b8af 	b.w	801393c <_fwalk_reent>
 80137de:	bf00      	nop
 80137e0:	08013719 	.word	0x08013719

080137e4 <__sfmoreglue>:
 80137e4:	b570      	push	{r4, r5, r6, lr}
 80137e6:	1e4a      	subs	r2, r1, #1
 80137e8:	2568      	movs	r5, #104	; 0x68
 80137ea:	4355      	muls	r5, r2
 80137ec:	460e      	mov	r6, r1
 80137ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80137f2:	f7fd fdbb 	bl	801136c <_malloc_r>
 80137f6:	4604      	mov	r4, r0
 80137f8:	b140      	cbz	r0, 801380c <__sfmoreglue+0x28>
 80137fa:	2100      	movs	r1, #0
 80137fc:	e9c0 1600 	strd	r1, r6, [r0]
 8013800:	300c      	adds	r0, #12
 8013802:	60a0      	str	r0, [r4, #8]
 8013804:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013808:	f7fd fd48 	bl	801129c <memset>
 801380c:	4620      	mov	r0, r4
 801380e:	bd70      	pop	{r4, r5, r6, pc}

08013810 <__sfp_lock_acquire>:
 8013810:	4801      	ldr	r0, [pc, #4]	; (8013818 <__sfp_lock_acquire+0x8>)
 8013812:	f7ff bcb8 	b.w	8013186 <__retarget_lock_acquire_recursive>
 8013816:	bf00      	nop
 8013818:	20008c74 	.word	0x20008c74

0801381c <__sfp_lock_release>:
 801381c:	4801      	ldr	r0, [pc, #4]	; (8013824 <__sfp_lock_release+0x8>)
 801381e:	f7ff bcb3 	b.w	8013188 <__retarget_lock_release_recursive>
 8013822:	bf00      	nop
 8013824:	20008c74 	.word	0x20008c74

08013828 <__sinit_lock_acquire>:
 8013828:	4801      	ldr	r0, [pc, #4]	; (8013830 <__sinit_lock_acquire+0x8>)
 801382a:	f7ff bcac 	b.w	8013186 <__retarget_lock_acquire_recursive>
 801382e:	bf00      	nop
 8013830:	20008c6f 	.word	0x20008c6f

08013834 <__sinit_lock_release>:
 8013834:	4801      	ldr	r0, [pc, #4]	; (801383c <__sinit_lock_release+0x8>)
 8013836:	f7ff bca7 	b.w	8013188 <__retarget_lock_release_recursive>
 801383a:	bf00      	nop
 801383c:	20008c6f 	.word	0x20008c6f

08013840 <__sinit>:
 8013840:	b510      	push	{r4, lr}
 8013842:	4604      	mov	r4, r0
 8013844:	f7ff fff0 	bl	8013828 <__sinit_lock_acquire>
 8013848:	69a3      	ldr	r3, [r4, #24]
 801384a:	b11b      	cbz	r3, 8013854 <__sinit+0x14>
 801384c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013850:	f7ff bff0 	b.w	8013834 <__sinit_lock_release>
 8013854:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013858:	6523      	str	r3, [r4, #80]	; 0x50
 801385a:	4b13      	ldr	r3, [pc, #76]	; (80138a8 <__sinit+0x68>)
 801385c:	4a13      	ldr	r2, [pc, #76]	; (80138ac <__sinit+0x6c>)
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	62a2      	str	r2, [r4, #40]	; 0x28
 8013862:	42a3      	cmp	r3, r4
 8013864:	bf04      	itt	eq
 8013866:	2301      	moveq	r3, #1
 8013868:	61a3      	streq	r3, [r4, #24]
 801386a:	4620      	mov	r0, r4
 801386c:	f000 f820 	bl	80138b0 <__sfp>
 8013870:	6060      	str	r0, [r4, #4]
 8013872:	4620      	mov	r0, r4
 8013874:	f000 f81c 	bl	80138b0 <__sfp>
 8013878:	60a0      	str	r0, [r4, #8]
 801387a:	4620      	mov	r0, r4
 801387c:	f000 f818 	bl	80138b0 <__sfp>
 8013880:	2200      	movs	r2, #0
 8013882:	60e0      	str	r0, [r4, #12]
 8013884:	2104      	movs	r1, #4
 8013886:	6860      	ldr	r0, [r4, #4]
 8013888:	f7ff ff82 	bl	8013790 <std>
 801388c:	68a0      	ldr	r0, [r4, #8]
 801388e:	2201      	movs	r2, #1
 8013890:	2109      	movs	r1, #9
 8013892:	f7ff ff7d 	bl	8013790 <std>
 8013896:	68e0      	ldr	r0, [r4, #12]
 8013898:	2202      	movs	r2, #2
 801389a:	2112      	movs	r1, #18
 801389c:	f7ff ff78 	bl	8013790 <std>
 80138a0:	2301      	movs	r3, #1
 80138a2:	61a3      	str	r3, [r4, #24]
 80138a4:	e7d2      	b.n	801384c <__sinit+0xc>
 80138a6:	bf00      	nop
 80138a8:	080145dc 	.word	0x080145dc
 80138ac:	080137d9 	.word	0x080137d9

080138b0 <__sfp>:
 80138b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138b2:	4607      	mov	r7, r0
 80138b4:	f7ff ffac 	bl	8013810 <__sfp_lock_acquire>
 80138b8:	4b1e      	ldr	r3, [pc, #120]	; (8013934 <__sfp+0x84>)
 80138ba:	681e      	ldr	r6, [r3, #0]
 80138bc:	69b3      	ldr	r3, [r6, #24]
 80138be:	b913      	cbnz	r3, 80138c6 <__sfp+0x16>
 80138c0:	4630      	mov	r0, r6
 80138c2:	f7ff ffbd 	bl	8013840 <__sinit>
 80138c6:	3648      	adds	r6, #72	; 0x48
 80138c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80138cc:	3b01      	subs	r3, #1
 80138ce:	d503      	bpl.n	80138d8 <__sfp+0x28>
 80138d0:	6833      	ldr	r3, [r6, #0]
 80138d2:	b30b      	cbz	r3, 8013918 <__sfp+0x68>
 80138d4:	6836      	ldr	r6, [r6, #0]
 80138d6:	e7f7      	b.n	80138c8 <__sfp+0x18>
 80138d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80138dc:	b9d5      	cbnz	r5, 8013914 <__sfp+0x64>
 80138de:	4b16      	ldr	r3, [pc, #88]	; (8013938 <__sfp+0x88>)
 80138e0:	60e3      	str	r3, [r4, #12]
 80138e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80138e6:	6665      	str	r5, [r4, #100]	; 0x64
 80138e8:	f7ff fc4c 	bl	8013184 <__retarget_lock_init_recursive>
 80138ec:	f7ff ff96 	bl	801381c <__sfp_lock_release>
 80138f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80138f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80138f8:	6025      	str	r5, [r4, #0]
 80138fa:	61a5      	str	r5, [r4, #24]
 80138fc:	2208      	movs	r2, #8
 80138fe:	4629      	mov	r1, r5
 8013900:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013904:	f7fd fcca 	bl	801129c <memset>
 8013908:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801390c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013910:	4620      	mov	r0, r4
 8013912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013914:	3468      	adds	r4, #104	; 0x68
 8013916:	e7d9      	b.n	80138cc <__sfp+0x1c>
 8013918:	2104      	movs	r1, #4
 801391a:	4638      	mov	r0, r7
 801391c:	f7ff ff62 	bl	80137e4 <__sfmoreglue>
 8013920:	4604      	mov	r4, r0
 8013922:	6030      	str	r0, [r6, #0]
 8013924:	2800      	cmp	r0, #0
 8013926:	d1d5      	bne.n	80138d4 <__sfp+0x24>
 8013928:	f7ff ff78 	bl	801381c <__sfp_lock_release>
 801392c:	230c      	movs	r3, #12
 801392e:	603b      	str	r3, [r7, #0]
 8013930:	e7ee      	b.n	8013910 <__sfp+0x60>
 8013932:	bf00      	nop
 8013934:	080145dc 	.word	0x080145dc
 8013938:	ffff0001 	.word	0xffff0001

0801393c <_fwalk_reent>:
 801393c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013940:	4606      	mov	r6, r0
 8013942:	4688      	mov	r8, r1
 8013944:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013948:	2700      	movs	r7, #0
 801394a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801394e:	f1b9 0901 	subs.w	r9, r9, #1
 8013952:	d505      	bpl.n	8013960 <_fwalk_reent+0x24>
 8013954:	6824      	ldr	r4, [r4, #0]
 8013956:	2c00      	cmp	r4, #0
 8013958:	d1f7      	bne.n	801394a <_fwalk_reent+0xe>
 801395a:	4638      	mov	r0, r7
 801395c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013960:	89ab      	ldrh	r3, [r5, #12]
 8013962:	2b01      	cmp	r3, #1
 8013964:	d907      	bls.n	8013976 <_fwalk_reent+0x3a>
 8013966:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801396a:	3301      	adds	r3, #1
 801396c:	d003      	beq.n	8013976 <_fwalk_reent+0x3a>
 801396e:	4629      	mov	r1, r5
 8013970:	4630      	mov	r0, r6
 8013972:	47c0      	blx	r8
 8013974:	4307      	orrs	r7, r0
 8013976:	3568      	adds	r5, #104	; 0x68
 8013978:	e7e9      	b.n	801394e <_fwalk_reent+0x12>

0801397a <__swhatbuf_r>:
 801397a:	b570      	push	{r4, r5, r6, lr}
 801397c:	460e      	mov	r6, r1
 801397e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013982:	2900      	cmp	r1, #0
 8013984:	b096      	sub	sp, #88	; 0x58
 8013986:	4614      	mov	r4, r2
 8013988:	461d      	mov	r5, r3
 801398a:	da07      	bge.n	801399c <__swhatbuf_r+0x22>
 801398c:	2300      	movs	r3, #0
 801398e:	602b      	str	r3, [r5, #0]
 8013990:	89b3      	ldrh	r3, [r6, #12]
 8013992:	061a      	lsls	r2, r3, #24
 8013994:	d410      	bmi.n	80139b8 <__swhatbuf_r+0x3e>
 8013996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801399a:	e00e      	b.n	80139ba <__swhatbuf_r+0x40>
 801399c:	466a      	mov	r2, sp
 801399e:	f000 f8fb 	bl	8013b98 <_fstat_r>
 80139a2:	2800      	cmp	r0, #0
 80139a4:	dbf2      	blt.n	801398c <__swhatbuf_r+0x12>
 80139a6:	9a01      	ldr	r2, [sp, #4]
 80139a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80139ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80139b0:	425a      	negs	r2, r3
 80139b2:	415a      	adcs	r2, r3
 80139b4:	602a      	str	r2, [r5, #0]
 80139b6:	e7ee      	b.n	8013996 <__swhatbuf_r+0x1c>
 80139b8:	2340      	movs	r3, #64	; 0x40
 80139ba:	2000      	movs	r0, #0
 80139bc:	6023      	str	r3, [r4, #0]
 80139be:	b016      	add	sp, #88	; 0x58
 80139c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080139c4 <__smakebuf_r>:
 80139c4:	898b      	ldrh	r3, [r1, #12]
 80139c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80139c8:	079d      	lsls	r5, r3, #30
 80139ca:	4606      	mov	r6, r0
 80139cc:	460c      	mov	r4, r1
 80139ce:	d507      	bpl.n	80139e0 <__smakebuf_r+0x1c>
 80139d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80139d4:	6023      	str	r3, [r4, #0]
 80139d6:	6123      	str	r3, [r4, #16]
 80139d8:	2301      	movs	r3, #1
 80139da:	6163      	str	r3, [r4, #20]
 80139dc:	b002      	add	sp, #8
 80139de:	bd70      	pop	{r4, r5, r6, pc}
 80139e0:	ab01      	add	r3, sp, #4
 80139e2:	466a      	mov	r2, sp
 80139e4:	f7ff ffc9 	bl	801397a <__swhatbuf_r>
 80139e8:	9900      	ldr	r1, [sp, #0]
 80139ea:	4605      	mov	r5, r0
 80139ec:	4630      	mov	r0, r6
 80139ee:	f7fd fcbd 	bl	801136c <_malloc_r>
 80139f2:	b948      	cbnz	r0, 8013a08 <__smakebuf_r+0x44>
 80139f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80139f8:	059a      	lsls	r2, r3, #22
 80139fa:	d4ef      	bmi.n	80139dc <__smakebuf_r+0x18>
 80139fc:	f023 0303 	bic.w	r3, r3, #3
 8013a00:	f043 0302 	orr.w	r3, r3, #2
 8013a04:	81a3      	strh	r3, [r4, #12]
 8013a06:	e7e3      	b.n	80139d0 <__smakebuf_r+0xc>
 8013a08:	4b0d      	ldr	r3, [pc, #52]	; (8013a40 <__smakebuf_r+0x7c>)
 8013a0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8013a0c:	89a3      	ldrh	r3, [r4, #12]
 8013a0e:	6020      	str	r0, [r4, #0]
 8013a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a14:	81a3      	strh	r3, [r4, #12]
 8013a16:	9b00      	ldr	r3, [sp, #0]
 8013a18:	6163      	str	r3, [r4, #20]
 8013a1a:	9b01      	ldr	r3, [sp, #4]
 8013a1c:	6120      	str	r0, [r4, #16]
 8013a1e:	b15b      	cbz	r3, 8013a38 <__smakebuf_r+0x74>
 8013a20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a24:	4630      	mov	r0, r6
 8013a26:	f000 f8c9 	bl	8013bbc <_isatty_r>
 8013a2a:	b128      	cbz	r0, 8013a38 <__smakebuf_r+0x74>
 8013a2c:	89a3      	ldrh	r3, [r4, #12]
 8013a2e:	f023 0303 	bic.w	r3, r3, #3
 8013a32:	f043 0301 	orr.w	r3, r3, #1
 8013a36:	81a3      	strh	r3, [r4, #12]
 8013a38:	89a0      	ldrh	r0, [r4, #12]
 8013a3a:	4305      	orrs	r5, r0
 8013a3c:	81a5      	strh	r5, [r4, #12]
 8013a3e:	e7cd      	b.n	80139dc <__smakebuf_r+0x18>
 8013a40:	080137d9 	.word	0x080137d9

08013a44 <_raise_r>:
 8013a44:	291f      	cmp	r1, #31
 8013a46:	b538      	push	{r3, r4, r5, lr}
 8013a48:	4604      	mov	r4, r0
 8013a4a:	460d      	mov	r5, r1
 8013a4c:	d904      	bls.n	8013a58 <_raise_r+0x14>
 8013a4e:	2316      	movs	r3, #22
 8013a50:	6003      	str	r3, [r0, #0]
 8013a52:	f04f 30ff 	mov.w	r0, #4294967295
 8013a56:	bd38      	pop	{r3, r4, r5, pc}
 8013a58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013a5a:	b112      	cbz	r2, 8013a62 <_raise_r+0x1e>
 8013a5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013a60:	b94b      	cbnz	r3, 8013a76 <_raise_r+0x32>
 8013a62:	4620      	mov	r0, r4
 8013a64:	f000 f830 	bl	8013ac8 <_getpid_r>
 8013a68:	462a      	mov	r2, r5
 8013a6a:	4601      	mov	r1, r0
 8013a6c:	4620      	mov	r0, r4
 8013a6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a72:	f000 b817 	b.w	8013aa4 <_kill_r>
 8013a76:	2b01      	cmp	r3, #1
 8013a78:	d00a      	beq.n	8013a90 <_raise_r+0x4c>
 8013a7a:	1c59      	adds	r1, r3, #1
 8013a7c:	d103      	bne.n	8013a86 <_raise_r+0x42>
 8013a7e:	2316      	movs	r3, #22
 8013a80:	6003      	str	r3, [r0, #0]
 8013a82:	2001      	movs	r0, #1
 8013a84:	e7e7      	b.n	8013a56 <_raise_r+0x12>
 8013a86:	2400      	movs	r4, #0
 8013a88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013a8c:	4628      	mov	r0, r5
 8013a8e:	4798      	blx	r3
 8013a90:	2000      	movs	r0, #0
 8013a92:	e7e0      	b.n	8013a56 <_raise_r+0x12>

08013a94 <raise>:
 8013a94:	4b02      	ldr	r3, [pc, #8]	; (8013aa0 <raise+0xc>)
 8013a96:	4601      	mov	r1, r0
 8013a98:	6818      	ldr	r0, [r3, #0]
 8013a9a:	f7ff bfd3 	b.w	8013a44 <_raise_r>
 8013a9e:	bf00      	nop
 8013aa0:	200003e8 	.word	0x200003e8

08013aa4 <_kill_r>:
 8013aa4:	b538      	push	{r3, r4, r5, lr}
 8013aa6:	4d07      	ldr	r5, [pc, #28]	; (8013ac4 <_kill_r+0x20>)
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	4604      	mov	r4, r0
 8013aac:	4608      	mov	r0, r1
 8013aae:	4611      	mov	r1, r2
 8013ab0:	602b      	str	r3, [r5, #0]
 8013ab2:	f7ee fccb 	bl	800244c <_kill>
 8013ab6:	1c43      	adds	r3, r0, #1
 8013ab8:	d102      	bne.n	8013ac0 <_kill_r+0x1c>
 8013aba:	682b      	ldr	r3, [r5, #0]
 8013abc:	b103      	cbz	r3, 8013ac0 <_kill_r+0x1c>
 8013abe:	6023      	str	r3, [r4, #0]
 8013ac0:	bd38      	pop	{r3, r4, r5, pc}
 8013ac2:	bf00      	nop
 8013ac4:	20008c68 	.word	0x20008c68

08013ac8 <_getpid_r>:
 8013ac8:	f7ee bcb8 	b.w	800243c <_getpid>

08013acc <__sread>:
 8013acc:	b510      	push	{r4, lr}
 8013ace:	460c      	mov	r4, r1
 8013ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ad4:	f000 f894 	bl	8013c00 <_read_r>
 8013ad8:	2800      	cmp	r0, #0
 8013ada:	bfab      	itete	ge
 8013adc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013ade:	89a3      	ldrhlt	r3, [r4, #12]
 8013ae0:	181b      	addge	r3, r3, r0
 8013ae2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013ae6:	bfac      	ite	ge
 8013ae8:	6563      	strge	r3, [r4, #84]	; 0x54
 8013aea:	81a3      	strhlt	r3, [r4, #12]
 8013aec:	bd10      	pop	{r4, pc}

08013aee <__swrite>:
 8013aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013af2:	461f      	mov	r7, r3
 8013af4:	898b      	ldrh	r3, [r1, #12]
 8013af6:	05db      	lsls	r3, r3, #23
 8013af8:	4605      	mov	r5, r0
 8013afa:	460c      	mov	r4, r1
 8013afc:	4616      	mov	r6, r2
 8013afe:	d505      	bpl.n	8013b0c <__swrite+0x1e>
 8013b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b04:	2302      	movs	r3, #2
 8013b06:	2200      	movs	r2, #0
 8013b08:	f000 f868 	bl	8013bdc <_lseek_r>
 8013b0c:	89a3      	ldrh	r3, [r4, #12]
 8013b0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013b12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013b16:	81a3      	strh	r3, [r4, #12]
 8013b18:	4632      	mov	r2, r6
 8013b1a:	463b      	mov	r3, r7
 8013b1c:	4628      	mov	r0, r5
 8013b1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b22:	f000 b817 	b.w	8013b54 <_write_r>

08013b26 <__sseek>:
 8013b26:	b510      	push	{r4, lr}
 8013b28:	460c      	mov	r4, r1
 8013b2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b2e:	f000 f855 	bl	8013bdc <_lseek_r>
 8013b32:	1c43      	adds	r3, r0, #1
 8013b34:	89a3      	ldrh	r3, [r4, #12]
 8013b36:	bf15      	itete	ne
 8013b38:	6560      	strne	r0, [r4, #84]	; 0x54
 8013b3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013b3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013b42:	81a3      	strheq	r3, [r4, #12]
 8013b44:	bf18      	it	ne
 8013b46:	81a3      	strhne	r3, [r4, #12]
 8013b48:	bd10      	pop	{r4, pc}

08013b4a <__sclose>:
 8013b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b4e:	f000 b813 	b.w	8013b78 <_close_r>
	...

08013b54 <_write_r>:
 8013b54:	b538      	push	{r3, r4, r5, lr}
 8013b56:	4d07      	ldr	r5, [pc, #28]	; (8013b74 <_write_r+0x20>)
 8013b58:	4604      	mov	r4, r0
 8013b5a:	4608      	mov	r0, r1
 8013b5c:	4611      	mov	r1, r2
 8013b5e:	2200      	movs	r2, #0
 8013b60:	602a      	str	r2, [r5, #0]
 8013b62:	461a      	mov	r2, r3
 8013b64:	f7ee fca9 	bl	80024ba <_write>
 8013b68:	1c43      	adds	r3, r0, #1
 8013b6a:	d102      	bne.n	8013b72 <_write_r+0x1e>
 8013b6c:	682b      	ldr	r3, [r5, #0]
 8013b6e:	b103      	cbz	r3, 8013b72 <_write_r+0x1e>
 8013b70:	6023      	str	r3, [r4, #0]
 8013b72:	bd38      	pop	{r3, r4, r5, pc}
 8013b74:	20008c68 	.word	0x20008c68

08013b78 <_close_r>:
 8013b78:	b538      	push	{r3, r4, r5, lr}
 8013b7a:	4d06      	ldr	r5, [pc, #24]	; (8013b94 <_close_r+0x1c>)
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	4604      	mov	r4, r0
 8013b80:	4608      	mov	r0, r1
 8013b82:	602b      	str	r3, [r5, #0]
 8013b84:	f7ee fcb5 	bl	80024f2 <_close>
 8013b88:	1c43      	adds	r3, r0, #1
 8013b8a:	d102      	bne.n	8013b92 <_close_r+0x1a>
 8013b8c:	682b      	ldr	r3, [r5, #0]
 8013b8e:	b103      	cbz	r3, 8013b92 <_close_r+0x1a>
 8013b90:	6023      	str	r3, [r4, #0]
 8013b92:	bd38      	pop	{r3, r4, r5, pc}
 8013b94:	20008c68 	.word	0x20008c68

08013b98 <_fstat_r>:
 8013b98:	b538      	push	{r3, r4, r5, lr}
 8013b9a:	4d07      	ldr	r5, [pc, #28]	; (8013bb8 <_fstat_r+0x20>)
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	4604      	mov	r4, r0
 8013ba0:	4608      	mov	r0, r1
 8013ba2:	4611      	mov	r1, r2
 8013ba4:	602b      	str	r3, [r5, #0]
 8013ba6:	f7ee fcb0 	bl	800250a <_fstat>
 8013baa:	1c43      	adds	r3, r0, #1
 8013bac:	d102      	bne.n	8013bb4 <_fstat_r+0x1c>
 8013bae:	682b      	ldr	r3, [r5, #0]
 8013bb0:	b103      	cbz	r3, 8013bb4 <_fstat_r+0x1c>
 8013bb2:	6023      	str	r3, [r4, #0]
 8013bb4:	bd38      	pop	{r3, r4, r5, pc}
 8013bb6:	bf00      	nop
 8013bb8:	20008c68 	.word	0x20008c68

08013bbc <_isatty_r>:
 8013bbc:	b538      	push	{r3, r4, r5, lr}
 8013bbe:	4d06      	ldr	r5, [pc, #24]	; (8013bd8 <_isatty_r+0x1c>)
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	4604      	mov	r4, r0
 8013bc4:	4608      	mov	r0, r1
 8013bc6:	602b      	str	r3, [r5, #0]
 8013bc8:	f7ee fcaf 	bl	800252a <_isatty>
 8013bcc:	1c43      	adds	r3, r0, #1
 8013bce:	d102      	bne.n	8013bd6 <_isatty_r+0x1a>
 8013bd0:	682b      	ldr	r3, [r5, #0]
 8013bd2:	b103      	cbz	r3, 8013bd6 <_isatty_r+0x1a>
 8013bd4:	6023      	str	r3, [r4, #0]
 8013bd6:	bd38      	pop	{r3, r4, r5, pc}
 8013bd8:	20008c68 	.word	0x20008c68

08013bdc <_lseek_r>:
 8013bdc:	b538      	push	{r3, r4, r5, lr}
 8013bde:	4d07      	ldr	r5, [pc, #28]	; (8013bfc <_lseek_r+0x20>)
 8013be0:	4604      	mov	r4, r0
 8013be2:	4608      	mov	r0, r1
 8013be4:	4611      	mov	r1, r2
 8013be6:	2200      	movs	r2, #0
 8013be8:	602a      	str	r2, [r5, #0]
 8013bea:	461a      	mov	r2, r3
 8013bec:	f7ee fca8 	bl	8002540 <_lseek>
 8013bf0:	1c43      	adds	r3, r0, #1
 8013bf2:	d102      	bne.n	8013bfa <_lseek_r+0x1e>
 8013bf4:	682b      	ldr	r3, [r5, #0]
 8013bf6:	b103      	cbz	r3, 8013bfa <_lseek_r+0x1e>
 8013bf8:	6023      	str	r3, [r4, #0]
 8013bfa:	bd38      	pop	{r3, r4, r5, pc}
 8013bfc:	20008c68 	.word	0x20008c68

08013c00 <_read_r>:
 8013c00:	b538      	push	{r3, r4, r5, lr}
 8013c02:	4d07      	ldr	r5, [pc, #28]	; (8013c20 <_read_r+0x20>)
 8013c04:	4604      	mov	r4, r0
 8013c06:	4608      	mov	r0, r1
 8013c08:	4611      	mov	r1, r2
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	602a      	str	r2, [r5, #0]
 8013c0e:	461a      	mov	r2, r3
 8013c10:	f7ee fc36 	bl	8002480 <_read>
 8013c14:	1c43      	adds	r3, r0, #1
 8013c16:	d102      	bne.n	8013c1e <_read_r+0x1e>
 8013c18:	682b      	ldr	r3, [r5, #0]
 8013c1a:	b103      	cbz	r3, 8013c1e <_read_r+0x1e>
 8013c1c:	6023      	str	r3, [r4, #0]
 8013c1e:	bd38      	pop	{r3, r4, r5, pc}
 8013c20:	20008c68 	.word	0x20008c68

08013c24 <_init>:
 8013c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c26:	bf00      	nop
 8013c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c2a:	bc08      	pop	{r3}
 8013c2c:	469e      	mov	lr, r3
 8013c2e:	4770      	bx	lr

08013c30 <_fini>:
 8013c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c32:	bf00      	nop
 8013c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c36:	bc08      	pop	{r3}
 8013c38:	469e      	mov	lr, r3
 8013c3a:	4770      	bx	lr
