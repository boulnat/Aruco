
MB-synthetiseur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  0800df30  0800df30  0001df30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e40c  0800e40c  00020314  2**0
                  CONTENTS
  4 .ARM          00000008  0800e40c  0800e40c  0001e40c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e414  0800e414  00020314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e414  0800e414  0001e414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e418  0800e418  0001e418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000314  20000000  0800e41c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008644  20000314  0800e730  00020314  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008958  0800e730  00028958  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020314  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034be7  00000000  00000000  00020344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000062e7  00000000  00000000  00054f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002290  00000000  00000000  0005b218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002018  00000000  00000000  0005d4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a48  00000000  00000000  0005f4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000285ca  00000000  00000000  00088f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef41a  00000000  00000000  000b14d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a08ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009fbc  00000000  00000000  001a0940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000314 	.word	0x20000314
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800df14 	.word	0x0800df14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000318 	.word	0x20000318
 80001cc:	0800df14 	.word	0x0800df14

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <AS7341init>:
/*
void AS7341begin(I2C_HandleTypeDef hi2c1){

}
*/
bool AS7341init(I2C_HandleTypeDef hi2c1, int32_t sensor_id){
 8000ee0:	b084      	sub	sp, #16
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	f107 0c08 	add.w	ip, r7, #8
 8000eea:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	as7341.hi2c 			= hi2c1;
 8000eee:	4b2e      	ldr	r3, [pc, #184]	; (8000fa8 <AS7341init+0xc8>)
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	224c      	movs	r2, #76	; 0x4c
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f00a fb39 	bl	800b570 <memcpy>

	as7341.sensor_ID 		= sensor_id;
 8000efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4b29      	ldr	r3, [pc, #164]	; (8000fa8 <AS7341init+0xc8>)
 8000f04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	as7341.writing_ID		= 0x72;
 8000f08:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <AS7341init+0xc8>)
 8000f0a:	2272      	movs	r2, #114	; 0x72
 8000f0c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	as7341.astep.address_L 	= AS7341_ASTEP_L;
 8000f10:	4b25      	ldr	r3, [pc, #148]	; (8000fa8 <AS7341init+0xc8>)
 8000f12:	22ca      	movs	r2, #202	; 0xca
 8000f14:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	as7341.astep.address_H 	= AS7341_ASTEP_H;
 8000f18:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <AS7341init+0xc8>)
 8000f1a:	22cb      	movs	r2, #203	; 0xcb
 8000f1c:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	as7341.astep.value		= 1;
 8000f20:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <AS7341init+0xc8>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

	as7341.atime.address 	= AS7341_ATIME;
 8000f28:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <AS7341init+0xc8>)
 8000f2a:	2281      	movs	r2, #129	; 0x81
 8000f2c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	as7341.atime.value		= 999;
 8000f30:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <AS7341init+0xc8>)
 8000f32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f36:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	as7341.gain.address		= AS7341_CFG1;
 8000f3a:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <AS7341init+0xc8>)
 8000f3c:	22aa      	movs	r2, #170	; 0xaa
 8000f3e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56

	as7341.integrationTime	= (as7341.atime.value + 1) * (as7341.astep.value + 1) * 2.78 / 1000;
 8000f42:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <AS7341init+0xc8>)
 8000f44:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000f48:	3301      	adds	r3, #1
 8000f4a:	4a17      	ldr	r2, [pc, #92]	; (8000fa8 <AS7341init+0xc8>)
 8000f4c:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8000f50:	3201      	adds	r2, #1
 8000f52:	fb02 f303 	mul.w	r3, r2, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fae4 	bl	8000524 <__aeabi_i2d>
 8000f5c:	a310      	add	r3, pc, #64	; (adr r3, 8000fa0 <AS7341init+0xc0>)
 8000f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f62:	f7ff fb49 	bl	80005f8 <__aeabi_dmul>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <AS7341init+0xcc>)
 8000f74:	f7ff fc6a 	bl	800084c <__aeabi_ddiv>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f7ff fe12 	bl	8000ba8 <__aeabi_d2uiz>
 8000f84:	4603      	mov	r3, r0
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <AS7341init+0xc8>)
 8000f8a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58


	return 1;
 8000f8e:	2301      	movs	r3, #1
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f98:	b004      	add	sp, #16
 8000f9a:	4770      	bx	lr
 8000f9c:	f3af 8000 	nop.w
 8000fa0:	a3d70a3d 	.word	0xa3d70a3d
 8000fa4:	40063d70 	.word	0x40063d70
 8000fa8:	200085a4 	.word	0x200085a4
 8000fac:	408f4000 	.word	0x408f4000

08000fb0 <setASTEP>:
//TESTED
as7341_ReturnError_t setASTEP(uint16_t  astep_value) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	80fb      	strh	r3, [r7, #6]
	//make sure ASTEP is between 0 and 65534
	if(astep_value<0 || astep_value>=65535){
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d102      	bne.n	8000fca <setASTEP+0x1a>
		return AS7341_ERROR_ASTEP_OUT_OF_RANGE;
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc8:	e022      	b.n	8001010 <setASTEP+0x60>
	}

	//write to the LSB astep_value
	errAS7341 = writeRegister(as7341.astep.address_L, astep_value);
 8000fca:	4b13      	ldr	r3, [pc, #76]	; (8001018 <setASTEP+0x68>)
 8000fcc:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8000fd0:	88fa      	ldrh	r2, [r7, #6]
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fc06 	bl	80017e8 <writeRegister>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	; (800101c <setASTEP+0x6c>)
 8000fe2:	701a      	strb	r2, [r3, #0]
	//write to the MSB astep_value
	errAS7341 = writeRegister(as7341.astep.address_H, astep_value>>8);
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <setASTEP+0x68>)
 8000fe6:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	0a1b      	lsrs	r3, r3, #8
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	f000 fbf7 	bl	80017e8 <writeRegister>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <setASTEP+0x6c>)
 8001000:	701a      	strb	r2, [r3, #0]
	//copy value to register stm32 if everything is ok
	as7341.astep.value = astep_value;
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <setASTEP+0x68>)
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50

	return errAS7341;
 800100a:	4b04      	ldr	r3, [pc, #16]	; (800101c <setASTEP+0x6c>)
 800100c:	f993 3000 	ldrsb.w	r3, [r3]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200085a4 	.word	0x200085a4
 800101c:	20000330 	.word	0x20000330

08001020 <setATIME>:

//TESTED
as7341_ReturnError_t setATIME(uint8_t atime_value) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
	//make sure ATIME is between 0 and 255
	if(atime_value<0 || atime_value>=255){
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2bff      	cmp	r3, #255	; 0xff
 800102e:	d102      	bne.n	8001036 <setATIME+0x16>
		return AS7341_ERROR_ATIME_OUT_OF_RANGE;
 8001030:	f06f 0301 	mvn.w	r3, #1
 8001034:	e019      	b.n	800106a <setATIME+0x4a>
	}

	//uint8_t data[] = {as7341.atime.address, atime_value};
	//set atime on AS7341
	uint8_t data[] = {as7341.atime.address, atime_value};
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <setATIME+0x54>)
 8001038:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800103c:	733b      	strb	r3, [r7, #12]
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	737b      	strb	r3, [r7, #13]
	errAS7341 = writeRegister(as7341.atime.address, atime_value);
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <setATIME+0x54>)
 8001044:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8001048:	79fa      	ldrb	r2, [r7, #7]
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fbcb 	bl	80017e8 <writeRegister>
 8001052:	4603      	mov	r3, r0
 8001054:	461a      	mov	r2, r3
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <setATIME+0x58>)
 8001058:	701a      	strb	r2, [r3, #0]
	//status = HAL_I2C_Master_Transmit(&as7341.hi2c, as7341.writing_ID, data, sizeof(data), HAL_MAX_DELAY);
	//status = HAL_I2C_IsDeviceReady(&as7341.hi2c,as7341.writing_ID,10,200);

	as7341.atime.value = atime_value;
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	b29a      	uxth	r2, r3
 800105e:	4b05      	ldr	r3, [pc, #20]	; (8001074 <setATIME+0x54>)
 8001060:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	return errAS7341;
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <setATIME+0x58>)
 8001066:	f993 3000 	ldrsb.w	r3, [r3]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200085a4 	.word	0x200085a4
 8001078:	20000330 	.word	0x20000330

0800107c <setGain>:

//TESTED
as7341_ReturnError_t setGain(uint8_t gain_value) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
	//make sure GAIN is between 0 and 10
	if(gain_value<AS7341_GAIN_0_5X || gain_value>=AS7341_GAIN_512X){
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	2b09      	cmp	r3, #9
 800108a:	d902      	bls.n	8001092 <setGain+0x16>
		return AS7341_ERROR_ATIME_OUT_OF_RANGE;
 800108c:	f06f 0301 	mvn.w	r3, #1
 8001090:	e018      	b.n	80010c4 <setGain+0x48>
	}

	//uint8_t data[] = {as7341.gain.address, gain_value};
	//set gain on AS7341
	uint8_t data[] = {as7341.gain.address, gain_value};
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <setGain+0x50>)
 8001094:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001098:	733b      	strb	r3, [r7, #12]
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	737b      	strb	r3, [r7, #13]
	errAS7341 = writeRegister(as7341.gain.address, gain_value);
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <setGain+0x50>)
 80010a0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80010a4:	79fa      	ldrb	r2, [r7, #7]
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 fb9d 	bl	80017e8 <writeRegister>
 80010ae:	4603      	mov	r3, r0
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <setGain+0x54>)
 80010b4:	701a      	strb	r2, [r3, #0]
	//status = HAL_I2C_Master_Transmit(&as7341.hi2c, as7341.writing_ID, data, sizeof(data), HAL_MAX_DELAY);
	//status = HAL_I2C_IsDeviceReady(&as7341.hi2c, as7341.writing_ID, 10, 200);

	as7341.gain.value = gain_value;
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <setGain+0x50>)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f882 3057 	strb.w	r3, [r2, #87]	; 0x57

	return errAS7341;
 80010be:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <setGain+0x54>)
 80010c0:	f993 3000 	ldrsb.w	r3, [r3]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200085a4 	.word	0x200085a4
 80010d0:	20000330 	.word	0x20000330

080010d4 <readAllChannels>:
	  as7341.rawToBasicCounts = raw / (gain_val * (as7341.atime.value + 1) * (as7341.astep.value + 1) * 2.78 / 1000);
	  return as7341.rawToBasicCounts;
}

//TESTED
as7341_ReturnError_t readAllChannels(uint16_t *readings_buffer) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af02      	add	r7, sp, #8
 80010da:	6078      	str	r0, [r7, #4]
	uint8_t regwrite[]={AS7341_CH0_DATA_L,0x02};
 80010dc:	f240 2395 	movw	r3, #661	; 0x295
 80010e0:	813b      	strh	r3, [r7, #8]

    for(int i=0; i<12; i++){
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	e009      	b.n	80010fc <readAllChannels+0x28>
        as7341._channel_readings[i]=0;
 80010e8:	4a9e      	ldr	r2, [pc, #632]	; (8001364 <readAllChannels+0x290>)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	3330      	adds	r3, #48	; 0x30
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	4413      	add	r3, r2
 80010f2:	2200      	movs	r2, #0
 80010f4:	809a      	strh	r2, [r3, #4]
    for(int i=0; i<12; i++){
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	3301      	adds	r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2b0b      	cmp	r3, #11
 8001100:	ddf2      	ble.n	80010e8 <readAllChannels+0x14>
    }

    errAS7341 = setSMUXLowChannels(true);        // Configure SMUX to read low channels
 8001102:	2001      	movs	r0, #1
 8001104:	f000 fb9c 	bl	8001840 <setSMUXLowChannels>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	4b96      	ldr	r3, [pc, #600]	; (8001368 <readAllChannels+0x294>)
 800110e:	701a      	strb	r2, [r3, #0]
    if(errAS7341){return errAS7341;}
 8001110:	4b95      	ldr	r3, [pc, #596]	; (8001368 <readAllChannels+0x294>)
 8001112:	f993 3000 	ldrsb.w	r3, [r3]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <readAllChannels+0x4e>
 800111a:	4b93      	ldr	r3, [pc, #588]	; (8001368 <readAllChannels+0x294>)
 800111c:	f993 3000 	ldrsb.w	r3, [r3]
 8001120:	e11b      	b.n	800135a <readAllChannels+0x286>

    errAS7341 = enableSpectralMeasurement(true); // Start integration
 8001122:	2001      	movs	r0, #1
 8001124:	f000 fa9c 	bl	8001660 <enableSpectralMeasurement>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	4b8e      	ldr	r3, [pc, #568]	; (8001368 <readAllChannels+0x294>)
 800112e:	701a      	strb	r2, [r3, #0]
    if(errAS7341){return errAS7341;}
 8001130:	4b8d      	ldr	r3, [pc, #564]	; (8001368 <readAllChannels+0x294>)
 8001132:	f993 3000 	ldrsb.w	r3, [r3]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <readAllChannels+0x6e>
 800113a:	4b8b      	ldr	r3, [pc, #556]	; (8001368 <readAllChannels+0x294>)
 800113c:	f993 3000 	ldrsb.w	r3, [r3]
 8001140:	e10b      	b.n	800135a <readAllChannels+0x286>

    errAS7341 = delayForData(0);                 // I'll wait for you for all time
 8001142:	2000      	movs	r0, #0
 8001144:	f000 f918 	bl	8001378 <delayForData>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	4b86      	ldr	r3, [pc, #536]	; (8001368 <readAllChannels+0x294>)
 800114e:	701a      	strb	r2, [r3, #0]
    if(errAS7341){return errAS7341;}
 8001150:	4b85      	ldr	r3, [pc, #532]	; (8001368 <readAllChannels+0x294>)
 8001152:	f993 3000 	ldrsb.w	r3, [r3]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <readAllChannels+0x8e>
 800115a:	4b83      	ldr	r3, [pc, #524]	; (8001368 <readAllChannels+0x294>)
 800115c:	f993 3000 	ldrsb.w	r3, [r3]
 8001160:	e0fb      	b.n	800135a <readAllChannels+0x286>

    errAS7341 = HAL_I2C_Master_Transmit(&as7341.hi2c, as7341.writing_ID, regwrite, 1, HAL_MAX_DELAY);
 8001162:	4b80      	ldr	r3, [pc, #512]	; (8001364 <readAllChannels+0x290>)
 8001164:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001168:	b299      	uxth	r1, r3
 800116a:	f107 0208 	add.w	r2, r7, #8
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2301      	movs	r3, #1
 8001176:	487b      	ldr	r0, [pc, #492]	; (8001364 <readAllChannels+0x290>)
 8001178:	f003 fd8a 	bl	8004c90 <HAL_I2C_Master_Transmit>
 800117c:	4603      	mov	r3, r0
 800117e:	b25a      	sxtb	r2, r3
 8001180:	4b79      	ldr	r3, [pc, #484]	; (8001368 <readAllChannels+0x294>)
 8001182:	701a      	strb	r2, [r3, #0]
    errAS7341 = HAL_I2C_IsDeviceReady(&as7341.hi2c,as7341.writing_ID,10,200);
 8001184:	4b77      	ldr	r3, [pc, #476]	; (8001364 <readAllChannels+0x290>)
 8001186:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800118a:	b299      	uxth	r1, r3
 800118c:	23c8      	movs	r3, #200	; 0xc8
 800118e:	220a      	movs	r2, #10
 8001190:	4874      	ldr	r0, [pc, #464]	; (8001364 <readAllChannels+0x290>)
 8001192:	f003 ff67 	bl	8005064 <HAL_I2C_IsDeviceReady>
 8001196:	4603      	mov	r3, r0
 8001198:	b25a      	sxtb	r2, r3
 800119a:	4b73      	ldr	r3, [pc, #460]	; (8001368 <readAllChannels+0x294>)
 800119c:	701a      	strb	r2, [r3, #0]

  	errAS7341 = HAL_I2C_Master_Transmit(&as7341.hi2c, as7341.writing_ID, regwrite, sizeof(regwrite), HAL_MAX_DELAY);
 800119e:	4b71      	ldr	r3, [pc, #452]	; (8001364 <readAllChannels+0x290>)
 80011a0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80011a4:	b299      	uxth	r1, r3
 80011a6:	f107 0208 	add.w	r2, r7, #8
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2302      	movs	r3, #2
 80011b2:	486c      	ldr	r0, [pc, #432]	; (8001364 <readAllChannels+0x290>)
 80011b4:	f003 fd6c 	bl	8004c90 <HAL_I2C_Master_Transmit>
 80011b8:	4603      	mov	r3, r0
 80011ba:	b25a      	sxtb	r2, r3
 80011bc:	4b6a      	ldr	r3, [pc, #424]	; (8001368 <readAllChannels+0x294>)
 80011be:	701a      	strb	r2, [r3, #0]
  	errAS7341 = HAL_I2C_IsDeviceReady(&as7341.hi2c,as7341.writing_ID,10,200);
 80011c0:	4b68      	ldr	r3, [pc, #416]	; (8001364 <readAllChannels+0x290>)
 80011c2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80011c6:	b299      	uxth	r1, r3
 80011c8:	23c8      	movs	r3, #200	; 0xc8
 80011ca:	220a      	movs	r2, #10
 80011cc:	4865      	ldr	r0, [pc, #404]	; (8001364 <readAllChannels+0x290>)
 80011ce:	f003 ff49 	bl	8005064 <HAL_I2C_IsDeviceReady>
 80011d2:	4603      	mov	r3, r0
 80011d4:	b25a      	sxtb	r2, r3
 80011d6:	4b64      	ldr	r3, [pc, #400]	; (8001368 <readAllChannels+0x294>)
 80011d8:	701a      	strb	r2, [r3, #0]
  	errAS7341 = HAL_I2C_Master_Receive(&as7341.hi2c, as7341.writing_ID, (uint8_t *)as7341._channel_readings, 12, HAL_MAX_DELAY);
 80011da:	4b62      	ldr	r3, [pc, #392]	; (8001364 <readAllChannels+0x290>)
 80011dc:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80011e0:	b299      	uxth	r1, r3
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	230c      	movs	r3, #12
 80011ea:	4a60      	ldr	r2, [pc, #384]	; (800136c <readAllChannels+0x298>)
 80011ec:	485d      	ldr	r0, [pc, #372]	; (8001364 <readAllChannels+0x290>)
 80011ee:	f003 fe43 	bl	8004e78 <HAL_I2C_Master_Receive>
 80011f2:	4603      	mov	r3, r0
 80011f4:	b25a      	sxtb	r2, r3
 80011f6:	4b5c      	ldr	r3, [pc, #368]	; (8001368 <readAllChannels+0x294>)
 80011f8:	701a      	strb	r2, [r3, #0]

  	if(errAS7341){return errAS7341;}
 80011fa:	4b5b      	ldr	r3, [pc, #364]	; (8001368 <readAllChannels+0x294>)
 80011fc:	f993 3000 	ldrsb.w	r3, [r3]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <readAllChannels+0x138>
 8001204:	4b58      	ldr	r3, [pc, #352]	; (8001368 <readAllChannels+0x294>)
 8001206:	f993 3000 	ldrsb.w	r3, [r3]
 800120a:	e0a6      	b.n	800135a <readAllChannels+0x286>

  	errAS7341 = setSMUXLowChannels(false);       // Configure SMUX to read high channels
 800120c:	2000      	movs	r0, #0
 800120e:	f000 fb17 	bl	8001840 <setSMUXLowChannels>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	4b54      	ldr	r3, [pc, #336]	; (8001368 <readAllChannels+0x294>)
 8001218:	701a      	strb	r2, [r3, #0]
  	if(errAS7341){return errAS7341;}
 800121a:	4b53      	ldr	r3, [pc, #332]	; (8001368 <readAllChannels+0x294>)
 800121c:	f993 3000 	ldrsb.w	r3, [r3]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <readAllChannels+0x158>
 8001224:	4b50      	ldr	r3, [pc, #320]	; (8001368 <readAllChannels+0x294>)
 8001226:	f993 3000 	ldrsb.w	r3, [r3]
 800122a:	e096      	b.n	800135a <readAllChannels+0x286>

  	errAS7341 = enableSpectralMeasurement(true); // Start integration
 800122c:	2001      	movs	r0, #1
 800122e:	f000 fa17 	bl	8001660 <enableSpectralMeasurement>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	4b4c      	ldr	r3, [pc, #304]	; (8001368 <readAllChannels+0x294>)
 8001238:	701a      	strb	r2, [r3, #0]
  	if(errAS7341){return errAS7341;}
 800123a:	4b4b      	ldr	r3, [pc, #300]	; (8001368 <readAllChannels+0x294>)
 800123c:	f993 3000 	ldrsb.w	r3, [r3]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <readAllChannels+0x178>
 8001244:	4b48      	ldr	r3, [pc, #288]	; (8001368 <readAllChannels+0x294>)
 8001246:	f993 3000 	ldrsb.w	r3, [r3]
 800124a:	e086      	b.n	800135a <readAllChannels+0x286>

  	errAS7341 = delayForData(0);                 // I'll wait for you for all time
 800124c:	2000      	movs	r0, #0
 800124e:	f000 f893 	bl	8001378 <delayForData>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	4b44      	ldr	r3, [pc, #272]	; (8001368 <readAllChannels+0x294>)
 8001258:	701a      	strb	r2, [r3, #0]
  	if(errAS7341){return errAS7341;}
 800125a:	4b43      	ldr	r3, [pc, #268]	; (8001368 <readAllChannels+0x294>)
 800125c:	f993 3000 	ldrsb.w	r3, [r3]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <readAllChannels+0x198>
 8001264:	4b40      	ldr	r3, [pc, #256]	; (8001368 <readAllChannels+0x294>)
 8001266:	f993 3000 	ldrsb.w	r3, [r3]
 800126a:	e076      	b.n	800135a <readAllChannels+0x286>

  	errAS7341 = (HAL_I2C_Master_Transmit(&as7341.hi2c, as7341.writing_ID, regwrite, 1, HAL_MAX_DELAY) != HAL_OK);
 800126c:	4b3d      	ldr	r3, [pc, #244]	; (8001364 <readAllChannels+0x290>)
 800126e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001272:	b299      	uxth	r1, r3
 8001274:	f107 0208 	add.w	r2, r7, #8
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2301      	movs	r3, #1
 8001280:	4838      	ldr	r0, [pc, #224]	; (8001364 <readAllChannels+0x290>)
 8001282:	f003 fd05 	bl	8004c90 <HAL_I2C_Master_Transmit>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	bf14      	ite	ne
 800128c:	2301      	movne	r3, #1
 800128e:	2300      	moveq	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	b25a      	sxtb	r2, r3
 8001294:	4b34      	ldr	r3, [pc, #208]	; (8001368 <readAllChannels+0x294>)
 8001296:	701a      	strb	r2, [r3, #0]
  	errAS7341 = (HAL_I2C_IsDeviceReady(&as7341.hi2c,as7341.writing_ID,10,200)!=HAL_OK);
 8001298:	4b32      	ldr	r3, [pc, #200]	; (8001364 <readAllChannels+0x290>)
 800129a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800129e:	b299      	uxth	r1, r3
 80012a0:	23c8      	movs	r3, #200	; 0xc8
 80012a2:	220a      	movs	r2, #10
 80012a4:	482f      	ldr	r0, [pc, #188]	; (8001364 <readAllChannels+0x290>)
 80012a6:	f003 fedd 	bl	8005064 <HAL_I2C_IsDeviceReady>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	bf14      	ite	ne
 80012b0:	2301      	movne	r3, #1
 80012b2:	2300      	moveq	r3, #0
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	b25a      	sxtb	r2, r3
 80012b8:	4b2b      	ldr	r3, [pc, #172]	; (8001368 <readAllChannels+0x294>)
 80012ba:	701a      	strb	r2, [r3, #0]

  	errAS7341 = (HAL_I2C_Master_Transmit(&as7341.hi2c, as7341.writing_ID, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 80012bc:	4b29      	ldr	r3, [pc, #164]	; (8001364 <readAllChannels+0x290>)
 80012be:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80012c2:	b299      	uxth	r1, r3
 80012c4:	f107 0208 	add.w	r2, r7, #8
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2302      	movs	r3, #2
 80012d0:	4824      	ldr	r0, [pc, #144]	; (8001364 <readAllChannels+0x290>)
 80012d2:	f003 fcdd 	bl	8004c90 <HAL_I2C_Master_Transmit>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	bf14      	ite	ne
 80012dc:	2301      	movne	r3, #1
 80012de:	2300      	moveq	r3, #0
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	b25a      	sxtb	r2, r3
 80012e4:	4b20      	ldr	r3, [pc, #128]	; (8001368 <readAllChannels+0x294>)
 80012e6:	701a      	strb	r2, [r3, #0]
  	errAS7341 = (HAL_I2C_IsDeviceReady(&as7341.hi2c,as7341.writing_ID,10,200)!=HAL_OK);
 80012e8:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <readAllChannels+0x290>)
 80012ea:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80012ee:	b299      	uxth	r1, r3
 80012f0:	23c8      	movs	r3, #200	; 0xc8
 80012f2:	220a      	movs	r2, #10
 80012f4:	481b      	ldr	r0, [pc, #108]	; (8001364 <readAllChannels+0x290>)
 80012f6:	f003 feb5 	bl	8005064 <HAL_I2C_IsDeviceReady>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	bf14      	ite	ne
 8001300:	2301      	movne	r3, #1
 8001302:	2300      	moveq	r3, #0
 8001304:	b2db      	uxtb	r3, r3
 8001306:	b25a      	sxtb	r2, r3
 8001308:	4b17      	ldr	r3, [pc, #92]	; (8001368 <readAllChannels+0x294>)
 800130a:	701a      	strb	r2, [r3, #0]
  	errAS7341 = (HAL_I2C_Master_Receive(&as7341.hi2c, as7341.writing_ID, (uint8_t *)&as7341._channel_readings[6], 12, HAL_MAX_DELAY)!= HAL_OK);
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <readAllChannels+0x290>)
 800130e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001312:	b299      	uxth	r1, r3
 8001314:	f04f 33ff 	mov.w	r3, #4294967295
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	230c      	movs	r3, #12
 800131c:	4a14      	ldr	r2, [pc, #80]	; (8001370 <readAllChannels+0x29c>)
 800131e:	4811      	ldr	r0, [pc, #68]	; (8001364 <readAllChannels+0x290>)
 8001320:	f003 fdaa 	bl	8004e78 <HAL_I2C_Master_Receive>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	bf14      	ite	ne
 800132a:	2301      	movne	r3, #1
 800132c:	2300      	moveq	r3, #0
 800132e:	b2db      	uxtb	r3, r3
 8001330:	b25a      	sxtb	r2, r3
 8001332:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <readAllChannels+0x294>)
 8001334:	701a      	strb	r2, [r3, #0]
  	if(errAS7341){return errAS7341;}
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <readAllChannels+0x294>)
 8001338:	f993 3000 	ldrsb.w	r3, [r3]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <readAllChannels+0x274>
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <readAllChannels+0x294>)
 8001342:	f993 3000 	ldrsb.w	r3, [r3]
 8001346:	e008      	b.n	800135a <readAllChannels+0x286>
  	for(int i=0; i<12; i++){

  		as7341._channel_readings[i] = ((as7341._channel_readings[i] & 0x00FF) << 8) | (as7341._channel_readings[i]>>8);
  	}
*/
	if(status != HAL_OK){
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <readAllChannels+0x2a0>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <readAllChannels+0x284>
		return status;
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <readAllChannels+0x2a0>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	b25b      	sxtb	r3, r3
 8001356:	e000      	b.n	800135a <readAllChannels+0x286>
	}

	return AS7341_ERROR_NO;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200085a4 	.word	0x200085a4
 8001368:	20000330 	.word	0x20000330
 800136c:	20008608 	.word	0x20008608
 8001370:	20008614 	.word	0x20008614
 8001374:	20008624 	.word	0x20008624

08001378 <delayForData>:

//TESTED
as7341_ReturnError_t delayForData(int waitTime) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af02      	add	r7, sp, #8
 800137e:	6078      	str	r0, [r7, #4]
	uint8_t regwrite[]={AS7341_STATUS2};
 8001380:	23a3      	movs	r3, #163	; 0xa3
 8001382:	733b      	strb	r3, [r7, #12]
	uint8_t regRead[1]={0};
 8001384:	2300      	movs	r3, #0
 8001386:	723b      	strb	r3, [r7, #8]

	while((as7341.regdelayForData>>6)!=0x01){
 8001388:	e02d      	b.n	80013e6 <delayForData+0x6e>
//		HAL_Delay(100);
		status = HAL_I2C_Master_Transmit(&as7341.hi2c, as7341.writing_ID, regwrite, sizeof(regwrite), HAL_MAX_DELAY);
 800138a:	4b21      	ldr	r3, [pc, #132]	; (8001410 <delayForData+0x98>)
 800138c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001390:	b299      	uxth	r1, r3
 8001392:	f107 020c 	add.w	r2, r7, #12
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2301      	movs	r3, #1
 800139e:	481c      	ldr	r0, [pc, #112]	; (8001410 <delayForData+0x98>)
 80013a0:	f003 fc76 	bl	8004c90 <HAL_I2C_Master_Transmit>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <delayForData+0x9c>)
 80013aa:	701a      	strb	r2, [r3, #0]
		status = HAL_I2C_IsDeviceReady(&as7341.hi2c,as7341.writing_ID,10,200);
 80013ac:	4b18      	ldr	r3, [pc, #96]	; (8001410 <delayForData+0x98>)
 80013ae:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80013b2:	b299      	uxth	r1, r3
 80013b4:	23c8      	movs	r3, #200	; 0xc8
 80013b6:	220a      	movs	r2, #10
 80013b8:	4815      	ldr	r0, [pc, #84]	; (8001410 <delayForData+0x98>)
 80013ba:	f003 fe53 	bl	8005064 <HAL_I2C_IsDeviceReady>
 80013be:	4603      	mov	r3, r0
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <delayForData+0x9c>)
 80013c4:	701a      	strb	r2, [r3, #0]
		status = HAL_I2C_Master_Receive(&as7341.hi2c, as7341.writing_ID, &as7341.regdelayForData, 1, HAL_MAX_DELAY);
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <delayForData+0x98>)
 80013c8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80013cc:	b299      	uxth	r1, r3
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2301      	movs	r3, #1
 80013d6:	4a10      	ldr	r2, [pc, #64]	; (8001418 <delayForData+0xa0>)
 80013d8:	480d      	ldr	r0, [pc, #52]	; (8001410 <delayForData+0x98>)
 80013da:	f003 fd4d 	bl	8004e78 <HAL_I2C_Master_Receive>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <delayForData+0x9c>)
 80013e4:	701a      	strb	r2, [r3, #0]
	while((as7341.regdelayForData>>6)!=0x01){
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <delayForData+0x98>)
 80013e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80013ec:	099b      	lsrs	r3, r3, #6
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d1ca      	bne.n	800138a <delayForData+0x12>
		//sprintf(msg, "delayForData = %d\r\n", regRead[0]);
		//HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
	}
	if(status != HAL_OK){
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <delayForData+0x9c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <delayForData+0x8c>
		return status;
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <delayForData+0x9c>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	b25b      	sxtb	r3, r3
 8001402:	e000      	b.n	8001406 <delayForData+0x8e>
	}
	return AS7341_ERROR_NO;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200085a4 	.word	0x200085a4
 8001414:	20008624 	.word	0x20008624
 8001418:	20008600 	.word	0x20008600

0800141c <readChannel>:
//TESTED
as7341_ReturnError_t readChannel(as7341_adc_channel_t channel) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af02      	add	r7, sp, #8
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]

	if(channel<0 || channel>5){
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	2b05      	cmp	r3, #5
 800142a:	d902      	bls.n	8001432 <readChannel+0x16>
		return AS7341_ERROR_READ_CH_OUT_OF_RANGE;
 800142c:	f06f 0303 	mvn.w	r3, #3
 8001430:	e044      	b.n	80014bc <readChannel+0xa0>
	}

	uint16_t read[1];
	uint16_t read16bits = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	81fb      	strh	r3, [r7, #14]
	uint8_t regCh[] = {AS7341_CH0_DATA_L + 2 * channel};
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	b2db      	uxtb	r3, r3
 800143c:	3b6b      	subs	r3, #107	; 0x6b
 800143e:	b2db      	uxtb	r3, r3
 8001440:	723b      	strb	r3, [r7, #8]

	status = HAL_I2C_Master_Transmit(&as7341.hi2c, as7341.writing_ID, regCh, 2, HAL_MAX_DELAY);
 8001442:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <readChannel+0xa8>)
 8001444:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001448:	b299      	uxth	r1, r3
 800144a:	f107 0208 	add.w	r2, r7, #8
 800144e:	f04f 33ff 	mov.w	r3, #4294967295
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2302      	movs	r3, #2
 8001456:	481b      	ldr	r0, [pc, #108]	; (80014c4 <readChannel+0xa8>)
 8001458:	f003 fc1a 	bl	8004c90 <HAL_I2C_Master_Transmit>
 800145c:	4603      	mov	r3, r0
 800145e:	461a      	mov	r2, r3
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <readChannel+0xac>)
 8001462:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_IsDeviceReady(&as7341.hi2c,as7341.writing_ID,10,200);
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <readChannel+0xa8>)
 8001466:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800146a:	b299      	uxth	r1, r3
 800146c:	23c8      	movs	r3, #200	; 0xc8
 800146e:	220a      	movs	r2, #10
 8001470:	4814      	ldr	r0, [pc, #80]	; (80014c4 <readChannel+0xa8>)
 8001472:	f003 fdf7 	bl	8005064 <HAL_I2C_IsDeviceReady>
 8001476:	4603      	mov	r3, r0
 8001478:	461a      	mov	r2, r3
 800147a:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <readChannel+0xac>)
 800147c:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Master_Receive(&as7341.hi2c, as7341.writing_ID, (uint8_t *)as7341._channel_readings[channel], 2, HAL_MAX_DELAY);
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <readChannel+0xa8>)
 8001480:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001484:	b299      	uxth	r1, r3
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <readChannel+0xa8>)
 800148a:	3330      	adds	r3, #48	; 0x30
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4413      	add	r3, r2
 8001490:	889b      	ldrh	r3, [r3, #4]
 8001492:	461a      	mov	r2, r3
 8001494:	f04f 33ff 	mov.w	r3, #4294967295
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2302      	movs	r3, #2
 800149c:	4809      	ldr	r0, [pc, #36]	; (80014c4 <readChannel+0xa8>)
 800149e:	f003 fceb 	bl	8004e78 <HAL_I2C_Master_Receive>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <readChannel+0xac>)
 80014a8:	701a      	strb	r2, [r3, #0]

	if(status != HAL_OK){
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <readChannel+0xac>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <readChannel+0x9e>
		return status;
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <readChannel+0xac>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	b25b      	sxtb	r3, r3
 80014b8:	e000      	b.n	80014bc <readChannel+0xa0>
	}

	//as7341._channel_readings[channel] = ((as7341._channel_readings[channel] & 0x00FF) << 8) | (as7341._channel_readings[channel]>>8);
	return AS7341_ERROR_NO;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200085a4 	.word	0x200085a4
 80014c8:	20008624 	.word	0x20008624

080014cc <getChannel>:
//TESTED
uint16_t getChannel(as7341_color_channel_t channel) {
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
  return (((as7341._channel_readings[channel] & 0x00FF) << 8) | (as7341._channel_readings[channel]>>8));
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	4a0c      	ldr	r2, [pc, #48]	; (800150c <getChannel+0x40>)
 80014da:	3330      	adds	r3, #48	; 0x30
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4413      	add	r3, r2
 80014e0:	889b      	ldrh	r3, [r3, #4]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	b21a      	sxth	r2, r3
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	4908      	ldr	r1, [pc, #32]	; (800150c <getChannel+0x40>)
 80014ea:	3330      	adds	r3, #48	; 0x30
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	440b      	add	r3, r1
 80014f0:	889b      	ldrh	r3, [r3, #4]
 80014f2:	0a1b      	lsrs	r3, r3, #8
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	b21b      	sxth	r3, r3
 80014f8:	4313      	orrs	r3, r2
 80014fa:	b21b      	sxth	r3, r3
 80014fc:	b29b      	uxth	r3, r3
}
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	200085a4 	.word	0x200085a4

08001510 <setup_F1F4_Clear_NIR>:
	  default:
	    return 0;
	  }
}

void setup_F1F4_Clear_NIR() {
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  // SMUX Config for F1,F2,F3,F4,NIR,Clear
  writeRegister((0x00), (0x30)); // F3 left set to ADC2
 8001514:	2130      	movs	r1, #48	; 0x30
 8001516:	2000      	movs	r0, #0
 8001518:	f000 f966 	bl	80017e8 <writeRegister>
  writeRegister((0x01), (0x01)); // F1 left set to ADC0
 800151c:	2101      	movs	r1, #1
 800151e:	2001      	movs	r0, #1
 8001520:	f000 f962 	bl	80017e8 <writeRegister>
  writeRegister((0x02), (0x00)); // Reserved or disabled
 8001524:	2100      	movs	r1, #0
 8001526:	2002      	movs	r0, #2
 8001528:	f000 f95e 	bl	80017e8 <writeRegister>
  writeRegister((0x03), (0x00)); // F8 left disabled
 800152c:	2100      	movs	r1, #0
 800152e:	2003      	movs	r0, #3
 8001530:	f000 f95a 	bl	80017e8 <writeRegister>
  writeRegister((0x04), (0x00)); // F6 left disabled
 8001534:	2100      	movs	r1, #0
 8001536:	2004      	movs	r0, #4
 8001538:	f000 f956 	bl	80017e8 <writeRegister>
  writeRegister((0x05), (0x42)); // F4 left connected to ADC3/f2 left connected to ADC1
 800153c:	2142      	movs	r1, #66	; 0x42
 800153e:	2005      	movs	r0, #5
 8001540:	f000 f952 	bl	80017e8 <writeRegister>
  writeRegister((0x06), (0x00)); // F5 left disbled
 8001544:	2100      	movs	r1, #0
 8001546:	2006      	movs	r0, #6
 8001548:	f000 f94e 	bl	80017e8 <writeRegister>
  writeRegister((0x07), (0x00)); // F7 left disbled
 800154c:	2100      	movs	r1, #0
 800154e:	2007      	movs	r0, #7
 8001550:	f000 f94a 	bl	80017e8 <writeRegister>
  writeRegister((0x08), (0x50)); // CLEAR connected to ADC4
 8001554:	2150      	movs	r1, #80	; 0x50
 8001556:	2008      	movs	r0, #8
 8001558:	f000 f946 	bl	80017e8 <writeRegister>
  writeRegister((0x09), (0x00)); // F5 right disabled
 800155c:	2100      	movs	r1, #0
 800155e:	2009      	movs	r0, #9
 8001560:	f000 f942 	bl	80017e8 <writeRegister>
  writeRegister((0x0A), (0x00)); // F7 right disabled
 8001564:	2100      	movs	r1, #0
 8001566:	200a      	movs	r0, #10
 8001568:	f000 f93e 	bl	80017e8 <writeRegister>
  writeRegister((0x0B), (0x00)); // Reserved or disabled
 800156c:	2100      	movs	r1, #0
 800156e:	200b      	movs	r0, #11
 8001570:	f000 f93a 	bl	80017e8 <writeRegister>
  writeRegister((0x0C), (0x20)); // F2 right connected to ADC1
 8001574:	2120      	movs	r1, #32
 8001576:	200c      	movs	r0, #12
 8001578:	f000 f936 	bl	80017e8 <writeRegister>
  writeRegister((0x0D), (0x04)); // F4 right connected to ADC3
 800157c:	2104      	movs	r1, #4
 800157e:	200d      	movs	r0, #13
 8001580:	f000 f932 	bl	80017e8 <writeRegister>
  writeRegister((0x0E), (0x00)); // F6/F8 right disabled
 8001584:	2100      	movs	r1, #0
 8001586:	200e      	movs	r0, #14
 8001588:	f000 f92e 	bl	80017e8 <writeRegister>
  writeRegister((0x0F), (0x30)); // F3 right connected to AD2
 800158c:	2130      	movs	r1, #48	; 0x30
 800158e:	200f      	movs	r0, #15
 8001590:	f000 f92a 	bl	80017e8 <writeRegister>
  writeRegister((0x10), (0x01)); // F1 right connected to AD0
 8001594:	2101      	movs	r1, #1
 8001596:	2010      	movs	r0, #16
 8001598:	f000 f926 	bl	80017e8 <writeRegister>
  writeRegister((0x11), (0x50)); // CLEAR right connected to AD4
 800159c:	2150      	movs	r1, #80	; 0x50
 800159e:	2011      	movs	r0, #17
 80015a0:	f000 f922 	bl	80017e8 <writeRegister>
  writeRegister((0x12), (0x00)); // Reserved or disabled
 80015a4:	2100      	movs	r1, #0
 80015a6:	2012      	movs	r0, #18
 80015a8:	f000 f91e 	bl	80017e8 <writeRegister>
  writeRegister((0x13), (0x06)); // NIR connected to ADC5
 80015ac:	2106      	movs	r1, #6
 80015ae:	2013      	movs	r0, #19
 80015b0:	f000 f91a 	bl	80017e8 <writeRegister>
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <setup_F5F8_Clear_NIR>:

void setup_F5F8_Clear_NIR() {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  // SMUX Config for F5,F6,F7,F8,NIR,Clear
  writeRegister((0x00), (0x00)); // F3 left disable
 80015bc:	2100      	movs	r1, #0
 80015be:	2000      	movs	r0, #0
 80015c0:	f000 f912 	bl	80017e8 <writeRegister>
  writeRegister((0x01), (0x00)); // F1 left disable
 80015c4:	2100      	movs	r1, #0
 80015c6:	2001      	movs	r0, #1
 80015c8:	f000 f90e 	bl	80017e8 <writeRegister>
  writeRegister((0x02), (0x00)); // reserved/disable
 80015cc:	2100      	movs	r1, #0
 80015ce:	2002      	movs	r0, #2
 80015d0:	f000 f90a 	bl	80017e8 <writeRegister>
  writeRegister((0x03), (0x40)); // F8 left connected to ADC3
 80015d4:	2140      	movs	r1, #64	; 0x40
 80015d6:	2003      	movs	r0, #3
 80015d8:	f000 f906 	bl	80017e8 <writeRegister>
  writeRegister((0x04), (0x02)); // F6 left connected to ADC1
 80015dc:	2102      	movs	r1, #2
 80015de:	2004      	movs	r0, #4
 80015e0:	f000 f902 	bl	80017e8 <writeRegister>
  writeRegister((0x05), (0x00)); // F4/ F2 disabled
 80015e4:	2100      	movs	r1, #0
 80015e6:	2005      	movs	r0, #5
 80015e8:	f000 f8fe 	bl	80017e8 <writeRegister>
  writeRegister((0x06), (0x10)); // F5 left connected to ADC0
 80015ec:	2110      	movs	r1, #16
 80015ee:	2006      	movs	r0, #6
 80015f0:	f000 f8fa 	bl	80017e8 <writeRegister>
  writeRegister((0x07), (0x03)); // F7 left connected to ADC2
 80015f4:	2103      	movs	r1, #3
 80015f6:	2007      	movs	r0, #7
 80015f8:	f000 f8f6 	bl	80017e8 <writeRegister>
  writeRegister((0x08), (0x50)); // CLEAR Connected to ADC4
 80015fc:	2150      	movs	r1, #80	; 0x50
 80015fe:	2008      	movs	r0, #8
 8001600:	f000 f8f2 	bl	80017e8 <writeRegister>
  writeRegister((0x09), (0x10)); // F5 right connected to ADC0
 8001604:	2110      	movs	r1, #16
 8001606:	2009      	movs	r0, #9
 8001608:	f000 f8ee 	bl	80017e8 <writeRegister>
  writeRegister((0x0A), (0x03)); // F7 right connected to ADC2
 800160c:	2103      	movs	r1, #3
 800160e:	200a      	movs	r0, #10
 8001610:	f000 f8ea 	bl	80017e8 <writeRegister>
  writeRegister((0x0B), (0x00)); // Reserved or disabled
 8001614:	2100      	movs	r1, #0
 8001616:	200b      	movs	r0, #11
 8001618:	f000 f8e6 	bl	80017e8 <writeRegister>
  writeRegister((0x0C), (0x00)); // F2 right disabled
 800161c:	2100      	movs	r1, #0
 800161e:	200c      	movs	r0, #12
 8001620:	f000 f8e2 	bl	80017e8 <writeRegister>
  writeRegister((0x0D), (0x00)); // F4 right disabled
 8001624:	2100      	movs	r1, #0
 8001626:	200d      	movs	r0, #13
 8001628:	f000 f8de 	bl	80017e8 <writeRegister>
  writeRegister((0x0E), (0x24)); // F8 right connected to ADC2/ F6 right connected to ADC1
 800162c:	2124      	movs	r1, #36	; 0x24
 800162e:	200e      	movs	r0, #14
 8001630:	f000 f8da 	bl	80017e8 <writeRegister>
  writeRegister((0x0F), (0x00)); // F3 right disabled
 8001634:	2100      	movs	r1, #0
 8001636:	200f      	movs	r0, #15
 8001638:	f000 f8d6 	bl	80017e8 <writeRegister>
  writeRegister((0x10), (0x00)); // F1 right disabled
 800163c:	2100      	movs	r1, #0
 800163e:	2010      	movs	r0, #16
 8001640:	f000 f8d2 	bl	80017e8 <writeRegister>
  writeRegister((0x11), (0x50)); // CLEAR right connected to AD4
 8001644:	2150      	movs	r1, #80	; 0x50
 8001646:	2011      	movs	r0, #17
 8001648:	f000 f8ce 	bl	80017e8 <writeRegister>
  writeRegister((0x12), (0x00)); // Reserved or disabled
 800164c:	2100      	movs	r1, #0
 800164e:	2012      	movs	r0, #18
 8001650:	f000 f8ca 	bl	80017e8 <writeRegister>
  writeRegister((0x13), (0x06)); // NIR connected to ADC5
 8001654:	2106      	movs	r1, #6
 8001656:	2013      	movs	r0, #19
 8001658:	f000 f8c6 	bl	80017e8 <writeRegister>
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}

08001660 <enableSpectralMeasurement>:
	uint8_t regWrite[]={AS7341_ENABLE,0x01}; //PON to 1
	while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regWrite, sizeof(regWrite), HAL_MAX_DELAY) != HAL_OK);
	while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
}

as7341_ReturnError_t enableSpectralMeasurement(bool enable_measurement) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af02      	add	r7, sp, #8
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
	uint8_t regwrite[]={AS7341_ENABLE,0x01};
 800166a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800166e:	81bb      	strh	r3, [r7, #12]
	//uint8_t regRead[1]={0};
	HAL_StatusTypeDef status;
	if(enable_measurement==0){
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	f083 0301 	eor.w	r3, r3, #1
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	d01a      	beq.n	80016b2 <enableSpectralMeasurement+0x52>
		regwrite[1]=0x01;
 800167c:	2301      	movs	r3, #1
 800167e:	737b      	strb	r3, [r7, #13]
		while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 8001680:	bf00      	nop
 8001682:	f107 020c 	add.w	r2, r7, #12
 8001686:	f04f 33ff 	mov.w	r3, #4294967295
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2302      	movs	r3, #2
 800168e:	2172      	movs	r1, #114	; 0x72
 8001690:	4817      	ldr	r0, [pc, #92]	; (80016f0 <enableSpectralMeasurement+0x90>)
 8001692:	f003 fafd 	bl	8004c90 <HAL_I2C_Master_Transmit>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f2      	bne.n	8001682 <enableSpectralMeasurement+0x22>
		while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
 800169c:	bf00      	nop
 800169e:	23c8      	movs	r3, #200	; 0xc8
 80016a0:	220a      	movs	r2, #10
 80016a2:	2172      	movs	r1, #114	; 0x72
 80016a4:	4812      	ldr	r0, [pc, #72]	; (80016f0 <enableSpectralMeasurement+0x90>)
 80016a6:	f003 fcdd 	bl	8005064 <HAL_I2C_IsDeviceReady>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f6      	bne.n	800169e <enableSpectralMeasurement+0x3e>
 80016b0:	e019      	b.n	80016e6 <enableSpectralMeasurement+0x86>
	}
	else{
		regwrite[1]=0x03;
 80016b2:	2303      	movs	r3, #3
 80016b4:	737b      	strb	r3, [r7, #13]
		while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 80016b6:	bf00      	nop
 80016b8:	f107 020c 	add.w	r2, r7, #12
 80016bc:	f04f 33ff 	mov.w	r3, #4294967295
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	2302      	movs	r3, #2
 80016c4:	2172      	movs	r1, #114	; 0x72
 80016c6:	480a      	ldr	r0, [pc, #40]	; (80016f0 <enableSpectralMeasurement+0x90>)
 80016c8:	f003 fae2 	bl	8004c90 <HAL_I2C_Master_Transmit>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f2      	bne.n	80016b8 <enableSpectralMeasurement+0x58>
		while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200) !=HAL_OK);
 80016d2:	bf00      	nop
 80016d4:	23c8      	movs	r3, #200	; 0xc8
 80016d6:	220a      	movs	r2, #10
 80016d8:	2172      	movs	r1, #114	; 0x72
 80016da:	4805      	ldr	r0, [pc, #20]	; (80016f0 <enableSpectralMeasurement+0x90>)
 80016dc:	f003 fcc2 	bl	8005064 <HAL_I2C_IsDeviceReady>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f6      	bne.n	80016d4 <enableSpectralMeasurement+0x74>
	}
  return AS7341_ERROR_NO;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200085a4 	.word	0x200085a4

080016f4 <enableSMUX>:
	while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regWrite, sizeof(regWrite), HAL_MAX_DELAY) != HAL_OK);
	while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
	return 1;
}*/

bool enableSMUX() {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af02      	add	r7, sp, #8
	uint8_t regwrite[]={AS7341_ENABLE,0x19};
 80016fa:	f44f 53cc 	mov.w	r3, #6528	; 0x1980
 80016fe:	80bb      	strh	r3, [r7, #4]
	uint8_t regRead[1]={0};
 8001700:	2300      	movs	r3, #0
 8001702:	703b      	strb	r3, [r7, #0]

	while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 8001704:	bf00      	nop
 8001706:	1d3a      	adds	r2, r7, #4
 8001708:	f04f 33ff 	mov.w	r3, #4294967295
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	2302      	movs	r3, #2
 8001710:	2172      	movs	r1, #114	; 0x72
 8001712:	4820      	ldr	r0, [pc, #128]	; (8001794 <enableSMUX+0xa0>)
 8001714:	f003 fabc 	bl	8004c90 <HAL_I2C_Master_Transmit>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f3      	bne.n	8001706 <enableSMUX+0x12>
	while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
 800171e:	bf00      	nop
 8001720:	23c8      	movs	r3, #200	; 0xc8
 8001722:	220a      	movs	r2, #10
 8001724:	2172      	movs	r1, #114	; 0x72
 8001726:	481b      	ldr	r0, [pc, #108]	; (8001794 <enableSMUX+0xa0>)
 8001728:	f003 fc9c 	bl	8005064 <HAL_I2C_IsDeviceReady>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f6      	bne.n	8001720 <enableSMUX+0x2c>


	regwrite[0]=AS7341_ENABLE;//0xA9 to AS7341_ENABLE
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	713b      	strb	r3, [r7, #4]
	regRead[0]=0;
 8001736:	2300      	movs	r3, #0
 8001738:	703b      	strb	r3, [r7, #0]
	while(regRead[0]==0){
 800173a:	e023      	b.n	8001784 <enableSMUX+0x90>
		while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, 1, HAL_MAX_DELAY) != HAL_OK);
 800173c:	bf00      	nop
 800173e:	1d3a      	adds	r2, r7, #4
 8001740:	f04f 33ff 	mov.w	r3, #4294967295
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	2301      	movs	r3, #1
 8001748:	2172      	movs	r1, #114	; 0x72
 800174a:	4812      	ldr	r0, [pc, #72]	; (8001794 <enableSMUX+0xa0>)
 800174c:	f003 faa0 	bl	8004c90 <HAL_I2C_Master_Transmit>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f3      	bne.n	800173e <enableSMUX+0x4a>
		while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
 8001756:	bf00      	nop
 8001758:	23c8      	movs	r3, #200	; 0xc8
 800175a:	220a      	movs	r2, #10
 800175c:	2172      	movs	r1, #114	; 0x72
 800175e:	480d      	ldr	r0, [pc, #52]	; (8001794 <enableSMUX+0xa0>)
 8001760:	f003 fc80 	bl	8005064 <HAL_I2C_IsDeviceReady>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f6      	bne.n	8001758 <enableSMUX+0x64>
		while(HAL_I2C_Master_Receive(&as7341.hi2c, 0x72, regRead, sizeof(regRead), HAL_MAX_DELAY)!= HAL_OK);
 800176a:	bf00      	nop
 800176c:	463a      	mov	r2, r7
 800176e:	f04f 33ff 	mov.w	r3, #4294967295
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2301      	movs	r3, #1
 8001776:	2172      	movs	r1, #114	; 0x72
 8001778:	4806      	ldr	r0, [pc, #24]	; (8001794 <enableSMUX+0xa0>)
 800177a:	f003 fb7d 	bl	8004e78 <HAL_I2C_Master_Receive>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1f3      	bne.n	800176c <enableSMUX+0x78>
	while(regRead[0]==0){
 8001784:	783b      	ldrb	r3, [r7, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0d8      	beq.n	800173c <enableSMUX+0x48>

		//sprintf(msg, "enableSMUX = %d\r\n", regRead[0]);
		//HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
	}

    return 1;
 800178a:	2301      	movs	r3, #1
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	200085a4 	.word	0x200085a4

08001798 <setSMUXCommand>:
	while(HAL_I2C_Master_Receive(&as7341.hi2c, 0x72, read, sizeof(read), HAL_MAX_DELAY)!= HAL_OK);

	return read[0];
}

bool setSMUXCommand(as7341_smux_cmd_t command) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af02      	add	r7, sp, #8
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
	uint8_t regwrite[]={AS7341_CFG6,0x10}; //should be command << to something
 80017a2:	f241 03af 	movw	r3, #4271	; 0x10af
 80017a6:	81bb      	strh	r3, [r7, #12]
	while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, regwrite, sizeof(regwrite), HAL_MAX_DELAY) != HAL_OK);
 80017a8:	bf00      	nop
 80017aa:	f107 020c 	add.w	r2, r7, #12
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	2302      	movs	r3, #2
 80017b6:	2172      	movs	r1, #114	; 0x72
 80017b8:	480a      	ldr	r0, [pc, #40]	; (80017e4 <setSMUXCommand+0x4c>)
 80017ba:	f003 fa69 	bl	8004c90 <HAL_I2C_Master_Transmit>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f2      	bne.n	80017aa <setSMUXCommand+0x12>
	while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
 80017c4:	bf00      	nop
 80017c6:	23c8      	movs	r3, #200	; 0xc8
 80017c8:	220a      	movs	r2, #10
 80017ca:	2172      	movs	r1, #114	; 0x72
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <setSMUXCommand+0x4c>)
 80017ce:	f003 fc49 	bl	8005064 <HAL_I2C_IsDeviceReady>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f6      	bne.n	80017c6 <setSMUXCommand+0x2e>
	return 1;
 80017d8:	2301      	movs	r3, #1
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200085a4 	.word	0x200085a4

080017e8 <writeRegister>:

as7341_ReturnError_t writeRegister(uint8_t addr, uint8_t val) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	4603      	mov	r3, r0
 80017f0:	460a      	mov	r2, r1
 80017f2:	71fb      	strb	r3, [r7, #7]
 80017f4:	4613      	mov	r3, r2
 80017f6:	71bb      	strb	r3, [r7, #6]
	uint8_t data[] = {addr, val};
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	733b      	strb	r3, [r7, #12]
 80017fc:	79bb      	ldrb	r3, [r7, #6]
 80017fe:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&as7341.hi2c, 0x72, data, sizeof(data), HAL_MAX_DELAY) != HAL_OK);
 8001800:	bf00      	nop
 8001802:	f107 020c 	add.w	r2, r7, #12
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2302      	movs	r3, #2
 800180e:	2172      	movs	r1, #114	; 0x72
 8001810:	480a      	ldr	r0, [pc, #40]	; (800183c <writeRegister+0x54>)
 8001812:	f003 fa3d 	bl	8004c90 <HAL_I2C_Master_Transmit>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1f2      	bne.n	8001802 <writeRegister+0x1a>
	while(HAL_I2C_IsDeviceReady(&as7341.hi2c,0x72,10,200)!=HAL_OK);
 800181c:	bf00      	nop
 800181e:	23c8      	movs	r3, #200	; 0xc8
 8001820:	220a      	movs	r2, #10
 8001822:	2172      	movs	r1, #114	; 0x72
 8001824:	4805      	ldr	r0, [pc, #20]	; (800183c <writeRegister+0x54>)
 8001826:	f003 fc1d 	bl	8005064 <HAL_I2C_IsDeviceReady>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1f6      	bne.n	800181e <writeRegister+0x36>
	return AS7341_ERROR_NO;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200085a4 	.word	0x200085a4

08001840 <setSMUXLowChannels>:
	status = HAL_I2C_Master_Receive(&as7341.hi2c, as7341.writing_ID, &as7341.astep.value, 1, HAL_MAX_DELAY);
	return AS7341_ERROR_NO;
}

*/
as7341_ReturnError_t setSMUXLowChannels(bool f1_f4) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
  enableSpectralMeasurement(false);
 800184a:	2000      	movs	r0, #0
 800184c:	f7ff ff08 	bl	8001660 <enableSpectralMeasurement>
  setSMUXCommand(AS7341_SMUX_CMD_WRITE);
 8001850:	2002      	movs	r0, #2
 8001852:	f7ff ffa1 	bl	8001798 <setSMUXCommand>
  if (f1_f4) {
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d002      	beq.n	8001862 <setSMUXLowChannels+0x22>
    setup_F1F4_Clear_NIR();
 800185c:	f7ff fe58 	bl	8001510 <setup_F1F4_Clear_NIR>
 8001860:	e001      	b.n	8001866 <setSMUXLowChannels+0x26>
  } else {
    setup_F5F8_Clear_NIR();
 8001862:	f7ff fea9 	bl	80015b8 <setup_F5F8_Clear_NIR>
  }
  enableSMUX();
 8001866:	f7ff ff45 	bl	80016f4 <enableSMUX>
  return AS7341_ERROR_NO;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <PCM9600begin>:
#include <stdint.h>
#include <stdbool.h>
#include <main.h>
#include <MCP9600.h>

bool PCM9600begin(PCM9600_t *module, I2C_HandleTypeDef hi2c1){
 8001874:	b084      	sub	sp, #16
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	f107 0014 	add.w	r0, r7, #20
 8001882:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	module->hi2c = hi2c1;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4618      	mov	r0, r3
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	224c      	movs	r2, #76	; 0x4c
 8001890:	4619      	mov	r1, r3
 8001892:	f009 fe6d 	bl	800b570 <memcpy>
	module->sensor_ID = 0x80;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2280      	movs	r2, #128	; 0x80
 800189a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	return 1;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018aa:	b004      	add	sp, #16
 80018ac:	4770      	bx	lr

080018ae <getThermocoupleTemp>:
}

/*----------------------------- Sensor Measurements ---------------------*/

uint8_t getThermocoupleTemp(PCM9600_t *module, bool units)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b084      	sub	sp, #16
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	460b      	mov	r3, r1
 80018b8:	70fb      	strb	r3, [r7, #3]
  int16_t raw = readDoubleRegister(module, HOT_JUNC_TEMP);
 80018ba:	2100      	movs	r1, #0
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f822 	bl	8001906 <readDoubleRegister>
 80018c2:	4603      	mov	r3, r0
 80018c4:	81fb      	strh	r3, [r7, #14]
  uint8_t LSB = raw & 0x00FF;
 80018c6:	89fb      	ldrh	r3, [r7, #14]
 80018c8:	737b      	strb	r3, [r7, #13]
  uint8_t MSB = raw>>8;
 80018ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018ce:	121b      	asrs	r3, r3, #8
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	733b      	strb	r3, [r7, #12]

  if((MSB & 0x80) == 0x80){
 80018d4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	da08      	bge.n	80018ee <getThermocoupleTemp+0x40>
	  return(((MSB*16)+(LSB/16))-4096);
 80018dc:	7b3b      	ldrb	r3, [r7, #12]
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	7b7b      	ldrb	r3, [r7, #13]
 80018e4:	091b      	lsrs	r3, r3, #4
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	e007      	b.n	80018fe <getThermocoupleTemp+0x50>
  }
  else{
	  return(((MSB*16)+(LSB/16)));
 80018ee:	7b3b      	ldrb	r3, [r7, #12]
 80018f0:	011b      	lsls	r3, r3, #4
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	7b7b      	ldrb	r3, [r7, #13]
 80018f6:	091b      	lsrs	r3, r3, #4
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	4413      	add	r3, r2
 80018fc:	b2db      	uxtb	r3, r3
  }
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <readDoubleRegister>:
  return read8bits;

}

uint16_t readDoubleRegister(PCM9600_t *module, MCP9600_Register reg)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af02      	add	r7, sp, #8
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	460b      	mov	r3, r1
 8001910:	70fb      	strb	r3, [r7, #3]
  //Attempt to read the register until we exit with no error code
  //This attempts to fix the bug where clock stretching sometimes failes, as
  //described in the MCP9600 eratta
	uint8_t read[2]={0,0};
 8001912:	2300      	movs	r3, #0
 8001914:	81bb      	strh	r3, [r7, #12]
	uint16_t read16bits = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	81fb      	strh	r3, [r7, #14]

	while(HAL_I2C_Master_Transmit(&module->hi2c, 0xCE, &reg, 1, HAL_MAX_DELAY) != HAL_OK);
 800191a:	bf00      	nop
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	1cfa      	adds	r2, r7, #3
 8001920:	f04f 33ff 	mov.w	r3, #4294967295
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2301      	movs	r3, #1
 8001928:	21ce      	movs	r1, #206	; 0xce
 800192a:	f003 f9b1 	bl	8004c90 <HAL_I2C_Master_Transmit>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1f3      	bne.n	800191c <readDoubleRegister+0x16>
	while(HAL_I2C_IsDeviceReady(&module->hi2c,0xCE,10,200)!=HAL_OK);
 8001934:	bf00      	nop
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	23c8      	movs	r3, #200	; 0xc8
 800193a:	220a      	movs	r2, #10
 800193c:	21ce      	movs	r1, #206	; 0xce
 800193e:	f003 fb91 	bl	8005064 <HAL_I2C_IsDeviceReady>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1f6      	bne.n	8001936 <readDoubleRegister+0x30>
	while(HAL_I2C_Master_Receive(&module->hi2c, 0XCF, read, sizeof(read), HAL_MAX_DELAY)!= HAL_OK);
 8001948:	bf00      	nop
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f107 020c 	add.w	r2, r7, #12
 8001950:	f04f 33ff 	mov.w	r3, #4294967295
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2302      	movs	r3, #2
 8001958:	21cf      	movs	r1, #207	; 0xcf
 800195a:	f003 fa8d 	bl	8004e78 <HAL_I2C_Master_Receive>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f2      	bne.n	800194a <readDoubleRegister+0x44>
	read16bits = (read[0] << 8) | read[1];
 8001964:	7b3b      	ldrb	r3, [r7, #12]
 8001966:	021b      	lsls	r3, r3, #8
 8001968:	b21a      	sxth	r2, r3
 800196a:	7b7b      	ldrb	r3, [r7, #13]
 800196c:	b21b      	sxth	r3, r3
 800196e:	4313      	orrs	r3, r2
 8001970:	b21b      	sxth	r3, r3
 8001972:	81fb      	strh	r3, [r7, #14]
	return read16bits;
 8001974:	89fb      	ldrh	r3, [r7, #14]


}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <PCA9685begin>:
#include <main.h>
#include <PCA9685.h>

PCA9685_ReturnError_t errPCA9685 = 0;

bool PCA9685begin(PCA9685_t *module, I2C_HandleTypeDef hi2c1, uint8_t prescale){
 800197e:	b084      	sub	sp, #16
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	f107 0014 	add.w	r0, r7, #20
 800198c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	module->hi2c = hi2c1;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4618      	mov	r0, r3
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	224c      	movs	r2, #76	; 0x4c
 800199a:	4619      	mov	r1, r3
 800199c:	f009 fde8 	bl	800b570 <memcpy>
	module->sensor_ID = 0x80;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2280      	movs	r2, #128	; 0x80
 80019a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	return 1;
 80019a8:	2301      	movs	r3, #1
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019b4:	b004      	add	sp, #16
 80019b6:	4770      	bx	lr

080019b8 <pca9685_init>:
	//HAL_I2C_Master_Receive(hi2c,address,res,1,1);
	return res;
}

void pca9685_init(PCA9685_t *module)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af02      	add	r7, sp, #8
 80019be:	6078      	str	r0, [r7, #4]
 uint8_t initStruct[2];
 uint8_t prescale = 0x03; // hardcoded
 80019c0:	2303      	movs	r3, #3
 80019c2:	73fb      	strb	r3, [r7, #15]
 errPCA9685 = HAL_I2C_Master_Transmit(&module->hi2c, 0x80, PCA9685_MODE1, 1, 1);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	2301      	movs	r3, #1
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	2301      	movs	r3, #1
 80019cc:	2200      	movs	r2, #0
 80019ce:	2180      	movs	r1, #128	; 0x80
 80019d0:	f003 f95e 	bl	8004c90 <HAL_I2C_Master_Transmit>
 80019d4:	4603      	mov	r3, r0
 80019d6:	461a      	mov	r2, r3
 80019d8:	4b32      	ldr	r3, [pc, #200]	; (8001aa4 <pca9685_init+0xec>)
 80019da:	701a      	strb	r2, [r3, #0]
 uint8_t oldmode = 0x00; // hardcoded
 80019dc:	2300      	movs	r3, #0
 80019de:	73bb      	strb	r3, [r7, #14]
 //uint8_t oldmode = PCA9685_read(hi2c,address,PCA9685_MODE1);
 // HAL_I2C_Master_Receive(hi2c, address, &oldmode, 1, 1);
 uint8_t newmode = ((oldmode & 0x7F) | 0x10);
 80019e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80019e4:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 80019e8:	b25b      	sxtb	r3, r3
 80019ea:	f043 0310 	orr.w	r3, r3, #16
 80019ee:	b25b      	sxtb	r3, r3
 80019f0:	737b      	strb	r3, [r7, #13]
 initStruct[0] = PCA9685_MODE1;
 80019f2:	2300      	movs	r3, #0
 80019f4:	723b      	strb	r3, [r7, #8]
 initStruct[1] = newmode;
 80019f6:	7b7b      	ldrb	r3, [r7, #13]
 80019f8:	727b      	strb	r3, [r7, #9]
 errPCA9685 = HAL_I2C_Master_Transmit(&module->hi2c, module->sensor_ID, initStruct, 2, 1);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001a02:	b299      	uxth	r1, r3
 8001a04:	f107 0208 	add.w	r2, r7, #8
 8001a08:	2301      	movs	r3, #1
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	f003 f93f 	bl	8004c90 <HAL_I2C_Master_Transmit>
 8001a12:	4603      	mov	r3, r0
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <pca9685_init+0xec>)
 8001a18:	701a      	strb	r2, [r3, #0]
 //initStruct[0] = 0xFE;
 initStruct[1] = prescale;
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	727b      	strb	r3, [r7, #9]
 errPCA9685 = HAL_I2C_Master_Transmit(&module->hi2c, module->sensor_ID, initStruct, 2, 1);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001a26:	b299      	uxth	r1, r3
 8001a28:	f107 0208 	add.w	r2, r7, #8
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	2302      	movs	r3, #2
 8001a32:	f003 f92d 	bl	8004c90 <HAL_I2C_Master_Transmit>
 8001a36:	4603      	mov	r3, r0
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <pca9685_init+0xec>)
 8001a3c:	701a      	strb	r2, [r3, #0]
 //initStruct[0] = PCA9685_MODE1;
 initStruct[1] = oldmode;
 8001a3e:	7bbb      	ldrb	r3, [r7, #14]
 8001a40:	727b      	strb	r3, [r7, #9]
 errPCA9685 = HAL_I2C_Master_Transmit(&module->hi2c, module->sensor_ID, initStruct, 2, 1);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001a4a:	b299      	uxth	r1, r3
 8001a4c:	f107 0208 	add.w	r2, r7, #8
 8001a50:	2301      	movs	r3, #1
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	2302      	movs	r3, #2
 8001a56:	f003 f91b 	bl	8004c90 <HAL_I2C_Master_Transmit>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <pca9685_init+0xec>)
 8001a60:	701a      	strb	r2, [r3, #0]
 //osDelay(5);
 initStruct[1] = (oldmode | 0xA1);
 8001a62:	7bbb      	ldrb	r3, [r7, #14]
 8001a64:	f063 035e 	orn	r3, r3, #94	; 0x5e
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	727b      	strb	r3, [r7, #9]
 errPCA9685 = HAL_I2C_Master_Transmit(&module->hi2c, module->sensor_ID, initStruct, 2, 1);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001a74:	b299      	uxth	r1, r3
 8001a76:	f107 0208 	add.w	r2, r7, #8
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	2302      	movs	r3, #2
 8001a80:	f003 f906 	bl	8004c90 <HAL_I2C_Master_Transmit>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461a      	mov	r2, r3
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <pca9685_init+0xec>)
 8001a8a:	701a      	strb	r2, [r3, #0]
 //turn off all LED
 //all_led_off(address);
 if(errPCA9685){
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <pca9685_init+0xec>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d002      	beq.n	8001a9a <pca9685_init+0xe2>
	 errPCA9685=0;
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <pca9685_init+0xec>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
 }
}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000331 	.word	0x20000331

08001aa8 <pca9685_pwm>:

void pca9685_pwm(PCA9685_t *module, uint8_t num, uint16_t on, uint16_t off)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	4608      	mov	r0, r1
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	72fb      	strb	r3, [r7, #11]
 8001aba:	460b      	mov	r3, r1
 8001abc:	813b      	strh	r3, [r7, #8]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	80fb      	strh	r3, [r7, #6]
	uint8_t outputBuffer[] = {0x06 + 4*num, on, (on >> 8), off, (off >> 8)};
 8001ac2:	7afb      	ldrb	r3, [r7, #11]
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	3306      	adds	r3, #6
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	743b      	strb	r3, [r7, #16]
 8001ace:	893b      	ldrh	r3, [r7, #8]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	747b      	strb	r3, [r7, #17]
 8001ad4:	893b      	ldrh	r3, [r7, #8]
 8001ad6:	0a1b      	lsrs	r3, r3, #8
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	74bb      	strb	r3, [r7, #18]
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	74fb      	strb	r3, [r7, #19]
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	0a1b      	lsrs	r3, r3, #8
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	753b      	strb	r3, [r7, #20]
	HAL_I2C_Master_Transmit(&module->hi2c, module->sensor_ID, outputBuffer, sizeof(outputBuffer), 1);
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001af6:	b299      	uxth	r1, r3
 8001af8:	f107 0210 	add.w	r2, r7, #16
 8001afc:	2301      	movs	r3, #1
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2305      	movs	r3, #5
 8001b02:	f003 f8c5 	bl	8004c90 <HAL_I2C_Master_Transmit>
}
 8001b06:	bf00      	nop
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b16:	463b      	mov	r3, r7
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
 8001b24:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b26:	4b29      	ldr	r3, [pc, #164]	; (8001bcc <MX_ADC1_Init+0xbc>)
 8001b28:	4a29      	ldr	r2, [pc, #164]	; (8001bd0 <MX_ADC1_Init+0xc0>)
 8001b2a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001b2c:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <MX_ADC1_Init+0xbc>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b32:	4b26      	ldr	r3, [pc, #152]	; (8001bcc <MX_ADC1_Init+0xbc>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b38:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <MX_ADC1_Init+0xbc>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b3e:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <MX_ADC1_Init+0xbc>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b44:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <MX_ADC1_Init+0xbc>)
 8001b46:	2204      	movs	r2, #4
 8001b48:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b4a:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <MX_ADC1_Init+0xbc>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b50:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <MX_ADC1_Init+0xbc>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001b56:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <MX_ADC1_Init+0xbc>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <MX_ADC1_Init+0xbc>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b64:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <MX_ADC1_Init+0xbc>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b6a:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <MX_ADC1_Init+0xbc>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b70:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <MX_ADC1_Init+0xbc>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b78:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <MX_ADC1_Init+0xbc>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001b7e:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <MX_ADC1_Init+0xbc>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b86:	4811      	ldr	r0, [pc, #68]	; (8001bcc <MX_ADC1_Init+0xbc>)
 8001b88:	f001 fa96 	bl	80030b8 <HAL_ADC_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001b92:	f000 fbad 	bl	80022f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001b96:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <MX_ADC1_Init+0xc4>)
 8001b98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b9a:	2306      	movs	r3, #6
 8001b9c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ba2:	237f      	movs	r3, #127	; 0x7f
 8001ba4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bae:	463b      	mov	r3, r7
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4806      	ldr	r0, [pc, #24]	; (8001bcc <MX_ADC1_Init+0xbc>)
 8001bb4:	f001 fbc8 	bl	8003348 <HAL_ADC_ConfigChannel>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001bbe:	f000 fb97 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20008628 	.word	0x20008628
 8001bd0:	50040000 	.word	0x50040000
 8001bd4:	19200040 	.word	0x19200040

08001bd8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a15      	ldr	r2, [pc, #84]	; (8001c4c <HAL_ADC_MspInit+0x74>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d124      	bne.n	8001c44 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <HAL_ADC_MspInit+0x78>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfe:	4a14      	ldr	r2, [pc, #80]	; (8001c50 <HAL_ADC_MspInit+0x78>)
 8001c00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_ADC_MspInit+0x78>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <HAL_ADC_MspInit+0x78>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	4a0e      	ldr	r2, [pc, #56]	; (8001c50 <HAL_ADC_MspInit+0x78>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <HAL_ADC_MspInit+0x78>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN6
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001c2a:	2372      	movs	r3, #114	; 0x72
 8001c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c2e:	230b      	movs	r3, #11
 8001c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c40:	f002 fe2c 	bl	800489c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001c44:	bf00      	nop
 8001c46:	3728      	adds	r7, #40	; 0x28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	50040000 	.word	0x50040000
 8001c50:	40021000 	.word	0x40021000

08001c54 <spectro>:

/*******************************************************************************/
void program1ms(void){
	scenario();
}
void spectro(){
 8001c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c56:	b0ad      	sub	sp, #180	; 0xb4
 8001c58:	af10      	add	r7, sp, #64	; 0x40
      //PCM9600begin(hi2c1);
	  //AS7341begin(hi2c1);
	  PCM9600_t module;
	  PCM9600begin(&module, hi2c1);
 8001c5a:	4e30      	ldr	r6, [pc, #192]	; (8001d1c <spectro+0xc8>)
 8001c5c:	f107 0c1c 	add.w	ip, r7, #28
 8001c60:	466d      	mov	r5, sp
 8001c62:	f106 040c 	add.w	r4, r6, #12
 8001c66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c72:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c76:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001c7a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001c7e:	4660      	mov	r0, ip
 8001c80:	f7ff fdf8 	bl	8001874 <PCM9600begin>
	  AS7341init(hi2c1, 0x80);
 8001c84:	4e25      	ldr	r6, [pc, #148]	; (8001d1c <spectro+0xc8>)
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	930f      	str	r3, [sp, #60]	; 0x3c
 8001c8a:	466d      	mov	r5, sp
 8001c8c:	f106 0410 	add.w	r4, r6, #16
 8001c90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c9c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001ca0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001ca4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001ca8:	f7ff f91a 	bl	8000ee0 <AS7341init>
      setASTEP(999);
 8001cac:	f240 30e7 	movw	r0, #999	; 0x3e7
 8001cb0:	f7ff f97e 	bl	8000fb0 <setASTEP>
      //getASTEP();
      setATIME(100);
 8001cb4:	2064      	movs	r0, #100	; 0x64
 8001cb6:	f7ff f9b3 	bl	8001020 <setATIME>
      setGain(AS7341_GAIN_256X);
 8001cba:	2009      	movs	r0, #9
 8001cbc:	f7ff f9de 	bl	800107c <setGain>

      uint16_t buff[12];
      for(;;){


      readAllChannels(buff);
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fa06 	bl	80010d4 <readAllChannels>

      //cansend can0 602#3B00180510000000 ask for PDO every 10s
      //cansend can0 602#4001640100000000
      //!!!!weird number if scan is too fast
      CO_OD_RAM.readAnalogueInput16Bit[0] = getChannel(AS7341_CHANNEL_415nm_F1); //added by me set the value of an object
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f7ff fbff 	bl	80014cc <getChannel>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	b21a      	sxth	r2, r3
 8001cd2:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <spectro+0xcc>)
 8001cd4:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
      CO_OD_RAM.readAnalogueInput16Bit[1] = getChannel(AS7341_CHANNEL_445nm_F2);
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f7ff fbf7 	bl	80014cc <getChannel>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	b21a      	sxth	r2, r3
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <spectro+0xcc>)
 8001ce4:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
      CO_OD_RAM.readAnalogueInput16Bit[2] = getChannel(AS7341_CHANNEL_480nm_F3);
 8001ce8:	2002      	movs	r0, #2
 8001cea:	f7ff fbef 	bl	80014cc <getChannel>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	b21a      	sxth	r2, r3
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <spectro+0xcc>)
 8001cf4:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
      readChannel(AS7341_CHANNEL_415nm_F1);
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f7ff fb8f 	bl	800141c <readChannel>
      CO_OD_RAM.readAnalogueInput16Bit[3] = getThermocoupleTemp(&module,0);
 8001cfe:	f107 031c 	add.w	r3, r7, #28
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fdd2 	bl	80018ae <getThermocoupleTemp>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	b21a      	sxth	r2, r3
 8001d0e:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <spectro+0xcc>)
 8001d10:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
      scenario();
 8001d14:	f000 f806 	bl	8001d24 <scenario>
      for(;;){
 8001d18:	e7d2      	b.n	8001cc0 <spectro+0x6c>
 8001d1a:	bf00      	nop
 8001d1c:	200086c0 	.word	0x200086c0
 8001d20:	20000000 	.word	0x20000000

08001d24 <scenario>:
      }

}
void scenario(void){
 8001d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d26:	b0ab      	sub	sp, #172	; 0xac
 8001d28:	af12      	add	r7, sp, #72	; 0x48
    uint16_t sharedvar=16;
 8001d2a:	2310      	movs	r3, #16
 8001d2c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    uint16_t sharedchannel=0xFFFF;
 8001d30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d34:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
    uint16_t shareddelay = 5;
 8001d38:	2305      	movs	r3, #5
 8001d3a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

  	 uint8_t I2C_address = 0x80;
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  	 PCA9685_t module;
  	 PCA9685begin(&module,hi2c1,3);
 8001d44:	4e2b      	ldr	r6, [pc, #172]	; (8001df4 <scenario+0xd0>)
 8001d46:	46bc      	mov	ip, r7
 8001d48:	2303      	movs	r3, #3
 8001d4a:	9310      	str	r3, [sp, #64]	; 0x40
 8001d4c:	466d      	mov	r5, sp
 8001d4e:	f106 040c 	add.w	r4, r6, #12
 8001d52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d5e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d62:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001d66:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001d6a:	4660      	mov	r0, ip
 8001d6c:	f7ff fe07 	bl	800197e <PCA9685begin>
  	 pca9685_init(&module);
 8001d70:	463b      	mov	r3, r7
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fe20 	bl	80019b8 <pca9685_init>
	 pca9685_pwm(&module, 0, 0, 4095);//turn off pwm1
 8001d78:	4638      	mov	r0, r7
 8001d7a:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2100      	movs	r1, #0
 8001d82:	f7ff fe91 	bl	8001aa8 <pca9685_pwm>
	 pca9685_pwm(&module, 1, 0, 4095);//turn off pwm2
 8001d86:	4638      	mov	r0, r7
 8001d88:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2101      	movs	r1, #1
 8001d90:	f7ff fe8a 	bl	8001aa8 <pca9685_pwm>
	 for(;;){
	         for(int i=0; i<1024/sharedvar; i++){
 8001d94:	2300      	movs	r3, #0
 8001d96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d98:	e022      	b.n	8001de0 <scenario+0xbc>
	        	 pca9685_pwm(&module, 0, 0,  4095-(sharedvar*i));//turn off pwm1
 8001d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8001da2:	fb12 f303 	smulbb	r3, r2, r3
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001dac:	330f      	adds	r3, #15
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	4638      	mov	r0, r7
 8001db2:	2200      	movs	r2, #0
 8001db4:	2100      	movs	r1, #0
 8001db6:	f7ff fe77 	bl	8001aa8 <pca9685_pwm>
	        	 pca9685_pwm(&module, 1, 0,  4095-(sharedvar*i));//turn off pwm1
 8001dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8001dc2:	fb12 f303 	smulbb	r3, r2, r3
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001dcc:	330f      	adds	r3, #15
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	4638      	mov	r0, r7
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	f7ff fe67 	bl	8001aa8 <pca9685_pwm>
	         for(int i=0; i<1024/sharedvar; i++){
 8001dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ddc:	3301      	adds	r3, #1
 8001dde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001de0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001de4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001de8:	fb92 f3f3 	sdiv	r3, r2, r3
 8001dec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001dee:	429a      	cmp	r2, r3
 8001df0:	dbd3      	blt.n	8001d9a <scenario+0x76>
 8001df2:	e7cf      	b.n	8001d94 <scenario+0x70>
 8001df4:	200086c0 	.word	0x200086c0

08001df8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001dfc:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <MX_CAN1_Init+0x64>)
 8001dfe:	4a18      	ldr	r2, [pc, #96]	; (8001e60 <MX_CAN1_Init+0x68>)
 8001e00:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 8001e02:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <MX_CAN1_Init+0x64>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001e08:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <MX_CAN1_Init+0x64>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e0e:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <MX_CAN1_Init+0x64>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <MX_CAN1_Init+0x64>)
 8001e16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e1a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <MX_CAN1_Init+0x64>)
 8001e1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e22:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001e24:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <MX_CAN1_Init+0x64>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <MX_CAN1_Init+0x64>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001e30:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <MX_CAN1_Init+0x64>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001e36:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <MX_CAN1_Init+0x64>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001e3c:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <MX_CAN1_Init+0x64>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <MX_CAN1_Init+0x64>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001e48:	4804      	ldr	r0, [pc, #16]	; (8001e5c <MX_CAN1_Init+0x64>)
 8001e4a:	f001 fe5d 	bl	8003b08 <HAL_CAN_Init>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001e54:	f000 fa4c 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	2000868c 	.word	0x2000868c
 8001e60:	40006400 	.word	0x40006400

08001e64 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a20      	ldr	r2, [pc, #128]	; (8001f04 <HAL_CAN_MspInit+0xa0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d139      	bne.n	8001efa <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e86:	4b20      	ldr	r3, [pc, #128]	; (8001f08 <HAL_CAN_MspInit+0xa4>)
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	4a1f      	ldr	r2, [pc, #124]	; (8001f08 <HAL_CAN_MspInit+0xa4>)
 8001e8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e90:	6593      	str	r3, [r2, #88]	; 0x58
 8001e92:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <HAL_CAN_MspInit+0xa4>)
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9e:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <HAL_CAN_MspInit+0xa4>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	4a19      	ldr	r2, [pc, #100]	; (8001f08 <HAL_CAN_MspInit+0xa4>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eaa:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <HAL_CAN_MspInit+0xa4>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001eb6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ec8:	2309      	movs	r3, #9
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed6:	f002 fce1 	bl	800489c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001eda:	2200      	movs	r2, #0
 8001edc:	2105      	movs	r1, #5
 8001ede:	2013      	movs	r0, #19
 8001ee0:	f002 fafc 	bl	80044dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001ee4:	2013      	movs	r0, #19
 8001ee6:	f002 fb15 	bl	8004514 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2105      	movs	r1, #5
 8001eee:	2014      	movs	r0, #20
 8001ef0:	f002 faf4 	bl	80044dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001ef4:	2014      	movs	r0, #20
 8001ef6:	f002 fb0d 	bl	8004514 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001efa:	bf00      	nop
 8001efc:	3728      	adds	r7, #40	; 0x28
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40006400 	.word	0x40006400
 8001f08:	40021000 	.word	0x40021000

08001f0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <MX_DMA_Init+0x48>)
 8001f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f16:	4a0f      	ldr	r2, [pc, #60]	; (8001f54 <MX_DMA_Init+0x48>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	6493      	str	r3, [r2, #72]	; 0x48
 8001f1e:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <MX_DMA_Init+0x48>)
 8001f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2105      	movs	r1, #5
 8001f2e:	2010      	movs	r0, #16
 8001f30:	f002 fad4 	bl	80044dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001f34:	2010      	movs	r0, #16
 8001f36:	f002 faed 	bl	8004514 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2105      	movs	r1, #5
 8001f3e:	2011      	movs	r0, #17
 8001f40:	f002 facc 	bl	80044dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001f44:	2011      	movs	r0, #17
 8001f46:	f002 fae5 	bl	8004514 <HAL_NVIC_EnableIRQ>

}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000

08001f58 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001f5c:	4a0c      	ldr	r2, [pc, #48]	; (8001f90 <MX_FREERTOS_Init+0x38>)
 8001f5e:	2100      	movs	r1, #0
 8001f60:	480c      	ldr	r0, [pc, #48]	; (8001f94 <MX_FREERTOS_Init+0x3c>)
 8001f62:	f006 fec5 	bl	8008cf0 <osThreadNew>
 8001f66:	4603      	mov	r3, r0
 8001f68:	4a0b      	ldr	r2, [pc, #44]	; (8001f98 <MX_FREERTOS_Init+0x40>)
 8001f6a:	6013      	str	r3, [r2, #0]

  /* creation of readTempTask */
  readTempTaskHandle = osThreadNew(StartReadTempTask, NULL, &readTempTask_attributes);
 8001f6c:	4a0b      	ldr	r2, [pc, #44]	; (8001f9c <MX_FREERTOS_Init+0x44>)
 8001f6e:	2100      	movs	r1, #0
 8001f70:	480b      	ldr	r0, [pc, #44]	; (8001fa0 <MX_FREERTOS_Init+0x48>)
 8001f72:	f006 febd 	bl	8008cf0 <osThreadNew>
 8001f76:	4603      	mov	r3, r0
 8001f78:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <MX_FREERTOS_Init+0x4c>)
 8001f7a:	6013      	str	r3, [r2, #0]

  /* creation of readLightTask */
  readLightTaskHandle = osThreadNew(StartReadLightTask, NULL, &readLightTask_attributes);
 8001f7c:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <MX_FREERTOS_Init+0x50>)
 8001f7e:	2100      	movs	r1, #0
 8001f80:	480a      	ldr	r0, [pc, #40]	; (8001fac <MX_FREERTOS_Init+0x54>)
 8001f82:	f006 feb5 	bl	8008cf0 <osThreadNew>
 8001f86:	4603      	mov	r3, r0
 8001f88:	4a09      	ldr	r2, [pc, #36]	; (8001fb0 <MX_FREERTOS_Init+0x58>)
 8001f8a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	0800df74 	.word	0x0800df74
 8001f94:	08001fb5 	.word	0x08001fb5
 8001f98:	200086b4 	.word	0x200086b4
 8001f9c:	0800df98 	.word	0x0800df98
 8001fa0:	08001fc3 	.word	0x08001fc3
 8001fa4:	200086b8 	.word	0x200086b8
 8001fa8:	0800dfbc 	.word	0x0800dfbc
 8001fac:	08001fcd 	.word	0x08001fcd
 8001fb0:	200086bc 	.word	0x200086bc

08001fb4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  spectro();
 8001fbc:	f7ff fe4a 	bl	8001c54 <spectro>
  {
 8001fc0:	e7fc      	b.n	8001fbc <StartDefaultTask+0x8>

08001fc2 <StartReadTempTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadTempTask */
void StartReadTempTask(void *argument)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadTempTask */
  /* Infinite loop */
  for(;;)
 8001fca:	e7fe      	b.n	8001fca <StartReadTempTask+0x8>

08001fcc <StartReadLightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadLightTask */
void StartReadLightTask(void *argument)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadLightTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	f006 ff1d 	bl	8008e14 <osDelay>
 8001fda:	e7fb      	b.n	8001fd4 <StartReadLightTask+0x8>

08001fdc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <MX_GPIO_Init+0x5c>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe6:	4a14      	ldr	r2, [pc, #80]	; (8002038 <MX_GPIO_Init+0x5c>)
 8001fe8:	f043 0304 	orr.w	r3, r3, #4
 8001fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fee:	4b12      	ldr	r3, [pc, #72]	; (8002038 <MX_GPIO_Init+0x5c>)
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <MX_GPIO_Init+0x5c>)
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffe:	4a0e      	ldr	r2, [pc, #56]	; (8002038 <MX_GPIO_Init+0x5c>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002006:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <MX_GPIO_Init+0x5c>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <MX_GPIO_Init+0x5c>)
 8002014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002016:	4a08      	ldr	r2, [pc, #32]	; (8002038 <MX_GPIO_Init+0x5c>)
 8002018:	f043 0302 	orr.w	r3, r3, #2
 800201c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <MX_GPIO_Init+0x5c>)
 8002020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	687b      	ldr	r3, [r7, #4]

}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40021000 	.word	0x40021000

0800203c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002040:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <MX_I2C1_Init+0x74>)
 8002042:	4a1c      	ldr	r2, [pc, #112]	; (80020b4 <MX_I2C1_Init+0x78>)
 8002044:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000000;
 8002046:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <MX_I2C1_Init+0x74>)
 8002048:	2200      	movs	r2, #0
 800204a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800204c:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <MX_I2C1_Init+0x74>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002052:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <MX_I2C1_Init+0x74>)
 8002054:	2201      	movs	r2, #1
 8002056:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002058:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <MX_I2C1_Init+0x74>)
 800205a:	2200      	movs	r2, #0
 800205c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800205e:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <MX_I2C1_Init+0x74>)
 8002060:	2200      	movs	r2, #0
 8002062:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <MX_I2C1_Init+0x74>)
 8002066:	2200      	movs	r2, #0
 8002068:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <MX_I2C1_Init+0x74>)
 800206c:	2200      	movs	r2, #0
 800206e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <MX_I2C1_Init+0x74>)
 8002072:	2200      	movs	r2, #0
 8002074:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002076:	480e      	ldr	r0, [pc, #56]	; (80020b0 <MX_I2C1_Init+0x74>)
 8002078:	f002 fd7a 	bl	8004b70 <HAL_I2C_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002082:	f000 f935 	bl	80022f0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002086:	2100      	movs	r1, #0
 8002088:	4809      	ldr	r0, [pc, #36]	; (80020b0 <MX_I2C1_Init+0x74>)
 800208a:	f004 f847 	bl	800611c <HAL_I2CEx_ConfigAnalogFilter>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002094:	f000 f92c 	bl	80022f0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002098:	2100      	movs	r1, #0
 800209a:	4805      	ldr	r0, [pc, #20]	; (80020b0 <MX_I2C1_Init+0x74>)
 800209c:	f004 f889 	bl	80061b2 <HAL_I2CEx_ConfigDigitalFilter>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80020a6:	f000 f923 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	200086c0 	.word	0x200086c0
 80020b4:	40005400 	.word	0x40005400

080020b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	; 0x28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a1f      	ldr	r2, [pc, #124]	; (8002154 <HAL_I2C_MspInit+0x9c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d137      	bne.n	800214a <HAL_I2C_MspInit+0x92>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020da:	4b1f      	ldr	r3, [pc, #124]	; (8002158 <HAL_I2C_MspInit+0xa0>)
 80020dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020de:	4a1e      	ldr	r2, [pc, #120]	; (8002158 <HAL_I2C_MspInit+0xa0>)
 80020e0:	f043 0302 	orr.w	r3, r3, #2
 80020e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020e6:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <HAL_I2C_MspInit+0xa0>)
 80020e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020f2:	23c0      	movs	r3, #192	; 0xc0
 80020f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020f6:	2312      	movs	r3, #18
 80020f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020fa:	2301      	movs	r3, #1
 80020fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fe:	2303      	movs	r3, #3
 8002100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002102:	2304      	movs	r3, #4
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002106:	f107 0314 	add.w	r3, r7, #20
 800210a:	4619      	mov	r1, r3
 800210c:	4813      	ldr	r0, [pc, #76]	; (800215c <HAL_I2C_MspInit+0xa4>)
 800210e:	f002 fbc5 	bl	800489c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002112:	4b11      	ldr	r3, [pc, #68]	; (8002158 <HAL_I2C_MspInit+0xa0>)
 8002114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002116:	4a10      	ldr	r2, [pc, #64]	; (8002158 <HAL_I2C_MspInit+0xa0>)
 8002118:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800211c:	6593      	str	r3, [r2, #88]	; 0x58
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <HAL_I2C_MspInit+0xa0>)
 8002120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002122:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2105      	movs	r1, #5
 800212e:	201f      	movs	r0, #31
 8002130:	f002 f9d4 	bl	80044dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002134:	201f      	movs	r0, #31
 8002136:	f002 f9ed 	bl	8004514 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2105      	movs	r1, #5
 800213e:	2020      	movs	r0, #32
 8002140:	f002 f9cc 	bl	80044dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002144:	2020      	movs	r0, #32
 8002146:	f002 f9e5 	bl	8004514 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800214a:	bf00      	nop
 800214c:	3728      	adds	r7, #40	; 0x28
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40005400 	.word	0x40005400
 8002158:	40021000 	.word	0x40021000
 800215c:	48000400 	.word	0x48000400

08002160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002164:	f000 fde4 	bl	8002d30 <HAL_Init>
  //uint8_t I2C_address = 0x80;
  //pca9685_init(&hi2c3, I2C_address);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002168:	f000 f818 	bl	800219c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800216c:	f7ff ff36 	bl	8001fdc <MX_GPIO_Init>
  MX_DMA_Init();
 8002170:	f7ff fecc 	bl	8001f0c <MX_DMA_Init>
  MX_I2C1_Init();
 8002174:	f7ff ff62 	bl	800203c <MX_I2C1_Init>
  MX_CAN1_Init();
 8002178:	f7ff fe3e 	bl	8001df8 <MX_CAN1_Init>
  MX_TIM1_Init();
 800217c:	f000 fa90 	bl	80026a0 <MX_TIM1_Init>
  MX_ADC1_Init();
 8002180:	f7ff fcc6 	bl	8001b10 <MX_ADC1_Init>
  MX_TIM15_Init();
 8002184:	f000 fb34 	bl	80027f0 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 8002188:	f000 fc46 	bl	8002a18 <MX_USART2_UART_Init>
*/

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800218c:	f006 fd66 	bl	8008c5c <osKernelInitialize>
  MX_FREERTOS_Init();
 8002190:	f7ff fee2 	bl	8001f58 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002194:	f006 fd86 	bl	8008ca4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002198:	e7fe      	b.n	8002198 <main+0x38>
	...

0800219c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b0ac      	sub	sp, #176	; 0xb0
 80021a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021a6:	2244      	movs	r2, #68	; 0x44
 80021a8:	2100      	movs	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f009 f9ee 	bl	800b58c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	2254      	movs	r2, #84	; 0x54
 80021c4:	2100      	movs	r1, #0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f009 f9e0 	bl	800b58c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80021cc:	f004 f83e 	bl	800624c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80021d0:	4b3d      	ldr	r3, [pc, #244]	; (80022c8 <SystemClock_Config+0x12c>)
 80021d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d6:	4a3c      	ldr	r2, [pc, #240]	; (80022c8 <SystemClock_Config+0x12c>)
 80021d8:	f023 0318 	bic.w	r3, r3, #24
 80021dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80021e0:	2314      	movs	r3, #20
 80021e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80021e4:	2301      	movs	r3, #1
 80021e6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80021e8:	2301      	movs	r3, #1
 80021ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 80021f4:	2390      	movs	r3, #144	; 0x90
 80021f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021fa:	2302      	movs	r3, #2
 80021fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002200:	2301      	movs	r3, #1
 8002202:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002206:	2305      	movs	r3, #5
 8002208:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 800220c:	2310      	movs	r3, #16
 800220e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002212:	2307      	movs	r3, #7
 8002214:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002218:	2302      	movs	r3, #2
 800221a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 800221e:	2306      	movs	r3, #6
 8002220:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002224:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002228:	4618      	mov	r0, r3
 800222a:	f004 f883 	bl	8006334 <HAL_RCC_OscConfig>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002234:	f000 f85c 	bl	80022f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002238:	230f      	movs	r3, #15
 800223a:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800223c:	2303      	movs	r3, #3
 800223e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8002240:	23a0      	movs	r3, #160	; 0xa0
 8002242:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8002244:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002248:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800224a:	2300      	movs	r3, #0
 800224c:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800224e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002252:	2100      	movs	r1, #0
 8002254:	4618      	mov	r0, r3
 8002256:	f004 fc8d 	bl	8006b74 <HAL_RCC_ClockConfig>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002260:	f000 f846 	bl	80022f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8002264:	f244 0342 	movw	r3, #16450	; 0x4042
 8002268:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800226a:	2304      	movs	r3, #4
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800226e:	2300      	movs	r3, #0
 8002270:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002272:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002276:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002278:	2301      	movs	r3, #1
 800227a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 800227c:	2305      	movs	r3, #5
 800227e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 14;
 8002280:	230e      	movs	r3, #14
 8002282:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002284:	2307      	movs	r3, #7
 8002286:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002288:	2302      	movs	r3, #2
 800228a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800228c:	2302      	movs	r3, #2
 800228e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002290:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002294:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002296:	1d3b      	adds	r3, r7, #4
 8002298:	4618      	mov	r0, r3
 800229a:	f004 fea1 	bl	8006fe0 <HAL_RCCEx_PeriphCLKConfig>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80022a4:	f000 f824 	bl	80022f0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80022a8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80022ac:	f003 ffec 	bl	8006288 <HAL_PWREx_ControlVoltageScaling>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <SystemClock_Config+0x11e>
  {
    Error_Handler();
 80022b6:	f000 f81b 	bl	80022f0 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80022ba:	f005 f885 	bl	80073c8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80022be:	bf00      	nop
 80022c0:	37b0      	adds	r7, #176	; 0xb0
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40021000 	.word	0x40021000

080022cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a04      	ldr	r2, [pc, #16]	; (80022ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d101      	bne.n	80022e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022de:	f000 fd3f 	bl	8002d60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40001000 	.word	0x40001000

080022f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  while (1)
 80022f4:	e7fe      	b.n	80022f4 <Error_Handler+0x4>
	...

080022f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <HAL_MspInit+0x4c>)
 8002300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002302:	4a10      	ldr	r2, [pc, #64]	; (8002344 <HAL_MspInit+0x4c>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6613      	str	r3, [r2, #96]	; 0x60
 800230a:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <HAL_MspInit+0x4c>)
 800230c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	607b      	str	r3, [r7, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_MspInit+0x4c>)
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231a:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <HAL_MspInit+0x4c>)
 800231c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002320:	6593      	str	r3, [r2, #88]	; 0x58
 8002322:	4b08      	ldr	r3, [pc, #32]	; (8002344 <HAL_MspInit+0x4c>)
 8002324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800232e:	2200      	movs	r2, #0
 8002330:	210f      	movs	r1, #15
 8002332:	f06f 0001 	mvn.w	r0, #1
 8002336:	f002 f8d1 	bl	80044dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40021000 	.word	0x40021000

08002348 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08c      	sub	sp, #48	; 0x30
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002358:	2200      	movs	r2, #0
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	2036      	movs	r0, #54	; 0x36
 800235e:	f002 f8bd 	bl	80044dc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002362:	2036      	movs	r0, #54	; 0x36
 8002364:	f002 f8d6 	bl	8004514 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002368:	4b1f      	ldr	r3, [pc, #124]	; (80023e8 <HAL_InitTick+0xa0>)
 800236a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236c:	4a1e      	ldr	r2, [pc, #120]	; (80023e8 <HAL_InitTick+0xa0>)
 800236e:	f043 0310 	orr.w	r3, r3, #16
 8002372:	6593      	str	r3, [r2, #88]	; 0x58
 8002374:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <HAL_InitTick+0xa0>)
 8002376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002378:	f003 0310 	and.w	r3, r3, #16
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002380:	f107 0210 	add.w	r2, r7, #16
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	4611      	mov	r1, r2
 800238a:	4618      	mov	r0, r3
 800238c:	f004 fd96 	bl	8006ebc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002390:	f004 fd68 	bl	8006e64 <HAL_RCC_GetPCLK1Freq>
 8002394:	4603      	mov	r3, r0
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800239a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239c:	4a13      	ldr	r2, [pc, #76]	; (80023ec <HAL_InitTick+0xa4>)
 800239e:	fba2 2303 	umull	r2, r3, r2, r3
 80023a2:	0c9b      	lsrs	r3, r3, #18
 80023a4:	3b01      	subs	r3, #1
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <HAL_InitTick+0xa8>)
 80023aa:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <HAL_InitTick+0xac>)
 80023ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <HAL_InitTick+0xa8>)
 80023b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023b4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80023b6:	4a0e      	ldr	r2, [pc, #56]	; (80023f0 <HAL_InitTick+0xa8>)
 80023b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <HAL_InitTick+0xa8>)
 80023be:	2200      	movs	r2, #0
 80023c0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c2:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <HAL_InitTick+0xa8>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80023c8:	4809      	ldr	r0, [pc, #36]	; (80023f0 <HAL_InitTick+0xa8>)
 80023ca:	f005 f8ff 	bl	80075cc <HAL_TIM_Base_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d104      	bne.n	80023de <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80023d4:	4806      	ldr	r0, [pc, #24]	; (80023f0 <HAL_InitTick+0xa8>)
 80023d6:	f005 f95b 	bl	8007690 <HAL_TIM_Base_Start_IT>
 80023da:	4603      	mov	r3, r0
 80023dc:	e000      	b.n	80023e0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3730      	adds	r7, #48	; 0x30
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000
 80023ec:	431bde83 	.word	0x431bde83
 80023f0:	2000870c 	.word	0x2000870c
 80023f4:	40001000 	.word	0x40001000

080023f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023fc:	e7fe      	b.n	80023fc <NMI_Handler+0x4>

080023fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002402:	e7fe      	b.n	8002402 <HardFault_Handler+0x4>

08002404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002408:	e7fe      	b.n	8002408 <MemManage_Handler+0x4>

0800240a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800240e:	e7fe      	b.n	800240e <BusFault_Handler+0x4>

08002410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002414:	e7fe      	b.n	8002414 <UsageFault_Handler+0x4>

08002416 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002428:	4802      	ldr	r0, [pc, #8]	; (8002434 <DMA1_Channel6_IRQHandler+0x10>)
 800242a:	f002 f97a 	bl	8004722 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	200087f0 	.word	0x200087f0

08002438 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800243c:	4802      	ldr	r0, [pc, #8]	; (8002448 <DMA1_Channel7_IRQHandler+0x10>)
 800243e:	f002 f970 	bl	8004722 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20008838 	.word	0x20008838

0800244c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002450:	4802      	ldr	r0, [pc, #8]	; (800245c <CAN1_TX_IRQHandler+0x10>)
 8002452:	f001 fd66 	bl	8003f22 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	2000868c 	.word	0x2000868c

08002460 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002464:	4802      	ldr	r0, [pc, #8]	; (8002470 <CAN1_RX0_IRQHandler+0x10>)
 8002466:	f001 fd5c 	bl	8003f22 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	2000868c 	.word	0x2000868c

08002474 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002478:	4802      	ldr	r0, [pc, #8]	; (8002484 <I2C1_EV_IRQHandler+0x10>)
 800247a:	f002 fefa 	bl	8005272 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	200086c0 	.word	0x200086c0

08002488 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800248c:	4802      	ldr	r0, [pc, #8]	; (8002498 <I2C1_ER_IRQHandler+0x10>)
 800248e:	f002 ff0a 	bl	80052a6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	200086c0 	.word	0x200086c0

0800249c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024a0:	4802      	ldr	r0, [pc, #8]	; (80024ac <TIM6_DAC_IRQHandler+0x10>)
 80024a2:	f005 f9a0 	bl	80077e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	2000870c 	.word	0x2000870c

080024b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
	return 1;
 80024b4:	2301      	movs	r3, #1
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <_kill>:

int _kill(int pid, int sig)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024ca:	f009 f81f 	bl	800b50c <__errno>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2216      	movs	r2, #22
 80024d2:	601a      	str	r2, [r3, #0]
	return -1;
 80024d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <_exit>:

void _exit (int status)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024e8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ffe7 	bl	80024c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80024f2:	e7fe      	b.n	80024f2 <_exit+0x12>

080024f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	e00a      	b.n	800251c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002506:	f3af 8000 	nop.w
 800250a:	4601      	mov	r1, r0
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	60ba      	str	r2, [r7, #8]
 8002512:	b2ca      	uxtb	r2, r1
 8002514:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	3301      	adds	r3, #1
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	429a      	cmp	r2, r3
 8002522:	dbf0      	blt.n	8002506 <_read+0x12>
	}

return len;
 8002524:	687b      	ldr	r3, [r7, #4]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b086      	sub	sp, #24
 8002532:	af00      	add	r7, sp, #0
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	e009      	b.n	8002554 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	60ba      	str	r2, [r7, #8]
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	3301      	adds	r3, #1
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	429a      	cmp	r2, r3
 800255a:	dbf1      	blt.n	8002540 <_write+0x12>
	}
	return len;
 800255c:	687b      	ldr	r3, [r7, #4]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <_close>:

int _close(int file)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
	return -1;
 800256e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800258e:	605a      	str	r2, [r3, #4]
	return 0;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <_isatty>:

int _isatty(int file)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
	return 1;
 80025a6:	2301      	movs	r3, #1
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
	return 0;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
	...

080025d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025d8:	4a14      	ldr	r2, [pc, #80]	; (800262c <_sbrk+0x5c>)
 80025da:	4b15      	ldr	r3, [pc, #84]	; (8002630 <_sbrk+0x60>)
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025e4:	4b13      	ldr	r3, [pc, #76]	; (8002634 <_sbrk+0x64>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d102      	bne.n	80025f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <_sbrk+0x64>)
 80025ee:	4a12      	ldr	r2, [pc, #72]	; (8002638 <_sbrk+0x68>)
 80025f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <_sbrk+0x64>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d207      	bcs.n	8002610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002600:	f008 ff84 	bl	800b50c <__errno>
 8002604:	4603      	mov	r3, r0
 8002606:	220c      	movs	r2, #12
 8002608:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800260a:	f04f 33ff 	mov.w	r3, #4294967295
 800260e:	e009      	b.n	8002624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002610:	4b08      	ldr	r3, [pc, #32]	; (8002634 <_sbrk+0x64>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002616:	4b07      	ldr	r3, [pc, #28]	; (8002634 <_sbrk+0x64>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	4a05      	ldr	r2, [pc, #20]	; (8002634 <_sbrk+0x64>)
 8002620:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002622:	68fb      	ldr	r3, [r7, #12]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20010000 	.word	0x20010000
 8002630:	00000400 	.word	0x00000400
 8002634:	20000334 	.word	0x20000334
 8002638:	20008958 	.word	0x20008958

0800263c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002640:	4b15      	ldr	r3, [pc, #84]	; (8002698 <SystemInit+0x5c>)
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002646:	4a14      	ldr	r2, [pc, #80]	; (8002698 <SystemInit+0x5c>)
 8002648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800264c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <SystemInit+0x60>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a11      	ldr	r2, [pc, #68]	; (800269c <SystemInit+0x60>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800265c:	4b0f      	ldr	r3, [pc, #60]	; (800269c <SystemInit+0x60>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002662:	4b0e      	ldr	r3, [pc, #56]	; (800269c <SystemInit+0x60>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a0d      	ldr	r2, [pc, #52]	; (800269c <SystemInit+0x60>)
 8002668:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800266c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002670:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002672:	4b0a      	ldr	r3, [pc, #40]	; (800269c <SystemInit+0x60>)
 8002674:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002678:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800267a:	4b08      	ldr	r3, [pc, #32]	; (800269c <SystemInit+0x60>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a07      	ldr	r2, [pc, #28]	; (800269c <SystemInit+0x60>)
 8002680:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002684:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002686:	4b05      	ldr	r3, [pc, #20]	; (800269c <SystemInit+0x60>)
 8002688:	2200      	movs	r2, #0
 800268a:	619a      	str	r2, [r3, #24]
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	e000ed00 	.word	0xe000ed00
 800269c:	40021000 	.word	0x40021000

080026a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b096      	sub	sp, #88	; 0x58
 80026a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	605a      	str	r2, [r3, #4]
 80026b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	609a      	str	r2, [r3, #8]
 80026be:	60da      	str	r2, [r3, #12]
 80026c0:	611a      	str	r2, [r3, #16]
 80026c2:	615a      	str	r2, [r3, #20]
 80026c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026c6:	1d3b      	adds	r3, r7, #4
 80026c8:	222c      	movs	r2, #44	; 0x2c
 80026ca:	2100      	movs	r1, #0
 80026cc:	4618      	mov	r0, r3
 80026ce:	f008 ff5d 	bl	800b58c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026d2:	4b45      	ldr	r3, [pc, #276]	; (80027e8 <MX_TIM1_Init+0x148>)
 80026d4:	4a45      	ldr	r2, [pc, #276]	; (80027ec <MX_TIM1_Init+0x14c>)
 80026d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80026d8:	4b43      	ldr	r3, [pc, #268]	; (80027e8 <MX_TIM1_Init+0x148>)
 80026da:	2200      	movs	r2, #0
 80026dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026de:	4b42      	ldr	r3, [pc, #264]	; (80027e8 <MX_TIM1_Init+0x148>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80026e4:	4b40      	ldr	r3, [pc, #256]	; (80027e8 <MX_TIM1_Init+0x148>)
 80026e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ec:	4b3e      	ldr	r3, [pc, #248]	; (80027e8 <MX_TIM1_Init+0x148>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026f2:	4b3d      	ldr	r3, [pc, #244]	; (80027e8 <MX_TIM1_Init+0x148>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026f8:	4b3b      	ldr	r3, [pc, #236]	; (80027e8 <MX_TIM1_Init+0x148>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80026fe:	483a      	ldr	r0, [pc, #232]	; (80027e8 <MX_TIM1_Init+0x148>)
 8002700:	f005 f81a 	bl	8007738 <HAL_TIM_PWM_Init>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800270a:	f7ff fdf1 	bl	80022f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800270e:	2300      	movs	r3, #0
 8002710:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002712:	2300      	movs	r3, #0
 8002714:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002716:	2300      	movs	r3, #0
 8002718:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800271a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800271e:	4619      	mov	r1, r3
 8002720:	4831      	ldr	r0, [pc, #196]	; (80027e8 <MX_TIM1_Init+0x148>)
 8002722:	f005 fd99 	bl	8008258 <HAL_TIMEx_MasterConfigSynchronization>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800272c:	f7ff fde0 	bl	80022f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002730:	2360      	movs	r3, #96	; 0x60
 8002732:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002738:	2300      	movs	r3, #0
 800273a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800273c:	2300      	movs	r3, #0
 800273e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002740:	2300      	movs	r3, #0
 8002742:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002744:	2300      	movs	r3, #0
 8002746:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002748:	2300      	movs	r3, #0
 800274a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800274c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002750:	2200      	movs	r2, #0
 8002752:	4619      	mov	r1, r3
 8002754:	4824      	ldr	r0, [pc, #144]	; (80027e8 <MX_TIM1_Init+0x148>)
 8002756:	f005 f965 	bl	8007a24 <HAL_TIM_PWM_ConfigChannel>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002760:	f7ff fdc6 	bl	80022f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002764:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002768:	2204      	movs	r2, #4
 800276a:	4619      	mov	r1, r3
 800276c:	481e      	ldr	r0, [pc, #120]	; (80027e8 <MX_TIM1_Init+0x148>)
 800276e:	f005 f959 	bl	8007a24 <HAL_TIM_PWM_ConfigChannel>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8002778:	f7ff fdba 	bl	80022f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800277c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002780:	2208      	movs	r2, #8
 8002782:	4619      	mov	r1, r3
 8002784:	4818      	ldr	r0, [pc, #96]	; (80027e8 <MX_TIM1_Init+0x148>)
 8002786:	f005 f94d 	bl	8007a24 <HAL_TIM_PWM_ConfigChannel>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8002790:	f7ff fdae 	bl	80022f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002794:	2300      	movs	r3, #0
 8002796:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002798:	2300      	movs	r3, #0
 800279a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80027a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80027b2:	2300      	movs	r3, #0
 80027b4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80027b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80027c4:	1d3b      	adds	r3, r7, #4
 80027c6:	4619      	mov	r1, r3
 80027c8:	4807      	ldr	r0, [pc, #28]	; (80027e8 <MX_TIM1_Init+0x148>)
 80027ca:	f005 fdab 	bl	8008324 <HAL_TIMEx_ConfigBreakDeadTime>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80027d4:	f7ff fd8c 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80027d8:	4803      	ldr	r0, [pc, #12]	; (80027e8 <MX_TIM1_Init+0x148>)
 80027da:	f000 f8c1 	bl	8002960 <HAL_TIM_MspPostInit>

}
 80027de:	bf00      	nop
 80027e0:	3758      	adds	r7, #88	; 0x58
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	200087a4 	.word	0x200087a4
 80027ec:	40012c00 	.word	0x40012c00

080027f0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b096      	sub	sp, #88	; 0x58
 80027f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	605a      	str	r2, [r3, #4]
 8002800:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002802:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	609a      	str	r2, [r3, #8]
 800280e:	60da      	str	r2, [r3, #12]
 8002810:	611a      	str	r2, [r3, #16]
 8002812:	615a      	str	r2, [r3, #20]
 8002814:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	222c      	movs	r2, #44	; 0x2c
 800281a:	2100      	movs	r1, #0
 800281c:	4618      	mov	r0, r3
 800281e:	f008 feb5 	bl	800b58c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002822:	4b33      	ldr	r3, [pc, #204]	; (80028f0 <MX_TIM15_Init+0x100>)
 8002824:	4a33      	ldr	r2, [pc, #204]	; (80028f4 <MX_TIM15_Init+0x104>)
 8002826:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002828:	4b31      	ldr	r3, [pc, #196]	; (80028f0 <MX_TIM15_Init+0x100>)
 800282a:	2200      	movs	r2, #0
 800282c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800282e:	4b30      	ldr	r3, [pc, #192]	; (80028f0 <MX_TIM15_Init+0x100>)
 8002830:	2200      	movs	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002834:	4b2e      	ldr	r3, [pc, #184]	; (80028f0 <MX_TIM15_Init+0x100>)
 8002836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800283a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800283c:	4b2c      	ldr	r3, [pc, #176]	; (80028f0 <MX_TIM15_Init+0x100>)
 800283e:	2200      	movs	r2, #0
 8002840:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002842:	4b2b      	ldr	r3, [pc, #172]	; (80028f0 <MX_TIM15_Init+0x100>)
 8002844:	2200      	movs	r2, #0
 8002846:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002848:	4b29      	ldr	r3, [pc, #164]	; (80028f0 <MX_TIM15_Init+0x100>)
 800284a:	2200      	movs	r2, #0
 800284c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800284e:	4828      	ldr	r0, [pc, #160]	; (80028f0 <MX_TIM15_Init+0x100>)
 8002850:	f004 ff72 	bl	8007738 <HAL_TIM_PWM_Init>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800285a:	f7ff fd49 	bl	80022f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800285e:	2300      	movs	r3, #0
 8002860:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002862:	2300      	movs	r3, #0
 8002864:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002866:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800286a:	4619      	mov	r1, r3
 800286c:	4820      	ldr	r0, [pc, #128]	; (80028f0 <MX_TIM15_Init+0x100>)
 800286e:	f005 fcf3 	bl	8008258 <HAL_TIMEx_MasterConfigSynchronization>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8002878:	f7ff fd3a 	bl	80022f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800287c:	2360      	movs	r3, #96	; 0x60
 800287e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002884:	2300      	movs	r3, #0
 8002886:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002888:	2300      	movs	r3, #0
 800288a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800288c:	2300      	movs	r3, #0
 800288e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002890:	2300      	movs	r3, #0
 8002892:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002894:	2300      	movs	r3, #0
 8002896:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002898:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800289c:	2204      	movs	r2, #4
 800289e:	4619      	mov	r1, r3
 80028a0:	4813      	ldr	r0, [pc, #76]	; (80028f0 <MX_TIM15_Init+0x100>)
 80028a2:	f005 f8bf 	bl	8007a24 <HAL_TIM_PWM_ConfigChannel>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80028ac:	f7ff fd20 	bl	80022f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028b0:	2300      	movs	r3, #0
 80028b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028b4:	2300      	movs	r3, #0
 80028b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028b8:	2300      	movs	r3, #0
 80028ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028ca:	2300      	movs	r3, #0
 80028cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80028ce:	1d3b      	adds	r3, r7, #4
 80028d0:	4619      	mov	r1, r3
 80028d2:	4807      	ldr	r0, [pc, #28]	; (80028f0 <MX_TIM15_Init+0x100>)
 80028d4:	f005 fd26 	bl	8008324 <HAL_TIMEx_ConfigBreakDeadTime>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 80028de:	f7ff fd07 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80028e2:	4803      	ldr	r0, [pc, #12]	; (80028f0 <MX_TIM15_Init+0x100>)
 80028e4:	f000 f83c 	bl	8002960 <HAL_TIM_MspPostInit>

}
 80028e8:	bf00      	nop
 80028ea:	3758      	adds	r7, #88	; 0x58
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20008758 	.word	0x20008758
 80028f4:	40014000 	.word	0x40014000

080028f8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a13      	ldr	r2, [pc, #76]	; (8002954 <HAL_TIM_PWM_MspInit+0x5c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d10c      	bne.n	8002924 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800290a:	4b13      	ldr	r3, [pc, #76]	; (8002958 <HAL_TIM_PWM_MspInit+0x60>)
 800290c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800290e:	4a12      	ldr	r2, [pc, #72]	; (8002958 <HAL_TIM_PWM_MspInit+0x60>)
 8002910:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002914:	6613      	str	r3, [r2, #96]	; 0x60
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <HAL_TIM_PWM_MspInit+0x60>)
 8002918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800291a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002922:	e010      	b.n	8002946 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM15)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a0c      	ldr	r2, [pc, #48]	; (800295c <HAL_TIM_PWM_MspInit+0x64>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d10b      	bne.n	8002946 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <HAL_TIM_PWM_MspInit+0x60>)
 8002930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002932:	4a09      	ldr	r2, [pc, #36]	; (8002958 <HAL_TIM_PWM_MspInit+0x60>)
 8002934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002938:	6613      	str	r3, [r2, #96]	; 0x60
 800293a:	4b07      	ldr	r3, [pc, #28]	; (8002958 <HAL_TIM_PWM_MspInit+0x60>)
 800293c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800293e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]
}
 8002946:	bf00      	nop
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40012c00 	.word	0x40012c00
 8002958:	40021000 	.word	0x40021000
 800295c:	40014000 	.word	0x40014000

08002960 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08a      	sub	sp, #40	; 0x28
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002968:	f107 0314 	add.w	r3, r7, #20
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	60da      	str	r2, [r3, #12]
 8002976:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a23      	ldr	r2, [pc, #140]	; (8002a0c <HAL_TIM_MspPostInit+0xac>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d11e      	bne.n	80029c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002982:	4b23      	ldr	r3, [pc, #140]	; (8002a10 <HAL_TIM_MspPostInit+0xb0>)
 8002984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002986:	4a22      	ldr	r2, [pc, #136]	; (8002a10 <HAL_TIM_MspPostInit+0xb0>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800298e:	4b20      	ldr	r3, [pc, #128]	; (8002a10 <HAL_TIM_MspPostInit+0xb0>)
 8002990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800299a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800299e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a0:	2302      	movs	r3, #2
 80029a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a8:	2300      	movs	r3, #0
 80029aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029ac:	2301      	movs	r3, #1
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	4619      	mov	r1, r3
 80029b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ba:	f001 ff6f 	bl	800489c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80029be:	e021      	b.n	8002a04 <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM15)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a13      	ldr	r2, [pc, #76]	; (8002a14 <HAL_TIM_MspPostInit+0xb4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d11c      	bne.n	8002a04 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ca:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <HAL_TIM_MspPostInit+0xb0>)
 80029cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ce:	4a10      	ldr	r2, [pc, #64]	; (8002a10 <HAL_TIM_MspPostInit+0xb0>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029d6:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <HAL_TIM_MspPostInit+0xb0>)
 80029d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029e2:	2308      	movs	r3, #8
 80029e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e6:	2302      	movs	r3, #2
 80029e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ee:	2300      	movs	r3, #0
 80029f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80029f2:	230e      	movs	r3, #14
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f6:	f107 0314 	add.w	r3, r7, #20
 80029fa:	4619      	mov	r1, r3
 80029fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a00:	f001 ff4c 	bl	800489c <HAL_GPIO_Init>
}
 8002a04:	bf00      	nop
 8002a06:	3728      	adds	r7, #40	; 0x28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40012c00 	.word	0x40012c00
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40014000 	.word	0x40014000

08002a18 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a1c:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <MX_USART2_UART_Init+0x58>)
 8002a1e:	4a15      	ldr	r2, [pc, #84]	; (8002a74 <MX_USART2_UART_Init+0x5c>)
 8002a20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a22:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <MX_USART2_UART_Init+0x58>)
 8002a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a2a:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <MX_USART2_UART_Init+0x58>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a30:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <MX_USART2_UART_Init+0x58>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a36:	4b0e      	ldr	r3, [pc, #56]	; (8002a70 <MX_USART2_UART_Init+0x58>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <MX_USART2_UART_Init+0x58>)
 8002a3e:	220c      	movs	r2, #12
 8002a40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a42:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <MX_USART2_UART_Init+0x58>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a48:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <MX_USART2_UART_Init+0x58>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a4e:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <MX_USART2_UART_Init+0x58>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <MX_USART2_UART_Init+0x58>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a5a:	4805      	ldr	r0, [pc, #20]	; (8002a70 <MX_USART2_UART_Init+0x58>)
 8002a5c:	f005 fcf8 	bl	8008450 <HAL_UART_Init>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002a66:	f7ff fc43 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20008880 	.word	0x20008880
 8002a74:	40004400 	.word	0x40004400

08002a78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08a      	sub	sp, #40	; 0x28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a80:	f107 0314 	add.w	r3, r7, #20
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	60da      	str	r2, [r3, #12]
 8002a8e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a4a      	ldr	r2, [pc, #296]	; (8002bc0 <HAL_UART_MspInit+0x148>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	f040 808d 	bne.w	8002bb6 <HAL_UART_MspInit+0x13e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a9c:	4b49      	ldr	r3, [pc, #292]	; (8002bc4 <HAL_UART_MspInit+0x14c>)
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa0:	4a48      	ldr	r2, [pc, #288]	; (8002bc4 <HAL_UART_MspInit+0x14c>)
 8002aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa6:	6593      	str	r3, [r2, #88]	; 0x58
 8002aa8:	4b46      	ldr	r3, [pc, #280]	; (8002bc4 <HAL_UART_MspInit+0x14c>)
 8002aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab4:	4b43      	ldr	r3, [pc, #268]	; (8002bc4 <HAL_UART_MspInit+0x14c>)
 8002ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab8:	4a42      	ldr	r2, [pc, #264]	; (8002bc4 <HAL_UART_MspInit+0x14c>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ac0:	4b40      	ldr	r3, [pc, #256]	; (8002bc4 <HAL_UART_MspInit+0x14c>)
 8002ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002acc:	2304      	movs	r3, #4
 8002ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002adc:	2307      	movs	r3, #7
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae0:	f107 0314 	add.w	r3, r7, #20
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aea:	f001 fed7 	bl	800489c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af4:	2302      	movs	r3, #2
 8002af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002afc:	2303      	movs	r3, #3
 8002afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002b00:	2303      	movs	r3, #3
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b04:	f107 0314 	add.w	r3, r7, #20
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b0e:	f001 fec5 	bl	800489c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002b12:	4b2d      	ldr	r3, [pc, #180]	; (8002bc8 <HAL_UART_MspInit+0x150>)
 8002b14:	4a2d      	ldr	r2, [pc, #180]	; (8002bcc <HAL_UART_MspInit+0x154>)
 8002b16:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002b18:	4b2b      	ldr	r3, [pc, #172]	; (8002bc8 <HAL_UART_MspInit+0x150>)
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b1e:	4b2a      	ldr	r3, [pc, #168]	; (8002bc8 <HAL_UART_MspInit+0x150>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b24:	4b28      	ldr	r3, [pc, #160]	; (8002bc8 <HAL_UART_MspInit+0x150>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b2a:	4b27      	ldr	r3, [pc, #156]	; (8002bc8 <HAL_UART_MspInit+0x150>)
 8002b2c:	2280      	movs	r2, #128	; 0x80
 8002b2e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b30:	4b25      	ldr	r3, [pc, #148]	; (8002bc8 <HAL_UART_MspInit+0x150>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b36:	4b24      	ldr	r3, [pc, #144]	; (8002bc8 <HAL_UART_MspInit+0x150>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002b3c:	4b22      	ldr	r3, [pc, #136]	; (8002bc8 <HAL_UART_MspInit+0x150>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b42:	4b21      	ldr	r3, [pc, #132]	; (8002bc8 <HAL_UART_MspInit+0x150>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002b48:	481f      	ldr	r0, [pc, #124]	; (8002bc8 <HAL_UART_MspInit+0x150>)
 8002b4a:	f001 fcf1 	bl	8004530 <HAL_DMA_Init>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 8002b54:	f7ff fbcc 	bl	80022f0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a1b      	ldr	r2, [pc, #108]	; (8002bc8 <HAL_UART_MspInit+0x150>)
 8002b5c:	671a      	str	r2, [r3, #112]	; 0x70
 8002b5e:	4a1a      	ldr	r2, [pc, #104]	; (8002bc8 <HAL_UART_MspInit+0x150>)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002b64:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <HAL_UART_MspInit+0x158>)
 8002b66:	4a1b      	ldr	r2, [pc, #108]	; (8002bd4 <HAL_UART_MspInit+0x15c>)
 8002b68:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8002b6a:	4b19      	ldr	r3, [pc, #100]	; (8002bd0 <HAL_UART_MspInit+0x158>)
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b70:	4b17      	ldr	r3, [pc, #92]	; (8002bd0 <HAL_UART_MspInit+0x158>)
 8002b72:	2210      	movs	r2, #16
 8002b74:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b76:	4b16      	ldr	r3, [pc, #88]	; (8002bd0 <HAL_UART_MspInit+0x158>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b7c:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <HAL_UART_MspInit+0x158>)
 8002b7e:	2280      	movs	r2, #128	; 0x80
 8002b80:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b82:	4b13      	ldr	r3, [pc, #76]	; (8002bd0 <HAL_UART_MspInit+0x158>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b88:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <HAL_UART_MspInit+0x158>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002b8e:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <HAL_UART_MspInit+0x158>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b94:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <HAL_UART_MspInit+0x158>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002b9a:	480d      	ldr	r0, [pc, #52]	; (8002bd0 <HAL_UART_MspInit+0x158>)
 8002b9c:	f001 fcc8 	bl	8004530 <HAL_DMA_Init>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 8002ba6:	f7ff fba3 	bl	80022f0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a08      	ldr	r2, [pc, #32]	; (8002bd0 <HAL_UART_MspInit+0x158>)
 8002bae:	66da      	str	r2, [r3, #108]	; 0x6c
 8002bb0:	4a07      	ldr	r2, [pc, #28]	; (8002bd0 <HAL_UART_MspInit+0x158>)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002bb6:	bf00      	nop
 8002bb8:	3728      	adds	r7, #40	; 0x28
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40004400 	.word	0x40004400
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	200087f0 	.word	0x200087f0
 8002bcc:	4002006c 	.word	0x4002006c
 8002bd0:	20008838 	.word	0x20008838
 8002bd4:	40020080 	.word	0x40020080

08002bd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002bdc:	f7ff fd2e 	bl	800263c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002be0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002be2:	e003      	b.n	8002bec <LoopCopyDataInit>

08002be4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002be6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002be8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002bea:	3104      	adds	r1, #4

08002bec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002bec:	480a      	ldr	r0, [pc, #40]	; (8002c18 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002bee:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002bf0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002bf2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002bf4:	d3f6      	bcc.n	8002be4 <CopyDataInit>
	ldr	r2, =_sbss
 8002bf6:	4a0a      	ldr	r2, [pc, #40]	; (8002c20 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002bf8:	e002      	b.n	8002c00 <LoopFillZerobss>

08002bfa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002bfa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002bfc:	f842 3b04 	str.w	r3, [r2], #4

08002c00 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002c00:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <LoopForever+0x16>)
	cmp	r2, r3
 8002c02:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002c04:	d3f9      	bcc.n	8002bfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c06:	f008 fc87 	bl	800b518 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c0a:	f7ff faa9 	bl	8002160 <main>

08002c0e <LoopForever>:

LoopForever:
    b LoopForever
 8002c0e:	e7fe      	b.n	8002c0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c10:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002c14:	0800e41c 	.word	0x0800e41c
	ldr	r0, =_sdata
 8002c18:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002c1c:	20000314 	.word	0x20000314
	ldr	r2, =_sbss
 8002c20:	20000314 	.word	0x20000314
	ldr	r3, = _ebss
 8002c24:	20008958 	.word	0x20008958

08002c28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c28:	e7fe      	b.n	8002c28 <ADC1_IRQHandler>
	...

08002c2c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* \brief 	Cube MX callbacks for Fifo0 and Fifo1
 * \details It is assumed that only one CANmodule is (CO->CANmodule[0]) is used.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
	if(RxFifo_Callback_CanModule_p != NULL)
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d004      	beq.n	8002c46 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	{
		CO_CANinterrupt_Rx(RxFifo_Callback_CanModule_p);
 8002c3c:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 f81b 	bl	8002c7c <CO_CANinterrupt_Rx>
		 *but for some reason interrupts get activated as soon as HAL_NVIC_EnableIRQ is called.
		 *According to Cube CAN docs HAL_CAN_ActivateNotification should be executed to
		 *activate callbacks.
		 */
	}
}
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20000338 	.word	0x20000338

08002c54 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
	if(RxFifo_Callback_CanModule_p != NULL)
 8002c5c:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d004      	beq.n	8002c6e <HAL_CAN_RxFifo1MsgPendingCallback+0x1a>
	{
		CO_CANinterrupt_Rx(RxFifo_Callback_CanModule_p);
 8002c64:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 f807 	bl	8002c7c <CO_CANinterrupt_Rx>
	}
	else
	{
		;//TODO add assert here
	}
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000338 	.word	0x20000338

08002c7c <CO_CANinterrupt_Rx>:
}

/*Interrupt handlers*/
/******************************************************************************/
void CO_CANinterrupt_Rx(const CO_CANmodule_t *CANmodule)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
	/* receive interrupt */

	static CO_CANrxMsg_t CANmessage;
	bool_t msgMatched = false;
 8002c84:	2300      	movs	r3, #0
 8002c86:	75fb      	strb	r3, [r7, #23]
	CO_CANrx_t *MsgBuff = CANmodule->rxArray; /* receive message buffer from CO_CANmodule_t object. */
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	613b      	str	r3, [r7, #16]
	HAL_CAN_GetRxMessage(CANmodule->CANbaseAddress, CAN_RX_FIFO0, &CANmessage.RxHeader, &CANmessage.data[0]);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	4b25      	ldr	r3, [pc, #148]	; (8002d28 <CO_CANinterrupt_Rx+0xac>)
 8002c94:	4a25      	ldr	r2, [pc, #148]	; (8002d2c <CO_CANinterrupt_Rx+0xb0>)
 8002c96:	2100      	movs	r1, #0
 8002c98:	f001 f831 	bl	8003cfe <HAL_CAN_GetRxMessage>

	/*dirty hack, consider change to a pointer here*/
	CANmessage.DLC = (uint8_t)CANmessage.RxHeader.DLC;
 8002c9c:	4b23      	ldr	r3, [pc, #140]	; (8002d2c <CO_CANinterrupt_Rx+0xb0>)
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	4b22      	ldr	r3, [pc, #136]	; (8002d2c <CO_CANinterrupt_Rx+0xb0>)
 8002ca4:	f883 2020 	strb.w	r2, [r3, #32]
	CANmessage.ident = CANmessage.RxHeader.StdId;
 8002ca8:	4b20      	ldr	r3, [pc, #128]	; (8002d2c <CO_CANinterrupt_Rx+0xb0>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a1f      	ldr	r2, [pc, #124]	; (8002d2c <CO_CANinterrupt_Rx+0xb0>)
 8002cae:	61d3      	str	r3, [r2, #28]

	uint32_t index;
	/* Search rxArray form CANmodule for the same CAN-ID. */
	for (index = 0; index < CANmodule->rxSize; index++)
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	e01d      	b.n	8002cf2 <CO_CANinterrupt_Rx+0x76>
	{
		uint16_t msg = (((uint16_t)(CANmessage.RxHeader.StdId << 2)) | (uint16_t)(CANmessage.RxHeader.RTR));
 8002cb6:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <CO_CANinterrupt_Rx+0xb0>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <CO_CANinterrupt_Rx+0xb0>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	817b      	strh	r3, [r7, #10]
		if (((msg ^ MsgBuff->ident) & MsgBuff->mask) == 0)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	881a      	ldrh	r2, [r3, #0]
 8002cce:	897b      	ldrh	r3, [r7, #10]
 8002cd0:	4053      	eors	r3, r2
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	885b      	ldrh	r3, [r3, #2]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d102      	bne.n	8002ce6 <CO_CANinterrupt_Rx+0x6a>
		{
			msgMatched = true;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	75fb      	strb	r3, [r7, #23]
			break;
 8002ce4:	e00b      	b.n	8002cfe <CO_CANinterrupt_Rx+0x82>
		}
		MsgBuff++;
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	330c      	adds	r3, #12
 8002cea:	613b      	str	r3, [r7, #16]
	for (index = 0; index < CANmodule->rxSize; index++)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	891b      	ldrh	r3, [r3, #8]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d3db      	bcc.n	8002cb6 <CO_CANinterrupt_Rx+0x3a>
	}

	/* Call specific function, which will process the message */
	if(msgMatched && (MsgBuff != NULL) && (MsgBuff->pFunct != NULL))
 8002cfe:	7dfb      	ldrb	r3, [r7, #23]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00d      	beq.n	8002d20 <CO_CANinterrupt_Rx+0xa4>
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <CO_CANinterrupt_Rx+0xa4>
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d006      	beq.n	8002d20 <CO_CANinterrupt_Rx+0xa4>
	{
		MsgBuff->pFunct(MsgBuff->object, &CANmessage);
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	6852      	ldr	r2, [r2, #4]
 8002d1a:	4904      	ldr	r1, [pc, #16]	; (8002d2c <CO_CANinterrupt_Rx+0xb0>)
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	4798      	blx	r3
	//                buffer++;
	//            }
	//        }

	/*CubeMx HAL is responsible for clearing interrupt flags and all the dirty work. */
}
 8002d20:	bf00      	nop
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	2000035d 	.word	0x2000035d
 8002d2c:	2000033c 	.word	0x2000033c

08002d30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d3a:	2003      	movs	r0, #3
 8002d3c:	f001 fbc3 	bl	80044c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d40:	2000      	movs	r0, #0
 8002d42:	f7ff fb01 	bl	8002348 <HAL_InitTick>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	71fb      	strb	r3, [r7, #7]
 8002d50:	e001      	b.n	8002d56 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d52:	f7ff fad1 	bl	80022f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d56:	79fb      	ldrb	r3, [r7, #7]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_IncTick+0x20>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_IncTick+0x24>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4413      	add	r3, r2
 8002d70:	4a04      	ldr	r2, [pc, #16]	; (8002d84 <HAL_IncTick+0x24>)
 8002d72:	6013      	str	r3, [r2, #0]
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	20000138 	.word	0x20000138
 8002d84:	20008904 	.word	0x20008904

08002d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d8c:	4b03      	ldr	r3, [pc, #12]	; (8002d9c <HAL_GetTick+0x14>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	20008904 	.word	0x20008904

08002da0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	609a      	str	r2, [r3, #8]
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	609a      	str	r2, [r3, #8]
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b087      	sub	sp, #28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	3360      	adds	r3, #96	; 0x60
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4b08      	ldr	r3, [pc, #32]	; (8002e4c <LL_ADC_SetOffset+0x44>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002e40:	bf00      	nop
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	03fff000 	.word	0x03fff000

08002e50 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3360      	adds	r3, #96	; 0x60
 8002e5e:	461a      	mov	r2, r3
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	3360      	adds	r3, #96	; 0x60
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002ea6:	bf00      	nop
 8002ea8:	371c      	adds	r7, #28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b087      	sub	sp, #28
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	3330      	adds	r3, #48	; 0x30
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	0a1b      	lsrs	r3, r3, #8
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	4413      	add	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	211f      	movs	r1, #31
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	401a      	ands	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	0e9b      	lsrs	r3, r3, #26
 8002eea:	f003 011f 	and.w	r1, r3, #31
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002efe:	bf00      	nop
 8002f00:	371c      	adds	r7, #28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b087      	sub	sp, #28
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	3314      	adds	r3, #20
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	0e5b      	lsrs	r3, r3, #25
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	4413      	add	r3, r2
 8002f28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	0d1b      	lsrs	r3, r3, #20
 8002f32:	f003 031f 	and.w	r3, r3, #31
 8002f36:	2107      	movs	r1, #7
 8002f38:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	401a      	ands	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	0d1b      	lsrs	r3, r3, #20
 8002f44:	f003 031f 	and.w	r3, r3, #31
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f54:	bf00      	nop
 8002f56:	371c      	adds	r7, #28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	401a      	ands	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f003 0318 	and.w	r3, r3, #24
 8002f82:	4908      	ldr	r1, [pc, #32]	; (8002fa4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f84:	40d9      	lsrs	r1, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	400b      	ands	r3, r1
 8002f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002f96:	bf00      	nop
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	0007ffff 	.word	0x0007ffff

08002fa8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002fb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6093      	str	r3, [r2, #8]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fe0:	d101      	bne.n	8002fe6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003004:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003008:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003030:	d101      	bne.n	8003036 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <LL_ADC_IsEnabled+0x18>
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <LL_ADC_IsEnabled+0x1a>
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	2b04      	cmp	r3, #4
 800307c:	d101      	bne.n	8003082 <LL_ADC_REG_IsConversionOngoing+0x18>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d101      	bne.n	80030a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80030a4:	2301      	movs	r3, #1
 80030a6:	e000      	b.n	80030aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
	...

080030b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b088      	sub	sp, #32
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e12c      	b.n	800332c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d109      	bne.n	80030f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7fe fd79 	bl	8001bd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff ff67 	bl	8002fcc <LL_ADC_IsDeepPowerDownEnabled>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d004      	beq.n	800310e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff ff4d 	bl	8002fa8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff ff82 	bl	800301c <LL_ADC_IsInternalRegulatorEnabled>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d115      	bne.n	800314a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff ff66 	bl	8002ff4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003128:	4b82      	ldr	r3, [pc, #520]	; (8003334 <HAL_ADC_Init+0x27c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	099b      	lsrs	r3, r3, #6
 800312e:	4a82      	ldr	r2, [pc, #520]	; (8003338 <HAL_ADC_Init+0x280>)
 8003130:	fba2 2303 	umull	r2, r3, r2, r3
 8003134:	099b      	lsrs	r3, r3, #6
 8003136:	3301      	adds	r3, #1
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800313c:	e002      	b.n	8003144 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	3b01      	subs	r3, #1
 8003142:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f9      	bne.n	800313e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff ff64 	bl	800301c <LL_ADC_IsInternalRegulatorEnabled>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10d      	bne.n	8003176 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315e:	f043 0210 	orr.w	r2, r3, #16
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316a:	f043 0201 	orr.w	r2, r3, #1
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff ff75 	bl	800306a <LL_ADC_REG_IsConversionOngoing>
 8003180:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003186:	f003 0310 	and.w	r3, r3, #16
 800318a:	2b00      	cmp	r3, #0
 800318c:	f040 80c5 	bne.w	800331a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	f040 80c1 	bne.w	800331a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80031a0:	f043 0202 	orr.w	r2, r3, #2
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff ff49 	bl	8003044 <LL_ADC_IsEnabled>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10b      	bne.n	80031d0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031b8:	4860      	ldr	r0, [pc, #384]	; (800333c <HAL_ADC_Init+0x284>)
 80031ba:	f7ff ff43 	bl	8003044 <LL_ADC_IsEnabled>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d105      	bne.n	80031d0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	4619      	mov	r1, r3
 80031ca:	485d      	ldr	r0, [pc, #372]	; (8003340 <HAL_ADC_Init+0x288>)
 80031cc:	f7ff fde8 	bl	8002da0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	7e5b      	ldrb	r3, [r3, #25]
 80031d4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031da:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80031e0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80031e6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031ee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d106      	bne.n	800320c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	3b01      	subs	r3, #1
 8003204:	045b      	lsls	r3, r3, #17
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4313      	orrs	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003210:	2b00      	cmp	r3, #0
 8003212:	d009      	beq.n	8003228 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4313      	orrs	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	4b45      	ldr	r3, [pc, #276]	; (8003344 <HAL_ADC_Init+0x28c>)
 8003230:	4013      	ands	r3, r2
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6812      	ldr	r2, [r2, #0]
 8003236:	69b9      	ldr	r1, [r7, #24]
 8003238:	430b      	orrs	r3, r1
 800323a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff ff12 	bl	800306a <LL_ADC_REG_IsConversionOngoing>
 8003246:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff ff1f 	bl	8003090 <LL_ADC_INJ_IsConversionOngoing>
 8003252:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d13d      	bne.n	80032d6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d13a      	bne.n	80032d6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003264:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800326c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800327c:	f023 0302 	bic.w	r3, r3, #2
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	69b9      	ldr	r1, [r7, #24]
 8003286:	430b      	orrs	r3, r1
 8003288:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003290:	2b01      	cmp	r3, #1
 8003292:	d118      	bne.n	80032c6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800329e:	f023 0304 	bic.w	r3, r3, #4
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032aa:	4311      	orrs	r1, r2
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80032b0:	4311      	orrs	r1, r2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80032b6:	430a      	orrs	r2, r1
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0201 	orr.w	r2, r2, #1
 80032c2:	611a      	str	r2, [r3, #16]
 80032c4:	e007      	b.n	80032d6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0201 	bic.w	r2, r2, #1
 80032d4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d10c      	bne.n	80032f8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	f023 010f 	bic.w	r1, r3, #15
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	1e5a      	subs	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	631a      	str	r2, [r3, #48]	; 0x30
 80032f6:	e007      	b.n	8003308 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 020f 	bic.w	r2, r2, #15
 8003306:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330c:	f023 0303 	bic.w	r3, r3, #3
 8003310:	f043 0201 	orr.w	r2, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	655a      	str	r2, [r3, #84]	; 0x54
 8003318:	e007      	b.n	800332a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331e:	f043 0210 	orr.w	r2, r3, #16
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800332a:	7ffb      	ldrb	r3, [r7, #31]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3720      	adds	r7, #32
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	20000130 	.word	0x20000130
 8003338:	053e2d63 	.word	0x053e2d63
 800333c:	50040000 	.word	0x50040000
 8003340:	50040300 	.word	0x50040300
 8003344:	fff0c007 	.word	0xfff0c007

08003348 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b0b6      	sub	sp, #216	; 0xd8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003358:	2300      	movs	r3, #0
 800335a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_ADC_ConfigChannel+0x22>
 8003366:	2302      	movs	r3, #2
 8003368:	e3b9      	b.n	8003ade <HAL_ADC_ConfigChannel+0x796>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff fe77 	bl	800306a <LL_ADC_REG_IsConversionOngoing>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	f040 839e 	bne.w	8003ac0 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b05      	cmp	r3, #5
 800338a:	d824      	bhi.n	80033d6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	3b02      	subs	r3, #2
 8003392:	2b03      	cmp	r3, #3
 8003394:	d81b      	bhi.n	80033ce <HAL_ADC_ConfigChannel+0x86>
 8003396:	a201      	add	r2, pc, #4	; (adr r2, 800339c <HAL_ADC_ConfigChannel+0x54>)
 8003398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339c:	080033ad 	.word	0x080033ad
 80033a0:	080033b5 	.word	0x080033b5
 80033a4:	080033bd 	.word	0x080033bd
 80033a8:	080033c5 	.word	0x080033c5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	220c      	movs	r2, #12
 80033b0:	605a      	str	r2, [r3, #4]
          break;
 80033b2:	e011      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	2212      	movs	r2, #18
 80033b8:	605a      	str	r2, [r3, #4]
          break;
 80033ba:	e00d      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	2218      	movs	r2, #24
 80033c0:	605a      	str	r2, [r3, #4]
          break;
 80033c2:	e009      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033ca:	605a      	str	r2, [r3, #4]
          break;
 80033cc:	e004      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2206      	movs	r2, #6
 80033d2:	605a      	str	r2, [r3, #4]
          break;
 80033d4:	e000      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80033d6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6818      	ldr	r0, [r3, #0]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	6859      	ldr	r1, [r3, #4]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	461a      	mov	r2, r3
 80033e6:	f7ff fd64 	bl	8002eb2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff fe3b 	bl	800306a <LL_ADC_REG_IsConversionOngoing>
 80033f4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff fe47 	bl	8003090 <LL_ADC_INJ_IsConversionOngoing>
 8003402:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003406:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800340a:	2b00      	cmp	r3, #0
 800340c:	f040 81a6 	bne.w	800375c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003410:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003414:	2b00      	cmp	r3, #0
 8003416:	f040 81a1 	bne.w	800375c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	6819      	ldr	r1, [r3, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	461a      	mov	r2, r3
 8003428:	f7ff fd6f 	bl	8002f0a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	695a      	ldr	r2, [r3, #20]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	08db      	lsrs	r3, r3, #3
 8003438:	f003 0303 	and.w	r3, r3, #3
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	2b04      	cmp	r3, #4
 800344c:	d00a      	beq.n	8003464 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6818      	ldr	r0, [r3, #0]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	6919      	ldr	r1, [r3, #16]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800345e:	f7ff fcd3 	bl	8002e08 <LL_ADC_SetOffset>
 8003462:	e17b      	b.n	800375c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2100      	movs	r1, #0
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff fcf0 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003470:	4603      	mov	r3, r0
 8003472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10a      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x148>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2100      	movs	r1, #0
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff fce5 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003486:	4603      	mov	r3, r0
 8003488:	0e9b      	lsrs	r3, r3, #26
 800348a:	f003 021f 	and.w	r2, r3, #31
 800348e:	e01e      	b.n	80034ce <HAL_ADC_ConfigChannel+0x186>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2100      	movs	r1, #0
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff fcda 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 800349c:	4603      	mov	r3, r0
 800349e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034a6:	fa93 f3a3 	rbit	r3, r3
 80034aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80034b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80034b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80034be:	2320      	movs	r3, #32
 80034c0:	e004      	b.n	80034cc <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80034c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034c6:	fab3 f383 	clz	r3, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d105      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x19e>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	0e9b      	lsrs	r3, r3, #26
 80034e0:	f003 031f 	and.w	r3, r3, #31
 80034e4:	e018      	b.n	8003518 <HAL_ADC_ConfigChannel+0x1d0>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034f2:	fa93 f3a3 	rbit	r3, r3
 80034f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80034fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003502:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800350a:	2320      	movs	r3, #32
 800350c:	e004      	b.n	8003518 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800350e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003512:	fab3 f383 	clz	r3, r3
 8003516:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003518:	429a      	cmp	r2, r3
 800351a:	d106      	bne.n	800352a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2200      	movs	r2, #0
 8003522:	2100      	movs	r1, #0
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff fca9 	bl	8002e7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2101      	movs	r1, #1
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff fc8d 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003536:	4603      	mov	r3, r0
 8003538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10a      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x20e>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2101      	movs	r1, #1
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff fc82 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 800354c:	4603      	mov	r3, r0
 800354e:	0e9b      	lsrs	r3, r3, #26
 8003550:	f003 021f 	and.w	r2, r3, #31
 8003554:	e01e      	b.n	8003594 <HAL_ADC_ConfigChannel+0x24c>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2101      	movs	r1, #1
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff fc77 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003562:	4603      	mov	r3, r0
 8003564:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003568:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800356c:	fa93 f3a3 	rbit	r3, r3
 8003570:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003574:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003578:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800357c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003584:	2320      	movs	r3, #32
 8003586:	e004      	b.n	8003592 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003588:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800358c:	fab3 f383 	clz	r3, r3
 8003590:	b2db      	uxtb	r3, r3
 8003592:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800359c:	2b00      	cmp	r3, #0
 800359e:	d105      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x264>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	0e9b      	lsrs	r3, r3, #26
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	e018      	b.n	80035de <HAL_ADC_ConfigChannel+0x296>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035b8:	fa93 f3a3 	rbit	r3, r3
 80035bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80035c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80035c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80035c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80035d0:	2320      	movs	r3, #32
 80035d2:	e004      	b.n	80035de <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80035d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035d8:	fab3 f383 	clz	r3, r3
 80035dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035de:	429a      	cmp	r2, r3
 80035e0:	d106      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2200      	movs	r2, #0
 80035e8:	2101      	movs	r1, #1
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff fc46 	bl	8002e7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2102      	movs	r1, #2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff fc2a 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 80035fc:	4603      	mov	r3, r0
 80035fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10a      	bne.n	800361c <HAL_ADC_ConfigChannel+0x2d4>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2102      	movs	r1, #2
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff fc1f 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003612:	4603      	mov	r3, r0
 8003614:	0e9b      	lsrs	r3, r3, #26
 8003616:	f003 021f 	and.w	r2, r3, #31
 800361a:	e01e      	b.n	800365a <HAL_ADC_ConfigChannel+0x312>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2102      	movs	r1, #2
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff fc14 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003628:	4603      	mov	r3, r0
 800362a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003632:	fa93 f3a3 	rbit	r3, r3
 8003636:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800363a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800363e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003642:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800364a:	2320      	movs	r3, #32
 800364c:	e004      	b.n	8003658 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800364e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003652:	fab3 f383 	clz	r3, r3
 8003656:	b2db      	uxtb	r3, r3
 8003658:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003662:	2b00      	cmp	r3, #0
 8003664:	d105      	bne.n	8003672 <HAL_ADC_ConfigChannel+0x32a>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	0e9b      	lsrs	r3, r3, #26
 800366c:	f003 031f 	and.w	r3, r3, #31
 8003670:	e016      	b.n	80036a0 <HAL_ADC_ConfigChannel+0x358>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800367e:	fa93 f3a3 	rbit	r3, r3
 8003682:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003684:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003686:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800368a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003692:	2320      	movs	r3, #32
 8003694:	e004      	b.n	80036a0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003696:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800369a:	fab3 f383 	clz	r3, r3
 800369e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d106      	bne.n	80036b2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2200      	movs	r2, #0
 80036aa:	2102      	movs	r1, #2
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff fbe5 	bl	8002e7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2103      	movs	r1, #3
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff fbc9 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 80036be:	4603      	mov	r3, r0
 80036c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10a      	bne.n	80036de <HAL_ADC_ConfigChannel+0x396>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2103      	movs	r1, #3
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff fbbe 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 80036d4:	4603      	mov	r3, r0
 80036d6:	0e9b      	lsrs	r3, r3, #26
 80036d8:	f003 021f 	and.w	r2, r3, #31
 80036dc:	e017      	b.n	800370e <HAL_ADC_ConfigChannel+0x3c6>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2103      	movs	r1, #3
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff fbb3 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 80036ea:	4603      	mov	r3, r0
 80036ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036f0:	fa93 f3a3 	rbit	r3, r3
 80036f4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80036f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036f8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80036fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003700:	2320      	movs	r3, #32
 8003702:	e003      	b.n	800370c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003704:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003706:	fab3 f383 	clz	r3, r3
 800370a:	b2db      	uxtb	r3, r3
 800370c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003716:	2b00      	cmp	r3, #0
 8003718:	d105      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x3de>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	0e9b      	lsrs	r3, r3, #26
 8003720:	f003 031f 	and.w	r3, r3, #31
 8003724:	e011      	b.n	800374a <HAL_ADC_ConfigChannel+0x402>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800372e:	fa93 f3a3 	rbit	r3, r3
 8003732:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003734:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003736:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800373e:	2320      	movs	r3, #32
 8003740:	e003      	b.n	800374a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003744:	fab3 f383 	clz	r3, r3
 8003748:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800374a:	429a      	cmp	r2, r3
 800374c:	d106      	bne.n	800375c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2200      	movs	r2, #0
 8003754:	2103      	movs	r1, #3
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff fb90 	bl	8002e7c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff fc6f 	bl	8003044 <LL_ADC_IsEnabled>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	f040 813f 	bne.w	80039ec <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	6819      	ldr	r1, [r3, #0]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	461a      	mov	r2, r3
 800377c:	f7ff fbf0 	bl	8002f60 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4a8e      	ldr	r2, [pc, #568]	; (80039c0 <HAL_ADC_ConfigChannel+0x678>)
 8003786:	4293      	cmp	r3, r2
 8003788:	f040 8130 	bne.w	80039ec <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10b      	bne.n	80037b4 <HAL_ADC_ConfigChannel+0x46c>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	0e9b      	lsrs	r3, r3, #26
 80037a2:	3301      	adds	r3, #1
 80037a4:	f003 031f 	and.w	r3, r3, #31
 80037a8:	2b09      	cmp	r3, #9
 80037aa:	bf94      	ite	ls
 80037ac:	2301      	movls	r3, #1
 80037ae:	2300      	movhi	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	e019      	b.n	80037e8 <HAL_ADC_ConfigChannel+0x4a0>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037bc:	fa93 f3a3 	rbit	r3, r3
 80037c0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80037c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037c4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80037c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80037cc:	2320      	movs	r3, #32
 80037ce:	e003      	b.n	80037d8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80037d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037d2:	fab3 f383 	clz	r3, r3
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	3301      	adds	r3, #1
 80037da:	f003 031f 	and.w	r3, r3, #31
 80037de:	2b09      	cmp	r3, #9
 80037e0:	bf94      	ite	ls
 80037e2:	2301      	movls	r3, #1
 80037e4:	2300      	movhi	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d079      	beq.n	80038e0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d107      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x4c0>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	0e9b      	lsrs	r3, r3, #26
 80037fe:	3301      	adds	r3, #1
 8003800:	069b      	lsls	r3, r3, #26
 8003802:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003806:	e015      	b.n	8003834 <HAL_ADC_ConfigChannel+0x4ec>
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003810:	fa93 f3a3 	rbit	r3, r3
 8003814:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003818:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800381a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003820:	2320      	movs	r3, #32
 8003822:	e003      	b.n	800382c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003826:	fab3 f383 	clz	r3, r3
 800382a:	b2db      	uxtb	r3, r3
 800382c:	3301      	adds	r3, #1
 800382e:	069b      	lsls	r3, r3, #26
 8003830:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800383c:	2b00      	cmp	r3, #0
 800383e:	d109      	bne.n	8003854 <HAL_ADC_ConfigChannel+0x50c>
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	0e9b      	lsrs	r3, r3, #26
 8003846:	3301      	adds	r3, #1
 8003848:	f003 031f 	and.w	r3, r3, #31
 800384c:	2101      	movs	r1, #1
 800384e:	fa01 f303 	lsl.w	r3, r1, r3
 8003852:	e017      	b.n	8003884 <HAL_ADC_ConfigChannel+0x53c>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800385c:	fa93 f3a3 	rbit	r3, r3
 8003860:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003864:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800386c:	2320      	movs	r3, #32
 800386e:	e003      	b.n	8003878 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003872:	fab3 f383 	clz	r3, r3
 8003876:	b2db      	uxtb	r3, r3
 8003878:	3301      	adds	r3, #1
 800387a:	f003 031f 	and.w	r3, r3, #31
 800387e:	2101      	movs	r1, #1
 8003880:	fa01 f303 	lsl.w	r3, r1, r3
 8003884:	ea42 0103 	orr.w	r1, r2, r3
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10a      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x562>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	0e9b      	lsrs	r3, r3, #26
 800389a:	3301      	adds	r3, #1
 800389c:	f003 021f 	and.w	r2, r3, #31
 80038a0:	4613      	mov	r3, r2
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	4413      	add	r3, r2
 80038a6:	051b      	lsls	r3, r3, #20
 80038a8:	e018      	b.n	80038dc <HAL_ADC_ConfigChannel+0x594>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b2:	fa93 f3a3 	rbit	r3, r3
 80038b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80038b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80038bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80038c2:	2320      	movs	r3, #32
 80038c4:	e003      	b.n	80038ce <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80038c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038c8:	fab3 f383 	clz	r3, r3
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	3301      	adds	r3, #1
 80038d0:	f003 021f 	and.w	r2, r3, #31
 80038d4:	4613      	mov	r3, r2
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	4413      	add	r3, r2
 80038da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038dc:	430b      	orrs	r3, r1
 80038de:	e080      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d107      	bne.n	80038fc <HAL_ADC_ConfigChannel+0x5b4>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	0e9b      	lsrs	r3, r3, #26
 80038f2:	3301      	adds	r3, #1
 80038f4:	069b      	lsls	r3, r3, #26
 80038f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038fa:	e015      	b.n	8003928 <HAL_ADC_ConfigChannel+0x5e0>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003904:	fa93 f3a3 	rbit	r3, r3
 8003908:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800390a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800390e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003914:	2320      	movs	r3, #32
 8003916:	e003      	b.n	8003920 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391a:	fab3 f383 	clz	r3, r3
 800391e:	b2db      	uxtb	r3, r3
 8003920:	3301      	adds	r3, #1
 8003922:	069b      	lsls	r3, r3, #26
 8003924:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003930:	2b00      	cmp	r3, #0
 8003932:	d109      	bne.n	8003948 <HAL_ADC_ConfigChannel+0x600>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	0e9b      	lsrs	r3, r3, #26
 800393a:	3301      	adds	r3, #1
 800393c:	f003 031f 	and.w	r3, r3, #31
 8003940:	2101      	movs	r1, #1
 8003942:	fa01 f303 	lsl.w	r3, r1, r3
 8003946:	e017      	b.n	8003978 <HAL_ADC_ConfigChannel+0x630>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	fa93 f3a3 	rbit	r3, r3
 8003954:	61fb      	str	r3, [r7, #28]
  return result;
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003960:	2320      	movs	r3, #32
 8003962:	e003      	b.n	800396c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	fab3 f383 	clz	r3, r3
 800396a:	b2db      	uxtb	r3, r3
 800396c:	3301      	adds	r3, #1
 800396e:	f003 031f 	and.w	r3, r3, #31
 8003972:	2101      	movs	r1, #1
 8003974:	fa01 f303 	lsl.w	r3, r1, r3
 8003978:	ea42 0103 	orr.w	r1, r2, r3
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10d      	bne.n	80039a4 <HAL_ADC_ConfigChannel+0x65c>
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	0e9b      	lsrs	r3, r3, #26
 800398e:	3301      	adds	r3, #1
 8003990:	f003 021f 	and.w	r2, r3, #31
 8003994:	4613      	mov	r3, r2
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	4413      	add	r3, r2
 800399a:	3b1e      	subs	r3, #30
 800399c:	051b      	lsls	r3, r3, #20
 800399e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039a2:	e01d      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x698>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	fa93 f3a3 	rbit	r3, r3
 80039b0:	613b      	str	r3, [r7, #16]
  return result;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d103      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80039bc:	2320      	movs	r3, #32
 80039be:	e005      	b.n	80039cc <HAL_ADC_ConfigChannel+0x684>
 80039c0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	fab3 f383 	clz	r3, r3
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	3301      	adds	r3, #1
 80039ce:	f003 021f 	and.w	r2, r3, #31
 80039d2:	4613      	mov	r3, r2
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	4413      	add	r3, r2
 80039d8:	3b1e      	subs	r3, #30
 80039da:	051b      	lsls	r3, r3, #20
 80039dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039e0:	430b      	orrs	r3, r1
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	6892      	ldr	r2, [r2, #8]
 80039e6:	4619      	mov	r1, r3
 80039e8:	f7ff fa8f 	bl	8002f0a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	4b3d      	ldr	r3, [pc, #244]	; (8003ae8 <HAL_ADC_ConfigChannel+0x7a0>)
 80039f2:	4013      	ands	r3, r2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d06c      	beq.n	8003ad2 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039f8:	483c      	ldr	r0, [pc, #240]	; (8003aec <HAL_ADC_ConfigChannel+0x7a4>)
 80039fa:	f7ff f9f7 	bl	8002dec <LL_ADC_GetCommonPathInternalCh>
 80039fe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a3a      	ldr	r2, [pc, #232]	; (8003af0 <HAL_ADC_ConfigChannel+0x7a8>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d127      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d121      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a35      	ldr	r2, [pc, #212]	; (8003af4 <HAL_ADC_ConfigChannel+0x7ac>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d157      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	482f      	ldr	r0, [pc, #188]	; (8003aec <HAL_ADC_ConfigChannel+0x7a4>)
 8003a2e:	f7ff f9ca 	bl	8002dc6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a32:	4b31      	ldr	r3, [pc, #196]	; (8003af8 <HAL_ADC_ConfigChannel+0x7b0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	099b      	lsrs	r3, r3, #6
 8003a38:	4a30      	ldr	r2, [pc, #192]	; (8003afc <HAL_ADC_ConfigChannel+0x7b4>)
 8003a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3e:	099b      	lsrs	r3, r3, #6
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	4613      	mov	r3, r2
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	4413      	add	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a4c:	e002      	b.n	8003a54 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	3b01      	subs	r3, #1
 8003a52:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f9      	bne.n	8003a4e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a5a:	e03a      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a27      	ldr	r2, [pc, #156]	; (8003b00 <HAL_ADC_ConfigChannel+0x7b8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d113      	bne.n	8003a8e <HAL_ADC_ConfigChannel+0x746>
 8003a66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10d      	bne.n	8003a8e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a1f      	ldr	r2, [pc, #124]	; (8003af4 <HAL_ADC_ConfigChannel+0x7ac>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d12a      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a84:	4619      	mov	r1, r3
 8003a86:	4819      	ldr	r0, [pc, #100]	; (8003aec <HAL_ADC_ConfigChannel+0x7a4>)
 8003a88:	f7ff f99d 	bl	8002dc6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a8c:	e021      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a1c      	ldr	r2, [pc, #112]	; (8003b04 <HAL_ADC_ConfigChannel+0x7bc>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d11c      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d116      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a12      	ldr	r2, [pc, #72]	; (8003af4 <HAL_ADC_ConfigChannel+0x7ac>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d111      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ab2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	480c      	ldr	r0, [pc, #48]	; (8003aec <HAL_ADC_ConfigChannel+0x7a4>)
 8003aba:	f7ff f984 	bl	8002dc6 <LL_ADC_SetCommonPathInternalCh>
 8003abe:	e008      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac4:	f043 0220 	orr.w	r2, r3, #32
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ada:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	37d8      	adds	r7, #216	; 0xd8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	80080000 	.word	0x80080000
 8003aec:	50040300 	.word	0x50040300
 8003af0:	c7520000 	.word	0xc7520000
 8003af4:	50040000 	.word	0x50040000
 8003af8:	20000130 	.word	0x20000130
 8003afc:	053e2d63 	.word	0x053e2d63
 8003b00:	cb840000 	.word	0xcb840000
 8003b04:	80000001 	.word	0x80000001

08003b08 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e0ed      	b.n	8003cf6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d102      	bne.n	8003b2c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7fe f99c 	bl	8001e64 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0202 	bic.w	r2, r2, #2
 8003b3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b3c:	f7ff f924 	bl	8002d88 <HAL_GetTick>
 8003b40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003b42:	e012      	b.n	8003b6a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b44:	f7ff f920 	bl	8002d88 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b0a      	cmp	r3, #10
 8003b50:	d90b      	bls.n	8003b6a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2205      	movs	r2, #5
 8003b62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e0c5      	b.n	8003cf6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1e5      	bne.n	8003b44 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0201 	orr.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b88:	f7ff f8fe 	bl	8002d88 <HAL_GetTick>
 8003b8c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003b8e:	e012      	b.n	8003bb6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b90:	f7ff f8fa 	bl	8002d88 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b0a      	cmp	r3, #10
 8003b9c:	d90b      	bls.n	8003bb6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2205      	movs	r2, #5
 8003bae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e09f      	b.n	8003cf6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0e5      	beq.n	8003b90 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	7e1b      	ldrb	r3, [r3, #24]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d108      	bne.n	8003bde <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	e007      	b.n	8003bee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	7e5b      	ldrb	r3, [r3, #25]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d108      	bne.n	8003c08 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	e007      	b.n	8003c18 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c16:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	7e9b      	ldrb	r3, [r3, #26]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d108      	bne.n	8003c32 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0220 	orr.w	r2, r2, #32
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	e007      	b.n	8003c42 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0220 	bic.w	r2, r2, #32
 8003c40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	7edb      	ldrb	r3, [r3, #27]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d108      	bne.n	8003c5c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0210 	bic.w	r2, r2, #16
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	e007      	b.n	8003c6c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0210 	orr.w	r2, r2, #16
 8003c6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	7f1b      	ldrb	r3, [r3, #28]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d108      	bne.n	8003c86 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0208 	orr.w	r2, r2, #8
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	e007      	b.n	8003c96 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0208 	bic.w	r2, r2, #8
 8003c94:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	7f5b      	ldrb	r3, [r3, #29]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d108      	bne.n	8003cb0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0204 	orr.w	r2, r2, #4
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	e007      	b.n	8003cc0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0204 	bic.w	r2, r2, #4
 8003cbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	ea42 0103 	orr.w	r1, r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	1e5a      	subs	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b087      	sub	sp, #28
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	607a      	str	r2, [r7, #4]
 8003d0a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d12:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d14:	7dfb      	ldrb	r3, [r7, #23]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d003      	beq.n	8003d22 <HAL_CAN_GetRxMessage+0x24>
 8003d1a:	7dfb      	ldrb	r3, [r7, #23]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	f040 80f3 	bne.w	8003f08 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10e      	bne.n	8003d46 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d116      	bne.n	8003d64 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e0e7      	b.n	8003f16 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	f003 0303 	and.w	r3, r3, #3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d107      	bne.n	8003d64 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0d8      	b.n	8003f16 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	331b      	adds	r3, #27
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	4413      	add	r3, r2
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0204 	and.w	r2, r3, #4
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10c      	bne.n	8003d9c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	331b      	adds	r3, #27
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	4413      	add	r3, r2
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	0d5b      	lsrs	r3, r3, #21
 8003d92:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	e00b      	b.n	8003db4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	331b      	adds	r3, #27
 8003da4:	011b      	lsls	r3, r3, #4
 8003da6:	4413      	add	r3, r2
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	08db      	lsrs	r3, r3, #3
 8003dac:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	331b      	adds	r3, #27
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	4413      	add	r3, r2
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0202 	and.w	r2, r3, #2
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	331b      	adds	r3, #27
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	4413      	add	r3, r2
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 020f 	and.w	r2, r3, #15
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	331b      	adds	r3, #27
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	4413      	add	r3, r2
 8003dee:	3304      	adds	r3, #4
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	0a1b      	lsrs	r3, r3, #8
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	331b      	adds	r3, #27
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	4413      	add	r3, r2
 8003e06:	3304      	adds	r3, #4
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	0c1b      	lsrs	r3, r3, #16
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	0a1a      	lsrs	r2, r3, #8
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	0c1a      	lsrs	r2, r3, #16
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	3302      	adds	r3, #2
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	0e1a      	lsrs	r2, r3, #24
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	3303      	adds	r3, #3
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	011b      	lsls	r3, r3, #4
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	0a1a      	lsrs	r2, r3, #8
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	3305      	adds	r3, #5
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	0c1a      	lsrs	r2, r3, #16
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	3306      	adds	r3, #6
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	0e1a      	lsrs	r2, r3, #24
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	3307      	adds	r3, #7
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d108      	bne.n	8003ef4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f042 0220 	orr.w	r2, r2, #32
 8003ef0:	60da      	str	r2, [r3, #12]
 8003ef2:	e007      	b.n	8003f04 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	691a      	ldr	r2, [r3, #16]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0220 	orr.w	r2, r2, #32
 8003f02:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003f04:	2300      	movs	r3, #0
 8003f06:	e006      	b.n	8003f16 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
  }
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	371c      	adds	r7, #28
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b08a      	sub	sp, #40	; 0x28
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003f5e:	6a3b      	ldr	r3, [r7, #32]
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d07c      	beq.n	8004062 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d023      	beq.n	8003fba <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2201      	movs	r2, #1
 8003f78:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f983 	bl	8004290 <HAL_CAN_TxMailbox0CompleteCallback>
 8003f8a:	e016      	b.n	8003fba <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d004      	beq.n	8003fa0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f9e:	e00c      	b.n	8003fba <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d004      	beq.n	8003fb4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb2:	e002      	b.n	8003fba <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f989 	bl	80042cc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d024      	beq.n	800400e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fcc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f963 	bl	80042a4 <HAL_CAN_TxMailbox1CompleteCallback>
 8003fde:	e016      	b.n	800400e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d004      	beq.n	8003ff4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff2:	e00c      	b.n	800400e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d004      	beq.n	8004008 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
 8004006:	e002      	b.n	800400e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f969 	bl	80042e0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d024      	beq.n	8004062 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004020:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f943 	bl	80042b8 <HAL_CAN_TxMailbox2CompleteCallback>
 8004032:	e016      	b.n	8004062 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d004      	beq.n	8004048 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004044:	627b      	str	r3, [r7, #36]	; 0x24
 8004046:	e00c      	b.n	8004062 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d004      	beq.n	800405c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
 800405a:	e002      	b.n	8004062 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f949 	bl	80042f4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00c      	beq.n	8004086 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f003 0310 	and.w	r3, r3, #16
 8004072:	2b00      	cmp	r3, #0
 8004074:	d007      	beq.n	8004086 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800407c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2210      	movs	r2, #16
 8004084:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00b      	beq.n	80040a8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f003 0308 	and.w	r3, r3, #8
 8004096:	2b00      	cmp	r3, #0
 8004098:	d006      	beq.n	80040a8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2208      	movs	r2, #8
 80040a0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f930 	bl	8004308 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d009      	beq.n	80040c6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	f003 0303 	and.w	r3, r3, #3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d002      	beq.n	80040c6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7fe fdb3 	bl	8002c2c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00c      	beq.n	80040ea <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f003 0310 	and.w	r3, r3, #16
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d007      	beq.n	80040ea <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2210      	movs	r2, #16
 80040e8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	f003 0320 	and.w	r3, r3, #32
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00b      	beq.n	800410c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d006      	beq.n	800410c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2208      	movs	r2, #8
 8004104:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f908 	bl	800431c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	f003 0310 	and.w	r3, r3, #16
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	f003 0303 	and.w	r3, r3, #3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7fe fd95 	bl	8002c54 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00b      	beq.n	800414c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	f003 0310 	and.w	r3, r3, #16
 800413a:	2b00      	cmp	r3, #0
 800413c:	d006      	beq.n	800414c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2210      	movs	r2, #16
 8004144:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f8f2 	bl	8004330 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00b      	beq.n	800416e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	f003 0308 	and.w	r3, r3, #8
 800415c:	2b00      	cmp	r3, #0
 800415e:	d006      	beq.n	800416e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2208      	movs	r2, #8
 8004166:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f8eb 	bl	8004344 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d07b      	beq.n	8004270 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	f003 0304 	and.w	r3, r3, #4
 800417e:	2b00      	cmp	r3, #0
 8004180:	d072      	beq.n	8004268 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	f043 0301 	orr.w	r3, r3, #1
 800419c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d008      	beq.n	80041ba <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	f043 0302 	orr.w	r3, r3, #2
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d008      	beq.n	80041d6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	f043 0304 	orr.w	r3, r3, #4
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d043      	beq.n	8004268 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d03e      	beq.n	8004268 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041f0:	2b60      	cmp	r3, #96	; 0x60
 80041f2:	d02b      	beq.n	800424c <HAL_CAN_IRQHandler+0x32a>
 80041f4:	2b60      	cmp	r3, #96	; 0x60
 80041f6:	d82e      	bhi.n	8004256 <HAL_CAN_IRQHandler+0x334>
 80041f8:	2b50      	cmp	r3, #80	; 0x50
 80041fa:	d022      	beq.n	8004242 <HAL_CAN_IRQHandler+0x320>
 80041fc:	2b50      	cmp	r3, #80	; 0x50
 80041fe:	d82a      	bhi.n	8004256 <HAL_CAN_IRQHandler+0x334>
 8004200:	2b40      	cmp	r3, #64	; 0x40
 8004202:	d019      	beq.n	8004238 <HAL_CAN_IRQHandler+0x316>
 8004204:	2b40      	cmp	r3, #64	; 0x40
 8004206:	d826      	bhi.n	8004256 <HAL_CAN_IRQHandler+0x334>
 8004208:	2b30      	cmp	r3, #48	; 0x30
 800420a:	d010      	beq.n	800422e <HAL_CAN_IRQHandler+0x30c>
 800420c:	2b30      	cmp	r3, #48	; 0x30
 800420e:	d822      	bhi.n	8004256 <HAL_CAN_IRQHandler+0x334>
 8004210:	2b10      	cmp	r3, #16
 8004212:	d002      	beq.n	800421a <HAL_CAN_IRQHandler+0x2f8>
 8004214:	2b20      	cmp	r3, #32
 8004216:	d005      	beq.n	8004224 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004218:	e01d      	b.n	8004256 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	f043 0308 	orr.w	r3, r3, #8
 8004220:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004222:	e019      	b.n	8004258 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	f043 0310 	orr.w	r3, r3, #16
 800422a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800422c:	e014      	b.n	8004258 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	f043 0320 	orr.w	r3, r3, #32
 8004234:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004236:	e00f      	b.n	8004258 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800423e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004240:	e00a      	b.n	8004258 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800424a:	e005      	b.n	8004258 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004252:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004254:	e000      	b.n	8004258 <HAL_CAN_IRQHandler+0x336>
            break;
 8004256:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699a      	ldr	r2, [r3, #24]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004266:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2204      	movs	r2, #4
 800426e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	2b00      	cmp	r3, #0
 8004274:	d008      	beq.n	8004288 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	431a      	orrs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f868 	bl	8004358 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004288:	bf00      	nop
 800428a:	3728      	adds	r7, #40	; 0x28
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800437c:	4b0c      	ldr	r3, [pc, #48]	; (80043b0 <__NVIC_SetPriorityGrouping+0x44>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004388:	4013      	ands	r3, r2
 800438a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004394:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800439c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800439e:	4a04      	ldr	r2, [pc, #16]	; (80043b0 <__NVIC_SetPriorityGrouping+0x44>)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	60d3      	str	r3, [r2, #12]
}
 80043a4:	bf00      	nop
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	e000ed00 	.word	0xe000ed00

080043b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043b8:	4b04      	ldr	r3, [pc, #16]	; (80043cc <__NVIC_GetPriorityGrouping+0x18>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	0a1b      	lsrs	r3, r3, #8
 80043be:	f003 0307 	and.w	r3, r3, #7
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	e000ed00 	.word	0xe000ed00

080043d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	db0b      	blt.n	80043fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	f003 021f 	and.w	r2, r3, #31
 80043e8:	4907      	ldr	r1, [pc, #28]	; (8004408 <__NVIC_EnableIRQ+0x38>)
 80043ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	2001      	movs	r0, #1
 80043f2:	fa00 f202 	lsl.w	r2, r0, r2
 80043f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	e000e100 	.word	0xe000e100

0800440c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	6039      	str	r1, [r7, #0]
 8004416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441c:	2b00      	cmp	r3, #0
 800441e:	db0a      	blt.n	8004436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	b2da      	uxtb	r2, r3
 8004424:	490c      	ldr	r1, [pc, #48]	; (8004458 <__NVIC_SetPriority+0x4c>)
 8004426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442a:	0112      	lsls	r2, r2, #4
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	440b      	add	r3, r1
 8004430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004434:	e00a      	b.n	800444c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	b2da      	uxtb	r2, r3
 800443a:	4908      	ldr	r1, [pc, #32]	; (800445c <__NVIC_SetPriority+0x50>)
 800443c:	79fb      	ldrb	r3, [r7, #7]
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	3b04      	subs	r3, #4
 8004444:	0112      	lsls	r2, r2, #4
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	440b      	add	r3, r1
 800444a:	761a      	strb	r2, [r3, #24]
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	e000e100 	.word	0xe000e100
 800445c:	e000ed00 	.word	0xe000ed00

08004460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004460:	b480      	push	{r7}
 8004462:	b089      	sub	sp, #36	; 0x24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f1c3 0307 	rsb	r3, r3, #7
 800447a:	2b04      	cmp	r3, #4
 800447c:	bf28      	it	cs
 800447e:	2304      	movcs	r3, #4
 8004480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	3304      	adds	r3, #4
 8004486:	2b06      	cmp	r3, #6
 8004488:	d902      	bls.n	8004490 <NVIC_EncodePriority+0x30>
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	3b03      	subs	r3, #3
 800448e:	e000      	b.n	8004492 <NVIC_EncodePriority+0x32>
 8004490:	2300      	movs	r3, #0
 8004492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004494:	f04f 32ff 	mov.w	r2, #4294967295
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	43da      	mvns	r2, r3
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	401a      	ands	r2, r3
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044a8:	f04f 31ff 	mov.w	r1, #4294967295
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	fa01 f303 	lsl.w	r3, r1, r3
 80044b2:	43d9      	mvns	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044b8:	4313      	orrs	r3, r2
         );
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3724      	adds	r7, #36	; 0x24
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b082      	sub	sp, #8
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7ff ff4c 	bl	800436c <__NVIC_SetPriorityGrouping>
}
 80044d4:	bf00      	nop
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044ee:	f7ff ff61 	bl	80043b4 <__NVIC_GetPriorityGrouping>
 80044f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	68b9      	ldr	r1, [r7, #8]
 80044f8:	6978      	ldr	r0, [r7, #20]
 80044fa:	f7ff ffb1 	bl	8004460 <NVIC_EncodePriority>
 80044fe:	4602      	mov	r2, r0
 8004500:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004504:	4611      	mov	r1, r2
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff ff80 	bl	800440c <__NVIC_SetPriority>
}
 800450c:	bf00      	nop
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800451e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff ff54 	bl	80043d0 <__NVIC_EnableIRQ>
}
 8004528:	bf00      	nop
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e098      	b.n	8004674 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	4b4d      	ldr	r3, [pc, #308]	; (8004680 <HAL_DMA_Init+0x150>)
 800454a:	429a      	cmp	r2, r3
 800454c:	d80f      	bhi.n	800456e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	4b4b      	ldr	r3, [pc, #300]	; (8004684 <HAL_DMA_Init+0x154>)
 8004556:	4413      	add	r3, r2
 8004558:	4a4b      	ldr	r2, [pc, #300]	; (8004688 <HAL_DMA_Init+0x158>)
 800455a:	fba2 2303 	umull	r2, r3, r2, r3
 800455e:	091b      	lsrs	r3, r3, #4
 8004560:	009a      	lsls	r2, r3, #2
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a48      	ldr	r2, [pc, #288]	; (800468c <HAL_DMA_Init+0x15c>)
 800456a:	641a      	str	r2, [r3, #64]	; 0x40
 800456c:	e00e      	b.n	800458c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	4b46      	ldr	r3, [pc, #280]	; (8004690 <HAL_DMA_Init+0x160>)
 8004576:	4413      	add	r3, r2
 8004578:	4a43      	ldr	r2, [pc, #268]	; (8004688 <HAL_DMA_Init+0x158>)
 800457a:	fba2 2303 	umull	r2, r3, r2, r3
 800457e:	091b      	lsrs	r3, r3, #4
 8004580:	009a      	lsls	r2, r3, #2
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a42      	ldr	r2, [pc, #264]	; (8004694 <HAL_DMA_Init+0x164>)
 800458a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80045a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80045b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045e6:	d039      	beq.n	800465c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	4a27      	ldr	r2, [pc, #156]	; (800468c <HAL_DMA_Init+0x15c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d11a      	bne.n	8004628 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80045f2:	4b29      	ldr	r3, [pc, #164]	; (8004698 <HAL_DMA_Init+0x168>)
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	f003 031c 	and.w	r3, r3, #28
 80045fe:	210f      	movs	r1, #15
 8004600:	fa01 f303 	lsl.w	r3, r1, r3
 8004604:	43db      	mvns	r3, r3
 8004606:	4924      	ldr	r1, [pc, #144]	; (8004698 <HAL_DMA_Init+0x168>)
 8004608:	4013      	ands	r3, r2
 800460a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800460c:	4b22      	ldr	r3, [pc, #136]	; (8004698 <HAL_DMA_Init+0x168>)
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6859      	ldr	r1, [r3, #4]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004618:	f003 031c 	and.w	r3, r3, #28
 800461c:	fa01 f303 	lsl.w	r3, r1, r3
 8004620:	491d      	ldr	r1, [pc, #116]	; (8004698 <HAL_DMA_Init+0x168>)
 8004622:	4313      	orrs	r3, r2
 8004624:	600b      	str	r3, [r1, #0]
 8004626:	e019      	b.n	800465c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004628:	4b1c      	ldr	r3, [pc, #112]	; (800469c <HAL_DMA_Init+0x16c>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004630:	f003 031c 	and.w	r3, r3, #28
 8004634:	210f      	movs	r1, #15
 8004636:	fa01 f303 	lsl.w	r3, r1, r3
 800463a:	43db      	mvns	r3, r3
 800463c:	4917      	ldr	r1, [pc, #92]	; (800469c <HAL_DMA_Init+0x16c>)
 800463e:	4013      	ands	r3, r2
 8004640:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004642:	4b16      	ldr	r3, [pc, #88]	; (800469c <HAL_DMA_Init+0x16c>)
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6859      	ldr	r1, [r3, #4]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464e:	f003 031c 	and.w	r3, r3, #28
 8004652:	fa01 f303 	lsl.w	r3, r1, r3
 8004656:	4911      	ldr	r1, [pc, #68]	; (800469c <HAL_DMA_Init+0x16c>)
 8004658:	4313      	orrs	r3, r2
 800465a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	40020407 	.word	0x40020407
 8004684:	bffdfff8 	.word	0xbffdfff8
 8004688:	cccccccd 	.word	0xcccccccd
 800468c:	40020000 	.word	0x40020000
 8004690:	bffdfbf8 	.word	0xbffdfbf8
 8004694:	40020400 	.word	0x40020400
 8004698:	400200a8 	.word	0x400200a8
 800469c:	400204a8 	.word	0x400204a8

080046a0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046a8:	2300      	movs	r3, #0
 80046aa:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d005      	beq.n	80046c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2204      	movs	r2, #4
 80046bc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	73fb      	strb	r3, [r7, #15]
 80046c2:	e029      	b.n	8004718 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 020e 	bic.w	r2, r2, #14
 80046d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0201 	bic.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e8:	f003 021c 	and.w	r2, r3, #28
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	2101      	movs	r1, #1
 80046f2:	fa01 f202 	lsl.w	r2, r1, r2
 80046f6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470c:	2b00      	cmp	r3, #0
 800470e:	d003      	beq.n	8004718 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	4798      	blx	r3
    }
  }
  return status;
 8004718:	7bfb      	ldrb	r3, [r7, #15]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473e:	f003 031c 	and.w	r3, r3, #28
 8004742:	2204      	movs	r2, #4
 8004744:	409a      	lsls	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4013      	ands	r3, r2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d026      	beq.n	800479c <HAL_DMA_IRQHandler+0x7a>
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b00      	cmp	r3, #0
 8004756:	d021      	beq.n	800479c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0320 	and.w	r3, r3, #32
 8004762:	2b00      	cmp	r3, #0
 8004764:	d107      	bne.n	8004776 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0204 	bic.w	r2, r2, #4
 8004774:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477a:	f003 021c 	and.w	r2, r3, #28
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	2104      	movs	r1, #4
 8004784:	fa01 f202 	lsl.w	r2, r1, r2
 8004788:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	2b00      	cmp	r3, #0
 8004790:	d071      	beq.n	8004876 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800479a:	e06c      	b.n	8004876 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a0:	f003 031c 	and.w	r3, r3, #28
 80047a4:	2202      	movs	r2, #2
 80047a6:	409a      	lsls	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4013      	ands	r3, r2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d02e      	beq.n	800480e <HAL_DMA_IRQHandler+0xec>
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d029      	beq.n	800480e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0320 	and.w	r3, r3, #32
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10b      	bne.n	80047e0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 020a 	bic.w	r2, r2, #10
 80047d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e4:	f003 021c 	and.w	r2, r3, #28
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ec:	2102      	movs	r1, #2
 80047ee:	fa01 f202 	lsl.w	r2, r1, r2
 80047f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004800:	2b00      	cmp	r3, #0
 8004802:	d038      	beq.n	8004876 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800480c:	e033      	b.n	8004876 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004812:	f003 031c 	and.w	r3, r3, #28
 8004816:	2208      	movs	r2, #8
 8004818:	409a      	lsls	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4013      	ands	r3, r2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d02a      	beq.n	8004878 <HAL_DMA_IRQHandler+0x156>
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b00      	cmp	r3, #0
 800482a:	d025      	beq.n	8004878 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 020e 	bic.w	r2, r2, #14
 800483a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004840:	f003 021c 	and.w	r2, r3, #28
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004848:	2101      	movs	r1, #1
 800484a:	fa01 f202 	lsl.w	r2, r1, r2
 800484e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800486a:	2b00      	cmp	r3, #0
 800486c:	d004      	beq.n	8004878 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004876:	bf00      	nop
 8004878:	bf00      	nop
}
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800488e:	b2db      	uxtb	r3, r3
}
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80048a6:	2300      	movs	r3, #0
 80048a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048aa:	e148      	b.n	8004b3e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	2101      	movs	r1, #1
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	fa01 f303 	lsl.w	r3, r1, r3
 80048b8:	4013      	ands	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 813a 	beq.w	8004b38 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d00b      	beq.n	80048e4 <HAL_GPIO_Init+0x48>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d007      	beq.n	80048e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048d8:	2b11      	cmp	r3, #17
 80048da:	d003      	beq.n	80048e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2b12      	cmp	r3, #18
 80048e2:	d130      	bne.n	8004946 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	2203      	movs	r2, #3
 80048f0:	fa02 f303 	lsl.w	r3, r2, r3
 80048f4:	43db      	mvns	r3, r3
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	4013      	ands	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	4313      	orrs	r3, r2
 800490c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800491a:	2201      	movs	r2, #1
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	43db      	mvns	r3, r3
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	4013      	ands	r3, r2
 8004928:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	091b      	lsrs	r3, r3, #4
 8004930:	f003 0201 	and.w	r2, r3, #1
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	2203      	movs	r2, #3
 8004952:	fa02 f303 	lsl.w	r3, r2, r3
 8004956:	43db      	mvns	r3, r3
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4013      	ands	r3, r2
 800495c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	689a      	ldr	r2, [r3, #8]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2b02      	cmp	r3, #2
 800497c:	d003      	beq.n	8004986 <HAL_GPIO_Init+0xea>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b12      	cmp	r3, #18
 8004984:	d123      	bne.n	80049ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	08da      	lsrs	r2, r3, #3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3208      	adds	r2, #8
 800498e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004992:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f003 0307 	and.w	r3, r3, #7
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	220f      	movs	r2, #15
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	43db      	mvns	r3, r3
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	4013      	ands	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	691a      	ldr	r2, [r3, #16]
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	08da      	lsrs	r2, r3, #3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3208      	adds	r2, #8
 80049c8:	6939      	ldr	r1, [r7, #16]
 80049ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	2203      	movs	r2, #3
 80049da:	fa02 f303 	lsl.w	r3, r2, r3
 80049de:	43db      	mvns	r3, r3
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4013      	ands	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f003 0203 	and.w	r2, r3, #3
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 8094 	beq.w	8004b38 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a10:	4b52      	ldr	r3, [pc, #328]	; (8004b5c <HAL_GPIO_Init+0x2c0>)
 8004a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a14:	4a51      	ldr	r2, [pc, #324]	; (8004b5c <HAL_GPIO_Init+0x2c0>)
 8004a16:	f043 0301 	orr.w	r3, r3, #1
 8004a1a:	6613      	str	r3, [r2, #96]	; 0x60
 8004a1c:	4b4f      	ldr	r3, [pc, #316]	; (8004b5c <HAL_GPIO_Init+0x2c0>)
 8004a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	60bb      	str	r3, [r7, #8]
 8004a26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004a28:	4a4d      	ldr	r2, [pc, #308]	; (8004b60 <HAL_GPIO_Init+0x2c4>)
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	089b      	lsrs	r3, r3, #2
 8004a2e:	3302      	adds	r3, #2
 8004a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f003 0303 	and.w	r3, r3, #3
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	220f      	movs	r2, #15
 8004a40:	fa02 f303 	lsl.w	r3, r2, r3
 8004a44:	43db      	mvns	r3, r3
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a52:	d00d      	beq.n	8004a70 <HAL_GPIO_Init+0x1d4>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a43      	ldr	r2, [pc, #268]	; (8004b64 <HAL_GPIO_Init+0x2c8>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d007      	beq.n	8004a6c <HAL_GPIO_Init+0x1d0>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a42      	ldr	r2, [pc, #264]	; (8004b68 <HAL_GPIO_Init+0x2cc>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d101      	bne.n	8004a68 <HAL_GPIO_Init+0x1cc>
 8004a64:	2302      	movs	r3, #2
 8004a66:	e004      	b.n	8004a72 <HAL_GPIO_Init+0x1d6>
 8004a68:	2307      	movs	r3, #7
 8004a6a:	e002      	b.n	8004a72 <HAL_GPIO_Init+0x1d6>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e000      	b.n	8004a72 <HAL_GPIO_Init+0x1d6>
 8004a70:	2300      	movs	r3, #0
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	f002 0203 	and.w	r2, r2, #3
 8004a78:	0092      	lsls	r2, r2, #2
 8004a7a:	4093      	lsls	r3, r2
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a82:	4937      	ldr	r1, [pc, #220]	; (8004b60 <HAL_GPIO_Init+0x2c4>)
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	089b      	lsrs	r3, r3, #2
 8004a88:	3302      	adds	r3, #2
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a90:	4b36      	ldr	r3, [pc, #216]	; (8004b6c <HAL_GPIO_Init+0x2d0>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ab4:	4a2d      	ldr	r2, [pc, #180]	; (8004b6c <HAL_GPIO_Init+0x2d0>)
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004aba:	4b2c      	ldr	r3, [pc, #176]	; (8004b6c <HAL_GPIO_Init+0x2d0>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	43db      	mvns	r3, r3
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ade:	4a23      	ldr	r2, [pc, #140]	; (8004b6c <HAL_GPIO_Init+0x2d0>)
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ae4:	4b21      	ldr	r3, [pc, #132]	; (8004b6c <HAL_GPIO_Init+0x2d0>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	43db      	mvns	r3, r3
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	4013      	ands	r3, r2
 8004af2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b08:	4a18      	ldr	r2, [pc, #96]	; (8004b6c <HAL_GPIO_Init+0x2d0>)
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004b0e:	4b17      	ldr	r3, [pc, #92]	; (8004b6c <HAL_GPIO_Init+0x2d0>)
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	43db      	mvns	r3, r3
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b32:	4a0e      	ldr	r2, [pc, #56]	; (8004b6c <HAL_GPIO_Init+0x2d0>)
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	fa22 f303 	lsr.w	r3, r2, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f47f aeaf 	bne.w	80048ac <HAL_GPIO_Init+0x10>
  }
}
 8004b4e:	bf00      	nop
 8004b50:	bf00      	nop
 8004b52:	371c      	adds	r7, #28
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	40010000 	.word	0x40010000
 8004b64:	48000400 	.word	0x48000400
 8004b68:	48000800 	.word	0x48000800
 8004b6c:	40010400 	.word	0x40010400

08004b70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e081      	b.n	8004c86 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d106      	bne.n	8004b9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7fd fa8e 	bl	80020b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2224      	movs	r2, #36	; 0x24
 8004ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0201 	bic.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004bc0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bd0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d107      	bne.n	8004bea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689a      	ldr	r2, [r3, #8]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004be6:	609a      	str	r2, [r3, #8]
 8004be8:	e006      	b.n	8004bf8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004bf6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d104      	bne.n	8004c0a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	6812      	ldr	r2, [r2, #0]
 8004c14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691a      	ldr	r2, [r3, #16]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	ea42 0103 	orr.w	r1, r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	021a      	lsls	r2, r3, #8
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	69d9      	ldr	r1, [r3, #28]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a1a      	ldr	r2, [r3, #32]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0201 	orr.w	r2, r2, #1
 8004c66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af02      	add	r7, sp, #8
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	607a      	str	r2, [r7, #4]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	817b      	strh	r3, [r7, #10]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b20      	cmp	r3, #32
 8004cae:	f040 80da 	bne.w	8004e66 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d101      	bne.n	8004cc0 <HAL_I2C_Master_Transmit+0x30>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e0d3      	b.n	8004e68 <HAL_I2C_Master_Transmit+0x1d8>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cc8:	f7fe f85e 	bl	8002d88 <HAL_GetTick>
 8004ccc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	2319      	movs	r3, #25
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f001 f803 	bl	8005ce6 <I2C_WaitOnFlagUntilTimeout>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e0be      	b.n	8004e68 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2221      	movs	r2, #33	; 0x21
 8004cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2210      	movs	r2, #16
 8004cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	893a      	ldrh	r2, [r7, #8]
 8004d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	2bff      	cmp	r3, #255	; 0xff
 8004d1a:	d90e      	bls.n	8004d3a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	22ff      	movs	r2, #255	; 0xff
 8004d20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	8979      	ldrh	r1, [r7, #10]
 8004d2a:	4b51      	ldr	r3, [pc, #324]	; (8004e70 <HAL_I2C_Master_Transmit+0x1e0>)
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f001 f966 	bl	8006004 <I2C_TransferConfig>
 8004d38:	e06c      	b.n	8004e14 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	8979      	ldrh	r1, [r7, #10]
 8004d4c:	4b48      	ldr	r3, [pc, #288]	; (8004e70 <HAL_I2C_Master_Transmit+0x1e0>)
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f001 f955 	bl	8006004 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004d5a:	e05b      	b.n	8004e14 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	6a39      	ldr	r1, [r7, #32]
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f001 f800 	bl	8005d66 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e07b      	b.n	8004e68 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	781a      	ldrb	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d034      	beq.n	8004e14 <HAL_I2C_Master_Transmit+0x184>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d130      	bne.n	8004e14 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	2200      	movs	r2, #0
 8004dba:	2180      	movs	r1, #128	; 0x80
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 ff92 	bl	8005ce6 <I2C_WaitOnFlagUntilTimeout>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e04d      	b.n	8004e68 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	2bff      	cmp	r3, #255	; 0xff
 8004dd4:	d90e      	bls.n	8004df4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	22ff      	movs	r2, #255	; 0xff
 8004dda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	8979      	ldrh	r1, [r7, #10]
 8004de4:	2300      	movs	r3, #0
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f001 f909 	bl	8006004 <I2C_TransferConfig>
 8004df2:	e00f      	b.n	8004e14 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	8979      	ldrh	r1, [r7, #10]
 8004e06:	2300      	movs	r3, #0
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f001 f8f8 	bl	8006004 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d19e      	bne.n	8004d5c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	6a39      	ldr	r1, [r7, #32]
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 ffdf 	bl	8005de6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e01a      	b.n	8004e68 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2220      	movs	r2, #32
 8004e38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6859      	ldr	r1, [r3, #4]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	4b0b      	ldr	r3, [pc, #44]	; (8004e74 <HAL_I2C_Master_Transmit+0x1e4>)
 8004e46:	400b      	ands	r3, r1
 8004e48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e62:	2300      	movs	r3, #0
 8004e64:	e000      	b.n	8004e68 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004e66:	2302      	movs	r3, #2
  }
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	80002000 	.word	0x80002000
 8004e74:	fe00e800 	.word	0xfe00e800

08004e78 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b088      	sub	sp, #32
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	607a      	str	r2, [r7, #4]
 8004e82:	461a      	mov	r2, r3
 8004e84:	460b      	mov	r3, r1
 8004e86:	817b      	strh	r3, [r7, #10]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b20      	cmp	r3, #32
 8004e96:	f040 80db 	bne.w	8005050 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d101      	bne.n	8004ea8 <HAL_I2C_Master_Receive+0x30>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	e0d4      	b.n	8005052 <HAL_I2C_Master_Receive+0x1da>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004eb0:	f7fd ff6a 	bl	8002d88 <HAL_GetTick>
 8004eb4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	2319      	movs	r3, #25
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 ff0f 	bl	8005ce6 <I2C_WaitOnFlagUntilTimeout>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e0bf      	b.n	8005052 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2222      	movs	r2, #34	; 0x22
 8004ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2210      	movs	r2, #16
 8004ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	893a      	ldrh	r2, [r7, #8]
 8004ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2bff      	cmp	r3, #255	; 0xff
 8004f02:	d90e      	bls.n	8004f22 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	22ff      	movs	r2, #255	; 0xff
 8004f08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	8979      	ldrh	r1, [r7, #10]
 8004f12:	4b52      	ldr	r3, [pc, #328]	; (800505c <HAL_I2C_Master_Receive+0x1e4>)
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f001 f872 	bl	8006004 <I2C_TransferConfig>
 8004f20:	e06d      	b.n	8004ffe <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	8979      	ldrh	r1, [r7, #10]
 8004f34:	4b49      	ldr	r3, [pc, #292]	; (800505c <HAL_I2C_Master_Receive+0x1e4>)
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f001 f861 	bl	8006004 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004f42:	e05c      	b.n	8004ffe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	6a39      	ldr	r1, [r7, #32]
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 ff89 	bl	8005e60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e07c      	b.n	8005052 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	3b01      	subs	r3, #1
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d034      	beq.n	8004ffe <HAL_I2C_Master_Receive+0x186>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d130      	bne.n	8004ffe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2180      	movs	r1, #128	; 0x80
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 fe9d 	bl	8005ce6 <I2C_WaitOnFlagUntilTimeout>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e04d      	b.n	8005052 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2bff      	cmp	r3, #255	; 0xff
 8004fbe:	d90e      	bls.n	8004fde <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	22ff      	movs	r2, #255	; 0xff
 8004fc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	8979      	ldrh	r1, [r7, #10]
 8004fce:	2300      	movs	r3, #0
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f001 f814 	bl	8006004 <I2C_TransferConfig>
 8004fdc:	e00f      	b.n	8004ffe <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	8979      	ldrh	r1, [r7, #10]
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f001 f803 	bl	8006004 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005002:	b29b      	uxth	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d19d      	bne.n	8004f44 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	6a39      	ldr	r1, [r7, #32]
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f000 feea 	bl	8005de6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e01a      	b.n	8005052 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2220      	movs	r2, #32
 8005022:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6859      	ldr	r1, [r3, #4]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	4b0c      	ldr	r3, [pc, #48]	; (8005060 <HAL_I2C_Master_Receive+0x1e8>)
 8005030:	400b      	ands	r3, r1
 8005032:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2220      	movs	r2, #32
 8005038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800504c:	2300      	movs	r3, #0
 800504e:	e000      	b.n	8005052 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005050:	2302      	movs	r3, #2
  }
}
 8005052:	4618      	mov	r0, r3
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	80002400 	.word	0x80002400
 8005060:	fe00e800 	.word	0xfe00e800

08005064 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08a      	sub	sp, #40	; 0x28
 8005068:	af02      	add	r7, sp, #8
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	607a      	str	r2, [r7, #4]
 800506e:	603b      	str	r3, [r7, #0]
 8005070:	460b      	mov	r3, r1
 8005072:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005074:	2300      	movs	r3, #0
 8005076:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b20      	cmp	r3, #32
 8005082:	f040 80f1 	bne.w	8005268 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005094:	d101      	bne.n	800509a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005096:	2302      	movs	r3, #2
 8005098:	e0e7      	b.n	800526a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d101      	bne.n	80050a8 <HAL_I2C_IsDeviceReady+0x44>
 80050a4:	2302      	movs	r3, #2
 80050a6:	e0e0      	b.n	800526a <HAL_I2C_IsDeviceReady+0x206>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2224      	movs	r2, #36	; 0x24
 80050b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d107      	bne.n	80050d6 <HAL_I2C_IsDeviceReady+0x72>
 80050c6:	897b      	ldrh	r3, [r7, #10]
 80050c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80050d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80050d4:	e004      	b.n	80050e0 <HAL_I2C_IsDeviceReady+0x7c>
 80050d6:	897b      	ldrh	r3, [r7, #10]
 80050d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050dc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	6812      	ldr	r2, [r2, #0]
 80050e4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80050e6:	f7fd fe4f 	bl	8002d88 <HAL_GetTick>
 80050ea:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	f003 0320 	and.w	r3, r3, #32
 80050f6:	2b20      	cmp	r3, #32
 80050f8:	bf0c      	ite	eq
 80050fa:	2301      	moveq	r3, #1
 80050fc:	2300      	movne	r3, #0
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	f003 0310 	and.w	r3, r3, #16
 800510c:	2b10      	cmp	r3, #16
 800510e:	bf0c      	ite	eq
 8005110:	2301      	moveq	r3, #1
 8005112:	2300      	movne	r3, #0
 8005114:	b2db      	uxtb	r3, r3
 8005116:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005118:	e034      	b.n	8005184 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005120:	d01a      	beq.n	8005158 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005122:	f7fd fe31 	bl	8002d88 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	429a      	cmp	r2, r3
 8005130:	d302      	bcc.n	8005138 <HAL_I2C_IsDeviceReady+0xd4>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10f      	bne.n	8005158 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005144:	f043 0220 	orr.w	r2, r3, #32
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e088      	b.n	800526a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	f003 0320 	and.w	r3, r3, #32
 8005162:	2b20      	cmp	r3, #32
 8005164:	bf0c      	ite	eq
 8005166:	2301      	moveq	r3, #1
 8005168:	2300      	movne	r3, #0
 800516a:	b2db      	uxtb	r3, r3
 800516c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	f003 0310 	and.w	r3, r3, #16
 8005178:	2b10      	cmp	r3, #16
 800517a:	bf0c      	ite	eq
 800517c:	2301      	moveq	r3, #1
 800517e:	2300      	movne	r3, #0
 8005180:	b2db      	uxtb	r3, r3
 8005182:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005184:	7ffb      	ldrb	r3, [r7, #31]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d102      	bne.n	8005190 <HAL_I2C_IsDeviceReady+0x12c>
 800518a:	7fbb      	ldrb	r3, [r7, #30]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0c4      	beq.n	800511a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	f003 0310 	and.w	r3, r3, #16
 800519a:	2b10      	cmp	r3, #16
 800519c:	d01a      	beq.n	80051d4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2200      	movs	r2, #0
 80051a6:	2120      	movs	r1, #32
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 fd9c 	bl	8005ce6 <I2C_WaitOnFlagUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e058      	b.n	800526a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2220      	movs	r2, #32
 80051be:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	e04a      	b.n	800526a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2200      	movs	r2, #0
 80051dc:	2120      	movs	r1, #32
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 fd81 	bl	8005ce6 <I2C_WaitOnFlagUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e03d      	b.n	800526a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2210      	movs	r2, #16
 80051f4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2220      	movs	r2, #32
 80051fc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	429a      	cmp	r2, r3
 8005204:	d118      	bne.n	8005238 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005214:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2200      	movs	r2, #0
 800521e:	2120      	movs	r1, #32
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 fd60 	bl	8005ce6 <I2C_WaitOnFlagUntilTimeout>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e01c      	b.n	800526a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2220      	movs	r2, #32
 8005236:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	3301      	adds	r3, #1
 800523c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	429a      	cmp	r2, r3
 8005244:	f63f af3b 	bhi.w	80050be <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005254:	f043 0220 	orr.w	r2, r3, #32
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e000      	b.n	800526a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005268:	2302      	movs	r3, #2
  }
}
 800526a:	4618      	mov	r0, r3
 800526c:	3720      	adds	r7, #32
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528e:	2b00      	cmp	r3, #0
 8005290:	d005      	beq.n	800529e <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	68f9      	ldr	r1, [r7, #12]
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	4798      	blx	r3
  }
}
 800529e:	bf00      	nop
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b086      	sub	sp, #24
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	0a1b      	lsrs	r3, r3, #8
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d010      	beq.n	80052ec <HAL_I2C_ER_IRQHandler+0x46>
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	09db      	lsrs	r3, r3, #7
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052da:	f043 0201 	orr.w	r2, r3, #1
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052ea:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	0a9b      	lsrs	r3, r3, #10
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d010      	beq.n	800531a <HAL_I2C_ER_IRQHandler+0x74>
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	09db      	lsrs	r3, r3, #7
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00a      	beq.n	800531a <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005308:	f043 0208 	orr.w	r2, r3, #8
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005318:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	0a5b      	lsrs	r3, r3, #9
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d010      	beq.n	8005348 <HAL_I2C_ER_IRQHandler+0xa2>
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	09db      	lsrs	r3, r3, #7
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00a      	beq.n	8005348 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005336:	f043 0202 	orr.w	r2, r3, #2
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005346:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f003 030b 	and.w	r3, r3, #11
 8005354:	2b00      	cmp	r3, #0
 8005356:	d003      	beq.n	8005360 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005358:	68f9      	ldr	r1, [r7, #12]
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 fb8a 	bl	8005a74 <I2C_ITError>
  }
}
 8005360:	bf00      	nop
 8005362:	3718      	adds	r7, #24
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	460b      	mov	r3, r1
 800539a:	70fb      	strb	r3, [r7, #3]
 800539c:	4613      	mov	r3, r2
 800539e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005404:	2b01      	cmp	r3, #1
 8005406:	d101      	bne.n	800540c <I2C_Slave_ISR_IT+0x24>
 8005408:	2302      	movs	r3, #2
 800540a:	e0ec      	b.n	80055e6 <I2C_Slave_ISR_IT+0x1fe>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	095b      	lsrs	r3, r3, #5
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d009      	beq.n	8005434 <I2C_Slave_ISR_IT+0x4c>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	095b      	lsrs	r3, r3, #5
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b00      	cmp	r3, #0
 800542a:	d003      	beq.n	8005434 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800542c:	6939      	ldr	r1, [r7, #16]
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 f9c0 	bl	80057b4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	091b      	lsrs	r3, r3, #4
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	d04d      	beq.n	80054dc <I2C_Slave_ISR_IT+0xf4>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	091b      	lsrs	r3, r3, #4
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b00      	cmp	r3, #0
 800544a:	d047      	beq.n	80054dc <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005450:	b29b      	uxth	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d128      	bne.n	80054a8 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b28      	cmp	r3, #40	; 0x28
 8005460:	d108      	bne.n	8005474 <I2C_Slave_ISR_IT+0x8c>
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005468:	d104      	bne.n	8005474 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800546a:	6939      	ldr	r1, [r7, #16]
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 faab 	bl	80059c8 <I2C_ITListenCplt>
 8005472:	e032      	b.n	80054da <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b29      	cmp	r3, #41	; 0x29
 800547e:	d10e      	bne.n	800549e <I2C_Slave_ISR_IT+0xb6>
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005486:	d00a      	beq.n	800549e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2210      	movs	r2, #16
 800548e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 fbe6 	bl	8005c62 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 f92d 	bl	80056f6 <I2C_ITSlaveSeqCplt>
 800549c:	e01d      	b.n	80054da <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2210      	movs	r2, #16
 80054a4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80054a6:	e096      	b.n	80055d6 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2210      	movs	r2, #16
 80054ae:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b4:	f043 0204 	orr.w	r2, r3, #4
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d004      	beq.n	80054cc <I2C_Slave_ISR_IT+0xe4>
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054c8:	f040 8085 	bne.w	80055d6 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d0:	4619      	mov	r1, r3
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 face 	bl	8005a74 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80054d8:	e07d      	b.n	80055d6 <I2C_Slave_ISR_IT+0x1ee>
 80054da:	e07c      	b.n	80055d6 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	089b      	lsrs	r3, r3, #2
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d030      	beq.n	800554a <I2C_Slave_ISR_IT+0x162>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	089b      	lsrs	r3, r3, #2
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d02a      	beq.n	800554a <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d018      	beq.n	8005530 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	b2d2      	uxtb	r2, r2
 800550a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800551a:	3b01      	subs	r3, #1
 800551c:	b29a      	uxth	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005526:	b29b      	uxth	r3, r3
 8005528:	3b01      	subs	r3, #1
 800552a:	b29a      	uxth	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005534:	b29b      	uxth	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d14f      	bne.n	80055da <I2C_Slave_ISR_IT+0x1f2>
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005540:	d04b      	beq.n	80055da <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f000 f8d7 	bl	80056f6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005548:	e047      	b.n	80055da <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	08db      	lsrs	r3, r3, #3
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	08db      	lsrs	r3, r3, #3
 800555a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800555e:	2b00      	cmp	r3, #0
 8005560:	d004      	beq.n	800556c <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005562:	6939      	ldr	r1, [r7, #16]
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 f842 	bl	80055ee <I2C_ITAddrCplt>
 800556a:	e037      	b.n	80055dc <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	085b      	lsrs	r3, r3, #1
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d031      	beq.n	80055dc <I2C_Slave_ISR_IT+0x1f4>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	085b      	lsrs	r3, r3, #1
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b00      	cmp	r3, #0
 8005582:	d02b      	beq.n	80055dc <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005588:	b29b      	uxth	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d018      	beq.n	80055c0 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005592:	781a      	ldrb	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	1c5a      	adds	r2, r3, #1
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	3b01      	subs	r3, #1
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b6:	3b01      	subs	r3, #1
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	851a      	strh	r2, [r3, #40]	; 0x28
 80055be:	e00d      	b.n	80055dc <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055c6:	d002      	beq.n	80055ce <I2C_Slave_ISR_IT+0x1e6>
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d106      	bne.n	80055dc <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 f891 	bl	80056f6 <I2C_ITSlaveSeqCplt>
 80055d4:	e002      	b.n	80055dc <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80055d6:	bf00      	nop
 80055d8:	e000      	b.n	80055dc <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80055da:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3718      	adds	r7, #24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b084      	sub	sp, #16
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005604:	2b28      	cmp	r3, #40	; 0x28
 8005606:	d16a      	bne.n	80056de <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	0c1b      	lsrs	r3, r3, #16
 8005610:	b2db      	uxtb	r3, r3
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	0c1b      	lsrs	r3, r3, #16
 8005620:	b29b      	uxth	r3, r3
 8005622:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005626:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	b29b      	uxth	r3, r3
 8005630:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005634:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	b29b      	uxth	r3, r3
 800563e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005642:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	2b02      	cmp	r3, #2
 800564a:	d138      	bne.n	80056be <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800564c:	897b      	ldrh	r3, [r7, #10]
 800564e:	09db      	lsrs	r3, r3, #7
 8005650:	b29a      	uxth	r2, r3
 8005652:	89bb      	ldrh	r3, [r7, #12]
 8005654:	4053      	eors	r3, r2
 8005656:	b29b      	uxth	r3, r3
 8005658:	f003 0306 	and.w	r3, r3, #6
 800565c:	2b00      	cmp	r3, #0
 800565e:	d11c      	bne.n	800569a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005660:	897b      	ldrh	r3, [r7, #10]
 8005662:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005672:	2b02      	cmp	r3, #2
 8005674:	d13b      	bne.n	80056ee <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2208      	movs	r2, #8
 8005682:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800568c:	89ba      	ldrh	r2, [r7, #12]
 800568e:	7bfb      	ldrb	r3, [r7, #15]
 8005690:	4619      	mov	r1, r3
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7ff fe7c 	bl	8005390 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005698:	e029      	b.n	80056ee <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800569a:	893b      	ldrh	r3, [r7, #8]
 800569c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800569e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fcdc 	bl	8006060 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80056b0:	89ba      	ldrh	r2, [r7, #12]
 80056b2:	7bfb      	ldrb	r3, [r7, #15]
 80056b4:	4619      	mov	r1, r3
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7ff fe6a 	bl	8005390 <HAL_I2C_AddrCallback>
}
 80056bc:	e017      	b.n	80056ee <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80056be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fccc 	bl	8006060 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80056d0:	89ba      	ldrh	r2, [r7, #12]
 80056d2:	7bfb      	ldrb	r3, [r7, #15]
 80056d4:	4619      	mov	r1, r3
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7ff fe5a 	bl	8005390 <HAL_I2C_AddrCallback>
}
 80056dc:	e007      	b.n	80056ee <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2208      	movs	r2, #8
 80056e4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80056ee:	bf00      	nop
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b084      	sub	sp, #16
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	0b9b      	lsrs	r3, r3, #14
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d008      	beq.n	800572c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	e00d      	b.n	8005748 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	0bdb      	lsrs	r3, r3, #15
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	d007      	beq.n	8005748 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005746:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b29      	cmp	r3, #41	; 0x29
 8005752:	d112      	bne.n	800577a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2228      	movs	r2, #40	; 0x28
 8005758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2221      	movs	r2, #33	; 0x21
 8005760:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005762:	2101      	movs	r1, #1
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fc7b 	bl	8006060 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7ff fdf8 	bl	8005368 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005778:	e017      	b.n	80057aa <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b2a      	cmp	r3, #42	; 0x2a
 8005784:	d111      	bne.n	80057aa <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2228      	movs	r2, #40	; 0x28
 800578a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2222      	movs	r2, #34	; 0x22
 8005792:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005794:	2102      	movs	r1, #2
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fc62 	bl	8006060 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff fde9 	bl	800537c <HAL_I2C_SlaveRxCpltCallback>
}
 80057aa:	bf00      	nop
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
	...

080057b4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057d0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2220      	movs	r2, #32
 80057d8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80057da:	7bfb      	ldrb	r3, [r7, #15]
 80057dc:	2b21      	cmp	r3, #33	; 0x21
 80057de:	d002      	beq.n	80057e6 <I2C_ITSlaveCplt+0x32>
 80057e0:	7bfb      	ldrb	r3, [r7, #15]
 80057e2:	2b29      	cmp	r3, #41	; 0x29
 80057e4:	d108      	bne.n	80057f8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80057e6:	f248 0101 	movw	r1, #32769	; 0x8001
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fc38 	bl	8006060 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2221      	movs	r2, #33	; 0x21
 80057f4:	631a      	str	r2, [r3, #48]	; 0x30
 80057f6:	e00d      	b.n	8005814 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
 80057fa:	2b22      	cmp	r3, #34	; 0x22
 80057fc:	d002      	beq.n	8005804 <I2C_ITSlaveCplt+0x50>
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
 8005800:	2b2a      	cmp	r3, #42	; 0x2a
 8005802:	d107      	bne.n	8005814 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005804:	f248 0102 	movw	r1, #32770	; 0x8002
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fc29 	bl	8006060 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2222      	movs	r2, #34	; 0x22
 8005812:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005822:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6859      	ldr	r1, [r3, #4]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	4b64      	ldr	r3, [pc, #400]	; (80059c0 <I2C_ITSlaveCplt+0x20c>)
 8005830:	400b      	ands	r3, r1
 8005832:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fa14 	bl	8005c62 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	0b9b      	lsrs	r3, r3, #14
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d013      	beq.n	800586e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005854:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585a:	2b00      	cmp	r3, #0
 800585c:	d020      	beq.n	80058a0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	b29a      	uxth	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800586c:	e018      	b.n	80058a0 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	0bdb      	lsrs	r3, r3, #15
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b00      	cmp	r3, #0
 8005878:	d012      	beq.n	80058a0 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005888:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588e:	2b00      	cmp	r3, #0
 8005890:	d006      	beq.n	80058a0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	b29a      	uxth	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	089b      	lsrs	r3, r3, #2
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d020      	beq.n	80058ee <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f023 0304 	bic.w	r3, r3, #4
 80058b2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00c      	beq.n	80058ee <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d8:	3b01      	subs	r3, #1
 80058da:	b29a      	uxth	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	3b01      	subs	r3, #1
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d005      	beq.n	8005904 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058fc:	f043 0204 	orr.w	r2, r3, #4
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005916:	2b00      	cmp	r3, #0
 8005918:	d010      	beq.n	800593c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800591e:	4619      	mov	r1, r3
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 f8a7 	bl	8005a74 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b28      	cmp	r3, #40	; 0x28
 8005930:	d141      	bne.n	80059b6 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005932:	6979      	ldr	r1, [r7, #20]
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f847 	bl	80059c8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800593a:	e03c      	b.n	80059b6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005944:	d014      	beq.n	8005970 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7ff fed5 	bl	80056f6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a1d      	ldr	r2, [pc, #116]	; (80059c4 <I2C_ITSlaveCplt+0x210>)
 8005950:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2220      	movs	r2, #32
 8005956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7ff fd1f 	bl	80053ac <HAL_I2C_ListenCpltCallback>
}
 800596e:	e022      	b.n	80059b6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b22      	cmp	r3, #34	; 0x22
 800597a:	d10e      	bne.n	800599a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2220      	movs	r2, #32
 8005980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7ff fcf2 	bl	800537c <HAL_I2C_SlaveRxCpltCallback>
}
 8005998:	e00d      	b.n	80059b6 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2220      	movs	r2, #32
 800599e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f7ff fcd9 	bl	8005368 <HAL_I2C_SlaveTxCpltCallback>
}
 80059b6:	bf00      	nop
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	fe00e800 	.word	0xfe00e800
 80059c4:	ffff0000 	.word	0xffff0000

080059c8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a26      	ldr	r2, [pc, #152]	; (8005a70 <I2C_ITListenCplt+0xa8>)
 80059d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	089b      	lsrs	r3, r3, #2
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d022      	beq.n	8005a46 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d012      	beq.n	8005a46 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a24:	3b01      	subs	r3, #1
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	3b01      	subs	r3, #1
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3e:	f043 0204 	orr.w	r2, r3, #4
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005a46:	f248 0103 	movw	r1, #32771	; 0x8003
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 fb08 	bl	8006060 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2210      	movs	r2, #16
 8005a56:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7ff fca3 	bl	80053ac <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005a66:	bf00      	nop
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	ffff0000 	.word	0xffff0000

08005a74 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a5d      	ldr	r2, [pc, #372]	; (8005c08 <I2C_ITError+0x194>)
 8005a92:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005aa6:	7bfb      	ldrb	r3, [r7, #15]
 8005aa8:	2b28      	cmp	r3, #40	; 0x28
 8005aaa:	d005      	beq.n	8005ab8 <I2C_ITError+0x44>
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	2b29      	cmp	r3, #41	; 0x29
 8005ab0:	d002      	beq.n	8005ab8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
 8005ab4:	2b2a      	cmp	r3, #42	; 0x2a
 8005ab6:	d10b      	bne.n	8005ad0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005ab8:	2103      	movs	r1, #3
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fad0 	bl	8006060 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2228      	movs	r2, #40	; 0x28
 8005ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a50      	ldr	r2, [pc, #320]	; (8005c0c <I2C_ITError+0x198>)
 8005acc:	635a      	str	r2, [r3, #52]	; 0x34
 8005ace:	e011      	b.n	8005af4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005ad0:	f248 0103 	movw	r1, #32771	; 0x8003
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 fac3 	bl	8006060 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b60      	cmp	r3, #96	; 0x60
 8005ae4:	d003      	beq.n	8005aee <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2220      	movs	r2, #32
 8005aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d039      	beq.n	8005b76 <I2C_ITError+0x102>
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	2b11      	cmp	r3, #17
 8005b06:	d002      	beq.n	8005b0e <I2C_ITError+0x9a>
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	2b21      	cmp	r3, #33	; 0x21
 8005b0c:	d133      	bne.n	8005b76 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b1c:	d107      	bne.n	8005b2e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b2c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fe fea4 	bl	8004880 <HAL_DMA_GetState>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d017      	beq.n	8005b6e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b42:	4a33      	ldr	r2, [pc, #204]	; (8005c10 <I2C_ITError+0x19c>)
 8005b44:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fe fda4 	bl	80046a0 <HAL_DMA_Abort_IT>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d04d      	beq.n	8005bfa <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b68:	4610      	mov	r0, r2
 8005b6a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b6c:	e045      	b.n	8005bfa <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f850 	bl	8005c14 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b74:	e041      	b.n	8005bfa <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d039      	beq.n	8005bf2 <I2C_ITError+0x17e>
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2b12      	cmp	r3, #18
 8005b82:	d002      	beq.n	8005b8a <I2C_ITError+0x116>
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2b22      	cmp	r3, #34	; 0x22
 8005b88:	d133      	bne.n	8005bf2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b98:	d107      	bne.n	8005baa <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ba8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fe fe66 	bl	8004880 <HAL_DMA_GetState>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d017      	beq.n	8005bea <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bbe:	4a14      	ldr	r2, [pc, #80]	; (8005c10 <I2C_ITError+0x19c>)
 8005bc0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7fe fd66 	bl	80046a0 <HAL_DMA_Abort_IT>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d011      	beq.n	8005bfe <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005be4:	4610      	mov	r0, r2
 8005be6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005be8:	e009      	b.n	8005bfe <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f812 	bl	8005c14 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005bf0:	e005      	b.n	8005bfe <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f80e 	bl	8005c14 <I2C_TreatErrorCallback>
  }
}
 8005bf8:	e002      	b.n	8005c00 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005bfa:	bf00      	nop
 8005bfc:	e000      	b.n	8005c00 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005bfe:	bf00      	nop
}
 8005c00:	bf00      	nop
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	ffff0000 	.word	0xffff0000
 8005c0c:	080053e9 	.word	0x080053e9
 8005c10:	08005cab 	.word	0x08005cab

08005c14 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b60      	cmp	r3, #96	; 0x60
 8005c26:	d10e      	bne.n	8005c46 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7ff fbc8 	bl	80053d4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c44:	e009      	b.n	8005c5a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7ff fbb3 	bl	80053c0 <HAL_I2C_ErrorCallback>
}
 8005c5a:	bf00      	nop
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d103      	bne.n	8005c80 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d007      	beq.n	8005c9e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	699a      	ldr	r2, [r3, #24]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f042 0201 	orr.w	r2, r2, #1
 8005c9c:	619a      	str	r2, [r3, #24]
  }
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b084      	sub	sp, #16
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d003      	beq.n	8005cc8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d003      	beq.n	8005cd8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f7ff ff9b 	bl	8005c14 <I2C_TreatErrorCallback>
}
 8005cde:	bf00      	nop
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b084      	sub	sp, #16
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	603b      	str	r3, [r7, #0]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cf6:	e022      	b.n	8005d3e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfe:	d01e      	beq.n	8005d3e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d00:	f7fd f842 	bl	8002d88 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d302      	bcc.n	8005d16 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d113      	bne.n	8005d3e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d1a:	f043 0220 	orr.w	r2, r3, #32
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2220      	movs	r2, #32
 8005d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e00f      	b.n	8005d5e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	699a      	ldr	r2, [r3, #24]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	4013      	ands	r3, r2
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	bf0c      	ite	eq
 8005d4e:	2301      	moveq	r3, #1
 8005d50:	2300      	movne	r3, #0
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	79fb      	ldrb	r3, [r7, #7]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d0cd      	beq.n	8005cf8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b084      	sub	sp, #16
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	60f8      	str	r0, [r7, #12]
 8005d6e:	60b9      	str	r1, [r7, #8]
 8005d70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d72:	e02c      	b.n	8005dce <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	68b9      	ldr	r1, [r7, #8]
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 f8dd 	bl	8005f38 <I2C_IsAcknowledgeFailed>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e02a      	b.n	8005dde <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8e:	d01e      	beq.n	8005dce <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d90:	f7fc fffa 	bl	8002d88 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d302      	bcc.n	8005da6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d113      	bne.n	8005dce <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005daa:	f043 0220 	orr.w	r2, r3, #32
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2220      	movs	r2, #32
 8005db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e007      	b.n	8005dde <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d1cb      	bne.n	8005d74 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	60f8      	str	r0, [r7, #12]
 8005dee:	60b9      	str	r1, [r7, #8]
 8005df0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005df2:	e028      	b.n	8005e46 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	68b9      	ldr	r1, [r7, #8]
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 f89d 	bl	8005f38 <I2C_IsAcknowledgeFailed>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e026      	b.n	8005e56 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e08:	f7fc ffbe 	bl	8002d88 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d302      	bcc.n	8005e1e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d113      	bne.n	8005e46 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e22:	f043 0220 	orr.w	r2, r3, #32
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e007      	b.n	8005e56 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	f003 0320 	and.w	r3, r3, #32
 8005e50:	2b20      	cmp	r3, #32
 8005e52:	d1cf      	bne.n	8005df4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
	...

08005e60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e6c:	e055      	b.n	8005f1a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	68b9      	ldr	r1, [r7, #8]
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f000 f860 	bl	8005f38 <I2C_IsAcknowledgeFailed>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e053      	b.n	8005f2a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	f003 0320 	and.w	r3, r3, #32
 8005e8c:	2b20      	cmp	r3, #32
 8005e8e:	d129      	bne.n	8005ee4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	f003 0304 	and.w	r3, r3, #4
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	d105      	bne.n	8005eaa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	e03f      	b.n	8005f2a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6859      	ldr	r1, [r3, #4]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	4b1d      	ldr	r3, [pc, #116]	; (8005f34 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8005ebe:	400b      	ands	r3, r1
 8005ec0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e022      	b.n	8005f2a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ee4:	f7fc ff50 	bl	8002d88 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d302      	bcc.n	8005efa <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10f      	bne.n	8005f1a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efe:	f043 0220 	orr.w	r2, r3, #32
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e007      	b.n	8005f2a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	f003 0304 	and.w	r3, r3, #4
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d1a2      	bne.n	8005e6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	fe00e800 	.word	0xfe00e800

08005f38 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	f003 0310 	and.w	r3, r3, #16
 8005f4e:	2b10      	cmp	r3, #16
 8005f50:	d151      	bne.n	8005ff6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f52:	e022      	b.n	8005f9a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5a:	d01e      	beq.n	8005f9a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f5c:	f7fc ff14 	bl	8002d88 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d302      	bcc.n	8005f72 <I2C_IsAcknowledgeFailed+0x3a>
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d113      	bne.n	8005f9a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f76:	f043 0220 	orr.w	r2, r3, #32
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2220      	movs	r2, #32
 8005f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e02e      	b.n	8005ff8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	f003 0320 	and.w	r3, r3, #32
 8005fa4:	2b20      	cmp	r3, #32
 8005fa6:	d1d5      	bne.n	8005f54 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2210      	movs	r2, #16
 8005fae:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f7ff fe52 	bl	8005c62 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6859      	ldr	r1, [r3, #4]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	4b0d      	ldr	r3, [pc, #52]	; (8006000 <I2C_IsAcknowledgeFailed+0xc8>)
 8005fca:	400b      	ands	r3, r1
 8005fcc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd2:	f043 0204 	orr.w	r2, r3, #4
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e000      	b.n	8005ff8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	fe00e800 	.word	0xfe00e800

08006004 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	607b      	str	r3, [r7, #4]
 800600e:	460b      	mov	r3, r1
 8006010:	817b      	strh	r3, [r7, #10]
 8006012:	4613      	mov	r3, r2
 8006014:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	0d5b      	lsrs	r3, r3, #21
 8006020:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006024:	4b0d      	ldr	r3, [pc, #52]	; (800605c <I2C_TransferConfig+0x58>)
 8006026:	430b      	orrs	r3, r1
 8006028:	43db      	mvns	r3, r3
 800602a:	ea02 0103 	and.w	r1, r2, r3
 800602e:	897b      	ldrh	r3, [r7, #10]
 8006030:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006034:	7a7b      	ldrb	r3, [r7, #9]
 8006036:	041b      	lsls	r3, r3, #16
 8006038:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800603c:	431a      	orrs	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	431a      	orrs	r2, r3
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	431a      	orrs	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800604e:	bf00      	nop
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	03ff63ff 	.word	0x03ff63ff

08006060 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	460b      	mov	r3, r1
 800606a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800606c:	2300      	movs	r3, #0
 800606e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006070:	887b      	ldrh	r3, [r7, #2]
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00f      	beq.n	800609a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006080:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006088:	b2db      	uxtb	r3, r3
 800608a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800608e:	2b28      	cmp	r3, #40	; 0x28
 8006090:	d003      	beq.n	800609a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006098:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800609a:	887b      	ldrh	r3, [r7, #2]
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00f      	beq.n	80060c4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80060aa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80060b8:	2b28      	cmp	r3, #40	; 0x28
 80060ba:	d003      	beq.n	80060c4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80060c2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80060c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	da03      	bge.n	80060d4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80060d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80060d4:	887b      	ldrh	r3, [r7, #2]
 80060d6:	2b10      	cmp	r3, #16
 80060d8:	d103      	bne.n	80060e2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80060e0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80060e2:	887b      	ldrh	r3, [r7, #2]
 80060e4:	2b20      	cmp	r3, #32
 80060e6:	d103      	bne.n	80060f0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f043 0320 	orr.w	r3, r3, #32
 80060ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80060f0:	887b      	ldrh	r3, [r7, #2]
 80060f2:	2b40      	cmp	r3, #64	; 0x40
 80060f4:	d103      	bne.n	80060fe <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060fc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6819      	ldr	r1, [r3, #0]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	43da      	mvns	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	400a      	ands	r2, r1
 800610e:	601a      	str	r2, [r3, #0]
}
 8006110:	bf00      	nop
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b20      	cmp	r3, #32
 8006130:	d138      	bne.n	80061a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006138:	2b01      	cmp	r3, #1
 800613a:	d101      	bne.n	8006140 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800613c:	2302      	movs	r3, #2
 800613e:	e032      	b.n	80061a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2224      	movs	r2, #36	; 0x24
 800614c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0201 	bic.w	r2, r2, #1
 800615e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800616e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6819      	ldr	r1, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f042 0201 	orr.w	r2, r2, #1
 800618e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2220      	movs	r2, #32
 8006194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061a0:	2300      	movs	r3, #0
 80061a2:	e000      	b.n	80061a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80061a4:	2302      	movs	r3, #2
  }
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b085      	sub	sp, #20
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b20      	cmp	r3, #32
 80061c6:	d139      	bne.n	800623c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d101      	bne.n	80061d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80061d2:	2302      	movs	r3, #2
 80061d4:	e033      	b.n	800623e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2224      	movs	r2, #36	; 0x24
 80061e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 0201 	bic.w	r2, r2, #1
 80061f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006204:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	021b      	lsls	r3, r3, #8
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4313      	orrs	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 0201 	orr.w	r2, r2, #1
 8006226:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2220      	movs	r2, #32
 800622c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006238:	2300      	movs	r3, #0
 800623a:	e000      	b.n	800623e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800623c:	2302      	movs	r3, #2
  }
}
 800623e:	4618      	mov	r0, r3
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
	...

0800624c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006250:	4b05      	ldr	r3, [pc, #20]	; (8006268 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a04      	ldr	r2, [pc, #16]	; (8006268 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800625a:	6013      	str	r3, [r2, #0]
}
 800625c:	bf00      	nop
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	40007000 	.word	0x40007000

0800626c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800626c:	b480      	push	{r7}
 800626e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006270:	4b04      	ldr	r3, [pc, #16]	; (8006284 <HAL_PWREx_GetVoltageRange+0x18>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006278:	4618      	mov	r0, r3
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	40007000 	.word	0x40007000

08006288 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006296:	d130      	bne.n	80062fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006298:	4b23      	ldr	r3, [pc, #140]	; (8006328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80062a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062a4:	d038      	beq.n	8006318 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80062a6:	4b20      	ldr	r3, [pc, #128]	; (8006328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80062ae:	4a1e      	ldr	r2, [pc, #120]	; (8006328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80062b6:	4b1d      	ldr	r3, [pc, #116]	; (800632c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2232      	movs	r2, #50	; 0x32
 80062bc:	fb02 f303 	mul.w	r3, r2, r3
 80062c0:	4a1b      	ldr	r2, [pc, #108]	; (8006330 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80062c2:	fba2 2303 	umull	r2, r3, r2, r3
 80062c6:	0c9b      	lsrs	r3, r3, #18
 80062c8:	3301      	adds	r3, #1
 80062ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062cc:	e002      	b.n	80062d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	3b01      	subs	r3, #1
 80062d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062d4:	4b14      	ldr	r3, [pc, #80]	; (8006328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062d6:	695b      	ldr	r3, [r3, #20]
 80062d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062e0:	d102      	bne.n	80062e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1f2      	bne.n	80062ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80062e8:	4b0f      	ldr	r3, [pc, #60]	; (8006328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062f4:	d110      	bne.n	8006318 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e00f      	b.n	800631a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80062fa:	4b0b      	ldr	r3, [pc, #44]	; (8006328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006306:	d007      	beq.n	8006318 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006308:	4b07      	ldr	r3, [pc, #28]	; (8006328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006310:	4a05      	ldr	r2, [pc, #20]	; (8006328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006312:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006316:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	40007000 	.word	0x40007000
 800632c:	20000130 	.word	0x20000130
 8006330:	431bde83 	.word	0x431bde83

08006334 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b088      	sub	sp, #32
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d102      	bne.n	8006348 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	f000 bc11 	b.w	8006b6a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006348:	4ba0      	ldr	r3, [pc, #640]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f003 030c 	and.w	r3, r3, #12
 8006350:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006352:	4b9e      	ldr	r3, [pc, #632]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	f003 0303 	and.w	r3, r3, #3
 800635a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0310 	and.w	r3, r3, #16
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 80e4 	beq.w	8006532 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d007      	beq.n	8006380 <HAL_RCC_OscConfig+0x4c>
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	2b0c      	cmp	r3, #12
 8006374:	f040 808b 	bne.w	800648e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	2b01      	cmp	r3, #1
 800637c:	f040 8087 	bne.w	800648e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006380:	4b92      	ldr	r3, [pc, #584]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0302 	and.w	r3, r3, #2
 8006388:	2b00      	cmp	r3, #0
 800638a:	d005      	beq.n	8006398 <HAL_RCC_OscConfig+0x64>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d101      	bne.n	8006398 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e3e8      	b.n	8006b6a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a1a      	ldr	r2, [r3, #32]
 800639c:	4b8b      	ldr	r3, [pc, #556]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0308 	and.w	r3, r3, #8
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d004      	beq.n	80063b2 <HAL_RCC_OscConfig+0x7e>
 80063a8:	4b88      	ldr	r3, [pc, #544]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063b0:	e005      	b.n	80063be <HAL_RCC_OscConfig+0x8a>
 80063b2:	4b86      	ldr	r3, [pc, #536]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 80063b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063b8:	091b      	lsrs	r3, r3, #4
 80063ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063be:	4293      	cmp	r3, r2
 80063c0:	d223      	bcs.n	800640a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 fdaa 	bl	8006f20 <RCC_SetFlashLatencyFromMSIRange>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e3c9      	b.n	8006b6a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063d6:	4b7d      	ldr	r3, [pc, #500]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a7c      	ldr	r2, [pc, #496]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 80063dc:	f043 0308 	orr.w	r3, r3, #8
 80063e0:	6013      	str	r3, [r2, #0]
 80063e2:	4b7a      	ldr	r3, [pc, #488]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	4977      	ldr	r1, [pc, #476]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063f4:	4b75      	ldr	r3, [pc, #468]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	4972      	ldr	r1, [pc, #456]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 8006404:	4313      	orrs	r3, r2
 8006406:	604b      	str	r3, [r1, #4]
 8006408:	e025      	b.n	8006456 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800640a:	4b70      	ldr	r3, [pc, #448]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a6f      	ldr	r2, [pc, #444]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 8006410:	f043 0308 	orr.w	r3, r3, #8
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	4b6d      	ldr	r3, [pc, #436]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	496a      	ldr	r1, [pc, #424]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 8006424:	4313      	orrs	r3, r2
 8006426:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006428:	4b68      	ldr	r3, [pc, #416]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	021b      	lsls	r3, r3, #8
 8006436:	4965      	ldr	r1, [pc, #404]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 8006438:	4313      	orrs	r3, r2
 800643a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d109      	bne.n	8006456 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	4618      	mov	r0, r3
 8006448:	f000 fd6a 	bl	8006f20 <RCC_SetFlashLatencyFromMSIRange>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e389      	b.n	8006b6a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006456:	f000 fc6f 	bl	8006d38 <HAL_RCC_GetSysClockFreq>
 800645a:	4602      	mov	r2, r0
 800645c:	4b5b      	ldr	r3, [pc, #364]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	091b      	lsrs	r3, r3, #4
 8006462:	f003 030f 	and.w	r3, r3, #15
 8006466:	495a      	ldr	r1, [pc, #360]	; (80065d0 <HAL_RCC_OscConfig+0x29c>)
 8006468:	5ccb      	ldrb	r3, [r1, r3]
 800646a:	f003 031f 	and.w	r3, r3, #31
 800646e:	fa22 f303 	lsr.w	r3, r2, r3
 8006472:	4a58      	ldr	r2, [pc, #352]	; (80065d4 <HAL_RCC_OscConfig+0x2a0>)
 8006474:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006476:	4b58      	ldr	r3, [pc, #352]	; (80065d8 <HAL_RCC_OscConfig+0x2a4>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4618      	mov	r0, r3
 800647c:	f7fb ff64 	bl	8002348 <HAL_InitTick>
 8006480:	4603      	mov	r3, r0
 8006482:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006484:	7bfb      	ldrb	r3, [r7, #15]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d052      	beq.n	8006530 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800648a:	7bfb      	ldrb	r3, [r7, #15]
 800648c:	e36d      	b.n	8006b6a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d032      	beq.n	80064fc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006496:	4b4d      	ldr	r3, [pc, #308]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a4c      	ldr	r2, [pc, #304]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 800649c:	f043 0301 	orr.w	r3, r3, #1
 80064a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80064a2:	f7fc fc71 	bl	8002d88 <HAL_GetTick>
 80064a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80064a8:	e008      	b.n	80064bc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80064aa:	f7fc fc6d 	bl	8002d88 <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d901      	bls.n	80064bc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e356      	b.n	8006b6a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80064bc:	4b43      	ldr	r3, [pc, #268]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0302 	and.w	r3, r3, #2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d0f0      	beq.n	80064aa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064c8:	4b40      	ldr	r3, [pc, #256]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a3f      	ldr	r2, [pc, #252]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 80064ce:	f043 0308 	orr.w	r3, r3, #8
 80064d2:	6013      	str	r3, [r2, #0]
 80064d4:	4b3d      	ldr	r3, [pc, #244]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	493a      	ldr	r1, [pc, #232]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064e6:	4b39      	ldr	r3, [pc, #228]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	021b      	lsls	r3, r3, #8
 80064f4:	4935      	ldr	r1, [pc, #212]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	604b      	str	r3, [r1, #4]
 80064fa:	e01a      	b.n	8006532 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80064fc:	4b33      	ldr	r3, [pc, #204]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a32      	ldr	r2, [pc, #200]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 8006502:	f023 0301 	bic.w	r3, r3, #1
 8006506:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006508:	f7fc fc3e 	bl	8002d88 <HAL_GetTick>
 800650c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800650e:	e008      	b.n	8006522 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006510:	f7fc fc3a 	bl	8002d88 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	2b02      	cmp	r3, #2
 800651c:	d901      	bls.n	8006522 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e323      	b.n	8006b6a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006522:	4b2a      	ldr	r3, [pc, #168]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1f0      	bne.n	8006510 <HAL_RCC_OscConfig+0x1dc>
 800652e:	e000      	b.n	8006532 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006530:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	d073      	beq.n	8006626 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	2b08      	cmp	r3, #8
 8006542:	d005      	beq.n	8006550 <HAL_RCC_OscConfig+0x21c>
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	2b0c      	cmp	r3, #12
 8006548:	d10e      	bne.n	8006568 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2b03      	cmp	r3, #3
 800654e:	d10b      	bne.n	8006568 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006550:	4b1e      	ldr	r3, [pc, #120]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d063      	beq.n	8006624 <HAL_RCC_OscConfig+0x2f0>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d15f      	bne.n	8006624 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e300      	b.n	8006b6a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006570:	d106      	bne.n	8006580 <HAL_RCC_OscConfig+0x24c>
 8006572:	4b16      	ldr	r3, [pc, #88]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a15      	ldr	r2, [pc, #84]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 8006578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800657c:	6013      	str	r3, [r2, #0]
 800657e:	e01d      	b.n	80065bc <HAL_RCC_OscConfig+0x288>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006588:	d10c      	bne.n	80065a4 <HAL_RCC_OscConfig+0x270>
 800658a:	4b10      	ldr	r3, [pc, #64]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a0f      	ldr	r2, [pc, #60]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 8006590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006594:	6013      	str	r3, [r2, #0]
 8006596:	4b0d      	ldr	r3, [pc, #52]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a0c      	ldr	r2, [pc, #48]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 800659c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065a0:	6013      	str	r3, [r2, #0]
 80065a2:	e00b      	b.n	80065bc <HAL_RCC_OscConfig+0x288>
 80065a4:	4b09      	ldr	r3, [pc, #36]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a08      	ldr	r2, [pc, #32]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 80065aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065ae:	6013      	str	r3, [r2, #0]
 80065b0:	4b06      	ldr	r3, [pc, #24]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a05      	ldr	r2, [pc, #20]	; (80065cc <HAL_RCC_OscConfig+0x298>)
 80065b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d01b      	beq.n	80065fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c4:	f7fc fbe0 	bl	8002d88 <HAL_GetTick>
 80065c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065ca:	e010      	b.n	80065ee <HAL_RCC_OscConfig+0x2ba>
 80065cc:	40021000 	.word	0x40021000
 80065d0:	0800dfe0 	.word	0x0800dfe0
 80065d4:	20000130 	.word	0x20000130
 80065d8:	20000134 	.word	0x20000134
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065dc:	f7fc fbd4 	bl	8002d88 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	2b64      	cmp	r3, #100	; 0x64
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e2bd      	b.n	8006b6a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065ee:	4baf      	ldr	r3, [pc, #700]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d0f0      	beq.n	80065dc <HAL_RCC_OscConfig+0x2a8>
 80065fa:	e014      	b.n	8006626 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065fc:	f7fc fbc4 	bl	8002d88 <HAL_GetTick>
 8006600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006602:	e008      	b.n	8006616 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006604:	f7fc fbc0 	bl	8002d88 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	2b64      	cmp	r3, #100	; 0x64
 8006610:	d901      	bls.n	8006616 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e2a9      	b.n	8006b6a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006616:	4ba5      	ldr	r3, [pc, #660]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1f0      	bne.n	8006604 <HAL_RCC_OscConfig+0x2d0>
 8006622:	e000      	b.n	8006626 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d060      	beq.n	80066f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	2b04      	cmp	r3, #4
 8006636:	d005      	beq.n	8006644 <HAL_RCC_OscConfig+0x310>
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	2b0c      	cmp	r3, #12
 800663c:	d119      	bne.n	8006672 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2b02      	cmp	r3, #2
 8006642:	d116      	bne.n	8006672 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006644:	4b99      	ldr	r3, [pc, #612]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800664c:	2b00      	cmp	r3, #0
 800664e:	d005      	beq.n	800665c <HAL_RCC_OscConfig+0x328>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e286      	b.n	8006b6a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800665c:	4b93      	ldr	r3, [pc, #588]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	061b      	lsls	r3, r3, #24
 800666a:	4990      	ldr	r1, [pc, #576]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 800666c:	4313      	orrs	r3, r2
 800666e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006670:	e040      	b.n	80066f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d023      	beq.n	80066c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800667a:	4b8c      	ldr	r3, [pc, #560]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a8b      	ldr	r2, [pc, #556]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 8006680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006686:	f7fc fb7f 	bl	8002d88 <HAL_GetTick>
 800668a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800668c:	e008      	b.n	80066a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800668e:	f7fc fb7b 	bl	8002d88 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	2b02      	cmp	r3, #2
 800669a:	d901      	bls.n	80066a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e264      	b.n	8006b6a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066a0:	4b82      	ldr	r3, [pc, #520]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d0f0      	beq.n	800668e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066ac:	4b7f      	ldr	r3, [pc, #508]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	061b      	lsls	r3, r3, #24
 80066ba:	497c      	ldr	r1, [pc, #496]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	604b      	str	r3, [r1, #4]
 80066c0:	e018      	b.n	80066f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066c2:	4b7a      	ldr	r3, [pc, #488]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a79      	ldr	r2, [pc, #484]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 80066c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ce:	f7fc fb5b 	bl	8002d88 <HAL_GetTick>
 80066d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066d4:	e008      	b.n	80066e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066d6:	f7fc fb57 	bl	8002d88 <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d901      	bls.n	80066e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e240      	b.n	8006b6a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066e8:	4b70      	ldr	r3, [pc, #448]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1f0      	bne.n	80066d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0308 	and.w	r3, r3, #8
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d03c      	beq.n	800677a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d01c      	beq.n	8006742 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006708:	4b68      	ldr	r3, [pc, #416]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 800670a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800670e:	4a67      	ldr	r2, [pc, #412]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 8006710:	f043 0301 	orr.w	r3, r3, #1
 8006714:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006718:	f7fc fb36 	bl	8002d88 <HAL_GetTick>
 800671c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800671e:	e008      	b.n	8006732 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006720:	f7fc fb32 	bl	8002d88 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	2b02      	cmp	r3, #2
 800672c:	d901      	bls.n	8006732 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e21b      	b.n	8006b6a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006732:	4b5e      	ldr	r3, [pc, #376]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 8006734:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0ef      	beq.n	8006720 <HAL_RCC_OscConfig+0x3ec>
 8006740:	e01b      	b.n	800677a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006742:	4b5a      	ldr	r3, [pc, #360]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 8006744:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006748:	4a58      	ldr	r2, [pc, #352]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 800674a:	f023 0301 	bic.w	r3, r3, #1
 800674e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006752:	f7fc fb19 	bl	8002d88 <HAL_GetTick>
 8006756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006758:	e008      	b.n	800676c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800675a:	f7fc fb15 	bl	8002d88 <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	2b02      	cmp	r3, #2
 8006766:	d901      	bls.n	800676c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e1fe      	b.n	8006b6a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800676c:	4b4f      	ldr	r3, [pc, #316]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 800676e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1ef      	bne.n	800675a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0304 	and.w	r3, r3, #4
 8006782:	2b00      	cmp	r3, #0
 8006784:	f000 80a6 	beq.w	80068d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006788:	2300      	movs	r3, #0
 800678a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800678c:	4b47      	ldr	r3, [pc, #284]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 800678e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10d      	bne.n	80067b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006798:	4b44      	ldr	r3, [pc, #272]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 800679a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800679c:	4a43      	ldr	r2, [pc, #268]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 800679e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067a2:	6593      	str	r3, [r2, #88]	; 0x58
 80067a4:	4b41      	ldr	r3, [pc, #260]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 80067a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067ac:	60bb      	str	r3, [r7, #8]
 80067ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067b0:	2301      	movs	r3, #1
 80067b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067b4:	4b3e      	ldr	r3, [pc, #248]	; (80068b0 <HAL_RCC_OscConfig+0x57c>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d118      	bne.n	80067f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067c0:	4b3b      	ldr	r3, [pc, #236]	; (80068b0 <HAL_RCC_OscConfig+0x57c>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a3a      	ldr	r2, [pc, #232]	; (80068b0 <HAL_RCC_OscConfig+0x57c>)
 80067c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067cc:	f7fc fadc 	bl	8002d88 <HAL_GetTick>
 80067d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067d2:	e008      	b.n	80067e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067d4:	f7fc fad8 	bl	8002d88 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e1c1      	b.n	8006b6a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067e6:	4b32      	ldr	r3, [pc, #200]	; (80068b0 <HAL_RCC_OscConfig+0x57c>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d0f0      	beq.n	80067d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d108      	bne.n	800680c <HAL_RCC_OscConfig+0x4d8>
 80067fa:	4b2c      	ldr	r3, [pc, #176]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 80067fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006800:	4a2a      	ldr	r2, [pc, #168]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 8006802:	f043 0301 	orr.w	r3, r3, #1
 8006806:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800680a:	e024      	b.n	8006856 <HAL_RCC_OscConfig+0x522>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	2b05      	cmp	r3, #5
 8006812:	d110      	bne.n	8006836 <HAL_RCC_OscConfig+0x502>
 8006814:	4b25      	ldr	r3, [pc, #148]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 8006816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800681a:	4a24      	ldr	r2, [pc, #144]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 800681c:	f043 0304 	orr.w	r3, r3, #4
 8006820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006824:	4b21      	ldr	r3, [pc, #132]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 8006826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800682a:	4a20      	ldr	r2, [pc, #128]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 800682c:	f043 0301 	orr.w	r3, r3, #1
 8006830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006834:	e00f      	b.n	8006856 <HAL_RCC_OscConfig+0x522>
 8006836:	4b1d      	ldr	r3, [pc, #116]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 8006838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800683c:	4a1b      	ldr	r2, [pc, #108]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 800683e:	f023 0301 	bic.w	r3, r3, #1
 8006842:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006846:	4b19      	ldr	r3, [pc, #100]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 8006848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800684c:	4a17      	ldr	r2, [pc, #92]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 800684e:	f023 0304 	bic.w	r3, r3, #4
 8006852:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d016      	beq.n	800688c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800685e:	f7fc fa93 	bl	8002d88 <HAL_GetTick>
 8006862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006864:	e00a      	b.n	800687c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006866:	f7fc fa8f 	bl	8002d88 <HAL_GetTick>
 800686a:	4602      	mov	r2, r0
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	f241 3288 	movw	r2, #5000	; 0x1388
 8006874:	4293      	cmp	r3, r2
 8006876:	d901      	bls.n	800687c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e176      	b.n	8006b6a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800687c:	4b0b      	ldr	r3, [pc, #44]	; (80068ac <HAL_RCC_OscConfig+0x578>)
 800687e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0ed      	beq.n	8006866 <HAL_RCC_OscConfig+0x532>
 800688a:	e01a      	b.n	80068c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800688c:	f7fc fa7c 	bl	8002d88 <HAL_GetTick>
 8006890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006892:	e00f      	b.n	80068b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006894:	f7fc fa78 	bl	8002d88 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	f241 3288 	movw	r2, #5000	; 0x1388
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d906      	bls.n	80068b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e15f      	b.n	8006b6a <HAL_RCC_OscConfig+0x836>
 80068aa:	bf00      	nop
 80068ac:	40021000 	.word	0x40021000
 80068b0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80068b4:	4baa      	ldr	r3, [pc, #680]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 80068b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1e8      	bne.n	8006894 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068c2:	7ffb      	ldrb	r3, [r7, #31]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d105      	bne.n	80068d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068c8:	4ba5      	ldr	r3, [pc, #660]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 80068ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068cc:	4aa4      	ldr	r2, [pc, #656]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 80068ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0320 	and.w	r3, r3, #32
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d03c      	beq.n	800695a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d01c      	beq.n	8006922 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80068e8:	4b9d      	ldr	r3, [pc, #628]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 80068ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068ee:	4a9c      	ldr	r2, [pc, #624]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 80068f0:	f043 0301 	orr.w	r3, r3, #1
 80068f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f8:	f7fc fa46 	bl	8002d88 <HAL_GetTick>
 80068fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068fe:	e008      	b.n	8006912 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006900:	f7fc fa42 	bl	8002d88 <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	2b02      	cmp	r3, #2
 800690c:	d901      	bls.n	8006912 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e12b      	b.n	8006b6a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006912:	4b93      	ldr	r3, [pc, #588]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 8006914:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006918:	f003 0302 	and.w	r3, r3, #2
 800691c:	2b00      	cmp	r3, #0
 800691e:	d0ef      	beq.n	8006900 <HAL_RCC_OscConfig+0x5cc>
 8006920:	e01b      	b.n	800695a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006922:	4b8f      	ldr	r3, [pc, #572]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 8006924:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006928:	4a8d      	ldr	r2, [pc, #564]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 800692a:	f023 0301 	bic.w	r3, r3, #1
 800692e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006932:	f7fc fa29 	bl	8002d88 <HAL_GetTick>
 8006936:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006938:	e008      	b.n	800694c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800693a:	f7fc fa25 	bl	8002d88 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	2b02      	cmp	r3, #2
 8006946:	d901      	bls.n	800694c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e10e      	b.n	8006b6a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800694c:	4b84      	ldr	r3, [pc, #528]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 800694e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1ef      	bne.n	800693a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 8102 	beq.w	8006b68 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006968:	2b02      	cmp	r3, #2
 800696a:	f040 80c5 	bne.w	8006af8 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800696e:	4b7c      	ldr	r3, [pc, #496]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	f003 0203 	and.w	r2, r3, #3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697e:	429a      	cmp	r2, r3
 8006980:	d12c      	bne.n	80069dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698c:	3b01      	subs	r3, #1
 800698e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006990:	429a      	cmp	r2, r3
 8006992:	d123      	bne.n	80069dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800699e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d11b      	bne.n	80069dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d113      	bne.n	80069dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069be:	085b      	lsrs	r3, r3, #1
 80069c0:	3b01      	subs	r3, #1
 80069c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d109      	bne.n	80069dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d2:	085b      	lsrs	r3, r3, #1
 80069d4:	3b01      	subs	r3, #1
 80069d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80069d8:	429a      	cmp	r2, r3
 80069da:	d067      	beq.n	8006aac <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	2b0c      	cmp	r3, #12
 80069e0:	d062      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80069e2:	4b5f      	ldr	r3, [pc, #380]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e0bb      	b.n	8006b6a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80069f2:	4b5b      	ldr	r3, [pc, #364]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a5a      	ldr	r2, [pc, #360]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 80069f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80069fe:	f7fc f9c3 	bl	8002d88 <HAL_GetTick>
 8006a02:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a04:	e008      	b.n	8006a18 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a06:	f7fc f9bf 	bl	8002d88 <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d901      	bls.n	8006a18 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e0a8      	b.n	8006b6a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a18:	4b51      	ldr	r3, [pc, #324]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1f0      	bne.n	8006a06 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a24:	4b4e      	ldr	r3, [pc, #312]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 8006a26:	68da      	ldr	r2, [r3, #12]
 8006a28:	4b4e      	ldr	r3, [pc, #312]	; (8006b64 <HAL_RCC_OscConfig+0x830>)
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006a34:	3a01      	subs	r2, #1
 8006a36:	0112      	lsls	r2, r2, #4
 8006a38:	4311      	orrs	r1, r2
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006a3e:	0212      	lsls	r2, r2, #8
 8006a40:	4311      	orrs	r1, r2
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006a46:	0852      	lsrs	r2, r2, #1
 8006a48:	3a01      	subs	r2, #1
 8006a4a:	0552      	lsls	r2, r2, #21
 8006a4c:	4311      	orrs	r1, r2
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006a52:	0852      	lsrs	r2, r2, #1
 8006a54:	3a01      	subs	r2, #1
 8006a56:	0652      	lsls	r2, r2, #25
 8006a58:	4311      	orrs	r1, r2
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a5e:	06d2      	lsls	r2, r2, #27
 8006a60:	430a      	orrs	r2, r1
 8006a62:	493f      	ldr	r1, [pc, #252]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006a68:	4b3d      	ldr	r3, [pc, #244]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a3c      	ldr	r2, [pc, #240]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 8006a6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a74:	4b3a      	ldr	r3, [pc, #232]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	4a39      	ldr	r2, [pc, #228]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 8006a7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006a80:	f7fc f982 	bl	8002d88 <HAL_GetTick>
 8006a84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a86:	e008      	b.n	8006a9a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a88:	f7fc f97e 	bl	8002d88 <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e067      	b.n	8006b6a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a9a:	4b31      	ldr	r3, [pc, #196]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d0f0      	beq.n	8006a88 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006aa6:	e05f      	b.n	8006b68 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e05e      	b.n	8006b6a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006aac:	4b2c      	ldr	r3, [pc, #176]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d157      	bne.n	8006b68 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006ab8:	4b29      	ldr	r3, [pc, #164]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a28      	ldr	r2, [pc, #160]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 8006abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ac2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006ac4:	4b26      	ldr	r3, [pc, #152]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	4a25      	ldr	r2, [pc, #148]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 8006aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ace:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006ad0:	f7fc f95a 	bl	8002d88 <HAL_GetTick>
 8006ad4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ad6:	e008      	b.n	8006aea <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ad8:	f7fc f956 	bl	8002d88 <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e03f      	b.n	8006b6a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006aea:	4b1d      	ldr	r3, [pc, #116]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d0f0      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x7a4>
 8006af6:	e037      	b.n	8006b68 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	2b0c      	cmp	r3, #12
 8006afc:	d02d      	beq.n	8006b5a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006afe:	4b18      	ldr	r3, [pc, #96]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a17      	ldr	r2, [pc, #92]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 8006b04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b08:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b0a:	4b15      	ldr	r3, [pc, #84]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d105      	bne.n	8006b22 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006b16:	4b12      	ldr	r3, [pc, #72]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	4a11      	ldr	r2, [pc, #68]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 8006b1c:	f023 0303 	bic.w	r3, r3, #3
 8006b20:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006b22:	4b0f      	ldr	r3, [pc, #60]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	4a0e      	ldr	r2, [pc, #56]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 8006b28:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006b2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b30:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b32:	f7fc f929 	bl	8002d88 <HAL_GetTick>
 8006b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b38:	e008      	b.n	8006b4c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b3a:	f7fc f925 	bl	8002d88 <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d901      	bls.n	8006b4c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e00e      	b.n	8006b6a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b4c:	4b04      	ldr	r3, [pc, #16]	; (8006b60 <HAL_RCC_OscConfig+0x82c>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1f0      	bne.n	8006b3a <HAL_RCC_OscConfig+0x806>
 8006b58:	e006      	b.n	8006b68 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e005      	b.n	8006b6a <HAL_RCC_OscConfig+0x836>
 8006b5e:	bf00      	nop
 8006b60:	40021000 	.word	0x40021000
 8006b64:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3720      	adds	r7, #32
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop

08006b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e0c8      	b.n	8006d1a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b88:	4b66      	ldr	r3, [pc, #408]	; (8006d24 <HAL_RCC_ClockConfig+0x1b0>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0307 	and.w	r3, r3, #7
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d910      	bls.n	8006bb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b96:	4b63      	ldr	r3, [pc, #396]	; (8006d24 <HAL_RCC_ClockConfig+0x1b0>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f023 0207 	bic.w	r2, r3, #7
 8006b9e:	4961      	ldr	r1, [pc, #388]	; (8006d24 <HAL_RCC_ClockConfig+0x1b0>)
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ba6:	4b5f      	ldr	r3, [pc, #380]	; (8006d24 <HAL_RCC_ClockConfig+0x1b0>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0307 	and.w	r3, r3, #7
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d001      	beq.n	8006bb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e0b0      	b.n	8006d1a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0301 	and.w	r3, r3, #1
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d04c      	beq.n	8006c5e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	2b03      	cmp	r3, #3
 8006bca:	d107      	bne.n	8006bdc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bcc:	4b56      	ldr	r3, [pc, #344]	; (8006d28 <HAL_RCC_ClockConfig+0x1b4>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d121      	bne.n	8006c1c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e09e      	b.n	8006d1a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d107      	bne.n	8006bf4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006be4:	4b50      	ldr	r3, [pc, #320]	; (8006d28 <HAL_RCC_ClockConfig+0x1b4>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d115      	bne.n	8006c1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e092      	b.n	8006d1a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d107      	bne.n	8006c0c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006bfc:	4b4a      	ldr	r3, [pc, #296]	; (8006d28 <HAL_RCC_ClockConfig+0x1b4>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0302 	and.w	r3, r3, #2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d109      	bne.n	8006c1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e086      	b.n	8006d1a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c0c:	4b46      	ldr	r3, [pc, #280]	; (8006d28 <HAL_RCC_ClockConfig+0x1b4>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d101      	bne.n	8006c1c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e07e      	b.n	8006d1a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c1c:	4b42      	ldr	r3, [pc, #264]	; (8006d28 <HAL_RCC_ClockConfig+0x1b4>)
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f023 0203 	bic.w	r2, r3, #3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	493f      	ldr	r1, [pc, #252]	; (8006d28 <HAL_RCC_ClockConfig+0x1b4>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c2e:	f7fc f8ab 	bl	8002d88 <HAL_GetTick>
 8006c32:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c34:	e00a      	b.n	8006c4c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c36:	f7fc f8a7 	bl	8002d88 <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d901      	bls.n	8006c4c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e066      	b.n	8006d1a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c4c:	4b36      	ldr	r3, [pc, #216]	; (8006d28 <HAL_RCC_ClockConfig+0x1b4>)
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f003 020c 	and.w	r2, r3, #12
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d1eb      	bne.n	8006c36 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0302 	and.w	r3, r3, #2
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d008      	beq.n	8006c7c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c6a:	4b2f      	ldr	r3, [pc, #188]	; (8006d28 <HAL_RCC_ClockConfig+0x1b4>)
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	492c      	ldr	r1, [pc, #176]	; (8006d28 <HAL_RCC_ClockConfig+0x1b4>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c7c:	4b29      	ldr	r3, [pc, #164]	; (8006d24 <HAL_RCC_ClockConfig+0x1b0>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0307 	and.w	r3, r3, #7
 8006c84:	683a      	ldr	r2, [r7, #0]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d210      	bcs.n	8006cac <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c8a:	4b26      	ldr	r3, [pc, #152]	; (8006d24 <HAL_RCC_ClockConfig+0x1b0>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f023 0207 	bic.w	r2, r3, #7
 8006c92:	4924      	ldr	r1, [pc, #144]	; (8006d24 <HAL_RCC_ClockConfig+0x1b0>)
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c9a:	4b22      	ldr	r3, [pc, #136]	; (8006d24 <HAL_RCC_ClockConfig+0x1b0>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0307 	and.w	r3, r3, #7
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d001      	beq.n	8006cac <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e036      	b.n	8006d1a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d008      	beq.n	8006cca <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cb8:	4b1b      	ldr	r3, [pc, #108]	; (8006d28 <HAL_RCC_ClockConfig+0x1b4>)
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	4918      	ldr	r1, [pc, #96]	; (8006d28 <HAL_RCC_ClockConfig+0x1b4>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0308 	and.w	r3, r3, #8
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d009      	beq.n	8006cea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cd6:	4b14      	ldr	r3, [pc, #80]	; (8006d28 <HAL_RCC_ClockConfig+0x1b4>)
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	00db      	lsls	r3, r3, #3
 8006ce4:	4910      	ldr	r1, [pc, #64]	; (8006d28 <HAL_RCC_ClockConfig+0x1b4>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006cea:	f000 f825 	bl	8006d38 <HAL_RCC_GetSysClockFreq>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	4b0d      	ldr	r3, [pc, #52]	; (8006d28 <HAL_RCC_ClockConfig+0x1b4>)
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	091b      	lsrs	r3, r3, #4
 8006cf6:	f003 030f 	and.w	r3, r3, #15
 8006cfa:	490c      	ldr	r1, [pc, #48]	; (8006d2c <HAL_RCC_ClockConfig+0x1b8>)
 8006cfc:	5ccb      	ldrb	r3, [r1, r3]
 8006cfe:	f003 031f 	and.w	r3, r3, #31
 8006d02:	fa22 f303 	lsr.w	r3, r2, r3
 8006d06:	4a0a      	ldr	r2, [pc, #40]	; (8006d30 <HAL_RCC_ClockConfig+0x1bc>)
 8006d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006d0a:	4b0a      	ldr	r3, [pc, #40]	; (8006d34 <HAL_RCC_ClockConfig+0x1c0>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fb fb1a 	bl	8002348 <HAL_InitTick>
 8006d14:	4603      	mov	r3, r0
 8006d16:	72fb      	strb	r3, [r7, #11]

  return status;
 8006d18:	7afb      	ldrb	r3, [r7, #11]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	40022000 	.word	0x40022000
 8006d28:	40021000 	.word	0x40021000
 8006d2c:	0800dfe0 	.word	0x0800dfe0
 8006d30:	20000130 	.word	0x20000130
 8006d34:	20000134 	.word	0x20000134

08006d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b089      	sub	sp, #36	; 0x24
 8006d3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	61fb      	str	r3, [r7, #28]
 8006d42:	2300      	movs	r3, #0
 8006d44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d46:	4b3e      	ldr	r3, [pc, #248]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f003 030c 	and.w	r3, r3, #12
 8006d4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d50:	4b3b      	ldr	r3, [pc, #236]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	f003 0303 	and.w	r3, r3, #3
 8006d58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d005      	beq.n	8006d6c <HAL_RCC_GetSysClockFreq+0x34>
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	2b0c      	cmp	r3, #12
 8006d64:	d121      	bne.n	8006daa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d11e      	bne.n	8006daa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006d6c:	4b34      	ldr	r3, [pc, #208]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0308 	and.w	r3, r3, #8
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d107      	bne.n	8006d88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006d78:	4b31      	ldr	r3, [pc, #196]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d7e:	0a1b      	lsrs	r3, r3, #8
 8006d80:	f003 030f 	and.w	r3, r3, #15
 8006d84:	61fb      	str	r3, [r7, #28]
 8006d86:	e005      	b.n	8006d94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006d88:	4b2d      	ldr	r3, [pc, #180]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	091b      	lsrs	r3, r3, #4
 8006d8e:	f003 030f 	and.w	r3, r3, #15
 8006d92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006d94:	4a2b      	ldr	r2, [pc, #172]	; (8006e44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10d      	bne.n	8006dc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006da8:	e00a      	b.n	8006dc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	2b04      	cmp	r3, #4
 8006dae:	d102      	bne.n	8006db6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006db0:	4b25      	ldr	r3, [pc, #148]	; (8006e48 <HAL_RCC_GetSysClockFreq+0x110>)
 8006db2:	61bb      	str	r3, [r7, #24]
 8006db4:	e004      	b.n	8006dc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	2b08      	cmp	r3, #8
 8006dba:	d101      	bne.n	8006dc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006dbc:	4b22      	ldr	r3, [pc, #136]	; (8006e48 <HAL_RCC_GetSysClockFreq+0x110>)
 8006dbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	2b0c      	cmp	r3, #12
 8006dc4:	d134      	bne.n	8006e30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006dc6:	4b1e      	ldr	r3, [pc, #120]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	f003 0303 	and.w	r3, r3, #3
 8006dce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d003      	beq.n	8006dde <HAL_RCC_GetSysClockFreq+0xa6>
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2b03      	cmp	r3, #3
 8006dda:	d003      	beq.n	8006de4 <HAL_RCC_GetSysClockFreq+0xac>
 8006ddc:	e005      	b.n	8006dea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006dde:	4b1a      	ldr	r3, [pc, #104]	; (8006e48 <HAL_RCC_GetSysClockFreq+0x110>)
 8006de0:	617b      	str	r3, [r7, #20]
      break;
 8006de2:	e005      	b.n	8006df0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006de4:	4b18      	ldr	r3, [pc, #96]	; (8006e48 <HAL_RCC_GetSysClockFreq+0x110>)
 8006de6:	617b      	str	r3, [r7, #20]
      break;
 8006de8:	e002      	b.n	8006df0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	617b      	str	r3, [r7, #20]
      break;
 8006dee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006df0:	4b13      	ldr	r3, [pc, #76]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	091b      	lsrs	r3, r3, #4
 8006df6:	f003 0307 	and.w	r3, r3, #7
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006dfe:	4b10      	ldr	r3, [pc, #64]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	0a1b      	lsrs	r3, r3, #8
 8006e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	fb02 f203 	mul.w	r2, r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006e16:	4b0a      	ldr	r3, [pc, #40]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	0e5b      	lsrs	r3, r3, #25
 8006e1c:	f003 0303 	and.w	r3, r3, #3
 8006e20:	3301      	adds	r3, #1
 8006e22:	005b      	lsls	r3, r3, #1
 8006e24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006e30:	69bb      	ldr	r3, [r7, #24]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3724      	adds	r7, #36	; 0x24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	40021000 	.word	0x40021000
 8006e44:	0800dff8 	.word	0x0800dff8
 8006e48:	00f42400 	.word	0x00f42400

08006e4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e50:	4b03      	ldr	r3, [pc, #12]	; (8006e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e52:	681b      	ldr	r3, [r3, #0]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	20000130 	.word	0x20000130

08006e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006e68:	f7ff fff0 	bl	8006e4c <HAL_RCC_GetHCLKFreq>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	4b06      	ldr	r3, [pc, #24]	; (8006e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	0a1b      	lsrs	r3, r3, #8
 8006e74:	f003 0307 	and.w	r3, r3, #7
 8006e78:	4904      	ldr	r1, [pc, #16]	; (8006e8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e7a:	5ccb      	ldrb	r3, [r1, r3]
 8006e7c:	f003 031f 	and.w	r3, r3, #31
 8006e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	40021000 	.word	0x40021000
 8006e8c:	0800dff0 	.word	0x0800dff0

08006e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006e94:	f7ff ffda 	bl	8006e4c <HAL_RCC_GetHCLKFreq>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	4b06      	ldr	r3, [pc, #24]	; (8006eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	0adb      	lsrs	r3, r3, #11
 8006ea0:	f003 0307 	and.w	r3, r3, #7
 8006ea4:	4904      	ldr	r1, [pc, #16]	; (8006eb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006ea6:	5ccb      	ldrb	r3, [r1, r3]
 8006ea8:	f003 031f 	and.w	r3, r3, #31
 8006eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	40021000 	.word	0x40021000
 8006eb8:	0800dff0 	.word	0x0800dff0

08006ebc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	220f      	movs	r2, #15
 8006eca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006ecc:	4b12      	ldr	r3, [pc, #72]	; (8006f18 <HAL_RCC_GetClockConfig+0x5c>)
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f003 0203 	and.w	r2, r3, #3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006ed8:	4b0f      	ldr	r3, [pc, #60]	; (8006f18 <HAL_RCC_GetClockConfig+0x5c>)
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006ee4:	4b0c      	ldr	r3, [pc, #48]	; (8006f18 <HAL_RCC_GetClockConfig+0x5c>)
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006ef0:	4b09      	ldr	r3, [pc, #36]	; (8006f18 <HAL_RCC_GetClockConfig+0x5c>)
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	08db      	lsrs	r3, r3, #3
 8006ef6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006efe:	4b07      	ldr	r3, [pc, #28]	; (8006f1c <HAL_RCC_GetClockConfig+0x60>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0207 	and.w	r2, r3, #7
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	601a      	str	r2, [r3, #0]
}
 8006f0a:	bf00      	nop
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	40021000 	.word	0x40021000
 8006f1c:	40022000 	.word	0x40022000

08006f20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006f28:	2300      	movs	r3, #0
 8006f2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006f2c:	4b2a      	ldr	r3, [pc, #168]	; (8006fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d003      	beq.n	8006f40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006f38:	f7ff f998 	bl	800626c <HAL_PWREx_GetVoltageRange>
 8006f3c:	6178      	str	r0, [r7, #20]
 8006f3e:	e014      	b.n	8006f6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f40:	4b25      	ldr	r3, [pc, #148]	; (8006fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f44:	4a24      	ldr	r2, [pc, #144]	; (8006fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f4a:	6593      	str	r3, [r2, #88]	; 0x58
 8006f4c:	4b22      	ldr	r3, [pc, #136]	; (8006fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f54:	60fb      	str	r3, [r7, #12]
 8006f56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006f58:	f7ff f988 	bl	800626c <HAL_PWREx_GetVoltageRange>
 8006f5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006f5e:	4b1e      	ldr	r3, [pc, #120]	; (8006fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f62:	4a1d      	ldr	r2, [pc, #116]	; (8006fd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f68:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f70:	d10b      	bne.n	8006f8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2b80      	cmp	r3, #128	; 0x80
 8006f76:	d919      	bls.n	8006fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2ba0      	cmp	r3, #160	; 0xa0
 8006f7c:	d902      	bls.n	8006f84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006f7e:	2302      	movs	r3, #2
 8006f80:	613b      	str	r3, [r7, #16]
 8006f82:	e013      	b.n	8006fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006f84:	2301      	movs	r3, #1
 8006f86:	613b      	str	r3, [r7, #16]
 8006f88:	e010      	b.n	8006fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2b80      	cmp	r3, #128	; 0x80
 8006f8e:	d902      	bls.n	8006f96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006f90:	2303      	movs	r3, #3
 8006f92:	613b      	str	r3, [r7, #16]
 8006f94:	e00a      	b.n	8006fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2b80      	cmp	r3, #128	; 0x80
 8006f9a:	d102      	bne.n	8006fa2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	613b      	str	r3, [r7, #16]
 8006fa0:	e004      	b.n	8006fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b70      	cmp	r3, #112	; 0x70
 8006fa6:	d101      	bne.n	8006fac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006fa8:	2301      	movs	r3, #1
 8006faa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006fac:	4b0b      	ldr	r3, [pc, #44]	; (8006fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f023 0207 	bic.w	r2, r3, #7
 8006fb4:	4909      	ldr	r1, [pc, #36]	; (8006fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006fbc:	4b07      	ldr	r3, [pc, #28]	; (8006fdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0307 	and.w	r3, r3, #7
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d001      	beq.n	8006fce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e000      	b.n	8006fd0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3718      	adds	r7, #24
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	40021000 	.word	0x40021000
 8006fdc:	40022000 	.word	0x40022000

08006fe0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006fe8:	2300      	movs	r3, #0
 8006fea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006fec:	2300      	movs	r3, #0
 8006fee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d031      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007000:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007004:	d01a      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007006:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800700a:	d814      	bhi.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800700c:	2b00      	cmp	r3, #0
 800700e:	d009      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007010:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007014:	d10f      	bne.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007016:	4bac      	ldr	r3, [pc, #688]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	4aab      	ldr	r2, [pc, #684]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800701c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007020:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007022:	e00c      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	3304      	adds	r3, #4
 8007028:	2100      	movs	r1, #0
 800702a:	4618      	mov	r0, r3
 800702c:	f000 f9dc 	bl	80073e8 <RCCEx_PLLSAI1_Config>
 8007030:	4603      	mov	r3, r0
 8007032:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007034:	e003      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	74fb      	strb	r3, [r7, #19]
      break;
 800703a:	e000      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800703c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800703e:	7cfb      	ldrb	r3, [r7, #19]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10b      	bne.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007044:	4ba0      	ldr	r3, [pc, #640]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800704a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007052:	499d      	ldr	r1, [pc, #628]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007054:	4313      	orrs	r3, r2
 8007056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800705a:	e001      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800705c:	7cfb      	ldrb	r3, [r7, #19]
 800705e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 8099 	beq.w	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800706e:	2300      	movs	r3, #0
 8007070:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007072:	4b95      	ldr	r3, [pc, #596]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800707e:	2301      	movs	r3, #1
 8007080:	e000      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007082:	2300      	movs	r3, #0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00d      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007088:	4b8f      	ldr	r3, [pc, #572]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800708a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800708c:	4a8e      	ldr	r2, [pc, #568]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800708e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007092:	6593      	str	r3, [r2, #88]	; 0x58
 8007094:	4b8c      	ldr	r3, [pc, #560]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800709c:	60bb      	str	r3, [r7, #8]
 800709e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070a0:	2301      	movs	r3, #1
 80070a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070a4:	4b89      	ldr	r3, [pc, #548]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a88      	ldr	r2, [pc, #544]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80070aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80070b0:	f7fb fe6a 	bl	8002d88 <HAL_GetTick>
 80070b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80070b6:	e009      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070b8:	f7fb fe66 	bl	8002d88 <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d902      	bls.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	74fb      	strb	r3, [r7, #19]
        break;
 80070ca:	e005      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80070cc:	4b7f      	ldr	r3, [pc, #508]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d0ef      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80070d8:	7cfb      	ldrb	r3, [r7, #19]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d155      	bne.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80070de:	4b7a      	ldr	r3, [pc, #488]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80070e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d01e      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d019      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80070fa:	4b73      	ldr	r3, [pc, #460]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80070fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007104:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007106:	4b70      	ldr	r3, [pc, #448]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800710c:	4a6e      	ldr	r2, [pc, #440]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800710e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007116:	4b6c      	ldr	r3, [pc, #432]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800711c:	4a6a      	ldr	r2, [pc, #424]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800711e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007126:	4a68      	ldr	r2, [pc, #416]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b00      	cmp	r3, #0
 8007136:	d016      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007138:	f7fb fe26 	bl	8002d88 <HAL_GetTick>
 800713c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800713e:	e00b      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007140:	f7fb fe22 	bl	8002d88 <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	f241 3288 	movw	r2, #5000	; 0x1388
 800714e:	4293      	cmp	r3, r2
 8007150:	d902      	bls.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	74fb      	strb	r3, [r7, #19]
            break;
 8007156:	e006      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007158:	4b5b      	ldr	r3, [pc, #364]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800715a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800715e:	f003 0302 	and.w	r3, r3, #2
 8007162:	2b00      	cmp	r3, #0
 8007164:	d0ec      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007166:	7cfb      	ldrb	r3, [r7, #19]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10b      	bne.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800716c:	4b56      	ldr	r3, [pc, #344]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800716e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007172:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800717a:	4953      	ldr	r1, [pc, #332]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800717c:	4313      	orrs	r3, r2
 800717e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007182:	e004      	b.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007184:	7cfb      	ldrb	r3, [r7, #19]
 8007186:	74bb      	strb	r3, [r7, #18]
 8007188:	e001      	b.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800718a:	7cfb      	ldrb	r3, [r7, #19]
 800718c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800718e:	7c7b      	ldrb	r3, [r7, #17]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d105      	bne.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007194:	4b4c      	ldr	r3, [pc, #304]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007198:	4a4b      	ldr	r2, [pc, #300]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800719a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800719e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00a      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80071ac:	4b46      	ldr	r3, [pc, #280]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80071ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071b2:	f023 0203 	bic.w	r2, r3, #3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	4943      	ldr	r1, [pc, #268]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00a      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80071ce:	4b3e      	ldr	r3, [pc, #248]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80071d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071d4:	f023 020c 	bic.w	r2, r3, #12
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071dc:	493a      	ldr	r1, [pc, #232]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80071de:	4313      	orrs	r3, r2
 80071e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0320 	and.w	r3, r3, #32
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00a      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80071f0:	4b35      	ldr	r3, [pc, #212]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80071f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fe:	4932      	ldr	r1, [pc, #200]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007200:	4313      	orrs	r3, r2
 8007202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00a      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007212:	4b2d      	ldr	r3, [pc, #180]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007218:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007220:	4929      	ldr	r1, [pc, #164]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007222:	4313      	orrs	r3, r2
 8007224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00a      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007234:	4b24      	ldr	r3, [pc, #144]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800723a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007242:	4921      	ldr	r1, [pc, #132]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007244:	4313      	orrs	r3, r2
 8007246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00a      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007256:	4b1c      	ldr	r3, [pc, #112]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800725c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007264:	4918      	ldr	r1, [pc, #96]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007266:	4313      	orrs	r3, r2
 8007268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00a      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007278:	4b13      	ldr	r3, [pc, #76]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800727a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800727e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007286:	4910      	ldr	r1, [pc, #64]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8007288:	4313      	orrs	r3, r2
 800728a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007296:	2b00      	cmp	r3, #0
 8007298:	d02c      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800729a:	4b0b      	ldr	r3, [pc, #44]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800729c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a8:	4907      	ldr	r1, [pc, #28]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072b8:	d10a      	bne.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072ba:	4b03      	ldr	r3, [pc, #12]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	4a02      	ldr	r2, [pc, #8]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80072c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072c4:	60d3      	str	r3, [r2, #12]
 80072c6:	e015      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80072c8:	40021000 	.word	0x40021000
 80072cc:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80072d8:	d10c      	bne.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	3304      	adds	r3, #4
 80072de:	2101      	movs	r1, #1
 80072e0:	4618      	mov	r0, r3
 80072e2:	f000 f881 	bl	80073e8 <RCCEx_PLLSAI1_Config>
 80072e6:	4603      	mov	r3, r0
 80072e8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80072ea:	7cfb      	ldrb	r3, [r7, #19]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d001      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 80072f0:	7cfb      	ldrb	r3, [r7, #19]
 80072f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d028      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007300:	4b30      	ldr	r3, [pc, #192]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007306:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800730e:	492d      	ldr	r1, [pc, #180]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007310:	4313      	orrs	r3, r2
 8007312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800731e:	d106      	bne.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007320:	4b28      	ldr	r3, [pc, #160]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	4a27      	ldr	r2, [pc, #156]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007326:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800732a:	60d3      	str	r3, [r2, #12]
 800732c:	e011      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007332:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007336:	d10c      	bne.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	3304      	adds	r3, #4
 800733c:	2101      	movs	r1, #1
 800733e:	4618      	mov	r0, r3
 8007340:	f000 f852 	bl	80073e8 <RCCEx_PLLSAI1_Config>
 8007344:	4603      	mov	r3, r0
 8007346:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007348:	7cfb      	ldrb	r3, [r7, #19]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d001      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800734e:	7cfb      	ldrb	r3, [r7, #19]
 8007350:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800735a:	2b00      	cmp	r3, #0
 800735c:	d01c      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800735e:	4b19      	ldr	r3, [pc, #100]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007364:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800736c:	4915      	ldr	r1, [pc, #84]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800736e:	4313      	orrs	r3, r2
 8007370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007378:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800737c:	d10c      	bne.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	3304      	adds	r3, #4
 8007382:	2102      	movs	r1, #2
 8007384:	4618      	mov	r0, r3
 8007386:	f000 f82f 	bl	80073e8 <RCCEx_PLLSAI1_Config>
 800738a:	4603      	mov	r3, r0
 800738c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800738e:	7cfb      	ldrb	r3, [r7, #19]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d001      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8007394:	7cfb      	ldrb	r3, [r7, #19]
 8007396:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00a      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80073a4:	4b07      	ldr	r3, [pc, #28]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80073a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073b2:	4904      	ldr	r1, [pc, #16]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80073ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3718      	adds	r7, #24
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	40021000 	.word	0x40021000

080073c8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80073c8:	b480      	push	{r7}
 80073ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80073cc:	4b05      	ldr	r3, [pc, #20]	; (80073e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a04      	ldr	r2, [pc, #16]	; (80073e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80073d2:	f043 0304 	orr.w	r3, r3, #4
 80073d6:	6013      	str	r3, [r2, #0]
}
 80073d8:	bf00      	nop
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	40021000 	.word	0x40021000

080073e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073f2:	2300      	movs	r3, #0
 80073f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80073f6:	4b74      	ldr	r3, [pc, #464]	; (80075c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f003 0303 	and.w	r3, r3, #3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d018      	beq.n	8007434 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007402:	4b71      	ldr	r3, [pc, #452]	; (80075c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	f003 0203 	and.w	r2, r3, #3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	429a      	cmp	r2, r3
 8007410:	d10d      	bne.n	800742e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
       ||
 8007416:	2b00      	cmp	r3, #0
 8007418:	d009      	beq.n	800742e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800741a:	4b6b      	ldr	r3, [pc, #428]	; (80075c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	091b      	lsrs	r3, r3, #4
 8007420:	f003 0307 	and.w	r3, r3, #7
 8007424:	1c5a      	adds	r2, r3, #1
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
       ||
 800742a:	429a      	cmp	r2, r3
 800742c:	d047      	beq.n	80074be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	73fb      	strb	r3, [r7, #15]
 8007432:	e044      	b.n	80074be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b03      	cmp	r3, #3
 800743a:	d018      	beq.n	800746e <RCCEx_PLLSAI1_Config+0x86>
 800743c:	2b03      	cmp	r3, #3
 800743e:	d825      	bhi.n	800748c <RCCEx_PLLSAI1_Config+0xa4>
 8007440:	2b01      	cmp	r3, #1
 8007442:	d002      	beq.n	800744a <RCCEx_PLLSAI1_Config+0x62>
 8007444:	2b02      	cmp	r3, #2
 8007446:	d009      	beq.n	800745c <RCCEx_PLLSAI1_Config+0x74>
 8007448:	e020      	b.n	800748c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800744a:	4b5f      	ldr	r3, [pc, #380]	; (80075c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0302 	and.w	r3, r3, #2
 8007452:	2b00      	cmp	r3, #0
 8007454:	d11d      	bne.n	8007492 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800745a:	e01a      	b.n	8007492 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800745c:	4b5a      	ldr	r3, [pc, #360]	; (80075c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007464:	2b00      	cmp	r3, #0
 8007466:	d116      	bne.n	8007496 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800746c:	e013      	b.n	8007496 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800746e:	4b56      	ldr	r3, [pc, #344]	; (80075c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d10f      	bne.n	800749a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800747a:	4b53      	ldr	r3, [pc, #332]	; (80075c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007482:	2b00      	cmp	r3, #0
 8007484:	d109      	bne.n	800749a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800748a:	e006      	b.n	800749a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	73fb      	strb	r3, [r7, #15]
      break;
 8007490:	e004      	b.n	800749c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007492:	bf00      	nop
 8007494:	e002      	b.n	800749c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007496:	bf00      	nop
 8007498:	e000      	b.n	800749c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800749a:	bf00      	nop
    }

    if(status == HAL_OK)
 800749c:	7bfb      	ldrb	r3, [r7, #15]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10d      	bne.n	80074be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80074a2:	4b49      	ldr	r3, [pc, #292]	; (80075c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6819      	ldr	r1, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	3b01      	subs	r3, #1
 80074b4:	011b      	lsls	r3, r3, #4
 80074b6:	430b      	orrs	r3, r1
 80074b8:	4943      	ldr	r1, [pc, #268]	; (80075c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80074be:	7bfb      	ldrb	r3, [r7, #15]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d17c      	bne.n	80075be <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80074c4:	4b40      	ldr	r3, [pc, #256]	; (80075c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a3f      	ldr	r2, [pc, #252]	; (80075c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80074ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074d0:	f7fb fc5a 	bl	8002d88 <HAL_GetTick>
 80074d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80074d6:	e009      	b.n	80074ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80074d8:	f7fb fc56 	bl	8002d88 <HAL_GetTick>
 80074dc:	4602      	mov	r2, r0
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d902      	bls.n	80074ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	73fb      	strb	r3, [r7, #15]
        break;
 80074ea:	e005      	b.n	80074f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80074ec:	4b36      	ldr	r3, [pc, #216]	; (80075c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1ef      	bne.n	80074d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d15f      	bne.n	80075be <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d110      	bne.n	8007526 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007504:	4b30      	ldr	r3, [pc, #192]	; (80075c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800750c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	6892      	ldr	r2, [r2, #8]
 8007514:	0211      	lsls	r1, r2, #8
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	68d2      	ldr	r2, [r2, #12]
 800751a:	06d2      	lsls	r2, r2, #27
 800751c:	430a      	orrs	r2, r1
 800751e:	492a      	ldr	r1, [pc, #168]	; (80075c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007520:	4313      	orrs	r3, r2
 8007522:	610b      	str	r3, [r1, #16]
 8007524:	e027      	b.n	8007576 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d112      	bne.n	8007552 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800752c:	4b26      	ldr	r3, [pc, #152]	; (80075c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007534:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	6892      	ldr	r2, [r2, #8]
 800753c:	0211      	lsls	r1, r2, #8
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	6912      	ldr	r2, [r2, #16]
 8007542:	0852      	lsrs	r2, r2, #1
 8007544:	3a01      	subs	r2, #1
 8007546:	0552      	lsls	r2, r2, #21
 8007548:	430a      	orrs	r2, r1
 800754a:	491f      	ldr	r1, [pc, #124]	; (80075c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800754c:	4313      	orrs	r3, r2
 800754e:	610b      	str	r3, [r1, #16]
 8007550:	e011      	b.n	8007576 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007552:	4b1d      	ldr	r3, [pc, #116]	; (80075c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800755a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	6892      	ldr	r2, [r2, #8]
 8007562:	0211      	lsls	r1, r2, #8
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	6952      	ldr	r2, [r2, #20]
 8007568:	0852      	lsrs	r2, r2, #1
 800756a:	3a01      	subs	r2, #1
 800756c:	0652      	lsls	r2, r2, #25
 800756e:	430a      	orrs	r2, r1
 8007570:	4915      	ldr	r1, [pc, #84]	; (80075c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007572:	4313      	orrs	r3, r2
 8007574:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007576:	4b14      	ldr	r3, [pc, #80]	; (80075c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a13      	ldr	r2, [pc, #76]	; (80075c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800757c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007580:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007582:	f7fb fc01 	bl	8002d88 <HAL_GetTick>
 8007586:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007588:	e009      	b.n	800759e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800758a:	f7fb fbfd 	bl	8002d88 <HAL_GetTick>
 800758e:	4602      	mov	r2, r0
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	2b02      	cmp	r3, #2
 8007596:	d902      	bls.n	800759e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	73fb      	strb	r3, [r7, #15]
          break;
 800759c:	e005      	b.n	80075aa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800759e:	4b0a      	ldr	r3, [pc, #40]	; (80075c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d0ef      	beq.n	800758a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80075aa:	7bfb      	ldrb	r3, [r7, #15]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d106      	bne.n	80075be <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80075b0:	4b05      	ldr	r3, [pc, #20]	; (80075c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075b2:	691a      	ldr	r2, [r3, #16]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	4903      	ldr	r1, [pc, #12]	; (80075c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80075be:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	40021000 	.word	0x40021000

080075cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d101      	bne.n	80075de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e049      	b.n	8007672 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d106      	bne.n	80075f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f841 	bl	800767a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2202      	movs	r2, #2
 80075fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	3304      	adds	r3, #4
 8007608:	4619      	mov	r1, r3
 800760a:	4610      	mov	r0, r2
 800760c:	f000 fb42 	bl	8007c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3708      	adds	r7, #8
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800767a:	b480      	push	{r7}
 800767c:	b083      	sub	sp, #12
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007682:	bf00      	nop
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
	...

08007690 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d001      	beq.n	80076a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e03b      	b.n	8007720 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2202      	movs	r2, #2
 80076ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68da      	ldr	r2, [r3, #12]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f042 0201 	orr.w	r2, r2, #1
 80076be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a19      	ldr	r2, [pc, #100]	; (800772c <HAL_TIM_Base_Start_IT+0x9c>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d009      	beq.n	80076de <HAL_TIM_Base_Start_IT+0x4e>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076d2:	d004      	beq.n	80076de <HAL_TIM_Base_Start_IT+0x4e>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a15      	ldr	r2, [pc, #84]	; (8007730 <HAL_TIM_Base_Start_IT+0xa0>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d115      	bne.n	800770a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	689a      	ldr	r2, [r3, #8]
 80076e4:	4b13      	ldr	r3, [pc, #76]	; (8007734 <HAL_TIM_Base_Start_IT+0xa4>)
 80076e6:	4013      	ands	r3, r2
 80076e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2b06      	cmp	r3, #6
 80076ee:	d015      	beq.n	800771c <HAL_TIM_Base_Start_IT+0x8c>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076f6:	d011      	beq.n	800771c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f042 0201 	orr.w	r2, r2, #1
 8007706:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007708:	e008      	b.n	800771c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f042 0201 	orr.w	r2, r2, #1
 8007718:	601a      	str	r2, [r3, #0]
 800771a:	e000      	b.n	800771e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800771c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3714      	adds	r7, #20
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	40012c00 	.word	0x40012c00
 8007730:	40014000 	.word	0x40014000
 8007734:	00010007 	.word	0x00010007

08007738 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d101      	bne.n	800774a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e049      	b.n	80077de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d106      	bne.n	8007764 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7fb f8ca 	bl	80028f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2202      	movs	r2, #2
 8007768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	3304      	adds	r3, #4
 8007774:	4619      	mov	r1, r3
 8007776:	4610      	mov	r0, r2
 8007778:	f000 fa8c 	bl	8007c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b082      	sub	sp, #8
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	f003 0302 	and.w	r3, r3, #2
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d122      	bne.n	8007842 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	2b02      	cmp	r3, #2
 8007808:	d11b      	bne.n	8007842 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f06f 0202 	mvn.w	r2, #2
 8007812:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	f003 0303 	and.w	r3, r3, #3
 8007824:	2b00      	cmp	r3, #0
 8007826:	d003      	beq.n	8007830 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fa15 	bl	8007c58 <HAL_TIM_IC_CaptureCallback>
 800782e:	e005      	b.n	800783c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fa07 	bl	8007c44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fa18 	bl	8007c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	f003 0304 	and.w	r3, r3, #4
 800784c:	2b04      	cmp	r3, #4
 800784e:	d122      	bne.n	8007896 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	f003 0304 	and.w	r3, r3, #4
 800785a:	2b04      	cmp	r3, #4
 800785c:	d11b      	bne.n	8007896 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f06f 0204 	mvn.w	r2, #4
 8007866:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2202      	movs	r2, #2
 800786c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007878:	2b00      	cmp	r3, #0
 800787a:	d003      	beq.n	8007884 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 f9eb 	bl	8007c58 <HAL_TIM_IC_CaptureCallback>
 8007882:	e005      	b.n	8007890 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f9dd 	bl	8007c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f9ee 	bl	8007c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	f003 0308 	and.w	r3, r3, #8
 80078a0:	2b08      	cmp	r3, #8
 80078a2:	d122      	bne.n	80078ea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	f003 0308 	and.w	r3, r3, #8
 80078ae:	2b08      	cmp	r3, #8
 80078b0:	d11b      	bne.n	80078ea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f06f 0208 	mvn.w	r2, #8
 80078ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2204      	movs	r2, #4
 80078c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	69db      	ldr	r3, [r3, #28]
 80078c8:	f003 0303 	and.w	r3, r3, #3
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d003      	beq.n	80078d8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f9c1 	bl	8007c58 <HAL_TIM_IC_CaptureCallback>
 80078d6:	e005      	b.n	80078e4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f9b3 	bl	8007c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f9c4 	bl	8007c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	f003 0310 	and.w	r3, r3, #16
 80078f4:	2b10      	cmp	r3, #16
 80078f6:	d122      	bne.n	800793e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	f003 0310 	and.w	r3, r3, #16
 8007902:	2b10      	cmp	r3, #16
 8007904:	d11b      	bne.n	800793e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f06f 0210 	mvn.w	r2, #16
 800790e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2208      	movs	r2, #8
 8007914:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	69db      	ldr	r3, [r3, #28]
 800791c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007920:	2b00      	cmp	r3, #0
 8007922:	d003      	beq.n	800792c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f997 	bl	8007c58 <HAL_TIM_IC_CaptureCallback>
 800792a:	e005      	b.n	8007938 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f989 	bl	8007c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f99a 	bl	8007c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	f003 0301 	and.w	r3, r3, #1
 8007948:	2b01      	cmp	r3, #1
 800794a:	d10e      	bne.n	800796a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b01      	cmp	r3, #1
 8007958:	d107      	bne.n	800796a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f06f 0201 	mvn.w	r2, #1
 8007962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7fa fcb1 	bl	80022cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007974:	2b80      	cmp	r3, #128	; 0x80
 8007976:	d10e      	bne.n	8007996 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007982:	2b80      	cmp	r3, #128	; 0x80
 8007984:	d107      	bne.n	8007996 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800798e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fd49 	bl	8008428 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079a4:	d10e      	bne.n	80079c4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b0:	2b80      	cmp	r3, #128	; 0x80
 80079b2:	d107      	bne.n	80079c4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80079bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 fd3c 	bl	800843c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ce:	2b40      	cmp	r3, #64	; 0x40
 80079d0:	d10e      	bne.n	80079f0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079dc:	2b40      	cmp	r3, #64	; 0x40
 80079de:	d107      	bne.n	80079f0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f948 	bl	8007c80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	f003 0320 	and.w	r3, r3, #32
 80079fa:	2b20      	cmp	r3, #32
 80079fc:	d10e      	bne.n	8007a1c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	f003 0320 	and.w	r3, r3, #32
 8007a08:	2b20      	cmp	r3, #32
 8007a0a:	d107      	bne.n	8007a1c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f06f 0220 	mvn.w	r2, #32
 8007a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fcfc 	bl	8008414 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a1c:	bf00      	nop
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d101      	bne.n	8007a3e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007a3a:	2302      	movs	r3, #2
 8007a3c:	e0fd      	b.n	8007c3a <HAL_TIM_PWM_ConfigChannel+0x216>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2b14      	cmp	r3, #20
 8007a4a:	f200 80f0 	bhi.w	8007c2e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007a4e:	a201      	add	r2, pc, #4	; (adr r2, 8007a54 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a54:	08007aa9 	.word	0x08007aa9
 8007a58:	08007c2f 	.word	0x08007c2f
 8007a5c:	08007c2f 	.word	0x08007c2f
 8007a60:	08007c2f 	.word	0x08007c2f
 8007a64:	08007ae9 	.word	0x08007ae9
 8007a68:	08007c2f 	.word	0x08007c2f
 8007a6c:	08007c2f 	.word	0x08007c2f
 8007a70:	08007c2f 	.word	0x08007c2f
 8007a74:	08007b2b 	.word	0x08007b2b
 8007a78:	08007c2f 	.word	0x08007c2f
 8007a7c:	08007c2f 	.word	0x08007c2f
 8007a80:	08007c2f 	.word	0x08007c2f
 8007a84:	08007b6b 	.word	0x08007b6b
 8007a88:	08007c2f 	.word	0x08007c2f
 8007a8c:	08007c2f 	.word	0x08007c2f
 8007a90:	08007c2f 	.word	0x08007c2f
 8007a94:	08007bad 	.word	0x08007bad
 8007a98:	08007c2f 	.word	0x08007c2f
 8007a9c:	08007c2f 	.word	0x08007c2f
 8007aa0:	08007c2f 	.word	0x08007c2f
 8007aa4:	08007bed 	.word	0x08007bed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68b9      	ldr	r1, [r7, #8]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 f954 	bl	8007d5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	699a      	ldr	r2, [r3, #24]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f042 0208 	orr.w	r2, r2, #8
 8007ac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	699a      	ldr	r2, [r3, #24]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f022 0204 	bic.w	r2, r2, #4
 8007ad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6999      	ldr	r1, [r3, #24]
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	691a      	ldr	r2, [r3, #16]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	619a      	str	r2, [r3, #24]
      break;
 8007ae6:	e0a3      	b.n	8007c30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68b9      	ldr	r1, [r7, #8]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 f9b0 	bl	8007e54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	699a      	ldr	r2, [r3, #24]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	699a      	ldr	r2, [r3, #24]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6999      	ldr	r1, [r3, #24]
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	021a      	lsls	r2, r3, #8
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	619a      	str	r2, [r3, #24]
      break;
 8007b28:	e082      	b.n	8007c30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68b9      	ldr	r1, [r7, #8]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f000 fa09 	bl	8007f48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	69da      	ldr	r2, [r3, #28]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f042 0208 	orr.w	r2, r2, #8
 8007b44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	69da      	ldr	r2, [r3, #28]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f022 0204 	bic.w	r2, r2, #4
 8007b54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	69d9      	ldr	r1, [r3, #28]
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	691a      	ldr	r2, [r3, #16]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	430a      	orrs	r2, r1
 8007b66:	61da      	str	r2, [r3, #28]
      break;
 8007b68:	e062      	b.n	8007c30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68b9      	ldr	r1, [r7, #8]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f000 fa61 	bl	8008038 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	69da      	ldr	r2, [r3, #28]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	69da      	ldr	r2, [r3, #28]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	69d9      	ldr	r1, [r3, #28]
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	021a      	lsls	r2, r3, #8
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	61da      	str	r2, [r3, #28]
      break;
 8007baa:	e041      	b.n	8007c30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68b9      	ldr	r1, [r7, #8]
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f000 fa9e 	bl	80080f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f042 0208 	orr.w	r2, r2, #8
 8007bc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 0204 	bic.w	r2, r2, #4
 8007bd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	691a      	ldr	r2, [r3, #16]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	430a      	orrs	r2, r1
 8007be8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007bea:	e021      	b.n	8007c30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68b9      	ldr	r1, [r7, #8]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f000 fad6 	bl	80081a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	021a      	lsls	r2, r3, #8
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	430a      	orrs	r2, r1
 8007c2a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007c2c:	e000      	b.n	8007c30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8007c2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop

08007c44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c74:	bf00      	nop
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a2a      	ldr	r2, [pc, #168]	; (8007d50 <TIM_Base_SetConfig+0xbc>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d003      	beq.n	8007cb4 <TIM_Base_SetConfig+0x20>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cb2:	d108      	bne.n	8007cc6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a21      	ldr	r2, [pc, #132]	; (8007d50 <TIM_Base_SetConfig+0xbc>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d00b      	beq.n	8007ce6 <TIM_Base_SetConfig+0x52>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cd4:	d007      	beq.n	8007ce6 <TIM_Base_SetConfig+0x52>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a1e      	ldr	r2, [pc, #120]	; (8007d54 <TIM_Base_SetConfig+0xc0>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d003      	beq.n	8007ce6 <TIM_Base_SetConfig+0x52>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a1d      	ldr	r2, [pc, #116]	; (8007d58 <TIM_Base_SetConfig+0xc4>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d108      	bne.n	8007cf8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	689a      	ldr	r2, [r3, #8]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a0c      	ldr	r2, [pc, #48]	; (8007d50 <TIM_Base_SetConfig+0xbc>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d007      	beq.n	8007d34 <TIM_Base_SetConfig+0xa0>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a0b      	ldr	r2, [pc, #44]	; (8007d54 <TIM_Base_SetConfig+0xc0>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d003      	beq.n	8007d34 <TIM_Base_SetConfig+0xa0>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a0a      	ldr	r2, [pc, #40]	; (8007d58 <TIM_Base_SetConfig+0xc4>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d103      	bne.n	8007d3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	691a      	ldr	r2, [r3, #16]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	615a      	str	r2, [r3, #20]
}
 8007d42:	bf00      	nop
 8007d44:	3714      	adds	r7, #20
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	40012c00 	.word	0x40012c00
 8007d54:	40014000 	.word	0x40014000
 8007d58:	40014400 	.word	0x40014400

08007d5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	f023 0201 	bic.w	r2, r3, #1
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a1b      	ldr	r3, [r3, #32]
 8007d76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f023 0303 	bic.w	r3, r3, #3
 8007d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	f023 0302 	bic.w	r3, r3, #2
 8007da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a24      	ldr	r2, [pc, #144]	; (8007e48 <TIM_OC1_SetConfig+0xec>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d007      	beq.n	8007dcc <TIM_OC1_SetConfig+0x70>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a23      	ldr	r2, [pc, #140]	; (8007e4c <TIM_OC1_SetConfig+0xf0>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d003      	beq.n	8007dcc <TIM_OC1_SetConfig+0x70>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4a22      	ldr	r2, [pc, #136]	; (8007e50 <TIM_OC1_SetConfig+0xf4>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d10c      	bne.n	8007de6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	f023 0308 	bic.w	r3, r3, #8
 8007dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f023 0304 	bic.w	r3, r3, #4
 8007de4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a17      	ldr	r2, [pc, #92]	; (8007e48 <TIM_OC1_SetConfig+0xec>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d007      	beq.n	8007dfe <TIM_OC1_SetConfig+0xa2>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a16      	ldr	r2, [pc, #88]	; (8007e4c <TIM_OC1_SetConfig+0xf0>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d003      	beq.n	8007dfe <TIM_OC1_SetConfig+0xa2>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a15      	ldr	r2, [pc, #84]	; (8007e50 <TIM_OC1_SetConfig+0xf4>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d111      	bne.n	8007e22 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	693a      	ldr	r2, [r7, #16]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	685a      	ldr	r2, [r3, #4]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	697a      	ldr	r2, [r7, #20]
 8007e3a:	621a      	str	r2, [r3, #32]
}
 8007e3c:	bf00      	nop
 8007e3e:	371c      	adds	r7, #28
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr
 8007e48:	40012c00 	.word	0x40012c00
 8007e4c:	40014000 	.word	0x40014000
 8007e50:	40014400 	.word	0x40014400

08007e54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b087      	sub	sp, #28
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	f023 0210 	bic.w	r2, r3, #16
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	699b      	ldr	r3, [r3, #24]
 8007e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	021b      	lsls	r3, r3, #8
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	f023 0320 	bic.w	r3, r3, #32
 8007ea2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	011b      	lsls	r3, r3, #4
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a22      	ldr	r2, [pc, #136]	; (8007f3c <TIM_OC2_SetConfig+0xe8>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d10d      	bne.n	8007ed4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	011b      	lsls	r3, r3, #4
 8007ec6:	697a      	ldr	r2, [r7, #20]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ed2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a19      	ldr	r2, [pc, #100]	; (8007f3c <TIM_OC2_SetConfig+0xe8>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d007      	beq.n	8007eec <TIM_OC2_SetConfig+0x98>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a18      	ldr	r2, [pc, #96]	; (8007f40 <TIM_OC2_SetConfig+0xec>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d003      	beq.n	8007eec <TIM_OC2_SetConfig+0x98>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a17      	ldr	r2, [pc, #92]	; (8007f44 <TIM_OC2_SetConfig+0xf0>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d113      	bne.n	8007f14 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ef2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007efa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	695b      	ldr	r3, [r3, #20]
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	693a      	ldr	r2, [r7, #16]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	699b      	ldr	r3, [r3, #24]
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	693a      	ldr	r2, [r7, #16]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	693a      	ldr	r2, [r7, #16]
 8007f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	685a      	ldr	r2, [r3, #4]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	697a      	ldr	r2, [r7, #20]
 8007f2c:	621a      	str	r2, [r3, #32]
}
 8007f2e:	bf00      	nop
 8007f30:	371c      	adds	r7, #28
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	40012c00 	.word	0x40012c00
 8007f40:	40014000 	.word	0x40014000
 8007f44:	40014400 	.word	0x40014400

08007f48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b087      	sub	sp, #28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a1b      	ldr	r3, [r3, #32]
 8007f62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	69db      	ldr	r3, [r3, #28]
 8007f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f023 0303 	bic.w	r3, r3, #3
 8007f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	021b      	lsls	r3, r3, #8
 8007f9c:	697a      	ldr	r2, [r7, #20]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a21      	ldr	r2, [pc, #132]	; (800802c <TIM_OC3_SetConfig+0xe4>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d10d      	bne.n	8007fc6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	021b      	lsls	r3, r3, #8
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a18      	ldr	r2, [pc, #96]	; (800802c <TIM_OC3_SetConfig+0xe4>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d007      	beq.n	8007fde <TIM_OC3_SetConfig+0x96>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a17      	ldr	r2, [pc, #92]	; (8008030 <TIM_OC3_SetConfig+0xe8>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d003      	beq.n	8007fde <TIM_OC3_SetConfig+0x96>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a16      	ldr	r2, [pc, #88]	; (8008034 <TIM_OC3_SetConfig+0xec>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d113      	bne.n	8008006 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	695b      	ldr	r3, [r3, #20]
 8007ff2:	011b      	lsls	r3, r3, #4
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	011b      	lsls	r3, r3, #4
 8008000:	693a      	ldr	r2, [r7, #16]
 8008002:	4313      	orrs	r3, r2
 8008004:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	693a      	ldr	r2, [r7, #16]
 800800a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	685a      	ldr	r2, [r3, #4]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	621a      	str	r2, [r3, #32]
}
 8008020:	bf00      	nop
 8008022:	371c      	adds	r7, #28
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr
 800802c:	40012c00 	.word	0x40012c00
 8008030:	40014000 	.word	0x40014000
 8008034:	40014400 	.word	0x40014400

08008038 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008038:	b480      	push	{r7}
 800803a:	b087      	sub	sp, #28
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a1b      	ldr	r3, [r3, #32]
 8008046:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	69db      	ldr	r3, [r3, #28]
 800805e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800806a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	021b      	lsls	r3, r3, #8
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	4313      	orrs	r3, r2
 800807e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008086:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	031b      	lsls	r3, r3, #12
 800808e:	693a      	ldr	r2, [r7, #16]
 8008090:	4313      	orrs	r3, r2
 8008092:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a14      	ldr	r2, [pc, #80]	; (80080e8 <TIM_OC4_SetConfig+0xb0>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d007      	beq.n	80080ac <TIM_OC4_SetConfig+0x74>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a13      	ldr	r2, [pc, #76]	; (80080ec <TIM_OC4_SetConfig+0xb4>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d003      	beq.n	80080ac <TIM_OC4_SetConfig+0x74>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a12      	ldr	r2, [pc, #72]	; (80080f0 <TIM_OC4_SetConfig+0xb8>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d109      	bne.n	80080c0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	695b      	ldr	r3, [r3, #20]
 80080b8:	019b      	lsls	r3, r3, #6
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	4313      	orrs	r3, r2
 80080be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	621a      	str	r2, [r3, #32]
}
 80080da:	bf00      	nop
 80080dc:	371c      	adds	r7, #28
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	40012c00 	.word	0x40012c00
 80080ec:	40014000 	.word	0x40014000
 80080f0:	40014400 	.word	0x40014400

080080f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b087      	sub	sp, #28
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a1b      	ldr	r3, [r3, #32]
 8008102:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a1b      	ldr	r3, [r3, #32]
 800810e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800811a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	4313      	orrs	r3, r2
 8008130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008138:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	041b      	lsls	r3, r3, #16
 8008140:	693a      	ldr	r2, [r7, #16]
 8008142:	4313      	orrs	r3, r2
 8008144:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a13      	ldr	r2, [pc, #76]	; (8008198 <TIM_OC5_SetConfig+0xa4>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d007      	beq.n	800815e <TIM_OC5_SetConfig+0x6a>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a12      	ldr	r2, [pc, #72]	; (800819c <TIM_OC5_SetConfig+0xa8>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d003      	beq.n	800815e <TIM_OC5_SetConfig+0x6a>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a11      	ldr	r2, [pc, #68]	; (80081a0 <TIM_OC5_SetConfig+0xac>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d109      	bne.n	8008172 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008164:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	021b      	lsls	r3, r3, #8
 800816c:	697a      	ldr	r2, [r7, #20]
 800816e:	4313      	orrs	r3, r2
 8008170:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	697a      	ldr	r2, [r7, #20]
 8008176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	685a      	ldr	r2, [r3, #4]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	621a      	str	r2, [r3, #32]
}
 800818c:	bf00      	nop
 800818e:	371c      	adds	r7, #28
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr
 8008198:	40012c00 	.word	0x40012c00
 800819c:	40014000 	.word	0x40014000
 80081a0:	40014400 	.word	0x40014400

080081a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b087      	sub	sp, #28
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	021b      	lsls	r3, r3, #8
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80081ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	051b      	lsls	r3, r3, #20
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a14      	ldr	r2, [pc, #80]	; (800824c <TIM_OC6_SetConfig+0xa8>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d007      	beq.n	8008210 <TIM_OC6_SetConfig+0x6c>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a13      	ldr	r2, [pc, #76]	; (8008250 <TIM_OC6_SetConfig+0xac>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d003      	beq.n	8008210 <TIM_OC6_SetConfig+0x6c>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a12      	ldr	r2, [pc, #72]	; (8008254 <TIM_OC6_SetConfig+0xb0>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d109      	bne.n	8008224 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008216:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	695b      	ldr	r3, [r3, #20]
 800821c:	029b      	lsls	r3, r3, #10
 800821e:	697a      	ldr	r2, [r7, #20]
 8008220:	4313      	orrs	r3, r2
 8008222:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	697a      	ldr	r2, [r7, #20]
 8008228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	685a      	ldr	r2, [r3, #4]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	621a      	str	r2, [r3, #32]
}
 800823e:	bf00      	nop
 8008240:	371c      	adds	r7, #28
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	40012c00 	.word	0x40012c00
 8008250:	40014000 	.word	0x40014000
 8008254:	40014400 	.word	0x40014400

08008258 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008268:	2b01      	cmp	r3, #1
 800826a:	d101      	bne.n	8008270 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800826c:	2302      	movs	r3, #2
 800826e:	e04f      	b.n	8008310 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2202      	movs	r2, #2
 800827c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a21      	ldr	r2, [pc, #132]	; (800831c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d108      	bne.n	80082ac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80082a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a14      	ldr	r2, [pc, #80]	; (800831c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d009      	beq.n	80082e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082d8:	d004      	beq.n	80082e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a10      	ldr	r2, [pc, #64]	; (8008320 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d10c      	bne.n	80082fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	68ba      	ldr	r2, [r7, #8]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2201      	movs	r2, #1
 8008302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3714      	adds	r7, #20
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr
 800831c:	40012c00 	.word	0x40012c00
 8008320:	40014000 	.word	0x40014000

08008324 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800832e:	2300      	movs	r3, #0
 8008330:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008338:	2b01      	cmp	r3, #1
 800833a:	d101      	bne.n	8008340 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800833c:	2302      	movs	r3, #2
 800833e:	e060      	b.n	8008402 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	4313      	orrs	r3, r2
 8008354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	4313      	orrs	r3, r2
 8008362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	4313      	orrs	r3, r2
 8008370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4313      	orrs	r3, r2
 800837e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	4313      	orrs	r3, r2
 800838c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	695b      	ldr	r3, [r3, #20]
 8008398:	4313      	orrs	r3, r2
 800839a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a6:	4313      	orrs	r3, r2
 80083a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	041b      	lsls	r3, r3, #16
 80083b6:	4313      	orrs	r3, r2
 80083b8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a14      	ldr	r2, [pc, #80]	; (8008410 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d115      	bne.n	80083f0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ce:	051b      	lsls	r3, r3, #20
 80083d0:	4313      	orrs	r3, r2
 80083d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	69db      	ldr	r3, [r3, #28]
 80083de:	4313      	orrs	r3, r2
 80083e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	6a1b      	ldr	r3, [r3, #32]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3714      	adds	r7, #20
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	40012c00 	.word	0x40012c00

08008414 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800841c:	bf00      	nop
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008430:	bf00      	nop
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d101      	bne.n	8008462 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e040      	b.n	80084e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008466:	2b00      	cmp	r3, #0
 8008468:	d106      	bne.n	8008478 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f7fa fb00 	bl	8002a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2224      	movs	r2, #36	; 0x24
 800847c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f022 0201 	bic.w	r2, r2, #1
 800848c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f82c 	bl	80084ec <UART_SetConfig>
 8008494:	4603      	mov	r3, r0
 8008496:	2b01      	cmp	r3, #1
 8008498:	d101      	bne.n	800849e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	e022      	b.n	80084e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d002      	beq.n	80084ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fa2c 	bl	8008904 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	685a      	ldr	r2, [r3, #4]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	689a      	ldr	r2, [r3, #8]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f042 0201 	orr.w	r2, r2, #1
 80084da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fab3 	bl	8008a48 <UART_CheckIdleState>
 80084e2:	4603      	mov	r3, r0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084ec:	b5b0      	push	{r4, r5, r7, lr}
 80084ee:	b088      	sub	sp, #32
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084f4:	2300      	movs	r3, #0
 80084f6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	689a      	ldr	r2, [r3, #8]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	431a      	orrs	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	431a      	orrs	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	69db      	ldr	r3, [r3, #28]
 800850c:	4313      	orrs	r3, r2
 800850e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	4baf      	ldr	r3, [pc, #700]	; (80087d4 <UART_SetConfig+0x2e8>)
 8008518:	4013      	ands	r3, r2
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	6812      	ldr	r2, [r2, #0]
 800851e:	69f9      	ldr	r1, [r7, #28]
 8008520:	430b      	orrs	r3, r1
 8008522:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	68da      	ldr	r2, [r3, #12]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	430a      	orrs	r2, r1
 8008538:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	699b      	ldr	r3, [r3, #24]
 800853e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4aa4      	ldr	r2, [pc, #656]	; (80087d8 <UART_SetConfig+0x2ec>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d004      	beq.n	8008554 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a1b      	ldr	r3, [r3, #32]
 800854e:	69fa      	ldr	r2, [r7, #28]
 8008550:	4313      	orrs	r3, r2
 8008552:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	69fa      	ldr	r2, [r7, #28]
 8008564:	430a      	orrs	r2, r1
 8008566:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a9b      	ldr	r2, [pc, #620]	; (80087dc <UART_SetConfig+0x2f0>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d121      	bne.n	80085b6 <UART_SetConfig+0xca>
 8008572:	4b9b      	ldr	r3, [pc, #620]	; (80087e0 <UART_SetConfig+0x2f4>)
 8008574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008578:	f003 0303 	and.w	r3, r3, #3
 800857c:	2b03      	cmp	r3, #3
 800857e:	d817      	bhi.n	80085b0 <UART_SetConfig+0xc4>
 8008580:	a201      	add	r2, pc, #4	; (adr r2, 8008588 <UART_SetConfig+0x9c>)
 8008582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008586:	bf00      	nop
 8008588:	08008599 	.word	0x08008599
 800858c:	080085a5 	.word	0x080085a5
 8008590:	0800859f 	.word	0x0800859f
 8008594:	080085ab 	.word	0x080085ab
 8008598:	2301      	movs	r3, #1
 800859a:	76fb      	strb	r3, [r7, #27]
 800859c:	e070      	b.n	8008680 <UART_SetConfig+0x194>
 800859e:	2302      	movs	r3, #2
 80085a0:	76fb      	strb	r3, [r7, #27]
 80085a2:	e06d      	b.n	8008680 <UART_SetConfig+0x194>
 80085a4:	2304      	movs	r3, #4
 80085a6:	76fb      	strb	r3, [r7, #27]
 80085a8:	e06a      	b.n	8008680 <UART_SetConfig+0x194>
 80085aa:	2308      	movs	r3, #8
 80085ac:	76fb      	strb	r3, [r7, #27]
 80085ae:	e067      	b.n	8008680 <UART_SetConfig+0x194>
 80085b0:	2310      	movs	r3, #16
 80085b2:	76fb      	strb	r3, [r7, #27]
 80085b4:	e064      	b.n	8008680 <UART_SetConfig+0x194>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a8a      	ldr	r2, [pc, #552]	; (80087e4 <UART_SetConfig+0x2f8>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d132      	bne.n	8008626 <UART_SetConfig+0x13a>
 80085c0:	4b87      	ldr	r3, [pc, #540]	; (80087e0 <UART_SetConfig+0x2f4>)
 80085c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085c6:	f003 030c 	and.w	r3, r3, #12
 80085ca:	2b0c      	cmp	r3, #12
 80085cc:	d828      	bhi.n	8008620 <UART_SetConfig+0x134>
 80085ce:	a201      	add	r2, pc, #4	; (adr r2, 80085d4 <UART_SetConfig+0xe8>)
 80085d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d4:	08008609 	.word	0x08008609
 80085d8:	08008621 	.word	0x08008621
 80085dc:	08008621 	.word	0x08008621
 80085e0:	08008621 	.word	0x08008621
 80085e4:	08008615 	.word	0x08008615
 80085e8:	08008621 	.word	0x08008621
 80085ec:	08008621 	.word	0x08008621
 80085f0:	08008621 	.word	0x08008621
 80085f4:	0800860f 	.word	0x0800860f
 80085f8:	08008621 	.word	0x08008621
 80085fc:	08008621 	.word	0x08008621
 8008600:	08008621 	.word	0x08008621
 8008604:	0800861b 	.word	0x0800861b
 8008608:	2300      	movs	r3, #0
 800860a:	76fb      	strb	r3, [r7, #27]
 800860c:	e038      	b.n	8008680 <UART_SetConfig+0x194>
 800860e:	2302      	movs	r3, #2
 8008610:	76fb      	strb	r3, [r7, #27]
 8008612:	e035      	b.n	8008680 <UART_SetConfig+0x194>
 8008614:	2304      	movs	r3, #4
 8008616:	76fb      	strb	r3, [r7, #27]
 8008618:	e032      	b.n	8008680 <UART_SetConfig+0x194>
 800861a:	2308      	movs	r3, #8
 800861c:	76fb      	strb	r3, [r7, #27]
 800861e:	e02f      	b.n	8008680 <UART_SetConfig+0x194>
 8008620:	2310      	movs	r3, #16
 8008622:	76fb      	strb	r3, [r7, #27]
 8008624:	e02c      	b.n	8008680 <UART_SetConfig+0x194>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a6b      	ldr	r2, [pc, #428]	; (80087d8 <UART_SetConfig+0x2ec>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d125      	bne.n	800867c <UART_SetConfig+0x190>
 8008630:	4b6b      	ldr	r3, [pc, #428]	; (80087e0 <UART_SetConfig+0x2f4>)
 8008632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008636:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800863a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800863e:	d017      	beq.n	8008670 <UART_SetConfig+0x184>
 8008640:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008644:	d817      	bhi.n	8008676 <UART_SetConfig+0x18a>
 8008646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800864a:	d00b      	beq.n	8008664 <UART_SetConfig+0x178>
 800864c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008650:	d811      	bhi.n	8008676 <UART_SetConfig+0x18a>
 8008652:	2b00      	cmp	r3, #0
 8008654:	d003      	beq.n	800865e <UART_SetConfig+0x172>
 8008656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800865a:	d006      	beq.n	800866a <UART_SetConfig+0x17e>
 800865c:	e00b      	b.n	8008676 <UART_SetConfig+0x18a>
 800865e:	2300      	movs	r3, #0
 8008660:	76fb      	strb	r3, [r7, #27]
 8008662:	e00d      	b.n	8008680 <UART_SetConfig+0x194>
 8008664:	2302      	movs	r3, #2
 8008666:	76fb      	strb	r3, [r7, #27]
 8008668:	e00a      	b.n	8008680 <UART_SetConfig+0x194>
 800866a:	2304      	movs	r3, #4
 800866c:	76fb      	strb	r3, [r7, #27]
 800866e:	e007      	b.n	8008680 <UART_SetConfig+0x194>
 8008670:	2308      	movs	r3, #8
 8008672:	76fb      	strb	r3, [r7, #27]
 8008674:	e004      	b.n	8008680 <UART_SetConfig+0x194>
 8008676:	2310      	movs	r3, #16
 8008678:	76fb      	strb	r3, [r7, #27]
 800867a:	e001      	b.n	8008680 <UART_SetConfig+0x194>
 800867c:	2310      	movs	r3, #16
 800867e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a54      	ldr	r2, [pc, #336]	; (80087d8 <UART_SetConfig+0x2ec>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d173      	bne.n	8008772 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800868a:	7efb      	ldrb	r3, [r7, #27]
 800868c:	2b08      	cmp	r3, #8
 800868e:	d824      	bhi.n	80086da <UART_SetConfig+0x1ee>
 8008690:	a201      	add	r2, pc, #4	; (adr r2, 8008698 <UART_SetConfig+0x1ac>)
 8008692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008696:	bf00      	nop
 8008698:	080086bd 	.word	0x080086bd
 800869c:	080086db 	.word	0x080086db
 80086a0:	080086c5 	.word	0x080086c5
 80086a4:	080086db 	.word	0x080086db
 80086a8:	080086cb 	.word	0x080086cb
 80086ac:	080086db 	.word	0x080086db
 80086b0:	080086db 	.word	0x080086db
 80086b4:	080086db 	.word	0x080086db
 80086b8:	080086d3 	.word	0x080086d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086bc:	f7fe fbd2 	bl	8006e64 <HAL_RCC_GetPCLK1Freq>
 80086c0:	6178      	str	r0, [r7, #20]
        break;
 80086c2:	e00f      	b.n	80086e4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086c4:	4b48      	ldr	r3, [pc, #288]	; (80087e8 <UART_SetConfig+0x2fc>)
 80086c6:	617b      	str	r3, [r7, #20]
        break;
 80086c8:	e00c      	b.n	80086e4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086ca:	f7fe fb35 	bl	8006d38 <HAL_RCC_GetSysClockFreq>
 80086ce:	6178      	str	r0, [r7, #20]
        break;
 80086d0:	e008      	b.n	80086e4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086d6:	617b      	str	r3, [r7, #20]
        break;
 80086d8:	e004      	b.n	80086e4 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 80086da:	2300      	movs	r3, #0
 80086dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	76bb      	strb	r3, [r7, #26]
        break;
 80086e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f000 80fe 	beq.w	80088e8 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685a      	ldr	r2, [r3, #4]
 80086f0:	4613      	mov	r3, r2
 80086f2:	005b      	lsls	r3, r3, #1
 80086f4:	4413      	add	r3, r2
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d305      	bcc.n	8008708 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	429a      	cmp	r2, r3
 8008706:	d902      	bls.n	800870e <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	76bb      	strb	r3, [r7, #26]
 800870c:	e0ec      	b.n	80088e8 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	4618      	mov	r0, r3
 8008712:	f04f 0100 	mov.w	r1, #0
 8008716:	f04f 0200 	mov.w	r2, #0
 800871a:	f04f 0300 	mov.w	r3, #0
 800871e:	020b      	lsls	r3, r1, #8
 8008720:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008724:	0202      	lsls	r2, r0, #8
 8008726:	6879      	ldr	r1, [r7, #4]
 8008728:	6849      	ldr	r1, [r1, #4]
 800872a:	0849      	lsrs	r1, r1, #1
 800872c:	4608      	mov	r0, r1
 800872e:	f04f 0100 	mov.w	r1, #0
 8008732:	1814      	adds	r4, r2, r0
 8008734:	eb43 0501 	adc.w	r5, r3, r1
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	461a      	mov	r2, r3
 800873e:	f04f 0300 	mov.w	r3, #0
 8008742:	4620      	mov	r0, r4
 8008744:	4629      	mov	r1, r5
 8008746:	f7f8 fa4f 	bl	8000be8 <__aeabi_uldivmod>
 800874a:	4602      	mov	r2, r0
 800874c:	460b      	mov	r3, r1
 800874e:	4613      	mov	r3, r2
 8008750:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008758:	d308      	bcc.n	800876c <UART_SetConfig+0x280>
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008760:	d204      	bcs.n	800876c <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	693a      	ldr	r2, [r7, #16]
 8008768:	60da      	str	r2, [r3, #12]
 800876a:	e0bd      	b.n	80088e8 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	76bb      	strb	r3, [r7, #26]
 8008770:	e0ba      	b.n	80088e8 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	69db      	ldr	r3, [r3, #28]
 8008776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800877a:	d168      	bne.n	800884e <UART_SetConfig+0x362>
  {
    switch (clocksource)
 800877c:	7efb      	ldrb	r3, [r7, #27]
 800877e:	2b08      	cmp	r3, #8
 8008780:	d834      	bhi.n	80087ec <UART_SetConfig+0x300>
 8008782:	a201      	add	r2, pc, #4	; (adr r2, 8008788 <UART_SetConfig+0x29c>)
 8008784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008788:	080087ad 	.word	0x080087ad
 800878c:	080087b5 	.word	0x080087b5
 8008790:	080087bd 	.word	0x080087bd
 8008794:	080087ed 	.word	0x080087ed
 8008798:	080087c3 	.word	0x080087c3
 800879c:	080087ed 	.word	0x080087ed
 80087a0:	080087ed 	.word	0x080087ed
 80087a4:	080087ed 	.word	0x080087ed
 80087a8:	080087cb 	.word	0x080087cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087ac:	f7fe fb5a 	bl	8006e64 <HAL_RCC_GetPCLK1Freq>
 80087b0:	6178      	str	r0, [r7, #20]
        break;
 80087b2:	e020      	b.n	80087f6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087b4:	f7fe fb6c 	bl	8006e90 <HAL_RCC_GetPCLK2Freq>
 80087b8:	6178      	str	r0, [r7, #20]
        break;
 80087ba:	e01c      	b.n	80087f6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087bc:	4b0a      	ldr	r3, [pc, #40]	; (80087e8 <UART_SetConfig+0x2fc>)
 80087be:	617b      	str	r3, [r7, #20]
        break;
 80087c0:	e019      	b.n	80087f6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087c2:	f7fe fab9 	bl	8006d38 <HAL_RCC_GetSysClockFreq>
 80087c6:	6178      	str	r0, [r7, #20]
        break;
 80087c8:	e015      	b.n	80087f6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087ce:	617b      	str	r3, [r7, #20]
        break;
 80087d0:	e011      	b.n	80087f6 <UART_SetConfig+0x30a>
 80087d2:	bf00      	nop
 80087d4:	efff69f3 	.word	0xefff69f3
 80087d8:	40008000 	.word	0x40008000
 80087dc:	40013800 	.word	0x40013800
 80087e0:	40021000 	.word	0x40021000
 80087e4:	40004400 	.word	0x40004400
 80087e8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80087ec:	2300      	movs	r3, #0
 80087ee:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	76bb      	strb	r3, [r7, #26]
        break;
 80087f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d075      	beq.n	80088e8 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	005a      	lsls	r2, r3, #1
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	085b      	lsrs	r3, r3, #1
 8008806:	441a      	add	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008810:	b29b      	uxth	r3, r3
 8008812:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	2b0f      	cmp	r3, #15
 8008818:	d916      	bls.n	8008848 <UART_SetConfig+0x35c>
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008820:	d212      	bcs.n	8008848 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	b29b      	uxth	r3, r3
 8008826:	f023 030f 	bic.w	r3, r3, #15
 800882a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	085b      	lsrs	r3, r3, #1
 8008830:	b29b      	uxth	r3, r3
 8008832:	f003 0307 	and.w	r3, r3, #7
 8008836:	b29a      	uxth	r2, r3
 8008838:	89fb      	ldrh	r3, [r7, #14]
 800883a:	4313      	orrs	r3, r2
 800883c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	89fa      	ldrh	r2, [r7, #14]
 8008844:	60da      	str	r2, [r3, #12]
 8008846:	e04f      	b.n	80088e8 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	76bb      	strb	r3, [r7, #26]
 800884c:	e04c      	b.n	80088e8 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800884e:	7efb      	ldrb	r3, [r7, #27]
 8008850:	2b08      	cmp	r3, #8
 8008852:	d828      	bhi.n	80088a6 <UART_SetConfig+0x3ba>
 8008854:	a201      	add	r2, pc, #4	; (adr r2, 800885c <UART_SetConfig+0x370>)
 8008856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885a:	bf00      	nop
 800885c:	08008881 	.word	0x08008881
 8008860:	08008889 	.word	0x08008889
 8008864:	08008891 	.word	0x08008891
 8008868:	080088a7 	.word	0x080088a7
 800886c:	08008897 	.word	0x08008897
 8008870:	080088a7 	.word	0x080088a7
 8008874:	080088a7 	.word	0x080088a7
 8008878:	080088a7 	.word	0x080088a7
 800887c:	0800889f 	.word	0x0800889f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008880:	f7fe faf0 	bl	8006e64 <HAL_RCC_GetPCLK1Freq>
 8008884:	6178      	str	r0, [r7, #20]
        break;
 8008886:	e013      	b.n	80088b0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008888:	f7fe fb02 	bl	8006e90 <HAL_RCC_GetPCLK2Freq>
 800888c:	6178      	str	r0, [r7, #20]
        break;
 800888e:	e00f      	b.n	80088b0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008890:	4b1b      	ldr	r3, [pc, #108]	; (8008900 <UART_SetConfig+0x414>)
 8008892:	617b      	str	r3, [r7, #20]
        break;
 8008894:	e00c      	b.n	80088b0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008896:	f7fe fa4f 	bl	8006d38 <HAL_RCC_GetSysClockFreq>
 800889a:	6178      	str	r0, [r7, #20]
        break;
 800889c:	e008      	b.n	80088b0 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800889e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088a2:	617b      	str	r3, [r7, #20]
        break;
 80088a4:	e004      	b.n	80088b0 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 80088a6:	2300      	movs	r3, #0
 80088a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	76bb      	strb	r3, [r7, #26]
        break;
 80088ae:	bf00      	nop
    }

    if (pclk != 0U)
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d018      	beq.n	80088e8 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	085a      	lsrs	r2, r3, #1
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	441a      	add	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	2b0f      	cmp	r3, #15
 80088d0:	d908      	bls.n	80088e4 <UART_SetConfig+0x3f8>
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088d8:	d204      	bcs.n	80088e4 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	60da      	str	r2, [r3, #12]
 80088e2:	e001      	b.n	80088e8 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80088f4:	7ebb      	ldrb	r3, [r7, #26]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3720      	adds	r7, #32
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bdb0      	pop	{r4, r5, r7, pc}
 80088fe:	bf00      	nop
 8008900:	00f42400 	.word	0x00f42400

08008904 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00a      	beq.n	800892e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	430a      	orrs	r2, r1
 800892c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008932:	f003 0302 	and.w	r3, r3, #2
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00a      	beq.n	8008950 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	430a      	orrs	r2, r1
 800894e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008954:	f003 0304 	and.w	r3, r3, #4
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00a      	beq.n	8008972 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	430a      	orrs	r2, r1
 8008970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008976:	f003 0308 	and.w	r3, r3, #8
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00a      	beq.n	8008994 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	430a      	orrs	r2, r1
 8008992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008998:	f003 0310 	and.w	r3, r3, #16
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00a      	beq.n	80089b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	430a      	orrs	r2, r1
 80089b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ba:	f003 0320 	and.w	r3, r3, #32
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00a      	beq.n	80089d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	430a      	orrs	r2, r1
 80089d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d01a      	beq.n	8008a1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	430a      	orrs	r2, r1
 80089f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a02:	d10a      	bne.n	8008a1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	430a      	orrs	r2, r1
 8008a18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00a      	beq.n	8008a3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	430a      	orrs	r2, r1
 8008a3a:	605a      	str	r2, [r3, #4]
  }
}
 8008a3c:	bf00      	nop
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af02      	add	r7, sp, #8
 8008a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a58:	f7fa f996 	bl	8002d88 <HAL_GetTick>
 8008a5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 0308 	and.w	r3, r3, #8
 8008a68:	2b08      	cmp	r3, #8
 8008a6a:	d10e      	bne.n	8008a8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 f82d 	bl	8008ada <UART_WaitOnFlagUntilTimeout>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d001      	beq.n	8008a8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a86:	2303      	movs	r3, #3
 8008a88:	e023      	b.n	8008ad2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f003 0304 	and.w	r3, r3, #4
 8008a94:	2b04      	cmp	r3, #4
 8008a96:	d10e      	bne.n	8008ab6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a9c:	9300      	str	r3, [sp, #0]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f817 	bl	8008ada <UART_WaitOnFlagUntilTimeout>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e00d      	b.n	8008ad2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2220      	movs	r2, #32
 8008aba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2220      	movs	r2, #32
 8008ac0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b084      	sub	sp, #16
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	60f8      	str	r0, [r7, #12]
 8008ae2:	60b9      	str	r1, [r7, #8]
 8008ae4:	603b      	str	r3, [r7, #0]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008aea:	e05e      	b.n	8008baa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af2:	d05a      	beq.n	8008baa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008af4:	f7fa f948 	bl	8002d88 <HAL_GetTick>
 8008af8:	4602      	mov	r2, r0
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	69ba      	ldr	r2, [r7, #24]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d302      	bcc.n	8008b0a <UART_WaitOnFlagUntilTimeout+0x30>
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d11b      	bne.n	8008b42 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b18:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	689a      	ldr	r2, [r3, #8]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f022 0201 	bic.w	r2, r2, #1
 8008b28:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2220      	movs	r2, #32
 8008b2e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2220      	movs	r2, #32
 8008b34:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	e043      	b.n	8008bca <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 0304 	and.w	r3, r3, #4
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d02c      	beq.n	8008baa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	69db      	ldr	r3, [r3, #28]
 8008b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b5e:	d124      	bne.n	8008baa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b68:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b78:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	689a      	ldr	r2, [r3, #8]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f022 0201 	bic.w	r2, r2, #1
 8008b88:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2220      	movs	r2, #32
 8008b8e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2220      	movs	r2, #32
 8008b94:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2220      	movs	r2, #32
 8008b9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	e00f      	b.n	8008bca <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	69da      	ldr	r2, [r3, #28]
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	68ba      	ldr	r2, [r7, #8]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	bf0c      	ite	eq
 8008bba:	2301      	moveq	r3, #1
 8008bbc:	2300      	movne	r3, #0
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	79fb      	ldrb	r3, [r7, #7]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d091      	beq.n	8008aec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
	...

08008bd4 <__NVIC_SetPriority>:
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	4603      	mov	r3, r0
 8008bdc:	6039      	str	r1, [r7, #0]
 8008bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	db0a      	blt.n	8008bfe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	b2da      	uxtb	r2, r3
 8008bec:	490c      	ldr	r1, [pc, #48]	; (8008c20 <__NVIC_SetPriority+0x4c>)
 8008bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bf2:	0112      	lsls	r2, r2, #4
 8008bf4:	b2d2      	uxtb	r2, r2
 8008bf6:	440b      	add	r3, r1
 8008bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008bfc:	e00a      	b.n	8008c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	4908      	ldr	r1, [pc, #32]	; (8008c24 <__NVIC_SetPriority+0x50>)
 8008c04:	79fb      	ldrb	r3, [r7, #7]
 8008c06:	f003 030f 	and.w	r3, r3, #15
 8008c0a:	3b04      	subs	r3, #4
 8008c0c:	0112      	lsls	r2, r2, #4
 8008c0e:	b2d2      	uxtb	r2, r2
 8008c10:	440b      	add	r3, r1
 8008c12:	761a      	strb	r2, [r3, #24]
}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr
 8008c20:	e000e100 	.word	0xe000e100
 8008c24:	e000ed00 	.word	0xe000ed00

08008c28 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008c2c:	4b05      	ldr	r3, [pc, #20]	; (8008c44 <SysTick_Handler+0x1c>)
 8008c2e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008c30:	f001 fcfe 	bl	800a630 <xTaskGetSchedulerState>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d001      	beq.n	8008c3e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008c3a:	f002 fae5 	bl	800b208 <xPortSysTickHandler>
  }
}
 8008c3e:	bf00      	nop
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	e000e010 	.word	0xe000e010

08008c48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	f06f 0004 	mvn.w	r0, #4
 8008c52:	f7ff ffbf 	bl	8008bd4 <__NVIC_SetPriority>
#endif
}
 8008c56:	bf00      	nop
 8008c58:	bd80      	pop	{r7, pc}
	...

08008c5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c62:	f3ef 8305 	mrs	r3, IPSR
 8008c66:	603b      	str	r3, [r7, #0]
  return(result);
 8008c68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d003      	beq.n	8008c76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008c6e:	f06f 0305 	mvn.w	r3, #5
 8008c72:	607b      	str	r3, [r7, #4]
 8008c74:	e00c      	b.n	8008c90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008c76:	4b0a      	ldr	r3, [pc, #40]	; (8008ca0 <osKernelInitialize+0x44>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d105      	bne.n	8008c8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008c7e:	4b08      	ldr	r3, [pc, #32]	; (8008ca0 <osKernelInitialize+0x44>)
 8008c80:	2201      	movs	r2, #1
 8008c82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008c84:	2300      	movs	r3, #0
 8008c86:	607b      	str	r3, [r7, #4]
 8008c88:	e002      	b.n	8008c90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008c90:	687b      	ldr	r3, [r7, #4]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	370c      	adds	r7, #12
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	20000368 	.word	0x20000368

08008ca4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008caa:	f3ef 8305 	mrs	r3, IPSR
 8008cae:	603b      	str	r3, [r7, #0]
  return(result);
 8008cb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d003      	beq.n	8008cbe <osKernelStart+0x1a>
    stat = osErrorISR;
 8008cb6:	f06f 0305 	mvn.w	r3, #5
 8008cba:	607b      	str	r3, [r7, #4]
 8008cbc:	e010      	b.n	8008ce0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008cbe:	4b0b      	ldr	r3, [pc, #44]	; (8008cec <osKernelStart+0x48>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d109      	bne.n	8008cda <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008cc6:	f7ff ffbf 	bl	8008c48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008cca:	4b08      	ldr	r3, [pc, #32]	; (8008cec <osKernelStart+0x48>)
 8008ccc:	2202      	movs	r2, #2
 8008cce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008cd0:	f001 f866 	bl	8009da0 <vTaskStartScheduler>
      stat = osOK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	607b      	str	r3, [r7, #4]
 8008cd8:	e002      	b.n	8008ce0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008cda:	f04f 33ff 	mov.w	r3, #4294967295
 8008cde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008ce0:	687b      	ldr	r3, [r7, #4]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	20000368 	.word	0x20000368

08008cf0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b08e      	sub	sp, #56	; 0x38
 8008cf4:	af04      	add	r7, sp, #16
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d00:	f3ef 8305 	mrs	r3, IPSR
 8008d04:	617b      	str	r3, [r7, #20]
  return(result);
 8008d06:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d17e      	bne.n	8008e0a <osThreadNew+0x11a>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d07b      	beq.n	8008e0a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008d12:	2380      	movs	r3, #128	; 0x80
 8008d14:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008d16:	2318      	movs	r3, #24
 8008d18:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d045      	beq.n	8008db6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d002      	beq.n	8008d38 <osThreadNew+0x48>
        name = attr->name;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	699b      	ldr	r3, [r3, #24]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d002      	beq.n	8008d46 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	699b      	ldr	r3, [r3, #24]
 8008d44:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d008      	beq.n	8008d5e <osThreadNew+0x6e>
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	2b38      	cmp	r3, #56	; 0x38
 8008d50:	d805      	bhi.n	8008d5e <osThreadNew+0x6e>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	f003 0301 	and.w	r3, r3, #1
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <osThreadNew+0x72>
        return (NULL);
 8008d5e:	2300      	movs	r3, #0
 8008d60:	e054      	b.n	8008e0c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	695b      	ldr	r3, [r3, #20]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d003      	beq.n	8008d72 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	695b      	ldr	r3, [r3, #20]
 8008d6e:	089b      	lsrs	r3, r3, #2
 8008d70:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00e      	beq.n	8008d98 <osThreadNew+0xa8>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	2b5b      	cmp	r3, #91	; 0x5b
 8008d80:	d90a      	bls.n	8008d98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d006      	beq.n	8008d98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	695b      	ldr	r3, [r3, #20]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d002      	beq.n	8008d98 <osThreadNew+0xa8>
        mem = 1;
 8008d92:	2301      	movs	r3, #1
 8008d94:	61bb      	str	r3, [r7, #24]
 8008d96:	e010      	b.n	8008dba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d10c      	bne.n	8008dba <osThreadNew+0xca>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d108      	bne.n	8008dba <osThreadNew+0xca>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	691b      	ldr	r3, [r3, #16]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d104      	bne.n	8008dba <osThreadNew+0xca>
          mem = 0;
 8008db0:	2300      	movs	r3, #0
 8008db2:	61bb      	str	r3, [r7, #24]
 8008db4:	e001      	b.n	8008dba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008db6:	2300      	movs	r3, #0
 8008db8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008dba:	69bb      	ldr	r3, [r7, #24]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d110      	bne.n	8008de2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008dc8:	9202      	str	r2, [sp, #8]
 8008dca:	9301      	str	r3, [sp, #4]
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	6a3a      	ldr	r2, [r7, #32]
 8008dd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f000 fe0c 	bl	80099f4 <xTaskCreateStatic>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	613b      	str	r3, [r7, #16]
 8008de0:	e013      	b.n	8008e0a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d110      	bne.n	8008e0a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008de8:	6a3b      	ldr	r3, [r7, #32]
 8008dea:	b29a      	uxth	r2, r3
 8008dec:	f107 0310 	add.w	r3, r7, #16
 8008df0:	9301      	str	r3, [sp, #4]
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	9300      	str	r3, [sp, #0]
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f000 fe57 	bl	8009aae <xTaskCreate>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d001      	beq.n	8008e0a <osThreadNew+0x11a>
            hTask = NULL;
 8008e06:	2300      	movs	r3, #0
 8008e08:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008e0a:	693b      	ldr	r3, [r7, #16]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3728      	adds	r7, #40	; 0x28
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e1c:	f3ef 8305 	mrs	r3, IPSR
 8008e20:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e22:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d003      	beq.n	8008e30 <osDelay+0x1c>
    stat = osErrorISR;
 8008e28:	f06f 0305 	mvn.w	r3, #5
 8008e2c:	60fb      	str	r3, [r7, #12]
 8008e2e:	e007      	b.n	8008e40 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d002      	beq.n	8008e40 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 ff7c 	bl	8009d38 <vTaskDelay>
    }
  }

  return (stat);
 8008e40:	68fb      	ldr	r3, [r7, #12]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
	...

08008e4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	4a07      	ldr	r2, [pc, #28]	; (8008e78 <vApplicationGetIdleTaskMemory+0x2c>)
 8008e5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	4a06      	ldr	r2, [pc, #24]	; (8008e7c <vApplicationGetIdleTaskMemory+0x30>)
 8008e62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2280      	movs	r2, #128	; 0x80
 8008e68:	601a      	str	r2, [r3, #0]
}
 8008e6a:	bf00      	nop
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	2000036c 	.word	0x2000036c
 8008e7c:	200003c8 	.word	0x200003c8

08008e80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	4a07      	ldr	r2, [pc, #28]	; (8008eac <vApplicationGetTimerTaskMemory+0x2c>)
 8008e90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	4a06      	ldr	r2, [pc, #24]	; (8008eb0 <vApplicationGetTimerTaskMemory+0x30>)
 8008e96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e9e:	601a      	str	r2, [r3, #0]
}
 8008ea0:	bf00      	nop
 8008ea2:	3714      	adds	r7, #20
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr
 8008eac:	200005c8 	.word	0x200005c8
 8008eb0:	20000624 	.word	0x20000624

08008eb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f103 0208 	add.w	r2, r3, #8
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8008ecc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f103 0208 	add.w	r2, r3, #8
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f103 0208 	add.w	r2, r3, #8
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ee8:	bf00      	nop
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008f02:	bf00      	nop
 8008f04:	370c      	adds	r7, #12
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr

08008f0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f0e:	b480      	push	{r7}
 8008f10:	b085      	sub	sp, #20
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
 8008f16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	689a      	ldr	r2, [r3, #8]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	683a      	ldr	r2, [r7, #0]
 8008f32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	683a      	ldr	r2, [r7, #0]
 8008f38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	1c5a      	adds	r2, r3, #1
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	601a      	str	r2, [r3, #0]
}
 8008f4a:	bf00      	nop
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f56:	b480      	push	{r7}
 8008f58:	b085      	sub	sp, #20
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f6c:	d103      	bne.n	8008f76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	60fb      	str	r3, [r7, #12]
 8008f74:	e00c      	b.n	8008f90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	3308      	adds	r3, #8
 8008f7a:	60fb      	str	r3, [r7, #12]
 8008f7c:	e002      	b.n	8008f84 <vListInsert+0x2e>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	60fb      	str	r3, [r7, #12]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68ba      	ldr	r2, [r7, #8]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d2f6      	bcs.n	8008f7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	685a      	ldr	r2, [r3, #4]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	683a      	ldr	r2, [r7, #0]
 8008f9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	683a      	ldr	r2, [r7, #0]
 8008faa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	1c5a      	adds	r2, r3, #1
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	601a      	str	r2, [r3, #0]
}
 8008fbc:	bf00      	nop
 8008fbe:	3714      	adds	r7, #20
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	6892      	ldr	r2, [r2, #8]
 8008fde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	6852      	ldr	r2, [r2, #4]
 8008fe8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d103      	bne.n	8008ffc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	689a      	ldr	r2, [r3, #8]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	1e5a      	subs	r2, r3, #1
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
}
 8009010:	4618      	mov	r0, r3
 8009012:	3714      	adds	r7, #20
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d10a      	bne.n	8009046 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009034:	f383 8811 	msr	BASEPRI, r3
 8009038:	f3bf 8f6f 	isb	sy
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009042:	bf00      	nop
 8009044:	e7fe      	b.n	8009044 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009046:	f002 f84d 	bl	800b0e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009052:	68f9      	ldr	r1, [r7, #12]
 8009054:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009056:	fb01 f303 	mul.w	r3, r1, r3
 800905a:	441a      	add	r2, r3
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2200      	movs	r2, #0
 8009064:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009076:	3b01      	subs	r3, #1
 8009078:	68f9      	ldr	r1, [r7, #12]
 800907a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800907c:	fb01 f303 	mul.w	r3, r1, r3
 8009080:	441a      	add	r2, r3
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	22ff      	movs	r2, #255	; 0xff
 800908a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	22ff      	movs	r2, #255	; 0xff
 8009092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d114      	bne.n	80090c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d01a      	beq.n	80090da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	3310      	adds	r3, #16
 80090a8:	4618      	mov	r0, r3
 80090aa:	f001 f903 	bl	800a2b4 <xTaskRemoveFromEventList>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d012      	beq.n	80090da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80090b4:	4b0c      	ldr	r3, [pc, #48]	; (80090e8 <xQueueGenericReset+0xcc>)
 80090b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ba:	601a      	str	r2, [r3, #0]
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	f3bf 8f6f 	isb	sy
 80090c4:	e009      	b.n	80090da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	3310      	adds	r3, #16
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7ff fef2 	bl	8008eb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	3324      	adds	r3, #36	; 0x24
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7ff feed 	bl	8008eb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80090da:	f002 f833 	bl	800b144 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80090de:	2301      	movs	r3, #1
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3710      	adds	r7, #16
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	e000ed04 	.word	0xe000ed04

080090ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b08e      	sub	sp, #56	; 0x38
 80090f0:	af02      	add	r7, sp, #8
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	607a      	str	r2, [r7, #4]
 80090f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d10a      	bne.n	8009116 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009104:	f383 8811 	msr	BASEPRI, r3
 8009108:	f3bf 8f6f 	isb	sy
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009112:	bf00      	nop
 8009114:	e7fe      	b.n	8009114 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d10a      	bne.n	8009132 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800911c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009120:	f383 8811 	msr	BASEPRI, r3
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800912e:	bf00      	nop
 8009130:	e7fe      	b.n	8009130 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d002      	beq.n	800913e <xQueueGenericCreateStatic+0x52>
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <xQueueGenericCreateStatic+0x56>
 800913e:	2301      	movs	r3, #1
 8009140:	e000      	b.n	8009144 <xQueueGenericCreateStatic+0x58>
 8009142:	2300      	movs	r3, #0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d10a      	bne.n	800915e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914c:	f383 8811 	msr	BASEPRI, r3
 8009150:	f3bf 8f6f 	isb	sy
 8009154:	f3bf 8f4f 	dsb	sy
 8009158:	623b      	str	r3, [r7, #32]
}
 800915a:	bf00      	nop
 800915c:	e7fe      	b.n	800915c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d102      	bne.n	800916a <xQueueGenericCreateStatic+0x7e>
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d101      	bne.n	800916e <xQueueGenericCreateStatic+0x82>
 800916a:	2301      	movs	r3, #1
 800916c:	e000      	b.n	8009170 <xQueueGenericCreateStatic+0x84>
 800916e:	2300      	movs	r3, #0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d10a      	bne.n	800918a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009178:	f383 8811 	msr	BASEPRI, r3
 800917c:	f3bf 8f6f 	isb	sy
 8009180:	f3bf 8f4f 	dsb	sy
 8009184:	61fb      	str	r3, [r7, #28]
}
 8009186:	bf00      	nop
 8009188:	e7fe      	b.n	8009188 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800918a:	2350      	movs	r3, #80	; 0x50
 800918c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	2b50      	cmp	r3, #80	; 0x50
 8009192:	d00a      	beq.n	80091aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009198:	f383 8811 	msr	BASEPRI, r3
 800919c:	f3bf 8f6f 	isb	sy
 80091a0:	f3bf 8f4f 	dsb	sy
 80091a4:	61bb      	str	r3, [r7, #24]
}
 80091a6:	bf00      	nop
 80091a8:	e7fe      	b.n	80091a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80091aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80091b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00d      	beq.n	80091d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80091b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b8:	2201      	movs	r2, #1
 80091ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80091be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80091c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c4:	9300      	str	r3, [sp, #0]
 80091c6:	4613      	mov	r3, r2
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	68b9      	ldr	r1, [r7, #8]
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f000 f805 	bl	80091dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80091d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3730      	adds	r7, #48	; 0x30
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
 80091e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d103      	bne.n	80091f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	69ba      	ldr	r2, [r7, #24]
 80091f4:	601a      	str	r2, [r3, #0]
 80091f6:	e002      	b.n	80091fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80091f8:	69bb      	ldr	r3, [r7, #24]
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	68ba      	ldr	r2, [r7, #8]
 8009208:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800920a:	2101      	movs	r1, #1
 800920c:	69b8      	ldr	r0, [r7, #24]
 800920e:	f7ff ff05 	bl	800901c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	78fa      	ldrb	r2, [r7, #3]
 8009216:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800921a:	bf00      	nop
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
	...

08009224 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b08e      	sub	sp, #56	; 0x38
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	607a      	str	r2, [r7, #4]
 8009230:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009232:	2300      	movs	r3, #0
 8009234:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800923a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923c:	2b00      	cmp	r3, #0
 800923e:	d10a      	bne.n	8009256 <xQueueGenericSend+0x32>
	__asm volatile
 8009240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009244:	f383 8811 	msr	BASEPRI, r3
 8009248:	f3bf 8f6f 	isb	sy
 800924c:	f3bf 8f4f 	dsb	sy
 8009250:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009252:	bf00      	nop
 8009254:	e7fe      	b.n	8009254 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d103      	bne.n	8009264 <xQueueGenericSend+0x40>
 800925c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009260:	2b00      	cmp	r3, #0
 8009262:	d101      	bne.n	8009268 <xQueueGenericSend+0x44>
 8009264:	2301      	movs	r3, #1
 8009266:	e000      	b.n	800926a <xQueueGenericSend+0x46>
 8009268:	2300      	movs	r3, #0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d10a      	bne.n	8009284 <xQueueGenericSend+0x60>
	__asm volatile
 800926e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009272:	f383 8811 	msr	BASEPRI, r3
 8009276:	f3bf 8f6f 	isb	sy
 800927a:	f3bf 8f4f 	dsb	sy
 800927e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009280:	bf00      	nop
 8009282:	e7fe      	b.n	8009282 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	2b02      	cmp	r3, #2
 8009288:	d103      	bne.n	8009292 <xQueueGenericSend+0x6e>
 800928a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800928c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800928e:	2b01      	cmp	r3, #1
 8009290:	d101      	bne.n	8009296 <xQueueGenericSend+0x72>
 8009292:	2301      	movs	r3, #1
 8009294:	e000      	b.n	8009298 <xQueueGenericSend+0x74>
 8009296:	2300      	movs	r3, #0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d10a      	bne.n	80092b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800929c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a0:	f383 8811 	msr	BASEPRI, r3
 80092a4:	f3bf 8f6f 	isb	sy
 80092a8:	f3bf 8f4f 	dsb	sy
 80092ac:	623b      	str	r3, [r7, #32]
}
 80092ae:	bf00      	nop
 80092b0:	e7fe      	b.n	80092b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092b2:	f001 f9bd 	bl	800a630 <xTaskGetSchedulerState>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d102      	bne.n	80092c2 <xQueueGenericSend+0x9e>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d101      	bne.n	80092c6 <xQueueGenericSend+0xa2>
 80092c2:	2301      	movs	r3, #1
 80092c4:	e000      	b.n	80092c8 <xQueueGenericSend+0xa4>
 80092c6:	2300      	movs	r3, #0
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d10a      	bne.n	80092e2 <xQueueGenericSend+0xbe>
	__asm volatile
 80092cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d0:	f383 8811 	msr	BASEPRI, r3
 80092d4:	f3bf 8f6f 	isb	sy
 80092d8:	f3bf 8f4f 	dsb	sy
 80092dc:	61fb      	str	r3, [r7, #28]
}
 80092de:	bf00      	nop
 80092e0:	e7fe      	b.n	80092e0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092e2:	f001 feff 	bl	800b0e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d302      	bcc.n	80092f8 <xQueueGenericSend+0xd4>
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d129      	bne.n	800934c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092f8:	683a      	ldr	r2, [r7, #0]
 80092fa:	68b9      	ldr	r1, [r7, #8]
 80092fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092fe:	f000 fa0b 	bl	8009718 <prvCopyDataToQueue>
 8009302:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009308:	2b00      	cmp	r3, #0
 800930a:	d010      	beq.n	800932e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800930c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930e:	3324      	adds	r3, #36	; 0x24
 8009310:	4618      	mov	r0, r3
 8009312:	f000 ffcf 	bl	800a2b4 <xTaskRemoveFromEventList>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d013      	beq.n	8009344 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800931c:	4b3f      	ldr	r3, [pc, #252]	; (800941c <xQueueGenericSend+0x1f8>)
 800931e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009322:	601a      	str	r2, [r3, #0]
 8009324:	f3bf 8f4f 	dsb	sy
 8009328:	f3bf 8f6f 	isb	sy
 800932c:	e00a      	b.n	8009344 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800932e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009330:	2b00      	cmp	r3, #0
 8009332:	d007      	beq.n	8009344 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009334:	4b39      	ldr	r3, [pc, #228]	; (800941c <xQueueGenericSend+0x1f8>)
 8009336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800933a:	601a      	str	r2, [r3, #0]
 800933c:	f3bf 8f4f 	dsb	sy
 8009340:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009344:	f001 fefe 	bl	800b144 <vPortExitCritical>
				return pdPASS;
 8009348:	2301      	movs	r3, #1
 800934a:	e063      	b.n	8009414 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d103      	bne.n	800935a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009352:	f001 fef7 	bl	800b144 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009356:	2300      	movs	r3, #0
 8009358:	e05c      	b.n	8009414 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800935a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800935c:	2b00      	cmp	r3, #0
 800935e:	d106      	bne.n	800936e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009360:	f107 0314 	add.w	r3, r7, #20
 8009364:	4618      	mov	r0, r3
 8009366:	f001 f809 	bl	800a37c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800936a:	2301      	movs	r3, #1
 800936c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800936e:	f001 fee9 	bl	800b144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009372:	f000 fd7b 	bl	8009e6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009376:	f001 feb5 	bl	800b0e4 <vPortEnterCritical>
 800937a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009380:	b25b      	sxtb	r3, r3
 8009382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009386:	d103      	bne.n	8009390 <xQueueGenericSend+0x16c>
 8009388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938a:	2200      	movs	r2, #0
 800938c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009392:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009396:	b25b      	sxtb	r3, r3
 8009398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800939c:	d103      	bne.n	80093a6 <xQueueGenericSend+0x182>
 800939e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093a6:	f001 fecd 	bl	800b144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093aa:	1d3a      	adds	r2, r7, #4
 80093ac:	f107 0314 	add.w	r3, r7, #20
 80093b0:	4611      	mov	r1, r2
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 fff8 	bl	800a3a8 <xTaskCheckForTimeOut>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d124      	bne.n	8009408 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80093be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093c0:	f000 faa2 	bl	8009908 <prvIsQueueFull>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d018      	beq.n	80093fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80093ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093cc:	3310      	adds	r3, #16
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	4611      	mov	r1, r2
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 ff1e 	bl	800a214 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80093d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093da:	f000 fa2d 	bl	8009838 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80093de:	f000 fd53 	bl	8009e88 <xTaskResumeAll>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f47f af7c 	bne.w	80092e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80093ea:	4b0c      	ldr	r3, [pc, #48]	; (800941c <xQueueGenericSend+0x1f8>)
 80093ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093f0:	601a      	str	r2, [r3, #0]
 80093f2:	f3bf 8f4f 	dsb	sy
 80093f6:	f3bf 8f6f 	isb	sy
 80093fa:	e772      	b.n	80092e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80093fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093fe:	f000 fa1b 	bl	8009838 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009402:	f000 fd41 	bl	8009e88 <xTaskResumeAll>
 8009406:	e76c      	b.n	80092e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800940a:	f000 fa15 	bl	8009838 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800940e:	f000 fd3b 	bl	8009e88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009412:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009414:	4618      	mov	r0, r3
 8009416:	3738      	adds	r7, #56	; 0x38
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	e000ed04 	.word	0xe000ed04

08009420 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b090      	sub	sp, #64	; 0x40
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	607a      	str	r2, [r7, #4]
 800942c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009434:	2b00      	cmp	r3, #0
 8009436:	d10a      	bne.n	800944e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943c:	f383 8811 	msr	BASEPRI, r3
 8009440:	f3bf 8f6f 	isb	sy
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800944a:	bf00      	nop
 800944c:	e7fe      	b.n	800944c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d103      	bne.n	800945c <xQueueGenericSendFromISR+0x3c>
 8009454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009458:	2b00      	cmp	r3, #0
 800945a:	d101      	bne.n	8009460 <xQueueGenericSendFromISR+0x40>
 800945c:	2301      	movs	r3, #1
 800945e:	e000      	b.n	8009462 <xQueueGenericSendFromISR+0x42>
 8009460:	2300      	movs	r3, #0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d10a      	bne.n	800947c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946a:	f383 8811 	msr	BASEPRI, r3
 800946e:	f3bf 8f6f 	isb	sy
 8009472:	f3bf 8f4f 	dsb	sy
 8009476:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009478:	bf00      	nop
 800947a:	e7fe      	b.n	800947a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	2b02      	cmp	r3, #2
 8009480:	d103      	bne.n	800948a <xQueueGenericSendFromISR+0x6a>
 8009482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009486:	2b01      	cmp	r3, #1
 8009488:	d101      	bne.n	800948e <xQueueGenericSendFromISR+0x6e>
 800948a:	2301      	movs	r3, #1
 800948c:	e000      	b.n	8009490 <xQueueGenericSendFromISR+0x70>
 800948e:	2300      	movs	r3, #0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d10a      	bne.n	80094aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009498:	f383 8811 	msr	BASEPRI, r3
 800949c:	f3bf 8f6f 	isb	sy
 80094a0:	f3bf 8f4f 	dsb	sy
 80094a4:	623b      	str	r3, [r7, #32]
}
 80094a6:	bf00      	nop
 80094a8:	e7fe      	b.n	80094a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094aa:	f001 fefd 	bl	800b2a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80094ae:	f3ef 8211 	mrs	r2, BASEPRI
 80094b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	61fa      	str	r2, [r7, #28]
 80094c4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80094c6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094c8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d302      	bcc.n	80094dc <xQueueGenericSendFromISR+0xbc>
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	2b02      	cmp	r3, #2
 80094da:	d12f      	bne.n	800953c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80094dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094ec:	683a      	ldr	r2, [r7, #0]
 80094ee:	68b9      	ldr	r1, [r7, #8]
 80094f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80094f2:	f000 f911 	bl	8009718 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80094f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80094fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094fe:	d112      	bne.n	8009526 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009504:	2b00      	cmp	r3, #0
 8009506:	d016      	beq.n	8009536 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950a:	3324      	adds	r3, #36	; 0x24
 800950c:	4618      	mov	r0, r3
 800950e:	f000 fed1 	bl	800a2b4 <xTaskRemoveFromEventList>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d00e      	beq.n	8009536 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00b      	beq.n	8009536 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2201      	movs	r2, #1
 8009522:	601a      	str	r2, [r3, #0]
 8009524:	e007      	b.n	8009536 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009526:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800952a:	3301      	adds	r3, #1
 800952c:	b2db      	uxtb	r3, r3
 800952e:	b25a      	sxtb	r2, r3
 8009530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009536:	2301      	movs	r3, #1
 8009538:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800953a:	e001      	b.n	8009540 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800953c:	2300      	movs	r3, #0
 800953e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009542:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800954a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800954c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800954e:	4618      	mov	r0, r3
 8009550:	3740      	adds	r7, #64	; 0x40
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
	...

08009558 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b08c      	sub	sp, #48	; 0x30
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009564:	2300      	movs	r3, #0
 8009566:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800956c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10a      	bne.n	8009588 <xQueueReceive+0x30>
	__asm volatile
 8009572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009576:	f383 8811 	msr	BASEPRI, r3
 800957a:	f3bf 8f6f 	isb	sy
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	623b      	str	r3, [r7, #32]
}
 8009584:	bf00      	nop
 8009586:	e7fe      	b.n	8009586 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d103      	bne.n	8009596 <xQueueReceive+0x3e>
 800958e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009592:	2b00      	cmp	r3, #0
 8009594:	d101      	bne.n	800959a <xQueueReceive+0x42>
 8009596:	2301      	movs	r3, #1
 8009598:	e000      	b.n	800959c <xQueueReceive+0x44>
 800959a:	2300      	movs	r3, #0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d10a      	bne.n	80095b6 <xQueueReceive+0x5e>
	__asm volatile
 80095a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a4:	f383 8811 	msr	BASEPRI, r3
 80095a8:	f3bf 8f6f 	isb	sy
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	61fb      	str	r3, [r7, #28]
}
 80095b2:	bf00      	nop
 80095b4:	e7fe      	b.n	80095b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095b6:	f001 f83b 	bl	800a630 <xTaskGetSchedulerState>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d102      	bne.n	80095c6 <xQueueReceive+0x6e>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d101      	bne.n	80095ca <xQueueReceive+0x72>
 80095c6:	2301      	movs	r3, #1
 80095c8:	e000      	b.n	80095cc <xQueueReceive+0x74>
 80095ca:	2300      	movs	r3, #0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10a      	bne.n	80095e6 <xQueueReceive+0x8e>
	__asm volatile
 80095d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d4:	f383 8811 	msr	BASEPRI, r3
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	61bb      	str	r3, [r7, #24]
}
 80095e2:	bf00      	nop
 80095e4:	e7fe      	b.n	80095e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095e6:	f001 fd7d 	bl	800b0e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80095f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d01f      	beq.n	8009636 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80095f6:	68b9      	ldr	r1, [r7, #8]
 80095f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095fa:	f000 f8f7 	bl	80097ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80095fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009600:	1e5a      	subs	r2, r3, #1
 8009602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009604:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009608:	691b      	ldr	r3, [r3, #16]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d00f      	beq.n	800962e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800960e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009610:	3310      	adds	r3, #16
 8009612:	4618      	mov	r0, r3
 8009614:	f000 fe4e 	bl	800a2b4 <xTaskRemoveFromEventList>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d007      	beq.n	800962e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800961e:	4b3d      	ldr	r3, [pc, #244]	; (8009714 <xQueueReceive+0x1bc>)
 8009620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009624:	601a      	str	r2, [r3, #0]
 8009626:	f3bf 8f4f 	dsb	sy
 800962a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800962e:	f001 fd89 	bl	800b144 <vPortExitCritical>
				return pdPASS;
 8009632:	2301      	movs	r3, #1
 8009634:	e069      	b.n	800970a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d103      	bne.n	8009644 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800963c:	f001 fd82 	bl	800b144 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009640:	2300      	movs	r3, #0
 8009642:	e062      	b.n	800970a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009646:	2b00      	cmp	r3, #0
 8009648:	d106      	bne.n	8009658 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800964a:	f107 0310 	add.w	r3, r7, #16
 800964e:	4618      	mov	r0, r3
 8009650:	f000 fe94 	bl	800a37c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009654:	2301      	movs	r3, #1
 8009656:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009658:	f001 fd74 	bl	800b144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800965c:	f000 fc06 	bl	8009e6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009660:	f001 fd40 	bl	800b0e4 <vPortEnterCritical>
 8009664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009666:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800966a:	b25b      	sxtb	r3, r3
 800966c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009670:	d103      	bne.n	800967a <xQueueReceive+0x122>
 8009672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009674:	2200      	movs	r2, #0
 8009676:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800967a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009680:	b25b      	sxtb	r3, r3
 8009682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009686:	d103      	bne.n	8009690 <xQueueReceive+0x138>
 8009688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968a:	2200      	movs	r2, #0
 800968c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009690:	f001 fd58 	bl	800b144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009694:	1d3a      	adds	r2, r7, #4
 8009696:	f107 0310 	add.w	r3, r7, #16
 800969a:	4611      	mov	r1, r2
 800969c:	4618      	mov	r0, r3
 800969e:	f000 fe83 	bl	800a3a8 <xTaskCheckForTimeOut>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d123      	bne.n	80096f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096aa:	f000 f917 	bl	80098dc <prvIsQueueEmpty>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d017      	beq.n	80096e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80096b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b6:	3324      	adds	r3, #36	; 0x24
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	4611      	mov	r1, r2
 80096bc:	4618      	mov	r0, r3
 80096be:	f000 fda9 	bl	800a214 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80096c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096c4:	f000 f8b8 	bl	8009838 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80096c8:	f000 fbde 	bl	8009e88 <xTaskResumeAll>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d189      	bne.n	80095e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80096d2:	4b10      	ldr	r3, [pc, #64]	; (8009714 <xQueueReceive+0x1bc>)
 80096d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096d8:	601a      	str	r2, [r3, #0]
 80096da:	f3bf 8f4f 	dsb	sy
 80096de:	f3bf 8f6f 	isb	sy
 80096e2:	e780      	b.n	80095e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80096e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096e6:	f000 f8a7 	bl	8009838 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096ea:	f000 fbcd 	bl	8009e88 <xTaskResumeAll>
 80096ee:	e77a      	b.n	80095e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80096f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096f2:	f000 f8a1 	bl	8009838 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096f6:	f000 fbc7 	bl	8009e88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096fc:	f000 f8ee 	bl	80098dc <prvIsQueueEmpty>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	f43f af6f 	beq.w	80095e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009708:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800970a:	4618      	mov	r0, r3
 800970c:	3730      	adds	r7, #48	; 0x30
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	e000ed04 	.word	0xe000ed04

08009718 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009724:	2300      	movs	r3, #0
 8009726:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800972c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009732:	2b00      	cmp	r3, #0
 8009734:	d10d      	bne.n	8009752 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d14d      	bne.n	80097da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	4618      	mov	r0, r3
 8009744:	f000 ff92 	bl	800a66c <xTaskPriorityDisinherit>
 8009748:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2200      	movs	r2, #0
 800974e:	609a      	str	r2, [r3, #8]
 8009750:	e043      	b.n	80097da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d119      	bne.n	800978c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6858      	ldr	r0, [r3, #4]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009760:	461a      	mov	r2, r3
 8009762:	68b9      	ldr	r1, [r7, #8]
 8009764:	f001 ff04 	bl	800b570 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	685a      	ldr	r2, [r3, #4]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009770:	441a      	add	r2, r3
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	685a      	ldr	r2, [r3, #4]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	429a      	cmp	r2, r3
 8009780:	d32b      	bcc.n	80097da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	605a      	str	r2, [r3, #4]
 800978a:	e026      	b.n	80097da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	68d8      	ldr	r0, [r3, #12]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009794:	461a      	mov	r2, r3
 8009796:	68b9      	ldr	r1, [r7, #8]
 8009798:	f001 feea 	bl	800b570 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	68da      	ldr	r2, [r3, #12]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a4:	425b      	negs	r3, r3
 80097a6:	441a      	add	r2, r3
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	68da      	ldr	r2, [r3, #12]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d207      	bcs.n	80097c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	689a      	ldr	r2, [r3, #8]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c0:	425b      	negs	r3, r3
 80097c2:	441a      	add	r2, r3
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b02      	cmp	r3, #2
 80097cc:	d105      	bne.n	80097da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d002      	beq.n	80097da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	3b01      	subs	r3, #1
 80097d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	1c5a      	adds	r2, r3, #1
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80097e2:	697b      	ldr	r3, [r7, #20]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3718      	adds	r7, #24
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d018      	beq.n	8009830 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	68da      	ldr	r2, [r3, #12]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009806:	441a      	add	r2, r3
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	68da      	ldr	r2, [r3, #12]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	429a      	cmp	r2, r3
 8009816:	d303      	bcc.n	8009820 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	68d9      	ldr	r1, [r3, #12]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009828:	461a      	mov	r2, r3
 800982a:	6838      	ldr	r0, [r7, #0]
 800982c:	f001 fea0 	bl	800b570 <memcpy>
	}
}
 8009830:	bf00      	nop
 8009832:	3708      	adds	r7, #8
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009840:	f001 fc50 	bl	800b0e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800984a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800984c:	e011      	b.n	8009872 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009852:	2b00      	cmp	r3, #0
 8009854:	d012      	beq.n	800987c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	3324      	adds	r3, #36	; 0x24
 800985a:	4618      	mov	r0, r3
 800985c:	f000 fd2a 	bl	800a2b4 <xTaskRemoveFromEventList>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d001      	beq.n	800986a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009866:	f000 fe01 	bl	800a46c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800986a:	7bfb      	ldrb	r3, [r7, #15]
 800986c:	3b01      	subs	r3, #1
 800986e:	b2db      	uxtb	r3, r3
 8009870:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009876:	2b00      	cmp	r3, #0
 8009878:	dce9      	bgt.n	800984e <prvUnlockQueue+0x16>
 800987a:	e000      	b.n	800987e <prvUnlockQueue+0x46>
					break;
 800987c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	22ff      	movs	r2, #255	; 0xff
 8009882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009886:	f001 fc5d 	bl	800b144 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800988a:	f001 fc2b 	bl	800b0e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009894:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009896:	e011      	b.n	80098bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d012      	beq.n	80098c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	3310      	adds	r3, #16
 80098a4:	4618      	mov	r0, r3
 80098a6:	f000 fd05 	bl	800a2b4 <xTaskRemoveFromEventList>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d001      	beq.n	80098b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80098b0:	f000 fddc 	bl	800a46c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80098b4:	7bbb      	ldrb	r3, [r7, #14]
 80098b6:	3b01      	subs	r3, #1
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	dce9      	bgt.n	8009898 <prvUnlockQueue+0x60>
 80098c4:	e000      	b.n	80098c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80098c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	22ff      	movs	r2, #255	; 0xff
 80098cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80098d0:	f001 fc38 	bl	800b144 <vPortExitCritical>
}
 80098d4:	bf00      	nop
 80098d6:	3710      	adds	r7, #16
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b084      	sub	sp, #16
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80098e4:	f001 fbfe 	bl	800b0e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d102      	bne.n	80098f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80098f0:	2301      	movs	r3, #1
 80098f2:	60fb      	str	r3, [r7, #12]
 80098f4:	e001      	b.n	80098fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80098f6:	2300      	movs	r3, #0
 80098f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80098fa:	f001 fc23 	bl	800b144 <vPortExitCritical>

	return xReturn;
 80098fe:	68fb      	ldr	r3, [r7, #12]
}
 8009900:	4618      	mov	r0, r3
 8009902:	3710      	adds	r7, #16
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009910:	f001 fbe8 	bl	800b0e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800991c:	429a      	cmp	r2, r3
 800991e:	d102      	bne.n	8009926 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009920:	2301      	movs	r3, #1
 8009922:	60fb      	str	r3, [r7, #12]
 8009924:	e001      	b.n	800992a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009926:	2300      	movs	r3, #0
 8009928:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800992a:	f001 fc0b 	bl	800b144 <vPortExitCritical>

	return xReturn;
 800992e:	68fb      	ldr	r3, [r7, #12]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009938:	b480      	push	{r7}
 800993a:	b085      	sub	sp, #20
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009942:	2300      	movs	r3, #0
 8009944:	60fb      	str	r3, [r7, #12]
 8009946:	e014      	b.n	8009972 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009948:	4a0f      	ldr	r2, [pc, #60]	; (8009988 <vQueueAddToRegistry+0x50>)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d10b      	bne.n	800996c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009954:	490c      	ldr	r1, [pc, #48]	; (8009988 <vQueueAddToRegistry+0x50>)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	683a      	ldr	r2, [r7, #0]
 800995a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800995e:	4a0a      	ldr	r2, [pc, #40]	; (8009988 <vQueueAddToRegistry+0x50>)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	00db      	lsls	r3, r3, #3
 8009964:	4413      	add	r3, r2
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800996a:	e006      	b.n	800997a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	3301      	adds	r3, #1
 8009970:	60fb      	str	r3, [r7, #12]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2b07      	cmp	r3, #7
 8009976:	d9e7      	bls.n	8009948 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009978:	bf00      	nop
 800997a:	bf00      	nop
 800997c:	3714      	adds	r7, #20
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	20008908 	.word	0x20008908

0800998c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800998c:	b580      	push	{r7, lr}
 800998e:	b086      	sub	sp, #24
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800999c:	f001 fba2 	bl	800b0e4 <vPortEnterCritical>
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099a6:	b25b      	sxtb	r3, r3
 80099a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ac:	d103      	bne.n	80099b6 <vQueueWaitForMessageRestricted+0x2a>
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099bc:	b25b      	sxtb	r3, r3
 80099be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c2:	d103      	bne.n	80099cc <vQueueWaitForMessageRestricted+0x40>
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099cc:	f001 fbba 	bl	800b144 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d106      	bne.n	80099e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	3324      	adds	r3, #36	; 0x24
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	68b9      	ldr	r1, [r7, #8]
 80099e0:	4618      	mov	r0, r3
 80099e2:	f000 fc3b 	bl	800a25c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80099e6:	6978      	ldr	r0, [r7, #20]
 80099e8:	f7ff ff26 	bl	8009838 <prvUnlockQueue>
	}
 80099ec:	bf00      	nop
 80099ee:	3718      	adds	r7, #24
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b08e      	sub	sp, #56	; 0x38
 80099f8:	af04      	add	r7, sp, #16
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	607a      	str	r2, [r7, #4]
 8009a00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d10a      	bne.n	8009a1e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0c:	f383 8811 	msr	BASEPRI, r3
 8009a10:	f3bf 8f6f 	isb	sy
 8009a14:	f3bf 8f4f 	dsb	sy
 8009a18:	623b      	str	r3, [r7, #32]
}
 8009a1a:	bf00      	nop
 8009a1c:	e7fe      	b.n	8009a1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10a      	bne.n	8009a3a <xTaskCreateStatic+0x46>
	__asm volatile
 8009a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	61fb      	str	r3, [r7, #28]
}
 8009a36:	bf00      	nop
 8009a38:	e7fe      	b.n	8009a38 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009a3a:	235c      	movs	r3, #92	; 0x5c
 8009a3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	2b5c      	cmp	r3, #92	; 0x5c
 8009a42:	d00a      	beq.n	8009a5a <xTaskCreateStatic+0x66>
	__asm volatile
 8009a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a48:	f383 8811 	msr	BASEPRI, r3
 8009a4c:	f3bf 8f6f 	isb	sy
 8009a50:	f3bf 8f4f 	dsb	sy
 8009a54:	61bb      	str	r3, [r7, #24]
}
 8009a56:	bf00      	nop
 8009a58:	e7fe      	b.n	8009a58 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009a5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d01e      	beq.n	8009aa0 <xTaskCreateStatic+0xac>
 8009a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d01b      	beq.n	8009aa0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a74:	2202      	movs	r2, #2
 8009a76:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	9303      	str	r3, [sp, #12]
 8009a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a80:	9302      	str	r3, [sp, #8]
 8009a82:	f107 0314 	add.w	r3, r7, #20
 8009a86:	9301      	str	r3, [sp, #4]
 8009a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8a:	9300      	str	r3, [sp, #0]
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	68b9      	ldr	r1, [r7, #8]
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f000 f850 	bl	8009b38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a9a:	f000 f8dd 	bl	8009c58 <prvAddNewTaskToReadyList>
 8009a9e:	e001      	b.n	8009aa4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009aa4:	697b      	ldr	r3, [r7, #20]
	}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3728      	adds	r7, #40	; 0x28
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b08c      	sub	sp, #48	; 0x30
 8009ab2:	af04      	add	r7, sp, #16
 8009ab4:	60f8      	str	r0, [r7, #12]
 8009ab6:	60b9      	str	r1, [r7, #8]
 8009ab8:	603b      	str	r3, [r7, #0]
 8009aba:	4613      	mov	r3, r2
 8009abc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009abe:	88fb      	ldrh	r3, [r7, #6]
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f001 fc30 	bl	800b328 <pvPortMalloc>
 8009ac8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d00e      	beq.n	8009aee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009ad0:	205c      	movs	r0, #92	; 0x5c
 8009ad2:	f001 fc29 	bl	800b328 <pvPortMalloc>
 8009ad6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009ad8:	69fb      	ldr	r3, [r7, #28]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d003      	beq.n	8009ae6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009ade:	69fb      	ldr	r3, [r7, #28]
 8009ae0:	697a      	ldr	r2, [r7, #20]
 8009ae2:	631a      	str	r2, [r3, #48]	; 0x30
 8009ae4:	e005      	b.n	8009af2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009ae6:	6978      	ldr	r0, [r7, #20]
 8009ae8:	f001 fcac 	bl	800b444 <vPortFree>
 8009aec:	e001      	b.n	8009af2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009aee:	2300      	movs	r3, #0
 8009af0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d017      	beq.n	8009b28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009af8:	69fb      	ldr	r3, [r7, #28]
 8009afa:	2200      	movs	r2, #0
 8009afc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009b00:	88fa      	ldrh	r2, [r7, #6]
 8009b02:	2300      	movs	r3, #0
 8009b04:	9303      	str	r3, [sp, #12]
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	9302      	str	r3, [sp, #8]
 8009b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0c:	9301      	str	r3, [sp, #4]
 8009b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b10:	9300      	str	r3, [sp, #0]
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	68b9      	ldr	r1, [r7, #8]
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f000 f80e 	bl	8009b38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b1c:	69f8      	ldr	r0, [r7, #28]
 8009b1e:	f000 f89b 	bl	8009c58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009b22:	2301      	movs	r3, #1
 8009b24:	61bb      	str	r3, [r7, #24]
 8009b26:	e002      	b.n	8009b2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009b28:	f04f 33ff 	mov.w	r3, #4294967295
 8009b2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009b2e:	69bb      	ldr	r3, [r7, #24]
	}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3720      	adds	r7, #32
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b088      	sub	sp, #32
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	607a      	str	r2, [r7, #4]
 8009b44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	461a      	mov	r2, r3
 8009b50:	21a5      	movs	r1, #165	; 0xa5
 8009b52:	f001 fd1b 	bl	800b58c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009b60:	3b01      	subs	r3, #1
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	4413      	add	r3, r2
 8009b66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	f023 0307 	bic.w	r3, r3, #7
 8009b6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	f003 0307 	and.w	r3, r3, #7
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00a      	beq.n	8009b90 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7e:	f383 8811 	msr	BASEPRI, r3
 8009b82:	f3bf 8f6f 	isb	sy
 8009b86:	f3bf 8f4f 	dsb	sy
 8009b8a:	617b      	str	r3, [r7, #20]
}
 8009b8c:	bf00      	nop
 8009b8e:	e7fe      	b.n	8009b8e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d01f      	beq.n	8009bd6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009b96:	2300      	movs	r3, #0
 8009b98:	61fb      	str	r3, [r7, #28]
 8009b9a:	e012      	b.n	8009bc2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	69fb      	ldr	r3, [r7, #28]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	7819      	ldrb	r1, [r3, #0]
 8009ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ba6:	69fb      	ldr	r3, [r7, #28]
 8009ba8:	4413      	add	r3, r2
 8009baa:	3334      	adds	r3, #52	; 0x34
 8009bac:	460a      	mov	r2, r1
 8009bae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009bb0:	68ba      	ldr	r2, [r7, #8]
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d006      	beq.n	8009bca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	61fb      	str	r3, [r7, #28]
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	2b0f      	cmp	r3, #15
 8009bc6:	d9e9      	bls.n	8009b9c <prvInitialiseNewTask+0x64>
 8009bc8:	e000      	b.n	8009bcc <prvInitialiseNewTask+0x94>
			{
				break;
 8009bca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009bd4:	e003      	b.n	8009bde <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be0:	2b37      	cmp	r3, #55	; 0x37
 8009be2:	d901      	bls.n	8009be8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009be4:	2337      	movs	r3, #55	; 0x37
 8009be6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bf2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfc:	3304      	adds	r3, #4
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7ff f978 	bl	8008ef4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c06:	3318      	adds	r3, #24
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7ff f973 	bl	8008ef4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c26:	2200      	movs	r2, #0
 8009c28:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009c32:	683a      	ldr	r2, [r7, #0]
 8009c34:	68f9      	ldr	r1, [r7, #12]
 8009c36:	69b8      	ldr	r0, [r7, #24]
 8009c38:	f001 f928 	bl	800ae8c <pxPortInitialiseStack>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d002      	beq.n	8009c4e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c4e:	bf00      	nop
 8009c50:	3720      	adds	r7, #32
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
	...

08009c58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009c60:	f001 fa40 	bl	800b0e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009c64:	4b2d      	ldr	r3, [pc, #180]	; (8009d1c <prvAddNewTaskToReadyList+0xc4>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	4a2c      	ldr	r2, [pc, #176]	; (8009d1c <prvAddNewTaskToReadyList+0xc4>)
 8009c6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009c6e:	4b2c      	ldr	r3, [pc, #176]	; (8009d20 <prvAddNewTaskToReadyList+0xc8>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d109      	bne.n	8009c8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009c76:	4a2a      	ldr	r2, [pc, #168]	; (8009d20 <prvAddNewTaskToReadyList+0xc8>)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009c7c:	4b27      	ldr	r3, [pc, #156]	; (8009d1c <prvAddNewTaskToReadyList+0xc4>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d110      	bne.n	8009ca6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009c84:	f000 fc16 	bl	800a4b4 <prvInitialiseTaskLists>
 8009c88:	e00d      	b.n	8009ca6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009c8a:	4b26      	ldr	r3, [pc, #152]	; (8009d24 <prvAddNewTaskToReadyList+0xcc>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d109      	bne.n	8009ca6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009c92:	4b23      	ldr	r3, [pc, #140]	; (8009d20 <prvAddNewTaskToReadyList+0xc8>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d802      	bhi.n	8009ca6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009ca0:	4a1f      	ldr	r2, [pc, #124]	; (8009d20 <prvAddNewTaskToReadyList+0xc8>)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009ca6:	4b20      	ldr	r3, [pc, #128]	; (8009d28 <prvAddNewTaskToReadyList+0xd0>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	3301      	adds	r3, #1
 8009cac:	4a1e      	ldr	r2, [pc, #120]	; (8009d28 <prvAddNewTaskToReadyList+0xd0>)
 8009cae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009cb0:	4b1d      	ldr	r3, [pc, #116]	; (8009d28 <prvAddNewTaskToReadyList+0xd0>)
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cbc:	4b1b      	ldr	r3, [pc, #108]	; (8009d2c <prvAddNewTaskToReadyList+0xd4>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d903      	bls.n	8009ccc <prvAddNewTaskToReadyList+0x74>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc8:	4a18      	ldr	r2, [pc, #96]	; (8009d2c <prvAddNewTaskToReadyList+0xd4>)
 8009cca:	6013      	str	r3, [r2, #0]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	4413      	add	r3, r2
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	4a15      	ldr	r2, [pc, #84]	; (8009d30 <prvAddNewTaskToReadyList+0xd8>)
 8009cda:	441a      	add	r2, r3
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	3304      	adds	r3, #4
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	4610      	mov	r0, r2
 8009ce4:	f7ff f913 	bl	8008f0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ce8:	f001 fa2c 	bl	800b144 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009cec:	4b0d      	ldr	r3, [pc, #52]	; (8009d24 <prvAddNewTaskToReadyList+0xcc>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d00e      	beq.n	8009d12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009cf4:	4b0a      	ldr	r3, [pc, #40]	; (8009d20 <prvAddNewTaskToReadyList+0xc8>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d207      	bcs.n	8009d12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009d02:	4b0c      	ldr	r3, [pc, #48]	; (8009d34 <prvAddNewTaskToReadyList+0xdc>)
 8009d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d08:	601a      	str	r2, [r3, #0]
 8009d0a:	f3bf 8f4f 	dsb	sy
 8009d0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d12:	bf00      	nop
 8009d14:	3708      	adds	r7, #8
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	20000ef8 	.word	0x20000ef8
 8009d20:	20000a24 	.word	0x20000a24
 8009d24:	20000f04 	.word	0x20000f04
 8009d28:	20000f14 	.word	0x20000f14
 8009d2c:	20000f00 	.word	0x20000f00
 8009d30:	20000a28 	.word	0x20000a28
 8009d34:	e000ed04 	.word	0xe000ed04

08009d38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009d40:	2300      	movs	r3, #0
 8009d42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d017      	beq.n	8009d7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009d4a:	4b13      	ldr	r3, [pc, #76]	; (8009d98 <vTaskDelay+0x60>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d00a      	beq.n	8009d68 <vTaskDelay+0x30>
	__asm volatile
 8009d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d56:	f383 8811 	msr	BASEPRI, r3
 8009d5a:	f3bf 8f6f 	isb	sy
 8009d5e:	f3bf 8f4f 	dsb	sy
 8009d62:	60bb      	str	r3, [r7, #8]
}
 8009d64:	bf00      	nop
 8009d66:	e7fe      	b.n	8009d66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009d68:	f000 f880 	bl	8009e6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009d6c:	2100      	movs	r1, #0
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 fcea 	bl	800a748 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009d74:	f000 f888 	bl	8009e88 <xTaskResumeAll>
 8009d78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d107      	bne.n	8009d90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009d80:	4b06      	ldr	r3, [pc, #24]	; (8009d9c <vTaskDelay+0x64>)
 8009d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d86:	601a      	str	r2, [r3, #0]
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d90:	bf00      	nop
 8009d92:	3710      	adds	r7, #16
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	20000f20 	.word	0x20000f20
 8009d9c:	e000ed04 	.word	0xe000ed04

08009da0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b08a      	sub	sp, #40	; 0x28
 8009da4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009da6:	2300      	movs	r3, #0
 8009da8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009daa:	2300      	movs	r3, #0
 8009dac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009dae:	463a      	mov	r2, r7
 8009db0:	1d39      	adds	r1, r7, #4
 8009db2:	f107 0308 	add.w	r3, r7, #8
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7ff f848 	bl	8008e4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009dbc:	6839      	ldr	r1, [r7, #0]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	68ba      	ldr	r2, [r7, #8]
 8009dc2:	9202      	str	r2, [sp, #8]
 8009dc4:	9301      	str	r3, [sp, #4]
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	9300      	str	r3, [sp, #0]
 8009dca:	2300      	movs	r3, #0
 8009dcc:	460a      	mov	r2, r1
 8009dce:	4921      	ldr	r1, [pc, #132]	; (8009e54 <vTaskStartScheduler+0xb4>)
 8009dd0:	4821      	ldr	r0, [pc, #132]	; (8009e58 <vTaskStartScheduler+0xb8>)
 8009dd2:	f7ff fe0f 	bl	80099f4 <xTaskCreateStatic>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	4a20      	ldr	r2, [pc, #128]	; (8009e5c <vTaskStartScheduler+0xbc>)
 8009dda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009ddc:	4b1f      	ldr	r3, [pc, #124]	; (8009e5c <vTaskStartScheduler+0xbc>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d002      	beq.n	8009dea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009de4:	2301      	movs	r3, #1
 8009de6:	617b      	str	r3, [r7, #20]
 8009de8:	e001      	b.n	8009dee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009dea:	2300      	movs	r3, #0
 8009dec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d102      	bne.n	8009dfa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009df4:	f000 fcfc 	bl	800a7f0 <xTimerCreateTimerTask>
 8009df8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d116      	bne.n	8009e2e <vTaskStartScheduler+0x8e>
	__asm volatile
 8009e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e04:	f383 8811 	msr	BASEPRI, r3
 8009e08:	f3bf 8f6f 	isb	sy
 8009e0c:	f3bf 8f4f 	dsb	sy
 8009e10:	613b      	str	r3, [r7, #16]
}
 8009e12:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009e14:	4b12      	ldr	r3, [pc, #72]	; (8009e60 <vTaskStartScheduler+0xc0>)
 8009e16:	f04f 32ff 	mov.w	r2, #4294967295
 8009e1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009e1c:	4b11      	ldr	r3, [pc, #68]	; (8009e64 <vTaskStartScheduler+0xc4>)
 8009e1e:	2201      	movs	r2, #1
 8009e20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009e22:	4b11      	ldr	r3, [pc, #68]	; (8009e68 <vTaskStartScheduler+0xc8>)
 8009e24:	2200      	movs	r2, #0
 8009e26:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009e28:	f001 f8ba 	bl	800afa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009e2c:	e00e      	b.n	8009e4c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e34:	d10a      	bne.n	8009e4c <vTaskStartScheduler+0xac>
	__asm volatile
 8009e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3a:	f383 8811 	msr	BASEPRI, r3
 8009e3e:	f3bf 8f6f 	isb	sy
 8009e42:	f3bf 8f4f 	dsb	sy
 8009e46:	60fb      	str	r3, [r7, #12]
}
 8009e48:	bf00      	nop
 8009e4a:	e7fe      	b.n	8009e4a <vTaskStartScheduler+0xaa>
}
 8009e4c:	bf00      	nop
 8009e4e:	3718      	adds	r7, #24
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	0800df5c 	.word	0x0800df5c
 8009e58:	0800a485 	.word	0x0800a485
 8009e5c:	20000f1c 	.word	0x20000f1c
 8009e60:	20000f18 	.word	0x20000f18
 8009e64:	20000f04 	.word	0x20000f04
 8009e68:	20000efc 	.word	0x20000efc

08009e6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009e70:	4b04      	ldr	r3, [pc, #16]	; (8009e84 <vTaskSuspendAll+0x18>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	3301      	adds	r3, #1
 8009e76:	4a03      	ldr	r2, [pc, #12]	; (8009e84 <vTaskSuspendAll+0x18>)
 8009e78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009e7a:	bf00      	nop
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr
 8009e84:	20000f20 	.word	0x20000f20

08009e88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009e92:	2300      	movs	r3, #0
 8009e94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009e96:	4b42      	ldr	r3, [pc, #264]	; (8009fa0 <xTaskResumeAll+0x118>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d10a      	bne.n	8009eb4 <xTaskResumeAll+0x2c>
	__asm volatile
 8009e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea2:	f383 8811 	msr	BASEPRI, r3
 8009ea6:	f3bf 8f6f 	isb	sy
 8009eaa:	f3bf 8f4f 	dsb	sy
 8009eae:	603b      	str	r3, [r7, #0]
}
 8009eb0:	bf00      	nop
 8009eb2:	e7fe      	b.n	8009eb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009eb4:	f001 f916 	bl	800b0e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009eb8:	4b39      	ldr	r3, [pc, #228]	; (8009fa0 <xTaskResumeAll+0x118>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	4a38      	ldr	r2, [pc, #224]	; (8009fa0 <xTaskResumeAll+0x118>)
 8009ec0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ec2:	4b37      	ldr	r3, [pc, #220]	; (8009fa0 <xTaskResumeAll+0x118>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d162      	bne.n	8009f90 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009eca:	4b36      	ldr	r3, [pc, #216]	; (8009fa4 <xTaskResumeAll+0x11c>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d05e      	beq.n	8009f90 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ed2:	e02f      	b.n	8009f34 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ed4:	4b34      	ldr	r3, [pc, #208]	; (8009fa8 <xTaskResumeAll+0x120>)
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	3318      	adds	r3, #24
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7ff f871 	bl	8008fc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	3304      	adds	r3, #4
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7ff f86c 	bl	8008fc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef4:	4b2d      	ldr	r3, [pc, #180]	; (8009fac <xTaskResumeAll+0x124>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d903      	bls.n	8009f04 <xTaskResumeAll+0x7c>
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f00:	4a2a      	ldr	r2, [pc, #168]	; (8009fac <xTaskResumeAll+0x124>)
 8009f02:	6013      	str	r3, [r2, #0]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f08:	4613      	mov	r3, r2
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	4413      	add	r3, r2
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	4a27      	ldr	r2, [pc, #156]	; (8009fb0 <xTaskResumeAll+0x128>)
 8009f12:	441a      	add	r2, r3
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	3304      	adds	r3, #4
 8009f18:	4619      	mov	r1, r3
 8009f1a:	4610      	mov	r0, r2
 8009f1c:	f7fe fff7 	bl	8008f0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f24:	4b23      	ldr	r3, [pc, #140]	; (8009fb4 <xTaskResumeAll+0x12c>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d302      	bcc.n	8009f34 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009f2e:	4b22      	ldr	r3, [pc, #136]	; (8009fb8 <xTaskResumeAll+0x130>)
 8009f30:	2201      	movs	r2, #1
 8009f32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f34:	4b1c      	ldr	r3, [pc, #112]	; (8009fa8 <xTaskResumeAll+0x120>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d1cb      	bne.n	8009ed4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d001      	beq.n	8009f46 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009f42:	f000 fb55 	bl	800a5f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009f46:	4b1d      	ldr	r3, [pc, #116]	; (8009fbc <xTaskResumeAll+0x134>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d010      	beq.n	8009f74 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009f52:	f000 f847 	bl	8009fe4 <xTaskIncrementTick>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d002      	beq.n	8009f62 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009f5c:	4b16      	ldr	r3, [pc, #88]	; (8009fb8 <xTaskResumeAll+0x130>)
 8009f5e:	2201      	movs	r2, #1
 8009f60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	3b01      	subs	r3, #1
 8009f66:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d1f1      	bne.n	8009f52 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009f6e:	4b13      	ldr	r3, [pc, #76]	; (8009fbc <xTaskResumeAll+0x134>)
 8009f70:	2200      	movs	r2, #0
 8009f72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009f74:	4b10      	ldr	r3, [pc, #64]	; (8009fb8 <xTaskResumeAll+0x130>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d009      	beq.n	8009f90 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009f80:	4b0f      	ldr	r3, [pc, #60]	; (8009fc0 <xTaskResumeAll+0x138>)
 8009f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f86:	601a      	str	r2, [r3, #0]
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f90:	f001 f8d8 	bl	800b144 <vPortExitCritical>

	return xAlreadyYielded;
 8009f94:	68bb      	ldr	r3, [r7, #8]
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3710      	adds	r7, #16
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	20000f20 	.word	0x20000f20
 8009fa4:	20000ef8 	.word	0x20000ef8
 8009fa8:	20000eb8 	.word	0x20000eb8
 8009fac:	20000f00 	.word	0x20000f00
 8009fb0:	20000a28 	.word	0x20000a28
 8009fb4:	20000a24 	.word	0x20000a24
 8009fb8:	20000f0c 	.word	0x20000f0c
 8009fbc:	20000f08 	.word	0x20000f08
 8009fc0:	e000ed04 	.word	0xe000ed04

08009fc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009fca:	4b05      	ldr	r3, [pc, #20]	; (8009fe0 <xTaskGetTickCount+0x1c>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009fd0:	687b      	ldr	r3, [r7, #4]
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	370c      	adds	r7, #12
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr
 8009fde:	bf00      	nop
 8009fe0:	20000efc 	.word	0x20000efc

08009fe4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b086      	sub	sp, #24
 8009fe8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009fea:	2300      	movs	r3, #0
 8009fec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fee:	4b4f      	ldr	r3, [pc, #316]	; (800a12c <xTaskIncrementTick+0x148>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	f040 808f 	bne.w	800a116 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009ff8:	4b4d      	ldr	r3, [pc, #308]	; (800a130 <xTaskIncrementTick+0x14c>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a000:	4a4b      	ldr	r2, [pc, #300]	; (800a130 <xTaskIncrementTick+0x14c>)
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d120      	bne.n	800a04e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a00c:	4b49      	ldr	r3, [pc, #292]	; (800a134 <xTaskIncrementTick+0x150>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00a      	beq.n	800a02c <xTaskIncrementTick+0x48>
	__asm volatile
 800a016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01a:	f383 8811 	msr	BASEPRI, r3
 800a01e:	f3bf 8f6f 	isb	sy
 800a022:	f3bf 8f4f 	dsb	sy
 800a026:	603b      	str	r3, [r7, #0]
}
 800a028:	bf00      	nop
 800a02a:	e7fe      	b.n	800a02a <xTaskIncrementTick+0x46>
 800a02c:	4b41      	ldr	r3, [pc, #260]	; (800a134 <xTaskIncrementTick+0x150>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	60fb      	str	r3, [r7, #12]
 800a032:	4b41      	ldr	r3, [pc, #260]	; (800a138 <xTaskIncrementTick+0x154>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a3f      	ldr	r2, [pc, #252]	; (800a134 <xTaskIncrementTick+0x150>)
 800a038:	6013      	str	r3, [r2, #0]
 800a03a:	4a3f      	ldr	r2, [pc, #252]	; (800a138 <xTaskIncrementTick+0x154>)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6013      	str	r3, [r2, #0]
 800a040:	4b3e      	ldr	r3, [pc, #248]	; (800a13c <xTaskIncrementTick+0x158>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	3301      	adds	r3, #1
 800a046:	4a3d      	ldr	r2, [pc, #244]	; (800a13c <xTaskIncrementTick+0x158>)
 800a048:	6013      	str	r3, [r2, #0]
 800a04a:	f000 fad1 	bl	800a5f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a04e:	4b3c      	ldr	r3, [pc, #240]	; (800a140 <xTaskIncrementTick+0x15c>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	693a      	ldr	r2, [r7, #16]
 800a054:	429a      	cmp	r2, r3
 800a056:	d349      	bcc.n	800a0ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a058:	4b36      	ldr	r3, [pc, #216]	; (800a134 <xTaskIncrementTick+0x150>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d104      	bne.n	800a06c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a062:	4b37      	ldr	r3, [pc, #220]	; (800a140 <xTaskIncrementTick+0x15c>)
 800a064:	f04f 32ff 	mov.w	r2, #4294967295
 800a068:	601a      	str	r2, [r3, #0]
					break;
 800a06a:	e03f      	b.n	800a0ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a06c:	4b31      	ldr	r3, [pc, #196]	; (800a134 <xTaskIncrementTick+0x150>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a07c:	693a      	ldr	r2, [r7, #16]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	429a      	cmp	r2, r3
 800a082:	d203      	bcs.n	800a08c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a084:	4a2e      	ldr	r2, [pc, #184]	; (800a140 <xTaskIncrementTick+0x15c>)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a08a:	e02f      	b.n	800a0ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	3304      	adds	r3, #4
 800a090:	4618      	mov	r0, r3
 800a092:	f7fe ff99 	bl	8008fc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d004      	beq.n	800a0a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	3318      	adds	r3, #24
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7fe ff90 	bl	8008fc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ac:	4b25      	ldr	r3, [pc, #148]	; (800a144 <xTaskIncrementTick+0x160>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d903      	bls.n	800a0bc <xTaskIncrementTick+0xd8>
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b8:	4a22      	ldr	r2, [pc, #136]	; (800a144 <xTaskIncrementTick+0x160>)
 800a0ba:	6013      	str	r3, [r2, #0]
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	4413      	add	r3, r2
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	4a1f      	ldr	r2, [pc, #124]	; (800a148 <xTaskIncrementTick+0x164>)
 800a0ca:	441a      	add	r2, r3
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	3304      	adds	r3, #4
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	4610      	mov	r0, r2
 800a0d4:	f7fe ff1b 	bl	8008f0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0dc:	4b1b      	ldr	r3, [pc, #108]	; (800a14c <xTaskIncrementTick+0x168>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d3b8      	bcc.n	800a058 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0ea:	e7b5      	b.n	800a058 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a0ec:	4b17      	ldr	r3, [pc, #92]	; (800a14c <xTaskIncrementTick+0x168>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0f2:	4915      	ldr	r1, [pc, #84]	; (800a148 <xTaskIncrementTick+0x164>)
 800a0f4:	4613      	mov	r3, r2
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	4413      	add	r3, r2
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	440b      	add	r3, r1
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2b01      	cmp	r3, #1
 800a102:	d901      	bls.n	800a108 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a104:	2301      	movs	r3, #1
 800a106:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a108:	4b11      	ldr	r3, [pc, #68]	; (800a150 <xTaskIncrementTick+0x16c>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d007      	beq.n	800a120 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a110:	2301      	movs	r3, #1
 800a112:	617b      	str	r3, [r7, #20]
 800a114:	e004      	b.n	800a120 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a116:	4b0f      	ldr	r3, [pc, #60]	; (800a154 <xTaskIncrementTick+0x170>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	3301      	adds	r3, #1
 800a11c:	4a0d      	ldr	r2, [pc, #52]	; (800a154 <xTaskIncrementTick+0x170>)
 800a11e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a120:	697b      	ldr	r3, [r7, #20]
}
 800a122:	4618      	mov	r0, r3
 800a124:	3718      	adds	r7, #24
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	20000f20 	.word	0x20000f20
 800a130:	20000efc 	.word	0x20000efc
 800a134:	20000eb0 	.word	0x20000eb0
 800a138:	20000eb4 	.word	0x20000eb4
 800a13c:	20000f10 	.word	0x20000f10
 800a140:	20000f18 	.word	0x20000f18
 800a144:	20000f00 	.word	0x20000f00
 800a148:	20000a28 	.word	0x20000a28
 800a14c:	20000a24 	.word	0x20000a24
 800a150:	20000f0c 	.word	0x20000f0c
 800a154:	20000f08 	.word	0x20000f08

0800a158 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a15e:	4b28      	ldr	r3, [pc, #160]	; (800a200 <vTaskSwitchContext+0xa8>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d003      	beq.n	800a16e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a166:	4b27      	ldr	r3, [pc, #156]	; (800a204 <vTaskSwitchContext+0xac>)
 800a168:	2201      	movs	r2, #1
 800a16a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a16c:	e041      	b.n	800a1f2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a16e:	4b25      	ldr	r3, [pc, #148]	; (800a204 <vTaskSwitchContext+0xac>)
 800a170:	2200      	movs	r2, #0
 800a172:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a174:	4b24      	ldr	r3, [pc, #144]	; (800a208 <vTaskSwitchContext+0xb0>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	60fb      	str	r3, [r7, #12]
 800a17a:	e010      	b.n	800a19e <vTaskSwitchContext+0x46>
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d10a      	bne.n	800a198 <vTaskSwitchContext+0x40>
	__asm volatile
 800a182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a186:	f383 8811 	msr	BASEPRI, r3
 800a18a:	f3bf 8f6f 	isb	sy
 800a18e:	f3bf 8f4f 	dsb	sy
 800a192:	607b      	str	r3, [r7, #4]
}
 800a194:	bf00      	nop
 800a196:	e7fe      	b.n	800a196 <vTaskSwitchContext+0x3e>
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	3b01      	subs	r3, #1
 800a19c:	60fb      	str	r3, [r7, #12]
 800a19e:	491b      	ldr	r1, [pc, #108]	; (800a20c <vTaskSwitchContext+0xb4>)
 800a1a0:	68fa      	ldr	r2, [r7, #12]
 800a1a2:	4613      	mov	r3, r2
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	4413      	add	r3, r2
 800a1a8:	009b      	lsls	r3, r3, #2
 800a1aa:	440b      	add	r3, r1
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d0e4      	beq.n	800a17c <vTaskSwitchContext+0x24>
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	4613      	mov	r3, r2
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	4413      	add	r3, r2
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	4a13      	ldr	r2, [pc, #76]	; (800a20c <vTaskSwitchContext+0xb4>)
 800a1be:	4413      	add	r3, r2
 800a1c0:	60bb      	str	r3, [r7, #8]
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	685a      	ldr	r2, [r3, #4]
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	605a      	str	r2, [r3, #4]
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	685a      	ldr	r2, [r3, #4]
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	3308      	adds	r3, #8
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d104      	bne.n	800a1e2 <vTaskSwitchContext+0x8a>
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	685a      	ldr	r2, [r3, #4]
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	605a      	str	r2, [r3, #4]
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	4a09      	ldr	r2, [pc, #36]	; (800a210 <vTaskSwitchContext+0xb8>)
 800a1ea:	6013      	str	r3, [r2, #0]
 800a1ec:	4a06      	ldr	r2, [pc, #24]	; (800a208 <vTaskSwitchContext+0xb0>)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6013      	str	r3, [r2, #0]
}
 800a1f2:	bf00      	nop
 800a1f4:	3714      	adds	r7, #20
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	20000f20 	.word	0x20000f20
 800a204:	20000f0c 	.word	0x20000f0c
 800a208:	20000f00 	.word	0x20000f00
 800a20c:	20000a28 	.word	0x20000a28
 800a210:	20000a24 	.word	0x20000a24

0800a214 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10a      	bne.n	800a23a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a228:	f383 8811 	msr	BASEPRI, r3
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f3bf 8f4f 	dsb	sy
 800a234:	60fb      	str	r3, [r7, #12]
}
 800a236:	bf00      	nop
 800a238:	e7fe      	b.n	800a238 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a23a:	4b07      	ldr	r3, [pc, #28]	; (800a258 <vTaskPlaceOnEventList+0x44>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	3318      	adds	r3, #24
 800a240:	4619      	mov	r1, r3
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f7fe fe87 	bl	8008f56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a248:	2101      	movs	r1, #1
 800a24a:	6838      	ldr	r0, [r7, #0]
 800a24c:	f000 fa7c 	bl	800a748 <prvAddCurrentTaskToDelayedList>
}
 800a250:	bf00      	nop
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	20000a24 	.word	0x20000a24

0800a25c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b086      	sub	sp, #24
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d10a      	bne.n	800a284 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a272:	f383 8811 	msr	BASEPRI, r3
 800a276:	f3bf 8f6f 	isb	sy
 800a27a:	f3bf 8f4f 	dsb	sy
 800a27e:	617b      	str	r3, [r7, #20]
}
 800a280:	bf00      	nop
 800a282:	e7fe      	b.n	800a282 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a284:	4b0a      	ldr	r3, [pc, #40]	; (800a2b0 <vTaskPlaceOnEventListRestricted+0x54>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	3318      	adds	r3, #24
 800a28a:	4619      	mov	r1, r3
 800a28c:	68f8      	ldr	r0, [r7, #12]
 800a28e:	f7fe fe3e 	bl	8008f0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d002      	beq.n	800a29e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a298:	f04f 33ff 	mov.w	r3, #4294967295
 800a29c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a29e:	6879      	ldr	r1, [r7, #4]
 800a2a0:	68b8      	ldr	r0, [r7, #8]
 800a2a2:	f000 fa51 	bl	800a748 <prvAddCurrentTaskToDelayedList>
	}
 800a2a6:	bf00      	nop
 800a2a8:	3718      	adds	r7, #24
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	20000a24 	.word	0x20000a24

0800a2b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b086      	sub	sp, #24
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d10a      	bne.n	800a2e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ce:	f383 8811 	msr	BASEPRI, r3
 800a2d2:	f3bf 8f6f 	isb	sy
 800a2d6:	f3bf 8f4f 	dsb	sy
 800a2da:	60fb      	str	r3, [r7, #12]
}
 800a2dc:	bf00      	nop
 800a2de:	e7fe      	b.n	800a2de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	3318      	adds	r3, #24
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7fe fe6f 	bl	8008fc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2ea:	4b1e      	ldr	r3, [pc, #120]	; (800a364 <xTaskRemoveFromEventList+0xb0>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d11d      	bne.n	800a32e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	3304      	adds	r3, #4
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f7fe fe66 	bl	8008fc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a300:	4b19      	ldr	r3, [pc, #100]	; (800a368 <xTaskRemoveFromEventList+0xb4>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	429a      	cmp	r2, r3
 800a306:	d903      	bls.n	800a310 <xTaskRemoveFromEventList+0x5c>
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a30c:	4a16      	ldr	r2, [pc, #88]	; (800a368 <xTaskRemoveFromEventList+0xb4>)
 800a30e:	6013      	str	r3, [r2, #0]
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a314:	4613      	mov	r3, r2
 800a316:	009b      	lsls	r3, r3, #2
 800a318:	4413      	add	r3, r2
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	4a13      	ldr	r2, [pc, #76]	; (800a36c <xTaskRemoveFromEventList+0xb8>)
 800a31e:	441a      	add	r2, r3
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	3304      	adds	r3, #4
 800a324:	4619      	mov	r1, r3
 800a326:	4610      	mov	r0, r2
 800a328:	f7fe fdf1 	bl	8008f0e <vListInsertEnd>
 800a32c:	e005      	b.n	800a33a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	3318      	adds	r3, #24
 800a332:	4619      	mov	r1, r3
 800a334:	480e      	ldr	r0, [pc, #56]	; (800a370 <xTaskRemoveFromEventList+0xbc>)
 800a336:	f7fe fdea 	bl	8008f0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a33e:	4b0d      	ldr	r3, [pc, #52]	; (800a374 <xTaskRemoveFromEventList+0xc0>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a344:	429a      	cmp	r2, r3
 800a346:	d905      	bls.n	800a354 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a348:	2301      	movs	r3, #1
 800a34a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a34c:	4b0a      	ldr	r3, [pc, #40]	; (800a378 <xTaskRemoveFromEventList+0xc4>)
 800a34e:	2201      	movs	r2, #1
 800a350:	601a      	str	r2, [r3, #0]
 800a352:	e001      	b.n	800a358 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a354:	2300      	movs	r3, #0
 800a356:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a358:	697b      	ldr	r3, [r7, #20]
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3718      	adds	r7, #24
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	20000f20 	.word	0x20000f20
 800a368:	20000f00 	.word	0x20000f00
 800a36c:	20000a28 	.word	0x20000a28
 800a370:	20000eb8 	.word	0x20000eb8
 800a374:	20000a24 	.word	0x20000a24
 800a378:	20000f0c 	.word	0x20000f0c

0800a37c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a384:	4b06      	ldr	r3, [pc, #24]	; (800a3a0 <vTaskInternalSetTimeOutState+0x24>)
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a38c:	4b05      	ldr	r3, [pc, #20]	; (800a3a4 <vTaskInternalSetTimeOutState+0x28>)
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	605a      	str	r2, [r3, #4]
}
 800a394:	bf00      	nop
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr
 800a3a0:	20000f10 	.word	0x20000f10
 800a3a4:	20000efc 	.word	0x20000efc

0800a3a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b088      	sub	sp, #32
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d10a      	bne.n	800a3ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3bc:	f383 8811 	msr	BASEPRI, r3
 800a3c0:	f3bf 8f6f 	isb	sy
 800a3c4:	f3bf 8f4f 	dsb	sy
 800a3c8:	613b      	str	r3, [r7, #16]
}
 800a3ca:	bf00      	nop
 800a3cc:	e7fe      	b.n	800a3cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d10a      	bne.n	800a3ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d8:	f383 8811 	msr	BASEPRI, r3
 800a3dc:	f3bf 8f6f 	isb	sy
 800a3e0:	f3bf 8f4f 	dsb	sy
 800a3e4:	60fb      	str	r3, [r7, #12]
}
 800a3e6:	bf00      	nop
 800a3e8:	e7fe      	b.n	800a3e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a3ea:	f000 fe7b 	bl	800b0e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a3ee:	4b1d      	ldr	r3, [pc, #116]	; (800a464 <xTaskCheckForTimeOut+0xbc>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	69ba      	ldr	r2, [r7, #24]
 800a3fa:	1ad3      	subs	r3, r2, r3
 800a3fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a406:	d102      	bne.n	800a40e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a408:	2300      	movs	r3, #0
 800a40a:	61fb      	str	r3, [r7, #28]
 800a40c:	e023      	b.n	800a456 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	4b15      	ldr	r3, [pc, #84]	; (800a468 <xTaskCheckForTimeOut+0xc0>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	429a      	cmp	r2, r3
 800a418:	d007      	beq.n	800a42a <xTaskCheckForTimeOut+0x82>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	69ba      	ldr	r2, [r7, #24]
 800a420:	429a      	cmp	r2, r3
 800a422:	d302      	bcc.n	800a42a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a424:	2301      	movs	r3, #1
 800a426:	61fb      	str	r3, [r7, #28]
 800a428:	e015      	b.n	800a456 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	697a      	ldr	r2, [r7, #20]
 800a430:	429a      	cmp	r2, r3
 800a432:	d20b      	bcs.n	800a44c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	1ad2      	subs	r2, r2, r3
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f7ff ff9b 	bl	800a37c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a446:	2300      	movs	r3, #0
 800a448:	61fb      	str	r3, [r7, #28]
 800a44a:	e004      	b.n	800a456 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	2200      	movs	r2, #0
 800a450:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a452:	2301      	movs	r3, #1
 800a454:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a456:	f000 fe75 	bl	800b144 <vPortExitCritical>

	return xReturn;
 800a45a:	69fb      	ldr	r3, [r7, #28]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3720      	adds	r7, #32
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}
 800a464:	20000efc 	.word	0x20000efc
 800a468:	20000f10 	.word	0x20000f10

0800a46c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a46c:	b480      	push	{r7}
 800a46e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a470:	4b03      	ldr	r3, [pc, #12]	; (800a480 <vTaskMissedYield+0x14>)
 800a472:	2201      	movs	r2, #1
 800a474:	601a      	str	r2, [r3, #0]
}
 800a476:	bf00      	nop
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr
 800a480:	20000f0c 	.word	0x20000f0c

0800a484 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a48c:	f000 f852 	bl	800a534 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a490:	4b06      	ldr	r3, [pc, #24]	; (800a4ac <prvIdleTask+0x28>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2b01      	cmp	r3, #1
 800a496:	d9f9      	bls.n	800a48c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a498:	4b05      	ldr	r3, [pc, #20]	; (800a4b0 <prvIdleTask+0x2c>)
 800a49a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a49e:	601a      	str	r2, [r3, #0]
 800a4a0:	f3bf 8f4f 	dsb	sy
 800a4a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a4a8:	e7f0      	b.n	800a48c <prvIdleTask+0x8>
 800a4aa:	bf00      	nop
 800a4ac:	20000a28 	.word	0x20000a28
 800a4b0:	e000ed04 	.word	0xe000ed04

0800a4b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	607b      	str	r3, [r7, #4]
 800a4be:	e00c      	b.n	800a4da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	4613      	mov	r3, r2
 800a4c4:	009b      	lsls	r3, r3, #2
 800a4c6:	4413      	add	r3, r2
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	4a12      	ldr	r2, [pc, #72]	; (800a514 <prvInitialiseTaskLists+0x60>)
 800a4cc:	4413      	add	r3, r2
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7fe fcf0 	bl	8008eb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	607b      	str	r3, [r7, #4]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2b37      	cmp	r3, #55	; 0x37
 800a4de:	d9ef      	bls.n	800a4c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a4e0:	480d      	ldr	r0, [pc, #52]	; (800a518 <prvInitialiseTaskLists+0x64>)
 800a4e2:	f7fe fce7 	bl	8008eb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a4e6:	480d      	ldr	r0, [pc, #52]	; (800a51c <prvInitialiseTaskLists+0x68>)
 800a4e8:	f7fe fce4 	bl	8008eb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a4ec:	480c      	ldr	r0, [pc, #48]	; (800a520 <prvInitialiseTaskLists+0x6c>)
 800a4ee:	f7fe fce1 	bl	8008eb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a4f2:	480c      	ldr	r0, [pc, #48]	; (800a524 <prvInitialiseTaskLists+0x70>)
 800a4f4:	f7fe fcde 	bl	8008eb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a4f8:	480b      	ldr	r0, [pc, #44]	; (800a528 <prvInitialiseTaskLists+0x74>)
 800a4fa:	f7fe fcdb 	bl	8008eb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a4fe:	4b0b      	ldr	r3, [pc, #44]	; (800a52c <prvInitialiseTaskLists+0x78>)
 800a500:	4a05      	ldr	r2, [pc, #20]	; (800a518 <prvInitialiseTaskLists+0x64>)
 800a502:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a504:	4b0a      	ldr	r3, [pc, #40]	; (800a530 <prvInitialiseTaskLists+0x7c>)
 800a506:	4a05      	ldr	r2, [pc, #20]	; (800a51c <prvInitialiseTaskLists+0x68>)
 800a508:	601a      	str	r2, [r3, #0]
}
 800a50a:	bf00      	nop
 800a50c:	3708      	adds	r7, #8
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	20000a28 	.word	0x20000a28
 800a518:	20000e88 	.word	0x20000e88
 800a51c:	20000e9c 	.word	0x20000e9c
 800a520:	20000eb8 	.word	0x20000eb8
 800a524:	20000ecc 	.word	0x20000ecc
 800a528:	20000ee4 	.word	0x20000ee4
 800a52c:	20000eb0 	.word	0x20000eb0
 800a530:	20000eb4 	.word	0x20000eb4

0800a534 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a53a:	e019      	b.n	800a570 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a53c:	f000 fdd2 	bl	800b0e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a540:	4b10      	ldr	r3, [pc, #64]	; (800a584 <prvCheckTasksWaitingTermination+0x50>)
 800a542:	68db      	ldr	r3, [r3, #12]
 800a544:	68db      	ldr	r3, [r3, #12]
 800a546:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	3304      	adds	r3, #4
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7fe fd3b 	bl	8008fc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a552:	4b0d      	ldr	r3, [pc, #52]	; (800a588 <prvCheckTasksWaitingTermination+0x54>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	3b01      	subs	r3, #1
 800a558:	4a0b      	ldr	r2, [pc, #44]	; (800a588 <prvCheckTasksWaitingTermination+0x54>)
 800a55a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a55c:	4b0b      	ldr	r3, [pc, #44]	; (800a58c <prvCheckTasksWaitingTermination+0x58>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	3b01      	subs	r3, #1
 800a562:	4a0a      	ldr	r2, [pc, #40]	; (800a58c <prvCheckTasksWaitingTermination+0x58>)
 800a564:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a566:	f000 fded 	bl	800b144 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 f810 	bl	800a590 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a570:	4b06      	ldr	r3, [pc, #24]	; (800a58c <prvCheckTasksWaitingTermination+0x58>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1e1      	bne.n	800a53c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a578:	bf00      	nop
 800a57a:	bf00      	nop
 800a57c:	3708      	adds	r7, #8
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	20000ecc 	.word	0x20000ecc
 800a588:	20000ef8 	.word	0x20000ef8
 800a58c:	20000ee0 	.word	0x20000ee0

0800a590 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d108      	bne.n	800a5b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f000 ff4c 	bl	800b444 <vPortFree>
				vPortFree( pxTCB );
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 ff49 	bl	800b444 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a5b2:	e018      	b.n	800a5e6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d103      	bne.n	800a5c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 ff40 	bl	800b444 <vPortFree>
	}
 800a5c4:	e00f      	b.n	800a5e6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a5cc:	2b02      	cmp	r3, #2
 800a5ce:	d00a      	beq.n	800a5e6 <prvDeleteTCB+0x56>
	__asm volatile
 800a5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d4:	f383 8811 	msr	BASEPRI, r3
 800a5d8:	f3bf 8f6f 	isb	sy
 800a5dc:	f3bf 8f4f 	dsb	sy
 800a5e0:	60fb      	str	r3, [r7, #12]
}
 800a5e2:	bf00      	nop
 800a5e4:	e7fe      	b.n	800a5e4 <prvDeleteTCB+0x54>
	}
 800a5e6:	bf00      	nop
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
	...

0800a5f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5f6:	4b0c      	ldr	r3, [pc, #48]	; (800a628 <prvResetNextTaskUnblockTime+0x38>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d104      	bne.n	800a60a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a600:	4b0a      	ldr	r3, [pc, #40]	; (800a62c <prvResetNextTaskUnblockTime+0x3c>)
 800a602:	f04f 32ff 	mov.w	r2, #4294967295
 800a606:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a608:	e008      	b.n	800a61c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a60a:	4b07      	ldr	r3, [pc, #28]	; (800a628 <prvResetNextTaskUnblockTime+0x38>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	4a04      	ldr	r2, [pc, #16]	; (800a62c <prvResetNextTaskUnblockTime+0x3c>)
 800a61a:	6013      	str	r3, [r2, #0]
}
 800a61c:	bf00      	nop
 800a61e:	370c      	adds	r7, #12
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr
 800a628:	20000eb0 	.word	0x20000eb0
 800a62c:	20000f18 	.word	0x20000f18

0800a630 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a636:	4b0b      	ldr	r3, [pc, #44]	; (800a664 <xTaskGetSchedulerState+0x34>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d102      	bne.n	800a644 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a63e:	2301      	movs	r3, #1
 800a640:	607b      	str	r3, [r7, #4]
 800a642:	e008      	b.n	800a656 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a644:	4b08      	ldr	r3, [pc, #32]	; (800a668 <xTaskGetSchedulerState+0x38>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d102      	bne.n	800a652 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a64c:	2302      	movs	r3, #2
 800a64e:	607b      	str	r3, [r7, #4]
 800a650:	e001      	b.n	800a656 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a652:	2300      	movs	r3, #0
 800a654:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a656:	687b      	ldr	r3, [r7, #4]
	}
 800a658:	4618      	mov	r0, r3
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr
 800a664:	20000f04 	.word	0x20000f04
 800a668:	20000f20 	.word	0x20000f20

0800a66c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b086      	sub	sp, #24
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a678:	2300      	movs	r3, #0
 800a67a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d056      	beq.n	800a730 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a682:	4b2e      	ldr	r3, [pc, #184]	; (800a73c <xTaskPriorityDisinherit+0xd0>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	693a      	ldr	r2, [r7, #16]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d00a      	beq.n	800a6a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a690:	f383 8811 	msr	BASEPRI, r3
 800a694:	f3bf 8f6f 	isb	sy
 800a698:	f3bf 8f4f 	dsb	sy
 800a69c:	60fb      	str	r3, [r7, #12]
}
 800a69e:	bf00      	nop
 800a6a0:	e7fe      	b.n	800a6a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d10a      	bne.n	800a6c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ae:	f383 8811 	msr	BASEPRI, r3
 800a6b2:	f3bf 8f6f 	isb	sy
 800a6b6:	f3bf 8f4f 	dsb	sy
 800a6ba:	60bb      	str	r3, [r7, #8]
}
 800a6bc:	bf00      	nop
 800a6be:	e7fe      	b.n	800a6be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6c4:	1e5a      	subs	r2, r3, #1
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d02c      	beq.n	800a730 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d128      	bne.n	800a730 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	3304      	adds	r3, #4
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7fe fc70 	bl	8008fc8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a700:	4b0f      	ldr	r3, [pc, #60]	; (800a740 <xTaskPriorityDisinherit+0xd4>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	429a      	cmp	r2, r3
 800a706:	d903      	bls.n	800a710 <xTaskPriorityDisinherit+0xa4>
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70c:	4a0c      	ldr	r2, [pc, #48]	; (800a740 <xTaskPriorityDisinherit+0xd4>)
 800a70e:	6013      	str	r3, [r2, #0]
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a714:	4613      	mov	r3, r2
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	4413      	add	r3, r2
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	4a09      	ldr	r2, [pc, #36]	; (800a744 <xTaskPriorityDisinherit+0xd8>)
 800a71e:	441a      	add	r2, r3
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	3304      	adds	r3, #4
 800a724:	4619      	mov	r1, r3
 800a726:	4610      	mov	r0, r2
 800a728:	f7fe fbf1 	bl	8008f0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a72c:	2301      	movs	r3, #1
 800a72e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a730:	697b      	ldr	r3, [r7, #20]
	}
 800a732:	4618      	mov	r0, r3
 800a734:	3718      	adds	r7, #24
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	20000a24 	.word	0x20000a24
 800a740:	20000f00 	.word	0x20000f00
 800a744:	20000a28 	.word	0x20000a28

0800a748 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a752:	4b21      	ldr	r3, [pc, #132]	; (800a7d8 <prvAddCurrentTaskToDelayedList+0x90>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a758:	4b20      	ldr	r3, [pc, #128]	; (800a7dc <prvAddCurrentTaskToDelayedList+0x94>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	3304      	adds	r3, #4
 800a75e:	4618      	mov	r0, r3
 800a760:	f7fe fc32 	bl	8008fc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76a:	d10a      	bne.n	800a782 <prvAddCurrentTaskToDelayedList+0x3a>
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d007      	beq.n	800a782 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a772:	4b1a      	ldr	r3, [pc, #104]	; (800a7dc <prvAddCurrentTaskToDelayedList+0x94>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	3304      	adds	r3, #4
 800a778:	4619      	mov	r1, r3
 800a77a:	4819      	ldr	r0, [pc, #100]	; (800a7e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800a77c:	f7fe fbc7 	bl	8008f0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a780:	e026      	b.n	800a7d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	4413      	add	r3, r2
 800a788:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a78a:	4b14      	ldr	r3, [pc, #80]	; (800a7dc <prvAddCurrentTaskToDelayedList+0x94>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	68ba      	ldr	r2, [r7, #8]
 800a790:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a792:	68ba      	ldr	r2, [r7, #8]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	429a      	cmp	r2, r3
 800a798:	d209      	bcs.n	800a7ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a79a:	4b12      	ldr	r3, [pc, #72]	; (800a7e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	4b0f      	ldr	r3, [pc, #60]	; (800a7dc <prvAddCurrentTaskToDelayedList+0x94>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	4610      	mov	r0, r2
 800a7a8:	f7fe fbd5 	bl	8008f56 <vListInsert>
}
 800a7ac:	e010      	b.n	800a7d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7ae:	4b0e      	ldr	r3, [pc, #56]	; (800a7e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a7b0:	681a      	ldr	r2, [r3, #0]
 800a7b2:	4b0a      	ldr	r3, [pc, #40]	; (800a7dc <prvAddCurrentTaskToDelayedList+0x94>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	3304      	adds	r3, #4
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	4610      	mov	r0, r2
 800a7bc:	f7fe fbcb 	bl	8008f56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a7c0:	4b0a      	ldr	r3, [pc, #40]	; (800a7ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	68ba      	ldr	r2, [r7, #8]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d202      	bcs.n	800a7d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a7ca:	4a08      	ldr	r2, [pc, #32]	; (800a7ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	6013      	str	r3, [r2, #0]
}
 800a7d0:	bf00      	nop
 800a7d2:	3710      	adds	r7, #16
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	20000efc 	.word	0x20000efc
 800a7dc:	20000a24 	.word	0x20000a24
 800a7e0:	20000ee4 	.word	0x20000ee4
 800a7e4:	20000eb4 	.word	0x20000eb4
 800a7e8:	20000eb0 	.word	0x20000eb0
 800a7ec:	20000f18 	.word	0x20000f18

0800a7f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b08a      	sub	sp, #40	; 0x28
 800a7f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a7fa:	f000 fb07 	bl	800ae0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a7fe:	4b1c      	ldr	r3, [pc, #112]	; (800a870 <xTimerCreateTimerTask+0x80>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d021      	beq.n	800a84a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a806:	2300      	movs	r3, #0
 800a808:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a80a:	2300      	movs	r3, #0
 800a80c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a80e:	1d3a      	adds	r2, r7, #4
 800a810:	f107 0108 	add.w	r1, r7, #8
 800a814:	f107 030c 	add.w	r3, r7, #12
 800a818:	4618      	mov	r0, r3
 800a81a:	f7fe fb31 	bl	8008e80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a81e:	6879      	ldr	r1, [r7, #4]
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	9202      	str	r2, [sp, #8]
 800a826:	9301      	str	r3, [sp, #4]
 800a828:	2302      	movs	r3, #2
 800a82a:	9300      	str	r3, [sp, #0]
 800a82c:	2300      	movs	r3, #0
 800a82e:	460a      	mov	r2, r1
 800a830:	4910      	ldr	r1, [pc, #64]	; (800a874 <xTimerCreateTimerTask+0x84>)
 800a832:	4811      	ldr	r0, [pc, #68]	; (800a878 <xTimerCreateTimerTask+0x88>)
 800a834:	f7ff f8de 	bl	80099f4 <xTaskCreateStatic>
 800a838:	4603      	mov	r3, r0
 800a83a:	4a10      	ldr	r2, [pc, #64]	; (800a87c <xTimerCreateTimerTask+0x8c>)
 800a83c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a83e:	4b0f      	ldr	r3, [pc, #60]	; (800a87c <xTimerCreateTimerTask+0x8c>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d001      	beq.n	800a84a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a846:	2301      	movs	r3, #1
 800a848:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d10a      	bne.n	800a866 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a854:	f383 8811 	msr	BASEPRI, r3
 800a858:	f3bf 8f6f 	isb	sy
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	613b      	str	r3, [r7, #16]
}
 800a862:	bf00      	nop
 800a864:	e7fe      	b.n	800a864 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a866:	697b      	ldr	r3, [r7, #20]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3718      	adds	r7, #24
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	20000f54 	.word	0x20000f54
 800a874:	0800df64 	.word	0x0800df64
 800a878:	0800a9b5 	.word	0x0800a9b5
 800a87c:	20000f58 	.word	0x20000f58

0800a880 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b08a      	sub	sp, #40	; 0x28
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	607a      	str	r2, [r7, #4]
 800a88c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a88e:	2300      	movs	r3, #0
 800a890:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10a      	bne.n	800a8ae <xTimerGenericCommand+0x2e>
	__asm volatile
 800a898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89c:	f383 8811 	msr	BASEPRI, r3
 800a8a0:	f3bf 8f6f 	isb	sy
 800a8a4:	f3bf 8f4f 	dsb	sy
 800a8a8:	623b      	str	r3, [r7, #32]
}
 800a8aa:	bf00      	nop
 800a8ac:	e7fe      	b.n	800a8ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a8ae:	4b1a      	ldr	r3, [pc, #104]	; (800a918 <xTimerGenericCommand+0x98>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d02a      	beq.n	800a90c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	2b05      	cmp	r3, #5
 800a8c6:	dc18      	bgt.n	800a8fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a8c8:	f7ff feb2 	bl	800a630 <xTaskGetSchedulerState>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b02      	cmp	r3, #2
 800a8d0:	d109      	bne.n	800a8e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a8d2:	4b11      	ldr	r3, [pc, #68]	; (800a918 <xTimerGenericCommand+0x98>)
 800a8d4:	6818      	ldr	r0, [r3, #0]
 800a8d6:	f107 0110 	add.w	r1, r7, #16
 800a8da:	2300      	movs	r3, #0
 800a8dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8de:	f7fe fca1 	bl	8009224 <xQueueGenericSend>
 800a8e2:	6278      	str	r0, [r7, #36]	; 0x24
 800a8e4:	e012      	b.n	800a90c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a8e6:	4b0c      	ldr	r3, [pc, #48]	; (800a918 <xTimerGenericCommand+0x98>)
 800a8e8:	6818      	ldr	r0, [r3, #0]
 800a8ea:	f107 0110 	add.w	r1, r7, #16
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f7fe fc97 	bl	8009224 <xQueueGenericSend>
 800a8f6:	6278      	str	r0, [r7, #36]	; 0x24
 800a8f8:	e008      	b.n	800a90c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a8fa:	4b07      	ldr	r3, [pc, #28]	; (800a918 <xTimerGenericCommand+0x98>)
 800a8fc:	6818      	ldr	r0, [r3, #0]
 800a8fe:	f107 0110 	add.w	r1, r7, #16
 800a902:	2300      	movs	r3, #0
 800a904:	683a      	ldr	r2, [r7, #0]
 800a906:	f7fe fd8b 	bl	8009420 <xQueueGenericSendFromISR>
 800a90a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3728      	adds	r7, #40	; 0x28
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	20000f54 	.word	0x20000f54

0800a91c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b088      	sub	sp, #32
 800a920:	af02      	add	r7, sp, #8
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a926:	4b22      	ldr	r3, [pc, #136]	; (800a9b0 <prvProcessExpiredTimer+0x94>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	3304      	adds	r3, #4
 800a934:	4618      	mov	r0, r3
 800a936:	f7fe fb47 	bl	8008fc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a940:	f003 0304 	and.w	r3, r3, #4
 800a944:	2b00      	cmp	r3, #0
 800a946:	d022      	beq.n	800a98e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	699a      	ldr	r2, [r3, #24]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	18d1      	adds	r1, r2, r3
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	683a      	ldr	r2, [r7, #0]
 800a954:	6978      	ldr	r0, [r7, #20]
 800a956:	f000 f8d1 	bl	800aafc <prvInsertTimerInActiveList>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d01f      	beq.n	800a9a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a960:	2300      	movs	r3, #0
 800a962:	9300      	str	r3, [sp, #0]
 800a964:	2300      	movs	r3, #0
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	2100      	movs	r1, #0
 800a96a:	6978      	ldr	r0, [r7, #20]
 800a96c:	f7ff ff88 	bl	800a880 <xTimerGenericCommand>
 800a970:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d113      	bne.n	800a9a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97c:	f383 8811 	msr	BASEPRI, r3
 800a980:	f3bf 8f6f 	isb	sy
 800a984:	f3bf 8f4f 	dsb	sy
 800a988:	60fb      	str	r3, [r7, #12]
}
 800a98a:	bf00      	nop
 800a98c:	e7fe      	b.n	800a98c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a994:	f023 0301 	bic.w	r3, r3, #1
 800a998:	b2da      	uxtb	r2, r3
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	6a1b      	ldr	r3, [r3, #32]
 800a9a4:	6978      	ldr	r0, [r7, #20]
 800a9a6:	4798      	blx	r3
}
 800a9a8:	bf00      	nop
 800a9aa:	3718      	adds	r7, #24
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	20000f4c 	.word	0x20000f4c

0800a9b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a9bc:	f107 0308 	add.w	r3, r7, #8
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f000 f857 	bl	800aa74 <prvGetNextExpireTime>
 800a9c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	68f8      	ldr	r0, [r7, #12]
 800a9ce:	f000 f803 	bl	800a9d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a9d2:	f000 f8d5 	bl	800ab80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a9d6:	e7f1      	b.n	800a9bc <prvTimerTask+0x8>

0800a9d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a9e2:	f7ff fa43 	bl	8009e6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9e6:	f107 0308 	add.w	r3, r7, #8
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f000 f866 	bl	800aabc <prvSampleTimeNow>
 800a9f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d130      	bne.n	800aa5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d10a      	bne.n	800aa14 <prvProcessTimerOrBlockTask+0x3c>
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d806      	bhi.n	800aa14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aa06:	f7ff fa3f 	bl	8009e88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aa0a:	68f9      	ldr	r1, [r7, #12]
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f7ff ff85 	bl	800a91c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aa12:	e024      	b.n	800aa5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d008      	beq.n	800aa2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aa1a:	4b13      	ldr	r3, [pc, #76]	; (800aa68 <prvProcessTimerOrBlockTask+0x90>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d101      	bne.n	800aa28 <prvProcessTimerOrBlockTask+0x50>
 800aa24:	2301      	movs	r3, #1
 800aa26:	e000      	b.n	800aa2a <prvProcessTimerOrBlockTask+0x52>
 800aa28:	2300      	movs	r3, #0
 800aa2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aa2c:	4b0f      	ldr	r3, [pc, #60]	; (800aa6c <prvProcessTimerOrBlockTask+0x94>)
 800aa2e:	6818      	ldr	r0, [r3, #0]
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	1ad3      	subs	r3, r2, r3
 800aa36:	683a      	ldr	r2, [r7, #0]
 800aa38:	4619      	mov	r1, r3
 800aa3a:	f7fe ffa7 	bl	800998c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aa3e:	f7ff fa23 	bl	8009e88 <xTaskResumeAll>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d10a      	bne.n	800aa5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aa48:	4b09      	ldr	r3, [pc, #36]	; (800aa70 <prvProcessTimerOrBlockTask+0x98>)
 800aa4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa4e:	601a      	str	r2, [r3, #0]
 800aa50:	f3bf 8f4f 	dsb	sy
 800aa54:	f3bf 8f6f 	isb	sy
}
 800aa58:	e001      	b.n	800aa5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aa5a:	f7ff fa15 	bl	8009e88 <xTaskResumeAll>
}
 800aa5e:	bf00      	nop
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	bf00      	nop
 800aa68:	20000f50 	.word	0x20000f50
 800aa6c:	20000f54 	.word	0x20000f54
 800aa70:	e000ed04 	.word	0xe000ed04

0800aa74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aa74:	b480      	push	{r7}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aa7c:	4b0e      	ldr	r3, [pc, #56]	; (800aab8 <prvGetNextExpireTime+0x44>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d101      	bne.n	800aa8a <prvGetNextExpireTime+0x16>
 800aa86:	2201      	movs	r2, #1
 800aa88:	e000      	b.n	800aa8c <prvGetNextExpireTime+0x18>
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d105      	bne.n	800aaa4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa98:	4b07      	ldr	r3, [pc, #28]	; (800aab8 <prvGetNextExpireTime+0x44>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	60fb      	str	r3, [r7, #12]
 800aaa2:	e001      	b.n	800aaa8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3714      	adds	r7, #20
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr
 800aab6:	bf00      	nop
 800aab8:	20000f4c 	.word	0x20000f4c

0800aabc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aac4:	f7ff fa7e 	bl	8009fc4 <xTaskGetTickCount>
 800aac8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aaca:	4b0b      	ldr	r3, [pc, #44]	; (800aaf8 <prvSampleTimeNow+0x3c>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d205      	bcs.n	800aae0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aad4:	f000 f936 	bl	800ad44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2201      	movs	r2, #1
 800aadc:	601a      	str	r2, [r3, #0]
 800aade:	e002      	b.n	800aae6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aae6:	4a04      	ldr	r2, [pc, #16]	; (800aaf8 <prvSampleTimeNow+0x3c>)
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800aaec:	68fb      	ldr	r3, [r7, #12]
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3710      	adds	r7, #16
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	20000f5c 	.word	0x20000f5c

0800aafc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b086      	sub	sp, #24
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	60b9      	str	r1, [r7, #8]
 800ab06:	607a      	str	r2, [r7, #4]
 800ab08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	68ba      	ldr	r2, [r7, #8]
 800ab12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ab1a:	68ba      	ldr	r2, [r7, #8]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d812      	bhi.n	800ab48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	1ad2      	subs	r2, r2, r3
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	699b      	ldr	r3, [r3, #24]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d302      	bcc.n	800ab36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ab30:	2301      	movs	r3, #1
 800ab32:	617b      	str	r3, [r7, #20]
 800ab34:	e01b      	b.n	800ab6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ab36:	4b10      	ldr	r3, [pc, #64]	; (800ab78 <prvInsertTimerInActiveList+0x7c>)
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	3304      	adds	r3, #4
 800ab3e:	4619      	mov	r1, r3
 800ab40:	4610      	mov	r0, r2
 800ab42:	f7fe fa08 	bl	8008f56 <vListInsert>
 800ab46:	e012      	b.n	800ab6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d206      	bcs.n	800ab5e <prvInsertTimerInActiveList+0x62>
 800ab50:	68ba      	ldr	r2, [r7, #8]
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d302      	bcc.n	800ab5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	617b      	str	r3, [r7, #20]
 800ab5c:	e007      	b.n	800ab6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab5e:	4b07      	ldr	r3, [pc, #28]	; (800ab7c <prvInsertTimerInActiveList+0x80>)
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	3304      	adds	r3, #4
 800ab66:	4619      	mov	r1, r3
 800ab68:	4610      	mov	r0, r2
 800ab6a:	f7fe f9f4 	bl	8008f56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ab6e:	697b      	ldr	r3, [r7, #20]
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3718      	adds	r7, #24
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}
 800ab78:	20000f50 	.word	0x20000f50
 800ab7c:	20000f4c 	.word	0x20000f4c

0800ab80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b08e      	sub	sp, #56	; 0x38
 800ab84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab86:	e0ca      	b.n	800ad1e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	da18      	bge.n	800abc0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ab8e:	1d3b      	adds	r3, r7, #4
 800ab90:	3304      	adds	r3, #4
 800ab92:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ab94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d10a      	bne.n	800abb0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ab9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab9e:	f383 8811 	msr	BASEPRI, r3
 800aba2:	f3bf 8f6f 	isb	sy
 800aba6:	f3bf 8f4f 	dsb	sy
 800abaa:	61fb      	str	r3, [r7, #28]
}
 800abac:	bf00      	nop
 800abae:	e7fe      	b.n	800abae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800abb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abb6:	6850      	ldr	r0, [r2, #4]
 800abb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abba:	6892      	ldr	r2, [r2, #8]
 800abbc:	4611      	mov	r1, r2
 800abbe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	f2c0 80aa 	blt.w	800ad1c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800abcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abce:	695b      	ldr	r3, [r3, #20]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d004      	beq.n	800abde <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd6:	3304      	adds	r3, #4
 800abd8:	4618      	mov	r0, r3
 800abda:	f7fe f9f5 	bl	8008fc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800abde:	463b      	mov	r3, r7
 800abe0:	4618      	mov	r0, r3
 800abe2:	f7ff ff6b 	bl	800aabc <prvSampleTimeNow>
 800abe6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2b09      	cmp	r3, #9
 800abec:	f200 8097 	bhi.w	800ad1e <prvProcessReceivedCommands+0x19e>
 800abf0:	a201      	add	r2, pc, #4	; (adr r2, 800abf8 <prvProcessReceivedCommands+0x78>)
 800abf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf6:	bf00      	nop
 800abf8:	0800ac21 	.word	0x0800ac21
 800abfc:	0800ac21 	.word	0x0800ac21
 800ac00:	0800ac21 	.word	0x0800ac21
 800ac04:	0800ac95 	.word	0x0800ac95
 800ac08:	0800aca9 	.word	0x0800aca9
 800ac0c:	0800acf3 	.word	0x0800acf3
 800ac10:	0800ac21 	.word	0x0800ac21
 800ac14:	0800ac21 	.word	0x0800ac21
 800ac18:	0800ac95 	.word	0x0800ac95
 800ac1c:	0800aca9 	.word	0x0800aca9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac26:	f043 0301 	orr.w	r3, r3, #1
 800ac2a:	b2da      	uxtb	r2, r3
 800ac2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ac32:	68ba      	ldr	r2, [r7, #8]
 800ac34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac36:	699b      	ldr	r3, [r3, #24]
 800ac38:	18d1      	adds	r1, r2, r3
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac40:	f7ff ff5c 	bl	800aafc <prvInsertTimerInActiveList>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d069      	beq.n	800ad1e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4c:	6a1b      	ldr	r3, [r3, #32]
 800ac4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac58:	f003 0304 	and.w	r3, r3, #4
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d05e      	beq.n	800ad1e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac64:	699b      	ldr	r3, [r3, #24]
 800ac66:	441a      	add	r2, r3
 800ac68:	2300      	movs	r3, #0
 800ac6a:	9300      	str	r3, [sp, #0]
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	2100      	movs	r1, #0
 800ac70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac72:	f7ff fe05 	bl	800a880 <xTimerGenericCommand>
 800ac76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ac78:	6a3b      	ldr	r3, [r7, #32]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d14f      	bne.n	800ad1e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ac7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac82:	f383 8811 	msr	BASEPRI, r3
 800ac86:	f3bf 8f6f 	isb	sy
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	61bb      	str	r3, [r7, #24]
}
 800ac90:	bf00      	nop
 800ac92:	e7fe      	b.n	800ac92 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac9a:	f023 0301 	bic.w	r3, r3, #1
 800ac9e:	b2da      	uxtb	r2, r3
 800aca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800aca6:	e03a      	b.n	800ad1e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acae:	f043 0301 	orr.w	r3, r3, #1
 800acb2:	b2da      	uxtb	r2, r3
 800acb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800acba:	68ba      	ldr	r2, [r7, #8]
 800acbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acbe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800acc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc2:	699b      	ldr	r3, [r3, #24]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d10a      	bne.n	800acde <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800acc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800accc:	f383 8811 	msr	BASEPRI, r3
 800acd0:	f3bf 8f6f 	isb	sy
 800acd4:	f3bf 8f4f 	dsb	sy
 800acd8:	617b      	str	r3, [r7, #20]
}
 800acda:	bf00      	nop
 800acdc:	e7fe      	b.n	800acdc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800acde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace0:	699a      	ldr	r2, [r3, #24]
 800ace2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace4:	18d1      	adds	r1, r2, r3
 800ace6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acec:	f7ff ff06 	bl	800aafc <prvInsertTimerInActiveList>
					break;
 800acf0:	e015      	b.n	800ad1e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800acf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acf8:	f003 0302 	and.w	r3, r3, #2
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d103      	bne.n	800ad08 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ad00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad02:	f000 fb9f 	bl	800b444 <vPortFree>
 800ad06:	e00a      	b.n	800ad1e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad0e:	f023 0301 	bic.w	r3, r3, #1
 800ad12:	b2da      	uxtb	r2, r3
 800ad14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ad1a:	e000      	b.n	800ad1e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ad1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad1e:	4b08      	ldr	r3, [pc, #32]	; (800ad40 <prvProcessReceivedCommands+0x1c0>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	1d39      	adds	r1, r7, #4
 800ad24:	2200      	movs	r2, #0
 800ad26:	4618      	mov	r0, r3
 800ad28:	f7fe fc16 	bl	8009558 <xQueueReceive>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	f47f af2a 	bne.w	800ab88 <prvProcessReceivedCommands+0x8>
	}
}
 800ad34:	bf00      	nop
 800ad36:	bf00      	nop
 800ad38:	3730      	adds	r7, #48	; 0x30
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	20000f54 	.word	0x20000f54

0800ad44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b088      	sub	sp, #32
 800ad48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad4a:	e048      	b.n	800adde <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad4c:	4b2d      	ldr	r3, [pc, #180]	; (800ae04 <prvSwitchTimerLists+0xc0>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	68db      	ldr	r3, [r3, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad56:	4b2b      	ldr	r3, [pc, #172]	; (800ae04 <prvSwitchTimerLists+0xc0>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	3304      	adds	r3, #4
 800ad64:	4618      	mov	r0, r3
 800ad66:	f7fe f92f 	bl	8008fc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	6a1b      	ldr	r3, [r3, #32]
 800ad6e:	68f8      	ldr	r0, [r7, #12]
 800ad70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad78:	f003 0304 	and.w	r3, r3, #4
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d02e      	beq.n	800adde <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	699b      	ldr	r3, [r3, #24]
 800ad84:	693a      	ldr	r2, [r7, #16]
 800ad86:	4413      	add	r3, r2
 800ad88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ad8a:	68ba      	ldr	r2, [r7, #8]
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d90e      	bls.n	800adb0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	68ba      	ldr	r2, [r7, #8]
 800ad96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad9e:	4b19      	ldr	r3, [pc, #100]	; (800ae04 <prvSwitchTimerLists+0xc0>)
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	3304      	adds	r3, #4
 800ada6:	4619      	mov	r1, r3
 800ada8:	4610      	mov	r0, r2
 800adaa:	f7fe f8d4 	bl	8008f56 <vListInsert>
 800adae:	e016      	b.n	800adde <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800adb0:	2300      	movs	r3, #0
 800adb2:	9300      	str	r3, [sp, #0]
 800adb4:	2300      	movs	r3, #0
 800adb6:	693a      	ldr	r2, [r7, #16]
 800adb8:	2100      	movs	r1, #0
 800adba:	68f8      	ldr	r0, [r7, #12]
 800adbc:	f7ff fd60 	bl	800a880 <xTimerGenericCommand>
 800adc0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d10a      	bne.n	800adde <prvSwitchTimerLists+0x9a>
	__asm volatile
 800adc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adcc:	f383 8811 	msr	BASEPRI, r3
 800add0:	f3bf 8f6f 	isb	sy
 800add4:	f3bf 8f4f 	dsb	sy
 800add8:	603b      	str	r3, [r7, #0]
}
 800adda:	bf00      	nop
 800addc:	e7fe      	b.n	800addc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800adde:	4b09      	ldr	r3, [pc, #36]	; (800ae04 <prvSwitchTimerLists+0xc0>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d1b1      	bne.n	800ad4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ade8:	4b06      	ldr	r3, [pc, #24]	; (800ae04 <prvSwitchTimerLists+0xc0>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800adee:	4b06      	ldr	r3, [pc, #24]	; (800ae08 <prvSwitchTimerLists+0xc4>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4a04      	ldr	r2, [pc, #16]	; (800ae04 <prvSwitchTimerLists+0xc0>)
 800adf4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800adf6:	4a04      	ldr	r2, [pc, #16]	; (800ae08 <prvSwitchTimerLists+0xc4>)
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	6013      	str	r3, [r2, #0]
}
 800adfc:	bf00      	nop
 800adfe:	3718      	adds	r7, #24
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}
 800ae04:	20000f4c 	.word	0x20000f4c
 800ae08:	20000f50 	.word	0x20000f50

0800ae0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b082      	sub	sp, #8
 800ae10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ae12:	f000 f967 	bl	800b0e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ae16:	4b15      	ldr	r3, [pc, #84]	; (800ae6c <prvCheckForValidListAndQueue+0x60>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d120      	bne.n	800ae60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ae1e:	4814      	ldr	r0, [pc, #80]	; (800ae70 <prvCheckForValidListAndQueue+0x64>)
 800ae20:	f7fe f848 	bl	8008eb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ae24:	4813      	ldr	r0, [pc, #76]	; (800ae74 <prvCheckForValidListAndQueue+0x68>)
 800ae26:	f7fe f845 	bl	8008eb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ae2a:	4b13      	ldr	r3, [pc, #76]	; (800ae78 <prvCheckForValidListAndQueue+0x6c>)
 800ae2c:	4a10      	ldr	r2, [pc, #64]	; (800ae70 <prvCheckForValidListAndQueue+0x64>)
 800ae2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ae30:	4b12      	ldr	r3, [pc, #72]	; (800ae7c <prvCheckForValidListAndQueue+0x70>)
 800ae32:	4a10      	ldr	r2, [pc, #64]	; (800ae74 <prvCheckForValidListAndQueue+0x68>)
 800ae34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ae36:	2300      	movs	r3, #0
 800ae38:	9300      	str	r3, [sp, #0]
 800ae3a:	4b11      	ldr	r3, [pc, #68]	; (800ae80 <prvCheckForValidListAndQueue+0x74>)
 800ae3c:	4a11      	ldr	r2, [pc, #68]	; (800ae84 <prvCheckForValidListAndQueue+0x78>)
 800ae3e:	2110      	movs	r1, #16
 800ae40:	200a      	movs	r0, #10
 800ae42:	f7fe f953 	bl	80090ec <xQueueGenericCreateStatic>
 800ae46:	4603      	mov	r3, r0
 800ae48:	4a08      	ldr	r2, [pc, #32]	; (800ae6c <prvCheckForValidListAndQueue+0x60>)
 800ae4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ae4c:	4b07      	ldr	r3, [pc, #28]	; (800ae6c <prvCheckForValidListAndQueue+0x60>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d005      	beq.n	800ae60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ae54:	4b05      	ldr	r3, [pc, #20]	; (800ae6c <prvCheckForValidListAndQueue+0x60>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	490b      	ldr	r1, [pc, #44]	; (800ae88 <prvCheckForValidListAndQueue+0x7c>)
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7fe fd6c 	bl	8009938 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae60:	f000 f970 	bl	800b144 <vPortExitCritical>
}
 800ae64:	bf00      	nop
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	20000f54 	.word	0x20000f54
 800ae70:	20000f24 	.word	0x20000f24
 800ae74:	20000f38 	.word	0x20000f38
 800ae78:	20000f4c 	.word	0x20000f4c
 800ae7c:	20000f50 	.word	0x20000f50
 800ae80:	20001000 	.word	0x20001000
 800ae84:	20000f60 	.word	0x20000f60
 800ae88:	0800df6c 	.word	0x0800df6c

0800ae8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b085      	sub	sp, #20
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	3b04      	subs	r3, #4
 800ae9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aea4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	3b04      	subs	r3, #4
 800aeaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	f023 0201 	bic.w	r2, r3, #1
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	3b04      	subs	r3, #4
 800aeba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aebc:	4a0c      	ldr	r2, [pc, #48]	; (800aef0 <pxPortInitialiseStack+0x64>)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	3b14      	subs	r3, #20
 800aec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	3b04      	subs	r3, #4
 800aed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f06f 0202 	mvn.w	r2, #2
 800aeda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	3b20      	subs	r3, #32
 800aee0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aee2:	68fb      	ldr	r3, [r7, #12]
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3714      	adds	r7, #20
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr
 800aef0:	0800aef5 	.word	0x0800aef5

0800aef4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aef4:	b480      	push	{r7}
 800aef6:	b085      	sub	sp, #20
 800aef8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aefa:	2300      	movs	r3, #0
 800aefc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aefe:	4b12      	ldr	r3, [pc, #72]	; (800af48 <prvTaskExitError+0x54>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af06:	d00a      	beq.n	800af1e <prvTaskExitError+0x2a>
	__asm volatile
 800af08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0c:	f383 8811 	msr	BASEPRI, r3
 800af10:	f3bf 8f6f 	isb	sy
 800af14:	f3bf 8f4f 	dsb	sy
 800af18:	60fb      	str	r3, [r7, #12]
}
 800af1a:	bf00      	nop
 800af1c:	e7fe      	b.n	800af1c <prvTaskExitError+0x28>
	__asm volatile
 800af1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af22:	f383 8811 	msr	BASEPRI, r3
 800af26:	f3bf 8f6f 	isb	sy
 800af2a:	f3bf 8f4f 	dsb	sy
 800af2e:	60bb      	str	r3, [r7, #8]
}
 800af30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800af32:	bf00      	nop
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d0fc      	beq.n	800af34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800af3a:	bf00      	nop
 800af3c:	bf00      	nop
 800af3e:	3714      	adds	r7, #20
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr
 800af48:	2000013c 	.word	0x2000013c
 800af4c:	00000000 	.word	0x00000000

0800af50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800af50:	4b07      	ldr	r3, [pc, #28]	; (800af70 <pxCurrentTCBConst2>)
 800af52:	6819      	ldr	r1, [r3, #0]
 800af54:	6808      	ldr	r0, [r1, #0]
 800af56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af5a:	f380 8809 	msr	PSP, r0
 800af5e:	f3bf 8f6f 	isb	sy
 800af62:	f04f 0000 	mov.w	r0, #0
 800af66:	f380 8811 	msr	BASEPRI, r0
 800af6a:	4770      	bx	lr
 800af6c:	f3af 8000 	nop.w

0800af70 <pxCurrentTCBConst2>:
 800af70:	20000a24 	.word	0x20000a24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800af74:	bf00      	nop
 800af76:	bf00      	nop

0800af78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800af78:	4808      	ldr	r0, [pc, #32]	; (800af9c <prvPortStartFirstTask+0x24>)
 800af7a:	6800      	ldr	r0, [r0, #0]
 800af7c:	6800      	ldr	r0, [r0, #0]
 800af7e:	f380 8808 	msr	MSP, r0
 800af82:	f04f 0000 	mov.w	r0, #0
 800af86:	f380 8814 	msr	CONTROL, r0
 800af8a:	b662      	cpsie	i
 800af8c:	b661      	cpsie	f
 800af8e:	f3bf 8f4f 	dsb	sy
 800af92:	f3bf 8f6f 	isb	sy
 800af96:	df00      	svc	0
 800af98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800af9a:	bf00      	nop
 800af9c:	e000ed08 	.word	0xe000ed08

0800afa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b086      	sub	sp, #24
 800afa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800afa6:	4b46      	ldr	r3, [pc, #280]	; (800b0c0 <xPortStartScheduler+0x120>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4a46      	ldr	r2, [pc, #280]	; (800b0c4 <xPortStartScheduler+0x124>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d10a      	bne.n	800afc6 <xPortStartScheduler+0x26>
	__asm volatile
 800afb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb4:	f383 8811 	msr	BASEPRI, r3
 800afb8:	f3bf 8f6f 	isb	sy
 800afbc:	f3bf 8f4f 	dsb	sy
 800afc0:	613b      	str	r3, [r7, #16]
}
 800afc2:	bf00      	nop
 800afc4:	e7fe      	b.n	800afc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800afc6:	4b3e      	ldr	r3, [pc, #248]	; (800b0c0 <xPortStartScheduler+0x120>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a3f      	ldr	r2, [pc, #252]	; (800b0c8 <xPortStartScheduler+0x128>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d10a      	bne.n	800afe6 <xPortStartScheduler+0x46>
	__asm volatile
 800afd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd4:	f383 8811 	msr	BASEPRI, r3
 800afd8:	f3bf 8f6f 	isb	sy
 800afdc:	f3bf 8f4f 	dsb	sy
 800afe0:	60fb      	str	r3, [r7, #12]
}
 800afe2:	bf00      	nop
 800afe4:	e7fe      	b.n	800afe4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800afe6:	4b39      	ldr	r3, [pc, #228]	; (800b0cc <xPortStartScheduler+0x12c>)
 800afe8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	b2db      	uxtb	r3, r3
 800aff0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	22ff      	movs	r2, #255	; 0xff
 800aff6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	b2db      	uxtb	r3, r3
 800affe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b000:	78fb      	ldrb	r3, [r7, #3]
 800b002:	b2db      	uxtb	r3, r3
 800b004:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b008:	b2da      	uxtb	r2, r3
 800b00a:	4b31      	ldr	r3, [pc, #196]	; (800b0d0 <xPortStartScheduler+0x130>)
 800b00c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b00e:	4b31      	ldr	r3, [pc, #196]	; (800b0d4 <xPortStartScheduler+0x134>)
 800b010:	2207      	movs	r2, #7
 800b012:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b014:	e009      	b.n	800b02a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b016:	4b2f      	ldr	r3, [pc, #188]	; (800b0d4 <xPortStartScheduler+0x134>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	3b01      	subs	r3, #1
 800b01c:	4a2d      	ldr	r2, [pc, #180]	; (800b0d4 <xPortStartScheduler+0x134>)
 800b01e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b020:	78fb      	ldrb	r3, [r7, #3]
 800b022:	b2db      	uxtb	r3, r3
 800b024:	005b      	lsls	r3, r3, #1
 800b026:	b2db      	uxtb	r3, r3
 800b028:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b02a:	78fb      	ldrb	r3, [r7, #3]
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b032:	2b80      	cmp	r3, #128	; 0x80
 800b034:	d0ef      	beq.n	800b016 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b036:	4b27      	ldr	r3, [pc, #156]	; (800b0d4 <xPortStartScheduler+0x134>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f1c3 0307 	rsb	r3, r3, #7
 800b03e:	2b04      	cmp	r3, #4
 800b040:	d00a      	beq.n	800b058 <xPortStartScheduler+0xb8>
	__asm volatile
 800b042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b046:	f383 8811 	msr	BASEPRI, r3
 800b04a:	f3bf 8f6f 	isb	sy
 800b04e:	f3bf 8f4f 	dsb	sy
 800b052:	60bb      	str	r3, [r7, #8]
}
 800b054:	bf00      	nop
 800b056:	e7fe      	b.n	800b056 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b058:	4b1e      	ldr	r3, [pc, #120]	; (800b0d4 <xPortStartScheduler+0x134>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	021b      	lsls	r3, r3, #8
 800b05e:	4a1d      	ldr	r2, [pc, #116]	; (800b0d4 <xPortStartScheduler+0x134>)
 800b060:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b062:	4b1c      	ldr	r3, [pc, #112]	; (800b0d4 <xPortStartScheduler+0x134>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b06a:	4a1a      	ldr	r2, [pc, #104]	; (800b0d4 <xPortStartScheduler+0x134>)
 800b06c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	b2da      	uxtb	r2, r3
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b076:	4b18      	ldr	r3, [pc, #96]	; (800b0d8 <xPortStartScheduler+0x138>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4a17      	ldr	r2, [pc, #92]	; (800b0d8 <xPortStartScheduler+0x138>)
 800b07c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b080:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b082:	4b15      	ldr	r3, [pc, #84]	; (800b0d8 <xPortStartScheduler+0x138>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4a14      	ldr	r2, [pc, #80]	; (800b0d8 <xPortStartScheduler+0x138>)
 800b088:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b08c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b08e:	f000 f8dd 	bl	800b24c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b092:	4b12      	ldr	r3, [pc, #72]	; (800b0dc <xPortStartScheduler+0x13c>)
 800b094:	2200      	movs	r2, #0
 800b096:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b098:	f000 f8fc 	bl	800b294 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b09c:	4b10      	ldr	r3, [pc, #64]	; (800b0e0 <xPortStartScheduler+0x140>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a0f      	ldr	r2, [pc, #60]	; (800b0e0 <xPortStartScheduler+0x140>)
 800b0a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b0a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b0a8:	f7ff ff66 	bl	800af78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b0ac:	f7ff f854 	bl	800a158 <vTaskSwitchContext>
	prvTaskExitError();
 800b0b0:	f7ff ff20 	bl	800aef4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b0b4:	2300      	movs	r3, #0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3718      	adds	r7, #24
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	e000ed00 	.word	0xe000ed00
 800b0c4:	410fc271 	.word	0x410fc271
 800b0c8:	410fc270 	.word	0x410fc270
 800b0cc:	e000e400 	.word	0xe000e400
 800b0d0:	20001050 	.word	0x20001050
 800b0d4:	20001054 	.word	0x20001054
 800b0d8:	e000ed20 	.word	0xe000ed20
 800b0dc:	2000013c 	.word	0x2000013c
 800b0e0:	e000ef34 	.word	0xe000ef34

0800b0e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
	__asm volatile
 800b0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ee:	f383 8811 	msr	BASEPRI, r3
 800b0f2:	f3bf 8f6f 	isb	sy
 800b0f6:	f3bf 8f4f 	dsb	sy
 800b0fa:	607b      	str	r3, [r7, #4]
}
 800b0fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b0fe:	4b0f      	ldr	r3, [pc, #60]	; (800b13c <vPortEnterCritical+0x58>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	3301      	adds	r3, #1
 800b104:	4a0d      	ldr	r2, [pc, #52]	; (800b13c <vPortEnterCritical+0x58>)
 800b106:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b108:	4b0c      	ldr	r3, [pc, #48]	; (800b13c <vPortEnterCritical+0x58>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d10f      	bne.n	800b130 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b110:	4b0b      	ldr	r3, [pc, #44]	; (800b140 <vPortEnterCritical+0x5c>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	b2db      	uxtb	r3, r3
 800b116:	2b00      	cmp	r3, #0
 800b118:	d00a      	beq.n	800b130 <vPortEnterCritical+0x4c>
	__asm volatile
 800b11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11e:	f383 8811 	msr	BASEPRI, r3
 800b122:	f3bf 8f6f 	isb	sy
 800b126:	f3bf 8f4f 	dsb	sy
 800b12a:	603b      	str	r3, [r7, #0]
}
 800b12c:	bf00      	nop
 800b12e:	e7fe      	b.n	800b12e <vPortEnterCritical+0x4a>
	}
}
 800b130:	bf00      	nop
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr
 800b13c:	2000013c 	.word	0x2000013c
 800b140:	e000ed04 	.word	0xe000ed04

0800b144 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b144:	b480      	push	{r7}
 800b146:	b083      	sub	sp, #12
 800b148:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b14a:	4b12      	ldr	r3, [pc, #72]	; (800b194 <vPortExitCritical+0x50>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10a      	bne.n	800b168 <vPortExitCritical+0x24>
	__asm volatile
 800b152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b156:	f383 8811 	msr	BASEPRI, r3
 800b15a:	f3bf 8f6f 	isb	sy
 800b15e:	f3bf 8f4f 	dsb	sy
 800b162:	607b      	str	r3, [r7, #4]
}
 800b164:	bf00      	nop
 800b166:	e7fe      	b.n	800b166 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b168:	4b0a      	ldr	r3, [pc, #40]	; (800b194 <vPortExitCritical+0x50>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	3b01      	subs	r3, #1
 800b16e:	4a09      	ldr	r2, [pc, #36]	; (800b194 <vPortExitCritical+0x50>)
 800b170:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b172:	4b08      	ldr	r3, [pc, #32]	; (800b194 <vPortExitCritical+0x50>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d105      	bne.n	800b186 <vPortExitCritical+0x42>
 800b17a:	2300      	movs	r3, #0
 800b17c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	f383 8811 	msr	BASEPRI, r3
}
 800b184:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b186:	bf00      	nop
 800b188:	370c      	adds	r7, #12
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr
 800b192:	bf00      	nop
 800b194:	2000013c 	.word	0x2000013c
	...

0800b1a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b1a0:	f3ef 8009 	mrs	r0, PSP
 800b1a4:	f3bf 8f6f 	isb	sy
 800b1a8:	4b15      	ldr	r3, [pc, #84]	; (800b200 <pxCurrentTCBConst>)
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	f01e 0f10 	tst.w	lr, #16
 800b1b0:	bf08      	it	eq
 800b1b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b1b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ba:	6010      	str	r0, [r2, #0]
 800b1bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b1c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b1c4:	f380 8811 	msr	BASEPRI, r0
 800b1c8:	f3bf 8f4f 	dsb	sy
 800b1cc:	f3bf 8f6f 	isb	sy
 800b1d0:	f7fe ffc2 	bl	800a158 <vTaskSwitchContext>
 800b1d4:	f04f 0000 	mov.w	r0, #0
 800b1d8:	f380 8811 	msr	BASEPRI, r0
 800b1dc:	bc09      	pop	{r0, r3}
 800b1de:	6819      	ldr	r1, [r3, #0]
 800b1e0:	6808      	ldr	r0, [r1, #0]
 800b1e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1e6:	f01e 0f10 	tst.w	lr, #16
 800b1ea:	bf08      	it	eq
 800b1ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b1f0:	f380 8809 	msr	PSP, r0
 800b1f4:	f3bf 8f6f 	isb	sy
 800b1f8:	4770      	bx	lr
 800b1fa:	bf00      	nop
 800b1fc:	f3af 8000 	nop.w

0800b200 <pxCurrentTCBConst>:
 800b200:	20000a24 	.word	0x20000a24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b204:	bf00      	nop
 800b206:	bf00      	nop

0800b208 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
	__asm volatile
 800b20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b212:	f383 8811 	msr	BASEPRI, r3
 800b216:	f3bf 8f6f 	isb	sy
 800b21a:	f3bf 8f4f 	dsb	sy
 800b21e:	607b      	str	r3, [r7, #4]
}
 800b220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b222:	f7fe fedf 	bl	8009fe4 <xTaskIncrementTick>
 800b226:	4603      	mov	r3, r0
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d003      	beq.n	800b234 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b22c:	4b06      	ldr	r3, [pc, #24]	; (800b248 <xPortSysTickHandler+0x40>)
 800b22e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b232:	601a      	str	r2, [r3, #0]
 800b234:	2300      	movs	r3, #0
 800b236:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	f383 8811 	msr	BASEPRI, r3
}
 800b23e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b240:	bf00      	nop
 800b242:	3708      	adds	r7, #8
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	e000ed04 	.word	0xe000ed04

0800b24c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b24c:	b480      	push	{r7}
 800b24e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b250:	4b0b      	ldr	r3, [pc, #44]	; (800b280 <vPortSetupTimerInterrupt+0x34>)
 800b252:	2200      	movs	r2, #0
 800b254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b256:	4b0b      	ldr	r3, [pc, #44]	; (800b284 <vPortSetupTimerInterrupt+0x38>)
 800b258:	2200      	movs	r2, #0
 800b25a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b25c:	4b0a      	ldr	r3, [pc, #40]	; (800b288 <vPortSetupTimerInterrupt+0x3c>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a0a      	ldr	r2, [pc, #40]	; (800b28c <vPortSetupTimerInterrupt+0x40>)
 800b262:	fba2 2303 	umull	r2, r3, r2, r3
 800b266:	099b      	lsrs	r3, r3, #6
 800b268:	4a09      	ldr	r2, [pc, #36]	; (800b290 <vPortSetupTimerInterrupt+0x44>)
 800b26a:	3b01      	subs	r3, #1
 800b26c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b26e:	4b04      	ldr	r3, [pc, #16]	; (800b280 <vPortSetupTimerInterrupt+0x34>)
 800b270:	2207      	movs	r2, #7
 800b272:	601a      	str	r2, [r3, #0]
}
 800b274:	bf00      	nop
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	e000e010 	.word	0xe000e010
 800b284:	e000e018 	.word	0xe000e018
 800b288:	20000130 	.word	0x20000130
 800b28c:	10624dd3 	.word	0x10624dd3
 800b290:	e000e014 	.word	0xe000e014

0800b294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b294:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b2a4 <vPortEnableVFP+0x10>
 800b298:	6801      	ldr	r1, [r0, #0]
 800b29a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b29e:	6001      	str	r1, [r0, #0]
 800b2a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b2a2:	bf00      	nop
 800b2a4:	e000ed88 	.word	0xe000ed88

0800b2a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b085      	sub	sp, #20
 800b2ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b2ae:	f3ef 8305 	mrs	r3, IPSR
 800b2b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2b0f      	cmp	r3, #15
 800b2b8:	d914      	bls.n	800b2e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b2ba:	4a17      	ldr	r2, [pc, #92]	; (800b318 <vPortValidateInterruptPriority+0x70>)
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	4413      	add	r3, r2
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b2c4:	4b15      	ldr	r3, [pc, #84]	; (800b31c <vPortValidateInterruptPriority+0x74>)
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	7afa      	ldrb	r2, [r7, #11]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d20a      	bcs.n	800b2e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d2:	f383 8811 	msr	BASEPRI, r3
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	607b      	str	r3, [r7, #4]
}
 800b2e0:	bf00      	nop
 800b2e2:	e7fe      	b.n	800b2e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b2e4:	4b0e      	ldr	r3, [pc, #56]	; (800b320 <vPortValidateInterruptPriority+0x78>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b2ec:	4b0d      	ldr	r3, [pc, #52]	; (800b324 <vPortValidateInterruptPriority+0x7c>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d90a      	bls.n	800b30a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f8:	f383 8811 	msr	BASEPRI, r3
 800b2fc:	f3bf 8f6f 	isb	sy
 800b300:	f3bf 8f4f 	dsb	sy
 800b304:	603b      	str	r3, [r7, #0]
}
 800b306:	bf00      	nop
 800b308:	e7fe      	b.n	800b308 <vPortValidateInterruptPriority+0x60>
	}
 800b30a:	bf00      	nop
 800b30c:	3714      	adds	r7, #20
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	e000e3f0 	.word	0xe000e3f0
 800b31c:	20001050 	.word	0x20001050
 800b320:	e000ed0c 	.word	0xe000ed0c
 800b324:	20001054 	.word	0x20001054

0800b328 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b088      	sub	sp, #32
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 800b330:	2300      	movs	r3, #0
 800b332:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 800b334:	f7fe fd9a 	bl	8009e6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 800b338:	4b3e      	ldr	r3, [pc, #248]	; (800b434 <pvPortMalloc+0x10c>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d104      	bne.n	800b34a <pvPortMalloc+0x22>
		{
			prvHeapInit();
 800b340:	f000 f8ba 	bl	800b4b8 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 800b344:	4b3b      	ldr	r3, [pc, #236]	; (800b434 <pvPortMalloc+0x10c>)
 800b346:	2201      	movs	r2, #1
 800b348:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d00e      	beq.n	800b36e <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 800b350:	2308      	movs	r3, #8
 800b352:	461a      	mov	r2, r3
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4413      	add	r3, r2
 800b358:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f003 0307 	and.w	r3, r3, #7
 800b360:	2b00      	cmp	r3, #0
 800b362:	d004      	beq.n	800b36e <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f023 0307 	bic.w	r3, r3, #7
 800b36a:	3308      	adds	r3, #8
 800b36c:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d057      	beq.n	800b424 <pvPortMalloc+0xfc>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f247 5227 	movw	r2, #29991	; 0x7527
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d852      	bhi.n	800b424 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 800b37e:	4b2e      	ldr	r3, [pc, #184]	; (800b438 <pvPortMalloc+0x110>)
 800b380:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 800b382:	4b2d      	ldr	r3, [pc, #180]	; (800b438 <pvPortMalloc+0x110>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b388:	e004      	b.n	800b394 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 800b38a:	69fb      	ldr	r3, [r7, #28]
 800b38c:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 800b38e:	69fb      	ldr	r3, [r7, #28]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d903      	bls.n	800b3a6 <pvPortMalloc+0x7e>
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d1f1      	bne.n	800b38a <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 800b3a6:	69fb      	ldr	r3, [r7, #28]
 800b3a8:	4a24      	ldr	r2, [pc, #144]	; (800b43c <pvPortMalloc+0x114>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d03a      	beq.n	800b424 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 800b3ae:	69bb      	ldr	r3, [r7, #24]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	2208      	movs	r2, #8
 800b3b4:	4413      	add	r3, r2
 800b3b6:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	69bb      	ldr	r3, [r7, #24]
 800b3be:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	685a      	ldr	r2, [r3, #4]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	1ad3      	subs	r3, r2, r3
 800b3c8:	2208      	movs	r2, #8
 800b3ca:	0052      	lsls	r2, r2, #1
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d922      	bls.n	800b416 <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b3d0:	69fa      	ldr	r2, [r7, #28]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	4413      	add	r3, r2
 800b3d6:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b3d8:	69fb      	ldr	r3, [r7, #28]
 800b3da:	685a      	ldr	r2, [r3, #4]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	1ad2      	subs	r2, r2, r3
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	60bb      	str	r3, [r7, #8]
 800b3f0:	4b11      	ldr	r3, [pc, #68]	; (800b438 <pvPortMalloc+0x110>)
 800b3f2:	613b      	str	r3, [r7, #16]
 800b3f4:	e002      	b.n	800b3fc <pvPortMalloc+0xd4>
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	613b      	str	r3, [r7, #16]
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	685b      	ldr	r3, [r3, #4]
 800b402:	68ba      	ldr	r2, [r7, #8]
 800b404:	429a      	cmp	r2, r3
 800b406:	d8f6      	bhi.n	800b3f6 <pvPortMalloc+0xce>
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	601a      	str	r2, [r3, #0]
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	68fa      	ldr	r2, [r7, #12]
 800b414:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b416:	4b0a      	ldr	r3, [pc, #40]	; (800b440 <pvPortMalloc+0x118>)
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	1ad3      	subs	r3, r2, r3
 800b420:	4a07      	ldr	r2, [pc, #28]	; (800b440 <pvPortMalloc+0x118>)
 800b422:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b424:	f7fe fd30 	bl	8009e88 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800b428:	697b      	ldr	r3, [r7, #20]
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3720      	adds	r7, #32
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	20008598 	.word	0x20008598
 800b438:	20008588 	.word	0x20008588
 800b43c:	20008590 	.word	0x20008590
 800b440:	20000140 	.word	0x20000140

0800b444 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b086      	sub	sp, #24
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d027      	beq.n	800b4a6 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 800b456:	2308      	movs	r3, #8
 800b458:	425b      	negs	r3, r3
 800b45a:	693a      	ldr	r2, [r7, #16]
 800b45c:	4413      	add	r3, r2
 800b45e:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 800b464:	f7fe fd02 	bl	8009e6c <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	60bb      	str	r3, [r7, #8]
 800b46e:	4b10      	ldr	r3, [pc, #64]	; (800b4b0 <vPortFree+0x6c>)
 800b470:	617b      	str	r3, [r7, #20]
 800b472:	e002      	b.n	800b47a <vPortFree+0x36>
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	617b      	str	r3, [r7, #20]
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	68ba      	ldr	r2, [r7, #8]
 800b482:	429a      	cmp	r2, r3
 800b484:	d8f6      	bhi.n	800b474 <vPortFree+0x30>
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	601a      	str	r2, [r3, #0]
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	68fa      	ldr	r2, [r7, #12]
 800b492:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	685a      	ldr	r2, [r3, #4]
 800b498:	4b06      	ldr	r3, [pc, #24]	; (800b4b4 <vPortFree+0x70>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4413      	add	r3, r2
 800b49e:	4a05      	ldr	r2, [pc, #20]	; (800b4b4 <vPortFree+0x70>)
 800b4a0:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 800b4a2:	f7fe fcf1 	bl	8009e88 <xTaskResumeAll>
	}
}
 800b4a6:	bf00      	nop
 800b4a8:	3718      	adds	r7, #24
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	20008588 	.word	0x20008588
 800b4b4:	20000140 	.word	0x20000140

0800b4b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b083      	sub	sp, #12
 800b4bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800b4be:	4b10      	ldr	r3, [pc, #64]	; (800b500 <prvHeapInit+0x48>)
 800b4c0:	f023 0307 	bic.w	r3, r3, #7
 800b4c4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b4c6:	4a0f      	ldr	r2, [pc, #60]	; (800b504 <prvHeapInit+0x4c>)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b4cc:	4b0d      	ldr	r3, [pc, #52]	; (800b504 <prvHeapInit+0x4c>)
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 800b4d2:	4b0d      	ldr	r3, [pc, #52]	; (800b508 <prvHeapInit+0x50>)
 800b4d4:	f247 5228 	movw	r2, #29992	; 0x7528
 800b4d8:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 800b4da:	4b0b      	ldr	r3, [pc, #44]	; (800b508 <prvHeapInit+0x50>)
 800b4dc:	2200      	movs	r2, #0
 800b4de:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	f247 5228 	movw	r2, #29992	; 0x7528
 800b4ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	4a06      	ldr	r2, [pc, #24]	; (800b508 <prvHeapInit+0x50>)
 800b4f0:	601a      	str	r2, [r3, #0]
}
 800b4f2:	bf00      	nop
 800b4f4:	370c      	adds	r7, #12
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	20001060 	.word	0x20001060
 800b504:	20008588 	.word	0x20008588
 800b508:	20008590 	.word	0x20008590

0800b50c <__errno>:
 800b50c:	4b01      	ldr	r3, [pc, #4]	; (800b514 <__errno+0x8>)
 800b50e:	6818      	ldr	r0, [r3, #0]
 800b510:	4770      	bx	lr
 800b512:	bf00      	nop
 800b514:	20000144 	.word	0x20000144

0800b518 <__libc_init_array>:
 800b518:	b570      	push	{r4, r5, r6, lr}
 800b51a:	4d0d      	ldr	r5, [pc, #52]	; (800b550 <__libc_init_array+0x38>)
 800b51c:	4c0d      	ldr	r4, [pc, #52]	; (800b554 <__libc_init_array+0x3c>)
 800b51e:	1b64      	subs	r4, r4, r5
 800b520:	10a4      	asrs	r4, r4, #2
 800b522:	2600      	movs	r6, #0
 800b524:	42a6      	cmp	r6, r4
 800b526:	d109      	bne.n	800b53c <__libc_init_array+0x24>
 800b528:	4d0b      	ldr	r5, [pc, #44]	; (800b558 <__libc_init_array+0x40>)
 800b52a:	4c0c      	ldr	r4, [pc, #48]	; (800b55c <__libc_init_array+0x44>)
 800b52c:	f002 fcf2 	bl	800df14 <_init>
 800b530:	1b64      	subs	r4, r4, r5
 800b532:	10a4      	asrs	r4, r4, #2
 800b534:	2600      	movs	r6, #0
 800b536:	42a6      	cmp	r6, r4
 800b538:	d105      	bne.n	800b546 <__libc_init_array+0x2e>
 800b53a:	bd70      	pop	{r4, r5, r6, pc}
 800b53c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b540:	4798      	blx	r3
 800b542:	3601      	adds	r6, #1
 800b544:	e7ee      	b.n	800b524 <__libc_init_array+0xc>
 800b546:	f855 3b04 	ldr.w	r3, [r5], #4
 800b54a:	4798      	blx	r3
 800b54c:	3601      	adds	r6, #1
 800b54e:	e7f2      	b.n	800b536 <__libc_init_array+0x1e>
 800b550:	0800e414 	.word	0x0800e414
 800b554:	0800e414 	.word	0x0800e414
 800b558:	0800e414 	.word	0x0800e414
 800b55c:	0800e418 	.word	0x0800e418

0800b560 <malloc>:
 800b560:	4b02      	ldr	r3, [pc, #8]	; (800b56c <malloc+0xc>)
 800b562:	4601      	mov	r1, r0
 800b564:	6818      	ldr	r0, [r3, #0]
 800b566:	f000 b879 	b.w	800b65c <_malloc_r>
 800b56a:	bf00      	nop
 800b56c:	20000144 	.word	0x20000144

0800b570 <memcpy>:
 800b570:	440a      	add	r2, r1
 800b572:	4291      	cmp	r1, r2
 800b574:	f100 33ff 	add.w	r3, r0, #4294967295
 800b578:	d100      	bne.n	800b57c <memcpy+0xc>
 800b57a:	4770      	bx	lr
 800b57c:	b510      	push	{r4, lr}
 800b57e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b582:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b586:	4291      	cmp	r1, r2
 800b588:	d1f9      	bne.n	800b57e <memcpy+0xe>
 800b58a:	bd10      	pop	{r4, pc}

0800b58c <memset>:
 800b58c:	4402      	add	r2, r0
 800b58e:	4603      	mov	r3, r0
 800b590:	4293      	cmp	r3, r2
 800b592:	d100      	bne.n	800b596 <memset+0xa>
 800b594:	4770      	bx	lr
 800b596:	f803 1b01 	strb.w	r1, [r3], #1
 800b59a:	e7f9      	b.n	800b590 <memset+0x4>

0800b59c <_calloc_r>:
 800b59c:	b513      	push	{r0, r1, r4, lr}
 800b59e:	434a      	muls	r2, r1
 800b5a0:	4611      	mov	r1, r2
 800b5a2:	9201      	str	r2, [sp, #4]
 800b5a4:	f000 f85a 	bl	800b65c <_malloc_r>
 800b5a8:	4604      	mov	r4, r0
 800b5aa:	b118      	cbz	r0, 800b5b4 <_calloc_r+0x18>
 800b5ac:	9a01      	ldr	r2, [sp, #4]
 800b5ae:	2100      	movs	r1, #0
 800b5b0:	f7ff ffec 	bl	800b58c <memset>
 800b5b4:	4620      	mov	r0, r4
 800b5b6:	b002      	add	sp, #8
 800b5b8:	bd10      	pop	{r4, pc}
	...

0800b5bc <_free_r>:
 800b5bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5be:	2900      	cmp	r1, #0
 800b5c0:	d048      	beq.n	800b654 <_free_r+0x98>
 800b5c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5c6:	9001      	str	r0, [sp, #4]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	f1a1 0404 	sub.w	r4, r1, #4
 800b5ce:	bfb8      	it	lt
 800b5d0:	18e4      	addlt	r4, r4, r3
 800b5d2:	f001 fb95 	bl	800cd00 <__malloc_lock>
 800b5d6:	4a20      	ldr	r2, [pc, #128]	; (800b658 <_free_r+0x9c>)
 800b5d8:	9801      	ldr	r0, [sp, #4]
 800b5da:	6813      	ldr	r3, [r2, #0]
 800b5dc:	4615      	mov	r5, r2
 800b5de:	b933      	cbnz	r3, 800b5ee <_free_r+0x32>
 800b5e0:	6063      	str	r3, [r4, #4]
 800b5e2:	6014      	str	r4, [r2, #0]
 800b5e4:	b003      	add	sp, #12
 800b5e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5ea:	f001 bb8f 	b.w	800cd0c <__malloc_unlock>
 800b5ee:	42a3      	cmp	r3, r4
 800b5f0:	d90b      	bls.n	800b60a <_free_r+0x4e>
 800b5f2:	6821      	ldr	r1, [r4, #0]
 800b5f4:	1862      	adds	r2, r4, r1
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	bf04      	itt	eq
 800b5fa:	681a      	ldreq	r2, [r3, #0]
 800b5fc:	685b      	ldreq	r3, [r3, #4]
 800b5fe:	6063      	str	r3, [r4, #4]
 800b600:	bf04      	itt	eq
 800b602:	1852      	addeq	r2, r2, r1
 800b604:	6022      	streq	r2, [r4, #0]
 800b606:	602c      	str	r4, [r5, #0]
 800b608:	e7ec      	b.n	800b5e4 <_free_r+0x28>
 800b60a:	461a      	mov	r2, r3
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	b10b      	cbz	r3, 800b614 <_free_r+0x58>
 800b610:	42a3      	cmp	r3, r4
 800b612:	d9fa      	bls.n	800b60a <_free_r+0x4e>
 800b614:	6811      	ldr	r1, [r2, #0]
 800b616:	1855      	adds	r5, r2, r1
 800b618:	42a5      	cmp	r5, r4
 800b61a:	d10b      	bne.n	800b634 <_free_r+0x78>
 800b61c:	6824      	ldr	r4, [r4, #0]
 800b61e:	4421      	add	r1, r4
 800b620:	1854      	adds	r4, r2, r1
 800b622:	42a3      	cmp	r3, r4
 800b624:	6011      	str	r1, [r2, #0]
 800b626:	d1dd      	bne.n	800b5e4 <_free_r+0x28>
 800b628:	681c      	ldr	r4, [r3, #0]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	6053      	str	r3, [r2, #4]
 800b62e:	4421      	add	r1, r4
 800b630:	6011      	str	r1, [r2, #0]
 800b632:	e7d7      	b.n	800b5e4 <_free_r+0x28>
 800b634:	d902      	bls.n	800b63c <_free_r+0x80>
 800b636:	230c      	movs	r3, #12
 800b638:	6003      	str	r3, [r0, #0]
 800b63a:	e7d3      	b.n	800b5e4 <_free_r+0x28>
 800b63c:	6825      	ldr	r5, [r4, #0]
 800b63e:	1961      	adds	r1, r4, r5
 800b640:	428b      	cmp	r3, r1
 800b642:	bf04      	itt	eq
 800b644:	6819      	ldreq	r1, [r3, #0]
 800b646:	685b      	ldreq	r3, [r3, #4]
 800b648:	6063      	str	r3, [r4, #4]
 800b64a:	bf04      	itt	eq
 800b64c:	1949      	addeq	r1, r1, r5
 800b64e:	6021      	streq	r1, [r4, #0]
 800b650:	6054      	str	r4, [r2, #4]
 800b652:	e7c7      	b.n	800b5e4 <_free_r+0x28>
 800b654:	b003      	add	sp, #12
 800b656:	bd30      	pop	{r4, r5, pc}
 800b658:	2000859c 	.word	0x2000859c

0800b65c <_malloc_r>:
 800b65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b65e:	1ccd      	adds	r5, r1, #3
 800b660:	f025 0503 	bic.w	r5, r5, #3
 800b664:	3508      	adds	r5, #8
 800b666:	2d0c      	cmp	r5, #12
 800b668:	bf38      	it	cc
 800b66a:	250c      	movcc	r5, #12
 800b66c:	2d00      	cmp	r5, #0
 800b66e:	4606      	mov	r6, r0
 800b670:	db01      	blt.n	800b676 <_malloc_r+0x1a>
 800b672:	42a9      	cmp	r1, r5
 800b674:	d903      	bls.n	800b67e <_malloc_r+0x22>
 800b676:	230c      	movs	r3, #12
 800b678:	6033      	str	r3, [r6, #0]
 800b67a:	2000      	movs	r0, #0
 800b67c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b67e:	f001 fb3f 	bl	800cd00 <__malloc_lock>
 800b682:	4921      	ldr	r1, [pc, #132]	; (800b708 <_malloc_r+0xac>)
 800b684:	680a      	ldr	r2, [r1, #0]
 800b686:	4614      	mov	r4, r2
 800b688:	b99c      	cbnz	r4, 800b6b2 <_malloc_r+0x56>
 800b68a:	4f20      	ldr	r7, [pc, #128]	; (800b70c <_malloc_r+0xb0>)
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	b923      	cbnz	r3, 800b69a <_malloc_r+0x3e>
 800b690:	4621      	mov	r1, r4
 800b692:	4630      	mov	r0, r6
 800b694:	f000 fca6 	bl	800bfe4 <_sbrk_r>
 800b698:	6038      	str	r0, [r7, #0]
 800b69a:	4629      	mov	r1, r5
 800b69c:	4630      	mov	r0, r6
 800b69e:	f000 fca1 	bl	800bfe4 <_sbrk_r>
 800b6a2:	1c43      	adds	r3, r0, #1
 800b6a4:	d123      	bne.n	800b6ee <_malloc_r+0x92>
 800b6a6:	230c      	movs	r3, #12
 800b6a8:	6033      	str	r3, [r6, #0]
 800b6aa:	4630      	mov	r0, r6
 800b6ac:	f001 fb2e 	bl	800cd0c <__malloc_unlock>
 800b6b0:	e7e3      	b.n	800b67a <_malloc_r+0x1e>
 800b6b2:	6823      	ldr	r3, [r4, #0]
 800b6b4:	1b5b      	subs	r3, r3, r5
 800b6b6:	d417      	bmi.n	800b6e8 <_malloc_r+0x8c>
 800b6b8:	2b0b      	cmp	r3, #11
 800b6ba:	d903      	bls.n	800b6c4 <_malloc_r+0x68>
 800b6bc:	6023      	str	r3, [r4, #0]
 800b6be:	441c      	add	r4, r3
 800b6c0:	6025      	str	r5, [r4, #0]
 800b6c2:	e004      	b.n	800b6ce <_malloc_r+0x72>
 800b6c4:	6863      	ldr	r3, [r4, #4]
 800b6c6:	42a2      	cmp	r2, r4
 800b6c8:	bf0c      	ite	eq
 800b6ca:	600b      	streq	r3, [r1, #0]
 800b6cc:	6053      	strne	r3, [r2, #4]
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	f001 fb1c 	bl	800cd0c <__malloc_unlock>
 800b6d4:	f104 000b 	add.w	r0, r4, #11
 800b6d8:	1d23      	adds	r3, r4, #4
 800b6da:	f020 0007 	bic.w	r0, r0, #7
 800b6de:	1ac2      	subs	r2, r0, r3
 800b6e0:	d0cc      	beq.n	800b67c <_malloc_r+0x20>
 800b6e2:	1a1b      	subs	r3, r3, r0
 800b6e4:	50a3      	str	r3, [r4, r2]
 800b6e6:	e7c9      	b.n	800b67c <_malloc_r+0x20>
 800b6e8:	4622      	mov	r2, r4
 800b6ea:	6864      	ldr	r4, [r4, #4]
 800b6ec:	e7cc      	b.n	800b688 <_malloc_r+0x2c>
 800b6ee:	1cc4      	adds	r4, r0, #3
 800b6f0:	f024 0403 	bic.w	r4, r4, #3
 800b6f4:	42a0      	cmp	r0, r4
 800b6f6:	d0e3      	beq.n	800b6c0 <_malloc_r+0x64>
 800b6f8:	1a21      	subs	r1, r4, r0
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	f000 fc72 	bl	800bfe4 <_sbrk_r>
 800b700:	3001      	adds	r0, #1
 800b702:	d1dd      	bne.n	800b6c0 <_malloc_r+0x64>
 800b704:	e7cf      	b.n	800b6a6 <_malloc_r+0x4a>
 800b706:	bf00      	nop
 800b708:	2000859c 	.word	0x2000859c
 800b70c:	200085a0 	.word	0x200085a0

0800b710 <__cvt>:
 800b710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b714:	ec55 4b10 	vmov	r4, r5, d0
 800b718:	2d00      	cmp	r5, #0
 800b71a:	460e      	mov	r6, r1
 800b71c:	4619      	mov	r1, r3
 800b71e:	462b      	mov	r3, r5
 800b720:	bfbb      	ittet	lt
 800b722:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b726:	461d      	movlt	r5, r3
 800b728:	2300      	movge	r3, #0
 800b72a:	232d      	movlt	r3, #45	; 0x2d
 800b72c:	700b      	strb	r3, [r1, #0]
 800b72e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b730:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b734:	4691      	mov	r9, r2
 800b736:	f023 0820 	bic.w	r8, r3, #32
 800b73a:	bfbc      	itt	lt
 800b73c:	4622      	movlt	r2, r4
 800b73e:	4614      	movlt	r4, r2
 800b740:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b744:	d005      	beq.n	800b752 <__cvt+0x42>
 800b746:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b74a:	d100      	bne.n	800b74e <__cvt+0x3e>
 800b74c:	3601      	adds	r6, #1
 800b74e:	2102      	movs	r1, #2
 800b750:	e000      	b.n	800b754 <__cvt+0x44>
 800b752:	2103      	movs	r1, #3
 800b754:	ab03      	add	r3, sp, #12
 800b756:	9301      	str	r3, [sp, #4]
 800b758:	ab02      	add	r3, sp, #8
 800b75a:	9300      	str	r3, [sp, #0]
 800b75c:	ec45 4b10 	vmov	d0, r4, r5
 800b760:	4653      	mov	r3, sl
 800b762:	4632      	mov	r2, r6
 800b764:	f000 fcdc 	bl	800c120 <_dtoa_r>
 800b768:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b76c:	4607      	mov	r7, r0
 800b76e:	d102      	bne.n	800b776 <__cvt+0x66>
 800b770:	f019 0f01 	tst.w	r9, #1
 800b774:	d022      	beq.n	800b7bc <__cvt+0xac>
 800b776:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b77a:	eb07 0906 	add.w	r9, r7, r6
 800b77e:	d110      	bne.n	800b7a2 <__cvt+0x92>
 800b780:	783b      	ldrb	r3, [r7, #0]
 800b782:	2b30      	cmp	r3, #48	; 0x30
 800b784:	d10a      	bne.n	800b79c <__cvt+0x8c>
 800b786:	2200      	movs	r2, #0
 800b788:	2300      	movs	r3, #0
 800b78a:	4620      	mov	r0, r4
 800b78c:	4629      	mov	r1, r5
 800b78e:	f7f5 f99b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b792:	b918      	cbnz	r0, 800b79c <__cvt+0x8c>
 800b794:	f1c6 0601 	rsb	r6, r6, #1
 800b798:	f8ca 6000 	str.w	r6, [sl]
 800b79c:	f8da 3000 	ldr.w	r3, [sl]
 800b7a0:	4499      	add	r9, r3
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	4629      	mov	r1, r5
 800b7aa:	f7f5 f98d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7ae:	b108      	cbz	r0, 800b7b4 <__cvt+0xa4>
 800b7b0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b7b4:	2230      	movs	r2, #48	; 0x30
 800b7b6:	9b03      	ldr	r3, [sp, #12]
 800b7b8:	454b      	cmp	r3, r9
 800b7ba:	d307      	bcc.n	800b7cc <__cvt+0xbc>
 800b7bc:	9b03      	ldr	r3, [sp, #12]
 800b7be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b7c0:	1bdb      	subs	r3, r3, r7
 800b7c2:	4638      	mov	r0, r7
 800b7c4:	6013      	str	r3, [r2, #0]
 800b7c6:	b004      	add	sp, #16
 800b7c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7cc:	1c59      	adds	r1, r3, #1
 800b7ce:	9103      	str	r1, [sp, #12]
 800b7d0:	701a      	strb	r2, [r3, #0]
 800b7d2:	e7f0      	b.n	800b7b6 <__cvt+0xa6>

0800b7d4 <__exponent>:
 800b7d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	2900      	cmp	r1, #0
 800b7da:	bfb8      	it	lt
 800b7dc:	4249      	neglt	r1, r1
 800b7de:	f803 2b02 	strb.w	r2, [r3], #2
 800b7e2:	bfb4      	ite	lt
 800b7e4:	222d      	movlt	r2, #45	; 0x2d
 800b7e6:	222b      	movge	r2, #43	; 0x2b
 800b7e8:	2909      	cmp	r1, #9
 800b7ea:	7042      	strb	r2, [r0, #1]
 800b7ec:	dd2a      	ble.n	800b844 <__exponent+0x70>
 800b7ee:	f10d 0407 	add.w	r4, sp, #7
 800b7f2:	46a4      	mov	ip, r4
 800b7f4:	270a      	movs	r7, #10
 800b7f6:	46a6      	mov	lr, r4
 800b7f8:	460a      	mov	r2, r1
 800b7fa:	fb91 f6f7 	sdiv	r6, r1, r7
 800b7fe:	fb07 1516 	mls	r5, r7, r6, r1
 800b802:	3530      	adds	r5, #48	; 0x30
 800b804:	2a63      	cmp	r2, #99	; 0x63
 800b806:	f104 34ff 	add.w	r4, r4, #4294967295
 800b80a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b80e:	4631      	mov	r1, r6
 800b810:	dcf1      	bgt.n	800b7f6 <__exponent+0x22>
 800b812:	3130      	adds	r1, #48	; 0x30
 800b814:	f1ae 0502 	sub.w	r5, lr, #2
 800b818:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b81c:	1c44      	adds	r4, r0, #1
 800b81e:	4629      	mov	r1, r5
 800b820:	4561      	cmp	r1, ip
 800b822:	d30a      	bcc.n	800b83a <__exponent+0x66>
 800b824:	f10d 0209 	add.w	r2, sp, #9
 800b828:	eba2 020e 	sub.w	r2, r2, lr
 800b82c:	4565      	cmp	r5, ip
 800b82e:	bf88      	it	hi
 800b830:	2200      	movhi	r2, #0
 800b832:	4413      	add	r3, r2
 800b834:	1a18      	subs	r0, r3, r0
 800b836:	b003      	add	sp, #12
 800b838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b83a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b83e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b842:	e7ed      	b.n	800b820 <__exponent+0x4c>
 800b844:	2330      	movs	r3, #48	; 0x30
 800b846:	3130      	adds	r1, #48	; 0x30
 800b848:	7083      	strb	r3, [r0, #2]
 800b84a:	70c1      	strb	r1, [r0, #3]
 800b84c:	1d03      	adds	r3, r0, #4
 800b84e:	e7f1      	b.n	800b834 <__exponent+0x60>

0800b850 <_printf_float>:
 800b850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b854:	ed2d 8b02 	vpush	{d8}
 800b858:	b08d      	sub	sp, #52	; 0x34
 800b85a:	460c      	mov	r4, r1
 800b85c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b860:	4616      	mov	r6, r2
 800b862:	461f      	mov	r7, r3
 800b864:	4605      	mov	r5, r0
 800b866:	f001 fa47 	bl	800ccf8 <_localeconv_r>
 800b86a:	f8d0 a000 	ldr.w	sl, [r0]
 800b86e:	4650      	mov	r0, sl
 800b870:	f7f4 fcae 	bl	80001d0 <strlen>
 800b874:	2300      	movs	r3, #0
 800b876:	930a      	str	r3, [sp, #40]	; 0x28
 800b878:	6823      	ldr	r3, [r4, #0]
 800b87a:	9305      	str	r3, [sp, #20]
 800b87c:	f8d8 3000 	ldr.w	r3, [r8]
 800b880:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b884:	3307      	adds	r3, #7
 800b886:	f023 0307 	bic.w	r3, r3, #7
 800b88a:	f103 0208 	add.w	r2, r3, #8
 800b88e:	f8c8 2000 	str.w	r2, [r8]
 800b892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b896:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b89a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b89e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b8a2:	9307      	str	r3, [sp, #28]
 800b8a4:	f8cd 8018 	str.w	r8, [sp, #24]
 800b8a8:	ee08 0a10 	vmov	s16, r0
 800b8ac:	4b9f      	ldr	r3, [pc, #636]	; (800bb2c <_printf_float+0x2dc>)
 800b8ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b8b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b8b6:	f7f5 f939 	bl	8000b2c <__aeabi_dcmpun>
 800b8ba:	bb88      	cbnz	r0, 800b920 <_printf_float+0xd0>
 800b8bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b8c0:	4b9a      	ldr	r3, [pc, #616]	; (800bb2c <_printf_float+0x2dc>)
 800b8c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b8c6:	f7f5 f913 	bl	8000af0 <__aeabi_dcmple>
 800b8ca:	bb48      	cbnz	r0, 800b920 <_printf_float+0xd0>
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	4640      	mov	r0, r8
 800b8d2:	4649      	mov	r1, r9
 800b8d4:	f7f5 f902 	bl	8000adc <__aeabi_dcmplt>
 800b8d8:	b110      	cbz	r0, 800b8e0 <_printf_float+0x90>
 800b8da:	232d      	movs	r3, #45	; 0x2d
 800b8dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8e0:	4b93      	ldr	r3, [pc, #588]	; (800bb30 <_printf_float+0x2e0>)
 800b8e2:	4894      	ldr	r0, [pc, #592]	; (800bb34 <_printf_float+0x2e4>)
 800b8e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b8e8:	bf94      	ite	ls
 800b8ea:	4698      	movls	r8, r3
 800b8ec:	4680      	movhi	r8, r0
 800b8ee:	2303      	movs	r3, #3
 800b8f0:	6123      	str	r3, [r4, #16]
 800b8f2:	9b05      	ldr	r3, [sp, #20]
 800b8f4:	f023 0204 	bic.w	r2, r3, #4
 800b8f8:	6022      	str	r2, [r4, #0]
 800b8fa:	f04f 0900 	mov.w	r9, #0
 800b8fe:	9700      	str	r7, [sp, #0]
 800b900:	4633      	mov	r3, r6
 800b902:	aa0b      	add	r2, sp, #44	; 0x2c
 800b904:	4621      	mov	r1, r4
 800b906:	4628      	mov	r0, r5
 800b908:	f000 f9d8 	bl	800bcbc <_printf_common>
 800b90c:	3001      	adds	r0, #1
 800b90e:	f040 8090 	bne.w	800ba32 <_printf_float+0x1e2>
 800b912:	f04f 30ff 	mov.w	r0, #4294967295
 800b916:	b00d      	add	sp, #52	; 0x34
 800b918:	ecbd 8b02 	vpop	{d8}
 800b91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b920:	4642      	mov	r2, r8
 800b922:	464b      	mov	r3, r9
 800b924:	4640      	mov	r0, r8
 800b926:	4649      	mov	r1, r9
 800b928:	f7f5 f900 	bl	8000b2c <__aeabi_dcmpun>
 800b92c:	b140      	cbz	r0, 800b940 <_printf_float+0xf0>
 800b92e:	464b      	mov	r3, r9
 800b930:	2b00      	cmp	r3, #0
 800b932:	bfbc      	itt	lt
 800b934:	232d      	movlt	r3, #45	; 0x2d
 800b936:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b93a:	487f      	ldr	r0, [pc, #508]	; (800bb38 <_printf_float+0x2e8>)
 800b93c:	4b7f      	ldr	r3, [pc, #508]	; (800bb3c <_printf_float+0x2ec>)
 800b93e:	e7d1      	b.n	800b8e4 <_printf_float+0x94>
 800b940:	6863      	ldr	r3, [r4, #4]
 800b942:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b946:	9206      	str	r2, [sp, #24]
 800b948:	1c5a      	adds	r2, r3, #1
 800b94a:	d13f      	bne.n	800b9cc <_printf_float+0x17c>
 800b94c:	2306      	movs	r3, #6
 800b94e:	6063      	str	r3, [r4, #4]
 800b950:	9b05      	ldr	r3, [sp, #20]
 800b952:	6861      	ldr	r1, [r4, #4]
 800b954:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b958:	2300      	movs	r3, #0
 800b95a:	9303      	str	r3, [sp, #12]
 800b95c:	ab0a      	add	r3, sp, #40	; 0x28
 800b95e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b962:	ab09      	add	r3, sp, #36	; 0x24
 800b964:	ec49 8b10 	vmov	d0, r8, r9
 800b968:	9300      	str	r3, [sp, #0]
 800b96a:	6022      	str	r2, [r4, #0]
 800b96c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b970:	4628      	mov	r0, r5
 800b972:	f7ff fecd 	bl	800b710 <__cvt>
 800b976:	9b06      	ldr	r3, [sp, #24]
 800b978:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b97a:	2b47      	cmp	r3, #71	; 0x47
 800b97c:	4680      	mov	r8, r0
 800b97e:	d108      	bne.n	800b992 <_printf_float+0x142>
 800b980:	1cc8      	adds	r0, r1, #3
 800b982:	db02      	blt.n	800b98a <_printf_float+0x13a>
 800b984:	6863      	ldr	r3, [r4, #4]
 800b986:	4299      	cmp	r1, r3
 800b988:	dd41      	ble.n	800ba0e <_printf_float+0x1be>
 800b98a:	f1ab 0b02 	sub.w	fp, fp, #2
 800b98e:	fa5f fb8b 	uxtb.w	fp, fp
 800b992:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b996:	d820      	bhi.n	800b9da <_printf_float+0x18a>
 800b998:	3901      	subs	r1, #1
 800b99a:	465a      	mov	r2, fp
 800b99c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b9a0:	9109      	str	r1, [sp, #36]	; 0x24
 800b9a2:	f7ff ff17 	bl	800b7d4 <__exponent>
 800b9a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9a8:	1813      	adds	r3, r2, r0
 800b9aa:	2a01      	cmp	r2, #1
 800b9ac:	4681      	mov	r9, r0
 800b9ae:	6123      	str	r3, [r4, #16]
 800b9b0:	dc02      	bgt.n	800b9b8 <_printf_float+0x168>
 800b9b2:	6822      	ldr	r2, [r4, #0]
 800b9b4:	07d2      	lsls	r2, r2, #31
 800b9b6:	d501      	bpl.n	800b9bc <_printf_float+0x16c>
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	6123      	str	r3, [r4, #16]
 800b9bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d09c      	beq.n	800b8fe <_printf_float+0xae>
 800b9c4:	232d      	movs	r3, #45	; 0x2d
 800b9c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9ca:	e798      	b.n	800b8fe <_printf_float+0xae>
 800b9cc:	9a06      	ldr	r2, [sp, #24]
 800b9ce:	2a47      	cmp	r2, #71	; 0x47
 800b9d0:	d1be      	bne.n	800b950 <_printf_float+0x100>
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d1bc      	bne.n	800b950 <_printf_float+0x100>
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	e7b9      	b.n	800b94e <_printf_float+0xfe>
 800b9da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b9de:	d118      	bne.n	800ba12 <_printf_float+0x1c2>
 800b9e0:	2900      	cmp	r1, #0
 800b9e2:	6863      	ldr	r3, [r4, #4]
 800b9e4:	dd0b      	ble.n	800b9fe <_printf_float+0x1ae>
 800b9e6:	6121      	str	r1, [r4, #16]
 800b9e8:	b913      	cbnz	r3, 800b9f0 <_printf_float+0x1a0>
 800b9ea:	6822      	ldr	r2, [r4, #0]
 800b9ec:	07d0      	lsls	r0, r2, #31
 800b9ee:	d502      	bpl.n	800b9f6 <_printf_float+0x1a6>
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	440b      	add	r3, r1
 800b9f4:	6123      	str	r3, [r4, #16]
 800b9f6:	65a1      	str	r1, [r4, #88]	; 0x58
 800b9f8:	f04f 0900 	mov.w	r9, #0
 800b9fc:	e7de      	b.n	800b9bc <_printf_float+0x16c>
 800b9fe:	b913      	cbnz	r3, 800ba06 <_printf_float+0x1b6>
 800ba00:	6822      	ldr	r2, [r4, #0]
 800ba02:	07d2      	lsls	r2, r2, #31
 800ba04:	d501      	bpl.n	800ba0a <_printf_float+0x1ba>
 800ba06:	3302      	adds	r3, #2
 800ba08:	e7f4      	b.n	800b9f4 <_printf_float+0x1a4>
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	e7f2      	b.n	800b9f4 <_printf_float+0x1a4>
 800ba0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ba12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba14:	4299      	cmp	r1, r3
 800ba16:	db05      	blt.n	800ba24 <_printf_float+0x1d4>
 800ba18:	6823      	ldr	r3, [r4, #0]
 800ba1a:	6121      	str	r1, [r4, #16]
 800ba1c:	07d8      	lsls	r0, r3, #31
 800ba1e:	d5ea      	bpl.n	800b9f6 <_printf_float+0x1a6>
 800ba20:	1c4b      	adds	r3, r1, #1
 800ba22:	e7e7      	b.n	800b9f4 <_printf_float+0x1a4>
 800ba24:	2900      	cmp	r1, #0
 800ba26:	bfd4      	ite	le
 800ba28:	f1c1 0202 	rsble	r2, r1, #2
 800ba2c:	2201      	movgt	r2, #1
 800ba2e:	4413      	add	r3, r2
 800ba30:	e7e0      	b.n	800b9f4 <_printf_float+0x1a4>
 800ba32:	6823      	ldr	r3, [r4, #0]
 800ba34:	055a      	lsls	r2, r3, #21
 800ba36:	d407      	bmi.n	800ba48 <_printf_float+0x1f8>
 800ba38:	6923      	ldr	r3, [r4, #16]
 800ba3a:	4642      	mov	r2, r8
 800ba3c:	4631      	mov	r1, r6
 800ba3e:	4628      	mov	r0, r5
 800ba40:	47b8      	blx	r7
 800ba42:	3001      	adds	r0, #1
 800ba44:	d12c      	bne.n	800baa0 <_printf_float+0x250>
 800ba46:	e764      	b.n	800b912 <_printf_float+0xc2>
 800ba48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ba4c:	f240 80e0 	bls.w	800bc10 <_printf_float+0x3c0>
 800ba50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ba54:	2200      	movs	r2, #0
 800ba56:	2300      	movs	r3, #0
 800ba58:	f7f5 f836 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba5c:	2800      	cmp	r0, #0
 800ba5e:	d034      	beq.n	800baca <_printf_float+0x27a>
 800ba60:	4a37      	ldr	r2, [pc, #220]	; (800bb40 <_printf_float+0x2f0>)
 800ba62:	2301      	movs	r3, #1
 800ba64:	4631      	mov	r1, r6
 800ba66:	4628      	mov	r0, r5
 800ba68:	47b8      	blx	r7
 800ba6a:	3001      	adds	r0, #1
 800ba6c:	f43f af51 	beq.w	800b912 <_printf_float+0xc2>
 800ba70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba74:	429a      	cmp	r2, r3
 800ba76:	db02      	blt.n	800ba7e <_printf_float+0x22e>
 800ba78:	6823      	ldr	r3, [r4, #0]
 800ba7a:	07d8      	lsls	r0, r3, #31
 800ba7c:	d510      	bpl.n	800baa0 <_printf_float+0x250>
 800ba7e:	ee18 3a10 	vmov	r3, s16
 800ba82:	4652      	mov	r2, sl
 800ba84:	4631      	mov	r1, r6
 800ba86:	4628      	mov	r0, r5
 800ba88:	47b8      	blx	r7
 800ba8a:	3001      	adds	r0, #1
 800ba8c:	f43f af41 	beq.w	800b912 <_printf_float+0xc2>
 800ba90:	f04f 0800 	mov.w	r8, #0
 800ba94:	f104 091a 	add.w	r9, r4, #26
 800ba98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba9a:	3b01      	subs	r3, #1
 800ba9c:	4543      	cmp	r3, r8
 800ba9e:	dc09      	bgt.n	800bab4 <_printf_float+0x264>
 800baa0:	6823      	ldr	r3, [r4, #0]
 800baa2:	079b      	lsls	r3, r3, #30
 800baa4:	f100 8105 	bmi.w	800bcb2 <_printf_float+0x462>
 800baa8:	68e0      	ldr	r0, [r4, #12]
 800baaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800baac:	4298      	cmp	r0, r3
 800baae:	bfb8      	it	lt
 800bab0:	4618      	movlt	r0, r3
 800bab2:	e730      	b.n	800b916 <_printf_float+0xc6>
 800bab4:	2301      	movs	r3, #1
 800bab6:	464a      	mov	r2, r9
 800bab8:	4631      	mov	r1, r6
 800baba:	4628      	mov	r0, r5
 800babc:	47b8      	blx	r7
 800babe:	3001      	adds	r0, #1
 800bac0:	f43f af27 	beq.w	800b912 <_printf_float+0xc2>
 800bac4:	f108 0801 	add.w	r8, r8, #1
 800bac8:	e7e6      	b.n	800ba98 <_printf_float+0x248>
 800baca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bacc:	2b00      	cmp	r3, #0
 800bace:	dc39      	bgt.n	800bb44 <_printf_float+0x2f4>
 800bad0:	4a1b      	ldr	r2, [pc, #108]	; (800bb40 <_printf_float+0x2f0>)
 800bad2:	2301      	movs	r3, #1
 800bad4:	4631      	mov	r1, r6
 800bad6:	4628      	mov	r0, r5
 800bad8:	47b8      	blx	r7
 800bada:	3001      	adds	r0, #1
 800badc:	f43f af19 	beq.w	800b912 <_printf_float+0xc2>
 800bae0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bae4:	4313      	orrs	r3, r2
 800bae6:	d102      	bne.n	800baee <_printf_float+0x29e>
 800bae8:	6823      	ldr	r3, [r4, #0]
 800baea:	07d9      	lsls	r1, r3, #31
 800baec:	d5d8      	bpl.n	800baa0 <_printf_float+0x250>
 800baee:	ee18 3a10 	vmov	r3, s16
 800baf2:	4652      	mov	r2, sl
 800baf4:	4631      	mov	r1, r6
 800baf6:	4628      	mov	r0, r5
 800baf8:	47b8      	blx	r7
 800bafa:	3001      	adds	r0, #1
 800bafc:	f43f af09 	beq.w	800b912 <_printf_float+0xc2>
 800bb00:	f04f 0900 	mov.w	r9, #0
 800bb04:	f104 0a1a 	add.w	sl, r4, #26
 800bb08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb0a:	425b      	negs	r3, r3
 800bb0c:	454b      	cmp	r3, r9
 800bb0e:	dc01      	bgt.n	800bb14 <_printf_float+0x2c4>
 800bb10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb12:	e792      	b.n	800ba3a <_printf_float+0x1ea>
 800bb14:	2301      	movs	r3, #1
 800bb16:	4652      	mov	r2, sl
 800bb18:	4631      	mov	r1, r6
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	47b8      	blx	r7
 800bb1e:	3001      	adds	r0, #1
 800bb20:	f43f aef7 	beq.w	800b912 <_printf_float+0xc2>
 800bb24:	f109 0901 	add.w	r9, r9, #1
 800bb28:	e7ee      	b.n	800bb08 <_printf_float+0x2b8>
 800bb2a:	bf00      	nop
 800bb2c:	7fefffff 	.word	0x7fefffff
 800bb30:	0800e02c 	.word	0x0800e02c
 800bb34:	0800e030 	.word	0x0800e030
 800bb38:	0800e038 	.word	0x0800e038
 800bb3c:	0800e034 	.word	0x0800e034
 800bb40:	0800e03c 	.word	0x0800e03c
 800bb44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	bfa8      	it	ge
 800bb4c:	461a      	movge	r2, r3
 800bb4e:	2a00      	cmp	r2, #0
 800bb50:	4691      	mov	r9, r2
 800bb52:	dc37      	bgt.n	800bbc4 <_printf_float+0x374>
 800bb54:	f04f 0b00 	mov.w	fp, #0
 800bb58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb5c:	f104 021a 	add.w	r2, r4, #26
 800bb60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bb62:	9305      	str	r3, [sp, #20]
 800bb64:	eba3 0309 	sub.w	r3, r3, r9
 800bb68:	455b      	cmp	r3, fp
 800bb6a:	dc33      	bgt.n	800bbd4 <_printf_float+0x384>
 800bb6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb70:	429a      	cmp	r2, r3
 800bb72:	db3b      	blt.n	800bbec <_printf_float+0x39c>
 800bb74:	6823      	ldr	r3, [r4, #0]
 800bb76:	07da      	lsls	r2, r3, #31
 800bb78:	d438      	bmi.n	800bbec <_printf_float+0x39c>
 800bb7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb7c:	9b05      	ldr	r3, [sp, #20]
 800bb7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb80:	1ad3      	subs	r3, r2, r3
 800bb82:	eba2 0901 	sub.w	r9, r2, r1
 800bb86:	4599      	cmp	r9, r3
 800bb88:	bfa8      	it	ge
 800bb8a:	4699      	movge	r9, r3
 800bb8c:	f1b9 0f00 	cmp.w	r9, #0
 800bb90:	dc35      	bgt.n	800bbfe <_printf_float+0x3ae>
 800bb92:	f04f 0800 	mov.w	r8, #0
 800bb96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb9a:	f104 0a1a 	add.w	sl, r4, #26
 800bb9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bba2:	1a9b      	subs	r3, r3, r2
 800bba4:	eba3 0309 	sub.w	r3, r3, r9
 800bba8:	4543      	cmp	r3, r8
 800bbaa:	f77f af79 	ble.w	800baa0 <_printf_float+0x250>
 800bbae:	2301      	movs	r3, #1
 800bbb0:	4652      	mov	r2, sl
 800bbb2:	4631      	mov	r1, r6
 800bbb4:	4628      	mov	r0, r5
 800bbb6:	47b8      	blx	r7
 800bbb8:	3001      	adds	r0, #1
 800bbba:	f43f aeaa 	beq.w	800b912 <_printf_float+0xc2>
 800bbbe:	f108 0801 	add.w	r8, r8, #1
 800bbc2:	e7ec      	b.n	800bb9e <_printf_float+0x34e>
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	4631      	mov	r1, r6
 800bbc8:	4642      	mov	r2, r8
 800bbca:	4628      	mov	r0, r5
 800bbcc:	47b8      	blx	r7
 800bbce:	3001      	adds	r0, #1
 800bbd0:	d1c0      	bne.n	800bb54 <_printf_float+0x304>
 800bbd2:	e69e      	b.n	800b912 <_printf_float+0xc2>
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	4631      	mov	r1, r6
 800bbd8:	4628      	mov	r0, r5
 800bbda:	9205      	str	r2, [sp, #20]
 800bbdc:	47b8      	blx	r7
 800bbde:	3001      	adds	r0, #1
 800bbe0:	f43f ae97 	beq.w	800b912 <_printf_float+0xc2>
 800bbe4:	9a05      	ldr	r2, [sp, #20]
 800bbe6:	f10b 0b01 	add.w	fp, fp, #1
 800bbea:	e7b9      	b.n	800bb60 <_printf_float+0x310>
 800bbec:	ee18 3a10 	vmov	r3, s16
 800bbf0:	4652      	mov	r2, sl
 800bbf2:	4631      	mov	r1, r6
 800bbf4:	4628      	mov	r0, r5
 800bbf6:	47b8      	blx	r7
 800bbf8:	3001      	adds	r0, #1
 800bbfa:	d1be      	bne.n	800bb7a <_printf_float+0x32a>
 800bbfc:	e689      	b.n	800b912 <_printf_float+0xc2>
 800bbfe:	9a05      	ldr	r2, [sp, #20]
 800bc00:	464b      	mov	r3, r9
 800bc02:	4442      	add	r2, r8
 800bc04:	4631      	mov	r1, r6
 800bc06:	4628      	mov	r0, r5
 800bc08:	47b8      	blx	r7
 800bc0a:	3001      	adds	r0, #1
 800bc0c:	d1c1      	bne.n	800bb92 <_printf_float+0x342>
 800bc0e:	e680      	b.n	800b912 <_printf_float+0xc2>
 800bc10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc12:	2a01      	cmp	r2, #1
 800bc14:	dc01      	bgt.n	800bc1a <_printf_float+0x3ca>
 800bc16:	07db      	lsls	r3, r3, #31
 800bc18:	d538      	bpl.n	800bc8c <_printf_float+0x43c>
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	4642      	mov	r2, r8
 800bc1e:	4631      	mov	r1, r6
 800bc20:	4628      	mov	r0, r5
 800bc22:	47b8      	blx	r7
 800bc24:	3001      	adds	r0, #1
 800bc26:	f43f ae74 	beq.w	800b912 <_printf_float+0xc2>
 800bc2a:	ee18 3a10 	vmov	r3, s16
 800bc2e:	4652      	mov	r2, sl
 800bc30:	4631      	mov	r1, r6
 800bc32:	4628      	mov	r0, r5
 800bc34:	47b8      	blx	r7
 800bc36:	3001      	adds	r0, #1
 800bc38:	f43f ae6b 	beq.w	800b912 <_printf_float+0xc2>
 800bc3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bc40:	2200      	movs	r2, #0
 800bc42:	2300      	movs	r3, #0
 800bc44:	f7f4 ff40 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc48:	b9d8      	cbnz	r0, 800bc82 <_printf_float+0x432>
 800bc4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc4c:	f108 0201 	add.w	r2, r8, #1
 800bc50:	3b01      	subs	r3, #1
 800bc52:	4631      	mov	r1, r6
 800bc54:	4628      	mov	r0, r5
 800bc56:	47b8      	blx	r7
 800bc58:	3001      	adds	r0, #1
 800bc5a:	d10e      	bne.n	800bc7a <_printf_float+0x42a>
 800bc5c:	e659      	b.n	800b912 <_printf_float+0xc2>
 800bc5e:	2301      	movs	r3, #1
 800bc60:	4652      	mov	r2, sl
 800bc62:	4631      	mov	r1, r6
 800bc64:	4628      	mov	r0, r5
 800bc66:	47b8      	blx	r7
 800bc68:	3001      	adds	r0, #1
 800bc6a:	f43f ae52 	beq.w	800b912 <_printf_float+0xc2>
 800bc6e:	f108 0801 	add.w	r8, r8, #1
 800bc72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc74:	3b01      	subs	r3, #1
 800bc76:	4543      	cmp	r3, r8
 800bc78:	dcf1      	bgt.n	800bc5e <_printf_float+0x40e>
 800bc7a:	464b      	mov	r3, r9
 800bc7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bc80:	e6dc      	b.n	800ba3c <_printf_float+0x1ec>
 800bc82:	f04f 0800 	mov.w	r8, #0
 800bc86:	f104 0a1a 	add.w	sl, r4, #26
 800bc8a:	e7f2      	b.n	800bc72 <_printf_float+0x422>
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	4642      	mov	r2, r8
 800bc90:	e7df      	b.n	800bc52 <_printf_float+0x402>
 800bc92:	2301      	movs	r3, #1
 800bc94:	464a      	mov	r2, r9
 800bc96:	4631      	mov	r1, r6
 800bc98:	4628      	mov	r0, r5
 800bc9a:	47b8      	blx	r7
 800bc9c:	3001      	adds	r0, #1
 800bc9e:	f43f ae38 	beq.w	800b912 <_printf_float+0xc2>
 800bca2:	f108 0801 	add.w	r8, r8, #1
 800bca6:	68e3      	ldr	r3, [r4, #12]
 800bca8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bcaa:	1a5b      	subs	r3, r3, r1
 800bcac:	4543      	cmp	r3, r8
 800bcae:	dcf0      	bgt.n	800bc92 <_printf_float+0x442>
 800bcb0:	e6fa      	b.n	800baa8 <_printf_float+0x258>
 800bcb2:	f04f 0800 	mov.w	r8, #0
 800bcb6:	f104 0919 	add.w	r9, r4, #25
 800bcba:	e7f4      	b.n	800bca6 <_printf_float+0x456>

0800bcbc <_printf_common>:
 800bcbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcc0:	4616      	mov	r6, r2
 800bcc2:	4699      	mov	r9, r3
 800bcc4:	688a      	ldr	r2, [r1, #8]
 800bcc6:	690b      	ldr	r3, [r1, #16]
 800bcc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bccc:	4293      	cmp	r3, r2
 800bcce:	bfb8      	it	lt
 800bcd0:	4613      	movlt	r3, r2
 800bcd2:	6033      	str	r3, [r6, #0]
 800bcd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bcd8:	4607      	mov	r7, r0
 800bcda:	460c      	mov	r4, r1
 800bcdc:	b10a      	cbz	r2, 800bce2 <_printf_common+0x26>
 800bcde:	3301      	adds	r3, #1
 800bce0:	6033      	str	r3, [r6, #0]
 800bce2:	6823      	ldr	r3, [r4, #0]
 800bce4:	0699      	lsls	r1, r3, #26
 800bce6:	bf42      	ittt	mi
 800bce8:	6833      	ldrmi	r3, [r6, #0]
 800bcea:	3302      	addmi	r3, #2
 800bcec:	6033      	strmi	r3, [r6, #0]
 800bcee:	6825      	ldr	r5, [r4, #0]
 800bcf0:	f015 0506 	ands.w	r5, r5, #6
 800bcf4:	d106      	bne.n	800bd04 <_printf_common+0x48>
 800bcf6:	f104 0a19 	add.w	sl, r4, #25
 800bcfa:	68e3      	ldr	r3, [r4, #12]
 800bcfc:	6832      	ldr	r2, [r6, #0]
 800bcfe:	1a9b      	subs	r3, r3, r2
 800bd00:	42ab      	cmp	r3, r5
 800bd02:	dc26      	bgt.n	800bd52 <_printf_common+0x96>
 800bd04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd08:	1e13      	subs	r3, r2, #0
 800bd0a:	6822      	ldr	r2, [r4, #0]
 800bd0c:	bf18      	it	ne
 800bd0e:	2301      	movne	r3, #1
 800bd10:	0692      	lsls	r2, r2, #26
 800bd12:	d42b      	bmi.n	800bd6c <_printf_common+0xb0>
 800bd14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd18:	4649      	mov	r1, r9
 800bd1a:	4638      	mov	r0, r7
 800bd1c:	47c0      	blx	r8
 800bd1e:	3001      	adds	r0, #1
 800bd20:	d01e      	beq.n	800bd60 <_printf_common+0xa4>
 800bd22:	6823      	ldr	r3, [r4, #0]
 800bd24:	68e5      	ldr	r5, [r4, #12]
 800bd26:	6832      	ldr	r2, [r6, #0]
 800bd28:	f003 0306 	and.w	r3, r3, #6
 800bd2c:	2b04      	cmp	r3, #4
 800bd2e:	bf08      	it	eq
 800bd30:	1aad      	subeq	r5, r5, r2
 800bd32:	68a3      	ldr	r3, [r4, #8]
 800bd34:	6922      	ldr	r2, [r4, #16]
 800bd36:	bf0c      	ite	eq
 800bd38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd3c:	2500      	movne	r5, #0
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	bfc4      	itt	gt
 800bd42:	1a9b      	subgt	r3, r3, r2
 800bd44:	18ed      	addgt	r5, r5, r3
 800bd46:	2600      	movs	r6, #0
 800bd48:	341a      	adds	r4, #26
 800bd4a:	42b5      	cmp	r5, r6
 800bd4c:	d11a      	bne.n	800bd84 <_printf_common+0xc8>
 800bd4e:	2000      	movs	r0, #0
 800bd50:	e008      	b.n	800bd64 <_printf_common+0xa8>
 800bd52:	2301      	movs	r3, #1
 800bd54:	4652      	mov	r2, sl
 800bd56:	4649      	mov	r1, r9
 800bd58:	4638      	mov	r0, r7
 800bd5a:	47c0      	blx	r8
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	d103      	bne.n	800bd68 <_printf_common+0xac>
 800bd60:	f04f 30ff 	mov.w	r0, #4294967295
 800bd64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd68:	3501      	adds	r5, #1
 800bd6a:	e7c6      	b.n	800bcfa <_printf_common+0x3e>
 800bd6c:	18e1      	adds	r1, r4, r3
 800bd6e:	1c5a      	adds	r2, r3, #1
 800bd70:	2030      	movs	r0, #48	; 0x30
 800bd72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd76:	4422      	add	r2, r4
 800bd78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd80:	3302      	adds	r3, #2
 800bd82:	e7c7      	b.n	800bd14 <_printf_common+0x58>
 800bd84:	2301      	movs	r3, #1
 800bd86:	4622      	mov	r2, r4
 800bd88:	4649      	mov	r1, r9
 800bd8a:	4638      	mov	r0, r7
 800bd8c:	47c0      	blx	r8
 800bd8e:	3001      	adds	r0, #1
 800bd90:	d0e6      	beq.n	800bd60 <_printf_common+0xa4>
 800bd92:	3601      	adds	r6, #1
 800bd94:	e7d9      	b.n	800bd4a <_printf_common+0x8e>
	...

0800bd98 <_printf_i>:
 800bd98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd9c:	460c      	mov	r4, r1
 800bd9e:	4691      	mov	r9, r2
 800bda0:	7e27      	ldrb	r7, [r4, #24]
 800bda2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bda4:	2f78      	cmp	r7, #120	; 0x78
 800bda6:	4680      	mov	r8, r0
 800bda8:	469a      	mov	sl, r3
 800bdaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bdae:	d807      	bhi.n	800bdc0 <_printf_i+0x28>
 800bdb0:	2f62      	cmp	r7, #98	; 0x62
 800bdb2:	d80a      	bhi.n	800bdca <_printf_i+0x32>
 800bdb4:	2f00      	cmp	r7, #0
 800bdb6:	f000 80d8 	beq.w	800bf6a <_printf_i+0x1d2>
 800bdba:	2f58      	cmp	r7, #88	; 0x58
 800bdbc:	f000 80a3 	beq.w	800bf06 <_printf_i+0x16e>
 800bdc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bdc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bdc8:	e03a      	b.n	800be40 <_printf_i+0xa8>
 800bdca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bdce:	2b15      	cmp	r3, #21
 800bdd0:	d8f6      	bhi.n	800bdc0 <_printf_i+0x28>
 800bdd2:	a001      	add	r0, pc, #4	; (adr r0, 800bdd8 <_printf_i+0x40>)
 800bdd4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bdd8:	0800be31 	.word	0x0800be31
 800bddc:	0800be45 	.word	0x0800be45
 800bde0:	0800bdc1 	.word	0x0800bdc1
 800bde4:	0800bdc1 	.word	0x0800bdc1
 800bde8:	0800bdc1 	.word	0x0800bdc1
 800bdec:	0800bdc1 	.word	0x0800bdc1
 800bdf0:	0800be45 	.word	0x0800be45
 800bdf4:	0800bdc1 	.word	0x0800bdc1
 800bdf8:	0800bdc1 	.word	0x0800bdc1
 800bdfc:	0800bdc1 	.word	0x0800bdc1
 800be00:	0800bdc1 	.word	0x0800bdc1
 800be04:	0800bf51 	.word	0x0800bf51
 800be08:	0800be75 	.word	0x0800be75
 800be0c:	0800bf33 	.word	0x0800bf33
 800be10:	0800bdc1 	.word	0x0800bdc1
 800be14:	0800bdc1 	.word	0x0800bdc1
 800be18:	0800bf73 	.word	0x0800bf73
 800be1c:	0800bdc1 	.word	0x0800bdc1
 800be20:	0800be75 	.word	0x0800be75
 800be24:	0800bdc1 	.word	0x0800bdc1
 800be28:	0800bdc1 	.word	0x0800bdc1
 800be2c:	0800bf3b 	.word	0x0800bf3b
 800be30:	680b      	ldr	r3, [r1, #0]
 800be32:	1d1a      	adds	r2, r3, #4
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	600a      	str	r2, [r1, #0]
 800be38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800be3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be40:	2301      	movs	r3, #1
 800be42:	e0a3      	b.n	800bf8c <_printf_i+0x1f4>
 800be44:	6825      	ldr	r5, [r4, #0]
 800be46:	6808      	ldr	r0, [r1, #0]
 800be48:	062e      	lsls	r6, r5, #24
 800be4a:	f100 0304 	add.w	r3, r0, #4
 800be4e:	d50a      	bpl.n	800be66 <_printf_i+0xce>
 800be50:	6805      	ldr	r5, [r0, #0]
 800be52:	600b      	str	r3, [r1, #0]
 800be54:	2d00      	cmp	r5, #0
 800be56:	da03      	bge.n	800be60 <_printf_i+0xc8>
 800be58:	232d      	movs	r3, #45	; 0x2d
 800be5a:	426d      	negs	r5, r5
 800be5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be60:	485e      	ldr	r0, [pc, #376]	; (800bfdc <_printf_i+0x244>)
 800be62:	230a      	movs	r3, #10
 800be64:	e019      	b.n	800be9a <_printf_i+0x102>
 800be66:	f015 0f40 	tst.w	r5, #64	; 0x40
 800be6a:	6805      	ldr	r5, [r0, #0]
 800be6c:	600b      	str	r3, [r1, #0]
 800be6e:	bf18      	it	ne
 800be70:	b22d      	sxthne	r5, r5
 800be72:	e7ef      	b.n	800be54 <_printf_i+0xbc>
 800be74:	680b      	ldr	r3, [r1, #0]
 800be76:	6825      	ldr	r5, [r4, #0]
 800be78:	1d18      	adds	r0, r3, #4
 800be7a:	6008      	str	r0, [r1, #0]
 800be7c:	0628      	lsls	r0, r5, #24
 800be7e:	d501      	bpl.n	800be84 <_printf_i+0xec>
 800be80:	681d      	ldr	r5, [r3, #0]
 800be82:	e002      	b.n	800be8a <_printf_i+0xf2>
 800be84:	0669      	lsls	r1, r5, #25
 800be86:	d5fb      	bpl.n	800be80 <_printf_i+0xe8>
 800be88:	881d      	ldrh	r5, [r3, #0]
 800be8a:	4854      	ldr	r0, [pc, #336]	; (800bfdc <_printf_i+0x244>)
 800be8c:	2f6f      	cmp	r7, #111	; 0x6f
 800be8e:	bf0c      	ite	eq
 800be90:	2308      	moveq	r3, #8
 800be92:	230a      	movne	r3, #10
 800be94:	2100      	movs	r1, #0
 800be96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be9a:	6866      	ldr	r6, [r4, #4]
 800be9c:	60a6      	str	r6, [r4, #8]
 800be9e:	2e00      	cmp	r6, #0
 800bea0:	bfa2      	ittt	ge
 800bea2:	6821      	ldrge	r1, [r4, #0]
 800bea4:	f021 0104 	bicge.w	r1, r1, #4
 800bea8:	6021      	strge	r1, [r4, #0]
 800beaa:	b90d      	cbnz	r5, 800beb0 <_printf_i+0x118>
 800beac:	2e00      	cmp	r6, #0
 800beae:	d04d      	beq.n	800bf4c <_printf_i+0x1b4>
 800beb0:	4616      	mov	r6, r2
 800beb2:	fbb5 f1f3 	udiv	r1, r5, r3
 800beb6:	fb03 5711 	mls	r7, r3, r1, r5
 800beba:	5dc7      	ldrb	r7, [r0, r7]
 800bebc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bec0:	462f      	mov	r7, r5
 800bec2:	42bb      	cmp	r3, r7
 800bec4:	460d      	mov	r5, r1
 800bec6:	d9f4      	bls.n	800beb2 <_printf_i+0x11a>
 800bec8:	2b08      	cmp	r3, #8
 800beca:	d10b      	bne.n	800bee4 <_printf_i+0x14c>
 800becc:	6823      	ldr	r3, [r4, #0]
 800bece:	07df      	lsls	r7, r3, #31
 800bed0:	d508      	bpl.n	800bee4 <_printf_i+0x14c>
 800bed2:	6923      	ldr	r3, [r4, #16]
 800bed4:	6861      	ldr	r1, [r4, #4]
 800bed6:	4299      	cmp	r1, r3
 800bed8:	bfde      	ittt	le
 800beda:	2330      	movle	r3, #48	; 0x30
 800bedc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bee0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bee4:	1b92      	subs	r2, r2, r6
 800bee6:	6122      	str	r2, [r4, #16]
 800bee8:	f8cd a000 	str.w	sl, [sp]
 800beec:	464b      	mov	r3, r9
 800beee:	aa03      	add	r2, sp, #12
 800bef0:	4621      	mov	r1, r4
 800bef2:	4640      	mov	r0, r8
 800bef4:	f7ff fee2 	bl	800bcbc <_printf_common>
 800bef8:	3001      	adds	r0, #1
 800befa:	d14c      	bne.n	800bf96 <_printf_i+0x1fe>
 800befc:	f04f 30ff 	mov.w	r0, #4294967295
 800bf00:	b004      	add	sp, #16
 800bf02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf06:	4835      	ldr	r0, [pc, #212]	; (800bfdc <_printf_i+0x244>)
 800bf08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bf0c:	6823      	ldr	r3, [r4, #0]
 800bf0e:	680e      	ldr	r6, [r1, #0]
 800bf10:	061f      	lsls	r7, r3, #24
 800bf12:	f856 5b04 	ldr.w	r5, [r6], #4
 800bf16:	600e      	str	r6, [r1, #0]
 800bf18:	d514      	bpl.n	800bf44 <_printf_i+0x1ac>
 800bf1a:	07d9      	lsls	r1, r3, #31
 800bf1c:	bf44      	itt	mi
 800bf1e:	f043 0320 	orrmi.w	r3, r3, #32
 800bf22:	6023      	strmi	r3, [r4, #0]
 800bf24:	b91d      	cbnz	r5, 800bf2e <_printf_i+0x196>
 800bf26:	6823      	ldr	r3, [r4, #0]
 800bf28:	f023 0320 	bic.w	r3, r3, #32
 800bf2c:	6023      	str	r3, [r4, #0]
 800bf2e:	2310      	movs	r3, #16
 800bf30:	e7b0      	b.n	800be94 <_printf_i+0xfc>
 800bf32:	6823      	ldr	r3, [r4, #0]
 800bf34:	f043 0320 	orr.w	r3, r3, #32
 800bf38:	6023      	str	r3, [r4, #0]
 800bf3a:	2378      	movs	r3, #120	; 0x78
 800bf3c:	4828      	ldr	r0, [pc, #160]	; (800bfe0 <_printf_i+0x248>)
 800bf3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bf42:	e7e3      	b.n	800bf0c <_printf_i+0x174>
 800bf44:	065e      	lsls	r6, r3, #25
 800bf46:	bf48      	it	mi
 800bf48:	b2ad      	uxthmi	r5, r5
 800bf4a:	e7e6      	b.n	800bf1a <_printf_i+0x182>
 800bf4c:	4616      	mov	r6, r2
 800bf4e:	e7bb      	b.n	800bec8 <_printf_i+0x130>
 800bf50:	680b      	ldr	r3, [r1, #0]
 800bf52:	6826      	ldr	r6, [r4, #0]
 800bf54:	6960      	ldr	r0, [r4, #20]
 800bf56:	1d1d      	adds	r5, r3, #4
 800bf58:	600d      	str	r5, [r1, #0]
 800bf5a:	0635      	lsls	r5, r6, #24
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	d501      	bpl.n	800bf64 <_printf_i+0x1cc>
 800bf60:	6018      	str	r0, [r3, #0]
 800bf62:	e002      	b.n	800bf6a <_printf_i+0x1d2>
 800bf64:	0671      	lsls	r1, r6, #25
 800bf66:	d5fb      	bpl.n	800bf60 <_printf_i+0x1c8>
 800bf68:	8018      	strh	r0, [r3, #0]
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	6123      	str	r3, [r4, #16]
 800bf6e:	4616      	mov	r6, r2
 800bf70:	e7ba      	b.n	800bee8 <_printf_i+0x150>
 800bf72:	680b      	ldr	r3, [r1, #0]
 800bf74:	1d1a      	adds	r2, r3, #4
 800bf76:	600a      	str	r2, [r1, #0]
 800bf78:	681e      	ldr	r6, [r3, #0]
 800bf7a:	6862      	ldr	r2, [r4, #4]
 800bf7c:	2100      	movs	r1, #0
 800bf7e:	4630      	mov	r0, r6
 800bf80:	f7f4 f92e 	bl	80001e0 <memchr>
 800bf84:	b108      	cbz	r0, 800bf8a <_printf_i+0x1f2>
 800bf86:	1b80      	subs	r0, r0, r6
 800bf88:	6060      	str	r0, [r4, #4]
 800bf8a:	6863      	ldr	r3, [r4, #4]
 800bf8c:	6123      	str	r3, [r4, #16]
 800bf8e:	2300      	movs	r3, #0
 800bf90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf94:	e7a8      	b.n	800bee8 <_printf_i+0x150>
 800bf96:	6923      	ldr	r3, [r4, #16]
 800bf98:	4632      	mov	r2, r6
 800bf9a:	4649      	mov	r1, r9
 800bf9c:	4640      	mov	r0, r8
 800bf9e:	47d0      	blx	sl
 800bfa0:	3001      	adds	r0, #1
 800bfa2:	d0ab      	beq.n	800befc <_printf_i+0x164>
 800bfa4:	6823      	ldr	r3, [r4, #0]
 800bfa6:	079b      	lsls	r3, r3, #30
 800bfa8:	d413      	bmi.n	800bfd2 <_printf_i+0x23a>
 800bfaa:	68e0      	ldr	r0, [r4, #12]
 800bfac:	9b03      	ldr	r3, [sp, #12]
 800bfae:	4298      	cmp	r0, r3
 800bfb0:	bfb8      	it	lt
 800bfb2:	4618      	movlt	r0, r3
 800bfb4:	e7a4      	b.n	800bf00 <_printf_i+0x168>
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	4632      	mov	r2, r6
 800bfba:	4649      	mov	r1, r9
 800bfbc:	4640      	mov	r0, r8
 800bfbe:	47d0      	blx	sl
 800bfc0:	3001      	adds	r0, #1
 800bfc2:	d09b      	beq.n	800befc <_printf_i+0x164>
 800bfc4:	3501      	adds	r5, #1
 800bfc6:	68e3      	ldr	r3, [r4, #12]
 800bfc8:	9903      	ldr	r1, [sp, #12]
 800bfca:	1a5b      	subs	r3, r3, r1
 800bfcc:	42ab      	cmp	r3, r5
 800bfce:	dcf2      	bgt.n	800bfb6 <_printf_i+0x21e>
 800bfd0:	e7eb      	b.n	800bfaa <_printf_i+0x212>
 800bfd2:	2500      	movs	r5, #0
 800bfd4:	f104 0619 	add.w	r6, r4, #25
 800bfd8:	e7f5      	b.n	800bfc6 <_printf_i+0x22e>
 800bfda:	bf00      	nop
 800bfdc:	0800e03e 	.word	0x0800e03e
 800bfe0:	0800e04f 	.word	0x0800e04f

0800bfe4 <_sbrk_r>:
 800bfe4:	b538      	push	{r3, r4, r5, lr}
 800bfe6:	4d06      	ldr	r5, [pc, #24]	; (800c000 <_sbrk_r+0x1c>)
 800bfe8:	2300      	movs	r3, #0
 800bfea:	4604      	mov	r4, r0
 800bfec:	4608      	mov	r0, r1
 800bfee:	602b      	str	r3, [r5, #0]
 800bff0:	f7f6 faee 	bl	80025d0 <_sbrk>
 800bff4:	1c43      	adds	r3, r0, #1
 800bff6:	d102      	bne.n	800bffe <_sbrk_r+0x1a>
 800bff8:	682b      	ldr	r3, [r5, #0]
 800bffa:	b103      	cbz	r3, 800bffe <_sbrk_r+0x1a>
 800bffc:	6023      	str	r3, [r4, #0]
 800bffe:	bd38      	pop	{r3, r4, r5, pc}
 800c000:	20008948 	.word	0x20008948

0800c004 <quorem>:
 800c004:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c008:	6903      	ldr	r3, [r0, #16]
 800c00a:	690c      	ldr	r4, [r1, #16]
 800c00c:	42a3      	cmp	r3, r4
 800c00e:	4607      	mov	r7, r0
 800c010:	f2c0 8081 	blt.w	800c116 <quorem+0x112>
 800c014:	3c01      	subs	r4, #1
 800c016:	f101 0814 	add.w	r8, r1, #20
 800c01a:	f100 0514 	add.w	r5, r0, #20
 800c01e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c022:	9301      	str	r3, [sp, #4]
 800c024:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c028:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c02c:	3301      	adds	r3, #1
 800c02e:	429a      	cmp	r2, r3
 800c030:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c034:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c038:	fbb2 f6f3 	udiv	r6, r2, r3
 800c03c:	d331      	bcc.n	800c0a2 <quorem+0x9e>
 800c03e:	f04f 0e00 	mov.w	lr, #0
 800c042:	4640      	mov	r0, r8
 800c044:	46ac      	mov	ip, r5
 800c046:	46f2      	mov	sl, lr
 800c048:	f850 2b04 	ldr.w	r2, [r0], #4
 800c04c:	b293      	uxth	r3, r2
 800c04e:	fb06 e303 	mla	r3, r6, r3, lr
 800c052:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c056:	b29b      	uxth	r3, r3
 800c058:	ebaa 0303 	sub.w	r3, sl, r3
 800c05c:	0c12      	lsrs	r2, r2, #16
 800c05e:	f8dc a000 	ldr.w	sl, [ip]
 800c062:	fb06 e202 	mla	r2, r6, r2, lr
 800c066:	fa13 f38a 	uxtah	r3, r3, sl
 800c06a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c06e:	fa1f fa82 	uxth.w	sl, r2
 800c072:	f8dc 2000 	ldr.w	r2, [ip]
 800c076:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c07a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c07e:	b29b      	uxth	r3, r3
 800c080:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c084:	4581      	cmp	r9, r0
 800c086:	f84c 3b04 	str.w	r3, [ip], #4
 800c08a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c08e:	d2db      	bcs.n	800c048 <quorem+0x44>
 800c090:	f855 300b 	ldr.w	r3, [r5, fp]
 800c094:	b92b      	cbnz	r3, 800c0a2 <quorem+0x9e>
 800c096:	9b01      	ldr	r3, [sp, #4]
 800c098:	3b04      	subs	r3, #4
 800c09a:	429d      	cmp	r5, r3
 800c09c:	461a      	mov	r2, r3
 800c09e:	d32e      	bcc.n	800c0fe <quorem+0xfa>
 800c0a0:	613c      	str	r4, [r7, #16]
 800c0a2:	4638      	mov	r0, r7
 800c0a4:	f001 f8b6 	bl	800d214 <__mcmp>
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	db24      	blt.n	800c0f6 <quorem+0xf2>
 800c0ac:	3601      	adds	r6, #1
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	f04f 0c00 	mov.w	ip, #0
 800c0b4:	f858 2b04 	ldr.w	r2, [r8], #4
 800c0b8:	f8d0 e000 	ldr.w	lr, [r0]
 800c0bc:	b293      	uxth	r3, r2
 800c0be:	ebac 0303 	sub.w	r3, ip, r3
 800c0c2:	0c12      	lsrs	r2, r2, #16
 800c0c4:	fa13 f38e 	uxtah	r3, r3, lr
 800c0c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c0cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0d6:	45c1      	cmp	r9, r8
 800c0d8:	f840 3b04 	str.w	r3, [r0], #4
 800c0dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c0e0:	d2e8      	bcs.n	800c0b4 <quorem+0xb0>
 800c0e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c0e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c0ea:	b922      	cbnz	r2, 800c0f6 <quorem+0xf2>
 800c0ec:	3b04      	subs	r3, #4
 800c0ee:	429d      	cmp	r5, r3
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	d30a      	bcc.n	800c10a <quorem+0x106>
 800c0f4:	613c      	str	r4, [r7, #16]
 800c0f6:	4630      	mov	r0, r6
 800c0f8:	b003      	add	sp, #12
 800c0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0fe:	6812      	ldr	r2, [r2, #0]
 800c100:	3b04      	subs	r3, #4
 800c102:	2a00      	cmp	r2, #0
 800c104:	d1cc      	bne.n	800c0a0 <quorem+0x9c>
 800c106:	3c01      	subs	r4, #1
 800c108:	e7c7      	b.n	800c09a <quorem+0x96>
 800c10a:	6812      	ldr	r2, [r2, #0]
 800c10c:	3b04      	subs	r3, #4
 800c10e:	2a00      	cmp	r2, #0
 800c110:	d1f0      	bne.n	800c0f4 <quorem+0xf0>
 800c112:	3c01      	subs	r4, #1
 800c114:	e7eb      	b.n	800c0ee <quorem+0xea>
 800c116:	2000      	movs	r0, #0
 800c118:	e7ee      	b.n	800c0f8 <quorem+0xf4>
 800c11a:	0000      	movs	r0, r0
 800c11c:	0000      	movs	r0, r0
	...

0800c120 <_dtoa_r>:
 800c120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c124:	ed2d 8b02 	vpush	{d8}
 800c128:	ec57 6b10 	vmov	r6, r7, d0
 800c12c:	b095      	sub	sp, #84	; 0x54
 800c12e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c130:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c134:	9105      	str	r1, [sp, #20]
 800c136:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c13a:	4604      	mov	r4, r0
 800c13c:	9209      	str	r2, [sp, #36]	; 0x24
 800c13e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c140:	b975      	cbnz	r5, 800c160 <_dtoa_r+0x40>
 800c142:	2010      	movs	r0, #16
 800c144:	f7ff fa0c 	bl	800b560 <malloc>
 800c148:	4602      	mov	r2, r0
 800c14a:	6260      	str	r0, [r4, #36]	; 0x24
 800c14c:	b920      	cbnz	r0, 800c158 <_dtoa_r+0x38>
 800c14e:	4bb2      	ldr	r3, [pc, #712]	; (800c418 <_dtoa_r+0x2f8>)
 800c150:	21ea      	movs	r1, #234	; 0xea
 800c152:	48b2      	ldr	r0, [pc, #712]	; (800c41c <_dtoa_r+0x2fc>)
 800c154:	f001 f95e 	bl	800d414 <__assert_func>
 800c158:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c15c:	6005      	str	r5, [r0, #0]
 800c15e:	60c5      	str	r5, [r0, #12]
 800c160:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c162:	6819      	ldr	r1, [r3, #0]
 800c164:	b151      	cbz	r1, 800c17c <_dtoa_r+0x5c>
 800c166:	685a      	ldr	r2, [r3, #4]
 800c168:	604a      	str	r2, [r1, #4]
 800c16a:	2301      	movs	r3, #1
 800c16c:	4093      	lsls	r3, r2
 800c16e:	608b      	str	r3, [r1, #8]
 800c170:	4620      	mov	r0, r4
 800c172:	f000 fe11 	bl	800cd98 <_Bfree>
 800c176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c178:	2200      	movs	r2, #0
 800c17a:	601a      	str	r2, [r3, #0]
 800c17c:	1e3b      	subs	r3, r7, #0
 800c17e:	bfb9      	ittee	lt
 800c180:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c184:	9303      	strlt	r3, [sp, #12]
 800c186:	2300      	movge	r3, #0
 800c188:	f8c8 3000 	strge.w	r3, [r8]
 800c18c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c190:	4ba3      	ldr	r3, [pc, #652]	; (800c420 <_dtoa_r+0x300>)
 800c192:	bfbc      	itt	lt
 800c194:	2201      	movlt	r2, #1
 800c196:	f8c8 2000 	strlt.w	r2, [r8]
 800c19a:	ea33 0309 	bics.w	r3, r3, r9
 800c19e:	d11b      	bne.n	800c1d8 <_dtoa_r+0xb8>
 800c1a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c1a2:	f242 730f 	movw	r3, #9999	; 0x270f
 800c1a6:	6013      	str	r3, [r2, #0]
 800c1a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c1ac:	4333      	orrs	r3, r6
 800c1ae:	f000 857a 	beq.w	800cca6 <_dtoa_r+0xb86>
 800c1b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1b4:	b963      	cbnz	r3, 800c1d0 <_dtoa_r+0xb0>
 800c1b6:	4b9b      	ldr	r3, [pc, #620]	; (800c424 <_dtoa_r+0x304>)
 800c1b8:	e024      	b.n	800c204 <_dtoa_r+0xe4>
 800c1ba:	4b9b      	ldr	r3, [pc, #620]	; (800c428 <_dtoa_r+0x308>)
 800c1bc:	9300      	str	r3, [sp, #0]
 800c1be:	3308      	adds	r3, #8
 800c1c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c1c2:	6013      	str	r3, [r2, #0]
 800c1c4:	9800      	ldr	r0, [sp, #0]
 800c1c6:	b015      	add	sp, #84	; 0x54
 800c1c8:	ecbd 8b02 	vpop	{d8}
 800c1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1d0:	4b94      	ldr	r3, [pc, #592]	; (800c424 <_dtoa_r+0x304>)
 800c1d2:	9300      	str	r3, [sp, #0]
 800c1d4:	3303      	adds	r3, #3
 800c1d6:	e7f3      	b.n	800c1c0 <_dtoa_r+0xa0>
 800c1d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	ec51 0b17 	vmov	r0, r1, d7
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c1e8:	f7f4 fc6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1ec:	4680      	mov	r8, r0
 800c1ee:	b158      	cbz	r0, 800c208 <_dtoa_r+0xe8>
 800c1f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	6013      	str	r3, [r2, #0]
 800c1f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	f000 8551 	beq.w	800cca0 <_dtoa_r+0xb80>
 800c1fe:	488b      	ldr	r0, [pc, #556]	; (800c42c <_dtoa_r+0x30c>)
 800c200:	6018      	str	r0, [r3, #0]
 800c202:	1e43      	subs	r3, r0, #1
 800c204:	9300      	str	r3, [sp, #0]
 800c206:	e7dd      	b.n	800c1c4 <_dtoa_r+0xa4>
 800c208:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c20c:	aa12      	add	r2, sp, #72	; 0x48
 800c20e:	a913      	add	r1, sp, #76	; 0x4c
 800c210:	4620      	mov	r0, r4
 800c212:	f001 f8a3 	bl	800d35c <__d2b>
 800c216:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c21a:	4683      	mov	fp, r0
 800c21c:	2d00      	cmp	r5, #0
 800c21e:	d07c      	beq.n	800c31a <_dtoa_r+0x1fa>
 800c220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c222:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800c226:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c22a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c22e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c232:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c236:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c23a:	4b7d      	ldr	r3, [pc, #500]	; (800c430 <_dtoa_r+0x310>)
 800c23c:	2200      	movs	r2, #0
 800c23e:	4630      	mov	r0, r6
 800c240:	4639      	mov	r1, r7
 800c242:	f7f4 f821 	bl	8000288 <__aeabi_dsub>
 800c246:	a36e      	add	r3, pc, #440	; (adr r3, 800c400 <_dtoa_r+0x2e0>)
 800c248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24c:	f7f4 f9d4 	bl	80005f8 <__aeabi_dmul>
 800c250:	a36d      	add	r3, pc, #436	; (adr r3, 800c408 <_dtoa_r+0x2e8>)
 800c252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c256:	f7f4 f819 	bl	800028c <__adddf3>
 800c25a:	4606      	mov	r6, r0
 800c25c:	4628      	mov	r0, r5
 800c25e:	460f      	mov	r7, r1
 800c260:	f7f4 f960 	bl	8000524 <__aeabi_i2d>
 800c264:	a36a      	add	r3, pc, #424	; (adr r3, 800c410 <_dtoa_r+0x2f0>)
 800c266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26a:	f7f4 f9c5 	bl	80005f8 <__aeabi_dmul>
 800c26e:	4602      	mov	r2, r0
 800c270:	460b      	mov	r3, r1
 800c272:	4630      	mov	r0, r6
 800c274:	4639      	mov	r1, r7
 800c276:	f7f4 f809 	bl	800028c <__adddf3>
 800c27a:	4606      	mov	r6, r0
 800c27c:	460f      	mov	r7, r1
 800c27e:	f7f4 fc6b 	bl	8000b58 <__aeabi_d2iz>
 800c282:	2200      	movs	r2, #0
 800c284:	4682      	mov	sl, r0
 800c286:	2300      	movs	r3, #0
 800c288:	4630      	mov	r0, r6
 800c28a:	4639      	mov	r1, r7
 800c28c:	f7f4 fc26 	bl	8000adc <__aeabi_dcmplt>
 800c290:	b148      	cbz	r0, 800c2a6 <_dtoa_r+0x186>
 800c292:	4650      	mov	r0, sl
 800c294:	f7f4 f946 	bl	8000524 <__aeabi_i2d>
 800c298:	4632      	mov	r2, r6
 800c29a:	463b      	mov	r3, r7
 800c29c:	f7f4 fc14 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2a0:	b908      	cbnz	r0, 800c2a6 <_dtoa_r+0x186>
 800c2a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c2a6:	f1ba 0f16 	cmp.w	sl, #22
 800c2aa:	d854      	bhi.n	800c356 <_dtoa_r+0x236>
 800c2ac:	4b61      	ldr	r3, [pc, #388]	; (800c434 <_dtoa_r+0x314>)
 800c2ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c2ba:	f7f4 fc0f 	bl	8000adc <__aeabi_dcmplt>
 800c2be:	2800      	cmp	r0, #0
 800c2c0:	d04b      	beq.n	800c35a <_dtoa_r+0x23a>
 800c2c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	930e      	str	r3, [sp, #56]	; 0x38
 800c2ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c2cc:	1b5d      	subs	r5, r3, r5
 800c2ce:	1e6b      	subs	r3, r5, #1
 800c2d0:	9304      	str	r3, [sp, #16]
 800c2d2:	bf43      	ittte	mi
 800c2d4:	2300      	movmi	r3, #0
 800c2d6:	f1c5 0801 	rsbmi	r8, r5, #1
 800c2da:	9304      	strmi	r3, [sp, #16]
 800c2dc:	f04f 0800 	movpl.w	r8, #0
 800c2e0:	f1ba 0f00 	cmp.w	sl, #0
 800c2e4:	db3b      	blt.n	800c35e <_dtoa_r+0x23e>
 800c2e6:	9b04      	ldr	r3, [sp, #16]
 800c2e8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c2ec:	4453      	add	r3, sl
 800c2ee:	9304      	str	r3, [sp, #16]
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	9306      	str	r3, [sp, #24]
 800c2f4:	9b05      	ldr	r3, [sp, #20]
 800c2f6:	2b09      	cmp	r3, #9
 800c2f8:	d869      	bhi.n	800c3ce <_dtoa_r+0x2ae>
 800c2fa:	2b05      	cmp	r3, #5
 800c2fc:	bfc4      	itt	gt
 800c2fe:	3b04      	subgt	r3, #4
 800c300:	9305      	strgt	r3, [sp, #20]
 800c302:	9b05      	ldr	r3, [sp, #20]
 800c304:	f1a3 0302 	sub.w	r3, r3, #2
 800c308:	bfcc      	ite	gt
 800c30a:	2500      	movgt	r5, #0
 800c30c:	2501      	movle	r5, #1
 800c30e:	2b03      	cmp	r3, #3
 800c310:	d869      	bhi.n	800c3e6 <_dtoa_r+0x2c6>
 800c312:	e8df f003 	tbb	[pc, r3]
 800c316:	4e2c      	.short	0x4e2c
 800c318:	5a4c      	.short	0x5a4c
 800c31a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c31e:	441d      	add	r5, r3
 800c320:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c324:	2b20      	cmp	r3, #32
 800c326:	bfc1      	itttt	gt
 800c328:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c32c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c330:	fa09 f303 	lslgt.w	r3, r9, r3
 800c334:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c338:	bfda      	itte	le
 800c33a:	f1c3 0320 	rsble	r3, r3, #32
 800c33e:	fa06 f003 	lslle.w	r0, r6, r3
 800c342:	4318      	orrgt	r0, r3
 800c344:	f7f4 f8de 	bl	8000504 <__aeabi_ui2d>
 800c348:	2301      	movs	r3, #1
 800c34a:	4606      	mov	r6, r0
 800c34c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c350:	3d01      	subs	r5, #1
 800c352:	9310      	str	r3, [sp, #64]	; 0x40
 800c354:	e771      	b.n	800c23a <_dtoa_r+0x11a>
 800c356:	2301      	movs	r3, #1
 800c358:	e7b6      	b.n	800c2c8 <_dtoa_r+0x1a8>
 800c35a:	900e      	str	r0, [sp, #56]	; 0x38
 800c35c:	e7b5      	b.n	800c2ca <_dtoa_r+0x1aa>
 800c35e:	f1ca 0300 	rsb	r3, sl, #0
 800c362:	9306      	str	r3, [sp, #24]
 800c364:	2300      	movs	r3, #0
 800c366:	eba8 080a 	sub.w	r8, r8, sl
 800c36a:	930d      	str	r3, [sp, #52]	; 0x34
 800c36c:	e7c2      	b.n	800c2f4 <_dtoa_r+0x1d4>
 800c36e:	2300      	movs	r3, #0
 800c370:	9308      	str	r3, [sp, #32]
 800c372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c374:	2b00      	cmp	r3, #0
 800c376:	dc39      	bgt.n	800c3ec <_dtoa_r+0x2cc>
 800c378:	f04f 0901 	mov.w	r9, #1
 800c37c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c380:	464b      	mov	r3, r9
 800c382:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c386:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c388:	2200      	movs	r2, #0
 800c38a:	6042      	str	r2, [r0, #4]
 800c38c:	2204      	movs	r2, #4
 800c38e:	f102 0614 	add.w	r6, r2, #20
 800c392:	429e      	cmp	r6, r3
 800c394:	6841      	ldr	r1, [r0, #4]
 800c396:	d92f      	bls.n	800c3f8 <_dtoa_r+0x2d8>
 800c398:	4620      	mov	r0, r4
 800c39a:	f000 fcbd 	bl	800cd18 <_Balloc>
 800c39e:	9000      	str	r0, [sp, #0]
 800c3a0:	2800      	cmp	r0, #0
 800c3a2:	d14b      	bne.n	800c43c <_dtoa_r+0x31c>
 800c3a4:	4b24      	ldr	r3, [pc, #144]	; (800c438 <_dtoa_r+0x318>)
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c3ac:	e6d1      	b.n	800c152 <_dtoa_r+0x32>
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	e7de      	b.n	800c370 <_dtoa_r+0x250>
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	9308      	str	r3, [sp, #32]
 800c3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3b8:	eb0a 0903 	add.w	r9, sl, r3
 800c3bc:	f109 0301 	add.w	r3, r9, #1
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	9301      	str	r3, [sp, #4]
 800c3c4:	bfb8      	it	lt
 800c3c6:	2301      	movlt	r3, #1
 800c3c8:	e7dd      	b.n	800c386 <_dtoa_r+0x266>
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	e7f2      	b.n	800c3b4 <_dtoa_r+0x294>
 800c3ce:	2501      	movs	r5, #1
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	9305      	str	r3, [sp, #20]
 800c3d4:	9508      	str	r5, [sp, #32]
 800c3d6:	f04f 39ff 	mov.w	r9, #4294967295
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f8cd 9004 	str.w	r9, [sp, #4]
 800c3e0:	2312      	movs	r3, #18
 800c3e2:	9209      	str	r2, [sp, #36]	; 0x24
 800c3e4:	e7cf      	b.n	800c386 <_dtoa_r+0x266>
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	9308      	str	r3, [sp, #32]
 800c3ea:	e7f4      	b.n	800c3d6 <_dtoa_r+0x2b6>
 800c3ec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c3f0:	f8cd 9004 	str.w	r9, [sp, #4]
 800c3f4:	464b      	mov	r3, r9
 800c3f6:	e7c6      	b.n	800c386 <_dtoa_r+0x266>
 800c3f8:	3101      	adds	r1, #1
 800c3fa:	6041      	str	r1, [r0, #4]
 800c3fc:	0052      	lsls	r2, r2, #1
 800c3fe:	e7c6      	b.n	800c38e <_dtoa_r+0x26e>
 800c400:	636f4361 	.word	0x636f4361
 800c404:	3fd287a7 	.word	0x3fd287a7
 800c408:	8b60c8b3 	.word	0x8b60c8b3
 800c40c:	3fc68a28 	.word	0x3fc68a28
 800c410:	509f79fb 	.word	0x509f79fb
 800c414:	3fd34413 	.word	0x3fd34413
 800c418:	0800e06d 	.word	0x0800e06d
 800c41c:	0800e084 	.word	0x0800e084
 800c420:	7ff00000 	.word	0x7ff00000
 800c424:	0800e069 	.word	0x0800e069
 800c428:	0800e060 	.word	0x0800e060
 800c42c:	0800e03d 	.word	0x0800e03d
 800c430:	3ff80000 	.word	0x3ff80000
 800c434:	0800e180 	.word	0x0800e180
 800c438:	0800e0e3 	.word	0x0800e0e3
 800c43c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c43e:	9a00      	ldr	r2, [sp, #0]
 800c440:	601a      	str	r2, [r3, #0]
 800c442:	9b01      	ldr	r3, [sp, #4]
 800c444:	2b0e      	cmp	r3, #14
 800c446:	f200 80ad 	bhi.w	800c5a4 <_dtoa_r+0x484>
 800c44a:	2d00      	cmp	r5, #0
 800c44c:	f000 80aa 	beq.w	800c5a4 <_dtoa_r+0x484>
 800c450:	f1ba 0f00 	cmp.w	sl, #0
 800c454:	dd36      	ble.n	800c4c4 <_dtoa_r+0x3a4>
 800c456:	4ac3      	ldr	r2, [pc, #780]	; (800c764 <_dtoa_r+0x644>)
 800c458:	f00a 030f 	and.w	r3, sl, #15
 800c45c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c460:	ed93 7b00 	vldr	d7, [r3]
 800c464:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c468:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c46c:	eeb0 8a47 	vmov.f32	s16, s14
 800c470:	eef0 8a67 	vmov.f32	s17, s15
 800c474:	d016      	beq.n	800c4a4 <_dtoa_r+0x384>
 800c476:	4bbc      	ldr	r3, [pc, #752]	; (800c768 <_dtoa_r+0x648>)
 800c478:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c47c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c480:	f7f4 f9e4 	bl	800084c <__aeabi_ddiv>
 800c484:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c488:	f007 070f 	and.w	r7, r7, #15
 800c48c:	2503      	movs	r5, #3
 800c48e:	4eb6      	ldr	r6, [pc, #728]	; (800c768 <_dtoa_r+0x648>)
 800c490:	b957      	cbnz	r7, 800c4a8 <_dtoa_r+0x388>
 800c492:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c496:	ec53 2b18 	vmov	r2, r3, d8
 800c49a:	f7f4 f9d7 	bl	800084c <__aeabi_ddiv>
 800c49e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4a2:	e029      	b.n	800c4f8 <_dtoa_r+0x3d8>
 800c4a4:	2502      	movs	r5, #2
 800c4a6:	e7f2      	b.n	800c48e <_dtoa_r+0x36e>
 800c4a8:	07f9      	lsls	r1, r7, #31
 800c4aa:	d508      	bpl.n	800c4be <_dtoa_r+0x39e>
 800c4ac:	ec51 0b18 	vmov	r0, r1, d8
 800c4b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c4b4:	f7f4 f8a0 	bl	80005f8 <__aeabi_dmul>
 800c4b8:	ec41 0b18 	vmov	d8, r0, r1
 800c4bc:	3501      	adds	r5, #1
 800c4be:	107f      	asrs	r7, r7, #1
 800c4c0:	3608      	adds	r6, #8
 800c4c2:	e7e5      	b.n	800c490 <_dtoa_r+0x370>
 800c4c4:	f000 80a6 	beq.w	800c614 <_dtoa_r+0x4f4>
 800c4c8:	f1ca 0600 	rsb	r6, sl, #0
 800c4cc:	4ba5      	ldr	r3, [pc, #660]	; (800c764 <_dtoa_r+0x644>)
 800c4ce:	4fa6      	ldr	r7, [pc, #664]	; (800c768 <_dtoa_r+0x648>)
 800c4d0:	f006 020f 	and.w	r2, r6, #15
 800c4d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c4e0:	f7f4 f88a 	bl	80005f8 <__aeabi_dmul>
 800c4e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4e8:	1136      	asrs	r6, r6, #4
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	2502      	movs	r5, #2
 800c4ee:	2e00      	cmp	r6, #0
 800c4f0:	f040 8085 	bne.w	800c5fe <_dtoa_r+0x4de>
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d1d2      	bne.n	800c49e <_dtoa_r+0x37e>
 800c4f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	f000 808c 	beq.w	800c618 <_dtoa_r+0x4f8>
 800c500:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c504:	4b99      	ldr	r3, [pc, #612]	; (800c76c <_dtoa_r+0x64c>)
 800c506:	2200      	movs	r2, #0
 800c508:	4630      	mov	r0, r6
 800c50a:	4639      	mov	r1, r7
 800c50c:	f7f4 fae6 	bl	8000adc <__aeabi_dcmplt>
 800c510:	2800      	cmp	r0, #0
 800c512:	f000 8081 	beq.w	800c618 <_dtoa_r+0x4f8>
 800c516:	9b01      	ldr	r3, [sp, #4]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d07d      	beq.n	800c618 <_dtoa_r+0x4f8>
 800c51c:	f1b9 0f00 	cmp.w	r9, #0
 800c520:	dd3c      	ble.n	800c59c <_dtoa_r+0x47c>
 800c522:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c526:	9307      	str	r3, [sp, #28]
 800c528:	2200      	movs	r2, #0
 800c52a:	4b91      	ldr	r3, [pc, #580]	; (800c770 <_dtoa_r+0x650>)
 800c52c:	4630      	mov	r0, r6
 800c52e:	4639      	mov	r1, r7
 800c530:	f7f4 f862 	bl	80005f8 <__aeabi_dmul>
 800c534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c538:	3501      	adds	r5, #1
 800c53a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c53e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c542:	4628      	mov	r0, r5
 800c544:	f7f3 ffee 	bl	8000524 <__aeabi_i2d>
 800c548:	4632      	mov	r2, r6
 800c54a:	463b      	mov	r3, r7
 800c54c:	f7f4 f854 	bl	80005f8 <__aeabi_dmul>
 800c550:	4b88      	ldr	r3, [pc, #544]	; (800c774 <_dtoa_r+0x654>)
 800c552:	2200      	movs	r2, #0
 800c554:	f7f3 fe9a 	bl	800028c <__adddf3>
 800c558:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c55c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c560:	9303      	str	r3, [sp, #12]
 800c562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c564:	2b00      	cmp	r3, #0
 800c566:	d15c      	bne.n	800c622 <_dtoa_r+0x502>
 800c568:	4b83      	ldr	r3, [pc, #524]	; (800c778 <_dtoa_r+0x658>)
 800c56a:	2200      	movs	r2, #0
 800c56c:	4630      	mov	r0, r6
 800c56e:	4639      	mov	r1, r7
 800c570:	f7f3 fe8a 	bl	8000288 <__aeabi_dsub>
 800c574:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c578:	4606      	mov	r6, r0
 800c57a:	460f      	mov	r7, r1
 800c57c:	f7f4 facc 	bl	8000b18 <__aeabi_dcmpgt>
 800c580:	2800      	cmp	r0, #0
 800c582:	f040 8296 	bne.w	800cab2 <_dtoa_r+0x992>
 800c586:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c58a:	4630      	mov	r0, r6
 800c58c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c590:	4639      	mov	r1, r7
 800c592:	f7f4 faa3 	bl	8000adc <__aeabi_dcmplt>
 800c596:	2800      	cmp	r0, #0
 800c598:	f040 8288 	bne.w	800caac <_dtoa_r+0x98c>
 800c59c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c5a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c5a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	f2c0 8158 	blt.w	800c85c <_dtoa_r+0x73c>
 800c5ac:	f1ba 0f0e 	cmp.w	sl, #14
 800c5b0:	f300 8154 	bgt.w	800c85c <_dtoa_r+0x73c>
 800c5b4:	4b6b      	ldr	r3, [pc, #428]	; (800c764 <_dtoa_r+0x644>)
 800c5b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c5ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c5be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	f280 80e3 	bge.w	800c78c <_dtoa_r+0x66c>
 800c5c6:	9b01      	ldr	r3, [sp, #4]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	f300 80df 	bgt.w	800c78c <_dtoa_r+0x66c>
 800c5ce:	f040 826d 	bne.w	800caac <_dtoa_r+0x98c>
 800c5d2:	4b69      	ldr	r3, [pc, #420]	; (800c778 <_dtoa_r+0x658>)
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	4640      	mov	r0, r8
 800c5d8:	4649      	mov	r1, r9
 800c5da:	f7f4 f80d 	bl	80005f8 <__aeabi_dmul>
 800c5de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5e2:	f7f4 fa8f 	bl	8000b04 <__aeabi_dcmpge>
 800c5e6:	9e01      	ldr	r6, [sp, #4]
 800c5e8:	4637      	mov	r7, r6
 800c5ea:	2800      	cmp	r0, #0
 800c5ec:	f040 8243 	bne.w	800ca76 <_dtoa_r+0x956>
 800c5f0:	9d00      	ldr	r5, [sp, #0]
 800c5f2:	2331      	movs	r3, #49	; 0x31
 800c5f4:	f805 3b01 	strb.w	r3, [r5], #1
 800c5f8:	f10a 0a01 	add.w	sl, sl, #1
 800c5fc:	e23f      	b.n	800ca7e <_dtoa_r+0x95e>
 800c5fe:	07f2      	lsls	r2, r6, #31
 800c600:	d505      	bpl.n	800c60e <_dtoa_r+0x4ee>
 800c602:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c606:	f7f3 fff7 	bl	80005f8 <__aeabi_dmul>
 800c60a:	3501      	adds	r5, #1
 800c60c:	2301      	movs	r3, #1
 800c60e:	1076      	asrs	r6, r6, #1
 800c610:	3708      	adds	r7, #8
 800c612:	e76c      	b.n	800c4ee <_dtoa_r+0x3ce>
 800c614:	2502      	movs	r5, #2
 800c616:	e76f      	b.n	800c4f8 <_dtoa_r+0x3d8>
 800c618:	9b01      	ldr	r3, [sp, #4]
 800c61a:	f8cd a01c 	str.w	sl, [sp, #28]
 800c61e:	930c      	str	r3, [sp, #48]	; 0x30
 800c620:	e78d      	b.n	800c53e <_dtoa_r+0x41e>
 800c622:	9900      	ldr	r1, [sp, #0]
 800c624:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c626:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c628:	4b4e      	ldr	r3, [pc, #312]	; (800c764 <_dtoa_r+0x644>)
 800c62a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c62e:	4401      	add	r1, r0
 800c630:	9102      	str	r1, [sp, #8]
 800c632:	9908      	ldr	r1, [sp, #32]
 800c634:	eeb0 8a47 	vmov.f32	s16, s14
 800c638:	eef0 8a67 	vmov.f32	s17, s15
 800c63c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c640:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c644:	2900      	cmp	r1, #0
 800c646:	d045      	beq.n	800c6d4 <_dtoa_r+0x5b4>
 800c648:	494c      	ldr	r1, [pc, #304]	; (800c77c <_dtoa_r+0x65c>)
 800c64a:	2000      	movs	r0, #0
 800c64c:	f7f4 f8fe 	bl	800084c <__aeabi_ddiv>
 800c650:	ec53 2b18 	vmov	r2, r3, d8
 800c654:	f7f3 fe18 	bl	8000288 <__aeabi_dsub>
 800c658:	9d00      	ldr	r5, [sp, #0]
 800c65a:	ec41 0b18 	vmov	d8, r0, r1
 800c65e:	4639      	mov	r1, r7
 800c660:	4630      	mov	r0, r6
 800c662:	f7f4 fa79 	bl	8000b58 <__aeabi_d2iz>
 800c666:	900c      	str	r0, [sp, #48]	; 0x30
 800c668:	f7f3 ff5c 	bl	8000524 <__aeabi_i2d>
 800c66c:	4602      	mov	r2, r0
 800c66e:	460b      	mov	r3, r1
 800c670:	4630      	mov	r0, r6
 800c672:	4639      	mov	r1, r7
 800c674:	f7f3 fe08 	bl	8000288 <__aeabi_dsub>
 800c678:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c67a:	3330      	adds	r3, #48	; 0x30
 800c67c:	f805 3b01 	strb.w	r3, [r5], #1
 800c680:	ec53 2b18 	vmov	r2, r3, d8
 800c684:	4606      	mov	r6, r0
 800c686:	460f      	mov	r7, r1
 800c688:	f7f4 fa28 	bl	8000adc <__aeabi_dcmplt>
 800c68c:	2800      	cmp	r0, #0
 800c68e:	d165      	bne.n	800c75c <_dtoa_r+0x63c>
 800c690:	4632      	mov	r2, r6
 800c692:	463b      	mov	r3, r7
 800c694:	4935      	ldr	r1, [pc, #212]	; (800c76c <_dtoa_r+0x64c>)
 800c696:	2000      	movs	r0, #0
 800c698:	f7f3 fdf6 	bl	8000288 <__aeabi_dsub>
 800c69c:	ec53 2b18 	vmov	r2, r3, d8
 800c6a0:	f7f4 fa1c 	bl	8000adc <__aeabi_dcmplt>
 800c6a4:	2800      	cmp	r0, #0
 800c6a6:	f040 80b9 	bne.w	800c81c <_dtoa_r+0x6fc>
 800c6aa:	9b02      	ldr	r3, [sp, #8]
 800c6ac:	429d      	cmp	r5, r3
 800c6ae:	f43f af75 	beq.w	800c59c <_dtoa_r+0x47c>
 800c6b2:	4b2f      	ldr	r3, [pc, #188]	; (800c770 <_dtoa_r+0x650>)
 800c6b4:	ec51 0b18 	vmov	r0, r1, d8
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	f7f3 ff9d 	bl	80005f8 <__aeabi_dmul>
 800c6be:	4b2c      	ldr	r3, [pc, #176]	; (800c770 <_dtoa_r+0x650>)
 800c6c0:	ec41 0b18 	vmov	d8, r0, r1
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	4630      	mov	r0, r6
 800c6c8:	4639      	mov	r1, r7
 800c6ca:	f7f3 ff95 	bl	80005f8 <__aeabi_dmul>
 800c6ce:	4606      	mov	r6, r0
 800c6d0:	460f      	mov	r7, r1
 800c6d2:	e7c4      	b.n	800c65e <_dtoa_r+0x53e>
 800c6d4:	ec51 0b17 	vmov	r0, r1, d7
 800c6d8:	f7f3 ff8e 	bl	80005f8 <__aeabi_dmul>
 800c6dc:	9b02      	ldr	r3, [sp, #8]
 800c6de:	9d00      	ldr	r5, [sp, #0]
 800c6e0:	930c      	str	r3, [sp, #48]	; 0x30
 800c6e2:	ec41 0b18 	vmov	d8, r0, r1
 800c6e6:	4639      	mov	r1, r7
 800c6e8:	4630      	mov	r0, r6
 800c6ea:	f7f4 fa35 	bl	8000b58 <__aeabi_d2iz>
 800c6ee:	9011      	str	r0, [sp, #68]	; 0x44
 800c6f0:	f7f3 ff18 	bl	8000524 <__aeabi_i2d>
 800c6f4:	4602      	mov	r2, r0
 800c6f6:	460b      	mov	r3, r1
 800c6f8:	4630      	mov	r0, r6
 800c6fa:	4639      	mov	r1, r7
 800c6fc:	f7f3 fdc4 	bl	8000288 <__aeabi_dsub>
 800c700:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c702:	3330      	adds	r3, #48	; 0x30
 800c704:	f805 3b01 	strb.w	r3, [r5], #1
 800c708:	9b02      	ldr	r3, [sp, #8]
 800c70a:	429d      	cmp	r5, r3
 800c70c:	4606      	mov	r6, r0
 800c70e:	460f      	mov	r7, r1
 800c710:	f04f 0200 	mov.w	r2, #0
 800c714:	d134      	bne.n	800c780 <_dtoa_r+0x660>
 800c716:	4b19      	ldr	r3, [pc, #100]	; (800c77c <_dtoa_r+0x65c>)
 800c718:	ec51 0b18 	vmov	r0, r1, d8
 800c71c:	f7f3 fdb6 	bl	800028c <__adddf3>
 800c720:	4602      	mov	r2, r0
 800c722:	460b      	mov	r3, r1
 800c724:	4630      	mov	r0, r6
 800c726:	4639      	mov	r1, r7
 800c728:	f7f4 f9f6 	bl	8000b18 <__aeabi_dcmpgt>
 800c72c:	2800      	cmp	r0, #0
 800c72e:	d175      	bne.n	800c81c <_dtoa_r+0x6fc>
 800c730:	ec53 2b18 	vmov	r2, r3, d8
 800c734:	4911      	ldr	r1, [pc, #68]	; (800c77c <_dtoa_r+0x65c>)
 800c736:	2000      	movs	r0, #0
 800c738:	f7f3 fda6 	bl	8000288 <__aeabi_dsub>
 800c73c:	4602      	mov	r2, r0
 800c73e:	460b      	mov	r3, r1
 800c740:	4630      	mov	r0, r6
 800c742:	4639      	mov	r1, r7
 800c744:	f7f4 f9ca 	bl	8000adc <__aeabi_dcmplt>
 800c748:	2800      	cmp	r0, #0
 800c74a:	f43f af27 	beq.w	800c59c <_dtoa_r+0x47c>
 800c74e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c750:	1e6b      	subs	r3, r5, #1
 800c752:	930c      	str	r3, [sp, #48]	; 0x30
 800c754:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c758:	2b30      	cmp	r3, #48	; 0x30
 800c75a:	d0f8      	beq.n	800c74e <_dtoa_r+0x62e>
 800c75c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c760:	e04a      	b.n	800c7f8 <_dtoa_r+0x6d8>
 800c762:	bf00      	nop
 800c764:	0800e180 	.word	0x0800e180
 800c768:	0800e158 	.word	0x0800e158
 800c76c:	3ff00000 	.word	0x3ff00000
 800c770:	40240000 	.word	0x40240000
 800c774:	401c0000 	.word	0x401c0000
 800c778:	40140000 	.word	0x40140000
 800c77c:	3fe00000 	.word	0x3fe00000
 800c780:	4baf      	ldr	r3, [pc, #700]	; (800ca40 <_dtoa_r+0x920>)
 800c782:	f7f3 ff39 	bl	80005f8 <__aeabi_dmul>
 800c786:	4606      	mov	r6, r0
 800c788:	460f      	mov	r7, r1
 800c78a:	e7ac      	b.n	800c6e6 <_dtoa_r+0x5c6>
 800c78c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c790:	9d00      	ldr	r5, [sp, #0]
 800c792:	4642      	mov	r2, r8
 800c794:	464b      	mov	r3, r9
 800c796:	4630      	mov	r0, r6
 800c798:	4639      	mov	r1, r7
 800c79a:	f7f4 f857 	bl	800084c <__aeabi_ddiv>
 800c79e:	f7f4 f9db 	bl	8000b58 <__aeabi_d2iz>
 800c7a2:	9002      	str	r0, [sp, #8]
 800c7a4:	f7f3 febe 	bl	8000524 <__aeabi_i2d>
 800c7a8:	4642      	mov	r2, r8
 800c7aa:	464b      	mov	r3, r9
 800c7ac:	f7f3 ff24 	bl	80005f8 <__aeabi_dmul>
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	460b      	mov	r3, r1
 800c7b4:	4630      	mov	r0, r6
 800c7b6:	4639      	mov	r1, r7
 800c7b8:	f7f3 fd66 	bl	8000288 <__aeabi_dsub>
 800c7bc:	9e02      	ldr	r6, [sp, #8]
 800c7be:	9f01      	ldr	r7, [sp, #4]
 800c7c0:	3630      	adds	r6, #48	; 0x30
 800c7c2:	f805 6b01 	strb.w	r6, [r5], #1
 800c7c6:	9e00      	ldr	r6, [sp, #0]
 800c7c8:	1bae      	subs	r6, r5, r6
 800c7ca:	42b7      	cmp	r7, r6
 800c7cc:	4602      	mov	r2, r0
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	d137      	bne.n	800c842 <_dtoa_r+0x722>
 800c7d2:	f7f3 fd5b 	bl	800028c <__adddf3>
 800c7d6:	4642      	mov	r2, r8
 800c7d8:	464b      	mov	r3, r9
 800c7da:	4606      	mov	r6, r0
 800c7dc:	460f      	mov	r7, r1
 800c7de:	f7f4 f99b 	bl	8000b18 <__aeabi_dcmpgt>
 800c7e2:	b9c8      	cbnz	r0, 800c818 <_dtoa_r+0x6f8>
 800c7e4:	4642      	mov	r2, r8
 800c7e6:	464b      	mov	r3, r9
 800c7e8:	4630      	mov	r0, r6
 800c7ea:	4639      	mov	r1, r7
 800c7ec:	f7f4 f96c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7f0:	b110      	cbz	r0, 800c7f8 <_dtoa_r+0x6d8>
 800c7f2:	9b02      	ldr	r3, [sp, #8]
 800c7f4:	07d9      	lsls	r1, r3, #31
 800c7f6:	d40f      	bmi.n	800c818 <_dtoa_r+0x6f8>
 800c7f8:	4620      	mov	r0, r4
 800c7fa:	4659      	mov	r1, fp
 800c7fc:	f000 facc 	bl	800cd98 <_Bfree>
 800c800:	2300      	movs	r3, #0
 800c802:	702b      	strb	r3, [r5, #0]
 800c804:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c806:	f10a 0001 	add.w	r0, sl, #1
 800c80a:	6018      	str	r0, [r3, #0]
 800c80c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c80e:	2b00      	cmp	r3, #0
 800c810:	f43f acd8 	beq.w	800c1c4 <_dtoa_r+0xa4>
 800c814:	601d      	str	r5, [r3, #0]
 800c816:	e4d5      	b.n	800c1c4 <_dtoa_r+0xa4>
 800c818:	f8cd a01c 	str.w	sl, [sp, #28]
 800c81c:	462b      	mov	r3, r5
 800c81e:	461d      	mov	r5, r3
 800c820:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c824:	2a39      	cmp	r2, #57	; 0x39
 800c826:	d108      	bne.n	800c83a <_dtoa_r+0x71a>
 800c828:	9a00      	ldr	r2, [sp, #0]
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d1f7      	bne.n	800c81e <_dtoa_r+0x6fe>
 800c82e:	9a07      	ldr	r2, [sp, #28]
 800c830:	9900      	ldr	r1, [sp, #0]
 800c832:	3201      	adds	r2, #1
 800c834:	9207      	str	r2, [sp, #28]
 800c836:	2230      	movs	r2, #48	; 0x30
 800c838:	700a      	strb	r2, [r1, #0]
 800c83a:	781a      	ldrb	r2, [r3, #0]
 800c83c:	3201      	adds	r2, #1
 800c83e:	701a      	strb	r2, [r3, #0]
 800c840:	e78c      	b.n	800c75c <_dtoa_r+0x63c>
 800c842:	4b7f      	ldr	r3, [pc, #508]	; (800ca40 <_dtoa_r+0x920>)
 800c844:	2200      	movs	r2, #0
 800c846:	f7f3 fed7 	bl	80005f8 <__aeabi_dmul>
 800c84a:	2200      	movs	r2, #0
 800c84c:	2300      	movs	r3, #0
 800c84e:	4606      	mov	r6, r0
 800c850:	460f      	mov	r7, r1
 800c852:	f7f4 f939 	bl	8000ac8 <__aeabi_dcmpeq>
 800c856:	2800      	cmp	r0, #0
 800c858:	d09b      	beq.n	800c792 <_dtoa_r+0x672>
 800c85a:	e7cd      	b.n	800c7f8 <_dtoa_r+0x6d8>
 800c85c:	9a08      	ldr	r2, [sp, #32]
 800c85e:	2a00      	cmp	r2, #0
 800c860:	f000 80c4 	beq.w	800c9ec <_dtoa_r+0x8cc>
 800c864:	9a05      	ldr	r2, [sp, #20]
 800c866:	2a01      	cmp	r2, #1
 800c868:	f300 80a8 	bgt.w	800c9bc <_dtoa_r+0x89c>
 800c86c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c86e:	2a00      	cmp	r2, #0
 800c870:	f000 80a0 	beq.w	800c9b4 <_dtoa_r+0x894>
 800c874:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c878:	9e06      	ldr	r6, [sp, #24]
 800c87a:	4645      	mov	r5, r8
 800c87c:	9a04      	ldr	r2, [sp, #16]
 800c87e:	2101      	movs	r1, #1
 800c880:	441a      	add	r2, r3
 800c882:	4620      	mov	r0, r4
 800c884:	4498      	add	r8, r3
 800c886:	9204      	str	r2, [sp, #16]
 800c888:	f000 fb42 	bl	800cf10 <__i2b>
 800c88c:	4607      	mov	r7, r0
 800c88e:	2d00      	cmp	r5, #0
 800c890:	dd0b      	ble.n	800c8aa <_dtoa_r+0x78a>
 800c892:	9b04      	ldr	r3, [sp, #16]
 800c894:	2b00      	cmp	r3, #0
 800c896:	dd08      	ble.n	800c8aa <_dtoa_r+0x78a>
 800c898:	42ab      	cmp	r3, r5
 800c89a:	9a04      	ldr	r2, [sp, #16]
 800c89c:	bfa8      	it	ge
 800c89e:	462b      	movge	r3, r5
 800c8a0:	eba8 0803 	sub.w	r8, r8, r3
 800c8a4:	1aed      	subs	r5, r5, r3
 800c8a6:	1ad3      	subs	r3, r2, r3
 800c8a8:	9304      	str	r3, [sp, #16]
 800c8aa:	9b06      	ldr	r3, [sp, #24]
 800c8ac:	b1fb      	cbz	r3, 800c8ee <_dtoa_r+0x7ce>
 800c8ae:	9b08      	ldr	r3, [sp, #32]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	f000 809f 	beq.w	800c9f4 <_dtoa_r+0x8d4>
 800c8b6:	2e00      	cmp	r6, #0
 800c8b8:	dd11      	ble.n	800c8de <_dtoa_r+0x7be>
 800c8ba:	4639      	mov	r1, r7
 800c8bc:	4632      	mov	r2, r6
 800c8be:	4620      	mov	r0, r4
 800c8c0:	f000 fbe2 	bl	800d088 <__pow5mult>
 800c8c4:	465a      	mov	r2, fp
 800c8c6:	4601      	mov	r1, r0
 800c8c8:	4607      	mov	r7, r0
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	f000 fb36 	bl	800cf3c <__multiply>
 800c8d0:	4659      	mov	r1, fp
 800c8d2:	9007      	str	r0, [sp, #28]
 800c8d4:	4620      	mov	r0, r4
 800c8d6:	f000 fa5f 	bl	800cd98 <_Bfree>
 800c8da:	9b07      	ldr	r3, [sp, #28]
 800c8dc:	469b      	mov	fp, r3
 800c8de:	9b06      	ldr	r3, [sp, #24]
 800c8e0:	1b9a      	subs	r2, r3, r6
 800c8e2:	d004      	beq.n	800c8ee <_dtoa_r+0x7ce>
 800c8e4:	4659      	mov	r1, fp
 800c8e6:	4620      	mov	r0, r4
 800c8e8:	f000 fbce 	bl	800d088 <__pow5mult>
 800c8ec:	4683      	mov	fp, r0
 800c8ee:	2101      	movs	r1, #1
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	f000 fb0d 	bl	800cf10 <__i2b>
 800c8f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	4606      	mov	r6, r0
 800c8fc:	dd7c      	ble.n	800c9f8 <_dtoa_r+0x8d8>
 800c8fe:	461a      	mov	r2, r3
 800c900:	4601      	mov	r1, r0
 800c902:	4620      	mov	r0, r4
 800c904:	f000 fbc0 	bl	800d088 <__pow5mult>
 800c908:	9b05      	ldr	r3, [sp, #20]
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	4606      	mov	r6, r0
 800c90e:	dd76      	ble.n	800c9fe <_dtoa_r+0x8de>
 800c910:	2300      	movs	r3, #0
 800c912:	9306      	str	r3, [sp, #24]
 800c914:	6933      	ldr	r3, [r6, #16]
 800c916:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c91a:	6918      	ldr	r0, [r3, #16]
 800c91c:	f000 faa8 	bl	800ce70 <__hi0bits>
 800c920:	f1c0 0020 	rsb	r0, r0, #32
 800c924:	9b04      	ldr	r3, [sp, #16]
 800c926:	4418      	add	r0, r3
 800c928:	f010 001f 	ands.w	r0, r0, #31
 800c92c:	f000 8086 	beq.w	800ca3c <_dtoa_r+0x91c>
 800c930:	f1c0 0320 	rsb	r3, r0, #32
 800c934:	2b04      	cmp	r3, #4
 800c936:	dd7f      	ble.n	800ca38 <_dtoa_r+0x918>
 800c938:	f1c0 001c 	rsb	r0, r0, #28
 800c93c:	9b04      	ldr	r3, [sp, #16]
 800c93e:	4403      	add	r3, r0
 800c940:	4480      	add	r8, r0
 800c942:	4405      	add	r5, r0
 800c944:	9304      	str	r3, [sp, #16]
 800c946:	f1b8 0f00 	cmp.w	r8, #0
 800c94a:	dd05      	ble.n	800c958 <_dtoa_r+0x838>
 800c94c:	4659      	mov	r1, fp
 800c94e:	4642      	mov	r2, r8
 800c950:	4620      	mov	r0, r4
 800c952:	f000 fbf3 	bl	800d13c <__lshift>
 800c956:	4683      	mov	fp, r0
 800c958:	9b04      	ldr	r3, [sp, #16]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	dd05      	ble.n	800c96a <_dtoa_r+0x84a>
 800c95e:	4631      	mov	r1, r6
 800c960:	461a      	mov	r2, r3
 800c962:	4620      	mov	r0, r4
 800c964:	f000 fbea 	bl	800d13c <__lshift>
 800c968:	4606      	mov	r6, r0
 800c96a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d069      	beq.n	800ca44 <_dtoa_r+0x924>
 800c970:	4631      	mov	r1, r6
 800c972:	4658      	mov	r0, fp
 800c974:	f000 fc4e 	bl	800d214 <__mcmp>
 800c978:	2800      	cmp	r0, #0
 800c97a:	da63      	bge.n	800ca44 <_dtoa_r+0x924>
 800c97c:	2300      	movs	r3, #0
 800c97e:	4659      	mov	r1, fp
 800c980:	220a      	movs	r2, #10
 800c982:	4620      	mov	r0, r4
 800c984:	f000 fa2a 	bl	800cddc <__multadd>
 800c988:	9b08      	ldr	r3, [sp, #32]
 800c98a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c98e:	4683      	mov	fp, r0
 800c990:	2b00      	cmp	r3, #0
 800c992:	f000 818f 	beq.w	800ccb4 <_dtoa_r+0xb94>
 800c996:	4639      	mov	r1, r7
 800c998:	2300      	movs	r3, #0
 800c99a:	220a      	movs	r2, #10
 800c99c:	4620      	mov	r0, r4
 800c99e:	f000 fa1d 	bl	800cddc <__multadd>
 800c9a2:	f1b9 0f00 	cmp.w	r9, #0
 800c9a6:	4607      	mov	r7, r0
 800c9a8:	f300 808e 	bgt.w	800cac8 <_dtoa_r+0x9a8>
 800c9ac:	9b05      	ldr	r3, [sp, #20]
 800c9ae:	2b02      	cmp	r3, #2
 800c9b0:	dc50      	bgt.n	800ca54 <_dtoa_r+0x934>
 800c9b2:	e089      	b.n	800cac8 <_dtoa_r+0x9a8>
 800c9b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c9b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c9ba:	e75d      	b.n	800c878 <_dtoa_r+0x758>
 800c9bc:	9b01      	ldr	r3, [sp, #4]
 800c9be:	1e5e      	subs	r6, r3, #1
 800c9c0:	9b06      	ldr	r3, [sp, #24]
 800c9c2:	42b3      	cmp	r3, r6
 800c9c4:	bfbf      	itttt	lt
 800c9c6:	9b06      	ldrlt	r3, [sp, #24]
 800c9c8:	9606      	strlt	r6, [sp, #24]
 800c9ca:	1af2      	sublt	r2, r6, r3
 800c9cc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c9ce:	bfb6      	itet	lt
 800c9d0:	189b      	addlt	r3, r3, r2
 800c9d2:	1b9e      	subge	r6, r3, r6
 800c9d4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c9d6:	9b01      	ldr	r3, [sp, #4]
 800c9d8:	bfb8      	it	lt
 800c9da:	2600      	movlt	r6, #0
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	bfb5      	itete	lt
 800c9e0:	eba8 0503 	sublt.w	r5, r8, r3
 800c9e4:	9b01      	ldrge	r3, [sp, #4]
 800c9e6:	2300      	movlt	r3, #0
 800c9e8:	4645      	movge	r5, r8
 800c9ea:	e747      	b.n	800c87c <_dtoa_r+0x75c>
 800c9ec:	9e06      	ldr	r6, [sp, #24]
 800c9ee:	9f08      	ldr	r7, [sp, #32]
 800c9f0:	4645      	mov	r5, r8
 800c9f2:	e74c      	b.n	800c88e <_dtoa_r+0x76e>
 800c9f4:	9a06      	ldr	r2, [sp, #24]
 800c9f6:	e775      	b.n	800c8e4 <_dtoa_r+0x7c4>
 800c9f8:	9b05      	ldr	r3, [sp, #20]
 800c9fa:	2b01      	cmp	r3, #1
 800c9fc:	dc18      	bgt.n	800ca30 <_dtoa_r+0x910>
 800c9fe:	9b02      	ldr	r3, [sp, #8]
 800ca00:	b9b3      	cbnz	r3, 800ca30 <_dtoa_r+0x910>
 800ca02:	9b03      	ldr	r3, [sp, #12]
 800ca04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca08:	b9a3      	cbnz	r3, 800ca34 <_dtoa_r+0x914>
 800ca0a:	9b03      	ldr	r3, [sp, #12]
 800ca0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca10:	0d1b      	lsrs	r3, r3, #20
 800ca12:	051b      	lsls	r3, r3, #20
 800ca14:	b12b      	cbz	r3, 800ca22 <_dtoa_r+0x902>
 800ca16:	9b04      	ldr	r3, [sp, #16]
 800ca18:	3301      	adds	r3, #1
 800ca1a:	9304      	str	r3, [sp, #16]
 800ca1c:	f108 0801 	add.w	r8, r8, #1
 800ca20:	2301      	movs	r3, #1
 800ca22:	9306      	str	r3, [sp, #24]
 800ca24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	f47f af74 	bne.w	800c914 <_dtoa_r+0x7f4>
 800ca2c:	2001      	movs	r0, #1
 800ca2e:	e779      	b.n	800c924 <_dtoa_r+0x804>
 800ca30:	2300      	movs	r3, #0
 800ca32:	e7f6      	b.n	800ca22 <_dtoa_r+0x902>
 800ca34:	9b02      	ldr	r3, [sp, #8]
 800ca36:	e7f4      	b.n	800ca22 <_dtoa_r+0x902>
 800ca38:	d085      	beq.n	800c946 <_dtoa_r+0x826>
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	301c      	adds	r0, #28
 800ca3e:	e77d      	b.n	800c93c <_dtoa_r+0x81c>
 800ca40:	40240000 	.word	0x40240000
 800ca44:	9b01      	ldr	r3, [sp, #4]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	dc38      	bgt.n	800cabc <_dtoa_r+0x99c>
 800ca4a:	9b05      	ldr	r3, [sp, #20]
 800ca4c:	2b02      	cmp	r3, #2
 800ca4e:	dd35      	ble.n	800cabc <_dtoa_r+0x99c>
 800ca50:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ca54:	f1b9 0f00 	cmp.w	r9, #0
 800ca58:	d10d      	bne.n	800ca76 <_dtoa_r+0x956>
 800ca5a:	4631      	mov	r1, r6
 800ca5c:	464b      	mov	r3, r9
 800ca5e:	2205      	movs	r2, #5
 800ca60:	4620      	mov	r0, r4
 800ca62:	f000 f9bb 	bl	800cddc <__multadd>
 800ca66:	4601      	mov	r1, r0
 800ca68:	4606      	mov	r6, r0
 800ca6a:	4658      	mov	r0, fp
 800ca6c:	f000 fbd2 	bl	800d214 <__mcmp>
 800ca70:	2800      	cmp	r0, #0
 800ca72:	f73f adbd 	bgt.w	800c5f0 <_dtoa_r+0x4d0>
 800ca76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca78:	9d00      	ldr	r5, [sp, #0]
 800ca7a:	ea6f 0a03 	mvn.w	sl, r3
 800ca7e:	f04f 0800 	mov.w	r8, #0
 800ca82:	4631      	mov	r1, r6
 800ca84:	4620      	mov	r0, r4
 800ca86:	f000 f987 	bl	800cd98 <_Bfree>
 800ca8a:	2f00      	cmp	r7, #0
 800ca8c:	f43f aeb4 	beq.w	800c7f8 <_dtoa_r+0x6d8>
 800ca90:	f1b8 0f00 	cmp.w	r8, #0
 800ca94:	d005      	beq.n	800caa2 <_dtoa_r+0x982>
 800ca96:	45b8      	cmp	r8, r7
 800ca98:	d003      	beq.n	800caa2 <_dtoa_r+0x982>
 800ca9a:	4641      	mov	r1, r8
 800ca9c:	4620      	mov	r0, r4
 800ca9e:	f000 f97b 	bl	800cd98 <_Bfree>
 800caa2:	4639      	mov	r1, r7
 800caa4:	4620      	mov	r0, r4
 800caa6:	f000 f977 	bl	800cd98 <_Bfree>
 800caaa:	e6a5      	b.n	800c7f8 <_dtoa_r+0x6d8>
 800caac:	2600      	movs	r6, #0
 800caae:	4637      	mov	r7, r6
 800cab0:	e7e1      	b.n	800ca76 <_dtoa_r+0x956>
 800cab2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cab4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800cab8:	4637      	mov	r7, r6
 800caba:	e599      	b.n	800c5f0 <_dtoa_r+0x4d0>
 800cabc:	9b08      	ldr	r3, [sp, #32]
 800cabe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	f000 80fd 	beq.w	800ccc2 <_dtoa_r+0xba2>
 800cac8:	2d00      	cmp	r5, #0
 800caca:	dd05      	ble.n	800cad8 <_dtoa_r+0x9b8>
 800cacc:	4639      	mov	r1, r7
 800cace:	462a      	mov	r2, r5
 800cad0:	4620      	mov	r0, r4
 800cad2:	f000 fb33 	bl	800d13c <__lshift>
 800cad6:	4607      	mov	r7, r0
 800cad8:	9b06      	ldr	r3, [sp, #24]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d05c      	beq.n	800cb98 <_dtoa_r+0xa78>
 800cade:	6879      	ldr	r1, [r7, #4]
 800cae0:	4620      	mov	r0, r4
 800cae2:	f000 f919 	bl	800cd18 <_Balloc>
 800cae6:	4605      	mov	r5, r0
 800cae8:	b928      	cbnz	r0, 800caf6 <_dtoa_r+0x9d6>
 800caea:	4b80      	ldr	r3, [pc, #512]	; (800ccec <_dtoa_r+0xbcc>)
 800caec:	4602      	mov	r2, r0
 800caee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800caf2:	f7ff bb2e 	b.w	800c152 <_dtoa_r+0x32>
 800caf6:	693a      	ldr	r2, [r7, #16]
 800caf8:	3202      	adds	r2, #2
 800cafa:	0092      	lsls	r2, r2, #2
 800cafc:	f107 010c 	add.w	r1, r7, #12
 800cb00:	300c      	adds	r0, #12
 800cb02:	f7fe fd35 	bl	800b570 <memcpy>
 800cb06:	2201      	movs	r2, #1
 800cb08:	4629      	mov	r1, r5
 800cb0a:	4620      	mov	r0, r4
 800cb0c:	f000 fb16 	bl	800d13c <__lshift>
 800cb10:	9b00      	ldr	r3, [sp, #0]
 800cb12:	3301      	adds	r3, #1
 800cb14:	9301      	str	r3, [sp, #4]
 800cb16:	9b00      	ldr	r3, [sp, #0]
 800cb18:	444b      	add	r3, r9
 800cb1a:	9307      	str	r3, [sp, #28]
 800cb1c:	9b02      	ldr	r3, [sp, #8]
 800cb1e:	f003 0301 	and.w	r3, r3, #1
 800cb22:	46b8      	mov	r8, r7
 800cb24:	9306      	str	r3, [sp, #24]
 800cb26:	4607      	mov	r7, r0
 800cb28:	9b01      	ldr	r3, [sp, #4]
 800cb2a:	4631      	mov	r1, r6
 800cb2c:	3b01      	subs	r3, #1
 800cb2e:	4658      	mov	r0, fp
 800cb30:	9302      	str	r3, [sp, #8]
 800cb32:	f7ff fa67 	bl	800c004 <quorem>
 800cb36:	4603      	mov	r3, r0
 800cb38:	3330      	adds	r3, #48	; 0x30
 800cb3a:	9004      	str	r0, [sp, #16]
 800cb3c:	4641      	mov	r1, r8
 800cb3e:	4658      	mov	r0, fp
 800cb40:	9308      	str	r3, [sp, #32]
 800cb42:	f000 fb67 	bl	800d214 <__mcmp>
 800cb46:	463a      	mov	r2, r7
 800cb48:	4681      	mov	r9, r0
 800cb4a:	4631      	mov	r1, r6
 800cb4c:	4620      	mov	r0, r4
 800cb4e:	f000 fb7d 	bl	800d24c <__mdiff>
 800cb52:	68c2      	ldr	r2, [r0, #12]
 800cb54:	9b08      	ldr	r3, [sp, #32]
 800cb56:	4605      	mov	r5, r0
 800cb58:	bb02      	cbnz	r2, 800cb9c <_dtoa_r+0xa7c>
 800cb5a:	4601      	mov	r1, r0
 800cb5c:	4658      	mov	r0, fp
 800cb5e:	f000 fb59 	bl	800d214 <__mcmp>
 800cb62:	9b08      	ldr	r3, [sp, #32]
 800cb64:	4602      	mov	r2, r0
 800cb66:	4629      	mov	r1, r5
 800cb68:	4620      	mov	r0, r4
 800cb6a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800cb6e:	f000 f913 	bl	800cd98 <_Bfree>
 800cb72:	9b05      	ldr	r3, [sp, #20]
 800cb74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb76:	9d01      	ldr	r5, [sp, #4]
 800cb78:	ea43 0102 	orr.w	r1, r3, r2
 800cb7c:	9b06      	ldr	r3, [sp, #24]
 800cb7e:	430b      	orrs	r3, r1
 800cb80:	9b08      	ldr	r3, [sp, #32]
 800cb82:	d10d      	bne.n	800cba0 <_dtoa_r+0xa80>
 800cb84:	2b39      	cmp	r3, #57	; 0x39
 800cb86:	d029      	beq.n	800cbdc <_dtoa_r+0xabc>
 800cb88:	f1b9 0f00 	cmp.w	r9, #0
 800cb8c:	dd01      	ble.n	800cb92 <_dtoa_r+0xa72>
 800cb8e:	9b04      	ldr	r3, [sp, #16]
 800cb90:	3331      	adds	r3, #49	; 0x31
 800cb92:	9a02      	ldr	r2, [sp, #8]
 800cb94:	7013      	strb	r3, [r2, #0]
 800cb96:	e774      	b.n	800ca82 <_dtoa_r+0x962>
 800cb98:	4638      	mov	r0, r7
 800cb9a:	e7b9      	b.n	800cb10 <_dtoa_r+0x9f0>
 800cb9c:	2201      	movs	r2, #1
 800cb9e:	e7e2      	b.n	800cb66 <_dtoa_r+0xa46>
 800cba0:	f1b9 0f00 	cmp.w	r9, #0
 800cba4:	db06      	blt.n	800cbb4 <_dtoa_r+0xa94>
 800cba6:	9905      	ldr	r1, [sp, #20]
 800cba8:	ea41 0909 	orr.w	r9, r1, r9
 800cbac:	9906      	ldr	r1, [sp, #24]
 800cbae:	ea59 0101 	orrs.w	r1, r9, r1
 800cbb2:	d120      	bne.n	800cbf6 <_dtoa_r+0xad6>
 800cbb4:	2a00      	cmp	r2, #0
 800cbb6:	ddec      	ble.n	800cb92 <_dtoa_r+0xa72>
 800cbb8:	4659      	mov	r1, fp
 800cbba:	2201      	movs	r2, #1
 800cbbc:	4620      	mov	r0, r4
 800cbbe:	9301      	str	r3, [sp, #4]
 800cbc0:	f000 fabc 	bl	800d13c <__lshift>
 800cbc4:	4631      	mov	r1, r6
 800cbc6:	4683      	mov	fp, r0
 800cbc8:	f000 fb24 	bl	800d214 <__mcmp>
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	9b01      	ldr	r3, [sp, #4]
 800cbd0:	dc02      	bgt.n	800cbd8 <_dtoa_r+0xab8>
 800cbd2:	d1de      	bne.n	800cb92 <_dtoa_r+0xa72>
 800cbd4:	07da      	lsls	r2, r3, #31
 800cbd6:	d5dc      	bpl.n	800cb92 <_dtoa_r+0xa72>
 800cbd8:	2b39      	cmp	r3, #57	; 0x39
 800cbda:	d1d8      	bne.n	800cb8e <_dtoa_r+0xa6e>
 800cbdc:	9a02      	ldr	r2, [sp, #8]
 800cbde:	2339      	movs	r3, #57	; 0x39
 800cbe0:	7013      	strb	r3, [r2, #0]
 800cbe2:	462b      	mov	r3, r5
 800cbe4:	461d      	mov	r5, r3
 800cbe6:	3b01      	subs	r3, #1
 800cbe8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cbec:	2a39      	cmp	r2, #57	; 0x39
 800cbee:	d050      	beq.n	800cc92 <_dtoa_r+0xb72>
 800cbf0:	3201      	adds	r2, #1
 800cbf2:	701a      	strb	r2, [r3, #0]
 800cbf4:	e745      	b.n	800ca82 <_dtoa_r+0x962>
 800cbf6:	2a00      	cmp	r2, #0
 800cbf8:	dd03      	ble.n	800cc02 <_dtoa_r+0xae2>
 800cbfa:	2b39      	cmp	r3, #57	; 0x39
 800cbfc:	d0ee      	beq.n	800cbdc <_dtoa_r+0xabc>
 800cbfe:	3301      	adds	r3, #1
 800cc00:	e7c7      	b.n	800cb92 <_dtoa_r+0xa72>
 800cc02:	9a01      	ldr	r2, [sp, #4]
 800cc04:	9907      	ldr	r1, [sp, #28]
 800cc06:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cc0a:	428a      	cmp	r2, r1
 800cc0c:	d02a      	beq.n	800cc64 <_dtoa_r+0xb44>
 800cc0e:	4659      	mov	r1, fp
 800cc10:	2300      	movs	r3, #0
 800cc12:	220a      	movs	r2, #10
 800cc14:	4620      	mov	r0, r4
 800cc16:	f000 f8e1 	bl	800cddc <__multadd>
 800cc1a:	45b8      	cmp	r8, r7
 800cc1c:	4683      	mov	fp, r0
 800cc1e:	f04f 0300 	mov.w	r3, #0
 800cc22:	f04f 020a 	mov.w	r2, #10
 800cc26:	4641      	mov	r1, r8
 800cc28:	4620      	mov	r0, r4
 800cc2a:	d107      	bne.n	800cc3c <_dtoa_r+0xb1c>
 800cc2c:	f000 f8d6 	bl	800cddc <__multadd>
 800cc30:	4680      	mov	r8, r0
 800cc32:	4607      	mov	r7, r0
 800cc34:	9b01      	ldr	r3, [sp, #4]
 800cc36:	3301      	adds	r3, #1
 800cc38:	9301      	str	r3, [sp, #4]
 800cc3a:	e775      	b.n	800cb28 <_dtoa_r+0xa08>
 800cc3c:	f000 f8ce 	bl	800cddc <__multadd>
 800cc40:	4639      	mov	r1, r7
 800cc42:	4680      	mov	r8, r0
 800cc44:	2300      	movs	r3, #0
 800cc46:	220a      	movs	r2, #10
 800cc48:	4620      	mov	r0, r4
 800cc4a:	f000 f8c7 	bl	800cddc <__multadd>
 800cc4e:	4607      	mov	r7, r0
 800cc50:	e7f0      	b.n	800cc34 <_dtoa_r+0xb14>
 800cc52:	f1b9 0f00 	cmp.w	r9, #0
 800cc56:	9a00      	ldr	r2, [sp, #0]
 800cc58:	bfcc      	ite	gt
 800cc5a:	464d      	movgt	r5, r9
 800cc5c:	2501      	movle	r5, #1
 800cc5e:	4415      	add	r5, r2
 800cc60:	f04f 0800 	mov.w	r8, #0
 800cc64:	4659      	mov	r1, fp
 800cc66:	2201      	movs	r2, #1
 800cc68:	4620      	mov	r0, r4
 800cc6a:	9301      	str	r3, [sp, #4]
 800cc6c:	f000 fa66 	bl	800d13c <__lshift>
 800cc70:	4631      	mov	r1, r6
 800cc72:	4683      	mov	fp, r0
 800cc74:	f000 face 	bl	800d214 <__mcmp>
 800cc78:	2800      	cmp	r0, #0
 800cc7a:	dcb2      	bgt.n	800cbe2 <_dtoa_r+0xac2>
 800cc7c:	d102      	bne.n	800cc84 <_dtoa_r+0xb64>
 800cc7e:	9b01      	ldr	r3, [sp, #4]
 800cc80:	07db      	lsls	r3, r3, #31
 800cc82:	d4ae      	bmi.n	800cbe2 <_dtoa_r+0xac2>
 800cc84:	462b      	mov	r3, r5
 800cc86:	461d      	mov	r5, r3
 800cc88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc8c:	2a30      	cmp	r2, #48	; 0x30
 800cc8e:	d0fa      	beq.n	800cc86 <_dtoa_r+0xb66>
 800cc90:	e6f7      	b.n	800ca82 <_dtoa_r+0x962>
 800cc92:	9a00      	ldr	r2, [sp, #0]
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d1a5      	bne.n	800cbe4 <_dtoa_r+0xac4>
 800cc98:	f10a 0a01 	add.w	sl, sl, #1
 800cc9c:	2331      	movs	r3, #49	; 0x31
 800cc9e:	e779      	b.n	800cb94 <_dtoa_r+0xa74>
 800cca0:	4b13      	ldr	r3, [pc, #76]	; (800ccf0 <_dtoa_r+0xbd0>)
 800cca2:	f7ff baaf 	b.w	800c204 <_dtoa_r+0xe4>
 800cca6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	f47f aa86 	bne.w	800c1ba <_dtoa_r+0x9a>
 800ccae:	4b11      	ldr	r3, [pc, #68]	; (800ccf4 <_dtoa_r+0xbd4>)
 800ccb0:	f7ff baa8 	b.w	800c204 <_dtoa_r+0xe4>
 800ccb4:	f1b9 0f00 	cmp.w	r9, #0
 800ccb8:	dc03      	bgt.n	800ccc2 <_dtoa_r+0xba2>
 800ccba:	9b05      	ldr	r3, [sp, #20]
 800ccbc:	2b02      	cmp	r3, #2
 800ccbe:	f73f aec9 	bgt.w	800ca54 <_dtoa_r+0x934>
 800ccc2:	9d00      	ldr	r5, [sp, #0]
 800ccc4:	4631      	mov	r1, r6
 800ccc6:	4658      	mov	r0, fp
 800ccc8:	f7ff f99c 	bl	800c004 <quorem>
 800cccc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ccd0:	f805 3b01 	strb.w	r3, [r5], #1
 800ccd4:	9a00      	ldr	r2, [sp, #0]
 800ccd6:	1aaa      	subs	r2, r5, r2
 800ccd8:	4591      	cmp	r9, r2
 800ccda:	ddba      	ble.n	800cc52 <_dtoa_r+0xb32>
 800ccdc:	4659      	mov	r1, fp
 800ccde:	2300      	movs	r3, #0
 800cce0:	220a      	movs	r2, #10
 800cce2:	4620      	mov	r0, r4
 800cce4:	f000 f87a 	bl	800cddc <__multadd>
 800cce8:	4683      	mov	fp, r0
 800ccea:	e7eb      	b.n	800ccc4 <_dtoa_r+0xba4>
 800ccec:	0800e0e3 	.word	0x0800e0e3
 800ccf0:	0800e03c 	.word	0x0800e03c
 800ccf4:	0800e060 	.word	0x0800e060

0800ccf8 <_localeconv_r>:
 800ccf8:	4800      	ldr	r0, [pc, #0]	; (800ccfc <_localeconv_r+0x4>)
 800ccfa:	4770      	bx	lr
 800ccfc:	20000298 	.word	0x20000298

0800cd00 <__malloc_lock>:
 800cd00:	4801      	ldr	r0, [pc, #4]	; (800cd08 <__malloc_lock+0x8>)
 800cd02:	f000 bbb8 	b.w	800d476 <__retarget_lock_acquire_recursive>
 800cd06:	bf00      	nop
 800cd08:	20008950 	.word	0x20008950

0800cd0c <__malloc_unlock>:
 800cd0c:	4801      	ldr	r0, [pc, #4]	; (800cd14 <__malloc_unlock+0x8>)
 800cd0e:	f000 bbb3 	b.w	800d478 <__retarget_lock_release_recursive>
 800cd12:	bf00      	nop
 800cd14:	20008950 	.word	0x20008950

0800cd18 <_Balloc>:
 800cd18:	b570      	push	{r4, r5, r6, lr}
 800cd1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cd1c:	4604      	mov	r4, r0
 800cd1e:	460d      	mov	r5, r1
 800cd20:	b976      	cbnz	r6, 800cd40 <_Balloc+0x28>
 800cd22:	2010      	movs	r0, #16
 800cd24:	f7fe fc1c 	bl	800b560 <malloc>
 800cd28:	4602      	mov	r2, r0
 800cd2a:	6260      	str	r0, [r4, #36]	; 0x24
 800cd2c:	b920      	cbnz	r0, 800cd38 <_Balloc+0x20>
 800cd2e:	4b18      	ldr	r3, [pc, #96]	; (800cd90 <_Balloc+0x78>)
 800cd30:	4818      	ldr	r0, [pc, #96]	; (800cd94 <_Balloc+0x7c>)
 800cd32:	2166      	movs	r1, #102	; 0x66
 800cd34:	f000 fb6e 	bl	800d414 <__assert_func>
 800cd38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd3c:	6006      	str	r6, [r0, #0]
 800cd3e:	60c6      	str	r6, [r0, #12]
 800cd40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cd42:	68f3      	ldr	r3, [r6, #12]
 800cd44:	b183      	cbz	r3, 800cd68 <_Balloc+0x50>
 800cd46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd48:	68db      	ldr	r3, [r3, #12]
 800cd4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cd4e:	b9b8      	cbnz	r0, 800cd80 <_Balloc+0x68>
 800cd50:	2101      	movs	r1, #1
 800cd52:	fa01 f605 	lsl.w	r6, r1, r5
 800cd56:	1d72      	adds	r2, r6, #5
 800cd58:	0092      	lsls	r2, r2, #2
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	f7fe fc1e 	bl	800b59c <_calloc_r>
 800cd60:	b160      	cbz	r0, 800cd7c <_Balloc+0x64>
 800cd62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cd66:	e00e      	b.n	800cd86 <_Balloc+0x6e>
 800cd68:	2221      	movs	r2, #33	; 0x21
 800cd6a:	2104      	movs	r1, #4
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	f7fe fc15 	bl	800b59c <_calloc_r>
 800cd72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd74:	60f0      	str	r0, [r6, #12]
 800cd76:	68db      	ldr	r3, [r3, #12]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d1e4      	bne.n	800cd46 <_Balloc+0x2e>
 800cd7c:	2000      	movs	r0, #0
 800cd7e:	bd70      	pop	{r4, r5, r6, pc}
 800cd80:	6802      	ldr	r2, [r0, #0]
 800cd82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cd86:	2300      	movs	r3, #0
 800cd88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cd8c:	e7f7      	b.n	800cd7e <_Balloc+0x66>
 800cd8e:	bf00      	nop
 800cd90:	0800e06d 	.word	0x0800e06d
 800cd94:	0800e0f4 	.word	0x0800e0f4

0800cd98 <_Bfree>:
 800cd98:	b570      	push	{r4, r5, r6, lr}
 800cd9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cd9c:	4605      	mov	r5, r0
 800cd9e:	460c      	mov	r4, r1
 800cda0:	b976      	cbnz	r6, 800cdc0 <_Bfree+0x28>
 800cda2:	2010      	movs	r0, #16
 800cda4:	f7fe fbdc 	bl	800b560 <malloc>
 800cda8:	4602      	mov	r2, r0
 800cdaa:	6268      	str	r0, [r5, #36]	; 0x24
 800cdac:	b920      	cbnz	r0, 800cdb8 <_Bfree+0x20>
 800cdae:	4b09      	ldr	r3, [pc, #36]	; (800cdd4 <_Bfree+0x3c>)
 800cdb0:	4809      	ldr	r0, [pc, #36]	; (800cdd8 <_Bfree+0x40>)
 800cdb2:	218a      	movs	r1, #138	; 0x8a
 800cdb4:	f000 fb2e 	bl	800d414 <__assert_func>
 800cdb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cdbc:	6006      	str	r6, [r0, #0]
 800cdbe:	60c6      	str	r6, [r0, #12]
 800cdc0:	b13c      	cbz	r4, 800cdd2 <_Bfree+0x3a>
 800cdc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cdc4:	6862      	ldr	r2, [r4, #4]
 800cdc6:	68db      	ldr	r3, [r3, #12]
 800cdc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cdcc:	6021      	str	r1, [r4, #0]
 800cdce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cdd2:	bd70      	pop	{r4, r5, r6, pc}
 800cdd4:	0800e06d 	.word	0x0800e06d
 800cdd8:	0800e0f4 	.word	0x0800e0f4

0800cddc <__multadd>:
 800cddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cde0:	690e      	ldr	r6, [r1, #16]
 800cde2:	4607      	mov	r7, r0
 800cde4:	4698      	mov	r8, r3
 800cde6:	460c      	mov	r4, r1
 800cde8:	f101 0014 	add.w	r0, r1, #20
 800cdec:	2300      	movs	r3, #0
 800cdee:	6805      	ldr	r5, [r0, #0]
 800cdf0:	b2a9      	uxth	r1, r5
 800cdf2:	fb02 8101 	mla	r1, r2, r1, r8
 800cdf6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800cdfa:	0c2d      	lsrs	r5, r5, #16
 800cdfc:	fb02 c505 	mla	r5, r2, r5, ip
 800ce00:	b289      	uxth	r1, r1
 800ce02:	3301      	adds	r3, #1
 800ce04:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ce08:	429e      	cmp	r6, r3
 800ce0a:	f840 1b04 	str.w	r1, [r0], #4
 800ce0e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ce12:	dcec      	bgt.n	800cdee <__multadd+0x12>
 800ce14:	f1b8 0f00 	cmp.w	r8, #0
 800ce18:	d022      	beq.n	800ce60 <__multadd+0x84>
 800ce1a:	68a3      	ldr	r3, [r4, #8]
 800ce1c:	42b3      	cmp	r3, r6
 800ce1e:	dc19      	bgt.n	800ce54 <__multadd+0x78>
 800ce20:	6861      	ldr	r1, [r4, #4]
 800ce22:	4638      	mov	r0, r7
 800ce24:	3101      	adds	r1, #1
 800ce26:	f7ff ff77 	bl	800cd18 <_Balloc>
 800ce2a:	4605      	mov	r5, r0
 800ce2c:	b928      	cbnz	r0, 800ce3a <__multadd+0x5e>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	4b0d      	ldr	r3, [pc, #52]	; (800ce68 <__multadd+0x8c>)
 800ce32:	480e      	ldr	r0, [pc, #56]	; (800ce6c <__multadd+0x90>)
 800ce34:	21b5      	movs	r1, #181	; 0xb5
 800ce36:	f000 faed 	bl	800d414 <__assert_func>
 800ce3a:	6922      	ldr	r2, [r4, #16]
 800ce3c:	3202      	adds	r2, #2
 800ce3e:	f104 010c 	add.w	r1, r4, #12
 800ce42:	0092      	lsls	r2, r2, #2
 800ce44:	300c      	adds	r0, #12
 800ce46:	f7fe fb93 	bl	800b570 <memcpy>
 800ce4a:	4621      	mov	r1, r4
 800ce4c:	4638      	mov	r0, r7
 800ce4e:	f7ff ffa3 	bl	800cd98 <_Bfree>
 800ce52:	462c      	mov	r4, r5
 800ce54:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ce58:	3601      	adds	r6, #1
 800ce5a:	f8c3 8014 	str.w	r8, [r3, #20]
 800ce5e:	6126      	str	r6, [r4, #16]
 800ce60:	4620      	mov	r0, r4
 800ce62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce66:	bf00      	nop
 800ce68:	0800e0e3 	.word	0x0800e0e3
 800ce6c:	0800e0f4 	.word	0x0800e0f4

0800ce70 <__hi0bits>:
 800ce70:	0c03      	lsrs	r3, r0, #16
 800ce72:	041b      	lsls	r3, r3, #16
 800ce74:	b9d3      	cbnz	r3, 800ceac <__hi0bits+0x3c>
 800ce76:	0400      	lsls	r0, r0, #16
 800ce78:	2310      	movs	r3, #16
 800ce7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ce7e:	bf04      	itt	eq
 800ce80:	0200      	lsleq	r0, r0, #8
 800ce82:	3308      	addeq	r3, #8
 800ce84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ce88:	bf04      	itt	eq
 800ce8a:	0100      	lsleq	r0, r0, #4
 800ce8c:	3304      	addeq	r3, #4
 800ce8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ce92:	bf04      	itt	eq
 800ce94:	0080      	lsleq	r0, r0, #2
 800ce96:	3302      	addeq	r3, #2
 800ce98:	2800      	cmp	r0, #0
 800ce9a:	db05      	blt.n	800cea8 <__hi0bits+0x38>
 800ce9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cea0:	f103 0301 	add.w	r3, r3, #1
 800cea4:	bf08      	it	eq
 800cea6:	2320      	moveq	r3, #32
 800cea8:	4618      	mov	r0, r3
 800ceaa:	4770      	bx	lr
 800ceac:	2300      	movs	r3, #0
 800ceae:	e7e4      	b.n	800ce7a <__hi0bits+0xa>

0800ceb0 <__lo0bits>:
 800ceb0:	6803      	ldr	r3, [r0, #0]
 800ceb2:	f013 0207 	ands.w	r2, r3, #7
 800ceb6:	4601      	mov	r1, r0
 800ceb8:	d00b      	beq.n	800ced2 <__lo0bits+0x22>
 800ceba:	07da      	lsls	r2, r3, #31
 800cebc:	d424      	bmi.n	800cf08 <__lo0bits+0x58>
 800cebe:	0798      	lsls	r0, r3, #30
 800cec0:	bf49      	itett	mi
 800cec2:	085b      	lsrmi	r3, r3, #1
 800cec4:	089b      	lsrpl	r3, r3, #2
 800cec6:	2001      	movmi	r0, #1
 800cec8:	600b      	strmi	r3, [r1, #0]
 800ceca:	bf5c      	itt	pl
 800cecc:	600b      	strpl	r3, [r1, #0]
 800cece:	2002      	movpl	r0, #2
 800ced0:	4770      	bx	lr
 800ced2:	b298      	uxth	r0, r3
 800ced4:	b9b0      	cbnz	r0, 800cf04 <__lo0bits+0x54>
 800ced6:	0c1b      	lsrs	r3, r3, #16
 800ced8:	2010      	movs	r0, #16
 800ceda:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cede:	bf04      	itt	eq
 800cee0:	0a1b      	lsreq	r3, r3, #8
 800cee2:	3008      	addeq	r0, #8
 800cee4:	071a      	lsls	r2, r3, #28
 800cee6:	bf04      	itt	eq
 800cee8:	091b      	lsreq	r3, r3, #4
 800ceea:	3004      	addeq	r0, #4
 800ceec:	079a      	lsls	r2, r3, #30
 800ceee:	bf04      	itt	eq
 800cef0:	089b      	lsreq	r3, r3, #2
 800cef2:	3002      	addeq	r0, #2
 800cef4:	07da      	lsls	r2, r3, #31
 800cef6:	d403      	bmi.n	800cf00 <__lo0bits+0x50>
 800cef8:	085b      	lsrs	r3, r3, #1
 800cefa:	f100 0001 	add.w	r0, r0, #1
 800cefe:	d005      	beq.n	800cf0c <__lo0bits+0x5c>
 800cf00:	600b      	str	r3, [r1, #0]
 800cf02:	4770      	bx	lr
 800cf04:	4610      	mov	r0, r2
 800cf06:	e7e8      	b.n	800ceda <__lo0bits+0x2a>
 800cf08:	2000      	movs	r0, #0
 800cf0a:	4770      	bx	lr
 800cf0c:	2020      	movs	r0, #32
 800cf0e:	4770      	bx	lr

0800cf10 <__i2b>:
 800cf10:	b510      	push	{r4, lr}
 800cf12:	460c      	mov	r4, r1
 800cf14:	2101      	movs	r1, #1
 800cf16:	f7ff feff 	bl	800cd18 <_Balloc>
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	b928      	cbnz	r0, 800cf2a <__i2b+0x1a>
 800cf1e:	4b05      	ldr	r3, [pc, #20]	; (800cf34 <__i2b+0x24>)
 800cf20:	4805      	ldr	r0, [pc, #20]	; (800cf38 <__i2b+0x28>)
 800cf22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cf26:	f000 fa75 	bl	800d414 <__assert_func>
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	6144      	str	r4, [r0, #20]
 800cf2e:	6103      	str	r3, [r0, #16]
 800cf30:	bd10      	pop	{r4, pc}
 800cf32:	bf00      	nop
 800cf34:	0800e0e3 	.word	0x0800e0e3
 800cf38:	0800e0f4 	.word	0x0800e0f4

0800cf3c <__multiply>:
 800cf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf40:	4614      	mov	r4, r2
 800cf42:	690a      	ldr	r2, [r1, #16]
 800cf44:	6923      	ldr	r3, [r4, #16]
 800cf46:	429a      	cmp	r2, r3
 800cf48:	bfb8      	it	lt
 800cf4a:	460b      	movlt	r3, r1
 800cf4c:	460d      	mov	r5, r1
 800cf4e:	bfbc      	itt	lt
 800cf50:	4625      	movlt	r5, r4
 800cf52:	461c      	movlt	r4, r3
 800cf54:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800cf58:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cf5c:	68ab      	ldr	r3, [r5, #8]
 800cf5e:	6869      	ldr	r1, [r5, #4]
 800cf60:	eb0a 0709 	add.w	r7, sl, r9
 800cf64:	42bb      	cmp	r3, r7
 800cf66:	b085      	sub	sp, #20
 800cf68:	bfb8      	it	lt
 800cf6a:	3101      	addlt	r1, #1
 800cf6c:	f7ff fed4 	bl	800cd18 <_Balloc>
 800cf70:	b930      	cbnz	r0, 800cf80 <__multiply+0x44>
 800cf72:	4602      	mov	r2, r0
 800cf74:	4b42      	ldr	r3, [pc, #264]	; (800d080 <__multiply+0x144>)
 800cf76:	4843      	ldr	r0, [pc, #268]	; (800d084 <__multiply+0x148>)
 800cf78:	f240 115d 	movw	r1, #349	; 0x15d
 800cf7c:	f000 fa4a 	bl	800d414 <__assert_func>
 800cf80:	f100 0614 	add.w	r6, r0, #20
 800cf84:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800cf88:	4633      	mov	r3, r6
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	4543      	cmp	r3, r8
 800cf8e:	d31e      	bcc.n	800cfce <__multiply+0x92>
 800cf90:	f105 0c14 	add.w	ip, r5, #20
 800cf94:	f104 0314 	add.w	r3, r4, #20
 800cf98:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800cf9c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800cfa0:	9202      	str	r2, [sp, #8]
 800cfa2:	ebac 0205 	sub.w	r2, ip, r5
 800cfa6:	3a15      	subs	r2, #21
 800cfa8:	f022 0203 	bic.w	r2, r2, #3
 800cfac:	3204      	adds	r2, #4
 800cfae:	f105 0115 	add.w	r1, r5, #21
 800cfb2:	458c      	cmp	ip, r1
 800cfb4:	bf38      	it	cc
 800cfb6:	2204      	movcc	r2, #4
 800cfb8:	9201      	str	r2, [sp, #4]
 800cfba:	9a02      	ldr	r2, [sp, #8]
 800cfbc:	9303      	str	r3, [sp, #12]
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d808      	bhi.n	800cfd4 <__multiply+0x98>
 800cfc2:	2f00      	cmp	r7, #0
 800cfc4:	dc55      	bgt.n	800d072 <__multiply+0x136>
 800cfc6:	6107      	str	r7, [r0, #16]
 800cfc8:	b005      	add	sp, #20
 800cfca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfce:	f843 2b04 	str.w	r2, [r3], #4
 800cfd2:	e7db      	b.n	800cf8c <__multiply+0x50>
 800cfd4:	f8b3 a000 	ldrh.w	sl, [r3]
 800cfd8:	f1ba 0f00 	cmp.w	sl, #0
 800cfdc:	d020      	beq.n	800d020 <__multiply+0xe4>
 800cfde:	f105 0e14 	add.w	lr, r5, #20
 800cfe2:	46b1      	mov	r9, r6
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800cfea:	f8d9 b000 	ldr.w	fp, [r9]
 800cfee:	b2a1      	uxth	r1, r4
 800cff0:	fa1f fb8b 	uxth.w	fp, fp
 800cff4:	fb0a b101 	mla	r1, sl, r1, fp
 800cff8:	4411      	add	r1, r2
 800cffa:	f8d9 2000 	ldr.w	r2, [r9]
 800cffe:	0c24      	lsrs	r4, r4, #16
 800d000:	0c12      	lsrs	r2, r2, #16
 800d002:	fb0a 2404 	mla	r4, sl, r4, r2
 800d006:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d00a:	b289      	uxth	r1, r1
 800d00c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d010:	45f4      	cmp	ip, lr
 800d012:	f849 1b04 	str.w	r1, [r9], #4
 800d016:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d01a:	d8e4      	bhi.n	800cfe6 <__multiply+0xaa>
 800d01c:	9901      	ldr	r1, [sp, #4]
 800d01e:	5072      	str	r2, [r6, r1]
 800d020:	9a03      	ldr	r2, [sp, #12]
 800d022:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d026:	3304      	adds	r3, #4
 800d028:	f1b9 0f00 	cmp.w	r9, #0
 800d02c:	d01f      	beq.n	800d06e <__multiply+0x132>
 800d02e:	6834      	ldr	r4, [r6, #0]
 800d030:	f105 0114 	add.w	r1, r5, #20
 800d034:	46b6      	mov	lr, r6
 800d036:	f04f 0a00 	mov.w	sl, #0
 800d03a:	880a      	ldrh	r2, [r1, #0]
 800d03c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d040:	fb09 b202 	mla	r2, r9, r2, fp
 800d044:	4492      	add	sl, r2
 800d046:	b2a4      	uxth	r4, r4
 800d048:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d04c:	f84e 4b04 	str.w	r4, [lr], #4
 800d050:	f851 4b04 	ldr.w	r4, [r1], #4
 800d054:	f8be 2000 	ldrh.w	r2, [lr]
 800d058:	0c24      	lsrs	r4, r4, #16
 800d05a:	fb09 2404 	mla	r4, r9, r4, r2
 800d05e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d062:	458c      	cmp	ip, r1
 800d064:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d068:	d8e7      	bhi.n	800d03a <__multiply+0xfe>
 800d06a:	9a01      	ldr	r2, [sp, #4]
 800d06c:	50b4      	str	r4, [r6, r2]
 800d06e:	3604      	adds	r6, #4
 800d070:	e7a3      	b.n	800cfba <__multiply+0x7e>
 800d072:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d076:	2b00      	cmp	r3, #0
 800d078:	d1a5      	bne.n	800cfc6 <__multiply+0x8a>
 800d07a:	3f01      	subs	r7, #1
 800d07c:	e7a1      	b.n	800cfc2 <__multiply+0x86>
 800d07e:	bf00      	nop
 800d080:	0800e0e3 	.word	0x0800e0e3
 800d084:	0800e0f4 	.word	0x0800e0f4

0800d088 <__pow5mult>:
 800d088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d08c:	4615      	mov	r5, r2
 800d08e:	f012 0203 	ands.w	r2, r2, #3
 800d092:	4606      	mov	r6, r0
 800d094:	460f      	mov	r7, r1
 800d096:	d007      	beq.n	800d0a8 <__pow5mult+0x20>
 800d098:	4c25      	ldr	r4, [pc, #148]	; (800d130 <__pow5mult+0xa8>)
 800d09a:	3a01      	subs	r2, #1
 800d09c:	2300      	movs	r3, #0
 800d09e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d0a2:	f7ff fe9b 	bl	800cddc <__multadd>
 800d0a6:	4607      	mov	r7, r0
 800d0a8:	10ad      	asrs	r5, r5, #2
 800d0aa:	d03d      	beq.n	800d128 <__pow5mult+0xa0>
 800d0ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d0ae:	b97c      	cbnz	r4, 800d0d0 <__pow5mult+0x48>
 800d0b0:	2010      	movs	r0, #16
 800d0b2:	f7fe fa55 	bl	800b560 <malloc>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	6270      	str	r0, [r6, #36]	; 0x24
 800d0ba:	b928      	cbnz	r0, 800d0c8 <__pow5mult+0x40>
 800d0bc:	4b1d      	ldr	r3, [pc, #116]	; (800d134 <__pow5mult+0xac>)
 800d0be:	481e      	ldr	r0, [pc, #120]	; (800d138 <__pow5mult+0xb0>)
 800d0c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d0c4:	f000 f9a6 	bl	800d414 <__assert_func>
 800d0c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d0cc:	6004      	str	r4, [r0, #0]
 800d0ce:	60c4      	str	r4, [r0, #12]
 800d0d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d0d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d0d8:	b94c      	cbnz	r4, 800d0ee <__pow5mult+0x66>
 800d0da:	f240 2171 	movw	r1, #625	; 0x271
 800d0de:	4630      	mov	r0, r6
 800d0e0:	f7ff ff16 	bl	800cf10 <__i2b>
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	6003      	str	r3, [r0, #0]
 800d0ee:	f04f 0900 	mov.w	r9, #0
 800d0f2:	07eb      	lsls	r3, r5, #31
 800d0f4:	d50a      	bpl.n	800d10c <__pow5mult+0x84>
 800d0f6:	4639      	mov	r1, r7
 800d0f8:	4622      	mov	r2, r4
 800d0fa:	4630      	mov	r0, r6
 800d0fc:	f7ff ff1e 	bl	800cf3c <__multiply>
 800d100:	4639      	mov	r1, r7
 800d102:	4680      	mov	r8, r0
 800d104:	4630      	mov	r0, r6
 800d106:	f7ff fe47 	bl	800cd98 <_Bfree>
 800d10a:	4647      	mov	r7, r8
 800d10c:	106d      	asrs	r5, r5, #1
 800d10e:	d00b      	beq.n	800d128 <__pow5mult+0xa0>
 800d110:	6820      	ldr	r0, [r4, #0]
 800d112:	b938      	cbnz	r0, 800d124 <__pow5mult+0x9c>
 800d114:	4622      	mov	r2, r4
 800d116:	4621      	mov	r1, r4
 800d118:	4630      	mov	r0, r6
 800d11a:	f7ff ff0f 	bl	800cf3c <__multiply>
 800d11e:	6020      	str	r0, [r4, #0]
 800d120:	f8c0 9000 	str.w	r9, [r0]
 800d124:	4604      	mov	r4, r0
 800d126:	e7e4      	b.n	800d0f2 <__pow5mult+0x6a>
 800d128:	4638      	mov	r0, r7
 800d12a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d12e:	bf00      	nop
 800d130:	0800e248 	.word	0x0800e248
 800d134:	0800e06d 	.word	0x0800e06d
 800d138:	0800e0f4 	.word	0x0800e0f4

0800d13c <__lshift>:
 800d13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d140:	460c      	mov	r4, r1
 800d142:	6849      	ldr	r1, [r1, #4]
 800d144:	6923      	ldr	r3, [r4, #16]
 800d146:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d14a:	68a3      	ldr	r3, [r4, #8]
 800d14c:	4607      	mov	r7, r0
 800d14e:	4691      	mov	r9, r2
 800d150:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d154:	f108 0601 	add.w	r6, r8, #1
 800d158:	42b3      	cmp	r3, r6
 800d15a:	db0b      	blt.n	800d174 <__lshift+0x38>
 800d15c:	4638      	mov	r0, r7
 800d15e:	f7ff fddb 	bl	800cd18 <_Balloc>
 800d162:	4605      	mov	r5, r0
 800d164:	b948      	cbnz	r0, 800d17a <__lshift+0x3e>
 800d166:	4602      	mov	r2, r0
 800d168:	4b28      	ldr	r3, [pc, #160]	; (800d20c <__lshift+0xd0>)
 800d16a:	4829      	ldr	r0, [pc, #164]	; (800d210 <__lshift+0xd4>)
 800d16c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d170:	f000 f950 	bl	800d414 <__assert_func>
 800d174:	3101      	adds	r1, #1
 800d176:	005b      	lsls	r3, r3, #1
 800d178:	e7ee      	b.n	800d158 <__lshift+0x1c>
 800d17a:	2300      	movs	r3, #0
 800d17c:	f100 0114 	add.w	r1, r0, #20
 800d180:	f100 0210 	add.w	r2, r0, #16
 800d184:	4618      	mov	r0, r3
 800d186:	4553      	cmp	r3, sl
 800d188:	db33      	blt.n	800d1f2 <__lshift+0xb6>
 800d18a:	6920      	ldr	r0, [r4, #16]
 800d18c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d190:	f104 0314 	add.w	r3, r4, #20
 800d194:	f019 091f 	ands.w	r9, r9, #31
 800d198:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d19c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d1a0:	d02b      	beq.n	800d1fa <__lshift+0xbe>
 800d1a2:	f1c9 0e20 	rsb	lr, r9, #32
 800d1a6:	468a      	mov	sl, r1
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	6818      	ldr	r0, [r3, #0]
 800d1ac:	fa00 f009 	lsl.w	r0, r0, r9
 800d1b0:	4302      	orrs	r2, r0
 800d1b2:	f84a 2b04 	str.w	r2, [sl], #4
 800d1b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1ba:	459c      	cmp	ip, r3
 800d1bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800d1c0:	d8f3      	bhi.n	800d1aa <__lshift+0x6e>
 800d1c2:	ebac 0304 	sub.w	r3, ip, r4
 800d1c6:	3b15      	subs	r3, #21
 800d1c8:	f023 0303 	bic.w	r3, r3, #3
 800d1cc:	3304      	adds	r3, #4
 800d1ce:	f104 0015 	add.w	r0, r4, #21
 800d1d2:	4584      	cmp	ip, r0
 800d1d4:	bf38      	it	cc
 800d1d6:	2304      	movcc	r3, #4
 800d1d8:	50ca      	str	r2, [r1, r3]
 800d1da:	b10a      	cbz	r2, 800d1e0 <__lshift+0xa4>
 800d1dc:	f108 0602 	add.w	r6, r8, #2
 800d1e0:	3e01      	subs	r6, #1
 800d1e2:	4638      	mov	r0, r7
 800d1e4:	612e      	str	r6, [r5, #16]
 800d1e6:	4621      	mov	r1, r4
 800d1e8:	f7ff fdd6 	bl	800cd98 <_Bfree>
 800d1ec:	4628      	mov	r0, r5
 800d1ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d1f6:	3301      	adds	r3, #1
 800d1f8:	e7c5      	b.n	800d186 <__lshift+0x4a>
 800d1fa:	3904      	subs	r1, #4
 800d1fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d200:	f841 2f04 	str.w	r2, [r1, #4]!
 800d204:	459c      	cmp	ip, r3
 800d206:	d8f9      	bhi.n	800d1fc <__lshift+0xc0>
 800d208:	e7ea      	b.n	800d1e0 <__lshift+0xa4>
 800d20a:	bf00      	nop
 800d20c:	0800e0e3 	.word	0x0800e0e3
 800d210:	0800e0f4 	.word	0x0800e0f4

0800d214 <__mcmp>:
 800d214:	b530      	push	{r4, r5, lr}
 800d216:	6902      	ldr	r2, [r0, #16]
 800d218:	690c      	ldr	r4, [r1, #16]
 800d21a:	1b12      	subs	r2, r2, r4
 800d21c:	d10e      	bne.n	800d23c <__mcmp+0x28>
 800d21e:	f100 0314 	add.w	r3, r0, #20
 800d222:	3114      	adds	r1, #20
 800d224:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d228:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d22c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d230:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d234:	42a5      	cmp	r5, r4
 800d236:	d003      	beq.n	800d240 <__mcmp+0x2c>
 800d238:	d305      	bcc.n	800d246 <__mcmp+0x32>
 800d23a:	2201      	movs	r2, #1
 800d23c:	4610      	mov	r0, r2
 800d23e:	bd30      	pop	{r4, r5, pc}
 800d240:	4283      	cmp	r3, r0
 800d242:	d3f3      	bcc.n	800d22c <__mcmp+0x18>
 800d244:	e7fa      	b.n	800d23c <__mcmp+0x28>
 800d246:	f04f 32ff 	mov.w	r2, #4294967295
 800d24a:	e7f7      	b.n	800d23c <__mcmp+0x28>

0800d24c <__mdiff>:
 800d24c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d250:	460c      	mov	r4, r1
 800d252:	4606      	mov	r6, r0
 800d254:	4611      	mov	r1, r2
 800d256:	4620      	mov	r0, r4
 800d258:	4617      	mov	r7, r2
 800d25a:	f7ff ffdb 	bl	800d214 <__mcmp>
 800d25e:	1e05      	subs	r5, r0, #0
 800d260:	d110      	bne.n	800d284 <__mdiff+0x38>
 800d262:	4629      	mov	r1, r5
 800d264:	4630      	mov	r0, r6
 800d266:	f7ff fd57 	bl	800cd18 <_Balloc>
 800d26a:	b930      	cbnz	r0, 800d27a <__mdiff+0x2e>
 800d26c:	4b39      	ldr	r3, [pc, #228]	; (800d354 <__mdiff+0x108>)
 800d26e:	4602      	mov	r2, r0
 800d270:	f240 2132 	movw	r1, #562	; 0x232
 800d274:	4838      	ldr	r0, [pc, #224]	; (800d358 <__mdiff+0x10c>)
 800d276:	f000 f8cd 	bl	800d414 <__assert_func>
 800d27a:	2301      	movs	r3, #1
 800d27c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d280:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d284:	bfa4      	itt	ge
 800d286:	463b      	movge	r3, r7
 800d288:	4627      	movge	r7, r4
 800d28a:	4630      	mov	r0, r6
 800d28c:	6879      	ldr	r1, [r7, #4]
 800d28e:	bfa6      	itte	ge
 800d290:	461c      	movge	r4, r3
 800d292:	2500      	movge	r5, #0
 800d294:	2501      	movlt	r5, #1
 800d296:	f7ff fd3f 	bl	800cd18 <_Balloc>
 800d29a:	b920      	cbnz	r0, 800d2a6 <__mdiff+0x5a>
 800d29c:	4b2d      	ldr	r3, [pc, #180]	; (800d354 <__mdiff+0x108>)
 800d29e:	4602      	mov	r2, r0
 800d2a0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d2a4:	e7e6      	b.n	800d274 <__mdiff+0x28>
 800d2a6:	693e      	ldr	r6, [r7, #16]
 800d2a8:	60c5      	str	r5, [r0, #12]
 800d2aa:	6925      	ldr	r5, [r4, #16]
 800d2ac:	f107 0114 	add.w	r1, r7, #20
 800d2b0:	f104 0914 	add.w	r9, r4, #20
 800d2b4:	f100 0e14 	add.w	lr, r0, #20
 800d2b8:	f107 0210 	add.w	r2, r7, #16
 800d2bc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d2c0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d2c4:	46f2      	mov	sl, lr
 800d2c6:	2700      	movs	r7, #0
 800d2c8:	f859 3b04 	ldr.w	r3, [r9], #4
 800d2cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d2d0:	fa1f f883 	uxth.w	r8, r3
 800d2d4:	fa17 f78b 	uxtah	r7, r7, fp
 800d2d8:	0c1b      	lsrs	r3, r3, #16
 800d2da:	eba7 0808 	sub.w	r8, r7, r8
 800d2de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d2e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d2e6:	fa1f f888 	uxth.w	r8, r8
 800d2ea:	141f      	asrs	r7, r3, #16
 800d2ec:	454d      	cmp	r5, r9
 800d2ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d2f2:	f84a 3b04 	str.w	r3, [sl], #4
 800d2f6:	d8e7      	bhi.n	800d2c8 <__mdiff+0x7c>
 800d2f8:	1b2b      	subs	r3, r5, r4
 800d2fa:	3b15      	subs	r3, #21
 800d2fc:	f023 0303 	bic.w	r3, r3, #3
 800d300:	3304      	adds	r3, #4
 800d302:	3415      	adds	r4, #21
 800d304:	42a5      	cmp	r5, r4
 800d306:	bf38      	it	cc
 800d308:	2304      	movcc	r3, #4
 800d30a:	4419      	add	r1, r3
 800d30c:	4473      	add	r3, lr
 800d30e:	469e      	mov	lr, r3
 800d310:	460d      	mov	r5, r1
 800d312:	4565      	cmp	r5, ip
 800d314:	d30e      	bcc.n	800d334 <__mdiff+0xe8>
 800d316:	f10c 0203 	add.w	r2, ip, #3
 800d31a:	1a52      	subs	r2, r2, r1
 800d31c:	f022 0203 	bic.w	r2, r2, #3
 800d320:	3903      	subs	r1, #3
 800d322:	458c      	cmp	ip, r1
 800d324:	bf38      	it	cc
 800d326:	2200      	movcc	r2, #0
 800d328:	441a      	add	r2, r3
 800d32a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d32e:	b17b      	cbz	r3, 800d350 <__mdiff+0x104>
 800d330:	6106      	str	r6, [r0, #16]
 800d332:	e7a5      	b.n	800d280 <__mdiff+0x34>
 800d334:	f855 8b04 	ldr.w	r8, [r5], #4
 800d338:	fa17 f488 	uxtah	r4, r7, r8
 800d33c:	1422      	asrs	r2, r4, #16
 800d33e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d342:	b2a4      	uxth	r4, r4
 800d344:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d348:	f84e 4b04 	str.w	r4, [lr], #4
 800d34c:	1417      	asrs	r7, r2, #16
 800d34e:	e7e0      	b.n	800d312 <__mdiff+0xc6>
 800d350:	3e01      	subs	r6, #1
 800d352:	e7ea      	b.n	800d32a <__mdiff+0xde>
 800d354:	0800e0e3 	.word	0x0800e0e3
 800d358:	0800e0f4 	.word	0x0800e0f4

0800d35c <__d2b>:
 800d35c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d360:	4689      	mov	r9, r1
 800d362:	2101      	movs	r1, #1
 800d364:	ec57 6b10 	vmov	r6, r7, d0
 800d368:	4690      	mov	r8, r2
 800d36a:	f7ff fcd5 	bl	800cd18 <_Balloc>
 800d36e:	4604      	mov	r4, r0
 800d370:	b930      	cbnz	r0, 800d380 <__d2b+0x24>
 800d372:	4602      	mov	r2, r0
 800d374:	4b25      	ldr	r3, [pc, #148]	; (800d40c <__d2b+0xb0>)
 800d376:	4826      	ldr	r0, [pc, #152]	; (800d410 <__d2b+0xb4>)
 800d378:	f240 310a 	movw	r1, #778	; 0x30a
 800d37c:	f000 f84a 	bl	800d414 <__assert_func>
 800d380:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d384:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d388:	bb35      	cbnz	r5, 800d3d8 <__d2b+0x7c>
 800d38a:	2e00      	cmp	r6, #0
 800d38c:	9301      	str	r3, [sp, #4]
 800d38e:	d028      	beq.n	800d3e2 <__d2b+0x86>
 800d390:	4668      	mov	r0, sp
 800d392:	9600      	str	r6, [sp, #0]
 800d394:	f7ff fd8c 	bl	800ceb0 <__lo0bits>
 800d398:	9900      	ldr	r1, [sp, #0]
 800d39a:	b300      	cbz	r0, 800d3de <__d2b+0x82>
 800d39c:	9a01      	ldr	r2, [sp, #4]
 800d39e:	f1c0 0320 	rsb	r3, r0, #32
 800d3a2:	fa02 f303 	lsl.w	r3, r2, r3
 800d3a6:	430b      	orrs	r3, r1
 800d3a8:	40c2      	lsrs	r2, r0
 800d3aa:	6163      	str	r3, [r4, #20]
 800d3ac:	9201      	str	r2, [sp, #4]
 800d3ae:	9b01      	ldr	r3, [sp, #4]
 800d3b0:	61a3      	str	r3, [r4, #24]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	bf14      	ite	ne
 800d3b6:	2202      	movne	r2, #2
 800d3b8:	2201      	moveq	r2, #1
 800d3ba:	6122      	str	r2, [r4, #16]
 800d3bc:	b1d5      	cbz	r5, 800d3f4 <__d2b+0x98>
 800d3be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d3c2:	4405      	add	r5, r0
 800d3c4:	f8c9 5000 	str.w	r5, [r9]
 800d3c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d3cc:	f8c8 0000 	str.w	r0, [r8]
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	b003      	add	sp, #12
 800d3d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d3dc:	e7d5      	b.n	800d38a <__d2b+0x2e>
 800d3de:	6161      	str	r1, [r4, #20]
 800d3e0:	e7e5      	b.n	800d3ae <__d2b+0x52>
 800d3e2:	a801      	add	r0, sp, #4
 800d3e4:	f7ff fd64 	bl	800ceb0 <__lo0bits>
 800d3e8:	9b01      	ldr	r3, [sp, #4]
 800d3ea:	6163      	str	r3, [r4, #20]
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	6122      	str	r2, [r4, #16]
 800d3f0:	3020      	adds	r0, #32
 800d3f2:	e7e3      	b.n	800d3bc <__d2b+0x60>
 800d3f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d3f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d3fc:	f8c9 0000 	str.w	r0, [r9]
 800d400:	6918      	ldr	r0, [r3, #16]
 800d402:	f7ff fd35 	bl	800ce70 <__hi0bits>
 800d406:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d40a:	e7df      	b.n	800d3cc <__d2b+0x70>
 800d40c:	0800e0e3 	.word	0x0800e0e3
 800d410:	0800e0f4 	.word	0x0800e0f4

0800d414 <__assert_func>:
 800d414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d416:	4614      	mov	r4, r2
 800d418:	461a      	mov	r2, r3
 800d41a:	4b09      	ldr	r3, [pc, #36]	; (800d440 <__assert_func+0x2c>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	4605      	mov	r5, r0
 800d420:	68d8      	ldr	r0, [r3, #12]
 800d422:	b14c      	cbz	r4, 800d438 <__assert_func+0x24>
 800d424:	4b07      	ldr	r3, [pc, #28]	; (800d444 <__assert_func+0x30>)
 800d426:	9100      	str	r1, [sp, #0]
 800d428:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d42c:	4906      	ldr	r1, [pc, #24]	; (800d448 <__assert_func+0x34>)
 800d42e:	462b      	mov	r3, r5
 800d430:	f000 f80e 	bl	800d450 <fiprintf>
 800d434:	f000 fa5a 	bl	800d8ec <abort>
 800d438:	4b04      	ldr	r3, [pc, #16]	; (800d44c <__assert_func+0x38>)
 800d43a:	461c      	mov	r4, r3
 800d43c:	e7f3      	b.n	800d426 <__assert_func+0x12>
 800d43e:	bf00      	nop
 800d440:	20000144 	.word	0x20000144
 800d444:	0800e254 	.word	0x0800e254
 800d448:	0800e261 	.word	0x0800e261
 800d44c:	0800e28f 	.word	0x0800e28f

0800d450 <fiprintf>:
 800d450:	b40e      	push	{r1, r2, r3}
 800d452:	b503      	push	{r0, r1, lr}
 800d454:	4601      	mov	r1, r0
 800d456:	ab03      	add	r3, sp, #12
 800d458:	4805      	ldr	r0, [pc, #20]	; (800d470 <fiprintf+0x20>)
 800d45a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d45e:	6800      	ldr	r0, [r0, #0]
 800d460:	9301      	str	r3, [sp, #4]
 800d462:	f000 f845 	bl	800d4f0 <_vfiprintf_r>
 800d466:	b002      	add	sp, #8
 800d468:	f85d eb04 	ldr.w	lr, [sp], #4
 800d46c:	b003      	add	sp, #12
 800d46e:	4770      	bx	lr
 800d470:	20000144 	.word	0x20000144

0800d474 <__retarget_lock_init_recursive>:
 800d474:	4770      	bx	lr

0800d476 <__retarget_lock_acquire_recursive>:
 800d476:	4770      	bx	lr

0800d478 <__retarget_lock_release_recursive>:
 800d478:	4770      	bx	lr

0800d47a <__ascii_mbtowc>:
 800d47a:	b082      	sub	sp, #8
 800d47c:	b901      	cbnz	r1, 800d480 <__ascii_mbtowc+0x6>
 800d47e:	a901      	add	r1, sp, #4
 800d480:	b142      	cbz	r2, 800d494 <__ascii_mbtowc+0x1a>
 800d482:	b14b      	cbz	r3, 800d498 <__ascii_mbtowc+0x1e>
 800d484:	7813      	ldrb	r3, [r2, #0]
 800d486:	600b      	str	r3, [r1, #0]
 800d488:	7812      	ldrb	r2, [r2, #0]
 800d48a:	1e10      	subs	r0, r2, #0
 800d48c:	bf18      	it	ne
 800d48e:	2001      	movne	r0, #1
 800d490:	b002      	add	sp, #8
 800d492:	4770      	bx	lr
 800d494:	4610      	mov	r0, r2
 800d496:	e7fb      	b.n	800d490 <__ascii_mbtowc+0x16>
 800d498:	f06f 0001 	mvn.w	r0, #1
 800d49c:	e7f8      	b.n	800d490 <__ascii_mbtowc+0x16>

0800d49e <__sfputc_r>:
 800d49e:	6893      	ldr	r3, [r2, #8]
 800d4a0:	3b01      	subs	r3, #1
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	b410      	push	{r4}
 800d4a6:	6093      	str	r3, [r2, #8]
 800d4a8:	da08      	bge.n	800d4bc <__sfputc_r+0x1e>
 800d4aa:	6994      	ldr	r4, [r2, #24]
 800d4ac:	42a3      	cmp	r3, r4
 800d4ae:	db01      	blt.n	800d4b4 <__sfputc_r+0x16>
 800d4b0:	290a      	cmp	r1, #10
 800d4b2:	d103      	bne.n	800d4bc <__sfputc_r+0x1e>
 800d4b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4b8:	f000 b94a 	b.w	800d750 <__swbuf_r>
 800d4bc:	6813      	ldr	r3, [r2, #0]
 800d4be:	1c58      	adds	r0, r3, #1
 800d4c0:	6010      	str	r0, [r2, #0]
 800d4c2:	7019      	strb	r1, [r3, #0]
 800d4c4:	4608      	mov	r0, r1
 800d4c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4ca:	4770      	bx	lr

0800d4cc <__sfputs_r>:
 800d4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ce:	4606      	mov	r6, r0
 800d4d0:	460f      	mov	r7, r1
 800d4d2:	4614      	mov	r4, r2
 800d4d4:	18d5      	adds	r5, r2, r3
 800d4d6:	42ac      	cmp	r4, r5
 800d4d8:	d101      	bne.n	800d4de <__sfputs_r+0x12>
 800d4da:	2000      	movs	r0, #0
 800d4dc:	e007      	b.n	800d4ee <__sfputs_r+0x22>
 800d4de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4e2:	463a      	mov	r2, r7
 800d4e4:	4630      	mov	r0, r6
 800d4e6:	f7ff ffda 	bl	800d49e <__sfputc_r>
 800d4ea:	1c43      	adds	r3, r0, #1
 800d4ec:	d1f3      	bne.n	800d4d6 <__sfputs_r+0xa>
 800d4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d4f0 <_vfiprintf_r>:
 800d4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4f4:	460d      	mov	r5, r1
 800d4f6:	b09d      	sub	sp, #116	; 0x74
 800d4f8:	4614      	mov	r4, r2
 800d4fa:	4698      	mov	r8, r3
 800d4fc:	4606      	mov	r6, r0
 800d4fe:	b118      	cbz	r0, 800d508 <_vfiprintf_r+0x18>
 800d500:	6983      	ldr	r3, [r0, #24]
 800d502:	b90b      	cbnz	r3, 800d508 <_vfiprintf_r+0x18>
 800d504:	f000 fb14 	bl	800db30 <__sinit>
 800d508:	4b89      	ldr	r3, [pc, #548]	; (800d730 <_vfiprintf_r+0x240>)
 800d50a:	429d      	cmp	r5, r3
 800d50c:	d11b      	bne.n	800d546 <_vfiprintf_r+0x56>
 800d50e:	6875      	ldr	r5, [r6, #4]
 800d510:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d512:	07d9      	lsls	r1, r3, #31
 800d514:	d405      	bmi.n	800d522 <_vfiprintf_r+0x32>
 800d516:	89ab      	ldrh	r3, [r5, #12]
 800d518:	059a      	lsls	r2, r3, #22
 800d51a:	d402      	bmi.n	800d522 <_vfiprintf_r+0x32>
 800d51c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d51e:	f7ff ffaa 	bl	800d476 <__retarget_lock_acquire_recursive>
 800d522:	89ab      	ldrh	r3, [r5, #12]
 800d524:	071b      	lsls	r3, r3, #28
 800d526:	d501      	bpl.n	800d52c <_vfiprintf_r+0x3c>
 800d528:	692b      	ldr	r3, [r5, #16]
 800d52a:	b9eb      	cbnz	r3, 800d568 <_vfiprintf_r+0x78>
 800d52c:	4629      	mov	r1, r5
 800d52e:	4630      	mov	r0, r6
 800d530:	f000 f96e 	bl	800d810 <__swsetup_r>
 800d534:	b1c0      	cbz	r0, 800d568 <_vfiprintf_r+0x78>
 800d536:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d538:	07dc      	lsls	r4, r3, #31
 800d53a:	d50e      	bpl.n	800d55a <_vfiprintf_r+0x6a>
 800d53c:	f04f 30ff 	mov.w	r0, #4294967295
 800d540:	b01d      	add	sp, #116	; 0x74
 800d542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d546:	4b7b      	ldr	r3, [pc, #492]	; (800d734 <_vfiprintf_r+0x244>)
 800d548:	429d      	cmp	r5, r3
 800d54a:	d101      	bne.n	800d550 <_vfiprintf_r+0x60>
 800d54c:	68b5      	ldr	r5, [r6, #8]
 800d54e:	e7df      	b.n	800d510 <_vfiprintf_r+0x20>
 800d550:	4b79      	ldr	r3, [pc, #484]	; (800d738 <_vfiprintf_r+0x248>)
 800d552:	429d      	cmp	r5, r3
 800d554:	bf08      	it	eq
 800d556:	68f5      	ldreq	r5, [r6, #12]
 800d558:	e7da      	b.n	800d510 <_vfiprintf_r+0x20>
 800d55a:	89ab      	ldrh	r3, [r5, #12]
 800d55c:	0598      	lsls	r0, r3, #22
 800d55e:	d4ed      	bmi.n	800d53c <_vfiprintf_r+0x4c>
 800d560:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d562:	f7ff ff89 	bl	800d478 <__retarget_lock_release_recursive>
 800d566:	e7e9      	b.n	800d53c <_vfiprintf_r+0x4c>
 800d568:	2300      	movs	r3, #0
 800d56a:	9309      	str	r3, [sp, #36]	; 0x24
 800d56c:	2320      	movs	r3, #32
 800d56e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d572:	f8cd 800c 	str.w	r8, [sp, #12]
 800d576:	2330      	movs	r3, #48	; 0x30
 800d578:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d73c <_vfiprintf_r+0x24c>
 800d57c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d580:	f04f 0901 	mov.w	r9, #1
 800d584:	4623      	mov	r3, r4
 800d586:	469a      	mov	sl, r3
 800d588:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d58c:	b10a      	cbz	r2, 800d592 <_vfiprintf_r+0xa2>
 800d58e:	2a25      	cmp	r2, #37	; 0x25
 800d590:	d1f9      	bne.n	800d586 <_vfiprintf_r+0x96>
 800d592:	ebba 0b04 	subs.w	fp, sl, r4
 800d596:	d00b      	beq.n	800d5b0 <_vfiprintf_r+0xc0>
 800d598:	465b      	mov	r3, fp
 800d59a:	4622      	mov	r2, r4
 800d59c:	4629      	mov	r1, r5
 800d59e:	4630      	mov	r0, r6
 800d5a0:	f7ff ff94 	bl	800d4cc <__sfputs_r>
 800d5a4:	3001      	adds	r0, #1
 800d5a6:	f000 80aa 	beq.w	800d6fe <_vfiprintf_r+0x20e>
 800d5aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5ac:	445a      	add	r2, fp
 800d5ae:	9209      	str	r2, [sp, #36]	; 0x24
 800d5b0:	f89a 3000 	ldrb.w	r3, [sl]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	f000 80a2 	beq.w	800d6fe <_vfiprintf_r+0x20e>
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d5c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5c4:	f10a 0a01 	add.w	sl, sl, #1
 800d5c8:	9304      	str	r3, [sp, #16]
 800d5ca:	9307      	str	r3, [sp, #28]
 800d5cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d5d0:	931a      	str	r3, [sp, #104]	; 0x68
 800d5d2:	4654      	mov	r4, sl
 800d5d4:	2205      	movs	r2, #5
 800d5d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5da:	4858      	ldr	r0, [pc, #352]	; (800d73c <_vfiprintf_r+0x24c>)
 800d5dc:	f7f2 fe00 	bl	80001e0 <memchr>
 800d5e0:	9a04      	ldr	r2, [sp, #16]
 800d5e2:	b9d8      	cbnz	r0, 800d61c <_vfiprintf_r+0x12c>
 800d5e4:	06d1      	lsls	r1, r2, #27
 800d5e6:	bf44      	itt	mi
 800d5e8:	2320      	movmi	r3, #32
 800d5ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5ee:	0713      	lsls	r3, r2, #28
 800d5f0:	bf44      	itt	mi
 800d5f2:	232b      	movmi	r3, #43	; 0x2b
 800d5f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5f8:	f89a 3000 	ldrb.w	r3, [sl]
 800d5fc:	2b2a      	cmp	r3, #42	; 0x2a
 800d5fe:	d015      	beq.n	800d62c <_vfiprintf_r+0x13c>
 800d600:	9a07      	ldr	r2, [sp, #28]
 800d602:	4654      	mov	r4, sl
 800d604:	2000      	movs	r0, #0
 800d606:	f04f 0c0a 	mov.w	ip, #10
 800d60a:	4621      	mov	r1, r4
 800d60c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d610:	3b30      	subs	r3, #48	; 0x30
 800d612:	2b09      	cmp	r3, #9
 800d614:	d94e      	bls.n	800d6b4 <_vfiprintf_r+0x1c4>
 800d616:	b1b0      	cbz	r0, 800d646 <_vfiprintf_r+0x156>
 800d618:	9207      	str	r2, [sp, #28]
 800d61a:	e014      	b.n	800d646 <_vfiprintf_r+0x156>
 800d61c:	eba0 0308 	sub.w	r3, r0, r8
 800d620:	fa09 f303 	lsl.w	r3, r9, r3
 800d624:	4313      	orrs	r3, r2
 800d626:	9304      	str	r3, [sp, #16]
 800d628:	46a2      	mov	sl, r4
 800d62a:	e7d2      	b.n	800d5d2 <_vfiprintf_r+0xe2>
 800d62c:	9b03      	ldr	r3, [sp, #12]
 800d62e:	1d19      	adds	r1, r3, #4
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	9103      	str	r1, [sp, #12]
 800d634:	2b00      	cmp	r3, #0
 800d636:	bfbb      	ittet	lt
 800d638:	425b      	neglt	r3, r3
 800d63a:	f042 0202 	orrlt.w	r2, r2, #2
 800d63e:	9307      	strge	r3, [sp, #28]
 800d640:	9307      	strlt	r3, [sp, #28]
 800d642:	bfb8      	it	lt
 800d644:	9204      	strlt	r2, [sp, #16]
 800d646:	7823      	ldrb	r3, [r4, #0]
 800d648:	2b2e      	cmp	r3, #46	; 0x2e
 800d64a:	d10c      	bne.n	800d666 <_vfiprintf_r+0x176>
 800d64c:	7863      	ldrb	r3, [r4, #1]
 800d64e:	2b2a      	cmp	r3, #42	; 0x2a
 800d650:	d135      	bne.n	800d6be <_vfiprintf_r+0x1ce>
 800d652:	9b03      	ldr	r3, [sp, #12]
 800d654:	1d1a      	adds	r2, r3, #4
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	9203      	str	r2, [sp, #12]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	bfb8      	it	lt
 800d65e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d662:	3402      	adds	r4, #2
 800d664:	9305      	str	r3, [sp, #20]
 800d666:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d74c <_vfiprintf_r+0x25c>
 800d66a:	7821      	ldrb	r1, [r4, #0]
 800d66c:	2203      	movs	r2, #3
 800d66e:	4650      	mov	r0, sl
 800d670:	f7f2 fdb6 	bl	80001e0 <memchr>
 800d674:	b140      	cbz	r0, 800d688 <_vfiprintf_r+0x198>
 800d676:	2340      	movs	r3, #64	; 0x40
 800d678:	eba0 000a 	sub.w	r0, r0, sl
 800d67c:	fa03 f000 	lsl.w	r0, r3, r0
 800d680:	9b04      	ldr	r3, [sp, #16]
 800d682:	4303      	orrs	r3, r0
 800d684:	3401      	adds	r4, #1
 800d686:	9304      	str	r3, [sp, #16]
 800d688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d68c:	482c      	ldr	r0, [pc, #176]	; (800d740 <_vfiprintf_r+0x250>)
 800d68e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d692:	2206      	movs	r2, #6
 800d694:	f7f2 fda4 	bl	80001e0 <memchr>
 800d698:	2800      	cmp	r0, #0
 800d69a:	d03f      	beq.n	800d71c <_vfiprintf_r+0x22c>
 800d69c:	4b29      	ldr	r3, [pc, #164]	; (800d744 <_vfiprintf_r+0x254>)
 800d69e:	bb1b      	cbnz	r3, 800d6e8 <_vfiprintf_r+0x1f8>
 800d6a0:	9b03      	ldr	r3, [sp, #12]
 800d6a2:	3307      	adds	r3, #7
 800d6a4:	f023 0307 	bic.w	r3, r3, #7
 800d6a8:	3308      	adds	r3, #8
 800d6aa:	9303      	str	r3, [sp, #12]
 800d6ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6ae:	443b      	add	r3, r7
 800d6b0:	9309      	str	r3, [sp, #36]	; 0x24
 800d6b2:	e767      	b.n	800d584 <_vfiprintf_r+0x94>
 800d6b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6b8:	460c      	mov	r4, r1
 800d6ba:	2001      	movs	r0, #1
 800d6bc:	e7a5      	b.n	800d60a <_vfiprintf_r+0x11a>
 800d6be:	2300      	movs	r3, #0
 800d6c0:	3401      	adds	r4, #1
 800d6c2:	9305      	str	r3, [sp, #20]
 800d6c4:	4619      	mov	r1, r3
 800d6c6:	f04f 0c0a 	mov.w	ip, #10
 800d6ca:	4620      	mov	r0, r4
 800d6cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6d0:	3a30      	subs	r2, #48	; 0x30
 800d6d2:	2a09      	cmp	r2, #9
 800d6d4:	d903      	bls.n	800d6de <_vfiprintf_r+0x1ee>
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d0c5      	beq.n	800d666 <_vfiprintf_r+0x176>
 800d6da:	9105      	str	r1, [sp, #20]
 800d6dc:	e7c3      	b.n	800d666 <_vfiprintf_r+0x176>
 800d6de:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6e2:	4604      	mov	r4, r0
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	e7f0      	b.n	800d6ca <_vfiprintf_r+0x1da>
 800d6e8:	ab03      	add	r3, sp, #12
 800d6ea:	9300      	str	r3, [sp, #0]
 800d6ec:	462a      	mov	r2, r5
 800d6ee:	4b16      	ldr	r3, [pc, #88]	; (800d748 <_vfiprintf_r+0x258>)
 800d6f0:	a904      	add	r1, sp, #16
 800d6f2:	4630      	mov	r0, r6
 800d6f4:	f7fe f8ac 	bl	800b850 <_printf_float>
 800d6f8:	4607      	mov	r7, r0
 800d6fa:	1c78      	adds	r0, r7, #1
 800d6fc:	d1d6      	bne.n	800d6ac <_vfiprintf_r+0x1bc>
 800d6fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d700:	07d9      	lsls	r1, r3, #31
 800d702:	d405      	bmi.n	800d710 <_vfiprintf_r+0x220>
 800d704:	89ab      	ldrh	r3, [r5, #12]
 800d706:	059a      	lsls	r2, r3, #22
 800d708:	d402      	bmi.n	800d710 <_vfiprintf_r+0x220>
 800d70a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d70c:	f7ff feb4 	bl	800d478 <__retarget_lock_release_recursive>
 800d710:	89ab      	ldrh	r3, [r5, #12]
 800d712:	065b      	lsls	r3, r3, #25
 800d714:	f53f af12 	bmi.w	800d53c <_vfiprintf_r+0x4c>
 800d718:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d71a:	e711      	b.n	800d540 <_vfiprintf_r+0x50>
 800d71c:	ab03      	add	r3, sp, #12
 800d71e:	9300      	str	r3, [sp, #0]
 800d720:	462a      	mov	r2, r5
 800d722:	4b09      	ldr	r3, [pc, #36]	; (800d748 <_vfiprintf_r+0x258>)
 800d724:	a904      	add	r1, sp, #16
 800d726:	4630      	mov	r0, r6
 800d728:	f7fe fb36 	bl	800bd98 <_printf_i>
 800d72c:	e7e4      	b.n	800d6f8 <_vfiprintf_r+0x208>
 800d72e:	bf00      	nop
 800d730:	0800e3cc 	.word	0x0800e3cc
 800d734:	0800e3ec 	.word	0x0800e3ec
 800d738:	0800e3ac 	.word	0x0800e3ac
 800d73c:	0800e29a 	.word	0x0800e29a
 800d740:	0800e2a4 	.word	0x0800e2a4
 800d744:	0800b851 	.word	0x0800b851
 800d748:	0800d4cd 	.word	0x0800d4cd
 800d74c:	0800e2a0 	.word	0x0800e2a0

0800d750 <__swbuf_r>:
 800d750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d752:	460e      	mov	r6, r1
 800d754:	4614      	mov	r4, r2
 800d756:	4605      	mov	r5, r0
 800d758:	b118      	cbz	r0, 800d762 <__swbuf_r+0x12>
 800d75a:	6983      	ldr	r3, [r0, #24]
 800d75c:	b90b      	cbnz	r3, 800d762 <__swbuf_r+0x12>
 800d75e:	f000 f9e7 	bl	800db30 <__sinit>
 800d762:	4b21      	ldr	r3, [pc, #132]	; (800d7e8 <__swbuf_r+0x98>)
 800d764:	429c      	cmp	r4, r3
 800d766:	d12b      	bne.n	800d7c0 <__swbuf_r+0x70>
 800d768:	686c      	ldr	r4, [r5, #4]
 800d76a:	69a3      	ldr	r3, [r4, #24]
 800d76c:	60a3      	str	r3, [r4, #8]
 800d76e:	89a3      	ldrh	r3, [r4, #12]
 800d770:	071a      	lsls	r2, r3, #28
 800d772:	d52f      	bpl.n	800d7d4 <__swbuf_r+0x84>
 800d774:	6923      	ldr	r3, [r4, #16]
 800d776:	b36b      	cbz	r3, 800d7d4 <__swbuf_r+0x84>
 800d778:	6923      	ldr	r3, [r4, #16]
 800d77a:	6820      	ldr	r0, [r4, #0]
 800d77c:	1ac0      	subs	r0, r0, r3
 800d77e:	6963      	ldr	r3, [r4, #20]
 800d780:	b2f6      	uxtb	r6, r6
 800d782:	4283      	cmp	r3, r0
 800d784:	4637      	mov	r7, r6
 800d786:	dc04      	bgt.n	800d792 <__swbuf_r+0x42>
 800d788:	4621      	mov	r1, r4
 800d78a:	4628      	mov	r0, r5
 800d78c:	f000 f93c 	bl	800da08 <_fflush_r>
 800d790:	bb30      	cbnz	r0, 800d7e0 <__swbuf_r+0x90>
 800d792:	68a3      	ldr	r3, [r4, #8]
 800d794:	3b01      	subs	r3, #1
 800d796:	60a3      	str	r3, [r4, #8]
 800d798:	6823      	ldr	r3, [r4, #0]
 800d79a:	1c5a      	adds	r2, r3, #1
 800d79c:	6022      	str	r2, [r4, #0]
 800d79e:	701e      	strb	r6, [r3, #0]
 800d7a0:	6963      	ldr	r3, [r4, #20]
 800d7a2:	3001      	adds	r0, #1
 800d7a4:	4283      	cmp	r3, r0
 800d7a6:	d004      	beq.n	800d7b2 <__swbuf_r+0x62>
 800d7a8:	89a3      	ldrh	r3, [r4, #12]
 800d7aa:	07db      	lsls	r3, r3, #31
 800d7ac:	d506      	bpl.n	800d7bc <__swbuf_r+0x6c>
 800d7ae:	2e0a      	cmp	r6, #10
 800d7b0:	d104      	bne.n	800d7bc <__swbuf_r+0x6c>
 800d7b2:	4621      	mov	r1, r4
 800d7b4:	4628      	mov	r0, r5
 800d7b6:	f000 f927 	bl	800da08 <_fflush_r>
 800d7ba:	b988      	cbnz	r0, 800d7e0 <__swbuf_r+0x90>
 800d7bc:	4638      	mov	r0, r7
 800d7be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7c0:	4b0a      	ldr	r3, [pc, #40]	; (800d7ec <__swbuf_r+0x9c>)
 800d7c2:	429c      	cmp	r4, r3
 800d7c4:	d101      	bne.n	800d7ca <__swbuf_r+0x7a>
 800d7c6:	68ac      	ldr	r4, [r5, #8]
 800d7c8:	e7cf      	b.n	800d76a <__swbuf_r+0x1a>
 800d7ca:	4b09      	ldr	r3, [pc, #36]	; (800d7f0 <__swbuf_r+0xa0>)
 800d7cc:	429c      	cmp	r4, r3
 800d7ce:	bf08      	it	eq
 800d7d0:	68ec      	ldreq	r4, [r5, #12]
 800d7d2:	e7ca      	b.n	800d76a <__swbuf_r+0x1a>
 800d7d4:	4621      	mov	r1, r4
 800d7d6:	4628      	mov	r0, r5
 800d7d8:	f000 f81a 	bl	800d810 <__swsetup_r>
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	d0cb      	beq.n	800d778 <__swbuf_r+0x28>
 800d7e0:	f04f 37ff 	mov.w	r7, #4294967295
 800d7e4:	e7ea      	b.n	800d7bc <__swbuf_r+0x6c>
 800d7e6:	bf00      	nop
 800d7e8:	0800e3cc 	.word	0x0800e3cc
 800d7ec:	0800e3ec 	.word	0x0800e3ec
 800d7f0:	0800e3ac 	.word	0x0800e3ac

0800d7f4 <__ascii_wctomb>:
 800d7f4:	b149      	cbz	r1, 800d80a <__ascii_wctomb+0x16>
 800d7f6:	2aff      	cmp	r2, #255	; 0xff
 800d7f8:	bf85      	ittet	hi
 800d7fa:	238a      	movhi	r3, #138	; 0x8a
 800d7fc:	6003      	strhi	r3, [r0, #0]
 800d7fe:	700a      	strbls	r2, [r1, #0]
 800d800:	f04f 30ff 	movhi.w	r0, #4294967295
 800d804:	bf98      	it	ls
 800d806:	2001      	movls	r0, #1
 800d808:	4770      	bx	lr
 800d80a:	4608      	mov	r0, r1
 800d80c:	4770      	bx	lr
	...

0800d810 <__swsetup_r>:
 800d810:	4b32      	ldr	r3, [pc, #200]	; (800d8dc <__swsetup_r+0xcc>)
 800d812:	b570      	push	{r4, r5, r6, lr}
 800d814:	681d      	ldr	r5, [r3, #0]
 800d816:	4606      	mov	r6, r0
 800d818:	460c      	mov	r4, r1
 800d81a:	b125      	cbz	r5, 800d826 <__swsetup_r+0x16>
 800d81c:	69ab      	ldr	r3, [r5, #24]
 800d81e:	b913      	cbnz	r3, 800d826 <__swsetup_r+0x16>
 800d820:	4628      	mov	r0, r5
 800d822:	f000 f985 	bl	800db30 <__sinit>
 800d826:	4b2e      	ldr	r3, [pc, #184]	; (800d8e0 <__swsetup_r+0xd0>)
 800d828:	429c      	cmp	r4, r3
 800d82a:	d10f      	bne.n	800d84c <__swsetup_r+0x3c>
 800d82c:	686c      	ldr	r4, [r5, #4]
 800d82e:	89a3      	ldrh	r3, [r4, #12]
 800d830:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d834:	0719      	lsls	r1, r3, #28
 800d836:	d42c      	bmi.n	800d892 <__swsetup_r+0x82>
 800d838:	06dd      	lsls	r5, r3, #27
 800d83a:	d411      	bmi.n	800d860 <__swsetup_r+0x50>
 800d83c:	2309      	movs	r3, #9
 800d83e:	6033      	str	r3, [r6, #0]
 800d840:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d844:	81a3      	strh	r3, [r4, #12]
 800d846:	f04f 30ff 	mov.w	r0, #4294967295
 800d84a:	e03e      	b.n	800d8ca <__swsetup_r+0xba>
 800d84c:	4b25      	ldr	r3, [pc, #148]	; (800d8e4 <__swsetup_r+0xd4>)
 800d84e:	429c      	cmp	r4, r3
 800d850:	d101      	bne.n	800d856 <__swsetup_r+0x46>
 800d852:	68ac      	ldr	r4, [r5, #8]
 800d854:	e7eb      	b.n	800d82e <__swsetup_r+0x1e>
 800d856:	4b24      	ldr	r3, [pc, #144]	; (800d8e8 <__swsetup_r+0xd8>)
 800d858:	429c      	cmp	r4, r3
 800d85a:	bf08      	it	eq
 800d85c:	68ec      	ldreq	r4, [r5, #12]
 800d85e:	e7e6      	b.n	800d82e <__swsetup_r+0x1e>
 800d860:	0758      	lsls	r0, r3, #29
 800d862:	d512      	bpl.n	800d88a <__swsetup_r+0x7a>
 800d864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d866:	b141      	cbz	r1, 800d87a <__swsetup_r+0x6a>
 800d868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d86c:	4299      	cmp	r1, r3
 800d86e:	d002      	beq.n	800d876 <__swsetup_r+0x66>
 800d870:	4630      	mov	r0, r6
 800d872:	f7fd fea3 	bl	800b5bc <_free_r>
 800d876:	2300      	movs	r3, #0
 800d878:	6363      	str	r3, [r4, #52]	; 0x34
 800d87a:	89a3      	ldrh	r3, [r4, #12]
 800d87c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d880:	81a3      	strh	r3, [r4, #12]
 800d882:	2300      	movs	r3, #0
 800d884:	6063      	str	r3, [r4, #4]
 800d886:	6923      	ldr	r3, [r4, #16]
 800d888:	6023      	str	r3, [r4, #0]
 800d88a:	89a3      	ldrh	r3, [r4, #12]
 800d88c:	f043 0308 	orr.w	r3, r3, #8
 800d890:	81a3      	strh	r3, [r4, #12]
 800d892:	6923      	ldr	r3, [r4, #16]
 800d894:	b94b      	cbnz	r3, 800d8aa <__swsetup_r+0x9a>
 800d896:	89a3      	ldrh	r3, [r4, #12]
 800d898:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d89c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d8a0:	d003      	beq.n	800d8aa <__swsetup_r+0x9a>
 800d8a2:	4621      	mov	r1, r4
 800d8a4:	4630      	mov	r0, r6
 800d8a6:	f000 fa05 	bl	800dcb4 <__smakebuf_r>
 800d8aa:	89a0      	ldrh	r0, [r4, #12]
 800d8ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d8b0:	f010 0301 	ands.w	r3, r0, #1
 800d8b4:	d00a      	beq.n	800d8cc <__swsetup_r+0xbc>
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	60a3      	str	r3, [r4, #8]
 800d8ba:	6963      	ldr	r3, [r4, #20]
 800d8bc:	425b      	negs	r3, r3
 800d8be:	61a3      	str	r3, [r4, #24]
 800d8c0:	6923      	ldr	r3, [r4, #16]
 800d8c2:	b943      	cbnz	r3, 800d8d6 <__swsetup_r+0xc6>
 800d8c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d8c8:	d1ba      	bne.n	800d840 <__swsetup_r+0x30>
 800d8ca:	bd70      	pop	{r4, r5, r6, pc}
 800d8cc:	0781      	lsls	r1, r0, #30
 800d8ce:	bf58      	it	pl
 800d8d0:	6963      	ldrpl	r3, [r4, #20]
 800d8d2:	60a3      	str	r3, [r4, #8]
 800d8d4:	e7f4      	b.n	800d8c0 <__swsetup_r+0xb0>
 800d8d6:	2000      	movs	r0, #0
 800d8d8:	e7f7      	b.n	800d8ca <__swsetup_r+0xba>
 800d8da:	bf00      	nop
 800d8dc:	20000144 	.word	0x20000144
 800d8e0:	0800e3cc 	.word	0x0800e3cc
 800d8e4:	0800e3ec 	.word	0x0800e3ec
 800d8e8:	0800e3ac 	.word	0x0800e3ac

0800d8ec <abort>:
 800d8ec:	b508      	push	{r3, lr}
 800d8ee:	2006      	movs	r0, #6
 800d8f0:	f000 fa48 	bl	800dd84 <raise>
 800d8f4:	2001      	movs	r0, #1
 800d8f6:	f7f4 fdf3 	bl	80024e0 <_exit>
	...

0800d8fc <__sflush_r>:
 800d8fc:	898a      	ldrh	r2, [r1, #12]
 800d8fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d902:	4605      	mov	r5, r0
 800d904:	0710      	lsls	r0, r2, #28
 800d906:	460c      	mov	r4, r1
 800d908:	d458      	bmi.n	800d9bc <__sflush_r+0xc0>
 800d90a:	684b      	ldr	r3, [r1, #4]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	dc05      	bgt.n	800d91c <__sflush_r+0x20>
 800d910:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d912:	2b00      	cmp	r3, #0
 800d914:	dc02      	bgt.n	800d91c <__sflush_r+0x20>
 800d916:	2000      	movs	r0, #0
 800d918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d91c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d91e:	2e00      	cmp	r6, #0
 800d920:	d0f9      	beq.n	800d916 <__sflush_r+0x1a>
 800d922:	2300      	movs	r3, #0
 800d924:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d928:	682f      	ldr	r7, [r5, #0]
 800d92a:	602b      	str	r3, [r5, #0]
 800d92c:	d032      	beq.n	800d994 <__sflush_r+0x98>
 800d92e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d930:	89a3      	ldrh	r3, [r4, #12]
 800d932:	075a      	lsls	r2, r3, #29
 800d934:	d505      	bpl.n	800d942 <__sflush_r+0x46>
 800d936:	6863      	ldr	r3, [r4, #4]
 800d938:	1ac0      	subs	r0, r0, r3
 800d93a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d93c:	b10b      	cbz	r3, 800d942 <__sflush_r+0x46>
 800d93e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d940:	1ac0      	subs	r0, r0, r3
 800d942:	2300      	movs	r3, #0
 800d944:	4602      	mov	r2, r0
 800d946:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d948:	6a21      	ldr	r1, [r4, #32]
 800d94a:	4628      	mov	r0, r5
 800d94c:	47b0      	blx	r6
 800d94e:	1c43      	adds	r3, r0, #1
 800d950:	89a3      	ldrh	r3, [r4, #12]
 800d952:	d106      	bne.n	800d962 <__sflush_r+0x66>
 800d954:	6829      	ldr	r1, [r5, #0]
 800d956:	291d      	cmp	r1, #29
 800d958:	d82c      	bhi.n	800d9b4 <__sflush_r+0xb8>
 800d95a:	4a2a      	ldr	r2, [pc, #168]	; (800da04 <__sflush_r+0x108>)
 800d95c:	40ca      	lsrs	r2, r1
 800d95e:	07d6      	lsls	r6, r2, #31
 800d960:	d528      	bpl.n	800d9b4 <__sflush_r+0xb8>
 800d962:	2200      	movs	r2, #0
 800d964:	6062      	str	r2, [r4, #4]
 800d966:	04d9      	lsls	r1, r3, #19
 800d968:	6922      	ldr	r2, [r4, #16]
 800d96a:	6022      	str	r2, [r4, #0]
 800d96c:	d504      	bpl.n	800d978 <__sflush_r+0x7c>
 800d96e:	1c42      	adds	r2, r0, #1
 800d970:	d101      	bne.n	800d976 <__sflush_r+0x7a>
 800d972:	682b      	ldr	r3, [r5, #0]
 800d974:	b903      	cbnz	r3, 800d978 <__sflush_r+0x7c>
 800d976:	6560      	str	r0, [r4, #84]	; 0x54
 800d978:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d97a:	602f      	str	r7, [r5, #0]
 800d97c:	2900      	cmp	r1, #0
 800d97e:	d0ca      	beq.n	800d916 <__sflush_r+0x1a>
 800d980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d984:	4299      	cmp	r1, r3
 800d986:	d002      	beq.n	800d98e <__sflush_r+0x92>
 800d988:	4628      	mov	r0, r5
 800d98a:	f7fd fe17 	bl	800b5bc <_free_r>
 800d98e:	2000      	movs	r0, #0
 800d990:	6360      	str	r0, [r4, #52]	; 0x34
 800d992:	e7c1      	b.n	800d918 <__sflush_r+0x1c>
 800d994:	6a21      	ldr	r1, [r4, #32]
 800d996:	2301      	movs	r3, #1
 800d998:	4628      	mov	r0, r5
 800d99a:	47b0      	blx	r6
 800d99c:	1c41      	adds	r1, r0, #1
 800d99e:	d1c7      	bne.n	800d930 <__sflush_r+0x34>
 800d9a0:	682b      	ldr	r3, [r5, #0]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d0c4      	beq.n	800d930 <__sflush_r+0x34>
 800d9a6:	2b1d      	cmp	r3, #29
 800d9a8:	d001      	beq.n	800d9ae <__sflush_r+0xb2>
 800d9aa:	2b16      	cmp	r3, #22
 800d9ac:	d101      	bne.n	800d9b2 <__sflush_r+0xb6>
 800d9ae:	602f      	str	r7, [r5, #0]
 800d9b0:	e7b1      	b.n	800d916 <__sflush_r+0x1a>
 800d9b2:	89a3      	ldrh	r3, [r4, #12]
 800d9b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9b8:	81a3      	strh	r3, [r4, #12]
 800d9ba:	e7ad      	b.n	800d918 <__sflush_r+0x1c>
 800d9bc:	690f      	ldr	r7, [r1, #16]
 800d9be:	2f00      	cmp	r7, #0
 800d9c0:	d0a9      	beq.n	800d916 <__sflush_r+0x1a>
 800d9c2:	0793      	lsls	r3, r2, #30
 800d9c4:	680e      	ldr	r6, [r1, #0]
 800d9c6:	bf08      	it	eq
 800d9c8:	694b      	ldreq	r3, [r1, #20]
 800d9ca:	600f      	str	r7, [r1, #0]
 800d9cc:	bf18      	it	ne
 800d9ce:	2300      	movne	r3, #0
 800d9d0:	eba6 0807 	sub.w	r8, r6, r7
 800d9d4:	608b      	str	r3, [r1, #8]
 800d9d6:	f1b8 0f00 	cmp.w	r8, #0
 800d9da:	dd9c      	ble.n	800d916 <__sflush_r+0x1a>
 800d9dc:	6a21      	ldr	r1, [r4, #32]
 800d9de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d9e0:	4643      	mov	r3, r8
 800d9e2:	463a      	mov	r2, r7
 800d9e4:	4628      	mov	r0, r5
 800d9e6:	47b0      	blx	r6
 800d9e8:	2800      	cmp	r0, #0
 800d9ea:	dc06      	bgt.n	800d9fa <__sflush_r+0xfe>
 800d9ec:	89a3      	ldrh	r3, [r4, #12]
 800d9ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9f2:	81a3      	strh	r3, [r4, #12]
 800d9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d9f8:	e78e      	b.n	800d918 <__sflush_r+0x1c>
 800d9fa:	4407      	add	r7, r0
 800d9fc:	eba8 0800 	sub.w	r8, r8, r0
 800da00:	e7e9      	b.n	800d9d6 <__sflush_r+0xda>
 800da02:	bf00      	nop
 800da04:	20400001 	.word	0x20400001

0800da08 <_fflush_r>:
 800da08:	b538      	push	{r3, r4, r5, lr}
 800da0a:	690b      	ldr	r3, [r1, #16]
 800da0c:	4605      	mov	r5, r0
 800da0e:	460c      	mov	r4, r1
 800da10:	b913      	cbnz	r3, 800da18 <_fflush_r+0x10>
 800da12:	2500      	movs	r5, #0
 800da14:	4628      	mov	r0, r5
 800da16:	bd38      	pop	{r3, r4, r5, pc}
 800da18:	b118      	cbz	r0, 800da22 <_fflush_r+0x1a>
 800da1a:	6983      	ldr	r3, [r0, #24]
 800da1c:	b90b      	cbnz	r3, 800da22 <_fflush_r+0x1a>
 800da1e:	f000 f887 	bl	800db30 <__sinit>
 800da22:	4b14      	ldr	r3, [pc, #80]	; (800da74 <_fflush_r+0x6c>)
 800da24:	429c      	cmp	r4, r3
 800da26:	d11b      	bne.n	800da60 <_fflush_r+0x58>
 800da28:	686c      	ldr	r4, [r5, #4]
 800da2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d0ef      	beq.n	800da12 <_fflush_r+0xa>
 800da32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800da34:	07d0      	lsls	r0, r2, #31
 800da36:	d404      	bmi.n	800da42 <_fflush_r+0x3a>
 800da38:	0599      	lsls	r1, r3, #22
 800da3a:	d402      	bmi.n	800da42 <_fflush_r+0x3a>
 800da3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da3e:	f7ff fd1a 	bl	800d476 <__retarget_lock_acquire_recursive>
 800da42:	4628      	mov	r0, r5
 800da44:	4621      	mov	r1, r4
 800da46:	f7ff ff59 	bl	800d8fc <__sflush_r>
 800da4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da4c:	07da      	lsls	r2, r3, #31
 800da4e:	4605      	mov	r5, r0
 800da50:	d4e0      	bmi.n	800da14 <_fflush_r+0xc>
 800da52:	89a3      	ldrh	r3, [r4, #12]
 800da54:	059b      	lsls	r3, r3, #22
 800da56:	d4dd      	bmi.n	800da14 <_fflush_r+0xc>
 800da58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da5a:	f7ff fd0d 	bl	800d478 <__retarget_lock_release_recursive>
 800da5e:	e7d9      	b.n	800da14 <_fflush_r+0xc>
 800da60:	4b05      	ldr	r3, [pc, #20]	; (800da78 <_fflush_r+0x70>)
 800da62:	429c      	cmp	r4, r3
 800da64:	d101      	bne.n	800da6a <_fflush_r+0x62>
 800da66:	68ac      	ldr	r4, [r5, #8]
 800da68:	e7df      	b.n	800da2a <_fflush_r+0x22>
 800da6a:	4b04      	ldr	r3, [pc, #16]	; (800da7c <_fflush_r+0x74>)
 800da6c:	429c      	cmp	r4, r3
 800da6e:	bf08      	it	eq
 800da70:	68ec      	ldreq	r4, [r5, #12]
 800da72:	e7da      	b.n	800da2a <_fflush_r+0x22>
 800da74:	0800e3cc 	.word	0x0800e3cc
 800da78:	0800e3ec 	.word	0x0800e3ec
 800da7c:	0800e3ac 	.word	0x0800e3ac

0800da80 <std>:
 800da80:	2300      	movs	r3, #0
 800da82:	b510      	push	{r4, lr}
 800da84:	4604      	mov	r4, r0
 800da86:	e9c0 3300 	strd	r3, r3, [r0]
 800da8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800da8e:	6083      	str	r3, [r0, #8]
 800da90:	8181      	strh	r1, [r0, #12]
 800da92:	6643      	str	r3, [r0, #100]	; 0x64
 800da94:	81c2      	strh	r2, [r0, #14]
 800da96:	6183      	str	r3, [r0, #24]
 800da98:	4619      	mov	r1, r3
 800da9a:	2208      	movs	r2, #8
 800da9c:	305c      	adds	r0, #92	; 0x5c
 800da9e:	f7fd fd75 	bl	800b58c <memset>
 800daa2:	4b05      	ldr	r3, [pc, #20]	; (800dab8 <std+0x38>)
 800daa4:	6263      	str	r3, [r4, #36]	; 0x24
 800daa6:	4b05      	ldr	r3, [pc, #20]	; (800dabc <std+0x3c>)
 800daa8:	62a3      	str	r3, [r4, #40]	; 0x28
 800daaa:	4b05      	ldr	r3, [pc, #20]	; (800dac0 <std+0x40>)
 800daac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800daae:	4b05      	ldr	r3, [pc, #20]	; (800dac4 <std+0x44>)
 800dab0:	6224      	str	r4, [r4, #32]
 800dab2:	6323      	str	r3, [r4, #48]	; 0x30
 800dab4:	bd10      	pop	{r4, pc}
 800dab6:	bf00      	nop
 800dab8:	0800ddbd 	.word	0x0800ddbd
 800dabc:	0800dddf 	.word	0x0800dddf
 800dac0:	0800de17 	.word	0x0800de17
 800dac4:	0800de3b 	.word	0x0800de3b

0800dac8 <_cleanup_r>:
 800dac8:	4901      	ldr	r1, [pc, #4]	; (800dad0 <_cleanup_r+0x8>)
 800daca:	f000 b8af 	b.w	800dc2c <_fwalk_reent>
 800dace:	bf00      	nop
 800dad0:	0800da09 	.word	0x0800da09

0800dad4 <__sfmoreglue>:
 800dad4:	b570      	push	{r4, r5, r6, lr}
 800dad6:	1e4a      	subs	r2, r1, #1
 800dad8:	2568      	movs	r5, #104	; 0x68
 800dada:	4355      	muls	r5, r2
 800dadc:	460e      	mov	r6, r1
 800dade:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dae2:	f7fd fdbb 	bl	800b65c <_malloc_r>
 800dae6:	4604      	mov	r4, r0
 800dae8:	b140      	cbz	r0, 800dafc <__sfmoreglue+0x28>
 800daea:	2100      	movs	r1, #0
 800daec:	e9c0 1600 	strd	r1, r6, [r0]
 800daf0:	300c      	adds	r0, #12
 800daf2:	60a0      	str	r0, [r4, #8]
 800daf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800daf8:	f7fd fd48 	bl	800b58c <memset>
 800dafc:	4620      	mov	r0, r4
 800dafe:	bd70      	pop	{r4, r5, r6, pc}

0800db00 <__sfp_lock_acquire>:
 800db00:	4801      	ldr	r0, [pc, #4]	; (800db08 <__sfp_lock_acquire+0x8>)
 800db02:	f7ff bcb8 	b.w	800d476 <__retarget_lock_acquire_recursive>
 800db06:	bf00      	nop
 800db08:	20008954 	.word	0x20008954

0800db0c <__sfp_lock_release>:
 800db0c:	4801      	ldr	r0, [pc, #4]	; (800db14 <__sfp_lock_release+0x8>)
 800db0e:	f7ff bcb3 	b.w	800d478 <__retarget_lock_release_recursive>
 800db12:	bf00      	nop
 800db14:	20008954 	.word	0x20008954

0800db18 <__sinit_lock_acquire>:
 800db18:	4801      	ldr	r0, [pc, #4]	; (800db20 <__sinit_lock_acquire+0x8>)
 800db1a:	f7ff bcac 	b.w	800d476 <__retarget_lock_acquire_recursive>
 800db1e:	bf00      	nop
 800db20:	2000894f 	.word	0x2000894f

0800db24 <__sinit_lock_release>:
 800db24:	4801      	ldr	r0, [pc, #4]	; (800db2c <__sinit_lock_release+0x8>)
 800db26:	f7ff bca7 	b.w	800d478 <__retarget_lock_release_recursive>
 800db2a:	bf00      	nop
 800db2c:	2000894f 	.word	0x2000894f

0800db30 <__sinit>:
 800db30:	b510      	push	{r4, lr}
 800db32:	4604      	mov	r4, r0
 800db34:	f7ff fff0 	bl	800db18 <__sinit_lock_acquire>
 800db38:	69a3      	ldr	r3, [r4, #24]
 800db3a:	b11b      	cbz	r3, 800db44 <__sinit+0x14>
 800db3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db40:	f7ff bff0 	b.w	800db24 <__sinit_lock_release>
 800db44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800db48:	6523      	str	r3, [r4, #80]	; 0x50
 800db4a:	4b13      	ldr	r3, [pc, #76]	; (800db98 <__sinit+0x68>)
 800db4c:	4a13      	ldr	r2, [pc, #76]	; (800db9c <__sinit+0x6c>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	62a2      	str	r2, [r4, #40]	; 0x28
 800db52:	42a3      	cmp	r3, r4
 800db54:	bf04      	itt	eq
 800db56:	2301      	moveq	r3, #1
 800db58:	61a3      	streq	r3, [r4, #24]
 800db5a:	4620      	mov	r0, r4
 800db5c:	f000 f820 	bl	800dba0 <__sfp>
 800db60:	6060      	str	r0, [r4, #4]
 800db62:	4620      	mov	r0, r4
 800db64:	f000 f81c 	bl	800dba0 <__sfp>
 800db68:	60a0      	str	r0, [r4, #8]
 800db6a:	4620      	mov	r0, r4
 800db6c:	f000 f818 	bl	800dba0 <__sfp>
 800db70:	2200      	movs	r2, #0
 800db72:	60e0      	str	r0, [r4, #12]
 800db74:	2104      	movs	r1, #4
 800db76:	6860      	ldr	r0, [r4, #4]
 800db78:	f7ff ff82 	bl	800da80 <std>
 800db7c:	68a0      	ldr	r0, [r4, #8]
 800db7e:	2201      	movs	r2, #1
 800db80:	2109      	movs	r1, #9
 800db82:	f7ff ff7d 	bl	800da80 <std>
 800db86:	68e0      	ldr	r0, [r4, #12]
 800db88:	2202      	movs	r2, #2
 800db8a:	2112      	movs	r1, #18
 800db8c:	f7ff ff78 	bl	800da80 <std>
 800db90:	2301      	movs	r3, #1
 800db92:	61a3      	str	r3, [r4, #24]
 800db94:	e7d2      	b.n	800db3c <__sinit+0xc>
 800db96:	bf00      	nop
 800db98:	0800e028 	.word	0x0800e028
 800db9c:	0800dac9 	.word	0x0800dac9

0800dba0 <__sfp>:
 800dba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dba2:	4607      	mov	r7, r0
 800dba4:	f7ff ffac 	bl	800db00 <__sfp_lock_acquire>
 800dba8:	4b1e      	ldr	r3, [pc, #120]	; (800dc24 <__sfp+0x84>)
 800dbaa:	681e      	ldr	r6, [r3, #0]
 800dbac:	69b3      	ldr	r3, [r6, #24]
 800dbae:	b913      	cbnz	r3, 800dbb6 <__sfp+0x16>
 800dbb0:	4630      	mov	r0, r6
 800dbb2:	f7ff ffbd 	bl	800db30 <__sinit>
 800dbb6:	3648      	adds	r6, #72	; 0x48
 800dbb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dbbc:	3b01      	subs	r3, #1
 800dbbe:	d503      	bpl.n	800dbc8 <__sfp+0x28>
 800dbc0:	6833      	ldr	r3, [r6, #0]
 800dbc2:	b30b      	cbz	r3, 800dc08 <__sfp+0x68>
 800dbc4:	6836      	ldr	r6, [r6, #0]
 800dbc6:	e7f7      	b.n	800dbb8 <__sfp+0x18>
 800dbc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dbcc:	b9d5      	cbnz	r5, 800dc04 <__sfp+0x64>
 800dbce:	4b16      	ldr	r3, [pc, #88]	; (800dc28 <__sfp+0x88>)
 800dbd0:	60e3      	str	r3, [r4, #12]
 800dbd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dbd6:	6665      	str	r5, [r4, #100]	; 0x64
 800dbd8:	f7ff fc4c 	bl	800d474 <__retarget_lock_init_recursive>
 800dbdc:	f7ff ff96 	bl	800db0c <__sfp_lock_release>
 800dbe0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dbe4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dbe8:	6025      	str	r5, [r4, #0]
 800dbea:	61a5      	str	r5, [r4, #24]
 800dbec:	2208      	movs	r2, #8
 800dbee:	4629      	mov	r1, r5
 800dbf0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dbf4:	f7fd fcca 	bl	800b58c <memset>
 800dbf8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dbfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dc00:	4620      	mov	r0, r4
 800dc02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc04:	3468      	adds	r4, #104	; 0x68
 800dc06:	e7d9      	b.n	800dbbc <__sfp+0x1c>
 800dc08:	2104      	movs	r1, #4
 800dc0a:	4638      	mov	r0, r7
 800dc0c:	f7ff ff62 	bl	800dad4 <__sfmoreglue>
 800dc10:	4604      	mov	r4, r0
 800dc12:	6030      	str	r0, [r6, #0]
 800dc14:	2800      	cmp	r0, #0
 800dc16:	d1d5      	bne.n	800dbc4 <__sfp+0x24>
 800dc18:	f7ff ff78 	bl	800db0c <__sfp_lock_release>
 800dc1c:	230c      	movs	r3, #12
 800dc1e:	603b      	str	r3, [r7, #0]
 800dc20:	e7ee      	b.n	800dc00 <__sfp+0x60>
 800dc22:	bf00      	nop
 800dc24:	0800e028 	.word	0x0800e028
 800dc28:	ffff0001 	.word	0xffff0001

0800dc2c <_fwalk_reent>:
 800dc2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc30:	4606      	mov	r6, r0
 800dc32:	4688      	mov	r8, r1
 800dc34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dc38:	2700      	movs	r7, #0
 800dc3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dc3e:	f1b9 0901 	subs.w	r9, r9, #1
 800dc42:	d505      	bpl.n	800dc50 <_fwalk_reent+0x24>
 800dc44:	6824      	ldr	r4, [r4, #0]
 800dc46:	2c00      	cmp	r4, #0
 800dc48:	d1f7      	bne.n	800dc3a <_fwalk_reent+0xe>
 800dc4a:	4638      	mov	r0, r7
 800dc4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc50:	89ab      	ldrh	r3, [r5, #12]
 800dc52:	2b01      	cmp	r3, #1
 800dc54:	d907      	bls.n	800dc66 <_fwalk_reent+0x3a>
 800dc56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dc5a:	3301      	adds	r3, #1
 800dc5c:	d003      	beq.n	800dc66 <_fwalk_reent+0x3a>
 800dc5e:	4629      	mov	r1, r5
 800dc60:	4630      	mov	r0, r6
 800dc62:	47c0      	blx	r8
 800dc64:	4307      	orrs	r7, r0
 800dc66:	3568      	adds	r5, #104	; 0x68
 800dc68:	e7e9      	b.n	800dc3e <_fwalk_reent+0x12>

0800dc6a <__swhatbuf_r>:
 800dc6a:	b570      	push	{r4, r5, r6, lr}
 800dc6c:	460e      	mov	r6, r1
 800dc6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc72:	2900      	cmp	r1, #0
 800dc74:	b096      	sub	sp, #88	; 0x58
 800dc76:	4614      	mov	r4, r2
 800dc78:	461d      	mov	r5, r3
 800dc7a:	da07      	bge.n	800dc8c <__swhatbuf_r+0x22>
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	602b      	str	r3, [r5, #0]
 800dc80:	89b3      	ldrh	r3, [r6, #12]
 800dc82:	061a      	lsls	r2, r3, #24
 800dc84:	d410      	bmi.n	800dca8 <__swhatbuf_r+0x3e>
 800dc86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc8a:	e00e      	b.n	800dcaa <__swhatbuf_r+0x40>
 800dc8c:	466a      	mov	r2, sp
 800dc8e:	f000 f8fb 	bl	800de88 <_fstat_r>
 800dc92:	2800      	cmp	r0, #0
 800dc94:	dbf2      	blt.n	800dc7c <__swhatbuf_r+0x12>
 800dc96:	9a01      	ldr	r2, [sp, #4]
 800dc98:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dc9c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dca0:	425a      	negs	r2, r3
 800dca2:	415a      	adcs	r2, r3
 800dca4:	602a      	str	r2, [r5, #0]
 800dca6:	e7ee      	b.n	800dc86 <__swhatbuf_r+0x1c>
 800dca8:	2340      	movs	r3, #64	; 0x40
 800dcaa:	2000      	movs	r0, #0
 800dcac:	6023      	str	r3, [r4, #0]
 800dcae:	b016      	add	sp, #88	; 0x58
 800dcb0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dcb4 <__smakebuf_r>:
 800dcb4:	898b      	ldrh	r3, [r1, #12]
 800dcb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dcb8:	079d      	lsls	r5, r3, #30
 800dcba:	4606      	mov	r6, r0
 800dcbc:	460c      	mov	r4, r1
 800dcbe:	d507      	bpl.n	800dcd0 <__smakebuf_r+0x1c>
 800dcc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dcc4:	6023      	str	r3, [r4, #0]
 800dcc6:	6123      	str	r3, [r4, #16]
 800dcc8:	2301      	movs	r3, #1
 800dcca:	6163      	str	r3, [r4, #20]
 800dccc:	b002      	add	sp, #8
 800dcce:	bd70      	pop	{r4, r5, r6, pc}
 800dcd0:	ab01      	add	r3, sp, #4
 800dcd2:	466a      	mov	r2, sp
 800dcd4:	f7ff ffc9 	bl	800dc6a <__swhatbuf_r>
 800dcd8:	9900      	ldr	r1, [sp, #0]
 800dcda:	4605      	mov	r5, r0
 800dcdc:	4630      	mov	r0, r6
 800dcde:	f7fd fcbd 	bl	800b65c <_malloc_r>
 800dce2:	b948      	cbnz	r0, 800dcf8 <__smakebuf_r+0x44>
 800dce4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dce8:	059a      	lsls	r2, r3, #22
 800dcea:	d4ef      	bmi.n	800dccc <__smakebuf_r+0x18>
 800dcec:	f023 0303 	bic.w	r3, r3, #3
 800dcf0:	f043 0302 	orr.w	r3, r3, #2
 800dcf4:	81a3      	strh	r3, [r4, #12]
 800dcf6:	e7e3      	b.n	800dcc0 <__smakebuf_r+0xc>
 800dcf8:	4b0d      	ldr	r3, [pc, #52]	; (800dd30 <__smakebuf_r+0x7c>)
 800dcfa:	62b3      	str	r3, [r6, #40]	; 0x28
 800dcfc:	89a3      	ldrh	r3, [r4, #12]
 800dcfe:	6020      	str	r0, [r4, #0]
 800dd00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd04:	81a3      	strh	r3, [r4, #12]
 800dd06:	9b00      	ldr	r3, [sp, #0]
 800dd08:	6163      	str	r3, [r4, #20]
 800dd0a:	9b01      	ldr	r3, [sp, #4]
 800dd0c:	6120      	str	r0, [r4, #16]
 800dd0e:	b15b      	cbz	r3, 800dd28 <__smakebuf_r+0x74>
 800dd10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd14:	4630      	mov	r0, r6
 800dd16:	f000 f8c9 	bl	800deac <_isatty_r>
 800dd1a:	b128      	cbz	r0, 800dd28 <__smakebuf_r+0x74>
 800dd1c:	89a3      	ldrh	r3, [r4, #12]
 800dd1e:	f023 0303 	bic.w	r3, r3, #3
 800dd22:	f043 0301 	orr.w	r3, r3, #1
 800dd26:	81a3      	strh	r3, [r4, #12]
 800dd28:	89a0      	ldrh	r0, [r4, #12]
 800dd2a:	4305      	orrs	r5, r0
 800dd2c:	81a5      	strh	r5, [r4, #12]
 800dd2e:	e7cd      	b.n	800dccc <__smakebuf_r+0x18>
 800dd30:	0800dac9 	.word	0x0800dac9

0800dd34 <_raise_r>:
 800dd34:	291f      	cmp	r1, #31
 800dd36:	b538      	push	{r3, r4, r5, lr}
 800dd38:	4604      	mov	r4, r0
 800dd3a:	460d      	mov	r5, r1
 800dd3c:	d904      	bls.n	800dd48 <_raise_r+0x14>
 800dd3e:	2316      	movs	r3, #22
 800dd40:	6003      	str	r3, [r0, #0]
 800dd42:	f04f 30ff 	mov.w	r0, #4294967295
 800dd46:	bd38      	pop	{r3, r4, r5, pc}
 800dd48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dd4a:	b112      	cbz	r2, 800dd52 <_raise_r+0x1e>
 800dd4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd50:	b94b      	cbnz	r3, 800dd66 <_raise_r+0x32>
 800dd52:	4620      	mov	r0, r4
 800dd54:	f000 f830 	bl	800ddb8 <_getpid_r>
 800dd58:	462a      	mov	r2, r5
 800dd5a:	4601      	mov	r1, r0
 800dd5c:	4620      	mov	r0, r4
 800dd5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd62:	f000 b817 	b.w	800dd94 <_kill_r>
 800dd66:	2b01      	cmp	r3, #1
 800dd68:	d00a      	beq.n	800dd80 <_raise_r+0x4c>
 800dd6a:	1c59      	adds	r1, r3, #1
 800dd6c:	d103      	bne.n	800dd76 <_raise_r+0x42>
 800dd6e:	2316      	movs	r3, #22
 800dd70:	6003      	str	r3, [r0, #0]
 800dd72:	2001      	movs	r0, #1
 800dd74:	e7e7      	b.n	800dd46 <_raise_r+0x12>
 800dd76:	2400      	movs	r4, #0
 800dd78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dd7c:	4628      	mov	r0, r5
 800dd7e:	4798      	blx	r3
 800dd80:	2000      	movs	r0, #0
 800dd82:	e7e0      	b.n	800dd46 <_raise_r+0x12>

0800dd84 <raise>:
 800dd84:	4b02      	ldr	r3, [pc, #8]	; (800dd90 <raise+0xc>)
 800dd86:	4601      	mov	r1, r0
 800dd88:	6818      	ldr	r0, [r3, #0]
 800dd8a:	f7ff bfd3 	b.w	800dd34 <_raise_r>
 800dd8e:	bf00      	nop
 800dd90:	20000144 	.word	0x20000144

0800dd94 <_kill_r>:
 800dd94:	b538      	push	{r3, r4, r5, lr}
 800dd96:	4d07      	ldr	r5, [pc, #28]	; (800ddb4 <_kill_r+0x20>)
 800dd98:	2300      	movs	r3, #0
 800dd9a:	4604      	mov	r4, r0
 800dd9c:	4608      	mov	r0, r1
 800dd9e:	4611      	mov	r1, r2
 800dda0:	602b      	str	r3, [r5, #0]
 800dda2:	f7f4 fb8d 	bl	80024c0 <_kill>
 800dda6:	1c43      	adds	r3, r0, #1
 800dda8:	d102      	bne.n	800ddb0 <_kill_r+0x1c>
 800ddaa:	682b      	ldr	r3, [r5, #0]
 800ddac:	b103      	cbz	r3, 800ddb0 <_kill_r+0x1c>
 800ddae:	6023      	str	r3, [r4, #0]
 800ddb0:	bd38      	pop	{r3, r4, r5, pc}
 800ddb2:	bf00      	nop
 800ddb4:	20008948 	.word	0x20008948

0800ddb8 <_getpid_r>:
 800ddb8:	f7f4 bb7a 	b.w	80024b0 <_getpid>

0800ddbc <__sread>:
 800ddbc:	b510      	push	{r4, lr}
 800ddbe:	460c      	mov	r4, r1
 800ddc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddc4:	f000 f894 	bl	800def0 <_read_r>
 800ddc8:	2800      	cmp	r0, #0
 800ddca:	bfab      	itete	ge
 800ddcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ddce:	89a3      	ldrhlt	r3, [r4, #12]
 800ddd0:	181b      	addge	r3, r3, r0
 800ddd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ddd6:	bfac      	ite	ge
 800ddd8:	6563      	strge	r3, [r4, #84]	; 0x54
 800ddda:	81a3      	strhlt	r3, [r4, #12]
 800dddc:	bd10      	pop	{r4, pc}

0800ddde <__swrite>:
 800ddde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dde2:	461f      	mov	r7, r3
 800dde4:	898b      	ldrh	r3, [r1, #12]
 800dde6:	05db      	lsls	r3, r3, #23
 800dde8:	4605      	mov	r5, r0
 800ddea:	460c      	mov	r4, r1
 800ddec:	4616      	mov	r6, r2
 800ddee:	d505      	bpl.n	800ddfc <__swrite+0x1e>
 800ddf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddf4:	2302      	movs	r3, #2
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	f000 f868 	bl	800decc <_lseek_r>
 800ddfc:	89a3      	ldrh	r3, [r4, #12]
 800ddfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800de06:	81a3      	strh	r3, [r4, #12]
 800de08:	4632      	mov	r2, r6
 800de0a:	463b      	mov	r3, r7
 800de0c:	4628      	mov	r0, r5
 800de0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de12:	f000 b817 	b.w	800de44 <_write_r>

0800de16 <__sseek>:
 800de16:	b510      	push	{r4, lr}
 800de18:	460c      	mov	r4, r1
 800de1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de1e:	f000 f855 	bl	800decc <_lseek_r>
 800de22:	1c43      	adds	r3, r0, #1
 800de24:	89a3      	ldrh	r3, [r4, #12]
 800de26:	bf15      	itete	ne
 800de28:	6560      	strne	r0, [r4, #84]	; 0x54
 800de2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800de2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800de32:	81a3      	strheq	r3, [r4, #12]
 800de34:	bf18      	it	ne
 800de36:	81a3      	strhne	r3, [r4, #12]
 800de38:	bd10      	pop	{r4, pc}

0800de3a <__sclose>:
 800de3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de3e:	f000 b813 	b.w	800de68 <_close_r>
	...

0800de44 <_write_r>:
 800de44:	b538      	push	{r3, r4, r5, lr}
 800de46:	4d07      	ldr	r5, [pc, #28]	; (800de64 <_write_r+0x20>)
 800de48:	4604      	mov	r4, r0
 800de4a:	4608      	mov	r0, r1
 800de4c:	4611      	mov	r1, r2
 800de4e:	2200      	movs	r2, #0
 800de50:	602a      	str	r2, [r5, #0]
 800de52:	461a      	mov	r2, r3
 800de54:	f7f4 fb6b 	bl	800252e <_write>
 800de58:	1c43      	adds	r3, r0, #1
 800de5a:	d102      	bne.n	800de62 <_write_r+0x1e>
 800de5c:	682b      	ldr	r3, [r5, #0]
 800de5e:	b103      	cbz	r3, 800de62 <_write_r+0x1e>
 800de60:	6023      	str	r3, [r4, #0]
 800de62:	bd38      	pop	{r3, r4, r5, pc}
 800de64:	20008948 	.word	0x20008948

0800de68 <_close_r>:
 800de68:	b538      	push	{r3, r4, r5, lr}
 800de6a:	4d06      	ldr	r5, [pc, #24]	; (800de84 <_close_r+0x1c>)
 800de6c:	2300      	movs	r3, #0
 800de6e:	4604      	mov	r4, r0
 800de70:	4608      	mov	r0, r1
 800de72:	602b      	str	r3, [r5, #0]
 800de74:	f7f4 fb77 	bl	8002566 <_close>
 800de78:	1c43      	adds	r3, r0, #1
 800de7a:	d102      	bne.n	800de82 <_close_r+0x1a>
 800de7c:	682b      	ldr	r3, [r5, #0]
 800de7e:	b103      	cbz	r3, 800de82 <_close_r+0x1a>
 800de80:	6023      	str	r3, [r4, #0]
 800de82:	bd38      	pop	{r3, r4, r5, pc}
 800de84:	20008948 	.word	0x20008948

0800de88 <_fstat_r>:
 800de88:	b538      	push	{r3, r4, r5, lr}
 800de8a:	4d07      	ldr	r5, [pc, #28]	; (800dea8 <_fstat_r+0x20>)
 800de8c:	2300      	movs	r3, #0
 800de8e:	4604      	mov	r4, r0
 800de90:	4608      	mov	r0, r1
 800de92:	4611      	mov	r1, r2
 800de94:	602b      	str	r3, [r5, #0]
 800de96:	f7f4 fb72 	bl	800257e <_fstat>
 800de9a:	1c43      	adds	r3, r0, #1
 800de9c:	d102      	bne.n	800dea4 <_fstat_r+0x1c>
 800de9e:	682b      	ldr	r3, [r5, #0]
 800dea0:	b103      	cbz	r3, 800dea4 <_fstat_r+0x1c>
 800dea2:	6023      	str	r3, [r4, #0]
 800dea4:	bd38      	pop	{r3, r4, r5, pc}
 800dea6:	bf00      	nop
 800dea8:	20008948 	.word	0x20008948

0800deac <_isatty_r>:
 800deac:	b538      	push	{r3, r4, r5, lr}
 800deae:	4d06      	ldr	r5, [pc, #24]	; (800dec8 <_isatty_r+0x1c>)
 800deb0:	2300      	movs	r3, #0
 800deb2:	4604      	mov	r4, r0
 800deb4:	4608      	mov	r0, r1
 800deb6:	602b      	str	r3, [r5, #0]
 800deb8:	f7f4 fb71 	bl	800259e <_isatty>
 800debc:	1c43      	adds	r3, r0, #1
 800debe:	d102      	bne.n	800dec6 <_isatty_r+0x1a>
 800dec0:	682b      	ldr	r3, [r5, #0]
 800dec2:	b103      	cbz	r3, 800dec6 <_isatty_r+0x1a>
 800dec4:	6023      	str	r3, [r4, #0]
 800dec6:	bd38      	pop	{r3, r4, r5, pc}
 800dec8:	20008948 	.word	0x20008948

0800decc <_lseek_r>:
 800decc:	b538      	push	{r3, r4, r5, lr}
 800dece:	4d07      	ldr	r5, [pc, #28]	; (800deec <_lseek_r+0x20>)
 800ded0:	4604      	mov	r4, r0
 800ded2:	4608      	mov	r0, r1
 800ded4:	4611      	mov	r1, r2
 800ded6:	2200      	movs	r2, #0
 800ded8:	602a      	str	r2, [r5, #0]
 800deda:	461a      	mov	r2, r3
 800dedc:	f7f4 fb6a 	bl	80025b4 <_lseek>
 800dee0:	1c43      	adds	r3, r0, #1
 800dee2:	d102      	bne.n	800deea <_lseek_r+0x1e>
 800dee4:	682b      	ldr	r3, [r5, #0]
 800dee6:	b103      	cbz	r3, 800deea <_lseek_r+0x1e>
 800dee8:	6023      	str	r3, [r4, #0]
 800deea:	bd38      	pop	{r3, r4, r5, pc}
 800deec:	20008948 	.word	0x20008948

0800def0 <_read_r>:
 800def0:	b538      	push	{r3, r4, r5, lr}
 800def2:	4d07      	ldr	r5, [pc, #28]	; (800df10 <_read_r+0x20>)
 800def4:	4604      	mov	r4, r0
 800def6:	4608      	mov	r0, r1
 800def8:	4611      	mov	r1, r2
 800defa:	2200      	movs	r2, #0
 800defc:	602a      	str	r2, [r5, #0]
 800defe:	461a      	mov	r2, r3
 800df00:	f7f4 faf8 	bl	80024f4 <_read>
 800df04:	1c43      	adds	r3, r0, #1
 800df06:	d102      	bne.n	800df0e <_read_r+0x1e>
 800df08:	682b      	ldr	r3, [r5, #0]
 800df0a:	b103      	cbz	r3, 800df0e <_read_r+0x1e>
 800df0c:	6023      	str	r3, [r4, #0]
 800df0e:	bd38      	pop	{r3, r4, r5, pc}
 800df10:	20008948 	.word	0x20008948

0800df14 <_init>:
 800df14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df16:	bf00      	nop
 800df18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df1a:	bc08      	pop	{r3}
 800df1c:	469e      	mov	lr, r3
 800df1e:	4770      	bx	lr

0800df20 <_fini>:
 800df20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df22:	bf00      	nop
 800df24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df26:	bc08      	pop	{r3}
 800df28:	469e      	mov	lr, r3
 800df2a:	4770      	bx	lr
