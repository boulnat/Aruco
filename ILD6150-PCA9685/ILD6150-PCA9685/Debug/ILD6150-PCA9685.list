
ILD6150-PCA9685.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080070b4  080070b4  000170b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007184  08007184  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007184  08007184  00017184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800718c  0800718c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800718c  0800718c  0001718c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007190  08007190  00017190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af8  20000014  080071a8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b0c  080071a8  00021b0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021580  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a0d  00000000  00000000  000415c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b08  00000000  00000000  00044fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001960  00000000  00000000  00046ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000042de  00000000  00000000  00048440  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000155e1  00000000  00000000  0004c71e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7b67  00000000  00000000  00061cff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00139866  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072f0  00000000  00000000  001398e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800709c 	.word	0x0800709c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800709c 	.word	0x0800709c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fd47 	bl	8000f66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f82c 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f966 	bl	80007ac <MX_GPIO_Init>
  MX_DMA_Init();
 80004e0:	f000 f93e 	bl	8000760 <MX_DMA_Init>
  MX_I2C1_Init();
 80004e4:	f000 f8cc 	bl	8000680 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f908 	bl	80006fc <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80004ec:	f000 f894 	bl	8000618 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f0:	f004 f85e 	bl	80045b0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f4:	4a09      	ldr	r2, [pc, #36]	; (800051c <main+0x4c>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	4809      	ldr	r0, [pc, #36]	; (8000520 <main+0x50>)
 80004fa:	f004 f8c3 	bl	8004684 <osThreadNew>
 80004fe:	4602      	mov	r2, r0
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <main+0x54>)
 8000502:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  comUsartTaskHandle = osThreadNew(ComUsartTask, NULL, &comUsartTask_attributes);
 8000504:	4a08      	ldr	r2, [pc, #32]	; (8000528 <main+0x58>)
 8000506:	2100      	movs	r1, #0
 8000508:	4808      	ldr	r0, [pc, #32]	; (800052c <main+0x5c>)
 800050a:	f004 f8bb 	bl	8004684 <osThreadNew>
 800050e:	4602      	mov	r2, r0
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <main+0x60>)
 8000512:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000514:	f004 f880 	bl	8004618 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000518:	e7fe      	b.n	8000518 <main+0x48>
 800051a:	bf00      	nop
 800051c:	080070f4 	.word	0x080070f4
 8000520:	08000abd 	.word	0x08000abd
 8000524:	200018f0 	.word	0x200018f0
 8000528:	08007118 	.word	0x08007118
 800052c:	08000a31 	.word	0x08000a31
 8000530:	20001a78 	.word	0x20001a78

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b0ac      	sub	sp, #176	; 0xb0
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800053e:	2244      	movs	r2, #68	; 0x44
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f006 fda1 	bl	800708a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2254      	movs	r2, #84	; 0x54
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f006 fd93 	bl	800708a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000564:	f001 fe3a 	bl	80021dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000568:	4b2a      	ldr	r3, [pc, #168]	; (8000614 <SystemClock_Config+0xe0>)
 800056a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800056e:	4a29      	ldr	r2, [pc, #164]	; (8000614 <SystemClock_Config+0xe0>)
 8000570:	f023 0318 	bic.w	r3, r3, #24
 8000574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000578:	2314      	movs	r3, #20
 800057a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800058c:	2360      	movs	r3, #96	; 0x60
 800058e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000592:	2300      	movs	r3, #0
 8000594:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800059c:	4618      	mov	r0, r3
 800059e:	f001 fe91 	bl	80022c4 <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005a8:	f000 faa4 	bl	8000af4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005b0:	2300      	movs	r3, #0
 80005b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 fa9c 	bl	8002b04 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005d2:	f000 fa8f 	bl	8000af4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80005d6:	2342      	movs	r3, #66	; 0x42
 80005d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80005da:	2304      	movs	r3, #4
 80005dc:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005de:	2300      	movs	r3, #0
 80005e0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 fcc1 	bl	8002f6c <HAL_RCCEx_PeriphCLKConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005f0:	f000 fa80 	bl	8000af4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f8:	f001 fe0e 	bl	8002218 <HAL_PWREx_ControlVoltageScaling>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000602:	f000 fa77 	bl	8000af4 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000606:	f002 fea3 	bl	8003350 <HAL_RCCEx_EnableMSIPLLMode>
}
 800060a:	bf00      	nop
 800060c:	37b0      	adds	r7, #176	; 0xb0
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000

08000618 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800061c:	4b16      	ldr	r3, [pc, #88]	; (8000678 <MX_CAN1_Init+0x60>)
 800061e:	4a17      	ldr	r2, [pc, #92]	; (800067c <MX_CAN1_Init+0x64>)
 8000620:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_CAN1_Init+0x60>)
 8000624:	2210      	movs	r2, #16
 8000626:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MX_CAN1_Init+0x60>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <MX_CAN1_Init+0x60>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000634:	4b10      	ldr	r3, [pc, #64]	; (8000678 <MX_CAN1_Init+0x60>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_CAN1_Init+0x60>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000640:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <MX_CAN1_Init+0x60>)
 8000642:	2200      	movs	r2, #0
 8000644:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_CAN1_Init+0x60>)
 8000648:	2200      	movs	r2, #0
 800064a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <MX_CAN1_Init+0x60>)
 800064e:	2200      	movs	r2, #0
 8000650:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_CAN1_Init+0x60>)
 8000654:	2200      	movs	r2, #0
 8000656:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000658:	4b07      	ldr	r3, [pc, #28]	; (8000678 <MX_CAN1_Init+0x60>)
 800065a:	2200      	movs	r2, #0
 800065c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_CAN1_Init+0x60>)
 8000660:	2200      	movs	r2, #0
 8000662:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <MX_CAN1_Init+0x60>)
 8000666:	f000 fcb7 	bl	8000fd8 <HAL_CAN_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000670:	f000 fa40 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20001a50 	.word	0x20001a50
 800067c:	40006400 	.word	0x40006400

08000680 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_I2C1_Init+0x74>)
 8000686:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <MX_I2C1_Init+0x78>)
 8000688:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800068a:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_I2C1_Init+0x74>)
 800068c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000690:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <MX_I2C1_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_I2C1_Init+0x74>)
 800069a:	2201      	movs	r2, #1
 800069c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006bc:	480d      	ldr	r0, [pc, #52]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006be:	f001 f9fd 	bl	8001abc <HAL_I2C_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c8:	f000 fa14 	bl	8000af4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006cc:	2100      	movs	r1, #0
 80006ce:	4809      	ldr	r0, [pc, #36]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006d0:	f001 fcec 	bl	80020ac <HAL_I2CEx_ConfigAnalogFilter>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006da:	f000 fa0b 	bl	8000af4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006de:	2100      	movs	r1, #0
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006e2:	f001 fd2e 	bl	8002142 <HAL_I2CEx_ConfigDigitalFilter>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006ec:	f000 fa02 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	2000193c 	.word	0x2000193c
 80006f8:	40005400 	.word	0x40005400

080006fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000702:	4a16      	ldr	r2, [pc, #88]	; (800075c <MX_USART2_UART_Init+0x60>)
 8000704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000714:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000716:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800071a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 800071e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000744:	f003 f984 	bl	8003a50 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 800074e:	f000 f9d1 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200019d0 	.word	0x200019d0
 800075c:	40004400 	.word	0x40004400

08000760 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_DMA_Init+0x48>)
 8000768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800076a:	4a0f      	ldr	r2, [pc, #60]	; (80007a8 <MX_DMA_Init+0x48>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6493      	str	r3, [r2, #72]	; 0x48
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <MX_DMA_Init+0x48>)
 8000774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2105      	movs	r1, #5
 8000782:	2010      	movs	r0, #16
 8000784:	f000 fddc 	bl	8001340 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000788:	2010      	movs	r0, #16
 800078a:	f000 fdf5 	bl	8001378 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2105      	movs	r1, #5
 8000792:	2011      	movs	r0, #17
 8000794:	f000 fdd4 	bl	8001340 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000798:	2011      	movs	r0, #17
 800079a:	f000 fded 	bl	8001378 <HAL_NVIC_EnableIRQ>

}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a16      	ldr	r2, [pc, #88]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	4a10      	ldr	r2, [pc, #64]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_GPIO_Init+0x8c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2108      	movs	r1, #8
 800080e:	480b      	ldr	r0, [pc, #44]	; (800083c <MX_GPIO_Init+0x90>)
 8000810:	f001 f922 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000814:	2308      	movs	r3, #8
 8000816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	4619      	mov	r1, r3
 800082a:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_GPIO_Init+0x90>)
 800082c:	f000 ffaa 	bl	8001784 <HAL_GPIO_Init>

}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40021000 	.word	0x40021000
 800083c:	48000400 	.word	0x48000400

08000840 <pca9685_init>:
	HAL_I2C_Master_Receive(hi2c,address,res,1,1);
	return res;
}

void pca9685_init(I2C_HandleTypeDef *hi2c, uint8_t address)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af02      	add	r7, sp, #8
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	460b      	mov	r3, r1
 800084a:	70fb      	strb	r3, [r7, #3]
 #define PCA9685_MODE1 0x00
 uint8_t initStruct[2];
 uint8_t prescale = 0x03; // hardcoded
 800084c:	2303      	movs	r3, #3
 800084e:	73fb      	strb	r3, [r7, #15]
 HAL_I2C_Master_Transmit(hi2c, address, PCA9685_MODE1, 1, 1);
 8000850:	78fb      	ldrb	r3, [r7, #3]
 8000852:	b299      	uxth	r1, r3
 8000854:	2301      	movs	r3, #1
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	2301      	movs	r3, #1
 800085a:	2200      	movs	r2, #0
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f001 f9bd 	bl	8001bdc <HAL_I2C_Master_Transmit>
 uint8_t oldmode = 0x00; // hardcoded
 8000862:	2300      	movs	r3, #0
 8000864:	73bb      	strb	r3, [r7, #14]
 //uint8_t oldmode = PCA9685_read(hi2c,address,PCA9685_MODE1);
 // HAL_I2C_Master_Receive(hi2c, address, &oldmode, 1, 1);
 uint8_t newmode = ((oldmode & 0x7F) | 0x10);
 8000866:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800086a:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800086e:	b25b      	sxtb	r3, r3
 8000870:	f043 0310 	orr.w	r3, r3, #16
 8000874:	b25b      	sxtb	r3, r3
 8000876:	737b      	strb	r3, [r7, #13]
 initStruct[0] = PCA9685_MODE1;
 8000878:	2300      	movs	r3, #0
 800087a:	723b      	strb	r3, [r7, #8]
 initStruct[1] = newmode;
 800087c:	7b7b      	ldrb	r3, [r7, #13]
 800087e:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(hi2c, address, initStruct, 2, 1);
 8000880:	78fb      	ldrb	r3, [r7, #3]
 8000882:	b299      	uxth	r1, r3
 8000884:	f107 0208 	add.w	r2, r7, #8
 8000888:	2301      	movs	r3, #1
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	2302      	movs	r3, #2
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f001 f9a4 	bl	8001bdc <HAL_I2C_Master_Transmit>
 //initStruct[0] = 0xFE;
 initStruct[1] = prescale;
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(hi2c, address, initStruct, 2, 1);
 8000898:	78fb      	ldrb	r3, [r7, #3]
 800089a:	b299      	uxth	r1, r3
 800089c:	f107 0208 	add.w	r2, r7, #8
 80008a0:	2301      	movs	r3, #1
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2302      	movs	r3, #2
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f001 f998 	bl	8001bdc <HAL_I2C_Master_Transmit>
 //initStruct[0] = PCA9685_MODE1;
 initStruct[1] = oldmode;
 80008ac:	7bbb      	ldrb	r3, [r7, #14]
 80008ae:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(hi2c, address, initStruct, 2, 1);
 80008b0:	78fb      	ldrb	r3, [r7, #3]
 80008b2:	b299      	uxth	r1, r3
 80008b4:	f107 0208 	add.w	r2, r7, #8
 80008b8:	2301      	movs	r3, #1
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2302      	movs	r3, #2
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f001 f98c 	bl	8001bdc <HAL_I2C_Master_Transmit>
 osDelay(5);
 80008c4:	2005      	movs	r0, #5
 80008c6:	f003 ff83 	bl	80047d0 <osDelay>
 initStruct[1] = (oldmode | 0xA1);
 80008ca:	7bbb      	ldrb	r3, [r7, #14]
 80008cc:	f063 035e 	orn	r3, r3, #94	; 0x5e
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(hi2c, address, initStruct, 2, 1);
 80008d4:	78fb      	ldrb	r3, [r7, #3]
 80008d6:	b299      	uxth	r1, r3
 80008d8:	f107 0208 	add.w	r2, r7, #8
 80008dc:	2301      	movs	r3, #1
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	2302      	movs	r3, #2
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f001 f97a 	bl	8001bdc <HAL_I2C_Master_Transmit>
}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <pca9685_mult_pwm>:
	uint8_t outputBuffer[] = {0x06 + 4*num, on, (on >> 8), off, (off >> 8)};
	HAL_I2C_Master_Transmit(hi2c, address, outputBuffer, sizeof(outputBuffer), 1);
}

void pca9685_mult_pwm(I2C_HandleTypeDef *hi2c, uint8_t address, uint16_t num, uint16_t on, uint16_t off)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af02      	add	r7, sp, #8
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	4608      	mov	r0, r1
 80008fa:	4611      	mov	r1, r2
 80008fc:	461a      	mov	r2, r3
 80008fe:	4603      	mov	r3, r0
 8000900:	72fb      	strb	r3, [r7, #11]
 8000902:	460b      	mov	r3, r1
 8000904:	813b      	strh	r3, [r7, #8]
 8000906:	4613      	mov	r3, r2
 8000908:	80fb      	strh	r3, [r7, #6]
	int i, iter;

	for (i=1, iter=1; i<65535; i<<=1, iter++)
 800090a:	2301      	movs	r3, #1
 800090c:	61fb      	str	r3, [r7, #28]
 800090e:	2301      	movs	r3, #1
 8000910:	61bb      	str	r3, [r7, #24]
 8000912:	e02c      	b.n	800096e <pca9685_mult_pwm+0x7e>
	{
		if (num & i)
 8000914:	893a      	ldrh	r2, [r7, #8]
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	4013      	ands	r3, r2
 800091a:	2b00      	cmp	r3, #0
 800091c:	d021      	beq.n	8000962 <pca9685_mult_pwm+0x72>
		{
			uint8_t outputBuffer[] = {0x06 + 4*((iter)-1), on, (on >> 8), off, (off >> 8)};
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	3b01      	subs	r3, #1
 8000922:	b2db      	uxtb	r3, r3
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	b2db      	uxtb	r3, r3
 8000928:	3306      	adds	r3, #6
 800092a:	b2db      	uxtb	r3, r3
 800092c:	743b      	strb	r3, [r7, #16]
 800092e:	88fb      	ldrh	r3, [r7, #6]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	747b      	strb	r3, [r7, #17]
 8000934:	88fb      	ldrh	r3, [r7, #6]
 8000936:	0a1b      	lsrs	r3, r3, #8
 8000938:	b29b      	uxth	r3, r3
 800093a:	b2db      	uxtb	r3, r3
 800093c:	74bb      	strb	r3, [r7, #18]
 800093e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000940:	b2db      	uxtb	r3, r3
 8000942:	74fb      	strb	r3, [r7, #19]
 8000944:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000946:	0a1b      	lsrs	r3, r3, #8
 8000948:	b29b      	uxth	r3, r3
 800094a:	b2db      	uxtb	r3, r3
 800094c:	753b      	strb	r3, [r7, #20]
			HAL_I2C_Master_Transmit(hi2c, address, outputBuffer, sizeof(outputBuffer), 1);
 800094e:	7afb      	ldrb	r3, [r7, #11]
 8000950:	b299      	uxth	r1, r3
 8000952:	f107 0210 	add.w	r2, r7, #16
 8000956:	2301      	movs	r3, #1
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	2305      	movs	r3, #5
 800095c:	68f8      	ldr	r0, [r7, #12]
 800095e:	f001 f93d 	bl	8001bdc <HAL_I2C_Master_Transmit>
	for (i=1, iter=1; i<65535; i<<=1, iter++)
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	61fb      	str	r3, [r7, #28]
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	3301      	adds	r3, #1
 800096c:	61bb      	str	r3, [r7, #24]
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000974:	4293      	cmp	r3, r2
 8000976:	ddcd      	ble.n	8000914 <pca9685_mult_pwm+0x24>
	{
		uint8_t outputBuffer[] = {0x06 + 4*((num & 0b00000010)-1), on, (on >> 8), off, (off >> 8)};
		HAL_I2C_Master_Transmit(hi2c, address, outputBuffer, sizeof(outputBuffer), 1);
	}
	*/
}
 8000978:	bf00      	nop
 800097a:	3720      	adds	r7, #32
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <scenario2>:
	 		 osDelay(5);
	 	 }
	 }
}

void scenario2(){
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af02      	add	r7, sp, #8
	 uint8_t I2C_address = 0x80;
 8000986:	2380      	movs	r3, #128	; 0x80
 8000988:	71fb      	strb	r3, [r7, #7]
	 pca9685_init(&hi2c1, I2C_address);
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	4619      	mov	r1, r3
 800098e:	4826      	ldr	r0, [pc, #152]	; (8000a28 <scenario2+0xa8>)
 8000990:	f7ff ff56 	bl	8000840 <pca9685_init>
	 //turn off all LED
	 //all_led_off(&hi2c1, I2C_address);

	 //uint16_t channel = 0b1001001110010101;
	 uint16_t channel = 0xFFFF;
 8000994:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000998:	80bb      	strh	r3, [r7, #4]

	 /* Infinite loop */
	 for(;;)
	 {
		 for(int i=0; i<4096/sharedvar; i++){
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e017      	b.n	80009d0 <scenario2+0x50>
			pca9685_mult_pwm(&hi2c1, I2C_address, channel, 0, 4095-(sharedvar*i));
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <scenario2+0xac>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	fb12 f303 	smulbb	r3, r2, r3
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 80009b2:	330f      	adds	r3, #15
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	88ba      	ldrh	r2, [r7, #4]
 80009b8:	79f9      	ldrb	r1, [r7, #7]
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	2300      	movs	r3, #0
 80009be:	481a      	ldr	r0, [pc, #104]	; (8000a28 <scenario2+0xa8>)
 80009c0:	f7ff ff96 	bl	80008f0 <pca9685_mult_pwm>
			//pca9685_pwm(&hi2c1, I2C_address, 15, 0, 4095-(sharedvar*i));
			osDelay(5);
 80009c4:	2005      	movs	r0, #5
 80009c6:	f003 ff03 	bl	80047d0 <osDelay>
		 for(int i=0; i<4096/sharedvar; i++){
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	3301      	adds	r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <scenario2+0xac>)
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009da:	fb93 f3f2 	sdiv	r3, r3, r2
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	dbdd      	blt.n	80009a0 <scenario2+0x20>
		 }

	 	 for(int i=0; i<4096/sharedvar; i++){
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	e013      	b.n	8000a12 <scenario2+0x92>
	 		pca9685_mult_pwm(&hi2c1, I2C_address, channel, 0, (sharedvar*i));
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <scenario2+0xac>)
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	fb12 f303 	smulbb	r3, r2, r3
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	88ba      	ldrh	r2, [r7, #4]
 80009fa:	79f9      	ldrb	r1, [r7, #7]
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	2300      	movs	r3, #0
 8000a00:	4809      	ldr	r0, [pc, #36]	; (8000a28 <scenario2+0xa8>)
 8000a02:	f7ff ff75 	bl	80008f0 <pca9685_mult_pwm>
	 		//pca9685_pwm(&hi2c1, I2C_address, 15 ,0, 4095-(sharedvar*i));
	 		osDelay(5);
 8000a06:	2005      	movs	r0, #5
 8000a08:	f003 fee2 	bl	80047d0 <osDelay>
	 	 for(int i=0; i<4096/sharedvar; i++){
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <scenario2+0xac>)
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8000a20:	68ba      	ldr	r2, [r7, #8]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	dbe1      	blt.n	80009ea <scenario2+0x6a>
		 for(int i=0; i<4096/sharedvar; i++){
 8000a26:	e7b8      	b.n	800099a <scenario2+0x1a>
 8000a28:	2000193c 	.word	0x2000193c
 8000a2c:	20000000 	.word	0x20000000

08000a30 <ComUsartTask>:
	 	 }
	 }
}

void ComUsartTask(void *argument){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	uint8_t outputBuffer[] = {'M','D','M','m','1','Q','1','4','P','r'};
 8000a38:	4a1c      	ldr	r2, [pc, #112]	; (8000aac <ComUsartTask+0x7c>)
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a40:	c303      	stmia	r3!, {r0, r1}
 8000a42:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, &outputBuffer[1], 1,500);
		HAL_UART_Transmit(&huart2, &outputBuffer[2], 1,500);
		HAL_UART_Transmit(&huart2, &outputBuffer[3], 1,500);
		*/

		while (HAL_UART_Receive_DMA(&huart2, rxBuffer, sizeof(rxBuffer)) != HAL_OK)
 8000a44:	e006      	b.n	8000a54 <ComUsartTask+0x24>
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000a46:	2108      	movs	r1, #8
 8000a48:	4819      	ldr	r0, [pc, #100]	; (8000ab0 <ComUsartTask+0x80>)
 8000a4a:	f001 f81d 	bl	8001a88 <HAL_GPIO_TogglePin>
			osDelay(5);
 8000a4e:	2005      	movs	r0, #5
 8000a50:	f003 febe 	bl	80047d0 <osDelay>
		while (HAL_UART_Receive_DMA(&huart2, rxBuffer, sizeof(rxBuffer)) != HAL_OK)
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	2208      	movs	r2, #8
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4815      	ldr	r0, [pc, #84]	; (8000ab4 <ComUsartTask+0x84>)
 8000a5e:	f003 f8d9 	bl	8003c14 <HAL_UART_Receive_DMA>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1ee      	bne.n	8000a46 <ComUsartTask+0x16>

		}
		osDelay(5);
 8000a68:	2005      	movs	r0, #5
 8000a6a:	f003 feb1 	bl	80047d0 <osDelay>
		if(rxBuffer[0]==0x4D){
 8000a6e:	7b3b      	ldrb	r3, [r7, #12]
 8000a70:	2b4d      	cmp	r3, #77	; 0x4d
 8000a72:	d10b      	bne.n	8000a8c <ComUsartTask+0x5c>
			HAL_UART_Transmit(&huart2,&rxBuffer[1], 1,500);
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	1c59      	adds	r1, r3, #1
 8000a7a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a7e:	2201      	movs	r2, #1
 8000a80:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <ComUsartTask+0x84>)
 8000a82:	f003 f833 	bl	8003aec <HAL_UART_Transmit>
			sharedvar = 8;
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <ComUsartTask+0x88>)
 8000a88:	2208      	movs	r2, #8
 8000a8a:	801a      	strh	r2, [r3, #0]
			//sharedvar = (uint16_t) atoi(rxBuffer[5]);
		}
		if(rxBuffer[0]==0x44){
 8000a8c:	7b3b      	ldrb	r3, [r7, #12]
 8000a8e:	2b44      	cmp	r3, #68	; 0x44
 8000a90:	d1e0      	bne.n	8000a54 <ComUsartTask+0x24>
			HAL_UART_Transmit(&huart2,&rxBuffer[1], 1,500);
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	1c59      	adds	r1, r3, #1
 8000a98:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <ComUsartTask+0x84>)
 8000aa0:	f003 f824 	bl	8003aec <HAL_UART_Transmit>
			sharedvar = 16;
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <ComUsartTask+0x88>)
 8000aa6:	2210      	movs	r2, #16
 8000aa8:	801a      	strh	r2, [r3, #0]
		while (HAL_UART_Receive_DMA(&huart2, rxBuffer, sizeof(rxBuffer)) != HAL_OK)
 8000aaa:	e7d3      	b.n	8000a54 <ComUsartTask+0x24>
 8000aac:	080070d0 	.word	0x080070d0
 8000ab0:	48000400 	.word	0x48000400
 8000ab4:	200019d0 	.word	0x200019d0
 8000ab8:	20000000 	.word	0x20000000

08000abc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//scenario1();
	scenario2();
 8000ac4:	f7ff ff5c 	bl	8000980 <scenario2>
  /* USER CODE END 5 */
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d101      	bne.n	8000ae6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ae2:	f000 fa59 	bl	8000f98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40001000 	.word	0x40001000

08000af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000afa:	e7fe      	b.n	8000afa <Error_Handler+0x6>

08000afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b06:	4a10      	ldr	r2, [pc, #64]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b24:	6593      	str	r3, [r2, #88]	; 0x58
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	210f      	movs	r1, #15
 8000b36:	f06f 0001 	mvn.w	r0, #1
 8000b3a:	f000 fc01 	bl	8001340 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40021000 	.word	0x40021000

08000b4c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a18      	ldr	r2, [pc, #96]	; (8000bcc <HAL_CAN_MspInit+0x80>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d129      	bne.n	8000bc2 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <HAL_CAN_MspInit+0x84>)
 8000b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b72:	4a17      	ldr	r2, [pc, #92]	; (8000bd0 <HAL_CAN_MspInit+0x84>)
 8000b74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b78:	6593      	str	r3, [r2, #88]	; 0x58
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <HAL_CAN_MspInit+0x84>)
 8000b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_CAN_MspInit+0x84>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	4a11      	ldr	r2, [pc, #68]	; (8000bd0 <HAL_CAN_MspInit+0x84>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <HAL_CAN_MspInit+0x84>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000bb0:	2309      	movs	r3, #9
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bbe:	f000 fde1 	bl	8001784 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000bc2:	bf00      	nop
 8000bc4:	3728      	adds	r7, #40	; 0x28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40006400 	.word	0x40006400
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a17      	ldr	r2, [pc, #92]	; (8000c50 <HAL_I2C_MspInit+0x7c>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d127      	bne.n	8000c46 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <HAL_I2C_MspInit+0x80>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	4a16      	ldr	r2, [pc, #88]	; (8000c54 <HAL_I2C_MspInit+0x80>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <HAL_I2C_MspInit+0x80>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c0e:	23c0      	movs	r3, #192	; 0xc0
 8000c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c12:	2312      	movs	r3, #18
 8000c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	480b      	ldr	r0, [pc, #44]	; (8000c58 <HAL_I2C_MspInit+0x84>)
 8000c2a:	f000 fdab 	bl	8001784 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_I2C_MspInit+0x80>)
 8000c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c32:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <HAL_I2C_MspInit+0x80>)
 8000c34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c38:	6593      	str	r3, [r2, #88]	; 0x58
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_I2C_MspInit+0x80>)
 8000c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c46:	bf00      	nop
 8000c48:	3728      	adds	r7, #40	; 0x28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40005400 	.word	0x40005400
 8000c54:	40021000 	.word	0x40021000
 8000c58:	48000400 	.word	0x48000400

08000c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a40      	ldr	r2, [pc, #256]	; (8000d7c <HAL_UART_MspInit+0x120>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d17a      	bne.n	8000d74 <HAL_UART_MspInit+0x118>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c7e:	4b40      	ldr	r3, [pc, #256]	; (8000d80 <HAL_UART_MspInit+0x124>)
 8000c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c82:	4a3f      	ldr	r2, [pc, #252]	; (8000d80 <HAL_UART_MspInit+0x124>)
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c88:	6593      	str	r3, [r2, #88]	; 0x58
 8000c8a:	4b3d      	ldr	r3, [pc, #244]	; (8000d80 <HAL_UART_MspInit+0x124>)
 8000c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	4b3a      	ldr	r3, [pc, #232]	; (8000d80 <HAL_UART_MspInit+0x124>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	4a39      	ldr	r2, [pc, #228]	; (8000d80 <HAL_UART_MspInit+0x124>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca2:	4b37      	ldr	r3, [pc, #220]	; (8000d80 <HAL_UART_MspInit+0x124>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cae:	230c      	movs	r3, #12
 8000cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cbe:	2307      	movs	r3, #7
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ccc:	f000 fd5a 	bl	8001784 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000cd0:	4b2c      	ldr	r3, [pc, #176]	; (8000d84 <HAL_UART_MspInit+0x128>)
 8000cd2:	4a2d      	ldr	r2, [pc, #180]	; (8000d88 <HAL_UART_MspInit+0x12c>)
 8000cd4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000cd6:	4b2b      	ldr	r3, [pc, #172]	; (8000d84 <HAL_UART_MspInit+0x128>)
 8000cd8:	2202      	movs	r2, #2
 8000cda:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cdc:	4b29      	ldr	r3, [pc, #164]	; (8000d84 <HAL_UART_MspInit+0x128>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce2:	4b28      	ldr	r3, [pc, #160]	; (8000d84 <HAL_UART_MspInit+0x128>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ce8:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <HAL_UART_MspInit+0x128>)
 8000cea:	2280      	movs	r2, #128	; 0x80
 8000cec:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cee:	4b25      	ldr	r3, [pc, #148]	; (8000d84 <HAL_UART_MspInit+0x128>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cf4:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <HAL_UART_MspInit+0x128>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000cfa:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <HAL_UART_MspInit+0x128>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d00:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <HAL_UART_MspInit+0x128>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d06:	481f      	ldr	r0, [pc, #124]	; (8000d84 <HAL_UART_MspInit+0x128>)
 8000d08:	f000 fb44 	bl	8001394 <HAL_DMA_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 8000d12:	f7ff feef 	bl	8000af4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a1a      	ldr	r2, [pc, #104]	; (8000d84 <HAL_UART_MspInit+0x128>)
 8000d1a:	66da      	str	r2, [r3, #108]	; 0x6c
 8000d1c:	4a19      	ldr	r2, [pc, #100]	; (8000d84 <HAL_UART_MspInit+0x128>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000d22:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <HAL_UART_MspInit+0x130>)
 8000d24:	4a1a      	ldr	r2, [pc, #104]	; (8000d90 <HAL_UART_MspInit+0x134>)
 8000d26:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000d28:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <HAL_UART_MspInit+0x130>)
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <HAL_UART_MspInit+0x130>)
 8000d30:	2210      	movs	r2, #16
 8000d32:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d34:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <HAL_UART_MspInit+0x130>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <HAL_UART_MspInit+0x130>)
 8000d3c:	2280      	movs	r2, #128	; 0x80
 8000d3e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_UART_MspInit+0x130>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_UART_MspInit+0x130>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_UART_MspInit+0x130>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <HAL_UART_MspInit+0x130>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000d58:	480c      	ldr	r0, [pc, #48]	; (8000d8c <HAL_UART_MspInit+0x130>)
 8000d5a:	f000 fb1b 	bl	8001394 <HAL_DMA_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8000d64:	f7ff fec6 	bl	8000af4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a08      	ldr	r2, [pc, #32]	; (8000d8c <HAL_UART_MspInit+0x130>)
 8000d6c:	669a      	str	r2, [r3, #104]	; 0x68
 8000d6e:	4a07      	ldr	r2, [pc, #28]	; (8000d8c <HAL_UART_MspInit+0x130>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d74:	bf00      	nop
 8000d76:	3728      	adds	r7, #40	; 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40004400 	.word	0x40004400
 8000d80:	40021000 	.word	0x40021000
 8000d84:	200018f4 	.word	0x200018f4
 8000d88:	4002006c 	.word	0x4002006c
 8000d8c:	20001988 	.word	0x20001988
 8000d90:	40020080 	.word	0x40020080

08000d94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08c      	sub	sp, #48	; 0x30
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	2036      	movs	r0, #54	; 0x36
 8000daa:	f000 fac9 	bl	8001340 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dae:	2036      	movs	r0, #54	; 0x36
 8000db0:	f000 fae2 	bl	8001378 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000db4:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <HAL_InitTick+0x9c>)
 8000db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db8:	4a1d      	ldr	r2, [pc, #116]	; (8000e30 <HAL_InitTick+0x9c>)
 8000dba:	f043 0310 	orr.w	r3, r3, #16
 8000dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <HAL_InitTick+0x9c>)
 8000dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc4:	f003 0310 	and.w	r3, r3, #16
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dcc:	f107 0210 	add.w	r2, r7, #16
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4611      	mov	r1, r2
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f002 f836 	bl	8002e48 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ddc:	f002 f808 	bl	8002df0 <HAL_RCC_GetPCLK1Freq>
 8000de0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de4:	4a13      	ldr	r2, [pc, #76]	; (8000e34 <HAL_InitTick+0xa0>)
 8000de6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dea:	0c9b      	lsrs	r3, r3, #18
 8000dec:	3b01      	subs	r3, #1
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_InitTick+0xa4>)
 8000df2:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <HAL_InitTick+0xa8>)
 8000df4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <HAL_InitTick+0xa4>)
 8000df8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dfc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dfe:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <HAL_InitTick+0xa4>)
 8000e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e02:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <HAL_InitTick+0xa4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <HAL_InitTick+0xa4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e10:	4809      	ldr	r0, [pc, #36]	; (8000e38 <HAL_InitTick+0xa4>)
 8000e12:	f002 fb9d 	bl	8003550 <HAL_TIM_Base_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d104      	bne.n	8000e26 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e1c:	4806      	ldr	r0, [pc, #24]	; (8000e38 <HAL_InitTick+0xa4>)
 8000e1e:	f002 fbf9 	bl	8003614 <HAL_TIM_Base_Start_IT>
 8000e22:	4603      	mov	r3, r0
 8000e24:	e000      	b.n	8000e28 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3730      	adds	r7, #48	; 0x30
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40021000 	.word	0x40021000
 8000e34:	431bde83 	.word	0x431bde83
 8000e38:	20001a7c 	.word	0x20001a7c
 8000e3c:	40001000 	.word	0x40001000

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <NMI_Handler+0x4>

08000e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <HardFault_Handler+0x4>

08000e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <MemManage_Handler+0x4>

08000e52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <DMA1_Channel6_IRQHandler+0x10>)
 8000e72:	f000 fba7 	bl	80015c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200018f4 	.word	0x200018f4

08000e80 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <DMA1_Channel7_IRQHandler+0x10>)
 8000e86:	f000 fb9d 	bl	80015c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20001988 	.word	0x20001988

08000e94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <TIM6_DAC_IRQHandler+0x10>)
 8000e9a:	f002 fc0f 	bl	80036bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20001a7c 	.word	0x20001a7c

08000ea8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eac:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <SystemInit+0x64>)
 8000eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb2:	4a16      	ldr	r2, [pc, #88]	; (8000f0c <SystemInit+0x64>)
 8000eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <SystemInit+0x68>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a13      	ldr	r2, [pc, #76]	; (8000f10 <SystemInit+0x68>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <SystemInit+0x68>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <SystemInit+0x68>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a0f      	ldr	r2, [pc, #60]	; (8000f10 <SystemInit+0x68>)
 8000ed4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ed8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000edc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <SystemInit+0x68>)
 8000ee0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ee4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <SystemInit+0x68>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a09      	ldr	r2, [pc, #36]	; (8000f10 <SystemInit+0x68>)
 8000eec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ef0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ef2:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <SystemInit+0x68>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <SystemInit+0x64>)
 8000efa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000efe:	609a      	str	r2, [r3, #8]
#endif
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000ed00 	.word	0xe000ed00
 8000f10:	40021000 	.word	0x40021000

08000f14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f18:	f7ff ffc6 	bl	8000ea8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f1c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f1e:	e003      	b.n	8000f28 <LoopCopyDataInit>

08000f20 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f22:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f24:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f26:	3104      	adds	r1, #4

08000f28 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f28:	480a      	ldr	r0, [pc, #40]	; (8000f54 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f2c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f2e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f30:	d3f6      	bcc.n	8000f20 <CopyDataInit>
	ldr	r2, =_sbss
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f34:	e002      	b.n	8000f3c <LoopFillZerobss>

08000f36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f36:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f38:	f842 3b04 	str.w	r3, [r2], #4

08000f3c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <LoopForever+0x16>)
	cmp	r2, r3
 8000f3e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f40:	d3f9      	bcc.n	8000f36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f42:	f006 f873 	bl	800702c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f46:	f7ff fac3 	bl	80004d0 <main>

08000f4a <LoopForever>:

LoopForever:
    b LoopForever
 8000f4a:	e7fe      	b.n	8000f4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f4c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000f50:	08007194 	.word	0x08007194
	ldr	r0, =_sdata
 8000f54:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f58:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8000f5c:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8000f60:	20001b0c 	.word	0x20001b0c

08000f64 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f64:	e7fe      	b.n	8000f64 <ADC1_IRQHandler>

08000f66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f70:	2003      	movs	r0, #3
 8000f72:	f000 f9da 	bl	800132a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f76:	2000      	movs	r0, #0
 8000f78:	f7ff ff0c 	bl	8000d94 <HAL_InitTick>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d002      	beq.n	8000f88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	71fb      	strb	r3, [r7, #7]
 8000f86:	e001      	b.n	8000f8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f88:	f7ff fdb8 	bl	8000afc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x20>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_IncTick+0x24>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <HAL_IncTick+0x24>)
 8000faa:	6013      	str	r3, [r2, #0]
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	2000000c 	.word	0x2000000c
 8000fbc:	20001ac8 	.word	0x20001ac8

08000fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <HAL_GetTick+0x14>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20001ac8 	.word	0x20001ac8

08000fd8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e0ed      	b.n	80011c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d102      	bne.n	8000ffc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff fda8 	bl	8000b4c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f022 0202 	bic.w	r2, r2, #2
 800100a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800100c:	f7ff ffd8 	bl	8000fc0 <HAL_GetTick>
 8001010:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001012:	e012      	b.n	800103a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001014:	f7ff ffd4 	bl	8000fc0 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b0a      	cmp	r3, #10
 8001020:	d90b      	bls.n	800103a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001026:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2205      	movs	r2, #5
 8001032:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e0c5      	b.n	80011c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1e5      	bne.n	8001014 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f042 0201 	orr.w	r2, r2, #1
 8001056:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001058:	f7ff ffb2 	bl	8000fc0 <HAL_GetTick>
 800105c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800105e:	e012      	b.n	8001086 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001060:	f7ff ffae 	bl	8000fc0 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b0a      	cmp	r3, #10
 800106c:	d90b      	bls.n	8001086 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001072:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2205      	movs	r2, #5
 800107e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e09f      	b.n	80011c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	2b00      	cmp	r3, #0
 8001092:	d0e5      	beq.n	8001060 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	7e1b      	ldrb	r3, [r3, #24]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d108      	bne.n	80010ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	e007      	b.n	80010be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	7e5b      	ldrb	r3, [r3, #25]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d108      	bne.n	80010d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	e007      	b.n	80010e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7e9b      	ldrb	r3, [r3, #26]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d108      	bne.n	8001102 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f042 0220 	orr.w	r2, r2, #32
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	e007      	b.n	8001112 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f022 0220 	bic.w	r2, r2, #32
 8001110:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	7edb      	ldrb	r3, [r3, #27]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d108      	bne.n	800112c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f022 0210 	bic.w	r2, r2, #16
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	e007      	b.n	800113c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f042 0210 	orr.w	r2, r2, #16
 800113a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	7f1b      	ldrb	r3, [r3, #28]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d108      	bne.n	8001156 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 0208 	orr.w	r2, r2, #8
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	e007      	b.n	8001166 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f022 0208 	bic.w	r2, r2, #8
 8001164:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	7f5b      	ldrb	r3, [r3, #29]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d108      	bne.n	8001180 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f042 0204 	orr.w	r2, r2, #4
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	e007      	b.n	8001190 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 0204 	bic.w	r2, r2, #4
 800118e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	431a      	orrs	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	431a      	orrs	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	ea42 0103 	orr.w	r1, r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	1e5a      	subs	r2, r3, #1
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2201      	movs	r2, #1
 80011c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ec:	4013      	ands	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001202:	4a04      	ldr	r2, [pc, #16]	; (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	60d3      	str	r3, [r2, #12]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <__NVIC_GetPriorityGrouping+0x18>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	f003 0307 	and.w	r3, r3, #7
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	2b00      	cmp	r3, #0
 8001244:	db0b      	blt.n	800125e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	f003 021f 	and.w	r2, r3, #31
 800124c:	4907      	ldr	r1, [pc, #28]	; (800126c <__NVIC_EnableIRQ+0x38>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	095b      	lsrs	r3, r3, #5
 8001254:	2001      	movs	r0, #1
 8001256:	fa00 f202 	lsl.w	r2, r0, r2
 800125a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000e100 	.word	0xe000e100

08001270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	6039      	str	r1, [r7, #0]
 800127a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001280:	2b00      	cmp	r3, #0
 8001282:	db0a      	blt.n	800129a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	b2da      	uxtb	r2, r3
 8001288:	490c      	ldr	r1, [pc, #48]	; (80012bc <__NVIC_SetPriority+0x4c>)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	0112      	lsls	r2, r2, #4
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	440b      	add	r3, r1
 8001294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001298:	e00a      	b.n	80012b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4908      	ldr	r1, [pc, #32]	; (80012c0 <__NVIC_SetPriority+0x50>)
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	3b04      	subs	r3, #4
 80012a8:	0112      	lsls	r2, r2, #4
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	440b      	add	r3, r1
 80012ae:	761a      	strb	r2, [r3, #24]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000e100 	.word	0xe000e100
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b089      	sub	sp, #36	; 0x24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f1c3 0307 	rsb	r3, r3, #7
 80012de:	2b04      	cmp	r3, #4
 80012e0:	bf28      	it	cs
 80012e2:	2304      	movcs	r3, #4
 80012e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3304      	adds	r3, #4
 80012ea:	2b06      	cmp	r3, #6
 80012ec:	d902      	bls.n	80012f4 <NVIC_EncodePriority+0x30>
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3b03      	subs	r3, #3
 80012f2:	e000      	b.n	80012f6 <NVIC_EncodePriority+0x32>
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	f04f 32ff 	mov.w	r2, #4294967295
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43da      	mvns	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	401a      	ands	r2, r3
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800130c:	f04f 31ff 	mov.w	r1, #4294967295
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fa01 f303 	lsl.w	r3, r1, r3
 8001316:	43d9      	mvns	r1, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	4313      	orrs	r3, r2
         );
}
 800131e:	4618      	mov	r0, r3
 8001320:	3724      	adds	r7, #36	; 0x24
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ff4c 	bl	80011d0 <__NVIC_SetPriorityGrouping>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001352:	f7ff ff61 	bl	8001218 <__NVIC_GetPriorityGrouping>
 8001356:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	68b9      	ldr	r1, [r7, #8]
 800135c:	6978      	ldr	r0, [r7, #20]
 800135e:	f7ff ffb1 	bl	80012c4 <NVIC_EncodePriority>
 8001362:	4602      	mov	r2, r0
 8001364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ff80 	bl	8001270 <__NVIC_SetPriority>
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff54 	bl	8001234 <__NVIC_EnableIRQ>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e098      	b.n	80014d8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b4d      	ldr	r3, [pc, #308]	; (80014e4 <HAL_DMA_Init+0x150>)
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d80f      	bhi.n	80013d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b4b      	ldr	r3, [pc, #300]	; (80014e8 <HAL_DMA_Init+0x154>)
 80013ba:	4413      	add	r3, r2
 80013bc:	4a4b      	ldr	r2, [pc, #300]	; (80014ec <HAL_DMA_Init+0x158>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	091b      	lsrs	r3, r3, #4
 80013c4:	009a      	lsls	r2, r3, #2
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a48      	ldr	r2, [pc, #288]	; (80014f0 <HAL_DMA_Init+0x15c>)
 80013ce:	641a      	str	r2, [r3, #64]	; 0x40
 80013d0:	e00e      	b.n	80013f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	4b46      	ldr	r3, [pc, #280]	; (80014f4 <HAL_DMA_Init+0x160>)
 80013da:	4413      	add	r3, r2
 80013dc:	4a43      	ldr	r2, [pc, #268]	; (80014ec <HAL_DMA_Init+0x158>)
 80013de:	fba2 2303 	umull	r2, r3, r2, r3
 80013e2:	091b      	lsrs	r3, r3, #4
 80013e4:	009a      	lsls	r2, r3, #2
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a42      	ldr	r2, [pc, #264]	; (80014f8 <HAL_DMA_Init+0x164>)
 80013ee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2202      	movs	r2, #2
 80013f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800140a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001414:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001420:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800142c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001434:	68fa      	ldr	r2, [r7, #12]
 8001436:	4313      	orrs	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800144a:	d039      	beq.n	80014c0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	4a27      	ldr	r2, [pc, #156]	; (80014f0 <HAL_DMA_Init+0x15c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d11a      	bne.n	800148c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001456:	4b29      	ldr	r3, [pc, #164]	; (80014fc <HAL_DMA_Init+0x168>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f003 031c 	and.w	r3, r3, #28
 8001462:	210f      	movs	r1, #15
 8001464:	fa01 f303 	lsl.w	r3, r1, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	4924      	ldr	r1, [pc, #144]	; (80014fc <HAL_DMA_Init+0x168>)
 800146c:	4013      	ands	r3, r2
 800146e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <HAL_DMA_Init+0x168>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6859      	ldr	r1, [r3, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147c:	f003 031c 	and.w	r3, r3, #28
 8001480:	fa01 f303 	lsl.w	r3, r1, r3
 8001484:	491d      	ldr	r1, [pc, #116]	; (80014fc <HAL_DMA_Init+0x168>)
 8001486:	4313      	orrs	r3, r2
 8001488:	600b      	str	r3, [r1, #0]
 800148a:	e019      	b.n	80014c0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800148c:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <HAL_DMA_Init+0x16c>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001494:	f003 031c 	and.w	r3, r3, #28
 8001498:	210f      	movs	r1, #15
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	4917      	ldr	r1, [pc, #92]	; (8001500 <HAL_DMA_Init+0x16c>)
 80014a2:	4013      	ands	r3, r2
 80014a4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80014a6:	4b16      	ldr	r3, [pc, #88]	; (8001500 <HAL_DMA_Init+0x16c>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6859      	ldr	r1, [r3, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	f003 031c 	and.w	r3, r3, #28
 80014b6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ba:	4911      	ldr	r1, [pc, #68]	; (8001500 <HAL_DMA_Init+0x16c>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	40020407 	.word	0x40020407
 80014e8:	bffdfff8 	.word	0xbffdfff8
 80014ec:	cccccccd 	.word	0xcccccccd
 80014f0:	40020000 	.word	0x40020000
 80014f4:	bffdfbf8 	.word	0xbffdfbf8
 80014f8:	40020400 	.word	0x40020400
 80014fc:	400200a8 	.word	0x400200a8
 8001500:	400204a8 	.word	0x400204a8

08001504 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800151c:	2b01      	cmp	r3, #1
 800151e:	d101      	bne.n	8001524 <HAL_DMA_Start_IT+0x20>
 8001520:	2302      	movs	r3, #2
 8001522:	e04b      	b.n	80015bc <HAL_DMA_Start_IT+0xb8>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2201      	movs	r2, #1
 8001528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b01      	cmp	r3, #1
 8001536:	d13a      	bne.n	80015ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2202      	movs	r2, #2
 800153c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2200      	movs	r2, #0
 8001544:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0201 	bic.w	r2, r2, #1
 8001554:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	68b9      	ldr	r1, [r7, #8]
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f000 f8e0 	bl	8001722 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	2b00      	cmp	r3, #0
 8001568:	d008      	beq.n	800157c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f042 020e 	orr.w	r2, r2, #14
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	e00f      	b.n	800159c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 0204 	bic.w	r2, r2, #4
 800158a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 020a 	orr.w	r2, r2, #10
 800159a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0201 	orr.w	r2, r2, #1
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	e005      	b.n	80015ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80015b6:	2302      	movs	r3, #2
 80015b8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80015ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e0:	f003 031c 	and.w	r3, r3, #28
 80015e4:	2204      	movs	r2, #4
 80015e6:	409a      	lsls	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d026      	beq.n	800163e <HAL_DMA_IRQHandler+0x7a>
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d021      	beq.n	800163e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0320 	and.w	r3, r3, #32
 8001604:	2b00      	cmp	r3, #0
 8001606:	d107      	bne.n	8001618 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0204 	bic.w	r2, r2, #4
 8001616:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161c:	f003 021c 	and.w	r2, r3, #28
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	2104      	movs	r1, #4
 8001626:	fa01 f202 	lsl.w	r2, r1, r2
 800162a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001630:	2b00      	cmp	r3, #0
 8001632:	d071      	beq.n	8001718 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800163c:	e06c      	b.n	8001718 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	f003 031c 	and.w	r3, r3, #28
 8001646:	2202      	movs	r2, #2
 8001648:	409a      	lsls	r2, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	4013      	ands	r3, r2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d02e      	beq.n	80016b0 <HAL_DMA_IRQHandler+0xec>
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d029      	beq.n	80016b0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0320 	and.w	r3, r3, #32
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10b      	bne.n	8001682 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 020a 	bic.w	r2, r2, #10
 8001678:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f003 021c 	and.w	r2, r3, #28
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	2102      	movs	r1, #2
 8001690:	fa01 f202 	lsl.w	r2, r1, r2
 8001694:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d038      	beq.n	8001718 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80016ae:	e033      	b.n	8001718 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b4:	f003 031c 	and.w	r3, r3, #28
 80016b8:	2208      	movs	r2, #8
 80016ba:	409a      	lsls	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4013      	ands	r3, r2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d02a      	beq.n	800171a <HAL_DMA_IRQHandler+0x156>
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d025      	beq.n	800171a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 020e 	bic.w	r2, r2, #14
 80016dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	f003 021c 	and.w	r2, r3, #28
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	2101      	movs	r1, #1
 80016ec:	fa01 f202 	lsl.w	r2, r1, r2
 80016f0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170c:	2b00      	cmp	r3, #0
 800170e:	d004      	beq.n	800171a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001718:	bf00      	nop
 800171a:	bf00      	nop
}
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001722:	b480      	push	{r7}
 8001724:	b085      	sub	sp, #20
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001734:	f003 021c 	and.w	r2, r3, #28
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	2101      	movs	r1, #1
 800173e:	fa01 f202 	lsl.w	r2, r1, r2
 8001742:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	2b10      	cmp	r3, #16
 8001752:	d108      	bne.n	8001766 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001764:	e007      	b.n	8001776 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	60da      	str	r2, [r3, #12]
}
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001784:	b480      	push	{r7}
 8001786:	b087      	sub	sp, #28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001792:	e148      	b.n	8001a26 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	2101      	movs	r1, #1
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	fa01 f303 	lsl.w	r3, r1, r3
 80017a0:	4013      	ands	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 813a 	beq.w	8001a20 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d00b      	beq.n	80017cc <HAL_GPIO_Init+0x48>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d007      	beq.n	80017cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017c0:	2b11      	cmp	r3, #17
 80017c2:	d003      	beq.n	80017cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b12      	cmp	r3, #18
 80017ca:	d130      	bne.n	800182e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	2203      	movs	r2, #3
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	68da      	ldr	r2, [r3, #12]
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001802:	2201      	movs	r2, #1
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	091b      	lsrs	r3, r3, #4
 8001818:	f003 0201 	and.w	r2, r3, #1
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	2203      	movs	r2, #3
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0xea>
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b12      	cmp	r3, #18
 800186c:	d123      	bne.n	80018b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	08da      	lsrs	r2, r3, #3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3208      	adds	r2, #8
 8001876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800187a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	220f      	movs	r2, #15
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4013      	ands	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	691a      	ldr	r2, [r3, #16]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	08da      	lsrs	r2, r3, #3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3208      	adds	r2, #8
 80018b0:	6939      	ldr	r1, [r7, #16]
 80018b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	2203      	movs	r2, #3
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4013      	ands	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0203 	and.w	r2, r3, #3
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 8094 	beq.w	8001a20 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f8:	4b52      	ldr	r3, [pc, #328]	; (8001a44 <HAL_GPIO_Init+0x2c0>)
 80018fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fc:	4a51      	ldr	r2, [pc, #324]	; (8001a44 <HAL_GPIO_Init+0x2c0>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6613      	str	r3, [r2, #96]	; 0x60
 8001904:	4b4f      	ldr	r3, [pc, #316]	; (8001a44 <HAL_GPIO_Init+0x2c0>)
 8001906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001910:	4a4d      	ldr	r2, [pc, #308]	; (8001a48 <HAL_GPIO_Init+0x2c4>)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	089b      	lsrs	r3, r3, #2
 8001916:	3302      	adds	r3, #2
 8001918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	220f      	movs	r2, #15
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800193a:	d00d      	beq.n	8001958 <HAL_GPIO_Init+0x1d4>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a43      	ldr	r2, [pc, #268]	; (8001a4c <HAL_GPIO_Init+0x2c8>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d007      	beq.n	8001954 <HAL_GPIO_Init+0x1d0>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a42      	ldr	r2, [pc, #264]	; (8001a50 <HAL_GPIO_Init+0x2cc>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d101      	bne.n	8001950 <HAL_GPIO_Init+0x1cc>
 800194c:	2302      	movs	r3, #2
 800194e:	e004      	b.n	800195a <HAL_GPIO_Init+0x1d6>
 8001950:	2307      	movs	r3, #7
 8001952:	e002      	b.n	800195a <HAL_GPIO_Init+0x1d6>
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <HAL_GPIO_Init+0x1d6>
 8001958:	2300      	movs	r3, #0
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	f002 0203 	and.w	r2, r2, #3
 8001960:	0092      	lsls	r2, r2, #2
 8001962:	4093      	lsls	r3, r2
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4313      	orrs	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800196a:	4937      	ldr	r1, [pc, #220]	; (8001a48 <HAL_GPIO_Init+0x2c4>)
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	089b      	lsrs	r3, r3, #2
 8001970:	3302      	adds	r3, #2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001978:	4b36      	ldr	r3, [pc, #216]	; (8001a54 <HAL_GPIO_Init+0x2d0>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	43db      	mvns	r3, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4313      	orrs	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800199c:	4a2d      	ldr	r2, [pc, #180]	; (8001a54 <HAL_GPIO_Init+0x2d0>)
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80019a2:	4b2c      	ldr	r3, [pc, #176]	; (8001a54 <HAL_GPIO_Init+0x2d0>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019c6:	4a23      	ldr	r2, [pc, #140]	; (8001a54 <HAL_GPIO_Init+0x2d0>)
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019cc:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <HAL_GPIO_Init+0x2d0>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019f0:	4a18      	ldr	r2, [pc, #96]	; (8001a54 <HAL_GPIO_Init+0x2d0>)
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019f6:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <HAL_GPIO_Init+0x2d0>)
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	43db      	mvns	r3, r3
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a1a:	4a0e      	ldr	r2, [pc, #56]	; (8001a54 <HAL_GPIO_Init+0x2d0>)
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	3301      	adds	r3, #1
 8001a24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f47f aeaf 	bne.w	8001794 <HAL_GPIO_Init+0x10>
  }
}
 8001a36:	bf00      	nop
 8001a38:	371c      	adds	r7, #28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40010000 	.word	0x40010000
 8001a4c:	48000400 	.word	0x48000400
 8001a50:	48000800 	.word	0x48000800
 8001a54:	40010400 	.word	0x40010400

08001a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
 8001a64:	4613      	mov	r3, r2
 8001a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a68:	787b      	ldrb	r3, [r7, #1]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a6e:	887a      	ldrh	r2, [r7, #2]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a74:	e002      	b.n	8001a7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a76:	887a      	ldrh	r2, [r7, #2]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a9a:	887a      	ldrh	r2, [r7, #2]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	041a      	lsls	r2, r3, #16
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	43d9      	mvns	r1, r3
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	400b      	ands	r3, r1
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	619a      	str	r2, [r3, #24]
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e081      	b.n	8001bd2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d106      	bne.n	8001ae8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff f876 	bl	8000bd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2224      	movs	r2, #36	; 0x24
 8001aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0201 	bic.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b0c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b1c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d107      	bne.n	8001b36 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	e006      	b.n	8001b44 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689a      	ldr	r2, [r3, #8]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b42:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d104      	bne.n	8001b56 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	691a      	ldr	r2, [r3, #16]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	ea42 0103 	orr.w	r1, r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	021a      	lsls	r2, r3, #8
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69d9      	ldr	r1, [r3, #28]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a1a      	ldr	r2, [r3, #32]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0201 	orr.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af02      	add	r7, sp, #8
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	607a      	str	r2, [r7, #4]
 8001be6:	461a      	mov	r2, r3
 8001be8:	460b      	mov	r3, r1
 8001bea:	817b      	strh	r3, [r7, #10]
 8001bec:	4613      	mov	r3, r2
 8001bee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b20      	cmp	r3, #32
 8001bfa:	f040 80da 	bne.w	8001db2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d101      	bne.n	8001c0c <HAL_I2C_Master_Transmit+0x30>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	e0d3      	b.n	8001db4 <HAL_I2C_Master_Transmit+0x1d8>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c14:	f7ff f9d4 	bl	8000fc0 <HAL_GetTick>
 8001c18:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	2319      	movs	r3, #25
 8001c20:	2201      	movs	r2, #1
 8001c22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f000 f8f0 	bl	8001e0c <I2C_WaitOnFlagUntilTimeout>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e0be      	b.n	8001db4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2221      	movs	r2, #33	; 0x21
 8001c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2210      	movs	r2, #16
 8001c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	893a      	ldrh	r2, [r7, #8]
 8001c56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	2bff      	cmp	r3, #255	; 0xff
 8001c66:	d90e      	bls.n	8001c86 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	22ff      	movs	r2, #255	; 0xff
 8001c6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	8979      	ldrh	r1, [r7, #10]
 8001c76:	4b51      	ldr	r3, [pc, #324]	; (8001dbc <HAL_I2C_Master_Transmit+0x1e0>)
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 f9e6 	bl	8002050 <I2C_TransferConfig>
 8001c84:	e06c      	b.n	8001d60 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	8979      	ldrh	r1, [r7, #10]
 8001c98:	4b48      	ldr	r3, [pc, #288]	; (8001dbc <HAL_I2C_Master_Transmit+0x1e0>)
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f000 f9d5 	bl	8002050 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001ca6:	e05b      	b.n	8001d60 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	6a39      	ldr	r1, [r7, #32]
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 f8ed 	bl	8001e8c <I2C_WaitOnTXISFlagUntilTimeout>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e07b      	b.n	8001db4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	781a      	ldrb	r2, [r3, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d034      	beq.n	8001d60 <HAL_I2C_Master_Transmit+0x184>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d130      	bne.n	8001d60 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	2200      	movs	r2, #0
 8001d06:	2180      	movs	r1, #128	; 0x80
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f000 f87f 	bl	8001e0c <I2C_WaitOnFlagUntilTimeout>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e04d      	b.n	8001db4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	2bff      	cmp	r3, #255	; 0xff
 8001d20:	d90e      	bls.n	8001d40 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	22ff      	movs	r2, #255	; 0xff
 8001d26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	8979      	ldrh	r1, [r7, #10]
 8001d30:	2300      	movs	r3, #0
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f000 f989 	bl	8002050 <I2C_TransferConfig>
 8001d3e:	e00f      	b.n	8001d60 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	8979      	ldrh	r1, [r7, #10]
 8001d52:	2300      	movs	r3, #0
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 f978 	bl	8002050 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d19e      	bne.n	8001ca8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	6a39      	ldr	r1, [r7, #32]
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 f8cc 	bl	8001f0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e01a      	b.n	8001db4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2220      	movs	r2, #32
 8001d84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6859      	ldr	r1, [r3, #4]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_I2C_Master_Transmit+0x1e4>)
 8001d92:	400b      	ands	r3, r1
 8001d94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2220      	movs	r2, #32
 8001d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	e000      	b.n	8001db4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001db2:	2302      	movs	r3, #2
  }
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	80002000 	.word	0x80002000
 8001dc0:	fe00e800 	.word	0xfe00e800

08001dc4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d103      	bne.n	8001de2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2200      	movs	r2, #0
 8001de0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d007      	beq.n	8001e00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	699a      	ldr	r2, [r3, #24]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	619a      	str	r2, [r3, #24]
  }
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e1c:	e022      	b.n	8001e64 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e24:	d01e      	beq.n	8001e64 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e26:	f7ff f8cb 	bl	8000fc0 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d302      	bcc.n	8001e3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d113      	bne.n	8001e64 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e40:	f043 0220 	orr.w	r2, r3, #32
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e00f      	b.n	8001e84 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699a      	ldr	r2, [r3, #24]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	bf0c      	ite	eq
 8001e74:	2301      	moveq	r3, #1
 8001e76:	2300      	movne	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d0cd      	beq.n	8001e1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e98:	e02c      	b.n	8001ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f000 f870 	bl	8001f84 <I2C_IsAcknowledgeFailed>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e02a      	b.n	8001f04 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb4:	d01e      	beq.n	8001ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eb6:	f7ff f883 	bl	8000fc0 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d302      	bcc.n	8001ecc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d113      	bne.n	8001ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed0:	f043 0220 	orr.w	r2, r3, #32
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2220      	movs	r2, #32
 8001edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e007      	b.n	8001f04 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d1cb      	bne.n	8001e9a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f18:	e028      	b.n	8001f6c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 f830 	bl	8001f84 <I2C_IsAcknowledgeFailed>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e026      	b.n	8001f7c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f2e:	f7ff f847 	bl	8000fc0 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d302      	bcc.n	8001f44 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d113      	bne.n	8001f6c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f48:	f043 0220 	orr.w	r2, r3, #32
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2220      	movs	r2, #32
 8001f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e007      	b.n	8001f7c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	f003 0320 	and.w	r3, r3, #32
 8001f76:	2b20      	cmp	r3, #32
 8001f78:	d1cf      	bne.n	8001f1a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	f003 0310 	and.w	r3, r3, #16
 8001f9a:	2b10      	cmp	r3, #16
 8001f9c:	d151      	bne.n	8002042 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f9e:	e022      	b.n	8001fe6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa6:	d01e      	beq.n	8001fe6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa8:	f7ff f80a 	bl	8000fc0 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d302      	bcc.n	8001fbe <I2C_IsAcknowledgeFailed+0x3a>
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d113      	bne.n	8001fe6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	f043 0220 	orr.w	r2, r3, #32
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2220      	movs	r2, #32
 8001fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e02e      	b.n	8002044 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f003 0320 	and.w	r3, r3, #32
 8001ff0:	2b20      	cmp	r3, #32
 8001ff2:	d1d5      	bne.n	8001fa0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2210      	movs	r2, #16
 8001ffa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2220      	movs	r2, #32
 8002002:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f7ff fedd 	bl	8001dc4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6859      	ldr	r1, [r3, #4]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b0d      	ldr	r3, [pc, #52]	; (800204c <I2C_IsAcknowledgeFailed+0xc8>)
 8002016:	400b      	ands	r3, r1
 8002018:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	f043 0204 	orr.w	r2, r3, #4
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2220      	movs	r2, #32
 800202a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	fe00e800 	.word	0xfe00e800

08002050 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	460b      	mov	r3, r1
 800205c:	817b      	strh	r3, [r7, #10]
 800205e:	4613      	mov	r3, r2
 8002060:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002070:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <I2C_TransferConfig+0x58>)
 8002072:	430b      	orrs	r3, r1
 8002074:	43db      	mvns	r3, r3
 8002076:	ea02 0103 	and.w	r1, r2, r3
 800207a:	897b      	ldrh	r3, [r7, #10]
 800207c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002080:	7a7b      	ldrb	r3, [r7, #9]
 8002082:	041b      	lsls	r3, r3, #16
 8002084:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002088:	431a      	orrs	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	431a      	orrs	r2, r3
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	431a      	orrs	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	03ff63ff 	.word	0x03ff63ff

080020ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b20      	cmp	r3, #32
 80020c0:	d138      	bne.n	8002134 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e032      	b.n	8002136 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2224      	movs	r2, #36	; 0x24
 80020dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0201 	bic.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6819      	ldr	r1, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0201 	orr.w	r2, r2, #1
 800211e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002130:	2300      	movs	r3, #0
 8002132:	e000      	b.n	8002136 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002134:	2302      	movs	r3, #2
  }
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002142:	b480      	push	{r7}
 8002144:	b085      	sub	sp, #20
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b20      	cmp	r3, #32
 8002156:	d139      	bne.n	80021cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800215e:	2b01      	cmp	r3, #1
 8002160:	d101      	bne.n	8002166 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002162:	2302      	movs	r3, #2
 8002164:	e033      	b.n	80021ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2224      	movs	r2, #36	; 0x24
 8002172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0201 	bic.w	r2, r2, #1
 8002184:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002194:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	021b      	lsls	r3, r3, #8
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4313      	orrs	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0201 	orr.w	r2, r2, #1
 80021b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2220      	movs	r2, #32
 80021bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	e000      	b.n	80021ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021cc:	2302      	movs	r3, #2
  }
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ea:	6013      	str	r3, [r2, #0]
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40007000 	.word	0x40007000

080021fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <HAL_PWREx_GetVoltageRange+0x18>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002208:	4618      	mov	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40007000 	.word	0x40007000

08002218 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002226:	d130      	bne.n	800228a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002228:	4b23      	ldr	r3, [pc, #140]	; (80022b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002234:	d038      	beq.n	80022a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002236:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800223e:	4a1e      	ldr	r2, [pc, #120]	; (80022b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002240:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002244:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002246:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2232      	movs	r2, #50	; 0x32
 800224c:	fb02 f303 	mul.w	r3, r2, r3
 8002250:	4a1b      	ldr	r2, [pc, #108]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	0c9b      	lsrs	r3, r3, #18
 8002258:	3301      	adds	r3, #1
 800225a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800225c:	e002      	b.n	8002264 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	3b01      	subs	r3, #1
 8002262:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002264:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800226c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002270:	d102      	bne.n	8002278 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f2      	bne.n	800225e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002278:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002284:	d110      	bne.n	80022a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e00f      	b.n	80022aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800228a:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002296:	d007      	beq.n	80022a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002298:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022a0:	4a05      	ldr	r2, [pc, #20]	; (80022b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40007000 	.word	0x40007000
 80022bc:	20000004 	.word	0x20000004
 80022c0:	431bde83 	.word	0x431bde83

080022c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d102      	bne.n	80022d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	f000 bc11 	b.w	8002afa <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022d8:	4ba0      	ldr	r3, [pc, #640]	; (800255c <HAL_RCC_OscConfig+0x298>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 030c 	and.w	r3, r3, #12
 80022e0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022e2:	4b9e      	ldr	r3, [pc, #632]	; (800255c <HAL_RCC_OscConfig+0x298>)
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0310 	and.w	r3, r3, #16
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 80e4 	beq.w	80024c2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d007      	beq.n	8002310 <HAL_RCC_OscConfig+0x4c>
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2b0c      	cmp	r3, #12
 8002304:	f040 808b 	bne.w	800241e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2b01      	cmp	r3, #1
 800230c:	f040 8087 	bne.w	800241e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002310:	4b92      	ldr	r3, [pc, #584]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_RCC_OscConfig+0x64>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e3e8      	b.n	8002afa <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1a      	ldr	r2, [r3, #32]
 800232c:	4b8b      	ldr	r3, [pc, #556]	; (800255c <HAL_RCC_OscConfig+0x298>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	d004      	beq.n	8002342 <HAL_RCC_OscConfig+0x7e>
 8002338:	4b88      	ldr	r3, [pc, #544]	; (800255c <HAL_RCC_OscConfig+0x298>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002340:	e005      	b.n	800234e <HAL_RCC_OscConfig+0x8a>
 8002342:	4b86      	ldr	r3, [pc, #536]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002344:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800234e:	4293      	cmp	r3, r2
 8002350:	d223      	bcs.n	800239a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	4618      	mov	r0, r3
 8002358:	f000 fda8 	bl	8002eac <RCC_SetFlashLatencyFromMSIRange>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e3c9      	b.n	8002afa <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002366:	4b7d      	ldr	r3, [pc, #500]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a7c      	ldr	r2, [pc, #496]	; (800255c <HAL_RCC_OscConfig+0x298>)
 800236c:	f043 0308 	orr.w	r3, r3, #8
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4b7a      	ldr	r3, [pc, #488]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	4977      	ldr	r1, [pc, #476]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002380:	4313      	orrs	r3, r2
 8002382:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002384:	4b75      	ldr	r3, [pc, #468]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	021b      	lsls	r3, r3, #8
 8002392:	4972      	ldr	r1, [pc, #456]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002394:	4313      	orrs	r3, r2
 8002396:	604b      	str	r3, [r1, #4]
 8002398:	e025      	b.n	80023e6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800239a:	4b70      	ldr	r3, [pc, #448]	; (800255c <HAL_RCC_OscConfig+0x298>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a6f      	ldr	r2, [pc, #444]	; (800255c <HAL_RCC_OscConfig+0x298>)
 80023a0:	f043 0308 	orr.w	r3, r3, #8
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	4b6d      	ldr	r3, [pc, #436]	; (800255c <HAL_RCC_OscConfig+0x298>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	496a      	ldr	r1, [pc, #424]	; (800255c <HAL_RCC_OscConfig+0x298>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023b8:	4b68      	ldr	r3, [pc, #416]	; (800255c <HAL_RCC_OscConfig+0x298>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	021b      	lsls	r3, r3, #8
 80023c6:	4965      	ldr	r1, [pc, #404]	; (800255c <HAL_RCC_OscConfig+0x298>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d109      	bne.n	80023e6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 fd68 	bl	8002eac <RCC_SetFlashLatencyFromMSIRange>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e389      	b.n	8002afa <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023e6:	f000 fc6f 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 80023ea:	4601      	mov	r1, r0
 80023ec:	4b5b      	ldr	r3, [pc, #364]	; (800255c <HAL_RCC_OscConfig+0x298>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	4a5a      	ldr	r2, [pc, #360]	; (8002560 <HAL_RCC_OscConfig+0x29c>)
 80023f8:	5cd3      	ldrb	r3, [r2, r3]
 80023fa:	f003 031f 	and.w	r3, r3, #31
 80023fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002402:	4a58      	ldr	r2, [pc, #352]	; (8002564 <HAL_RCC_OscConfig+0x2a0>)
 8002404:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002406:	4b58      	ldr	r3, [pc, #352]	; (8002568 <HAL_RCC_OscConfig+0x2a4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe fcc2 	bl	8000d94 <HAL_InitTick>
 8002410:	4603      	mov	r3, r0
 8002412:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d052      	beq.n	80024c0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	e36d      	b.n	8002afa <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d032      	beq.n	800248c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002426:	4b4d      	ldr	r3, [pc, #308]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a4c      	ldr	r2, [pc, #304]	; (800255c <HAL_RCC_OscConfig+0x298>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002432:	f7fe fdc5 	bl	8000fc0 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800243a:	f7fe fdc1 	bl	8000fc0 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e356      	b.n	8002afa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800244c:	4b43      	ldr	r3, [pc, #268]	; (800255c <HAL_RCC_OscConfig+0x298>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002458:	4b40      	ldr	r3, [pc, #256]	; (800255c <HAL_RCC_OscConfig+0x298>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a3f      	ldr	r2, [pc, #252]	; (800255c <HAL_RCC_OscConfig+0x298>)
 800245e:	f043 0308 	orr.w	r3, r3, #8
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	4b3d      	ldr	r3, [pc, #244]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	493a      	ldr	r1, [pc, #232]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002476:	4b39      	ldr	r3, [pc, #228]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	4935      	ldr	r1, [pc, #212]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
 800248a:	e01a      	b.n	80024c2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800248c:	4b33      	ldr	r3, [pc, #204]	; (800255c <HAL_RCC_OscConfig+0x298>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a32      	ldr	r2, [pc, #200]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002492:	f023 0301 	bic.w	r3, r3, #1
 8002496:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002498:	f7fe fd92 	bl	8000fc0 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024a0:	f7fe fd8e 	bl	8000fc0 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e323      	b.n	8002afa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024b2:	4b2a      	ldr	r3, [pc, #168]	; (800255c <HAL_RCC_OscConfig+0x298>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x1dc>
 80024be:	e000      	b.n	80024c2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d073      	beq.n	80025b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_OscConfig+0x21c>
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	2b0c      	cmp	r3, #12
 80024d8:	d10e      	bne.n	80024f8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d10b      	bne.n	80024f8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e0:	4b1e      	ldr	r3, [pc, #120]	; (800255c <HAL_RCC_OscConfig+0x298>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d063      	beq.n	80025b4 <HAL_RCC_OscConfig+0x2f0>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d15f      	bne.n	80025b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e300      	b.n	8002afa <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002500:	d106      	bne.n	8002510 <HAL_RCC_OscConfig+0x24c>
 8002502:	4b16      	ldr	r3, [pc, #88]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a15      	ldr	r2, [pc, #84]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	e01d      	b.n	800254c <HAL_RCC_OscConfig+0x288>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002518:	d10c      	bne.n	8002534 <HAL_RCC_OscConfig+0x270>
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <HAL_RCC_OscConfig+0x298>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a0f      	ldr	r2, [pc, #60]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b0d      	ldr	r3, [pc, #52]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a0c      	ldr	r2, [pc, #48]	; (800255c <HAL_RCC_OscConfig+0x298>)
 800252c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	e00b      	b.n	800254c <HAL_RCC_OscConfig+0x288>
 8002534:	4b09      	ldr	r3, [pc, #36]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a08      	ldr	r2, [pc, #32]	; (800255c <HAL_RCC_OscConfig+0x298>)
 800253a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a05      	ldr	r2, [pc, #20]	; (800255c <HAL_RCC_OscConfig+0x298>)
 8002546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800254a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d01b      	beq.n	800258c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002554:	f7fe fd34 	bl	8000fc0 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800255a:	e010      	b.n	800257e <HAL_RCC_OscConfig+0x2ba>
 800255c:	40021000 	.word	0x40021000
 8002560:	0800713c 	.word	0x0800713c
 8002564:	20000004 	.word	0x20000004
 8002568:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800256c:	f7fe fd28 	bl	8000fc0 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	; 0x64
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e2bd      	b.n	8002afa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800257e:	4baf      	ldr	r3, [pc, #700]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0x2a8>
 800258a:	e014      	b.n	80025b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7fe fd18 	bl	8000fc0 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002594:	f7fe fd14 	bl	8000fc0 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	; 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e2a9      	b.n	8002afa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025a6:	4ba5      	ldr	r3, [pc, #660]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x2d0>
 80025b2:	e000      	b.n	80025b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d060      	beq.n	8002684 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d005      	beq.n	80025d4 <HAL_RCC_OscConfig+0x310>
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	2b0c      	cmp	r3, #12
 80025cc:	d119      	bne.n	8002602 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d116      	bne.n	8002602 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025d4:	4b99      	ldr	r3, [pc, #612]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_RCC_OscConfig+0x328>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e286      	b.n	8002afa <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ec:	4b93      	ldr	r3, [pc, #588]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	061b      	lsls	r3, r3, #24
 80025fa:	4990      	ldr	r1, [pc, #576]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002600:	e040      	b.n	8002684 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d023      	beq.n	8002652 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800260a:	4b8c      	ldr	r3, [pc, #560]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a8b      	ldr	r2, [pc, #556]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002616:	f7fe fcd3 	bl	8000fc0 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261e:	f7fe fccf 	bl	8000fc0 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e264      	b.n	8002afa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002630:	4b82      	ldr	r3, [pc, #520]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263c:	4b7f      	ldr	r3, [pc, #508]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	061b      	lsls	r3, r3, #24
 800264a:	497c      	ldr	r1, [pc, #496]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800264c:	4313      	orrs	r3, r2
 800264e:	604b      	str	r3, [r1, #4]
 8002650:	e018      	b.n	8002684 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002652:	4b7a      	ldr	r3, [pc, #488]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a79      	ldr	r2, [pc, #484]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800265c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265e:	f7fe fcaf 	bl	8000fc0 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002666:	f7fe fcab 	bl	8000fc0 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e240      	b.n	8002afa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002678:	4b70      	ldr	r3, [pc, #448]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f0      	bne.n	8002666 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d03c      	beq.n	800270a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d01c      	beq.n	80026d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002698:	4b68      	ldr	r3, [pc, #416]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800269a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800269e:	4a67      	ldr	r2, [pc, #412]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a8:	f7fe fc8a 	bl	8000fc0 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b0:	f7fe fc86 	bl	8000fc0 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e21b      	b.n	8002afa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026c2:	4b5e      	ldr	r3, [pc, #376]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80026c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0ef      	beq.n	80026b0 <HAL_RCC_OscConfig+0x3ec>
 80026d0:	e01b      	b.n	800270a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d2:	4b5a      	ldr	r3, [pc, #360]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80026d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026d8:	4a58      	ldr	r2, [pc, #352]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80026da:	f023 0301 	bic.w	r3, r3, #1
 80026de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e2:	f7fe fc6d 	bl	8000fc0 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ea:	f7fe fc69 	bl	8000fc0 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e1fe      	b.n	8002afa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026fc:	4b4f      	ldr	r3, [pc, #316]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80026fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1ef      	bne.n	80026ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 80a6 	beq.w	8002864 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002718:	2300      	movs	r3, #0
 800271a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800271c:	4b47      	ldr	r3, [pc, #284]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800271e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10d      	bne.n	8002744 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002728:	4b44      	ldr	r3, [pc, #272]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800272a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272c:	4a43      	ldr	r2, [pc, #268]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800272e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002732:	6593      	str	r3, [r2, #88]	; 0x58
 8002734:	4b41      	ldr	r3, [pc, #260]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002740:	2301      	movs	r3, #1
 8002742:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002744:	4b3e      	ldr	r3, [pc, #248]	; (8002840 <HAL_RCC_OscConfig+0x57c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274c:	2b00      	cmp	r3, #0
 800274e:	d118      	bne.n	8002782 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002750:	4b3b      	ldr	r3, [pc, #236]	; (8002840 <HAL_RCC_OscConfig+0x57c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a3a      	ldr	r2, [pc, #232]	; (8002840 <HAL_RCC_OscConfig+0x57c>)
 8002756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800275c:	f7fe fc30 	bl	8000fc0 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002764:	f7fe fc2c 	bl	8000fc0 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e1c1      	b.n	8002afa <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002776:	4b32      	ldr	r3, [pc, #200]	; (8002840 <HAL_RCC_OscConfig+0x57c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d108      	bne.n	800279c <HAL_RCC_OscConfig+0x4d8>
 800278a:	4b2c      	ldr	r3, [pc, #176]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800278c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002790:	4a2a      	ldr	r2, [pc, #168]	; (800283c <HAL_RCC_OscConfig+0x578>)
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800279a:	e024      	b.n	80027e6 <HAL_RCC_OscConfig+0x522>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b05      	cmp	r3, #5
 80027a2:	d110      	bne.n	80027c6 <HAL_RCC_OscConfig+0x502>
 80027a4:	4b25      	ldr	r3, [pc, #148]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027aa:	4a24      	ldr	r2, [pc, #144]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80027ac:	f043 0304 	orr.w	r3, r3, #4
 80027b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027b4:	4b21      	ldr	r3, [pc, #132]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80027b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ba:	4a20      	ldr	r2, [pc, #128]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027c4:	e00f      	b.n	80027e6 <HAL_RCC_OscConfig+0x522>
 80027c6:	4b1d      	ldr	r3, [pc, #116]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80027c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027cc:	4a1b      	ldr	r2, [pc, #108]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80027ce:	f023 0301 	bic.w	r3, r3, #1
 80027d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027d6:	4b19      	ldr	r3, [pc, #100]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80027d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027dc:	4a17      	ldr	r2, [pc, #92]	; (800283c <HAL_RCC_OscConfig+0x578>)
 80027de:	f023 0304 	bic.w	r3, r3, #4
 80027e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d016      	beq.n	800281c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ee:	f7fe fbe7 	bl	8000fc0 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027f4:	e00a      	b.n	800280c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f6:	f7fe fbe3 	bl	8000fc0 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	f241 3288 	movw	r2, #5000	; 0x1388
 8002804:	4293      	cmp	r3, r2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e176      	b.n	8002afa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_RCC_OscConfig+0x578>)
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0ed      	beq.n	80027f6 <HAL_RCC_OscConfig+0x532>
 800281a:	e01a      	b.n	8002852 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281c:	f7fe fbd0 	bl	8000fc0 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002822:	e00f      	b.n	8002844 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002824:	f7fe fbcc 	bl	8000fc0 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002832:	4293      	cmp	r3, r2
 8002834:	d906      	bls.n	8002844 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e15f      	b.n	8002afa <HAL_RCC_OscConfig+0x836>
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000
 8002840:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002844:	4baa      	ldr	r3, [pc, #680]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 8002846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1e8      	bne.n	8002824 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002852:	7ffb      	ldrb	r3, [r7, #31]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d105      	bne.n	8002864 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002858:	4ba5      	ldr	r3, [pc, #660]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 800285a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285c:	4aa4      	ldr	r2, [pc, #656]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 800285e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002862:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0320 	and.w	r3, r3, #32
 800286c:	2b00      	cmp	r3, #0
 800286e:	d03c      	beq.n	80028ea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	2b00      	cmp	r3, #0
 8002876:	d01c      	beq.n	80028b2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002878:	4b9d      	ldr	r3, [pc, #628]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 800287a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800287e:	4a9c      	ldr	r2, [pc, #624]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002888:	f7fe fb9a 	bl	8000fc0 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002890:	f7fe fb96 	bl	8000fc0 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e12b      	b.n	8002afa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028a2:	4b93      	ldr	r3, [pc, #588]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 80028a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0ef      	beq.n	8002890 <HAL_RCC_OscConfig+0x5cc>
 80028b0:	e01b      	b.n	80028ea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028b2:	4b8f      	ldr	r3, [pc, #572]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 80028b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028b8:	4a8d      	ldr	r2, [pc, #564]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 80028ba:	f023 0301 	bic.w	r3, r3, #1
 80028be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c2:	f7fe fb7d 	bl	8000fc0 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028ca:	f7fe fb79 	bl	8000fc0 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e10e      	b.n	8002afa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028dc:	4b84      	ldr	r3, [pc, #528]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 80028de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1ef      	bne.n	80028ca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 8102 	beq.w	8002af8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	f040 80c5 	bne.w	8002a88 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80028fe:	4b7c      	ldr	r3, [pc, #496]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f003 0203 	and.w	r2, r3, #3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290e:	429a      	cmp	r2, r3
 8002910:	d12c      	bne.n	800296c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	3b01      	subs	r3, #1
 800291e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002920:	429a      	cmp	r2, r3
 8002922:	d123      	bne.n	800296c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d11b      	bne.n	800296c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002940:	429a      	cmp	r2, r3
 8002942:	d113      	bne.n	800296c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294e:	085b      	lsrs	r3, r3, #1
 8002950:	3b01      	subs	r3, #1
 8002952:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002954:	429a      	cmp	r2, r3
 8002956:	d109      	bne.n	800296c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	085b      	lsrs	r3, r3, #1
 8002964:	3b01      	subs	r3, #1
 8002966:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d067      	beq.n	8002a3c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	2b0c      	cmp	r3, #12
 8002970:	d062      	beq.n	8002a38 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002972:	4b5f      	ldr	r3, [pc, #380]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e0bb      	b.n	8002afa <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002982:	4b5b      	ldr	r3, [pc, #364]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a5a      	ldr	r2, [pc, #360]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 8002988:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800298c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800298e:	f7fe fb17 	bl	8000fc0 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002996:	f7fe fb13 	bl	8000fc0 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e0a8      	b.n	8002afa <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a8:	4b51      	ldr	r3, [pc, #324]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1f0      	bne.n	8002996 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029b4:	4b4e      	ldr	r3, [pc, #312]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	4b4e      	ldr	r3, [pc, #312]	; (8002af4 <HAL_RCC_OscConfig+0x830>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80029c4:	3a01      	subs	r2, #1
 80029c6:	0112      	lsls	r2, r2, #4
 80029c8:	4311      	orrs	r1, r2
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029ce:	0212      	lsls	r2, r2, #8
 80029d0:	4311      	orrs	r1, r2
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029d6:	0852      	lsrs	r2, r2, #1
 80029d8:	3a01      	subs	r2, #1
 80029da:	0552      	lsls	r2, r2, #21
 80029dc:	4311      	orrs	r1, r2
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029e2:	0852      	lsrs	r2, r2, #1
 80029e4:	3a01      	subs	r2, #1
 80029e6:	0652      	lsls	r2, r2, #25
 80029e8:	4311      	orrs	r1, r2
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029ee:	06d2      	lsls	r2, r2, #27
 80029f0:	430a      	orrs	r2, r1
 80029f2:	493f      	ldr	r1, [pc, #252]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80029f8:	4b3d      	ldr	r3, [pc, #244]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a3c      	ldr	r2, [pc, #240]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 80029fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a02:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a04:	4b3a      	ldr	r3, [pc, #232]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	4a39      	ldr	r2, [pc, #228]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 8002a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a10:	f7fe fad6 	bl	8000fc0 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a18:	f7fe fad2 	bl	8000fc0 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e067      	b.n	8002afa <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a2a:	4b31      	ldr	r3, [pc, #196]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f0      	beq.n	8002a18 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a36:	e05f      	b.n	8002af8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e05e      	b.n	8002afa <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a3c:	4b2c      	ldr	r3, [pc, #176]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d157      	bne.n	8002af8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a48:	4b29      	ldr	r3, [pc, #164]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a28      	ldr	r2, [pc, #160]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 8002a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a54:	4b26      	ldr	r3, [pc, #152]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	4a25      	ldr	r2, [pc, #148]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 8002a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a60:	f7fe faae 	bl	8000fc0 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a68:	f7fe faaa 	bl	8000fc0 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e03f      	b.n	8002afa <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a7a:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0x7a4>
 8002a86:	e037      	b.n	8002af8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	2b0c      	cmp	r3, #12
 8002a8c:	d02d      	beq.n	8002aea <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8e:	4b18      	ldr	r3, [pc, #96]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a17      	ldr	r2, [pc, #92]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 8002a94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a98:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a9a:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d105      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002aa6:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	4a11      	ldr	r2, [pc, #68]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 8002aac:	f023 0303 	bic.w	r3, r3, #3
 8002ab0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002ab2:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	4a0e      	ldr	r2, [pc, #56]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 8002ab8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac2:	f7fe fa7d 	bl	8000fc0 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aca:	f7fe fa79 	bl	8000fc0 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e00e      	b.n	8002afa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002adc:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <HAL_RCC_OscConfig+0x82c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1f0      	bne.n	8002aca <HAL_RCC_OscConfig+0x806>
 8002ae8:	e006      	b.n	8002af8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e005      	b.n	8002afa <HAL_RCC_OscConfig+0x836>
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000
 8002af4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3720      	adds	r7, #32
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop

08002b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0c8      	b.n	8002caa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b18:	4b66      	ldr	r3, [pc, #408]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d910      	bls.n	8002b48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b26:	4b63      	ldr	r3, [pc, #396]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 0207 	bic.w	r2, r3, #7
 8002b2e:	4961      	ldr	r1, [pc, #388]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b36:	4b5f      	ldr	r3, [pc, #380]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0b0      	b.n	8002caa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d04c      	beq.n	8002bee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	d107      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b5c:	4b56      	ldr	r3, [pc, #344]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d121      	bne.n	8002bac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e09e      	b.n	8002caa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d107      	bne.n	8002b84 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b74:	4b50      	ldr	r3, [pc, #320]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d115      	bne.n	8002bac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e092      	b.n	8002caa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d107      	bne.n	8002b9c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b8c:	4b4a      	ldr	r3, [pc, #296]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d109      	bne.n	8002bac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e086      	b.n	8002caa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b9c:	4b46      	ldr	r3, [pc, #280]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e07e      	b.n	8002caa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bac:	4b42      	ldr	r3, [pc, #264]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f023 0203 	bic.w	r2, r3, #3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	493f      	ldr	r1, [pc, #252]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bbe:	f7fe f9ff 	bl	8000fc0 <HAL_GetTick>
 8002bc2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc4:	e00a      	b.n	8002bdc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc6:	f7fe f9fb 	bl	8000fc0 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e066      	b.n	8002caa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bdc:	4b36      	ldr	r3, [pc, #216]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 020c 	and.w	r2, r3, #12
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d1eb      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d008      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bfa:	4b2f      	ldr	r3, [pc, #188]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	492c      	ldr	r1, [pc, #176]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c0c:	4b29      	ldr	r3, [pc, #164]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d210      	bcs.n	8002c3c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1a:	4b26      	ldr	r3, [pc, #152]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 0207 	bic.w	r2, r3, #7
 8002c22:	4924      	ldr	r1, [pc, #144]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2a:	4b22      	ldr	r3, [pc, #136]	; (8002cb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e036      	b.n	8002caa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c48:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	4918      	ldr	r1, [pc, #96]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d009      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c66:	4b14      	ldr	r3, [pc, #80]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4910      	ldr	r1, [pc, #64]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c7a:	f000 f825 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 8002c7e:	4601      	mov	r1, r0
 8002c80:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	091b      	lsrs	r3, r3, #4
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	4a0c      	ldr	r2, [pc, #48]	; (8002cbc <HAL_RCC_ClockConfig+0x1b8>)
 8002c8c:	5cd3      	ldrb	r3, [r2, r3]
 8002c8e:	f003 031f 	and.w	r3, r3, #31
 8002c92:	fa21 f303 	lsr.w	r3, r1, r3
 8002c96:	4a0a      	ldr	r2, [pc, #40]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe f878 	bl	8000d94 <HAL_InitTick>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ca8:	7afb      	ldrb	r3, [r7, #11]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40022000 	.word	0x40022000
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	0800713c 	.word	0x0800713c
 8002cc0:	20000004 	.word	0x20000004
 8002cc4:	20000008 	.word	0x20000008

08002cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b089      	sub	sp, #36	; 0x24
 8002ccc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61fb      	str	r3, [r7, #28]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cd6:	4b3d      	ldr	r3, [pc, #244]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x104>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 030c 	and.w	r3, r3, #12
 8002cde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ce0:	4b3a      	ldr	r3, [pc, #232]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x104>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_RCC_GetSysClockFreq+0x34>
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	2b0c      	cmp	r3, #12
 8002cf4:	d121      	bne.n	8002d3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d11e      	bne.n	8002d3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cfc:	4b33      	ldr	r3, [pc, #204]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x104>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d107      	bne.n	8002d18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d08:	4b30      	ldr	r3, [pc, #192]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x104>)
 8002d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d0e:	0a1b      	lsrs	r3, r3, #8
 8002d10:	f003 030f 	and.w	r3, r3, #15
 8002d14:	61fb      	str	r3, [r7, #28]
 8002d16:	e005      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d18:	4b2c      	ldr	r3, [pc, #176]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x104>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	091b      	lsrs	r3, r3, #4
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d24:	4a2a      	ldr	r2, [pc, #168]	; (8002dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10d      	bne.n	8002d50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d38:	e00a      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d102      	bne.n	8002d46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d40:	4b24      	ldr	r3, [pc, #144]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d42:	61bb      	str	r3, [r7, #24]
 8002d44:	e004      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d101      	bne.n	8002d50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d4c:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	2b0c      	cmp	r3, #12
 8002d54:	d133      	bne.n	8002dbe <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d56:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x104>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d002      	beq.n	8002d6c <HAL_RCC_GetSysClockFreq+0xa4>
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d003      	beq.n	8002d72 <HAL_RCC_GetSysClockFreq+0xaa>
 8002d6a:	e005      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d6c:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d6e:	617b      	str	r3, [r7, #20]
      break;
 8002d70:	e005      	b.n	8002d7e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d72:	4b18      	ldr	r3, [pc, #96]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d74:	617b      	str	r3, [r7, #20]
      break;
 8002d76:	e002      	b.n	8002d7e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	617b      	str	r3, [r7, #20]
      break;
 8002d7c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d7e:	4b13      	ldr	r3, [pc, #76]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x104>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	091b      	lsrs	r3, r3, #4
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	3301      	adds	r3, #1
 8002d8a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d8c:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x104>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	0a1b      	lsrs	r3, r3, #8
 8002d92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	fb02 f203 	mul.w	r2, r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002da4:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <HAL_RCC_GetSysClockFreq+0x104>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	0e5b      	lsrs	r3, r3, #25
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	3301      	adds	r3, #1
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dbc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002dbe:	69bb      	ldr	r3, [r7, #24]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3724      	adds	r7, #36	; 0x24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	08007154 	.word	0x08007154
 8002dd4:	00f42400 	.word	0x00f42400

08002dd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ddc:	4b03      	ldr	r3, [pc, #12]	; (8002dec <HAL_RCC_GetHCLKFreq+0x14>)
 8002dde:	681b      	ldr	r3, [r3, #0]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	20000004 	.word	0x20000004

08002df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002df4:	f7ff fff0 	bl	8002dd8 <HAL_RCC_GetHCLKFreq>
 8002df8:	4601      	mov	r1, r0
 8002dfa:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	0a1b      	lsrs	r3, r3, #8
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	4a04      	ldr	r2, [pc, #16]	; (8002e18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e06:	5cd3      	ldrb	r3, [r2, r3]
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40021000 	.word	0x40021000
 8002e18:	0800714c 	.word	0x0800714c

08002e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e20:	f7ff ffda 	bl	8002dd8 <HAL_RCC_GetHCLKFreq>
 8002e24:	4601      	mov	r1, r0
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	0adb      	lsrs	r3, r3, #11
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	4a04      	ldr	r2, [pc, #16]	; (8002e44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e32:	5cd3      	ldrb	r3, [r2, r3]
 8002e34:	f003 031f 	and.w	r3, r3, #31
 8002e38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40021000 	.word	0x40021000
 8002e44:	0800714c 	.word	0x0800714c

08002e48 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	220f      	movs	r2, #15
 8002e56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002e58:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 0203 	and.w	r2, r3, #3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002e64:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002e70:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002e7c:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	08db      	lsrs	r3, r3, #3
 8002e82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002e8a:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <HAL_RCC_GetClockConfig+0x60>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0207 	and.w	r2, r3, #7
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	601a      	str	r2, [r3, #0]
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40022000 	.word	0x40022000

08002eac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002eb8:	4b2a      	ldr	r3, [pc, #168]	; (8002f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ec4:	f7ff f99a 	bl	80021fc <HAL_PWREx_GetVoltageRange>
 8002ec8:	6178      	str	r0, [r7, #20]
 8002eca:	e014      	b.n	8002ef6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ecc:	4b25      	ldr	r3, [pc, #148]	; (8002f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed0:	4a24      	ldr	r2, [pc, #144]	; (8002f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ed8:	4b22      	ldr	r3, [pc, #136]	; (8002f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ee4:	f7ff f98a 	bl	80021fc <HAL_PWREx_GetVoltageRange>
 8002ee8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002eea:	4b1e      	ldr	r3, [pc, #120]	; (8002f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eee:	4a1d      	ldr	r2, [pc, #116]	; (8002f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002efc:	d10b      	bne.n	8002f16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b80      	cmp	r3, #128	; 0x80
 8002f02:	d919      	bls.n	8002f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2ba0      	cmp	r3, #160	; 0xa0
 8002f08:	d902      	bls.n	8002f10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	e013      	b.n	8002f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f10:	2301      	movs	r3, #1
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	e010      	b.n	8002f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b80      	cmp	r3, #128	; 0x80
 8002f1a:	d902      	bls.n	8002f22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	e00a      	b.n	8002f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b80      	cmp	r3, #128	; 0x80
 8002f26:	d102      	bne.n	8002f2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f28:	2302      	movs	r3, #2
 8002f2a:	613b      	str	r3, [r7, #16]
 8002f2c:	e004      	b.n	8002f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b70      	cmp	r3, #112	; 0x70
 8002f32:	d101      	bne.n	8002f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f34:	2301      	movs	r3, #1
 8002f36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f38:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f023 0207 	bic.w	r2, r3, #7
 8002f40:	4909      	ldr	r1, [pc, #36]	; (8002f68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f48:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d001      	beq.n	8002f5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40022000 	.word	0x40022000

08002f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f74:	2300      	movs	r3, #0
 8002f76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f78:	2300      	movs	r3, #0
 8002f7a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d02f      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f90:	d005      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002f92:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f96:	d015      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d007      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002f9c:	e00f      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002f9e:	4bac      	ldr	r3, [pc, #688]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	4aab      	ldr	r2, [pc, #684]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002faa:	e00c      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3304      	adds	r3, #4
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 f9dc 	bl	8003370 <RCCEx_PLLSAI1_Config>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fbc:	e003      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	74fb      	strb	r3, [r7, #19]
      break;
 8002fc2:	e000      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fc6:	7cfb      	ldrb	r3, [r7, #19]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10b      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fcc:	4ba0      	ldr	r3, [pc, #640]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fda:	499d      	ldr	r1, [pc, #628]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002fe2:	e001      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe4:	7cfb      	ldrb	r3, [r7, #19]
 8002fe6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 8099 	beq.w	8003128 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ffa:	4b95      	ldr	r3, [pc, #596]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003006:	2301      	movs	r3, #1
 8003008:	e000      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800300a:	2300      	movs	r3, #0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00d      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003010:	4b8f      	ldr	r3, [pc, #572]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003014:	4a8e      	ldr	r2, [pc, #568]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800301a:	6593      	str	r3, [r2, #88]	; 0x58
 800301c:	4b8c      	ldr	r3, [pc, #560]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800301e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003028:	2301      	movs	r3, #1
 800302a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800302c:	4b89      	ldr	r3, [pc, #548]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a88      	ldr	r2, [pc, #544]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003036:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003038:	f7fd ffc2 	bl	8000fc0 <HAL_GetTick>
 800303c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800303e:	e009      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003040:	f7fd ffbe 	bl	8000fc0 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d902      	bls.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	74fb      	strb	r3, [r7, #19]
        break;
 8003052:	e005      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003054:	4b7f      	ldr	r3, [pc, #508]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0ef      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8003060:	7cfb      	ldrb	r3, [r7, #19]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d155      	bne.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003066:	4b7a      	ldr	r3, [pc, #488]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003070:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d01e      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	429a      	cmp	r2, r3
 8003080:	d019      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003082:	4b73      	ldr	r3, [pc, #460]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800308c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800308e:	4b70      	ldr	r3, [pc, #448]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003094:	4a6e      	ldr	r2, [pc, #440]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800309e:	4b6c      	ldr	r3, [pc, #432]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a4:	4a6a      	ldr	r2, [pc, #424]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030ae:	4a68      	ldr	r2, [pc, #416]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d016      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c0:	f7fd ff7e 	bl	8000fc0 <HAL_GetTick>
 80030c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030c6:	e00b      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c8:	f7fd ff7a 	bl	8000fc0 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d902      	bls.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	74fb      	strb	r3, [r7, #19]
            break;
 80030de:	e006      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030e0:	4b5b      	ldr	r3, [pc, #364]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0ec      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80030ee:	7cfb      	ldrb	r3, [r7, #19]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10b      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030f4:	4b56      	ldr	r3, [pc, #344]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003102:	4953      	ldr	r1, [pc, #332]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800310a:	e004      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800310c:	7cfb      	ldrb	r3, [r7, #19]
 800310e:	74bb      	strb	r3, [r7, #18]
 8003110:	e001      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003112:	7cfb      	ldrb	r3, [r7, #19]
 8003114:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003116:	7c7b      	ldrb	r3, [r7, #17]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d105      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800311c:	4b4c      	ldr	r3, [pc, #304]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800311e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003120:	4a4b      	ldr	r2, [pc, #300]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003126:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00a      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003134:	4b46      	ldr	r3, [pc, #280]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313a:	f023 0203 	bic.w	r2, r3, #3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	4943      	ldr	r1, [pc, #268]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003144:	4313      	orrs	r3, r2
 8003146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00a      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003156:	4b3e      	ldr	r3, [pc, #248]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315c:	f023 020c 	bic.w	r2, r3, #12
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	493a      	ldr	r1, [pc, #232]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003166:	4313      	orrs	r3, r2
 8003168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00a      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003178:	4b35      	ldr	r3, [pc, #212]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800317a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003186:	4932      	ldr	r1, [pc, #200]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003188:	4313      	orrs	r3, r2
 800318a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00a      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800319a:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800319c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a8:	4929      	ldr	r1, [pc, #164]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00a      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031bc:	4b24      	ldr	r3, [pc, #144]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ca:	4921      	ldr	r1, [pc, #132]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031de:	4b1c      	ldr	r3, [pc, #112]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	4918      	ldr	r1, [pc, #96]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00a      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003200:	4b13      	ldr	r3, [pc, #76]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003206:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	4910      	ldr	r1, [pc, #64]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003210:	4313      	orrs	r3, r2
 8003212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d02c      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003222:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003228:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003230:	4907      	ldr	r1, [pc, #28]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003232:	4313      	orrs	r3, r2
 8003234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003240:	d10a      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003242:	4b03      	ldr	r3, [pc, #12]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	4a02      	ldr	r2, [pc, #8]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003248:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800324c:	60d3      	str	r3, [r2, #12]
 800324e:	e015      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003250:	40021000 	.word	0x40021000
 8003254:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003260:	d10c      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3304      	adds	r3, #4
 8003266:	2101      	movs	r1, #1
 8003268:	4618      	mov	r0, r3
 800326a:	f000 f881 	bl	8003370 <RCCEx_PLLSAI1_Config>
 800326e:	4603      	mov	r3, r0
 8003270:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003272:	7cfb      	ldrb	r3, [r7, #19]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8003278:	7cfb      	ldrb	r3, [r7, #19]
 800327a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d028      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003288:	4b30      	ldr	r3, [pc, #192]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800328a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	492d      	ldr	r1, [pc, #180]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003298:	4313      	orrs	r3, r2
 800329a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032a6:	d106      	bne.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032a8:	4b28      	ldr	r3, [pc, #160]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4a27      	ldr	r2, [pc, #156]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032b2:	60d3      	str	r3, [r2, #12]
 80032b4:	e011      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032be:	d10c      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3304      	adds	r3, #4
 80032c4:	2101      	movs	r1, #1
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 f852 	bl	8003370 <RCCEx_PLLSAI1_Config>
 80032cc:	4603      	mov	r3, r0
 80032ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032d0:	7cfb      	ldrb	r3, [r7, #19]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 80032d6:	7cfb      	ldrb	r3, [r7, #19]
 80032d8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d01c      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032e6:	4b19      	ldr	r3, [pc, #100]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f4:	4915      	ldr	r1, [pc, #84]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003300:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003304:	d10c      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3304      	adds	r3, #4
 800330a:	2102      	movs	r1, #2
 800330c:	4618      	mov	r0, r3
 800330e:	f000 f82f 	bl	8003370 <RCCEx_PLLSAI1_Config>
 8003312:	4603      	mov	r3, r0
 8003314:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003316:	7cfb      	ldrb	r3, [r7, #19]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 800331c:	7cfb      	ldrb	r3, [r7, #19]
 800331e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00a      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800332c:	4b07      	ldr	r3, [pc, #28]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003332:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333a:	4904      	ldr	r1, [pc, #16]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003342:	7cbb      	ldrb	r3, [r7, #18]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40021000 	.word	0x40021000

08003350 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003354:	4b05      	ldr	r3, [pc, #20]	; (800336c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a04      	ldr	r2, [pc, #16]	; (800336c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800335a:	f043 0304 	orr.w	r3, r3, #4
 800335e:	6013      	str	r3, [r2, #0]
}
 8003360:	bf00      	nop
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	40021000 	.word	0x40021000

08003370 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800337e:	4b73      	ldr	r3, [pc, #460]	; (800354c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d018      	beq.n	80033bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800338a:	4b70      	ldr	r3, [pc, #448]	; (800354c <RCCEx_PLLSAI1_Config+0x1dc>)
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f003 0203 	and.w	r2, r3, #3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d10d      	bne.n	80033b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
       ||
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d009      	beq.n	80033b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033a2:	4b6a      	ldr	r3, [pc, #424]	; (800354c <RCCEx_PLLSAI1_Config+0x1dc>)
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	091b      	lsrs	r3, r3, #4
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
       ||
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d044      	beq.n	8003440 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	73fb      	strb	r3, [r7, #15]
 80033ba:	e041      	b.n	8003440 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d00c      	beq.n	80033de <RCCEx_PLLSAI1_Config+0x6e>
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d013      	beq.n	80033f0 <RCCEx_PLLSAI1_Config+0x80>
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d120      	bne.n	800340e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033cc:	4b5f      	ldr	r3, [pc, #380]	; (800354c <RCCEx_PLLSAI1_Config+0x1dc>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d11d      	bne.n	8003414 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033dc:	e01a      	b.n	8003414 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033de:	4b5b      	ldr	r3, [pc, #364]	; (800354c <RCCEx_PLLSAI1_Config+0x1dc>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d116      	bne.n	8003418 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ee:	e013      	b.n	8003418 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033f0:	4b56      	ldr	r3, [pc, #344]	; (800354c <RCCEx_PLLSAI1_Config+0x1dc>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10f      	bne.n	800341c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033fc:	4b53      	ldr	r3, [pc, #332]	; (800354c <RCCEx_PLLSAI1_Config+0x1dc>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d109      	bne.n	800341c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800340c:	e006      	b.n	800341c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	73fb      	strb	r3, [r7, #15]
      break;
 8003412:	e004      	b.n	800341e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003414:	bf00      	nop
 8003416:	e002      	b.n	800341e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003418:	bf00      	nop
 800341a:	e000      	b.n	800341e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800341c:	bf00      	nop
    }

    if(status == HAL_OK)
 800341e:	7bfb      	ldrb	r3, [r7, #15]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10d      	bne.n	8003440 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003424:	4b49      	ldr	r3, [pc, #292]	; (800354c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6819      	ldr	r1, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	3b01      	subs	r3, #1
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	430b      	orrs	r3, r1
 800343a:	4944      	ldr	r1, [pc, #272]	; (800354c <RCCEx_PLLSAI1_Config+0x1dc>)
 800343c:	4313      	orrs	r3, r2
 800343e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d17c      	bne.n	8003540 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003446:	4b41      	ldr	r3, [pc, #260]	; (800354c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a40      	ldr	r2, [pc, #256]	; (800354c <RCCEx_PLLSAI1_Config+0x1dc>)
 800344c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003450:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003452:	f7fd fdb5 	bl	8000fc0 <HAL_GetTick>
 8003456:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003458:	e009      	b.n	800346e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800345a:	f7fd fdb1 	bl	8000fc0 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d902      	bls.n	800346e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	73fb      	strb	r3, [r7, #15]
        break;
 800346c:	e005      	b.n	800347a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800346e:	4b37      	ldr	r3, [pc, #220]	; (800354c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1ef      	bne.n	800345a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800347a:	7bfb      	ldrb	r3, [r7, #15]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d15f      	bne.n	8003540 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d110      	bne.n	80034a8 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003486:	4b31      	ldr	r3, [pc, #196]	; (800354c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800348e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6892      	ldr	r2, [r2, #8]
 8003496:	0211      	lsls	r1, r2, #8
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	68d2      	ldr	r2, [r2, #12]
 800349c:	06d2      	lsls	r2, r2, #27
 800349e:	430a      	orrs	r2, r1
 80034a0:	492a      	ldr	r1, [pc, #168]	; (800354c <RCCEx_PLLSAI1_Config+0x1dc>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	610b      	str	r3, [r1, #16]
 80034a6:	e027      	b.n	80034f8 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d112      	bne.n	80034d4 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034ae:	4b27      	ldr	r3, [pc, #156]	; (800354c <RCCEx_PLLSAI1_Config+0x1dc>)
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80034b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6892      	ldr	r2, [r2, #8]
 80034be:	0211      	lsls	r1, r2, #8
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6912      	ldr	r2, [r2, #16]
 80034c4:	0852      	lsrs	r2, r2, #1
 80034c6:	3a01      	subs	r2, #1
 80034c8:	0552      	lsls	r2, r2, #21
 80034ca:	430a      	orrs	r2, r1
 80034cc:	491f      	ldr	r1, [pc, #124]	; (800354c <RCCEx_PLLSAI1_Config+0x1dc>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	610b      	str	r3, [r1, #16]
 80034d2:	e011      	b.n	80034f8 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034d4:	4b1d      	ldr	r3, [pc, #116]	; (800354c <RCCEx_PLLSAI1_Config+0x1dc>)
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80034dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6892      	ldr	r2, [r2, #8]
 80034e4:	0211      	lsls	r1, r2, #8
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6952      	ldr	r2, [r2, #20]
 80034ea:	0852      	lsrs	r2, r2, #1
 80034ec:	3a01      	subs	r2, #1
 80034ee:	0652      	lsls	r2, r2, #25
 80034f0:	430a      	orrs	r2, r1
 80034f2:	4916      	ldr	r1, [pc, #88]	; (800354c <RCCEx_PLLSAI1_Config+0x1dc>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80034f8:	4b14      	ldr	r3, [pc, #80]	; (800354c <RCCEx_PLLSAI1_Config+0x1dc>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a13      	ldr	r2, [pc, #76]	; (800354c <RCCEx_PLLSAI1_Config+0x1dc>)
 80034fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003502:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003504:	f7fd fd5c 	bl	8000fc0 <HAL_GetTick>
 8003508:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800350a:	e009      	b.n	8003520 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800350c:	f7fd fd58 	bl	8000fc0 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d902      	bls.n	8003520 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	73fb      	strb	r3, [r7, #15]
          break;
 800351e:	e005      	b.n	800352c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003520:	4b0a      	ldr	r3, [pc, #40]	; (800354c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0ef      	beq.n	800350c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d106      	bne.n	8003540 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003534:	691a      	ldr	r2, [r3, #16]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	4904      	ldr	r1, [pc, #16]	; (800354c <RCCEx_PLLSAI1_Config+0x1dc>)
 800353c:	4313      	orrs	r3, r2
 800353e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003540:	7bfb      	ldrb	r3, [r7, #15]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40021000 	.word	0x40021000

08003550 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e049      	b.n	80035f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d106      	bne.n	800357c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f841 	bl	80035fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2202      	movs	r2, #2
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3304      	adds	r3, #4
 800358c:	4619      	mov	r1, r3
 800358e:	4610      	mov	r0, r2
 8003590:	f000 f9dc 	bl	800394c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
	...

08003614 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b01      	cmp	r3, #1
 8003626:	d001      	beq.n	800362c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e03b      	b.n	80036a4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a19      	ldr	r2, [pc, #100]	; (80036b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d009      	beq.n	8003662 <HAL_TIM_Base_Start_IT+0x4e>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003656:	d004      	beq.n	8003662 <HAL_TIM_Base_Start_IT+0x4e>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a15      	ldr	r2, [pc, #84]	; (80036b4 <HAL_TIM_Base_Start_IT+0xa0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d115      	bne.n	800368e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	4b13      	ldr	r3, [pc, #76]	; (80036b8 <HAL_TIM_Base_Start_IT+0xa4>)
 800366a:	4013      	ands	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b06      	cmp	r3, #6
 8003672:	d015      	beq.n	80036a0 <HAL_TIM_Base_Start_IT+0x8c>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800367a:	d011      	beq.n	80036a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368c:	e008      	b.n	80036a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f042 0201 	orr.w	r2, r2, #1
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	e000      	b.n	80036a2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	40012c00 	.word	0x40012c00
 80036b4:	40014000 	.word	0x40014000
 80036b8:	00010007 	.word	0x00010007

080036bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d122      	bne.n	8003718 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d11b      	bne.n	8003718 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f06f 0202 	mvn.w	r2, #2
 80036e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f905 	bl	800390e <HAL_TIM_IC_CaptureCallback>
 8003704:	e005      	b.n	8003712 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f8f7 	bl	80038fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f908 	bl	8003922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f003 0304 	and.w	r3, r3, #4
 8003722:	2b04      	cmp	r3, #4
 8003724:	d122      	bne.n	800376c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b04      	cmp	r3, #4
 8003732:	d11b      	bne.n	800376c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f06f 0204 	mvn.w	r2, #4
 800373c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2202      	movs	r2, #2
 8003742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f8db 	bl	800390e <HAL_TIM_IC_CaptureCallback>
 8003758:	e005      	b.n	8003766 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f8cd 	bl	80038fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f8de 	bl	8003922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b08      	cmp	r3, #8
 8003778:	d122      	bne.n	80037c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b08      	cmp	r3, #8
 8003786:	d11b      	bne.n	80037c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f06f 0208 	mvn.w	r2, #8
 8003790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2204      	movs	r2, #4
 8003796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	f003 0303 	and.w	r3, r3, #3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f8b1 	bl	800390e <HAL_TIM_IC_CaptureCallback>
 80037ac:	e005      	b.n	80037ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f8a3 	bl	80038fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f8b4 	bl	8003922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f003 0310 	and.w	r3, r3, #16
 80037ca:	2b10      	cmp	r3, #16
 80037cc:	d122      	bne.n	8003814 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f003 0310 	and.w	r3, r3, #16
 80037d8:	2b10      	cmp	r3, #16
 80037da:	d11b      	bne.n	8003814 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f06f 0210 	mvn.w	r2, #16
 80037e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2208      	movs	r2, #8
 80037ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f887 	bl	800390e <HAL_TIM_IC_CaptureCallback>
 8003800:	e005      	b.n	800380e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f879 	bl	80038fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f88a 	bl	8003922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b01      	cmp	r3, #1
 8003820:	d10e      	bne.n	8003840 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b01      	cmp	r3, #1
 800382e:	d107      	bne.n	8003840 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0201 	mvn.w	r2, #1
 8003838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fd f948 	bl	8000ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384a:	2b80      	cmp	r3, #128	; 0x80
 800384c:	d10e      	bne.n	800386c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003858:	2b80      	cmp	r3, #128	; 0x80
 800385a:	d107      	bne.n	800386c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f8de 	bl	8003a28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800387a:	d10e      	bne.n	800389a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003886:	2b80      	cmp	r3, #128	; 0x80
 8003888:	d107      	bne.n	800389a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f8d1 	bl	8003a3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a4:	2b40      	cmp	r3, #64	; 0x40
 80038a6:	d10e      	bne.n	80038c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b2:	2b40      	cmp	r3, #64	; 0x40
 80038b4:	d107      	bne.n	80038c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f838 	bl	8003936 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d10e      	bne.n	80038f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b20      	cmp	r3, #32
 80038e0:	d107      	bne.n	80038f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f06f 0220 	mvn.w	r2, #32
 80038ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f891 	bl	8003a14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
	...

0800394c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a2a      	ldr	r2, [pc, #168]	; (8003a08 <TIM_Base_SetConfig+0xbc>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d003      	beq.n	800396c <TIM_Base_SetConfig+0x20>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396a:	d108      	bne.n	800397e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	4313      	orrs	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a21      	ldr	r2, [pc, #132]	; (8003a08 <TIM_Base_SetConfig+0xbc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d00b      	beq.n	800399e <TIM_Base_SetConfig+0x52>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800398c:	d007      	beq.n	800399e <TIM_Base_SetConfig+0x52>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a1e      	ldr	r2, [pc, #120]	; (8003a0c <TIM_Base_SetConfig+0xc0>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d003      	beq.n	800399e <TIM_Base_SetConfig+0x52>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a1d      	ldr	r2, [pc, #116]	; (8003a10 <TIM_Base_SetConfig+0xc4>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d108      	bne.n	80039b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a0c      	ldr	r2, [pc, #48]	; (8003a08 <TIM_Base_SetConfig+0xbc>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d007      	beq.n	80039ec <TIM_Base_SetConfig+0xa0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a0b      	ldr	r2, [pc, #44]	; (8003a0c <TIM_Base_SetConfig+0xc0>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d003      	beq.n	80039ec <TIM_Base_SetConfig+0xa0>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a0a      	ldr	r2, [pc, #40]	; (8003a10 <TIM_Base_SetConfig+0xc4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d103      	bne.n	80039f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	615a      	str	r2, [r3, #20]
}
 80039fa:	bf00      	nop
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40012c00 	.word	0x40012c00
 8003a0c:	40014000 	.word	0x40014000
 8003a10:	40014400 	.word	0x40014400

08003a14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e040      	b.n	8003ae4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fd f8f2 	bl	8000c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2224      	movs	r2, #36	; 0x24
 8003a7c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0201 	bic.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f962 	bl	8003d58 <UART_SetConfig>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e022      	b.n	8003ae4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fb66 	bl	8004178 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003aca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0201 	orr.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 fbed 	bl	80042bc <UART_CheckIdleState>
 8003ae2:	4603      	mov	r3, r0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08a      	sub	sp, #40	; 0x28
 8003af0:	af02      	add	r7, sp, #8
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	603b      	str	r3, [r7, #0]
 8003af8:	4613      	mov	r3, r2
 8003afa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	f040 8081 	bne.w	8003c08 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <HAL_UART_Transmit+0x26>
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e079      	b.n	8003c0a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_UART_Transmit+0x38>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e072      	b.n	8003c0a <HAL_UART_Transmit+0x11e>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2221      	movs	r2, #33	; 0x21
 8003b36:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003b38:	f7fd fa42 	bl	8000fc0 <HAL_GetTick>
 8003b3c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	88fa      	ldrh	r2, [r7, #6]
 8003b42:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	88fa      	ldrh	r2, [r7, #6]
 8003b4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b56:	d108      	bne.n	8003b6a <HAL_UART_Transmit+0x7e>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d104      	bne.n	8003b6a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	61bb      	str	r3, [r7, #24]
 8003b68:	e003      	b.n	8003b72 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003b7a:	e02d      	b.n	8003bd8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	2200      	movs	r2, #0
 8003b84:	2180      	movs	r1, #128	; 0x80
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 fbdd 	bl	8004346 <UART_WaitOnFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e039      	b.n	8003c0a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10b      	bne.n	8003bb4 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	881a      	ldrh	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ba8:	b292      	uxth	r2, r2
 8003baa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	3302      	adds	r3, #2
 8003bb0:	61bb      	str	r3, [r7, #24]
 8003bb2:	e008      	b.n	8003bc6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	781a      	ldrb	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	b292      	uxth	r2, r2
 8003bbe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1cb      	bne.n	8003b7c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	2200      	movs	r2, #0
 8003bec:	2140      	movs	r1, #64	; 0x40
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 fba9 	bl	8004346 <UART_WaitOnFlagUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e005      	b.n	8003c0a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2220      	movs	r2, #32
 8003c02:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	e000      	b.n	8003c0a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003c08:	2302      	movs	r3, #2
  }
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3720      	adds	r7, #32
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
	...

08003c14 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c26:	2b20      	cmp	r3, #32
 8003c28:	d16c      	bne.n	8003d04 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <HAL_UART_Receive_DMA+0x22>
 8003c30:	88fb      	ldrh	r3, [r7, #6]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e065      	b.n	8003d06 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_UART_Receive_DMA+0x34>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e05e      	b.n	8003d06 <HAL_UART_Receive_DMA+0xf2>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	88fa      	ldrh	r2, [r7, #6]
 8003c5a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2222      	movs	r2, #34	; 0x22
 8003c68:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d02a      	beq.n	8003cc8 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c76:	4a26      	ldr	r2, [pc, #152]	; (8003d10 <HAL_UART_Receive_DMA+0xfc>)
 8003c78:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c7e:	4a25      	ldr	r2, [pc, #148]	; (8003d14 <HAL_UART_Receive_DMA+0x100>)
 8003c80:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c86:	4a24      	ldr	r2, [pc, #144]	; (8003d18 <HAL_UART_Receive_DMA+0x104>)
 8003c88:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c8e:	2200      	movs	r2, #0
 8003c90:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	3324      	adds	r3, #36	; 0x24
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	88fb      	ldrh	r3, [r7, #6]
 8003ca6:	f7fd fc2d 	bl	8001504 <HAL_DMA_Start_IT>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00b      	beq.n	8003cc8 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2210      	movs	r2, #16
 8003cb4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e01e      	b.n	8003d06 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cde:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0201 	orr.w	r2, r2, #1
 8003cee:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689a      	ldr	r2, [r3, #8]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cfe:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003d00:	2300      	movs	r3, #0
 8003d02:	e000      	b.n	8003d06 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8003d04:	2302      	movs	r3, #2
  }
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	080044a7 	.word	0x080044a7
 8003d14:	0800450f 	.word	0x0800450f
 8003d18:	0800452b 	.word	0x0800452b

08003d1c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d58:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003d5c:	b088      	sub	sp, #32
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d62:	2300      	movs	r3, #0
 8003d64:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	4bb0      	ldr	r3, [pc, #704]	; (8004048 <UART_SetConfig+0x2f0>)
 8003d86:	4013      	ands	r3, r2
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6812      	ldr	r2, [r2, #0]
 8003d8c:	69f9      	ldr	r1, [r7, #28]
 8003d8e:	430b      	orrs	r3, r1
 8003d90:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4aa6      	ldr	r2, [pc, #664]	; (800404c <UART_SetConfig+0x2f4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d004      	beq.n	8003dc2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	69fa      	ldr	r2, [r7, #28]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	69fa      	ldr	r2, [r7, #28]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a9d      	ldr	r2, [pc, #628]	; (8004050 <UART_SetConfig+0x2f8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d121      	bne.n	8003e24 <UART_SetConfig+0xcc>
 8003de0:	4b9c      	ldr	r3, [pc, #624]	; (8004054 <UART_SetConfig+0x2fc>)
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d816      	bhi.n	8003e1c <UART_SetConfig+0xc4>
 8003dee:	a201      	add	r2, pc, #4	; (adr r2, 8003df4 <UART_SetConfig+0x9c>)
 8003df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df4:	08003e05 	.word	0x08003e05
 8003df8:	08003e11 	.word	0x08003e11
 8003dfc:	08003e0b 	.word	0x08003e0b
 8003e00:	08003e17 	.word	0x08003e17
 8003e04:	2301      	movs	r3, #1
 8003e06:	76fb      	strb	r3, [r7, #27]
 8003e08:	e072      	b.n	8003ef0 <UART_SetConfig+0x198>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	76fb      	strb	r3, [r7, #27]
 8003e0e:	e06f      	b.n	8003ef0 <UART_SetConfig+0x198>
 8003e10:	2304      	movs	r3, #4
 8003e12:	76fb      	strb	r3, [r7, #27]
 8003e14:	e06c      	b.n	8003ef0 <UART_SetConfig+0x198>
 8003e16:	2308      	movs	r3, #8
 8003e18:	76fb      	strb	r3, [r7, #27]
 8003e1a:	e069      	b.n	8003ef0 <UART_SetConfig+0x198>
 8003e1c:	2310      	movs	r3, #16
 8003e1e:	76fb      	strb	r3, [r7, #27]
 8003e20:	bf00      	nop
 8003e22:	e065      	b.n	8003ef0 <UART_SetConfig+0x198>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a8b      	ldr	r2, [pc, #556]	; (8004058 <UART_SetConfig+0x300>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d134      	bne.n	8003e98 <UART_SetConfig+0x140>
 8003e2e:	4b89      	ldr	r3, [pc, #548]	; (8004054 <UART_SetConfig+0x2fc>)
 8003e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e34:	f003 030c 	and.w	r3, r3, #12
 8003e38:	2b0c      	cmp	r3, #12
 8003e3a:	d829      	bhi.n	8003e90 <UART_SetConfig+0x138>
 8003e3c:	a201      	add	r2, pc, #4	; (adr r2, 8003e44 <UART_SetConfig+0xec>)
 8003e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e42:	bf00      	nop
 8003e44:	08003e79 	.word	0x08003e79
 8003e48:	08003e91 	.word	0x08003e91
 8003e4c:	08003e91 	.word	0x08003e91
 8003e50:	08003e91 	.word	0x08003e91
 8003e54:	08003e85 	.word	0x08003e85
 8003e58:	08003e91 	.word	0x08003e91
 8003e5c:	08003e91 	.word	0x08003e91
 8003e60:	08003e91 	.word	0x08003e91
 8003e64:	08003e7f 	.word	0x08003e7f
 8003e68:	08003e91 	.word	0x08003e91
 8003e6c:	08003e91 	.word	0x08003e91
 8003e70:	08003e91 	.word	0x08003e91
 8003e74:	08003e8b 	.word	0x08003e8b
 8003e78:	2300      	movs	r3, #0
 8003e7a:	76fb      	strb	r3, [r7, #27]
 8003e7c:	e038      	b.n	8003ef0 <UART_SetConfig+0x198>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	76fb      	strb	r3, [r7, #27]
 8003e82:	e035      	b.n	8003ef0 <UART_SetConfig+0x198>
 8003e84:	2304      	movs	r3, #4
 8003e86:	76fb      	strb	r3, [r7, #27]
 8003e88:	e032      	b.n	8003ef0 <UART_SetConfig+0x198>
 8003e8a:	2308      	movs	r3, #8
 8003e8c:	76fb      	strb	r3, [r7, #27]
 8003e8e:	e02f      	b.n	8003ef0 <UART_SetConfig+0x198>
 8003e90:	2310      	movs	r3, #16
 8003e92:	76fb      	strb	r3, [r7, #27]
 8003e94:	bf00      	nop
 8003e96:	e02b      	b.n	8003ef0 <UART_SetConfig+0x198>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a6b      	ldr	r2, [pc, #428]	; (800404c <UART_SetConfig+0x2f4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d124      	bne.n	8003eec <UART_SetConfig+0x194>
 8003ea2:	4b6c      	ldr	r3, [pc, #432]	; (8004054 <UART_SetConfig+0x2fc>)
 8003ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb0:	d012      	beq.n	8003ed8 <UART_SetConfig+0x180>
 8003eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb6:	d802      	bhi.n	8003ebe <UART_SetConfig+0x166>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d007      	beq.n	8003ecc <UART_SetConfig+0x174>
 8003ebc:	e012      	b.n	8003ee4 <UART_SetConfig+0x18c>
 8003ebe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ec2:	d006      	beq.n	8003ed2 <UART_SetConfig+0x17a>
 8003ec4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ec8:	d009      	beq.n	8003ede <UART_SetConfig+0x186>
 8003eca:	e00b      	b.n	8003ee4 <UART_SetConfig+0x18c>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	76fb      	strb	r3, [r7, #27]
 8003ed0:	e00e      	b.n	8003ef0 <UART_SetConfig+0x198>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	76fb      	strb	r3, [r7, #27]
 8003ed6:	e00b      	b.n	8003ef0 <UART_SetConfig+0x198>
 8003ed8:	2304      	movs	r3, #4
 8003eda:	76fb      	strb	r3, [r7, #27]
 8003edc:	e008      	b.n	8003ef0 <UART_SetConfig+0x198>
 8003ede:	2308      	movs	r3, #8
 8003ee0:	76fb      	strb	r3, [r7, #27]
 8003ee2:	e005      	b.n	8003ef0 <UART_SetConfig+0x198>
 8003ee4:	2310      	movs	r3, #16
 8003ee6:	76fb      	strb	r3, [r7, #27]
 8003ee8:	bf00      	nop
 8003eea:	e001      	b.n	8003ef0 <UART_SetConfig+0x198>
 8003eec:	2310      	movs	r3, #16
 8003eee:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a55      	ldr	r2, [pc, #340]	; (800404c <UART_SetConfig+0x2f4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d174      	bne.n	8003fe4 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003efa:	7efb      	ldrb	r3, [r7, #27]
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d824      	bhi.n	8003f4a <UART_SetConfig+0x1f2>
 8003f00:	a201      	add	r2, pc, #4	; (adr r2, 8003f08 <UART_SetConfig+0x1b0>)
 8003f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f06:	bf00      	nop
 8003f08:	08003f2d 	.word	0x08003f2d
 8003f0c:	08003f4b 	.word	0x08003f4b
 8003f10:	08003f35 	.word	0x08003f35
 8003f14:	08003f4b 	.word	0x08003f4b
 8003f18:	08003f3b 	.word	0x08003f3b
 8003f1c:	08003f4b 	.word	0x08003f4b
 8003f20:	08003f4b 	.word	0x08003f4b
 8003f24:	08003f4b 	.word	0x08003f4b
 8003f28:	08003f43 	.word	0x08003f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f2c:	f7fe ff60 	bl	8002df0 <HAL_RCC_GetPCLK1Freq>
 8003f30:	6178      	str	r0, [r7, #20]
        break;
 8003f32:	e00f      	b.n	8003f54 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f34:	4b49      	ldr	r3, [pc, #292]	; (800405c <UART_SetConfig+0x304>)
 8003f36:	617b      	str	r3, [r7, #20]
        break;
 8003f38:	e00c      	b.n	8003f54 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f3a:	f7fe fec5 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 8003f3e:	6178      	str	r0, [r7, #20]
        break;
 8003f40:	e008      	b.n	8003f54 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f46:	617b      	str	r3, [r7, #20]
        break;
 8003f48:	e004      	b.n	8003f54 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	76bb      	strb	r3, [r7, #26]
        break;
 8003f52:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 8100 	beq.w	800415c <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	4413      	add	r3, r2
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d305      	bcc.n	8003f78 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d902      	bls.n	8003f7e <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	76bb      	strb	r3, [r7, #26]
 8003f7c:	e0ee      	b.n	800415c <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	4619      	mov	r1, r3
 8003f82:	f04f 0200 	mov.w	r2, #0
 8003f86:	f04f 0300 	mov.w	r3, #0
 8003f8a:	f04f 0400 	mov.w	r4, #0
 8003f8e:	0214      	lsls	r4, r2, #8
 8003f90:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003f94:	020b      	lsls	r3, r1, #8
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6852      	ldr	r2, [r2, #4]
 8003f9a:	0852      	lsrs	r2, r2, #1
 8003f9c:	4611      	mov	r1, r2
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	eb13 0b01 	adds.w	fp, r3, r1
 8003fa6:	eb44 0c02 	adc.w	ip, r4, r2
 8003faa:	4658      	mov	r0, fp
 8003fac:	4661      	mov	r1, ip
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f04f 0400 	mov.w	r4, #0
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	4623      	mov	r3, r4
 8003fba:	f7fc f909 	bl	80001d0 <__aeabi_uldivmod>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	460c      	mov	r4, r1
 8003fc2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fca:	d308      	bcc.n	8003fde <UART_SetConfig+0x286>
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fd2:	d204      	bcs.n	8003fde <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	60da      	str	r2, [r3, #12]
 8003fdc:	e0be      	b.n	800415c <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	76bb      	strb	r3, [r7, #26]
 8003fe2:	e0bb      	b.n	800415c <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fec:	d169      	bne.n	80040c2 <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 8003fee:	7efb      	ldrb	r3, [r7, #27]
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d835      	bhi.n	8004060 <UART_SetConfig+0x308>
 8003ff4:	a201      	add	r2, pc, #4	; (adr r2, 8003ffc <UART_SetConfig+0x2a4>)
 8003ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffa:	bf00      	nop
 8003ffc:	08004021 	.word	0x08004021
 8004000:	08004029 	.word	0x08004029
 8004004:	08004031 	.word	0x08004031
 8004008:	08004061 	.word	0x08004061
 800400c:	08004037 	.word	0x08004037
 8004010:	08004061 	.word	0x08004061
 8004014:	08004061 	.word	0x08004061
 8004018:	08004061 	.word	0x08004061
 800401c:	0800403f 	.word	0x0800403f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004020:	f7fe fee6 	bl	8002df0 <HAL_RCC_GetPCLK1Freq>
 8004024:	6178      	str	r0, [r7, #20]
        break;
 8004026:	e020      	b.n	800406a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004028:	f7fe fef8 	bl	8002e1c <HAL_RCC_GetPCLK2Freq>
 800402c:	6178      	str	r0, [r7, #20]
        break;
 800402e:	e01c      	b.n	800406a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004030:	4b0a      	ldr	r3, [pc, #40]	; (800405c <UART_SetConfig+0x304>)
 8004032:	617b      	str	r3, [r7, #20]
        break;
 8004034:	e019      	b.n	800406a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004036:	f7fe fe47 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 800403a:	6178      	str	r0, [r7, #20]
        break;
 800403c:	e015      	b.n	800406a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800403e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004042:	617b      	str	r3, [r7, #20]
        break;
 8004044:	e011      	b.n	800406a <UART_SetConfig+0x312>
 8004046:	bf00      	nop
 8004048:	efff69f3 	.word	0xefff69f3
 800404c:	40008000 	.word	0x40008000
 8004050:	40013800 	.word	0x40013800
 8004054:	40021000 	.word	0x40021000
 8004058:	40004400 	.word	0x40004400
 800405c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	76bb      	strb	r3, [r7, #26]
        break;
 8004068:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d075      	beq.n	800415c <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	005a      	lsls	r2, r3, #1
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	441a      	add	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	fbb2 f3f3 	udiv	r3, r2, r3
 8004084:	b29b      	uxth	r3, r3
 8004086:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	2b0f      	cmp	r3, #15
 800408c:	d916      	bls.n	80040bc <UART_SetConfig+0x364>
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004094:	d212      	bcs.n	80040bc <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	b29b      	uxth	r3, r3
 800409a:	f023 030f 	bic.w	r3, r3, #15
 800409e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	085b      	lsrs	r3, r3, #1
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	f003 0307 	and.w	r3, r3, #7
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	89fb      	ldrh	r3, [r7, #14]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	89fa      	ldrh	r2, [r7, #14]
 80040b8:	60da      	str	r2, [r3, #12]
 80040ba:	e04f      	b.n	800415c <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	76bb      	strb	r3, [r7, #26]
 80040c0:	e04c      	b.n	800415c <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040c2:	7efb      	ldrb	r3, [r7, #27]
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d828      	bhi.n	800411a <UART_SetConfig+0x3c2>
 80040c8:	a201      	add	r2, pc, #4	; (adr r2, 80040d0 <UART_SetConfig+0x378>)
 80040ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ce:	bf00      	nop
 80040d0:	080040f5 	.word	0x080040f5
 80040d4:	080040fd 	.word	0x080040fd
 80040d8:	08004105 	.word	0x08004105
 80040dc:	0800411b 	.word	0x0800411b
 80040e0:	0800410b 	.word	0x0800410b
 80040e4:	0800411b 	.word	0x0800411b
 80040e8:	0800411b 	.word	0x0800411b
 80040ec:	0800411b 	.word	0x0800411b
 80040f0:	08004113 	.word	0x08004113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040f4:	f7fe fe7c 	bl	8002df0 <HAL_RCC_GetPCLK1Freq>
 80040f8:	6178      	str	r0, [r7, #20]
        break;
 80040fa:	e013      	b.n	8004124 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040fc:	f7fe fe8e 	bl	8002e1c <HAL_RCC_GetPCLK2Freq>
 8004100:	6178      	str	r0, [r7, #20]
        break;
 8004102:	e00f      	b.n	8004124 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004104:	4b1b      	ldr	r3, [pc, #108]	; (8004174 <UART_SetConfig+0x41c>)
 8004106:	617b      	str	r3, [r7, #20]
        break;
 8004108:	e00c      	b.n	8004124 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800410a:	f7fe fddd 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 800410e:	6178      	str	r0, [r7, #20]
        break;
 8004110:	e008      	b.n	8004124 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004116:	617b      	str	r3, [r7, #20]
        break;
 8004118:	e004      	b.n	8004124 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	76bb      	strb	r3, [r7, #26]
        break;
 8004122:	bf00      	nop
    }

    if (pclk != 0U)
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d018      	beq.n	800415c <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	085a      	lsrs	r2, r3, #1
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	441a      	add	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	fbb2 f3f3 	udiv	r3, r2, r3
 800413c:	b29b      	uxth	r3, r3
 800413e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	2b0f      	cmp	r3, #15
 8004144:	d908      	bls.n	8004158 <UART_SetConfig+0x400>
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800414c:	d204      	bcs.n	8004158 <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	60da      	str	r2, [r3, #12]
 8004156:	e001      	b.n	800415c <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004168:	7ebb      	ldrb	r3, [r7, #26]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3720      	adds	r7, #32
 800416e:	46bd      	mov	sp, r7
 8004170:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004174:	00f42400 	.word	0x00f42400

08004178 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00a      	beq.n	80041c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00a      	beq.n	80041e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00a      	beq.n	8004208 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	f003 0310 	and.w	r3, r3, #16
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00a      	beq.n	800422a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	f003 0320 	and.w	r3, r3, #32
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004254:	2b00      	cmp	r3, #0
 8004256:	d01a      	beq.n	800428e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004276:	d10a      	bne.n	800428e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	605a      	str	r2, [r3, #4]
  }
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80042ca:	f7fc fe79 	bl	8000fc0 <HAL_GetTick>
 80042ce:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d10e      	bne.n	80042fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f82a 	bl	8004346 <UART_WaitOnFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e020      	b.n	800433e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0304 	and.w	r3, r3, #4
 8004306:	2b04      	cmp	r3, #4
 8004308:	d10e      	bne.n	8004328 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800430a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f814 	bl	8004346 <UART_WaitOnFlagUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e00a      	b.n	800433e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2220      	movs	r2, #32
 800432c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2220      	movs	r2, #32
 8004332:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b084      	sub	sp, #16
 800434a:	af00      	add	r7, sp, #0
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	603b      	str	r3, [r7, #0]
 8004352:	4613      	mov	r3, r2
 8004354:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004356:	e05d      	b.n	8004414 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435e:	d059      	beq.n	8004414 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004360:	f7fc fe2e 	bl	8000fc0 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	429a      	cmp	r2, r3
 800436e:	d302      	bcc.n	8004376 <UART_WaitOnFlagUntilTimeout+0x30>
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d11b      	bne.n	80043ae <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004384:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0201 	bic.w	r2, r2, #1
 8004394:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2220      	movs	r2, #32
 800439a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2220      	movs	r2, #32
 80043a0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e042      	b.n	8004434 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d02b      	beq.n	8004414 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ca:	d123      	bne.n	8004414 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043e4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0201 	bic.w	r2, r2, #1
 80043f4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2220      	movs	r2, #32
 80043fa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2220      	movs	r2, #32
 8004406:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e00f      	b.n	8004434 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	69da      	ldr	r2, [r3, #28]
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	4013      	ands	r3, r2
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	429a      	cmp	r2, r3
 8004422:	bf0c      	ite	eq
 8004424:	2301      	moveq	r3, #1
 8004426:	2300      	movne	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	461a      	mov	r2, r3
 800442c:	79fb      	ldrb	r3, [r7, #7]
 800442e:	429a      	cmp	r2, r3
 8004430:	d092      	beq.n	8004358 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004452:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2220      	movs	r2, #32
 8004458:	675a      	str	r2, [r3, #116]	; 0x74
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800447c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0201 	bic.w	r2, r2, #1
 800448c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2220      	movs	r2, #32
 8004492:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	661a      	str	r2, [r3, #96]	; 0x60
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b084      	sub	sp, #16
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b2:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0320 	and.w	r3, r3, #32
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d11e      	bne.n	8004500 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044d8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0201 	bic.w	r2, r2, #1
 80044e8:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044f8:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2220      	movs	r2, #32
 80044fe:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f7ff fc0b 	bl	8003d1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004506:	bf00      	nop
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f7ff fc07 	bl	8003d30 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004522:	bf00      	nop
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b086      	sub	sp, #24
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004536:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800453c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004542:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454e:	2b80      	cmp	r3, #128	; 0x80
 8004550:	d109      	bne.n	8004566 <UART_DMAError+0x3c>
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	2b21      	cmp	r3, #33	; 0x21
 8004556:	d106      	bne.n	8004566 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2200      	movs	r2, #0
 800455c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004560:	6978      	ldr	r0, [r7, #20]
 8004562:	f7ff ff6b 	bl	800443c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004570:	2b40      	cmp	r3, #64	; 0x40
 8004572:	d109      	bne.n	8004588 <UART_DMAError+0x5e>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b22      	cmp	r3, #34	; 0x22
 8004578:	d106      	bne.n	8004588 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2200      	movs	r2, #0
 800457e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004582:	6978      	ldr	r0, [r7, #20]
 8004584:	f7ff ff6f 	bl	8004466 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800458c:	f043 0210 	orr.w	r2, r3, #16
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004594:	6978      	ldr	r0, [r7, #20]
 8004596:	f7ff fbd5 	bl	8003d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800459a:	bf00      	nop
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80045a2:	b480      	push	{r7}
 80045a4:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80045a6:	bf00      	nop
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045b6:	f3ef 8305 	mrs	r3, IPSR
 80045ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80045bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10f      	bne.n	80045e2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045c2:	f3ef 8310 	mrs	r3, PRIMASK
 80045c6:	607b      	str	r3, [r7, #4]
  return(result);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d105      	bne.n	80045da <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045ce:	f3ef 8311 	mrs	r3, BASEPRI
 80045d2:	603b      	str	r3, [r7, #0]
  return(result);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d007      	beq.n	80045ea <osKernelInitialize+0x3a>
 80045da:	4b0e      	ldr	r3, [pc, #56]	; (8004614 <osKernelInitialize+0x64>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d103      	bne.n	80045ea <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80045e2:	f06f 0305 	mvn.w	r3, #5
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	e00c      	b.n	8004604 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80045ea:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <osKernelInitialize+0x64>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d105      	bne.n	80045fe <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80045f2:	4b08      	ldr	r3, [pc, #32]	; (8004614 <osKernelInitialize+0x64>)
 80045f4:	2201      	movs	r2, #1
 80045f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	e002      	b.n	8004604 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80045fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004602:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004604:	68fb      	ldr	r3, [r7, #12]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	20000030 	.word	0x20000030

08004618 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800461e:	f3ef 8305 	mrs	r3, IPSR
 8004622:	60bb      	str	r3, [r7, #8]
  return(result);
 8004624:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10f      	bne.n	800464a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800462a:	f3ef 8310 	mrs	r3, PRIMASK
 800462e:	607b      	str	r3, [r7, #4]
  return(result);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d105      	bne.n	8004642 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004636:	f3ef 8311 	mrs	r3, BASEPRI
 800463a:	603b      	str	r3, [r7, #0]
  return(result);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d007      	beq.n	8004652 <osKernelStart+0x3a>
 8004642:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <osKernelStart+0x68>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b02      	cmp	r3, #2
 8004648:	d103      	bne.n	8004652 <osKernelStart+0x3a>
    stat = osErrorISR;
 800464a:	f06f 0305 	mvn.w	r3, #5
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	e010      	b.n	8004674 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004652:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <osKernelStart+0x68>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d109      	bne.n	800466e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800465a:	f7ff ffa2 	bl	80045a2 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800465e:	4b08      	ldr	r3, [pc, #32]	; (8004680 <osKernelStart+0x68>)
 8004660:	2202      	movs	r2, #2
 8004662:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004664:	f001 f870 	bl	8005748 <vTaskStartScheduler>
      stat = osOK;
 8004668:	2300      	movs	r3, #0
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	e002      	b.n	8004674 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800466e:	f04f 33ff 	mov.w	r3, #4294967295
 8004672:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004674:	68fb      	ldr	r3, [r7, #12]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	20000030 	.word	0x20000030

08004684 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004684:	b580      	push	{r7, lr}
 8004686:	b090      	sub	sp, #64	; 0x40
 8004688:	af04      	add	r7, sp, #16
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004690:	2300      	movs	r3, #0
 8004692:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004694:	f3ef 8305 	mrs	r3, IPSR
 8004698:	61fb      	str	r3, [r7, #28]
  return(result);
 800469a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800469c:	2b00      	cmp	r3, #0
 800469e:	f040 808f 	bne.w	80047c0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046a2:	f3ef 8310 	mrs	r3, PRIMASK
 80046a6:	61bb      	str	r3, [r7, #24]
  return(result);
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d105      	bne.n	80046ba <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046ae:	f3ef 8311 	mrs	r3, BASEPRI
 80046b2:	617b      	str	r3, [r7, #20]
  return(result);
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <osThreadNew+0x3e>
 80046ba:	4b44      	ldr	r3, [pc, #272]	; (80047cc <osThreadNew+0x148>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d07e      	beq.n	80047c0 <osThreadNew+0x13c>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d07b      	beq.n	80047c0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80046c8:	2380      	movs	r3, #128	; 0x80
 80046ca:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80046cc:	2318      	movs	r3, #24
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80046d0:	2300      	movs	r3, #0
 80046d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80046d4:	f04f 33ff 	mov.w	r3, #4294967295
 80046d8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d045      	beq.n	800476c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <osThreadNew+0x6a>
        name = attr->name;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d008      	beq.n	8004714 <osThreadNew+0x90>
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	2b38      	cmp	r3, #56	; 0x38
 8004706:	d805      	bhi.n	8004714 <osThreadNew+0x90>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <osThreadNew+0x94>
        return (NULL);
 8004714:	2300      	movs	r3, #0
 8004716:	e054      	b.n	80047c2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	089b      	lsrs	r3, r3, #2
 8004726:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00e      	beq.n	800474e <osThreadNew+0xca>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	2b5b      	cmp	r3, #91	; 0x5b
 8004736:	d90a      	bls.n	800474e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800473c:	2b00      	cmp	r3, #0
 800473e:	d006      	beq.n	800474e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <osThreadNew+0xca>
        mem = 1;
 8004748:	2301      	movs	r3, #1
 800474a:	623b      	str	r3, [r7, #32]
 800474c:	e010      	b.n	8004770 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10c      	bne.n	8004770 <osThreadNew+0xec>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d108      	bne.n	8004770 <osThreadNew+0xec>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d104      	bne.n	8004770 <osThreadNew+0xec>
          mem = 0;
 8004766:	2300      	movs	r3, #0
 8004768:	623b      	str	r3, [r7, #32]
 800476a:	e001      	b.n	8004770 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800476c:	2300      	movs	r3, #0
 800476e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d110      	bne.n	8004798 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800477e:	9202      	str	r2, [sp, #8]
 8004780:	9301      	str	r3, [sp, #4]
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800478a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 fe09 	bl	80053a4 <xTaskCreateStatic>
 8004792:	4603      	mov	r3, r0
 8004794:	613b      	str	r3, [r7, #16]
 8004796:	e013      	b.n	80047c0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d110      	bne.n	80047c0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800479e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	f107 0310 	add.w	r3, r7, #16
 80047a6:	9301      	str	r3, [sp, #4]
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 fe51 	bl	8005458 <xTaskCreate>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d001      	beq.n	80047c0 <osThreadNew+0x13c>
          hTask = NULL;
 80047bc:	2300      	movs	r3, #0
 80047be:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80047c0:	693b      	ldr	r3, [r7, #16]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3730      	adds	r7, #48	; 0x30
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	20000030 	.word	0x20000030

080047d0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047d8:	f3ef 8305 	mrs	r3, IPSR
 80047dc:	613b      	str	r3, [r7, #16]
  return(result);
 80047de:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10f      	bne.n	8004804 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047e4:	f3ef 8310 	mrs	r3, PRIMASK
 80047e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d105      	bne.n	80047fc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047f0:	f3ef 8311 	mrs	r3, BASEPRI
 80047f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d007      	beq.n	800480c <osDelay+0x3c>
 80047fc:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <osDelay+0x58>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b02      	cmp	r3, #2
 8004802:	d103      	bne.n	800480c <osDelay+0x3c>
    stat = osErrorISR;
 8004804:	f06f 0305 	mvn.w	r3, #5
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	e007      	b.n	800481c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800480c:	2300      	movs	r3, #0
 800480e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 ff62 	bl	80056e0 <vTaskDelay>
    }
  }

  return (stat);
 800481c:	697b      	ldr	r3, [r7, #20]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	20000030 	.word	0x20000030

0800482c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4a07      	ldr	r2, [pc, #28]	; (8004858 <vApplicationGetIdleTaskMemory+0x2c>)
 800483c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	4a06      	ldr	r2, [pc, #24]	; (800485c <vApplicationGetIdleTaskMemory+0x30>)
 8004842:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2280      	movs	r2, #128	; 0x80
 8004848:	601a      	str	r2, [r3, #0]
}
 800484a:	bf00      	nop
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	20000034 	.word	0x20000034
 800485c:	20000090 	.word	0x20000090

08004860 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4a07      	ldr	r2, [pc, #28]	; (800488c <vApplicationGetTimerTaskMemory+0x2c>)
 8004870:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	4a06      	ldr	r2, [pc, #24]	; (8004890 <vApplicationGetTimerTaskMemory+0x30>)
 8004876:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800487e:	601a      	str	r2, [r3, #0]
}
 8004880:	bf00      	nop
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	20000290 	.word	0x20000290
 8004890:	200002ec 	.word	0x200002ec

08004894 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f103 0208 	add.w	r2, r3, #8
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f04f 32ff 	mov.w	r2, #4294967295
 80048ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f103 0208 	add.w	r2, r3, #8
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f103 0208 	add.w	r2, r3, #8
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048ee:	b480      	push	{r7}
 80048f0:	b085      	sub	sp, #20
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	601a      	str	r2, [r3, #0]
}
 800492a:	bf00      	nop
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004936:	b480      	push	{r7}
 8004938:	b085      	sub	sp, #20
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494c:	d103      	bne.n	8004956 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	e00c      	b.n	8004970 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3308      	adds	r3, #8
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	e002      	b.n	8004964 <vListInsert+0x2e>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	429a      	cmp	r2, r3
 800496e:	d2f6      	bcs.n	800495e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	601a      	str	r2, [r3, #0]
}
 800499c:	bf00      	nop
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6892      	ldr	r2, [r2, #8]
 80049be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6852      	ldr	r2, [r2, #4]
 80049c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d103      	bne.n	80049dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	1e5a      	subs	r2, r3, #1
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d109      	bne.n	8004a24 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	60bb      	str	r3, [r7, #8]
 8004a22:	e7fe      	b.n	8004a22 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004a24:	f002 f812 	bl	8006a4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a30:	68f9      	ldr	r1, [r7, #12]
 8004a32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a34:	fb01 f303 	mul.w	r3, r1, r3
 8004a38:	441a      	add	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a54:	3b01      	subs	r3, #1
 8004a56:	68f9      	ldr	r1, [r7, #12]
 8004a58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a5a:	fb01 f303 	mul.w	r3, r1, r3
 8004a5e:	441a      	add	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	22ff      	movs	r2, #255	; 0xff
 8004a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	22ff      	movs	r2, #255	; 0xff
 8004a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d114      	bne.n	8004aa4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d01a      	beq.n	8004ab8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	3310      	adds	r3, #16
 8004a86:	4618      	mov	r0, r3
 8004a88:	f001 f8de 	bl	8005c48 <xTaskRemoveFromEventList>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d012      	beq.n	8004ab8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a92:	4b0d      	ldr	r3, [pc, #52]	; (8004ac8 <xQueueGenericReset+0xcc>)
 8004a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	e009      	b.n	8004ab8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	3310      	adds	r3, #16
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff fef3 	bl	8004894 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	3324      	adds	r3, #36	; 0x24
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff feee 	bl	8004894 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ab8:	f001 fff6 	bl	8006aa8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004abc:	2301      	movs	r3, #1
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	e000ed04 	.word	0xe000ed04

08004acc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b08e      	sub	sp, #56	; 0x38
 8004ad0:	af02      	add	r7, sp, #8
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d109      	bne.n	8004af4 <xQueueGenericCreateStatic+0x28>
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004af2:	e7fe      	b.n	8004af2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d109      	bne.n	8004b0e <xQueueGenericCreateStatic+0x42>
 8004afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b0c:	e7fe      	b.n	8004b0c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d002      	beq.n	8004b1a <xQueueGenericCreateStatic+0x4e>
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <xQueueGenericCreateStatic+0x52>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e000      	b.n	8004b20 <xQueueGenericCreateStatic+0x54>
 8004b1e:	2300      	movs	r3, #0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d109      	bne.n	8004b38 <xQueueGenericCreateStatic+0x6c>
 8004b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b28:	f383 8811 	msr	BASEPRI, r3
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	623b      	str	r3, [r7, #32]
 8004b36:	e7fe      	b.n	8004b36 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d102      	bne.n	8004b44 <xQueueGenericCreateStatic+0x78>
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <xQueueGenericCreateStatic+0x7c>
 8004b44:	2301      	movs	r3, #1
 8004b46:	e000      	b.n	8004b4a <xQueueGenericCreateStatic+0x7e>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d109      	bne.n	8004b62 <xQueueGenericCreateStatic+0x96>
 8004b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	61fb      	str	r3, [r7, #28]
 8004b60:	e7fe      	b.n	8004b60 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b62:	2350      	movs	r3, #80	; 0x50
 8004b64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2b50      	cmp	r3, #80	; 0x50
 8004b6a:	d009      	beq.n	8004b80 <xQueueGenericCreateStatic+0xb4>
 8004b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	61bb      	str	r3, [r7, #24]
 8004b7e:	e7fe      	b.n	8004b7e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b80:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00d      	beq.n	8004ba8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b94:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	68b9      	ldr	r1, [r7, #8]
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 f805 	bl	8004bb2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3730      	adds	r7, #48	; 0x30
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b084      	sub	sp, #16
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	60f8      	str	r0, [r7, #12]
 8004bba:	60b9      	str	r1, [r7, #8]
 8004bbc:	607a      	str	r2, [r7, #4]
 8004bbe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d103      	bne.n	8004bce <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	e002      	b.n	8004bd4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004be0:	2101      	movs	r1, #1
 8004be2:	69b8      	ldr	r0, [r7, #24]
 8004be4:	f7ff ff0a 	bl	80049fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	78fa      	ldrb	r2, [r7, #3]
 8004bec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004bf0:	bf00      	nop
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08e      	sub	sp, #56	; 0x38
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
 8004c04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c06:	2300      	movs	r3, #0
 8004c08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d109      	bne.n	8004c28 <xQueueGenericSend+0x30>
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c26:	e7fe      	b.n	8004c26 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d103      	bne.n	8004c36 <xQueueGenericSend+0x3e>
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <xQueueGenericSend+0x42>
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <xQueueGenericSend+0x44>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d109      	bne.n	8004c54 <xQueueGenericSend+0x5c>
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	627b      	str	r3, [r7, #36]	; 0x24
 8004c52:	e7fe      	b.n	8004c52 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d103      	bne.n	8004c62 <xQueueGenericSend+0x6a>
 8004c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d101      	bne.n	8004c66 <xQueueGenericSend+0x6e>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e000      	b.n	8004c68 <xQueueGenericSend+0x70>
 8004c66:	2300      	movs	r3, #0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d109      	bne.n	8004c80 <xQueueGenericSend+0x88>
 8004c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c70:	f383 8811 	msr	BASEPRI, r3
 8004c74:	f3bf 8f6f 	isb	sy
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	623b      	str	r3, [r7, #32]
 8004c7e:	e7fe      	b.n	8004c7e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c80:	f001 f998 	bl	8005fb4 <xTaskGetSchedulerState>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d102      	bne.n	8004c90 <xQueueGenericSend+0x98>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <xQueueGenericSend+0x9c>
 8004c90:	2301      	movs	r3, #1
 8004c92:	e000      	b.n	8004c96 <xQueueGenericSend+0x9e>
 8004c94:	2300      	movs	r3, #0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d109      	bne.n	8004cae <xQueueGenericSend+0xb6>
 8004c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	61fb      	str	r3, [r7, #28]
 8004cac:	e7fe      	b.n	8004cac <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cae:	f001 fecd 	bl	8006a4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d302      	bcc.n	8004cc4 <xQueueGenericSend+0xcc>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d129      	bne.n	8004d18 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	68b9      	ldr	r1, [r7, #8]
 8004cc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cca:	f000 f9ff 	bl	80050cc <prvCopyDataToQueue>
 8004cce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d010      	beq.n	8004cfa <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cda:	3324      	adds	r3, #36	; 0x24
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 ffb3 	bl	8005c48 <xTaskRemoveFromEventList>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d013      	beq.n	8004d10 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ce8:	4b3f      	ldr	r3, [pc, #252]	; (8004de8 <xQueueGenericSend+0x1f0>)
 8004cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	e00a      	b.n	8004d10 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d007      	beq.n	8004d10 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d00:	4b39      	ldr	r3, [pc, #228]	; (8004de8 <xQueueGenericSend+0x1f0>)
 8004d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d10:	f001 feca 	bl	8006aa8 <vPortExitCritical>
				return pdPASS;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e063      	b.n	8004de0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d103      	bne.n	8004d26 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d1e:	f001 fec3 	bl	8006aa8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d22:	2300      	movs	r3, #0
 8004d24:	e05c      	b.n	8004de0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d106      	bne.n	8004d3a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d2c:	f107 0314 	add.w	r3, r7, #20
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 ffeb 	bl	8005d0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d36:	2301      	movs	r3, #1
 8004d38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d3a:	f001 feb5 	bl	8006aa8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d3e:	f000 fd67 	bl	8005810 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d42:	f001 fe83 	bl	8006a4c <vPortEnterCritical>
 8004d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d4c:	b25b      	sxtb	r3, r3
 8004d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d52:	d103      	bne.n	8004d5c <xQueueGenericSend+0x164>
 8004d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d62:	b25b      	sxtb	r3, r3
 8004d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d68:	d103      	bne.n	8004d72 <xQueueGenericSend+0x17a>
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d72:	f001 fe99 	bl	8006aa8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d76:	1d3a      	adds	r2, r7, #4
 8004d78:	f107 0314 	add.w	r3, r7, #20
 8004d7c:	4611      	mov	r1, r2
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 ffda 	bl	8005d38 <xTaskCheckForTimeOut>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d124      	bne.n	8004dd4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d8c:	f000 fa96 	bl	80052bc <prvIsQueueFull>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d018      	beq.n	8004dc8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d98:	3310      	adds	r3, #16
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	4611      	mov	r1, r2
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 ff04 	bl	8005bac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004da4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004da6:	f000 fa21 	bl	80051ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004daa:	f000 fd3f 	bl	800582c <xTaskResumeAll>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f47f af7c 	bne.w	8004cae <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004db6:	4b0c      	ldr	r3, [pc, #48]	; (8004de8 <xQueueGenericSend+0x1f0>)
 8004db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	e772      	b.n	8004cae <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004dc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dca:	f000 fa0f 	bl	80051ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004dce:	f000 fd2d 	bl	800582c <xTaskResumeAll>
 8004dd2:	e76c      	b.n	8004cae <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004dd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dd6:	f000 fa09 	bl	80051ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004dda:	f000 fd27 	bl	800582c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004dde:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3738      	adds	r7, #56	; 0x38
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	e000ed04 	.word	0xe000ed04

08004dec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08e      	sub	sp, #56	; 0x38
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
 8004df8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d109      	bne.n	8004e18 <xQueueGenericSendFromISR+0x2c>
 8004e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	627b      	str	r3, [r7, #36]	; 0x24
 8004e16:	e7fe      	b.n	8004e16 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d103      	bne.n	8004e26 <xQueueGenericSendFromISR+0x3a>
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <xQueueGenericSendFromISR+0x3e>
 8004e26:	2301      	movs	r3, #1
 8004e28:	e000      	b.n	8004e2c <xQueueGenericSendFromISR+0x40>
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d109      	bne.n	8004e44 <xQueueGenericSendFromISR+0x58>
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	623b      	str	r3, [r7, #32]
 8004e42:	e7fe      	b.n	8004e42 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d103      	bne.n	8004e52 <xQueueGenericSendFromISR+0x66>
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d101      	bne.n	8004e56 <xQueueGenericSendFromISR+0x6a>
 8004e52:	2301      	movs	r3, #1
 8004e54:	e000      	b.n	8004e58 <xQueueGenericSendFromISR+0x6c>
 8004e56:	2300      	movs	r3, #0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d109      	bne.n	8004e70 <xQueueGenericSendFromISR+0x84>
 8004e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	61fb      	str	r3, [r7, #28]
 8004e6e:	e7fe      	b.n	8004e6e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e70:	f001 fec8 	bl	8006c04 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e74:	f3ef 8211 	mrs	r2, BASEPRI
 8004e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7c:	f383 8811 	msr	BASEPRI, r3
 8004e80:	f3bf 8f6f 	isb	sy
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	61ba      	str	r2, [r7, #24]
 8004e8a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e8c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d302      	bcc.n	8004ea2 <xQueueGenericSendFromISR+0xb6>
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d12c      	bne.n	8004efc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ea8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	68b9      	ldr	r1, [r7, #8]
 8004eb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004eb2:	f000 f90b 	bl	80050cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004eb6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ebe:	d112      	bne.n	8004ee6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d016      	beq.n	8004ef6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eca:	3324      	adds	r3, #36	; 0x24
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 febb 	bl	8005c48 <xTaskRemoveFromEventList>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00e      	beq.n	8004ef6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00b      	beq.n	8004ef6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	e007      	b.n	8004ef6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ee6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004eea:	3301      	adds	r3, #1
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	b25a      	sxtb	r2, r3
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004efa:	e001      	b.n	8004f00 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004efc:	2300      	movs	r3, #0
 8004efe:	637b      	str	r3, [r7, #52]	; 0x34
 8004f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f02:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3738      	adds	r7, #56	; 0x38
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08c      	sub	sp, #48	; 0x30
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f20:	2300      	movs	r3, #0
 8004f22:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d109      	bne.n	8004f42 <xQueueReceive+0x2e>
	__asm volatile
 8004f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	623b      	str	r3, [r7, #32]
 8004f40:	e7fe      	b.n	8004f40 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d103      	bne.n	8004f50 <xQueueReceive+0x3c>
 8004f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <xQueueReceive+0x40>
 8004f50:	2301      	movs	r3, #1
 8004f52:	e000      	b.n	8004f56 <xQueueReceive+0x42>
 8004f54:	2300      	movs	r3, #0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d109      	bne.n	8004f6e <xQueueReceive+0x5a>
 8004f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	61fb      	str	r3, [r7, #28]
 8004f6c:	e7fe      	b.n	8004f6c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f6e:	f001 f821 	bl	8005fb4 <xTaskGetSchedulerState>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d102      	bne.n	8004f7e <xQueueReceive+0x6a>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <xQueueReceive+0x6e>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e000      	b.n	8004f84 <xQueueReceive+0x70>
 8004f82:	2300      	movs	r3, #0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d109      	bne.n	8004f9c <xQueueReceive+0x88>
 8004f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8c:	f383 8811 	msr	BASEPRI, r3
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	61bb      	str	r3, [r7, #24]
 8004f9a:	e7fe      	b.n	8004f9a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f9c:	f001 fd56 	bl	8006a4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d01f      	beq.n	8004fec <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004fac:	68b9      	ldr	r1, [r7, #8]
 8004fae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fb0:	f000 f8f6 	bl	80051a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	1e5a      	subs	r2, r3, #1
 8004fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fba:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00f      	beq.n	8004fe4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc6:	3310      	adds	r3, #16
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 fe3d 	bl	8005c48 <xTaskRemoveFromEventList>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d007      	beq.n	8004fe4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004fd4:	4b3c      	ldr	r3, [pc, #240]	; (80050c8 <xQueueReceive+0x1b4>)
 8004fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004fe4:	f001 fd60 	bl	8006aa8 <vPortExitCritical>
				return pdPASS;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e069      	b.n	80050c0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d103      	bne.n	8004ffa <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ff2:	f001 fd59 	bl	8006aa8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	e062      	b.n	80050c0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d106      	bne.n	800500e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005000:	f107 0310 	add.w	r3, r7, #16
 8005004:	4618      	mov	r0, r3
 8005006:	f000 fe81 	bl	8005d0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800500a:	2301      	movs	r3, #1
 800500c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800500e:	f001 fd4b 	bl	8006aa8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005012:	f000 fbfd 	bl	8005810 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005016:	f001 fd19 	bl	8006a4c <vPortEnterCritical>
 800501a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005020:	b25b      	sxtb	r3, r3
 8005022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005026:	d103      	bne.n	8005030 <xQueueReceive+0x11c>
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005032:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005036:	b25b      	sxtb	r3, r3
 8005038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503c:	d103      	bne.n	8005046 <xQueueReceive+0x132>
 800503e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005046:	f001 fd2f 	bl	8006aa8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800504a:	1d3a      	adds	r2, r7, #4
 800504c:	f107 0310 	add.w	r3, r7, #16
 8005050:	4611      	mov	r1, r2
 8005052:	4618      	mov	r0, r3
 8005054:	f000 fe70 	bl	8005d38 <xTaskCheckForTimeOut>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d123      	bne.n	80050a6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800505e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005060:	f000 f916 	bl	8005290 <prvIsQueueEmpty>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d017      	beq.n	800509a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506c:	3324      	adds	r3, #36	; 0x24
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	4611      	mov	r1, r2
 8005072:	4618      	mov	r0, r3
 8005074:	f000 fd9a 	bl	8005bac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800507a:	f000 f8b7 	bl	80051ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800507e:	f000 fbd5 	bl	800582c <xTaskResumeAll>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d189      	bne.n	8004f9c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005088:	4b0f      	ldr	r3, [pc, #60]	; (80050c8 <xQueueReceive+0x1b4>)
 800508a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	e780      	b.n	8004f9c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800509a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800509c:	f000 f8a6 	bl	80051ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050a0:	f000 fbc4 	bl	800582c <xTaskResumeAll>
 80050a4:	e77a      	b.n	8004f9c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80050a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050a8:	f000 f8a0 	bl	80051ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050ac:	f000 fbbe 	bl	800582c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050b2:	f000 f8ed 	bl	8005290 <prvIsQueueEmpty>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f43f af6f 	beq.w	8004f9c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80050be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3730      	adds	r7, #48	; 0x30
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	e000ed04 	.word	0xe000ed04

080050cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80050d8:	2300      	movs	r3, #0
 80050da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10d      	bne.n	8005106 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d14d      	bne.n	800518e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 ff7a 	bl	8005ff0 <xTaskPriorityDisinherit>
 80050fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	609a      	str	r2, [r3, #8]
 8005104:	e043      	b.n	800518e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d119      	bne.n	8005140 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6858      	ldr	r0, [r3, #4]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	461a      	mov	r2, r3
 8005116:	68b9      	ldr	r1, [r7, #8]
 8005118:	f001 ffac 	bl	8007074 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005124:	441a      	add	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	429a      	cmp	r2, r3
 8005134:	d32b      	bcc.n	800518e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	605a      	str	r2, [r3, #4]
 800513e:	e026      	b.n	800518e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	68d8      	ldr	r0, [r3, #12]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005148:	461a      	mov	r2, r3
 800514a:	68b9      	ldr	r1, [r7, #8]
 800514c:	f001 ff92 	bl	8007074 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	68da      	ldr	r2, [r3, #12]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005158:	425b      	negs	r3, r3
 800515a:	441a      	add	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	429a      	cmp	r2, r3
 800516a:	d207      	bcs.n	800517c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005174:	425b      	negs	r3, r3
 8005176:	441a      	add	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b02      	cmp	r3, #2
 8005180:	d105      	bne.n	800518e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d002      	beq.n	800518e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	3b01      	subs	r3, #1
 800518c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005196:	697b      	ldr	r3, [r7, #20]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3718      	adds	r7, #24
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d018      	beq.n	80051e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	441a      	add	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68da      	ldr	r2, [r3, #12]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d303      	bcc.n	80051d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68d9      	ldr	r1, [r3, #12]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051dc:	461a      	mov	r2, r3
 80051de:	6838      	ldr	r0, [r7, #0]
 80051e0:	f001 ff48 	bl	8007074 <memcpy>
	}
}
 80051e4:	bf00      	nop
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80051f4:	f001 fc2a 	bl	8006a4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005200:	e011      	b.n	8005226 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	2b00      	cmp	r3, #0
 8005208:	d012      	beq.n	8005230 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	3324      	adds	r3, #36	; 0x24
 800520e:	4618      	mov	r0, r3
 8005210:	f000 fd1a 	bl	8005c48 <xTaskRemoveFromEventList>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800521a:	f000 fded 	bl	8005df8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800521e:	7bfb      	ldrb	r3, [r7, #15]
 8005220:	3b01      	subs	r3, #1
 8005222:	b2db      	uxtb	r3, r3
 8005224:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800522a:	2b00      	cmp	r3, #0
 800522c:	dce9      	bgt.n	8005202 <prvUnlockQueue+0x16>
 800522e:	e000      	b.n	8005232 <prvUnlockQueue+0x46>
					break;
 8005230:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	22ff      	movs	r2, #255	; 0xff
 8005236:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800523a:	f001 fc35 	bl	8006aa8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800523e:	f001 fc05 	bl	8006a4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005248:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800524a:	e011      	b.n	8005270 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d012      	beq.n	800527a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3310      	adds	r3, #16
 8005258:	4618      	mov	r0, r3
 800525a:	f000 fcf5 	bl	8005c48 <xTaskRemoveFromEventList>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005264:	f000 fdc8 	bl	8005df8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005268:	7bbb      	ldrb	r3, [r7, #14]
 800526a:	3b01      	subs	r3, #1
 800526c:	b2db      	uxtb	r3, r3
 800526e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005270:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005274:	2b00      	cmp	r3, #0
 8005276:	dce9      	bgt.n	800524c <prvUnlockQueue+0x60>
 8005278:	e000      	b.n	800527c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800527a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	22ff      	movs	r2, #255	; 0xff
 8005280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005284:	f001 fc10 	bl	8006aa8 <vPortExitCritical>
}
 8005288:	bf00      	nop
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005298:	f001 fbd8 	bl	8006a4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d102      	bne.n	80052aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80052a4:	2301      	movs	r3, #1
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	e001      	b.n	80052ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80052aa:	2300      	movs	r3, #0
 80052ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052ae:	f001 fbfb 	bl	8006aa8 <vPortExitCritical>

	return xReturn;
 80052b2:	68fb      	ldr	r3, [r7, #12]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052c4:	f001 fbc2 	bl	8006a4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d102      	bne.n	80052da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80052d4:	2301      	movs	r3, #1
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	e001      	b.n	80052de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80052da:	2300      	movs	r3, #0
 80052dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052de:	f001 fbe3 	bl	8006aa8 <vPortExitCritical>

	return xReturn;
 80052e2:	68fb      	ldr	r3, [r7, #12]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	e014      	b.n	8005326 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80052fc:	4a0e      	ldr	r2, [pc, #56]	; (8005338 <vQueueAddToRegistry+0x4c>)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10b      	bne.n	8005320 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005308:	490b      	ldr	r1, [pc, #44]	; (8005338 <vQueueAddToRegistry+0x4c>)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005312:	4a09      	ldr	r2, [pc, #36]	; (8005338 <vQueueAddToRegistry+0x4c>)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	4413      	add	r3, r2
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800531e:	e005      	b.n	800532c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	3301      	adds	r3, #1
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2b07      	cmp	r3, #7
 800532a:	d9e7      	bls.n	80052fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800532c:	bf00      	nop
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	20001acc 	.word	0x20001acc

0800533c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800534c:	f001 fb7e 	bl	8006a4c <vPortEnterCritical>
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005356:	b25b      	sxtb	r3, r3
 8005358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535c:	d103      	bne.n	8005366 <vQueueWaitForMessageRestricted+0x2a>
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800536c:	b25b      	sxtb	r3, r3
 800536e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005372:	d103      	bne.n	800537c <vQueueWaitForMessageRestricted+0x40>
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800537c:	f001 fb94 	bl	8006aa8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005384:	2b00      	cmp	r3, #0
 8005386:	d106      	bne.n	8005396 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	3324      	adds	r3, #36	; 0x24
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	68b9      	ldr	r1, [r7, #8]
 8005390:	4618      	mov	r0, r3
 8005392:	f000 fc2f 	bl	8005bf4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005396:	6978      	ldr	r0, [r7, #20]
 8005398:	f7ff ff28 	bl	80051ec <prvUnlockQueue>
	}
 800539c:	bf00      	nop
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08e      	sub	sp, #56	; 0x38
 80053a8:	af04      	add	r7, sp, #16
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80053b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d109      	bne.n	80053cc <xTaskCreateStatic+0x28>
 80053b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053bc:	f383 8811 	msr	BASEPRI, r3
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	623b      	str	r3, [r7, #32]
 80053ca:	e7fe      	b.n	80053ca <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80053cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d109      	bne.n	80053e6 <xTaskCreateStatic+0x42>
 80053d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	61fb      	str	r3, [r7, #28]
 80053e4:	e7fe      	b.n	80053e4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053e6:	235c      	movs	r3, #92	; 0x5c
 80053e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	2b5c      	cmp	r3, #92	; 0x5c
 80053ee:	d009      	beq.n	8005404 <xTaskCreateStatic+0x60>
 80053f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	61bb      	str	r3, [r7, #24]
 8005402:	e7fe      	b.n	8005402 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005404:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005408:	2b00      	cmp	r3, #0
 800540a:	d01e      	beq.n	800544a <xTaskCreateStatic+0xa6>
 800540c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540e:	2b00      	cmp	r3, #0
 8005410:	d01b      	beq.n	800544a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005414:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800541a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	2202      	movs	r2, #2
 8005420:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005424:	2300      	movs	r3, #0
 8005426:	9303      	str	r3, [sp, #12]
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	9302      	str	r3, [sp, #8]
 800542c:	f107 0314 	add.w	r3, r7, #20
 8005430:	9301      	str	r3, [sp, #4]
 8005432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	68b9      	ldr	r1, [r7, #8]
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 f850 	bl	80054e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005442:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005444:	f000 f8dc 	bl	8005600 <prvAddNewTaskToReadyList>
 8005448:	e001      	b.n	800544e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800544e:	697b      	ldr	r3, [r7, #20]
	}
 8005450:	4618      	mov	r0, r3
 8005452:	3728      	adds	r7, #40	; 0x28
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08c      	sub	sp, #48	; 0x30
 800545c:	af04      	add	r7, sp, #16
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	603b      	str	r3, [r7, #0]
 8005464:	4613      	mov	r3, r2
 8005466:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005468:	88fb      	ldrh	r3, [r7, #6]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4618      	mov	r0, r3
 800546e:	f001 fc07 	bl	8006c80 <pvPortMalloc>
 8005472:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00e      	beq.n	8005498 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800547a:	205c      	movs	r0, #92	; 0x5c
 800547c:	f001 fc00 	bl	8006c80 <pvPortMalloc>
 8005480:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	631a      	str	r2, [r3, #48]	; 0x30
 800548e:	e005      	b.n	800549c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005490:	6978      	ldr	r0, [r7, #20]
 8005492:	f001 fcb7 	bl	8006e04 <vPortFree>
 8005496:	e001      	b.n	800549c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005498:	2300      	movs	r3, #0
 800549a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d017      	beq.n	80054d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054aa:	88fa      	ldrh	r2, [r7, #6]
 80054ac:	2300      	movs	r3, #0
 80054ae:	9303      	str	r3, [sp, #12]
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	9302      	str	r3, [sp, #8]
 80054b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b6:	9301      	str	r3, [sp, #4]
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	68b9      	ldr	r1, [r7, #8]
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 f80e 	bl	80054e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054c6:	69f8      	ldr	r0, [r7, #28]
 80054c8:	f000 f89a 	bl	8005600 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054cc:	2301      	movs	r3, #1
 80054ce:	61bb      	str	r3, [r7, #24]
 80054d0:	e002      	b.n	80054d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054d2:	f04f 33ff 	mov.w	r3, #4294967295
 80054d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054d8:	69bb      	ldr	r3, [r7, #24]
	}
 80054da:	4618      	mov	r0, r3
 80054dc:	3720      	adds	r7, #32
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b088      	sub	sp, #32
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	60f8      	str	r0, [r7, #12]
 80054ea:	60b9      	str	r1, [r7, #8]
 80054ec:	607a      	str	r2, [r7, #4]
 80054ee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	461a      	mov	r2, r3
 80054fa:	21a5      	movs	r1, #165	; 0xa5
 80054fc:	f001 fdc5 	bl	800708a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800550a:	3b01      	subs	r3, #1
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	f023 0307 	bic.w	r3, r3, #7
 8005518:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	2b00      	cmp	r3, #0
 8005522:	d009      	beq.n	8005538 <prvInitialiseNewTask+0x56>
 8005524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005528:	f383 8811 	msr	BASEPRI, r3
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	617b      	str	r3, [r7, #20]
 8005536:	e7fe      	b.n	8005536 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d01f      	beq.n	800557e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800553e:	2300      	movs	r3, #0
 8005540:	61fb      	str	r3, [r7, #28]
 8005542:	e012      	b.n	800556a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	4413      	add	r3, r2
 800554a:	7819      	ldrb	r1, [r3, #0]
 800554c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	4413      	add	r3, r2
 8005552:	3334      	adds	r3, #52	; 0x34
 8005554:	460a      	mov	r2, r1
 8005556:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	4413      	add	r3, r2
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d006      	beq.n	8005572 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	3301      	adds	r3, #1
 8005568:	61fb      	str	r3, [r7, #28]
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	2b0f      	cmp	r3, #15
 800556e:	d9e9      	bls.n	8005544 <prvInitialiseNewTask+0x62>
 8005570:	e000      	b.n	8005574 <prvInitialiseNewTask+0x92>
			{
				break;
 8005572:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800557c:	e003      	b.n	8005586 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800557e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005588:	2b37      	cmp	r3, #55	; 0x37
 800558a:	d901      	bls.n	8005590 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800558c:	2337      	movs	r3, #55	; 0x37
 800558e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005594:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800559a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800559c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559e:	2200      	movs	r2, #0
 80055a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a4:	3304      	adds	r3, #4
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff f994 	bl	80048d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	3318      	adds	r3, #24
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff f98f 	bl	80048d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80055cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ce:	2200      	movs	r2, #0
 80055d0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	68f9      	ldr	r1, [r7, #12]
 80055de:	69b8      	ldr	r0, [r7, #24]
 80055e0:	f001 f90c 	bl	80067fc <pxPortInitialiseStack>
 80055e4:	4602      	mov	r2, r0
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055f6:	bf00      	nop
 80055f8:	3720      	adds	r7, #32
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005608:	f001 fa20 	bl	8006a4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800560c:	4b2d      	ldr	r3, [pc, #180]	; (80056c4 <prvAddNewTaskToReadyList+0xc4>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3301      	adds	r3, #1
 8005612:	4a2c      	ldr	r2, [pc, #176]	; (80056c4 <prvAddNewTaskToReadyList+0xc4>)
 8005614:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005616:	4b2c      	ldr	r3, [pc, #176]	; (80056c8 <prvAddNewTaskToReadyList+0xc8>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d109      	bne.n	8005632 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800561e:	4a2a      	ldr	r2, [pc, #168]	; (80056c8 <prvAddNewTaskToReadyList+0xc8>)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005624:	4b27      	ldr	r3, [pc, #156]	; (80056c4 <prvAddNewTaskToReadyList+0xc4>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d110      	bne.n	800564e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800562c:	f000 fc08 	bl	8005e40 <prvInitialiseTaskLists>
 8005630:	e00d      	b.n	800564e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005632:	4b26      	ldr	r3, [pc, #152]	; (80056cc <prvAddNewTaskToReadyList+0xcc>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d109      	bne.n	800564e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800563a:	4b23      	ldr	r3, [pc, #140]	; (80056c8 <prvAddNewTaskToReadyList+0xc8>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	429a      	cmp	r2, r3
 8005646:	d802      	bhi.n	800564e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005648:	4a1f      	ldr	r2, [pc, #124]	; (80056c8 <prvAddNewTaskToReadyList+0xc8>)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800564e:	4b20      	ldr	r3, [pc, #128]	; (80056d0 <prvAddNewTaskToReadyList+0xd0>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3301      	adds	r3, #1
 8005654:	4a1e      	ldr	r2, [pc, #120]	; (80056d0 <prvAddNewTaskToReadyList+0xd0>)
 8005656:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005658:	4b1d      	ldr	r3, [pc, #116]	; (80056d0 <prvAddNewTaskToReadyList+0xd0>)
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005664:	4b1b      	ldr	r3, [pc, #108]	; (80056d4 <prvAddNewTaskToReadyList+0xd4>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	429a      	cmp	r2, r3
 800566a:	d903      	bls.n	8005674 <prvAddNewTaskToReadyList+0x74>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005670:	4a18      	ldr	r2, [pc, #96]	; (80056d4 <prvAddNewTaskToReadyList+0xd4>)
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005678:	4613      	mov	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4a15      	ldr	r2, [pc, #84]	; (80056d8 <prvAddNewTaskToReadyList+0xd8>)
 8005682:	441a      	add	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	3304      	adds	r3, #4
 8005688:	4619      	mov	r1, r3
 800568a:	4610      	mov	r0, r2
 800568c:	f7ff f92f 	bl	80048ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005690:	f001 fa0a 	bl	8006aa8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005694:	4b0d      	ldr	r3, [pc, #52]	; (80056cc <prvAddNewTaskToReadyList+0xcc>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00e      	beq.n	80056ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800569c:	4b0a      	ldr	r3, [pc, #40]	; (80056c8 <prvAddNewTaskToReadyList+0xc8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d207      	bcs.n	80056ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80056aa:	4b0c      	ldr	r3, [pc, #48]	; (80056dc <prvAddNewTaskToReadyList+0xdc>)
 80056ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	f3bf 8f4f 	dsb	sy
 80056b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056ba:	bf00      	nop
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	20000bc0 	.word	0x20000bc0
 80056c8:	200006ec 	.word	0x200006ec
 80056cc:	20000bcc 	.word	0x20000bcc
 80056d0:	20000bdc 	.word	0x20000bdc
 80056d4:	20000bc8 	.word	0x20000bc8
 80056d8:	200006f0 	.word	0x200006f0
 80056dc:	e000ed04 	.word	0xe000ed04

080056e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056e8:	2300      	movs	r3, #0
 80056ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d016      	beq.n	8005720 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056f2:	4b13      	ldr	r3, [pc, #76]	; (8005740 <vTaskDelay+0x60>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d009      	beq.n	800570e <vTaskDelay+0x2e>
 80056fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	60bb      	str	r3, [r7, #8]
 800570c:	e7fe      	b.n	800570c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800570e:	f000 f87f 	bl	8005810 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005712:	2100      	movs	r1, #0
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fcd7 	bl	80060c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800571a:	f000 f887 	bl	800582c <xTaskResumeAll>
 800571e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d107      	bne.n	8005736 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005726:	4b07      	ldr	r3, [pc, #28]	; (8005744 <vTaskDelay+0x64>)
 8005728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005736:	bf00      	nop
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	20000be8 	.word	0x20000be8
 8005744:	e000ed04 	.word	0xe000ed04

08005748 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b08a      	sub	sp, #40	; 0x28
 800574c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800574e:	2300      	movs	r3, #0
 8005750:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005752:	2300      	movs	r3, #0
 8005754:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005756:	463a      	mov	r2, r7
 8005758:	1d39      	adds	r1, r7, #4
 800575a:	f107 0308 	add.w	r3, r7, #8
 800575e:	4618      	mov	r0, r3
 8005760:	f7ff f864 	bl	800482c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005764:	6839      	ldr	r1, [r7, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	9202      	str	r2, [sp, #8]
 800576c:	9301      	str	r3, [sp, #4]
 800576e:	2300      	movs	r3, #0
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	2300      	movs	r3, #0
 8005774:	460a      	mov	r2, r1
 8005776:	4920      	ldr	r1, [pc, #128]	; (80057f8 <vTaskStartScheduler+0xb0>)
 8005778:	4820      	ldr	r0, [pc, #128]	; (80057fc <vTaskStartScheduler+0xb4>)
 800577a:	f7ff fe13 	bl	80053a4 <xTaskCreateStatic>
 800577e:	4602      	mov	r2, r0
 8005780:	4b1f      	ldr	r3, [pc, #124]	; (8005800 <vTaskStartScheduler+0xb8>)
 8005782:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005784:	4b1e      	ldr	r3, [pc, #120]	; (8005800 <vTaskStartScheduler+0xb8>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800578c:	2301      	movs	r3, #1
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	e001      	b.n	8005796 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005792:	2300      	movs	r3, #0
 8005794:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d102      	bne.n	80057a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800579c:	f000 fce8 	bl	8006170 <xTimerCreateTimerTask>
 80057a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d115      	bne.n	80057d4 <vTaskStartScheduler+0x8c>
 80057a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ac:	f383 8811 	msr	BASEPRI, r3
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057ba:	4b12      	ldr	r3, [pc, #72]	; (8005804 <vTaskStartScheduler+0xbc>)
 80057bc:	f04f 32ff 	mov.w	r2, #4294967295
 80057c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057c2:	4b11      	ldr	r3, [pc, #68]	; (8005808 <vTaskStartScheduler+0xc0>)
 80057c4:	2201      	movs	r2, #1
 80057c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057c8:	4b10      	ldr	r3, [pc, #64]	; (800580c <vTaskStartScheduler+0xc4>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057ce:	f001 f89f 	bl	8006910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057d2:	e00d      	b.n	80057f0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057da:	d109      	bne.n	80057f0 <vTaskStartScheduler+0xa8>
 80057dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	60fb      	str	r3, [r7, #12]
 80057ee:	e7fe      	b.n	80057ee <vTaskStartScheduler+0xa6>
}
 80057f0:	bf00      	nop
 80057f2:	3718      	adds	r7, #24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	080070dc 	.word	0x080070dc
 80057fc:	08005e11 	.word	0x08005e11
 8005800:	20000be4 	.word	0x20000be4
 8005804:	20000be0 	.word	0x20000be0
 8005808:	20000bcc 	.word	0x20000bcc
 800580c:	20000bc4 	.word	0x20000bc4

08005810 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005814:	4b04      	ldr	r3, [pc, #16]	; (8005828 <vTaskSuspendAll+0x18>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3301      	adds	r3, #1
 800581a:	4a03      	ldr	r2, [pc, #12]	; (8005828 <vTaskSuspendAll+0x18>)
 800581c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800581e:	bf00      	nop
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr
 8005828:	20000be8 	.word	0x20000be8

0800582c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005832:	2300      	movs	r3, #0
 8005834:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005836:	2300      	movs	r3, #0
 8005838:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800583a:	4b41      	ldr	r3, [pc, #260]	; (8005940 <xTaskResumeAll+0x114>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d109      	bne.n	8005856 <xTaskResumeAll+0x2a>
 8005842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005846:	f383 8811 	msr	BASEPRI, r3
 800584a:	f3bf 8f6f 	isb	sy
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	603b      	str	r3, [r7, #0]
 8005854:	e7fe      	b.n	8005854 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005856:	f001 f8f9 	bl	8006a4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800585a:	4b39      	ldr	r3, [pc, #228]	; (8005940 <xTaskResumeAll+0x114>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3b01      	subs	r3, #1
 8005860:	4a37      	ldr	r2, [pc, #220]	; (8005940 <xTaskResumeAll+0x114>)
 8005862:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005864:	4b36      	ldr	r3, [pc, #216]	; (8005940 <xTaskResumeAll+0x114>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d162      	bne.n	8005932 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800586c:	4b35      	ldr	r3, [pc, #212]	; (8005944 <xTaskResumeAll+0x118>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d05e      	beq.n	8005932 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005874:	e02f      	b.n	80058d6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005876:	4b34      	ldr	r3, [pc, #208]	; (8005948 <xTaskResumeAll+0x11c>)
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	3318      	adds	r3, #24
 8005882:	4618      	mov	r0, r3
 8005884:	f7ff f890 	bl	80049a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	3304      	adds	r3, #4
 800588c:	4618      	mov	r0, r3
 800588e:	f7ff f88b 	bl	80049a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005896:	4b2d      	ldr	r3, [pc, #180]	; (800594c <xTaskResumeAll+0x120>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	429a      	cmp	r2, r3
 800589c:	d903      	bls.n	80058a6 <xTaskResumeAll+0x7a>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a2:	4a2a      	ldr	r2, [pc, #168]	; (800594c <xTaskResumeAll+0x120>)
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058aa:	4613      	mov	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4413      	add	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4a27      	ldr	r2, [pc, #156]	; (8005950 <xTaskResumeAll+0x124>)
 80058b4:	441a      	add	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	3304      	adds	r3, #4
 80058ba:	4619      	mov	r1, r3
 80058bc:	4610      	mov	r0, r2
 80058be:	f7ff f816 	bl	80048ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c6:	4b23      	ldr	r3, [pc, #140]	; (8005954 <xTaskResumeAll+0x128>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d302      	bcc.n	80058d6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80058d0:	4b21      	ldr	r3, [pc, #132]	; (8005958 <xTaskResumeAll+0x12c>)
 80058d2:	2201      	movs	r2, #1
 80058d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058d6:	4b1c      	ldr	r3, [pc, #112]	; (8005948 <xTaskResumeAll+0x11c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1cb      	bne.n	8005876 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d001      	beq.n	80058e8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058e4:	f000 fb46 	bl	8005f74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80058e8:	4b1c      	ldr	r3, [pc, #112]	; (800595c <xTaskResumeAll+0x130>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d010      	beq.n	8005916 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058f4:	f000 f846 	bl	8005984 <xTaskIncrementTick>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80058fe:	4b16      	ldr	r3, [pc, #88]	; (8005958 <xTaskResumeAll+0x12c>)
 8005900:	2201      	movs	r2, #1
 8005902:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	3b01      	subs	r3, #1
 8005908:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1f1      	bne.n	80058f4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005910:	4b12      	ldr	r3, [pc, #72]	; (800595c <xTaskResumeAll+0x130>)
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005916:	4b10      	ldr	r3, [pc, #64]	; (8005958 <xTaskResumeAll+0x12c>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d009      	beq.n	8005932 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800591e:	2301      	movs	r3, #1
 8005920:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005922:	4b0f      	ldr	r3, [pc, #60]	; (8005960 <xTaskResumeAll+0x134>)
 8005924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005932:	f001 f8b9 	bl	8006aa8 <vPortExitCritical>

	return xAlreadyYielded;
 8005936:	68bb      	ldr	r3, [r7, #8]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	20000be8 	.word	0x20000be8
 8005944:	20000bc0 	.word	0x20000bc0
 8005948:	20000b80 	.word	0x20000b80
 800594c:	20000bc8 	.word	0x20000bc8
 8005950:	200006f0 	.word	0x200006f0
 8005954:	200006ec 	.word	0x200006ec
 8005958:	20000bd4 	.word	0x20000bd4
 800595c:	20000bd0 	.word	0x20000bd0
 8005960:	e000ed04 	.word	0xe000ed04

08005964 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800596a:	4b05      	ldr	r3, [pc, #20]	; (8005980 <xTaskGetTickCount+0x1c>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005970:	687b      	ldr	r3, [r7, #4]
}
 8005972:	4618      	mov	r0, r3
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	20000bc4 	.word	0x20000bc4

08005984 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800598a:	2300      	movs	r3, #0
 800598c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800598e:	4b4e      	ldr	r3, [pc, #312]	; (8005ac8 <xTaskIncrementTick+0x144>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	f040 8088 	bne.w	8005aa8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005998:	4b4c      	ldr	r3, [pc, #304]	; (8005acc <xTaskIncrementTick+0x148>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3301      	adds	r3, #1
 800599e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80059a0:	4a4a      	ldr	r2, [pc, #296]	; (8005acc <xTaskIncrementTick+0x148>)
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d11f      	bne.n	80059ec <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80059ac:	4b48      	ldr	r3, [pc, #288]	; (8005ad0 <xTaskIncrementTick+0x14c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d009      	beq.n	80059ca <xTaskIncrementTick+0x46>
 80059b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	603b      	str	r3, [r7, #0]
 80059c8:	e7fe      	b.n	80059c8 <xTaskIncrementTick+0x44>
 80059ca:	4b41      	ldr	r3, [pc, #260]	; (8005ad0 <xTaskIncrementTick+0x14c>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	4b40      	ldr	r3, [pc, #256]	; (8005ad4 <xTaskIncrementTick+0x150>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a3e      	ldr	r2, [pc, #248]	; (8005ad0 <xTaskIncrementTick+0x14c>)
 80059d6:	6013      	str	r3, [r2, #0]
 80059d8:	4a3e      	ldr	r2, [pc, #248]	; (8005ad4 <xTaskIncrementTick+0x150>)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	4b3e      	ldr	r3, [pc, #248]	; (8005ad8 <xTaskIncrementTick+0x154>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3301      	adds	r3, #1
 80059e4:	4a3c      	ldr	r2, [pc, #240]	; (8005ad8 <xTaskIncrementTick+0x154>)
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	f000 fac4 	bl	8005f74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059ec:	4b3b      	ldr	r3, [pc, #236]	; (8005adc <xTaskIncrementTick+0x158>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d349      	bcc.n	8005a8a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059f6:	4b36      	ldr	r3, [pc, #216]	; (8005ad0 <xTaskIncrementTick+0x14c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d104      	bne.n	8005a0a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a00:	4b36      	ldr	r3, [pc, #216]	; (8005adc <xTaskIncrementTick+0x158>)
 8005a02:	f04f 32ff 	mov.w	r2, #4294967295
 8005a06:	601a      	str	r2, [r3, #0]
					break;
 8005a08:	e03f      	b.n	8005a8a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a0a:	4b31      	ldr	r3, [pc, #196]	; (8005ad0 <xTaskIncrementTick+0x14c>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d203      	bcs.n	8005a2a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a22:	4a2e      	ldr	r2, [pc, #184]	; (8005adc <xTaskIncrementTick+0x158>)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a28:	e02f      	b.n	8005a8a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fe ffba 	bl	80049a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d004      	beq.n	8005a46 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	3318      	adds	r3, #24
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7fe ffb1 	bl	80049a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4a:	4b25      	ldr	r3, [pc, #148]	; (8005ae0 <xTaskIncrementTick+0x15c>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d903      	bls.n	8005a5a <xTaskIncrementTick+0xd6>
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a56:	4a22      	ldr	r2, [pc, #136]	; (8005ae0 <xTaskIncrementTick+0x15c>)
 8005a58:	6013      	str	r3, [r2, #0]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a5e:	4613      	mov	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4a1f      	ldr	r2, [pc, #124]	; (8005ae4 <xTaskIncrementTick+0x160>)
 8005a68:	441a      	add	r2, r3
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	4619      	mov	r1, r3
 8005a70:	4610      	mov	r0, r2
 8005a72:	f7fe ff3c 	bl	80048ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7a:	4b1b      	ldr	r3, [pc, #108]	; (8005ae8 <xTaskIncrementTick+0x164>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d3b8      	bcc.n	80059f6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005a84:	2301      	movs	r3, #1
 8005a86:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a88:	e7b5      	b.n	80059f6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a8a:	4b17      	ldr	r3, [pc, #92]	; (8005ae8 <xTaskIncrementTick+0x164>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a90:	4914      	ldr	r1, [pc, #80]	; (8005ae4 <xTaskIncrementTick+0x160>)
 8005a92:	4613      	mov	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	440b      	add	r3, r1
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d907      	bls.n	8005ab2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	617b      	str	r3, [r7, #20]
 8005aa6:	e004      	b.n	8005ab2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005aa8:	4b10      	ldr	r3, [pc, #64]	; (8005aec <xTaskIncrementTick+0x168>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3301      	adds	r3, #1
 8005aae:	4a0f      	ldr	r2, [pc, #60]	; (8005aec <xTaskIncrementTick+0x168>)
 8005ab0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005ab2:	4b0f      	ldr	r3, [pc, #60]	; (8005af0 <xTaskIncrementTick+0x16c>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005aba:	2301      	movs	r3, #1
 8005abc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005abe:	697b      	ldr	r3, [r7, #20]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	20000be8 	.word	0x20000be8
 8005acc:	20000bc4 	.word	0x20000bc4
 8005ad0:	20000b78 	.word	0x20000b78
 8005ad4:	20000b7c 	.word	0x20000b7c
 8005ad8:	20000bd8 	.word	0x20000bd8
 8005adc:	20000be0 	.word	0x20000be0
 8005ae0:	20000bc8 	.word	0x20000bc8
 8005ae4:	200006f0 	.word	0x200006f0
 8005ae8:	200006ec 	.word	0x200006ec
 8005aec:	20000bd0 	.word	0x20000bd0
 8005af0:	20000bd4 	.word	0x20000bd4

08005af4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005afa:	4b27      	ldr	r3, [pc, #156]	; (8005b98 <vTaskSwitchContext+0xa4>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b02:	4b26      	ldr	r3, [pc, #152]	; (8005b9c <vTaskSwitchContext+0xa8>)
 8005b04:	2201      	movs	r2, #1
 8005b06:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b08:	e040      	b.n	8005b8c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005b0a:	4b24      	ldr	r3, [pc, #144]	; (8005b9c <vTaskSwitchContext+0xa8>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b10:	4b23      	ldr	r3, [pc, #140]	; (8005ba0 <vTaskSwitchContext+0xac>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	60fb      	str	r3, [r7, #12]
 8005b16:	e00f      	b.n	8005b38 <vTaskSwitchContext+0x44>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d109      	bne.n	8005b32 <vTaskSwitchContext+0x3e>
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	607b      	str	r3, [r7, #4]
 8005b30:	e7fe      	b.n	8005b30 <vTaskSwitchContext+0x3c>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	3b01      	subs	r3, #1
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	491a      	ldr	r1, [pc, #104]	; (8005ba4 <vTaskSwitchContext+0xb0>)
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	440b      	add	r3, r1
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d0e5      	beq.n	8005b18 <vTaskSwitchContext+0x24>
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4a13      	ldr	r2, [pc, #76]	; (8005ba4 <vTaskSwitchContext+0xb0>)
 8005b58:	4413      	add	r3, r2
 8005b5a:	60bb      	str	r3, [r7, #8]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	605a      	str	r2, [r3, #4]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	3308      	adds	r3, #8
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d104      	bne.n	8005b7c <vTaskSwitchContext+0x88>
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	605a      	str	r2, [r3, #4]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	4a09      	ldr	r2, [pc, #36]	; (8005ba8 <vTaskSwitchContext+0xb4>)
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	4a06      	ldr	r2, [pc, #24]	; (8005ba0 <vTaskSwitchContext+0xac>)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6013      	str	r3, [r2, #0]
}
 8005b8c:	bf00      	nop
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	20000be8 	.word	0x20000be8
 8005b9c:	20000bd4 	.word	0x20000bd4
 8005ba0:	20000bc8 	.word	0x20000bc8
 8005ba4:	200006f0 	.word	0x200006f0
 8005ba8:	200006ec 	.word	0x200006ec

08005bac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d109      	bne.n	8005bd0 <vTaskPlaceOnEventList+0x24>
 8005bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	e7fe      	b.n	8005bce <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bd0:	4b07      	ldr	r3, [pc, #28]	; (8005bf0 <vTaskPlaceOnEventList+0x44>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	3318      	adds	r3, #24
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7fe feac 	bl	8004936 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bde:	2101      	movs	r1, #1
 8005be0:	6838      	ldr	r0, [r7, #0]
 8005be2:	f000 fa71 	bl	80060c8 <prvAddCurrentTaskToDelayedList>
}
 8005be6:	bf00      	nop
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	200006ec 	.word	0x200006ec

08005bf4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d109      	bne.n	8005c1a <vTaskPlaceOnEventListRestricted+0x26>
 8005c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	e7fe      	b.n	8005c18 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c1a:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <vTaskPlaceOnEventListRestricted+0x50>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3318      	adds	r3, #24
 8005c20:	4619      	mov	r1, r3
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f7fe fe63 	bl	80048ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d002      	beq.n	8005c34 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c32:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c34:	6879      	ldr	r1, [r7, #4]
 8005c36:	68b8      	ldr	r0, [r7, #8]
 8005c38:	f000 fa46 	bl	80060c8 <prvAddCurrentTaskToDelayedList>
	}
 8005c3c:	bf00      	nop
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	200006ec 	.word	0x200006ec

08005c48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d109      	bne.n	8005c72 <xTaskRemoveFromEventList+0x2a>
 8005c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	e7fe      	b.n	8005c70 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	3318      	adds	r3, #24
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fe fe96 	bl	80049a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c7c:	4b1d      	ldr	r3, [pc, #116]	; (8005cf4 <xTaskRemoveFromEventList+0xac>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d11d      	bne.n	8005cc0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	3304      	adds	r3, #4
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7fe fe8d 	bl	80049a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c92:	4b19      	ldr	r3, [pc, #100]	; (8005cf8 <xTaskRemoveFromEventList+0xb0>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d903      	bls.n	8005ca2 <xTaskRemoveFromEventList+0x5a>
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9e:	4a16      	ldr	r2, [pc, #88]	; (8005cf8 <xTaskRemoveFromEventList+0xb0>)
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4a13      	ldr	r2, [pc, #76]	; (8005cfc <xTaskRemoveFromEventList+0xb4>)
 8005cb0:	441a      	add	r2, r3
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	4610      	mov	r0, r2
 8005cba:	f7fe fe18 	bl	80048ee <vListInsertEnd>
 8005cbe:	e005      	b.n	8005ccc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	3318      	adds	r3, #24
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	480e      	ldr	r0, [pc, #56]	; (8005d00 <xTaskRemoveFromEventList+0xb8>)
 8005cc8:	f7fe fe11 	bl	80048ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd0:	4b0c      	ldr	r3, [pc, #48]	; (8005d04 <xTaskRemoveFromEventList+0xbc>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d905      	bls.n	8005ce6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005cde:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <xTaskRemoveFromEventList+0xc0>)
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	e001      	b.n	8005cea <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005cea:	697b      	ldr	r3, [r7, #20]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3718      	adds	r7, #24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	20000be8 	.word	0x20000be8
 8005cf8:	20000bc8 	.word	0x20000bc8
 8005cfc:	200006f0 	.word	0x200006f0
 8005d00:	20000b80 	.word	0x20000b80
 8005d04:	200006ec 	.word	0x200006ec
 8005d08:	20000bd4 	.word	0x20000bd4

08005d0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d14:	4b06      	ldr	r3, [pc, #24]	; (8005d30 <vTaskInternalSetTimeOutState+0x24>)
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d1c:	4b05      	ldr	r3, [pc, #20]	; (8005d34 <vTaskInternalSetTimeOutState+0x28>)
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	605a      	str	r2, [r3, #4]
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	20000bd8 	.word	0x20000bd8
 8005d34:	20000bc4 	.word	0x20000bc4

08005d38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b088      	sub	sp, #32
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d109      	bne.n	8005d5c <xTaskCheckForTimeOut+0x24>
 8005d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4c:	f383 8811 	msr	BASEPRI, r3
 8005d50:	f3bf 8f6f 	isb	sy
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	613b      	str	r3, [r7, #16]
 8005d5a:	e7fe      	b.n	8005d5a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d109      	bne.n	8005d76 <xTaskCheckForTimeOut+0x3e>
 8005d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	e7fe      	b.n	8005d74 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005d76:	f000 fe69 	bl	8006a4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d7a:	4b1d      	ldr	r3, [pc, #116]	; (8005df0 <xTaskCheckForTimeOut+0xb8>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d92:	d102      	bne.n	8005d9a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d94:	2300      	movs	r3, #0
 8005d96:	61fb      	str	r3, [r7, #28]
 8005d98:	e023      	b.n	8005de2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	4b15      	ldr	r3, [pc, #84]	; (8005df4 <xTaskCheckForTimeOut+0xbc>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d007      	beq.n	8005db6 <xTaskCheckForTimeOut+0x7e>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d302      	bcc.n	8005db6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005db0:	2301      	movs	r3, #1
 8005db2:	61fb      	str	r3, [r7, #28]
 8005db4:	e015      	b.n	8005de2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d20b      	bcs.n	8005dd8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	1ad2      	subs	r2, r2, r3
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7ff ff9d 	bl	8005d0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	61fb      	str	r3, [r7, #28]
 8005dd6:	e004      	b.n	8005de2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005dde:	2301      	movs	r3, #1
 8005de0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005de2:	f000 fe61 	bl	8006aa8 <vPortExitCritical>

	return xReturn;
 8005de6:	69fb      	ldr	r3, [r7, #28]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3720      	adds	r7, #32
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	20000bc4 	.word	0x20000bc4
 8005df4:	20000bd8 	.word	0x20000bd8

08005df8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005df8:	b480      	push	{r7}
 8005dfa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005dfc:	4b03      	ldr	r3, [pc, #12]	; (8005e0c <vTaskMissedYield+0x14>)
 8005dfe:	2201      	movs	r2, #1
 8005e00:	601a      	str	r2, [r3, #0]
}
 8005e02:	bf00      	nop
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	20000bd4 	.word	0x20000bd4

08005e10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e18:	f000 f852 	bl	8005ec0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e1c:	4b06      	ldr	r3, [pc, #24]	; (8005e38 <prvIdleTask+0x28>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d9f9      	bls.n	8005e18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e24:	4b05      	ldr	r3, [pc, #20]	; (8005e3c <prvIdleTask+0x2c>)
 8005e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e34:	e7f0      	b.n	8005e18 <prvIdleTask+0x8>
 8005e36:	bf00      	nop
 8005e38:	200006f0 	.word	0x200006f0
 8005e3c:	e000ed04 	.word	0xe000ed04

08005e40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e46:	2300      	movs	r3, #0
 8005e48:	607b      	str	r3, [r7, #4]
 8005e4a:	e00c      	b.n	8005e66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4a12      	ldr	r2, [pc, #72]	; (8005ea0 <prvInitialiseTaskLists+0x60>)
 8005e58:	4413      	add	r3, r2
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fe fd1a 	bl	8004894 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	3301      	adds	r3, #1
 8005e64:	607b      	str	r3, [r7, #4]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2b37      	cmp	r3, #55	; 0x37
 8005e6a:	d9ef      	bls.n	8005e4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e6c:	480d      	ldr	r0, [pc, #52]	; (8005ea4 <prvInitialiseTaskLists+0x64>)
 8005e6e:	f7fe fd11 	bl	8004894 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e72:	480d      	ldr	r0, [pc, #52]	; (8005ea8 <prvInitialiseTaskLists+0x68>)
 8005e74:	f7fe fd0e 	bl	8004894 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e78:	480c      	ldr	r0, [pc, #48]	; (8005eac <prvInitialiseTaskLists+0x6c>)
 8005e7a:	f7fe fd0b 	bl	8004894 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e7e:	480c      	ldr	r0, [pc, #48]	; (8005eb0 <prvInitialiseTaskLists+0x70>)
 8005e80:	f7fe fd08 	bl	8004894 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e84:	480b      	ldr	r0, [pc, #44]	; (8005eb4 <prvInitialiseTaskLists+0x74>)
 8005e86:	f7fe fd05 	bl	8004894 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e8a:	4b0b      	ldr	r3, [pc, #44]	; (8005eb8 <prvInitialiseTaskLists+0x78>)
 8005e8c:	4a05      	ldr	r2, [pc, #20]	; (8005ea4 <prvInitialiseTaskLists+0x64>)
 8005e8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e90:	4b0a      	ldr	r3, [pc, #40]	; (8005ebc <prvInitialiseTaskLists+0x7c>)
 8005e92:	4a05      	ldr	r2, [pc, #20]	; (8005ea8 <prvInitialiseTaskLists+0x68>)
 8005e94:	601a      	str	r2, [r3, #0]
}
 8005e96:	bf00      	nop
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	200006f0 	.word	0x200006f0
 8005ea4:	20000b50 	.word	0x20000b50
 8005ea8:	20000b64 	.word	0x20000b64
 8005eac:	20000b80 	.word	0x20000b80
 8005eb0:	20000b94 	.word	0x20000b94
 8005eb4:	20000bac 	.word	0x20000bac
 8005eb8:	20000b78 	.word	0x20000b78
 8005ebc:	20000b7c 	.word	0x20000b7c

08005ec0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ec6:	e019      	b.n	8005efc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ec8:	f000 fdc0 	bl	8006a4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ecc:	4b0f      	ldr	r3, [pc, #60]	; (8005f0c <prvCheckTasksWaitingTermination+0x4c>)
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7fe fd65 	bl	80049a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ede:	4b0c      	ldr	r3, [pc, #48]	; (8005f10 <prvCheckTasksWaitingTermination+0x50>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	4a0a      	ldr	r2, [pc, #40]	; (8005f10 <prvCheckTasksWaitingTermination+0x50>)
 8005ee6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ee8:	4b0a      	ldr	r3, [pc, #40]	; (8005f14 <prvCheckTasksWaitingTermination+0x54>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3b01      	subs	r3, #1
 8005eee:	4a09      	ldr	r2, [pc, #36]	; (8005f14 <prvCheckTasksWaitingTermination+0x54>)
 8005ef0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ef2:	f000 fdd9 	bl	8006aa8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f80e 	bl	8005f18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005efc:	4b05      	ldr	r3, [pc, #20]	; (8005f14 <prvCheckTasksWaitingTermination+0x54>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1e1      	bne.n	8005ec8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f04:	bf00      	nop
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	20000b94 	.word	0x20000b94
 8005f10:	20000bc0 	.word	0x20000bc0
 8005f14:	20000ba8 	.word	0x20000ba8

08005f18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d108      	bne.n	8005f3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 ff68 	bl	8006e04 <vPortFree>
				vPortFree( pxTCB );
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 ff65 	bl	8006e04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f3a:	e017      	b.n	8005f6c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d103      	bne.n	8005f4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 ff5c 	bl	8006e04 <vPortFree>
	}
 8005f4c:	e00e      	b.n	8005f6c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d009      	beq.n	8005f6c <prvDeleteTCB+0x54>
 8005f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	60fb      	str	r3, [r7, #12]
 8005f6a:	e7fe      	b.n	8005f6a <prvDeleteTCB+0x52>
	}
 8005f6c:	bf00      	nop
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f7a:	4b0c      	ldr	r3, [pc, #48]	; (8005fac <prvResetNextTaskUnblockTime+0x38>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d104      	bne.n	8005f8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f84:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <prvResetNextTaskUnblockTime+0x3c>)
 8005f86:	f04f 32ff 	mov.w	r2, #4294967295
 8005f8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f8c:	e008      	b.n	8005fa0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f8e:	4b07      	ldr	r3, [pc, #28]	; (8005fac <prvResetNextTaskUnblockTime+0x38>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	4a04      	ldr	r2, [pc, #16]	; (8005fb0 <prvResetNextTaskUnblockTime+0x3c>)
 8005f9e:	6013      	str	r3, [r2, #0]
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	20000b78 	.word	0x20000b78
 8005fb0:	20000be0 	.word	0x20000be0

08005fb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005fba:	4b0b      	ldr	r3, [pc, #44]	; (8005fe8 <xTaskGetSchedulerState+0x34>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d102      	bne.n	8005fc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	607b      	str	r3, [r7, #4]
 8005fc6:	e008      	b.n	8005fda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fc8:	4b08      	ldr	r3, [pc, #32]	; (8005fec <xTaskGetSchedulerState+0x38>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d102      	bne.n	8005fd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	607b      	str	r3, [r7, #4]
 8005fd4:	e001      	b.n	8005fda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005fda:	687b      	ldr	r3, [r7, #4]
	}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	20000bcc 	.word	0x20000bcc
 8005fec:	20000be8 	.word	0x20000be8

08005ff0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d054      	beq.n	80060b0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006006:	4b2d      	ldr	r3, [pc, #180]	; (80060bc <xTaskPriorityDisinherit+0xcc>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	429a      	cmp	r2, r3
 800600e:	d009      	beq.n	8006024 <xTaskPriorityDisinherit+0x34>
 8006010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	60fb      	str	r3, [r7, #12]
 8006022:	e7fe      	b.n	8006022 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006028:	2b00      	cmp	r3, #0
 800602a:	d109      	bne.n	8006040 <xTaskPriorityDisinherit+0x50>
 800602c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	60bb      	str	r3, [r7, #8]
 800603e:	e7fe      	b.n	800603e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006044:	1e5a      	subs	r2, r3, #1
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006052:	429a      	cmp	r2, r3
 8006054:	d02c      	beq.n	80060b0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800605a:	2b00      	cmp	r3, #0
 800605c:	d128      	bne.n	80060b0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	3304      	adds	r3, #4
 8006062:	4618      	mov	r0, r3
 8006064:	f7fe fca0 	bl	80049a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006074:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006080:	4b0f      	ldr	r3, [pc, #60]	; (80060c0 <xTaskPriorityDisinherit+0xd0>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	429a      	cmp	r2, r3
 8006086:	d903      	bls.n	8006090 <xTaskPriorityDisinherit+0xa0>
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608c:	4a0c      	ldr	r2, [pc, #48]	; (80060c0 <xTaskPriorityDisinherit+0xd0>)
 800608e:	6013      	str	r3, [r2, #0]
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006094:	4613      	mov	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4a09      	ldr	r2, [pc, #36]	; (80060c4 <xTaskPriorityDisinherit+0xd4>)
 800609e:	441a      	add	r2, r3
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	3304      	adds	r3, #4
 80060a4:	4619      	mov	r1, r3
 80060a6:	4610      	mov	r0, r2
 80060a8:	f7fe fc21 	bl	80048ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80060ac:	2301      	movs	r3, #1
 80060ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060b0:	697b      	ldr	r3, [r7, #20]
	}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3718      	adds	r7, #24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	200006ec 	.word	0x200006ec
 80060c0:	20000bc8 	.word	0x20000bc8
 80060c4:	200006f0 	.word	0x200006f0

080060c8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060d2:	4b21      	ldr	r3, [pc, #132]	; (8006158 <prvAddCurrentTaskToDelayedList+0x90>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060d8:	4b20      	ldr	r3, [pc, #128]	; (800615c <prvAddCurrentTaskToDelayedList+0x94>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	3304      	adds	r3, #4
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fe fc62 	bl	80049a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ea:	d10a      	bne.n	8006102 <prvAddCurrentTaskToDelayedList+0x3a>
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d007      	beq.n	8006102 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060f2:	4b1a      	ldr	r3, [pc, #104]	; (800615c <prvAddCurrentTaskToDelayedList+0x94>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3304      	adds	r3, #4
 80060f8:	4619      	mov	r1, r3
 80060fa:	4819      	ldr	r0, [pc, #100]	; (8006160 <prvAddCurrentTaskToDelayedList+0x98>)
 80060fc:	f7fe fbf7 	bl	80048ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006100:	e026      	b.n	8006150 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4413      	add	r3, r2
 8006108:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800610a:	4b14      	ldr	r3, [pc, #80]	; (800615c <prvAddCurrentTaskToDelayedList+0x94>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	429a      	cmp	r2, r3
 8006118:	d209      	bcs.n	800612e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800611a:	4b12      	ldr	r3, [pc, #72]	; (8006164 <prvAddCurrentTaskToDelayedList+0x9c>)
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	4b0f      	ldr	r3, [pc, #60]	; (800615c <prvAddCurrentTaskToDelayedList+0x94>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3304      	adds	r3, #4
 8006124:	4619      	mov	r1, r3
 8006126:	4610      	mov	r0, r2
 8006128:	f7fe fc05 	bl	8004936 <vListInsert>
}
 800612c:	e010      	b.n	8006150 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800612e:	4b0e      	ldr	r3, [pc, #56]	; (8006168 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	4b0a      	ldr	r3, [pc, #40]	; (800615c <prvAddCurrentTaskToDelayedList+0x94>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	3304      	adds	r3, #4
 8006138:	4619      	mov	r1, r3
 800613a:	4610      	mov	r0, r2
 800613c:	f7fe fbfb 	bl	8004936 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006140:	4b0a      	ldr	r3, [pc, #40]	; (800616c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	429a      	cmp	r2, r3
 8006148:	d202      	bcs.n	8006150 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800614a:	4a08      	ldr	r2, [pc, #32]	; (800616c <prvAddCurrentTaskToDelayedList+0xa4>)
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	6013      	str	r3, [r2, #0]
}
 8006150:	bf00      	nop
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	20000bc4 	.word	0x20000bc4
 800615c:	200006ec 	.word	0x200006ec
 8006160:	20000bac 	.word	0x20000bac
 8006164:	20000b7c 	.word	0x20000b7c
 8006168:	20000b78 	.word	0x20000b78
 800616c:	20000be0 	.word	0x20000be0

08006170 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b08a      	sub	sp, #40	; 0x28
 8006174:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006176:	2300      	movs	r3, #0
 8006178:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800617a:	f000 faff 	bl	800677c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800617e:	4b1c      	ldr	r3, [pc, #112]	; (80061f0 <xTimerCreateTimerTask+0x80>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d021      	beq.n	80061ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006186:	2300      	movs	r3, #0
 8006188:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800618a:	2300      	movs	r3, #0
 800618c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800618e:	1d3a      	adds	r2, r7, #4
 8006190:	f107 0108 	add.w	r1, r7, #8
 8006194:	f107 030c 	add.w	r3, r7, #12
 8006198:	4618      	mov	r0, r3
 800619a:	f7fe fb61 	bl	8004860 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800619e:	6879      	ldr	r1, [r7, #4]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	9202      	str	r2, [sp, #8]
 80061a6:	9301      	str	r3, [sp, #4]
 80061a8:	2302      	movs	r3, #2
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	2300      	movs	r3, #0
 80061ae:	460a      	mov	r2, r1
 80061b0:	4910      	ldr	r1, [pc, #64]	; (80061f4 <xTimerCreateTimerTask+0x84>)
 80061b2:	4811      	ldr	r0, [pc, #68]	; (80061f8 <xTimerCreateTimerTask+0x88>)
 80061b4:	f7ff f8f6 	bl	80053a4 <xTaskCreateStatic>
 80061b8:	4602      	mov	r2, r0
 80061ba:	4b10      	ldr	r3, [pc, #64]	; (80061fc <xTimerCreateTimerTask+0x8c>)
 80061bc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80061be:	4b0f      	ldr	r3, [pc, #60]	; (80061fc <xTimerCreateTimerTask+0x8c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80061c6:	2301      	movs	r3, #1
 80061c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d109      	bne.n	80061e4 <xTimerCreateTimerTask+0x74>
 80061d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	613b      	str	r3, [r7, #16]
 80061e2:	e7fe      	b.n	80061e2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80061e4:	697b      	ldr	r3, [r7, #20]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3718      	adds	r7, #24
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	20000c1c 	.word	0x20000c1c
 80061f4:	080070e4 	.word	0x080070e4
 80061f8:	08006331 	.word	0x08006331
 80061fc:	20000c20 	.word	0x20000c20

08006200 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b08a      	sub	sp, #40	; 0x28
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
 800620c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800620e:	2300      	movs	r3, #0
 8006210:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d109      	bne.n	800622c <xTimerGenericCommand+0x2c>
 8006218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621c:	f383 8811 	msr	BASEPRI, r3
 8006220:	f3bf 8f6f 	isb	sy
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	623b      	str	r3, [r7, #32]
 800622a:	e7fe      	b.n	800622a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800622c:	4b19      	ldr	r3, [pc, #100]	; (8006294 <xTimerGenericCommand+0x94>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d02a      	beq.n	800628a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2b05      	cmp	r3, #5
 8006244:	dc18      	bgt.n	8006278 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006246:	f7ff feb5 	bl	8005fb4 <xTaskGetSchedulerState>
 800624a:	4603      	mov	r3, r0
 800624c:	2b02      	cmp	r3, #2
 800624e:	d109      	bne.n	8006264 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006250:	4b10      	ldr	r3, [pc, #64]	; (8006294 <xTimerGenericCommand+0x94>)
 8006252:	6818      	ldr	r0, [r3, #0]
 8006254:	f107 0110 	add.w	r1, r7, #16
 8006258:	2300      	movs	r3, #0
 800625a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800625c:	f7fe fccc 	bl	8004bf8 <xQueueGenericSend>
 8006260:	6278      	str	r0, [r7, #36]	; 0x24
 8006262:	e012      	b.n	800628a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006264:	4b0b      	ldr	r3, [pc, #44]	; (8006294 <xTimerGenericCommand+0x94>)
 8006266:	6818      	ldr	r0, [r3, #0]
 8006268:	f107 0110 	add.w	r1, r7, #16
 800626c:	2300      	movs	r3, #0
 800626e:	2200      	movs	r2, #0
 8006270:	f7fe fcc2 	bl	8004bf8 <xQueueGenericSend>
 8006274:	6278      	str	r0, [r7, #36]	; 0x24
 8006276:	e008      	b.n	800628a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006278:	4b06      	ldr	r3, [pc, #24]	; (8006294 <xTimerGenericCommand+0x94>)
 800627a:	6818      	ldr	r0, [r3, #0]
 800627c:	f107 0110 	add.w	r1, r7, #16
 8006280:	2300      	movs	r3, #0
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	f7fe fdb2 	bl	8004dec <xQueueGenericSendFromISR>
 8006288:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800628c:	4618      	mov	r0, r3
 800628e:	3728      	adds	r7, #40	; 0x28
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	20000c1c 	.word	0x20000c1c

08006298 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b088      	sub	sp, #32
 800629c:	af02      	add	r7, sp, #8
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062a2:	4b22      	ldr	r3, [pc, #136]	; (800632c <prvProcessExpiredTimer+0x94>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	3304      	adds	r3, #4
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7fe fb79 	bl	80049a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062bc:	f003 0304 	and.w	r3, r3, #4
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d021      	beq.n	8006308 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	699a      	ldr	r2, [r3, #24]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	18d1      	adds	r1, r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	6978      	ldr	r0, [r7, #20]
 80062d2:	f000 f8d1 	bl	8006478 <prvInsertTimerInActiveList>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d01e      	beq.n	800631a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062dc:	2300      	movs	r3, #0
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	2300      	movs	r3, #0
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	2100      	movs	r1, #0
 80062e6:	6978      	ldr	r0, [r7, #20]
 80062e8:	f7ff ff8a 	bl	8006200 <xTimerGenericCommand>
 80062ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d112      	bne.n	800631a <prvProcessExpiredTimer+0x82>
 80062f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f8:	f383 8811 	msr	BASEPRI, r3
 80062fc:	f3bf 8f6f 	isb	sy
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	60fb      	str	r3, [r7, #12]
 8006306:	e7fe      	b.n	8006306 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800630e:	f023 0301 	bic.w	r3, r3, #1
 8006312:	b2da      	uxtb	r2, r3
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	6978      	ldr	r0, [r7, #20]
 8006320:	4798      	blx	r3
}
 8006322:	bf00      	nop
 8006324:	3718      	adds	r7, #24
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	20000c14 	.word	0x20000c14

08006330 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006338:	f107 0308 	add.w	r3, r7, #8
 800633c:	4618      	mov	r0, r3
 800633e:	f000 f857 	bl	80063f0 <prvGetNextExpireTime>
 8006342:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	4619      	mov	r1, r3
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 f803 	bl	8006354 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800634e:	f000 f8d5 	bl	80064fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006352:	e7f1      	b.n	8006338 <prvTimerTask+0x8>

08006354 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800635e:	f7ff fa57 	bl	8005810 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006362:	f107 0308 	add.w	r3, r7, #8
 8006366:	4618      	mov	r0, r3
 8006368:	f000 f866 	bl	8006438 <prvSampleTimeNow>
 800636c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d130      	bne.n	80063d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10a      	bne.n	8006390 <prvProcessTimerOrBlockTask+0x3c>
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	429a      	cmp	r2, r3
 8006380:	d806      	bhi.n	8006390 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006382:	f7ff fa53 	bl	800582c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006386:	68f9      	ldr	r1, [r7, #12]
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f7ff ff85 	bl	8006298 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800638e:	e024      	b.n	80063da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d008      	beq.n	80063a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006396:	4b13      	ldr	r3, [pc, #76]	; (80063e4 <prvProcessTimerOrBlockTask+0x90>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <prvProcessTimerOrBlockTask+0x50>
 80063a0:	2301      	movs	r3, #1
 80063a2:	e000      	b.n	80063a6 <prvProcessTimerOrBlockTask+0x52>
 80063a4:	2300      	movs	r3, #0
 80063a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80063a8:	4b0f      	ldr	r3, [pc, #60]	; (80063e8 <prvProcessTimerOrBlockTask+0x94>)
 80063aa:	6818      	ldr	r0, [r3, #0]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	4619      	mov	r1, r3
 80063b6:	f7fe ffc1 	bl	800533c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80063ba:	f7ff fa37 	bl	800582c <xTaskResumeAll>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10a      	bne.n	80063da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80063c4:	4b09      	ldr	r3, [pc, #36]	; (80063ec <prvProcessTimerOrBlockTask+0x98>)
 80063c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063ca:	601a      	str	r2, [r3, #0]
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	f3bf 8f6f 	isb	sy
}
 80063d4:	e001      	b.n	80063da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80063d6:	f7ff fa29 	bl	800582c <xTaskResumeAll>
}
 80063da:	bf00      	nop
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	20000c18 	.word	0x20000c18
 80063e8:	20000c1c 	.word	0x20000c1c
 80063ec:	e000ed04 	.word	0xe000ed04

080063f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80063f8:	4b0e      	ldr	r3, [pc, #56]	; (8006434 <prvGetNextExpireTime+0x44>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <prvGetNextExpireTime+0x16>
 8006402:	2201      	movs	r2, #1
 8006404:	e000      	b.n	8006408 <prvGetNextExpireTime+0x18>
 8006406:	2200      	movs	r2, #0
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d105      	bne.n	8006420 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006414:	4b07      	ldr	r3, [pc, #28]	; (8006434 <prvGetNextExpireTime+0x44>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	60fb      	str	r3, [r7, #12]
 800641e:	e001      	b.n	8006424 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006420:	2300      	movs	r3, #0
 8006422:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006424:	68fb      	ldr	r3, [r7, #12]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	20000c14 	.word	0x20000c14

08006438 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006440:	f7ff fa90 	bl	8005964 <xTaskGetTickCount>
 8006444:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006446:	4b0b      	ldr	r3, [pc, #44]	; (8006474 <prvSampleTimeNow+0x3c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	429a      	cmp	r2, r3
 800644e:	d205      	bcs.n	800645c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006450:	f000 f930 	bl	80066b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	e002      	b.n	8006462 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006462:	4a04      	ldr	r2, [pc, #16]	; (8006474 <prvSampleTimeNow+0x3c>)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006468:	68fb      	ldr	r3, [r7, #12]
}
 800646a:	4618      	mov	r0, r3
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20000c24 	.word	0x20000c24

08006478 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
 8006484:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006486:	2300      	movs	r3, #0
 8006488:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	429a      	cmp	r2, r3
 800649c:	d812      	bhi.n	80064c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	1ad2      	subs	r2, r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d302      	bcc.n	80064b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80064ac:	2301      	movs	r3, #1
 80064ae:	617b      	str	r3, [r7, #20]
 80064b0:	e01b      	b.n	80064ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80064b2:	4b10      	ldr	r3, [pc, #64]	; (80064f4 <prvInsertTimerInActiveList+0x7c>)
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	3304      	adds	r3, #4
 80064ba:	4619      	mov	r1, r3
 80064bc:	4610      	mov	r0, r2
 80064be:	f7fe fa3a 	bl	8004936 <vListInsert>
 80064c2:	e012      	b.n	80064ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d206      	bcs.n	80064da <prvInsertTimerInActiveList+0x62>
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d302      	bcc.n	80064da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80064d4:	2301      	movs	r3, #1
 80064d6:	617b      	str	r3, [r7, #20]
 80064d8:	e007      	b.n	80064ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064da:	4b07      	ldr	r3, [pc, #28]	; (80064f8 <prvInsertTimerInActiveList+0x80>)
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	3304      	adds	r3, #4
 80064e2:	4619      	mov	r1, r3
 80064e4:	4610      	mov	r0, r2
 80064e6:	f7fe fa26 	bl	8004936 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80064ea:	697b      	ldr	r3, [r7, #20]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	20000c18 	.word	0x20000c18
 80064f8:	20000c14 	.word	0x20000c14

080064fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08e      	sub	sp, #56	; 0x38
 8006500:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006502:	e0c6      	b.n	8006692 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	da17      	bge.n	800653a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800650a:	1d3b      	adds	r3, r7, #4
 800650c:	3304      	adds	r3, #4
 800650e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006512:	2b00      	cmp	r3, #0
 8006514:	d109      	bne.n	800652a <prvProcessReceivedCommands+0x2e>
 8006516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	61fb      	str	r3, [r7, #28]
 8006528:	e7fe      	b.n	8006528 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800652a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006530:	6850      	ldr	r0, [r2, #4]
 8006532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006534:	6892      	ldr	r2, [r2, #8]
 8006536:	4611      	mov	r1, r2
 8006538:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	f2c0 80a7 	blt.w	8006690 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d004      	beq.n	8006558 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	3304      	adds	r3, #4
 8006552:	4618      	mov	r0, r3
 8006554:	f7fe fa28 	bl	80049a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006558:	463b      	mov	r3, r7
 800655a:	4618      	mov	r0, r3
 800655c:	f7ff ff6c 	bl	8006438 <prvSampleTimeNow>
 8006560:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b09      	cmp	r3, #9
 8006566:	f200 8094 	bhi.w	8006692 <prvProcessReceivedCommands+0x196>
 800656a:	a201      	add	r2, pc, #4	; (adr r2, 8006570 <prvProcessReceivedCommands+0x74>)
 800656c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006570:	08006599 	.word	0x08006599
 8006574:	08006599 	.word	0x08006599
 8006578:	08006599 	.word	0x08006599
 800657c:	0800660b 	.word	0x0800660b
 8006580:	0800661f 	.word	0x0800661f
 8006584:	08006667 	.word	0x08006667
 8006588:	08006599 	.word	0x08006599
 800658c:	08006599 	.word	0x08006599
 8006590:	0800660b 	.word	0x0800660b
 8006594:	0800661f 	.word	0x0800661f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800659e:	f043 0301 	orr.w	r3, r3, #1
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	18d1      	adds	r1, r2, r3
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065b8:	f7ff ff5e 	bl	8006478 <prvInsertTimerInActiveList>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d067      	beq.n	8006692 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065d0:	f003 0304 	and.w	r3, r3, #4
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d05c      	beq.n	8006692 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	441a      	add	r2, r3
 80065e0:	2300      	movs	r3, #0
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	2300      	movs	r3, #0
 80065e6:	2100      	movs	r1, #0
 80065e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065ea:	f7ff fe09 	bl	8006200 <xTimerGenericCommand>
 80065ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d14d      	bne.n	8006692 <prvProcessReceivedCommands+0x196>
 80065f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fa:	f383 8811 	msr	BASEPRI, r3
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	61bb      	str	r3, [r7, #24]
 8006608:	e7fe      	b.n	8006608 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006610:	f023 0301 	bic.w	r3, r3, #1
 8006614:	b2da      	uxtb	r2, r3
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800661c:	e039      	b.n	8006692 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006620:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006624:	f043 0301 	orr.w	r3, r3, #1
 8006628:	b2da      	uxtb	r2, r3
 800662a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d109      	bne.n	8006652 <prvProcessReceivedCommands+0x156>
 800663e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006642:	f383 8811 	msr	BASEPRI, r3
 8006646:	f3bf 8f6f 	isb	sy
 800664a:	f3bf 8f4f 	dsb	sy
 800664e:	617b      	str	r3, [r7, #20]
 8006650:	e7fe      	b.n	8006650 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006654:	699a      	ldr	r2, [r3, #24]
 8006656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006658:	18d1      	adds	r1, r2, r3
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800665e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006660:	f7ff ff0a 	bl	8006478 <prvInsertTimerInActiveList>
					break;
 8006664:	e015      	b.n	8006692 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006668:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800666c:	f003 0302 	and.w	r3, r3, #2
 8006670:	2b00      	cmp	r3, #0
 8006672:	d103      	bne.n	800667c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8006674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006676:	f000 fbc5 	bl	8006e04 <vPortFree>
 800667a:	e00a      	b.n	8006692 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800667c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006682:	f023 0301 	bic.w	r3, r3, #1
 8006686:	b2da      	uxtb	r2, r3
 8006688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800668e:	e000      	b.n	8006692 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006690:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006692:	4b07      	ldr	r3, [pc, #28]	; (80066b0 <prvProcessReceivedCommands+0x1b4>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	1d39      	adds	r1, r7, #4
 8006698:	2200      	movs	r2, #0
 800669a:	4618      	mov	r0, r3
 800669c:	f7fe fc3a 	bl	8004f14 <xQueueReceive>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f47f af2e 	bne.w	8006504 <prvProcessReceivedCommands+0x8>
	}
}
 80066a8:	bf00      	nop
 80066aa:	3730      	adds	r7, #48	; 0x30
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	20000c1c 	.word	0x20000c1c

080066b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b088      	sub	sp, #32
 80066b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066ba:	e047      	b.n	800674c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066bc:	4b2d      	ldr	r3, [pc, #180]	; (8006774 <prvSwitchTimerLists+0xc0>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066c6:	4b2b      	ldr	r3, [pc, #172]	; (8006774 <prvSwitchTimerLists+0xc0>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	3304      	adds	r3, #4
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7fe f967 	bl	80049a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d02d      	beq.n	800674c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	693a      	ldr	r2, [r7, #16]
 80066f6:	4413      	add	r3, r2
 80066f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d90e      	bls.n	8006720 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800670e:	4b19      	ldr	r3, [pc, #100]	; (8006774 <prvSwitchTimerLists+0xc0>)
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	3304      	adds	r3, #4
 8006716:	4619      	mov	r1, r3
 8006718:	4610      	mov	r0, r2
 800671a:	f7fe f90c 	bl	8004936 <vListInsert>
 800671e:	e015      	b.n	800674c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006720:	2300      	movs	r3, #0
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	2300      	movs	r3, #0
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	2100      	movs	r1, #0
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f7ff fd68 	bl	8006200 <xTimerGenericCommand>
 8006730:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d109      	bne.n	800674c <prvSwitchTimerLists+0x98>
 8006738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673c:	f383 8811 	msr	BASEPRI, r3
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	603b      	str	r3, [r7, #0]
 800674a:	e7fe      	b.n	800674a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800674c:	4b09      	ldr	r3, [pc, #36]	; (8006774 <prvSwitchTimerLists+0xc0>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1b2      	bne.n	80066bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006756:	4b07      	ldr	r3, [pc, #28]	; (8006774 <prvSwitchTimerLists+0xc0>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800675c:	4b06      	ldr	r3, [pc, #24]	; (8006778 <prvSwitchTimerLists+0xc4>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a04      	ldr	r2, [pc, #16]	; (8006774 <prvSwitchTimerLists+0xc0>)
 8006762:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006764:	4a04      	ldr	r2, [pc, #16]	; (8006778 <prvSwitchTimerLists+0xc4>)
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	6013      	str	r3, [r2, #0]
}
 800676a:	bf00      	nop
 800676c:	3718      	adds	r7, #24
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	20000c14 	.word	0x20000c14
 8006778:	20000c18 	.word	0x20000c18

0800677c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006782:	f000 f963 	bl	8006a4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006786:	4b15      	ldr	r3, [pc, #84]	; (80067dc <prvCheckForValidListAndQueue+0x60>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d120      	bne.n	80067d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800678e:	4814      	ldr	r0, [pc, #80]	; (80067e0 <prvCheckForValidListAndQueue+0x64>)
 8006790:	f7fe f880 	bl	8004894 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006794:	4813      	ldr	r0, [pc, #76]	; (80067e4 <prvCheckForValidListAndQueue+0x68>)
 8006796:	f7fe f87d 	bl	8004894 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800679a:	4b13      	ldr	r3, [pc, #76]	; (80067e8 <prvCheckForValidListAndQueue+0x6c>)
 800679c:	4a10      	ldr	r2, [pc, #64]	; (80067e0 <prvCheckForValidListAndQueue+0x64>)
 800679e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80067a0:	4b12      	ldr	r3, [pc, #72]	; (80067ec <prvCheckForValidListAndQueue+0x70>)
 80067a2:	4a10      	ldr	r2, [pc, #64]	; (80067e4 <prvCheckForValidListAndQueue+0x68>)
 80067a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80067a6:	2300      	movs	r3, #0
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	4b11      	ldr	r3, [pc, #68]	; (80067f0 <prvCheckForValidListAndQueue+0x74>)
 80067ac:	4a11      	ldr	r2, [pc, #68]	; (80067f4 <prvCheckForValidListAndQueue+0x78>)
 80067ae:	2110      	movs	r1, #16
 80067b0:	200a      	movs	r0, #10
 80067b2:	f7fe f98b 	bl	8004acc <xQueueGenericCreateStatic>
 80067b6:	4602      	mov	r2, r0
 80067b8:	4b08      	ldr	r3, [pc, #32]	; (80067dc <prvCheckForValidListAndQueue+0x60>)
 80067ba:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80067bc:	4b07      	ldr	r3, [pc, #28]	; (80067dc <prvCheckForValidListAndQueue+0x60>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d005      	beq.n	80067d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80067c4:	4b05      	ldr	r3, [pc, #20]	; (80067dc <prvCheckForValidListAndQueue+0x60>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	490b      	ldr	r1, [pc, #44]	; (80067f8 <prvCheckForValidListAndQueue+0x7c>)
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fe fd8e 	bl	80052ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067d0:	f000 f96a 	bl	8006aa8 <vPortExitCritical>
}
 80067d4:	bf00      	nop
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20000c1c 	.word	0x20000c1c
 80067e0:	20000bec 	.word	0x20000bec
 80067e4:	20000c00 	.word	0x20000c00
 80067e8:	20000c14 	.word	0x20000c14
 80067ec:	20000c18 	.word	0x20000c18
 80067f0:	20000cc8 	.word	0x20000cc8
 80067f4:	20000c28 	.word	0x20000c28
 80067f8:	080070ec 	.word	0x080070ec

080067fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	3b04      	subs	r3, #4
 800680c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006814:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	3b04      	subs	r3, #4
 800681a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f023 0201 	bic.w	r2, r3, #1
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	3b04      	subs	r3, #4
 800682a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800682c:	4a0c      	ldr	r2, [pc, #48]	; (8006860 <pxPortInitialiseStack+0x64>)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	3b14      	subs	r3, #20
 8006836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	3b04      	subs	r3, #4
 8006842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f06f 0202 	mvn.w	r2, #2
 800684a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3b20      	subs	r3, #32
 8006850:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006852:	68fb      	ldr	r3, [r7, #12]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	08006865 	.word	0x08006865

08006864 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800686a:	2300      	movs	r3, #0
 800686c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800686e:	4b11      	ldr	r3, [pc, #68]	; (80068b4 <prvTaskExitError+0x50>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006876:	d009      	beq.n	800688c <prvTaskExitError+0x28>
 8006878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	60fb      	str	r3, [r7, #12]
 800688a:	e7fe      	b.n	800688a <prvTaskExitError+0x26>
 800688c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006890:	f383 8811 	msr	BASEPRI, r3
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800689e:	bf00      	nop
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0fc      	beq.n	80068a0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80068a6:	bf00      	nop
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	20000010 	.word	0x20000010
	...

080068c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80068c0:	4b07      	ldr	r3, [pc, #28]	; (80068e0 <pxCurrentTCBConst2>)
 80068c2:	6819      	ldr	r1, [r3, #0]
 80068c4:	6808      	ldr	r0, [r1, #0]
 80068c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ca:	f380 8809 	msr	PSP, r0
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	f04f 0000 	mov.w	r0, #0
 80068d6:	f380 8811 	msr	BASEPRI, r0
 80068da:	4770      	bx	lr
 80068dc:	f3af 8000 	nop.w

080068e0 <pxCurrentTCBConst2>:
 80068e0:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop

080068e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80068e8:	4808      	ldr	r0, [pc, #32]	; (800690c <prvPortStartFirstTask+0x24>)
 80068ea:	6800      	ldr	r0, [r0, #0]
 80068ec:	6800      	ldr	r0, [r0, #0]
 80068ee:	f380 8808 	msr	MSP, r0
 80068f2:	f04f 0000 	mov.w	r0, #0
 80068f6:	f380 8814 	msr	CONTROL, r0
 80068fa:	b662      	cpsie	i
 80068fc:	b661      	cpsie	f
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	df00      	svc	0
 8006908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800690a:	bf00      	nop
 800690c:	e000ed08 	.word	0xe000ed08

08006910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006916:	4b44      	ldr	r3, [pc, #272]	; (8006a28 <xPortStartScheduler+0x118>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a44      	ldr	r2, [pc, #272]	; (8006a2c <xPortStartScheduler+0x11c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d109      	bne.n	8006934 <xPortStartScheduler+0x24>
 8006920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	613b      	str	r3, [r7, #16]
 8006932:	e7fe      	b.n	8006932 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006934:	4b3c      	ldr	r3, [pc, #240]	; (8006a28 <xPortStartScheduler+0x118>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a3d      	ldr	r2, [pc, #244]	; (8006a30 <xPortStartScheduler+0x120>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d109      	bne.n	8006952 <xPortStartScheduler+0x42>
 800693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	e7fe      	b.n	8006950 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006952:	4b38      	ldr	r3, [pc, #224]	; (8006a34 <xPortStartScheduler+0x124>)
 8006954:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	b2db      	uxtb	r3, r3
 800695c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	22ff      	movs	r2, #255	; 0xff
 8006962:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	b2db      	uxtb	r3, r3
 800696a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800696c:	78fb      	ldrb	r3, [r7, #3]
 800696e:	b2db      	uxtb	r3, r3
 8006970:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006974:	b2da      	uxtb	r2, r3
 8006976:	4b30      	ldr	r3, [pc, #192]	; (8006a38 <xPortStartScheduler+0x128>)
 8006978:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800697a:	4b30      	ldr	r3, [pc, #192]	; (8006a3c <xPortStartScheduler+0x12c>)
 800697c:	2207      	movs	r2, #7
 800697e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006980:	e009      	b.n	8006996 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006982:	4b2e      	ldr	r3, [pc, #184]	; (8006a3c <xPortStartScheduler+0x12c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3b01      	subs	r3, #1
 8006988:	4a2c      	ldr	r2, [pc, #176]	; (8006a3c <xPortStartScheduler+0x12c>)
 800698a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800698c:	78fb      	ldrb	r3, [r7, #3]
 800698e:	b2db      	uxtb	r3, r3
 8006990:	005b      	lsls	r3, r3, #1
 8006992:	b2db      	uxtb	r3, r3
 8006994:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006996:	78fb      	ldrb	r3, [r7, #3]
 8006998:	b2db      	uxtb	r3, r3
 800699a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800699e:	2b80      	cmp	r3, #128	; 0x80
 80069a0:	d0ef      	beq.n	8006982 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80069a2:	4b26      	ldr	r3, [pc, #152]	; (8006a3c <xPortStartScheduler+0x12c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f1c3 0307 	rsb	r3, r3, #7
 80069aa:	2b04      	cmp	r3, #4
 80069ac:	d009      	beq.n	80069c2 <xPortStartScheduler+0xb2>
 80069ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	60bb      	str	r3, [r7, #8]
 80069c0:	e7fe      	b.n	80069c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80069c2:	4b1e      	ldr	r3, [pc, #120]	; (8006a3c <xPortStartScheduler+0x12c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	021b      	lsls	r3, r3, #8
 80069c8:	4a1c      	ldr	r2, [pc, #112]	; (8006a3c <xPortStartScheduler+0x12c>)
 80069ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069cc:	4b1b      	ldr	r3, [pc, #108]	; (8006a3c <xPortStartScheduler+0x12c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069d4:	4a19      	ldr	r2, [pc, #100]	; (8006a3c <xPortStartScheduler+0x12c>)
 80069d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80069e0:	4b17      	ldr	r3, [pc, #92]	; (8006a40 <xPortStartScheduler+0x130>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a16      	ldr	r2, [pc, #88]	; (8006a40 <xPortStartScheduler+0x130>)
 80069e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80069ec:	4b14      	ldr	r3, [pc, #80]	; (8006a40 <xPortStartScheduler+0x130>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a13      	ldr	r2, [pc, #76]	; (8006a40 <xPortStartScheduler+0x130>)
 80069f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80069f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80069f8:	f000 f8d6 	bl	8006ba8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80069fc:	4b11      	ldr	r3, [pc, #68]	; (8006a44 <xPortStartScheduler+0x134>)
 80069fe:	2200      	movs	r2, #0
 8006a00:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a02:	f000 f8f5 	bl	8006bf0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a06:	4b10      	ldr	r3, [pc, #64]	; (8006a48 <xPortStartScheduler+0x138>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a0f      	ldr	r2, [pc, #60]	; (8006a48 <xPortStartScheduler+0x138>)
 8006a0c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a10:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a12:	f7ff ff69 	bl	80068e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a16:	f7ff f86d 	bl	8005af4 <vTaskSwitchContext>
	prvTaskExitError();
 8006a1a:	f7ff ff23 	bl	8006864 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3718      	adds	r7, #24
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	e000ed00 	.word	0xe000ed00
 8006a2c:	410fc271 	.word	0x410fc271
 8006a30:	410fc270 	.word	0x410fc270
 8006a34:	e000e400 	.word	0xe000e400
 8006a38:	20000d18 	.word	0x20000d18
 8006a3c:	20000d1c 	.word	0x20000d1c
 8006a40:	e000ed20 	.word	0xe000ed20
 8006a44:	20000010 	.word	0x20000010
 8006a48:	e000ef34 	.word	0xe000ef34

08006a4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a64:	4b0e      	ldr	r3, [pc, #56]	; (8006aa0 <vPortEnterCritical+0x54>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	4a0d      	ldr	r2, [pc, #52]	; (8006aa0 <vPortEnterCritical+0x54>)
 8006a6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a6e:	4b0c      	ldr	r3, [pc, #48]	; (8006aa0 <vPortEnterCritical+0x54>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d10e      	bne.n	8006a94 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a76:	4b0b      	ldr	r3, [pc, #44]	; (8006aa4 <vPortEnterCritical+0x58>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d009      	beq.n	8006a94 <vPortEnterCritical+0x48>
 8006a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	603b      	str	r3, [r7, #0]
 8006a92:	e7fe      	b.n	8006a92 <vPortEnterCritical+0x46>
	}
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	20000010 	.word	0x20000010
 8006aa4:	e000ed04 	.word	0xe000ed04

08006aa8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006aae:	4b11      	ldr	r3, [pc, #68]	; (8006af4 <vPortExitCritical+0x4c>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d109      	bne.n	8006aca <vPortExitCritical+0x22>
 8006ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aba:	f383 8811 	msr	BASEPRI, r3
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	607b      	str	r3, [r7, #4]
 8006ac8:	e7fe      	b.n	8006ac8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006aca:	4b0a      	ldr	r3, [pc, #40]	; (8006af4 <vPortExitCritical+0x4c>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	4a08      	ldr	r2, [pc, #32]	; (8006af4 <vPortExitCritical+0x4c>)
 8006ad2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ad4:	4b07      	ldr	r3, [pc, #28]	; (8006af4 <vPortExitCritical+0x4c>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d104      	bne.n	8006ae6 <vPortExitCritical+0x3e>
 8006adc:	2300      	movs	r3, #0
 8006ade:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ae6:	bf00      	nop
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	20000010 	.word	0x20000010
	...

08006b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b00:	f3ef 8009 	mrs	r0, PSP
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	4b15      	ldr	r3, [pc, #84]	; (8006b60 <pxCurrentTCBConst>)
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	f01e 0f10 	tst.w	lr, #16
 8006b10:	bf08      	it	eq
 8006b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b1a:	6010      	str	r0, [r2, #0]
 8006b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b24:	f380 8811 	msr	BASEPRI, r0
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	f3bf 8f6f 	isb	sy
 8006b30:	f7fe ffe0 	bl	8005af4 <vTaskSwitchContext>
 8006b34:	f04f 0000 	mov.w	r0, #0
 8006b38:	f380 8811 	msr	BASEPRI, r0
 8006b3c:	bc09      	pop	{r0, r3}
 8006b3e:	6819      	ldr	r1, [r3, #0]
 8006b40:	6808      	ldr	r0, [r1, #0]
 8006b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b46:	f01e 0f10 	tst.w	lr, #16
 8006b4a:	bf08      	it	eq
 8006b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b50:	f380 8809 	msr	PSP, r0
 8006b54:	f3bf 8f6f 	isb	sy
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	f3af 8000 	nop.w

08006b60 <pxCurrentTCBConst>:
 8006b60:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b64:	bf00      	nop
 8006b66:	bf00      	nop

08006b68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b80:	f7fe ff00 	bl	8005984 <xTaskIncrementTick>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d003      	beq.n	8006b92 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b8a:	4b06      	ldr	r3, [pc, #24]	; (8006ba4 <SysTick_Handler+0x3c>)
 8006b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b90:	601a      	str	r2, [r3, #0]
 8006b92:	2300      	movs	r3, #0
 8006b94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b9c:	bf00      	nop
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	e000ed04 	.word	0xe000ed04

08006ba8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006ba8:	b480      	push	{r7}
 8006baa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006bac:	4b0b      	ldr	r3, [pc, #44]	; (8006bdc <vPortSetupTimerInterrupt+0x34>)
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006bb2:	4b0b      	ldr	r3, [pc, #44]	; (8006be0 <vPortSetupTimerInterrupt+0x38>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006bb8:	4b0a      	ldr	r3, [pc, #40]	; (8006be4 <vPortSetupTimerInterrupt+0x3c>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a0a      	ldr	r2, [pc, #40]	; (8006be8 <vPortSetupTimerInterrupt+0x40>)
 8006bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc2:	099b      	lsrs	r3, r3, #6
 8006bc4:	4a09      	ldr	r2, [pc, #36]	; (8006bec <vPortSetupTimerInterrupt+0x44>)
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006bca:	4b04      	ldr	r3, [pc, #16]	; (8006bdc <vPortSetupTimerInterrupt+0x34>)
 8006bcc:	2207      	movs	r2, #7
 8006bce:	601a      	str	r2, [r3, #0]
}
 8006bd0:	bf00      	nop
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	e000e010 	.word	0xe000e010
 8006be0:	e000e018 	.word	0xe000e018
 8006be4:	20000004 	.word	0x20000004
 8006be8:	10624dd3 	.word	0x10624dd3
 8006bec:	e000e014 	.word	0xe000e014

08006bf0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006bf0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006c00 <vPortEnableVFP+0x10>
 8006bf4:	6801      	ldr	r1, [r0, #0]
 8006bf6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006bfa:	6001      	str	r1, [r0, #0]
 8006bfc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006bfe:	bf00      	nop
 8006c00:	e000ed88 	.word	0xe000ed88

08006c04 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c0a:	f3ef 8305 	mrs	r3, IPSR
 8006c0e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2b0f      	cmp	r3, #15
 8006c14:	d913      	bls.n	8006c3e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c16:	4a16      	ldr	r2, [pc, #88]	; (8006c70 <vPortValidateInterruptPriority+0x6c>)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c20:	4b14      	ldr	r3, [pc, #80]	; (8006c74 <vPortValidateInterruptPriority+0x70>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	7afa      	ldrb	r2, [r7, #11]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d209      	bcs.n	8006c3e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2e:	f383 8811 	msr	BASEPRI, r3
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	607b      	str	r3, [r7, #4]
 8006c3c:	e7fe      	b.n	8006c3c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c3e:	4b0e      	ldr	r3, [pc, #56]	; (8006c78 <vPortValidateInterruptPriority+0x74>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c46:	4b0d      	ldr	r3, [pc, #52]	; (8006c7c <vPortValidateInterruptPriority+0x78>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d909      	bls.n	8006c62 <vPortValidateInterruptPriority+0x5e>
 8006c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c52:	f383 8811 	msr	BASEPRI, r3
 8006c56:	f3bf 8f6f 	isb	sy
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	603b      	str	r3, [r7, #0]
 8006c60:	e7fe      	b.n	8006c60 <vPortValidateInterruptPriority+0x5c>
	}
 8006c62:	bf00      	nop
 8006c64:	3714      	adds	r7, #20
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	e000e3f0 	.word	0xe000e3f0
 8006c74:	20000d18 	.word	0x20000d18
 8006c78:	e000ed0c 	.word	0xe000ed0c
 8006c7c:	20000d1c 	.word	0x20000d1c

08006c80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b08a      	sub	sp, #40	; 0x28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c8c:	f7fe fdc0 	bl	8005810 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c90:	4b57      	ldr	r3, [pc, #348]	; (8006df0 <pvPortMalloc+0x170>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c98:	f000 f90c 	bl	8006eb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c9c:	4b55      	ldr	r3, [pc, #340]	; (8006df4 <pvPortMalloc+0x174>)
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f040 808c 	bne.w	8006dc2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d01c      	beq.n	8006cea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006cb0:	2208      	movs	r2, #8
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f003 0307 	and.w	r3, r3, #7
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d013      	beq.n	8006cea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f023 0307 	bic.w	r3, r3, #7
 8006cc8:	3308      	adds	r3, #8
 8006cca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f003 0307 	and.w	r3, r3, #7
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d009      	beq.n	8006cea <pvPortMalloc+0x6a>
 8006cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cda:	f383 8811 	msr	BASEPRI, r3
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	f3bf 8f4f 	dsb	sy
 8006ce6:	617b      	str	r3, [r7, #20]
 8006ce8:	e7fe      	b.n	8006ce8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d068      	beq.n	8006dc2 <pvPortMalloc+0x142>
 8006cf0:	4b41      	ldr	r3, [pc, #260]	; (8006df8 <pvPortMalloc+0x178>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d863      	bhi.n	8006dc2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006cfa:	4b40      	ldr	r3, [pc, #256]	; (8006dfc <pvPortMalloc+0x17c>)
 8006cfc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006cfe:	4b3f      	ldr	r3, [pc, #252]	; (8006dfc <pvPortMalloc+0x17c>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d04:	e004      	b.n	8006d10 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d903      	bls.n	8006d22 <pvPortMalloc+0xa2>
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1f1      	bne.n	8006d06 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d22:	4b33      	ldr	r3, [pc, #204]	; (8006df0 <pvPortMalloc+0x170>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d04a      	beq.n	8006dc2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d2c:	6a3b      	ldr	r3, [r7, #32]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2208      	movs	r2, #8
 8006d32:	4413      	add	r3, r2
 8006d34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	1ad2      	subs	r2, r2, r3
 8006d46:	2308      	movs	r3, #8
 8006d48:	005b      	lsls	r3, r3, #1
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d91e      	bls.n	8006d8c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4413      	add	r3, r2
 8006d54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	f003 0307 	and.w	r3, r3, #7
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d009      	beq.n	8006d74 <pvPortMalloc+0xf4>
 8006d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	613b      	str	r3, [r7, #16]
 8006d72:	e7fe      	b.n	8006d72 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	1ad2      	subs	r2, r2, r3
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d86:	69b8      	ldr	r0, [r7, #24]
 8006d88:	f000 f8f6 	bl	8006f78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d8c:	4b1a      	ldr	r3, [pc, #104]	; (8006df8 <pvPortMalloc+0x178>)
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	4a18      	ldr	r2, [pc, #96]	; (8006df8 <pvPortMalloc+0x178>)
 8006d98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d9a:	4b17      	ldr	r3, [pc, #92]	; (8006df8 <pvPortMalloc+0x178>)
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	4b18      	ldr	r3, [pc, #96]	; (8006e00 <pvPortMalloc+0x180>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d203      	bcs.n	8006dae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006da6:	4b14      	ldr	r3, [pc, #80]	; (8006df8 <pvPortMalloc+0x178>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a15      	ldr	r2, [pc, #84]	; (8006e00 <pvPortMalloc+0x180>)
 8006dac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	4b10      	ldr	r3, [pc, #64]	; (8006df4 <pvPortMalloc+0x174>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	431a      	orrs	r2, r3
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006dc2:	f7fe fd33 	bl	800582c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	f003 0307 	and.w	r3, r3, #7
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d009      	beq.n	8006de4 <pvPortMalloc+0x164>
 8006dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	60fb      	str	r3, [r7, #12]
 8006de2:	e7fe      	b.n	8006de2 <pvPortMalloc+0x162>
	return pvReturn;
 8006de4:	69fb      	ldr	r3, [r7, #28]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3728      	adds	r7, #40	; 0x28
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	200018e0 	.word	0x200018e0
 8006df4:	200018ec 	.word	0x200018ec
 8006df8:	200018e4 	.word	0x200018e4
 8006dfc:	200018d8 	.word	0x200018d8
 8006e00:	200018e8 	.word	0x200018e8

08006e04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d046      	beq.n	8006ea4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e16:	2308      	movs	r3, #8
 8006e18:	425b      	negs	r3, r3
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	4b20      	ldr	r3, [pc, #128]	; (8006eac <vPortFree+0xa8>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d109      	bne.n	8006e46 <vPortFree+0x42>
 8006e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	60fb      	str	r3, [r7, #12]
 8006e44:	e7fe      	b.n	8006e44 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d009      	beq.n	8006e62 <vPortFree+0x5e>
 8006e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	60bb      	str	r3, [r7, #8]
 8006e60:	e7fe      	b.n	8006e60 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	4b11      	ldr	r3, [pc, #68]	; (8006eac <vPortFree+0xa8>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d019      	beq.n	8006ea4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d115      	bne.n	8006ea4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	4b0b      	ldr	r3, [pc, #44]	; (8006eac <vPortFree+0xa8>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	43db      	mvns	r3, r3
 8006e82:	401a      	ands	r2, r3
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e88:	f7fe fcc2 	bl	8005810 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	4b07      	ldr	r3, [pc, #28]	; (8006eb0 <vPortFree+0xac>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4413      	add	r3, r2
 8006e96:	4a06      	ldr	r2, [pc, #24]	; (8006eb0 <vPortFree+0xac>)
 8006e98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e9a:	6938      	ldr	r0, [r7, #16]
 8006e9c:	f000 f86c 	bl	8006f78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006ea0:	f7fe fcc4 	bl	800582c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ea4:	bf00      	nop
 8006ea6:	3718      	adds	r7, #24
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	200018ec 	.word	0x200018ec
 8006eb0:	200018e4 	.word	0x200018e4

08006eb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006eba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006ebe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ec0:	4b27      	ldr	r3, [pc, #156]	; (8006f60 <prvHeapInit+0xac>)
 8006ec2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f003 0307 	and.w	r3, r3, #7
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00c      	beq.n	8006ee8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3307      	adds	r3, #7
 8006ed2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f023 0307 	bic.w	r3, r3, #7
 8006eda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006edc:	68ba      	ldr	r2, [r7, #8]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	4a1f      	ldr	r2, [pc, #124]	; (8006f60 <prvHeapInit+0xac>)
 8006ee4:	4413      	add	r3, r2
 8006ee6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006eec:	4a1d      	ldr	r2, [pc, #116]	; (8006f64 <prvHeapInit+0xb0>)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ef2:	4b1c      	ldr	r3, [pc, #112]	; (8006f64 <prvHeapInit+0xb0>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68ba      	ldr	r2, [r7, #8]
 8006efc:	4413      	add	r3, r2
 8006efe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f00:	2208      	movs	r2, #8
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	1a9b      	subs	r3, r3, r2
 8006f06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f023 0307 	bic.w	r3, r3, #7
 8006f0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4a15      	ldr	r2, [pc, #84]	; (8006f68 <prvHeapInit+0xb4>)
 8006f14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f16:	4b14      	ldr	r3, [pc, #80]	; (8006f68 <prvHeapInit+0xb4>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f1e:	4b12      	ldr	r3, [pc, #72]	; (8006f68 <prvHeapInit+0xb4>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2200      	movs	r2, #0
 8006f24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	1ad2      	subs	r2, r2, r3
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f34:	4b0c      	ldr	r3, [pc, #48]	; (8006f68 <prvHeapInit+0xb4>)
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	4a0a      	ldr	r2, [pc, #40]	; (8006f6c <prvHeapInit+0xb8>)
 8006f42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	4a09      	ldr	r2, [pc, #36]	; (8006f70 <prvHeapInit+0xbc>)
 8006f4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f4c:	4b09      	ldr	r3, [pc, #36]	; (8006f74 <prvHeapInit+0xc0>)
 8006f4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f52:	601a      	str	r2, [r3, #0]
}
 8006f54:	bf00      	nop
 8006f56:	3714      	adds	r7, #20
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr
 8006f60:	20000d20 	.word	0x20000d20
 8006f64:	200018d8 	.word	0x200018d8
 8006f68:	200018e0 	.word	0x200018e0
 8006f6c:	200018e8 	.word	0x200018e8
 8006f70:	200018e4 	.word	0x200018e4
 8006f74:	200018ec 	.word	0x200018ec

08006f78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f80:	4b28      	ldr	r3, [pc, #160]	; (8007024 <prvInsertBlockIntoFreeList+0xac>)
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	e002      	b.n	8006f8c <prvInsertBlockIntoFreeList+0x14>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	60fb      	str	r3, [r7, #12]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d8f7      	bhi.n	8006f86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d108      	bne.n	8006fba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	441a      	add	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	441a      	add	r2, r3
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d118      	bne.n	8007000 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	4b15      	ldr	r3, [pc, #84]	; (8007028 <prvInsertBlockIntoFreeList+0xb0>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d00d      	beq.n	8006ff6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	441a      	add	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	601a      	str	r2, [r3, #0]
 8006ff4:	e008      	b.n	8007008 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ff6:	4b0c      	ldr	r3, [pc, #48]	; (8007028 <prvInsertBlockIntoFreeList+0xb0>)
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	601a      	str	r2, [r3, #0]
 8006ffe:	e003      	b.n	8007008 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	429a      	cmp	r2, r3
 800700e:	d002      	beq.n	8007016 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007016:	bf00      	nop
 8007018:	3714      	adds	r7, #20
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	200018d8 	.word	0x200018d8
 8007028:	200018e0 	.word	0x200018e0

0800702c <__libc_init_array>:
 800702c:	b570      	push	{r4, r5, r6, lr}
 800702e:	4e0d      	ldr	r6, [pc, #52]	; (8007064 <__libc_init_array+0x38>)
 8007030:	4c0d      	ldr	r4, [pc, #52]	; (8007068 <__libc_init_array+0x3c>)
 8007032:	1ba4      	subs	r4, r4, r6
 8007034:	10a4      	asrs	r4, r4, #2
 8007036:	2500      	movs	r5, #0
 8007038:	42a5      	cmp	r5, r4
 800703a:	d109      	bne.n	8007050 <__libc_init_array+0x24>
 800703c:	4e0b      	ldr	r6, [pc, #44]	; (800706c <__libc_init_array+0x40>)
 800703e:	4c0c      	ldr	r4, [pc, #48]	; (8007070 <__libc_init_array+0x44>)
 8007040:	f000 f82c 	bl	800709c <_init>
 8007044:	1ba4      	subs	r4, r4, r6
 8007046:	10a4      	asrs	r4, r4, #2
 8007048:	2500      	movs	r5, #0
 800704a:	42a5      	cmp	r5, r4
 800704c:	d105      	bne.n	800705a <__libc_init_array+0x2e>
 800704e:	bd70      	pop	{r4, r5, r6, pc}
 8007050:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007054:	4798      	blx	r3
 8007056:	3501      	adds	r5, #1
 8007058:	e7ee      	b.n	8007038 <__libc_init_array+0xc>
 800705a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800705e:	4798      	blx	r3
 8007060:	3501      	adds	r5, #1
 8007062:	e7f2      	b.n	800704a <__libc_init_array+0x1e>
 8007064:	0800718c 	.word	0x0800718c
 8007068:	0800718c 	.word	0x0800718c
 800706c:	0800718c 	.word	0x0800718c
 8007070:	08007190 	.word	0x08007190

08007074 <memcpy>:
 8007074:	b510      	push	{r4, lr}
 8007076:	1e43      	subs	r3, r0, #1
 8007078:	440a      	add	r2, r1
 800707a:	4291      	cmp	r1, r2
 800707c:	d100      	bne.n	8007080 <memcpy+0xc>
 800707e:	bd10      	pop	{r4, pc}
 8007080:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007084:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007088:	e7f7      	b.n	800707a <memcpy+0x6>

0800708a <memset>:
 800708a:	4402      	add	r2, r0
 800708c:	4603      	mov	r3, r0
 800708e:	4293      	cmp	r3, r2
 8007090:	d100      	bne.n	8007094 <memset+0xa>
 8007092:	4770      	bx	lr
 8007094:	f803 1b01 	strb.w	r1, [r3], #1
 8007098:	e7f9      	b.n	800708e <memset+0x4>
	...

0800709c <_init>:
 800709c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709e:	bf00      	nop
 80070a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070a2:	bc08      	pop	{r3}
 80070a4:	469e      	mov	lr, r3
 80070a6:	4770      	bx	lr

080070a8 <_fini>:
 80070a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070aa:	bf00      	nop
 80070ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ae:	bc08      	pop	{r3}
 80070b0:	469e      	mov	lr, r3
 80070b2:	4770      	bx	lr
