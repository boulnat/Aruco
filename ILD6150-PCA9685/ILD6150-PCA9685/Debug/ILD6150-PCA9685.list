
ILD6150-PCA9685.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08008234  08008234  00018234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083cc  080083cc  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080083cc  080083cc  000183cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083d4  080083d4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083d4  080083d4  000183d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083d8  080083d8  000183d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080083dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000857c  20000088  08008464  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008604  08008464  00028604  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000236ff  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040aa  00000000  00000000  000437b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c10  00000000  00000000  00047868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a88  00000000  00000000  00049478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000040f1  00000000  00000000  0004af00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d5b5  00000000  00000000  0004eff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8a14  00000000  00000000  0006c5a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00144fba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007af4  00000000  00000000  00145010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800821c 	.word	0x0800821c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800821c 	.word	0x0800821c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f000 fe7f 	bl	800127e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f8a0 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f000 fa1a 	bl	80009bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000588:	f000 f9f2 	bl	8000970 <MX_DMA_Init>
  MX_I2C1_Init();
 800058c:	f000 f944 	bl	8000818 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000590:	f000 f9be 	bl	8000910 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000594:	f000 f90a 	bl	80007ac <MX_CAN1_Init>
  MX_I2C3_Init();
 8000598:	f000 f97c 	bl	8000894 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  sFilterConfig.FilterBank = 0;
 800059c:	4b3a      	ldr	r3, [pc, #232]	; (8000688 <main+0x110>)
 800059e:	2200      	movs	r2, #0
 80005a0:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005a2:	4b39      	ldr	r3, [pc, #228]	; (8000688 <main+0x110>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005a8:	4b37      	ldr	r3, [pc, #220]	; (8000688 <main+0x110>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x245<<5;
 80005ae:	4b36      	ldr	r3, [pc, #216]	; (8000688 <main+0x110>)
 80005b0:	f644 02a0 	movw	r2, #18592	; 0x48a0
 80005b4:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80005b6:	4b34      	ldr	r3, [pc, #208]	; (8000688 <main+0x110>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80005bc:	4b32      	ldr	r3, [pc, #200]	; (8000688 <main+0x110>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80005c2:	4b31      	ldr	r3, [pc, #196]	; (8000688 <main+0x110>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80005c8:	4b2f      	ldr	r3, [pc, #188]	; (8000688 <main+0x110>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80005ce:	4b2e      	ldr	r3, [pc, #184]	; (8000688 <main+0x110>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80005d4:	4b2c      	ldr	r3, [pc, #176]	; (8000688 <main+0x110>)
 80005d6:	220e      	movs	r2, #14
 80005d8:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80005da:	492b      	ldr	r1, [pc, #172]	; (8000688 <main+0x110>)
 80005dc:	482b      	ldr	r0, [pc, #172]	; (800068c <main+0x114>)
 80005de:	f000 ff82 	bl	80014e6 <HAL_CAN_ConfigFilter>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <main+0x74>
  {
	  Error_Handler();
 80005e8:	f000 fb54 	bl	8000c94 <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80005ec:	4827      	ldr	r0, [pc, #156]	; (800068c <main+0x114>)
 80005ee:	f001 f844 	bl	800167a <HAL_CAN_Start>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <main+0x84>
  {
	  /* Start Error */
	  Error_Handler();
 80005f8:	f000 fb4c 	bl	8000c94 <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_OVERRUN) != HAL_OK)
 80005fc:	2108      	movs	r1, #8
 80005fe:	4823      	ldr	r0, [pc, #140]	; (800068c <main+0x114>)
 8000600:	f001 fab8 	bl	8001b74 <HAL_CAN_ActivateNotification>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <main+0x96>
  {

	  Error_Handler();
 800060a:	f000 fb43 	bl	8000c94 <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 800060e:	2101      	movs	r1, #1
 8000610:	481e      	ldr	r0, [pc, #120]	; (800068c <main+0x114>)
 8000612:	f001 faaf 	bl	8001b74 <HAL_CAN_ActivateNotification>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <main+0xa8>
  {
	  /* Notification Error */
	  Error_Handler();
 800061c:	f000 fb3a 	bl	8000c94 <Error_Handler>
  }
  TxHeader.StdId = 0x07; //07
 8000620:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <main+0x118>)
 8000622:	2207      	movs	r2, #7
 8000624:	601a      	str	r2, [r3, #0]
  //TxHeader.ExtId = 0x01; //delete
  TxHeader.RTR = CAN_RTR_DATA;
 8000626:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <main+0x118>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 800062c:	4b18      	ldr	r3, [pc, #96]	; (8000690 <main+0x118>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 8000632:	4b17      	ldr	r3, [pc, #92]	; (8000690 <main+0x118>)
 8000634:	2208      	movs	r2, #8
 8000636:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000638:	4b15      	ldr	r3, [pc, #84]	; (8000690 <main+0x118>)
 800063a:	2200      	movs	r2, #0
 800063c:	751a      	strb	r2, [r3, #20]


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800063e:	f004 fd33 	bl	80050a8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000642:	4a14      	ldr	r2, [pc, #80]	; (8000694 <main+0x11c>)
 8000644:	2100      	movs	r1, #0
 8000646:	4814      	ldr	r0, [pc, #80]	; (8000698 <main+0x120>)
 8000648:	f004 fd78 	bl	800513c <osThreadNew>
 800064c:	4603      	mov	r3, r0
 800064e:	4a13      	ldr	r2, [pc, #76]	; (800069c <main+0x124>)
 8000650:	6013      	str	r3, [r2, #0]

  /* creation of readTempTask */
  readTempTaskHandle = osThreadNew(StartReadTempTask, NULL, &readTempTask_attributes);
 8000652:	4a13      	ldr	r2, [pc, #76]	; (80006a0 <main+0x128>)
 8000654:	2100      	movs	r1, #0
 8000656:	4813      	ldr	r0, [pc, #76]	; (80006a4 <main+0x12c>)
 8000658:	f004 fd70 	bl	800513c <osThreadNew>
 800065c:	4603      	mov	r3, r0
 800065e:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <main+0x130>)
 8000660:	6013      	str	r3, [r2, #0]

  /* creation of readLightTask */
  readLightTaskHandle = osThreadNew(StartReadLightTask, NULL, &readLightTask_attributes);
 8000662:	4a12      	ldr	r2, [pc, #72]	; (80006ac <main+0x134>)
 8000664:	2100      	movs	r1, #0
 8000666:	4812      	ldr	r0, [pc, #72]	; (80006b0 <main+0x138>)
 8000668:	f004 fd68 	bl	800513c <osThreadNew>
 800066c:	4603      	mov	r3, r0
 800066e:	4a11      	ldr	r2, [pc, #68]	; (80006b4 <main+0x13c>)
 8000670:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  comUsartTaskHandle = osThreadNew(ComUsartTask, NULL, &comUsartTask_attributes);
 8000672:	4a11      	ldr	r2, [pc, #68]	; (80006b8 <main+0x140>)
 8000674:	2100      	movs	r1, #0
 8000676:	4811      	ldr	r0, [pc, #68]	; (80006bc <main+0x144>)
 8000678:	f004 fd60 	bl	800513c <osThreadNew>
 800067c:	4603      	mov	r3, r0
 800067e:	4a10      	ldr	r2, [pc, #64]	; (80006c0 <main+0x148>)
 8000680:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000682:	f004 fd35 	bl	80050f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000686:	e7fe      	b.n	8000686 <main+0x10e>
 8000688:	200082e4 	.word	0x200082e4
 800068c:	20008504 	.word	0x20008504
 8000690:	2000852c 	.word	0x2000852c
 8000694:	080082c0 	.word	0x080082c0
 8000698:	08000c39 	.word	0x08000c39
 800069c:	2000830c 	.word	0x2000830c
 80006a0:	080082e4 	.word	0x080082e4
 80006a4:	08000c4d 	.word	0x08000c4d
 80006a8:	200083f0 	.word	0x200083f0
 80006ac:	08008308 	.word	0x08008308
 80006b0:	08000c61 	.word	0x08000c61
 80006b4:	20008470 	.word	0x20008470
 80006b8:	0800832c 	.word	0x0800832c
 80006bc:	08000b99 	.word	0x08000b99
 80006c0:	20008544 	.word	0x20008544

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b0ac      	sub	sp, #176	; 0xb0
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006ce:	2244      	movs	r2, #68	; 0x44
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f007 f97a 	bl	80079cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2254      	movs	r2, #84	; 0x54
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f007 f96c 	bl	80079cc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006f4:	f002 fa3a 	bl	8002b6c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006f8:	4b2b      	ldr	r3, [pc, #172]	; (80007a8 <SystemClock_Config+0xe4>)
 80006fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006fe:	4a2a      	ldr	r2, [pc, #168]	; (80007a8 <SystemClock_Config+0xe4>)
 8000700:	f023 0318 	bic.w	r3, r3, #24
 8000704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000708:	2314      	movs	r3, #20
 800070a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800070c:	2301      	movs	r3, #1
 800070e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000710:	2301      	movs	r3, #1
 8000712:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800071c:	2360      	movs	r3, #96	; 0x60
 800071e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000722:	2300      	movs	r3, #0
 8000724:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800072c:	4618      	mov	r0, r3
 800072e:	f002 fa91 	bl	8002c54 <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000738:	f000 faac 	bl	8000c94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	230f      	movs	r3, #15
 800073e:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000740:	2300      	movs	r3, #0
 8000742:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000750:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f002 fe9c 	bl	8003494 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000762:	f000 fa97 	bl	8000c94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000766:	f44f 73a1 	mov.w	r3, #322	; 0x142
 800076a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800076c:	2304      	movs	r3, #4
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000770:	2300      	movs	r3, #0
 8000772:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000774:	2300      	movs	r3, #0
 8000776:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	4618      	mov	r0, r3
 800077c:	f003 f8c0 	bl	8003900 <HAL_RCCEx_PeriphCLKConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000786:	f000 fa85 	bl	8000c94 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800078a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800078e:	f002 fa0b 	bl	8002ba8 <HAL_PWREx_ControlVoltageScaling>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000798:	f000 fa7c 	bl	8000c94 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800079c:	f003 faa4 	bl	8003ce8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007a0:	bf00      	nop
 80007a2:	37b0      	adds	r7, #176	; 0xb0
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40021000 	.word	0x40021000

080007ac <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_CAN1_Init+0x64>)
 80007b2:	4a18      	ldr	r2, [pc, #96]	; (8000814 <MX_CAN1_Init+0x68>)
 80007b4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 80007b6:	4b16      	ldr	r3, [pc, #88]	; (8000810 <MX_CAN1_Init+0x64>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_CAN1_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_CAN1_Init+0x64>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_CAN1_Init+0x64>)
 80007ca:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80007ce:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_CAN1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_CAN1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_CAN1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_CAN1_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_CAN1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <MX_CAN1_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_CAN1_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_CAN1_Init+0x64>)
 80007fc:	f000 fd78 	bl	80012f0 <HAL_CAN_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000806:	f000 fa45 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20008504 	.word	0x20008504
 8000814:	40006400 	.word	0x40006400

08000818 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_I2C1_Init+0x74>)
 800081e:	4a1c      	ldr	r2, [pc, #112]	; (8000890 <MX_I2C1_Init+0x78>)
 8000820:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_I2C1_Init+0x74>)
 8000824:	f640 6214 	movw	r2, #3604	; 0xe14
 8000828:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_I2C1_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000830:	4b16      	ldr	r3, [pc, #88]	; (800088c <MX_I2C1_Init+0x74>)
 8000832:	2201      	movs	r2, #1
 8000834:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_I2C1_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800083c:	4b13      	ldr	r3, [pc, #76]	; (800088c <MX_I2C1_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_I2C1_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000848:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_I2C1_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_I2C1_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000854:	480d      	ldr	r0, [pc, #52]	; (800088c <MX_I2C1_Init+0x74>)
 8000856:	f002 f863 	bl	8002920 <HAL_I2C_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000860:	f000 fa18 	bl	8000c94 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000864:	2100      	movs	r1, #0
 8000866:	4809      	ldr	r0, [pc, #36]	; (800088c <MX_I2C1_Init+0x74>)
 8000868:	f002 f8e9 	bl	8002a3e <HAL_I2CEx_ConfigAnalogFilter>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000872:	f000 fa0f 	bl	8000c94 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000876:	2100      	movs	r1, #0
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <MX_I2C1_Init+0x74>)
 800087a:	f002 f92b 	bl	8002ad4 <HAL_I2CEx_ConfigDigitalFilter>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000884:	f000 fa06 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200083a4 	.word	0x200083a4
 8000890:	40005400 	.word	0x40005400

08000894 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000898:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <MX_I2C3_Init+0x74>)
 800089a:	4a1c      	ldr	r2, [pc, #112]	; (800090c <MX_I2C3_Init+0x78>)
 800089c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 800089e:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <MX_I2C3_Init+0x74>)
 80008a0:	f640 6214 	movw	r2, #3604	; 0xe14
 80008a4:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_I2C3_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <MX_I2C3_Init+0x74>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_I2C3_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <MX_I2C3_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008be:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_I2C3_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c4:	4b10      	ldr	r3, [pc, #64]	; (8000908 <MX_I2C3_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_I2C3_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <MX_I2C3_Init+0x74>)
 80008d2:	f002 f825 	bl	8002920 <HAL_I2C_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80008dc:	f000 f9da 	bl	8000c94 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008e0:	2100      	movs	r1, #0
 80008e2:	4809      	ldr	r0, [pc, #36]	; (8000908 <MX_I2C3_Init+0x74>)
 80008e4:	f002 f8ab 	bl	8002a3e <HAL_I2CEx_ConfigAnalogFilter>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80008ee:	f000 f9d1 	bl	8000c94 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <MX_I2C3_Init+0x74>)
 80008f6:	f002 f8ed 	bl	8002ad4 <HAL_I2CEx_ConfigDigitalFilter>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000900:	f000 f9c8 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20008358 	.word	0x20008358
 800090c:	40005c00 	.word	0x40005c00

08000910 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_USART2_UART_Init+0x58>)
 8000916:	4a15      	ldr	r2, [pc, #84]	; (800096c <MX_USART2_UART_Init+0x5c>)
 8000918:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_USART2_UART_Init+0x58>)
 800091c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000920:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_USART2_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_USART2_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_USART2_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_USART2_UART_Init+0x58>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_USART2_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_USART2_UART_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_USART2_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_USART2_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_USART2_UART_Init+0x58>)
 8000954:	f003 fd4a 	bl	80043ec <HAL_UART_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800095e:	f000 f999 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20008480 	.word	0x20008480
 800096c:	40004400 	.word	0x40004400

08000970 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <MX_DMA_Init+0x48>)
 8000978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800097a:	4a0f      	ldr	r2, [pc, #60]	; (80009b8 <MX_DMA_Init+0x48>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6493      	str	r3, [r2, #72]	; 0x48
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <MX_DMA_Init+0x48>)
 8000984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2105      	movs	r1, #5
 8000992:	2010      	movs	r0, #16
 8000994:	f001 fc06 	bl	80021a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000998:	2010      	movs	r0, #16
 800099a:	f001 fc1f 	bl	80021dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2105      	movs	r1, #5
 80009a2:	2011      	movs	r0, #17
 80009a4:	f001 fbfe 	bl	80021a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80009a8:	2011      	movs	r0, #17
 80009aa:	f001 fc17 	bl	80021dc <HAL_NVIC_EnableIRQ>

}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <MX_GPIO_Init+0x8c>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	4a1c      	ldr	r2, [pc, #112]	; (8000a48 <MX_GPIO_Init+0x8c>)
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_GPIO_Init+0x8c>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_GPIO_Init+0x8c>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	4a16      	ldr	r2, [pc, #88]	; (8000a48 <MX_GPIO_Init+0x8c>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_GPIO_Init+0x8c>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_GPIO_Init+0x8c>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	4a10      	ldr	r2, [pc, #64]	; (8000a48 <MX_GPIO_Init+0x8c>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_GPIO_Init+0x8c>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2108      	movs	r1, #8
 8000a1e:	480b      	ldr	r0, [pc, #44]	; (8000a4c <MX_GPIO_Init+0x90>)
 8000a20:	f001 ff4c 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a24:	2308      	movs	r3, #8
 8000a26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_GPIO_Init+0x90>)
 8000a3c:	f001 fdd4 	bl	80025e8 <HAL_GPIO_Init>

}
 8000a40:	bf00      	nop
 8000a42:	3720      	adds	r7, #32
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	48000400 	.word	0x48000400

08000a50 <scenario4>:
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
		osDelay(100);
	}
}

void scenario4(){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

	sprintf(msg,"Init\r\n");
 8000a54:	4925      	ldr	r1, [pc, #148]	; (8000aec <scenario4+0x9c>)
 8000a56:	4826      	ldr	r0, [pc, #152]	; (8000af0 <scenario4+0xa0>)
 8000a58:	f006 ffc0 	bl	80079dc <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000a5c:	4824      	ldr	r0, [pc, #144]	; (8000af0 <scenario4+0xa0>)
 8000a5e:	f7ff fbb7 	bl	80001d0 <strlen>
 8000a62:	4603      	mov	r3, r0
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6a:	4921      	ldr	r1, [pc, #132]	; (8000af0 <scenario4+0xa0>)
 8000a6c:	4821      	ldr	r0, [pc, #132]	; (8000af4 <scenario4+0xa4>)
 8000a6e:	f003 fd0b 	bl	8004488 <HAL_UART_Transmit>

	for(;;){


		if(HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox)!= HAL_OK){
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <scenario4+0xa8>)
 8000a74:	4a21      	ldr	r2, [pc, #132]	; (8000afc <scenario4+0xac>)
 8000a76:	4922      	ldr	r1, [pc, #136]	; (8000b00 <scenario4+0xb0>)
 8000a78:	4822      	ldr	r0, [pc, #136]	; (8000b04 <scenario4+0xb4>)
 8000a7a:	f000 fe42 	bl	8001702 <HAL_CAN_AddTxMessage>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d00e      	beq.n	8000aa2 <scenario4+0x52>
			sprintf(msg,"HAL NOK\r\n");
 8000a84:	4920      	ldr	r1, [pc, #128]	; (8000b08 <scenario4+0xb8>)
 8000a86:	481a      	ldr	r0, [pc, #104]	; (8000af0 <scenario4+0xa0>)
 8000a88:	f006 ffa8 	bl	80079dc <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000a8c:	4818      	ldr	r0, [pc, #96]	; (8000af0 <scenario4+0xa0>)
 8000a8e:	f7ff fb9f 	bl	80001d0 <strlen>
 8000a92:	4603      	mov	r3, r0
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9a:	4915      	ldr	r1, [pc, #84]	; (8000af0 <scenario4+0xa0>)
 8000a9c:	4815      	ldr	r0, [pc, #84]	; (8000af4 <scenario4+0xa4>)
 8000a9e:	f003 fcf3 	bl	8004488 <HAL_UART_Transmit>
		}

		while(HAL_CAN_IsTxMessagePending(&hcan1,TxMailbox));
 8000aa2:	bf00      	nop
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <scenario4+0xa8>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4816      	ldr	r0, [pc, #88]	; (8000b04 <scenario4+0xb4>)
 8000aac:	f000 ff04 	bl	80018b8 <HAL_CAN_IsTxMessagePending>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d1f6      	bne.n	8000aa4 <scenario4+0x54>
		TxData[0]+=1;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <scenario4+0xac>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	3301      	adds	r3, #1
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <scenario4+0xac>)
 8000ac0:	701a      	strb	r2, [r3, #0]

		sprintf(msg,"Transmitted\r\n");
 8000ac2:	4912      	ldr	r1, [pc, #72]	; (8000b0c <scenario4+0xbc>)
 8000ac4:	480a      	ldr	r0, [pc, #40]	; (8000af0 <scenario4+0xa0>)
 8000ac6:	f006 ff89 	bl	80079dc <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000aca:	4809      	ldr	r0, [pc, #36]	; (8000af0 <scenario4+0xa0>)
 8000acc:	f7ff fb80 	bl	80001d0 <strlen>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad8:	4905      	ldr	r1, [pc, #20]	; (8000af0 <scenario4+0xa0>)
 8000ada:	4806      	ldr	r0, [pc, #24]	; (8000af4 <scenario4+0xa4>)
 8000adc:	f003 fcd4 	bl	8004488 <HAL_UART_Transmit>
		osDelay(1000);
 8000ae0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ae4:	f004 fbbc 	bl	8005260 <osDelay>
		if(HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox)!= HAL_OK){
 8000ae8:	e7c3      	b.n	8000a72 <scenario4+0x22>
 8000aea:	bf00      	nop
 8000aec:	08008270 	.word	0x08008270
 8000af0:	200083f4 	.word	0x200083f4
 8000af4:	20008480 	.word	0x20008480
 8000af8:	20008474 	.word	0x20008474
 8000afc:	20000008 	.word	0x20000008
 8000b00:	2000852c 	.word	0x2000852c
 8000b04:	20008504 	.word	0x20008504
 8000b08:	08008278 	.word	0x08008278
 8000b0c:	08008284 	.word	0x08008284

08000b10 <scenario5>:
	}

}

void scenario5(){
 8000b10:	b590      	push	{r4, r7, lr}
 8000b12:	b08f      	sub	sp, #60	; 0x3c
 8000b14:	af00      	add	r7, sp, #0
	char msg[50];
	//HAL_StatusTypeDef status = HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_OVERRUN);
	for(;;){
		//scenario4();
		uint8_t messages = HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0);
 8000b16:	2100      	movs	r1, #0
 8000b18:	481a      	ldr	r0, [pc, #104]	; (8000b84 <scenario5+0x74>)
 8000b1a:	f001 f803 	bl	8001b24 <HAL_CAN_GetRxFifoFillLevel>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		HAL_UART_Transmit(&huart2, messages,strlen(messages),HAL_MAX_DELAY);
 8000b24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b28:	461c      	mov	r4, r3
 8000b2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fb4e 	bl	80001d0 <strlen>
 8000b34:	4603      	mov	r3, r0
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3c:	4621      	mov	r1, r4
 8000b3e:	4812      	ldr	r0, [pc, #72]	; (8000b88 <scenario5+0x78>)
 8000b40:	f003 fca2 	bl	8004488 <HAL_UART_Transmit>

		if(messages > 0){
 8000b44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d0e4      	beq.n	8000b16 <scenario5+0x6>
			if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <scenario5+0x7c>)
 8000b4e:	4a10      	ldr	r2, [pc, #64]	; (8000b90 <scenario5+0x80>)
 8000b50:	2100      	movs	r1, #0
 8000b52:	480c      	ldr	r0, [pc, #48]	; (8000b84 <scenario5+0x74>)
 8000b54:	f000 fed4 	bl	8001900 <HAL_CAN_GetRxMessage>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d1db      	bne.n	8000b16 <scenario5+0x6>
				//scenario4();
				sprintf(msg,"Received\r\n");
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	490c      	ldr	r1, [pc, #48]	; (8000b94 <scenario5+0x84>)
 8000b62:	4618      	mov	r0, r3
 8000b64:	f006 ff3a 	bl	80079dc <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fb30 	bl	80001d0 <strlen>
 8000b70:	4603      	mov	r3, r0
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	1d39      	adds	r1, r7, #4
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7a:	4803      	ldr	r0, [pc, #12]	; (8000b88 <scenario5+0x78>)
 8000b7c:	f003 fc84 	bl	8004488 <HAL_UART_Transmit>
	for(;;){
 8000b80:	e7c9      	b.n	8000b16 <scenario5+0x6>
 8000b82:	bf00      	nop
 8000b84:	20008504 	.word	0x20008504
 8000b88:	20008480 	.word	0x20008480
 8000b8c:	20008478 	.word	0x20008478
 8000b90:	20008548 	.word	0x20008548
 8000b94:	08008294 	.word	0x08008294

08000b98 <ComUsartTask>:
	osDelay(100);
	}
	*/


void ComUsartTask(void *argument){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	uint8_t rxBuffer[8];
	for(;;)
	{
		while (HAL_UART_Receive_DMA(&huart2, rxBuffer, sizeof(rxBuffer)) != HAL_OK)
 8000ba0:	e006      	b.n	8000bb0 <ComUsartTask+0x18>
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000ba2:	2108      	movs	r1, #8
 8000ba4:	481f      	ldr	r0, [pc, #124]	; (8000c24 <ComUsartTask+0x8c>)
 8000ba6:	f001 fea1 	bl	80028ec <HAL_GPIO_TogglePin>
			osDelay(5);
 8000baa:	2005      	movs	r0, #5
 8000bac:	f004 fb58 	bl	8005260 <osDelay>
		while (HAL_UART_Receive_DMA(&huart2, rxBuffer, sizeof(rxBuffer)) != HAL_OK)
 8000bb0:	f107 0308 	add.w	r3, r7, #8
 8000bb4:	2208      	movs	r2, #8
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	481b      	ldr	r0, [pc, #108]	; (8000c28 <ComUsartTask+0x90>)
 8000bba:	f003 fcf9 	bl	80045b0 <HAL_UART_Receive_DMA>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d1ee      	bne.n	8000ba2 <ComUsartTask+0xa>
		}
		osDelay(5);
 8000bc4:	2005      	movs	r0, #5
 8000bc6:	f004 fb4b 	bl	8005260 <osDelay>
		if(rxBuffer[0]==0x4D){
 8000bca:	7a3b      	ldrb	r3, [r7, #8]
 8000bcc:	2b4d      	cmp	r3, #77	; 0x4d
 8000bce:	d112      	bne.n	8000bf6 <ComUsartTask+0x5e>
			HAL_UART_Transmit(&huart2,&rxBuffer[1], 1,500);
 8000bd0:	f107 0308 	add.w	r3, r7, #8
 8000bd4:	1c59      	adds	r1, r3, #1
 8000bd6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bda:	2201      	movs	r2, #1
 8000bdc:	4812      	ldr	r0, [pc, #72]	; (8000c28 <ComUsartTask+0x90>)
 8000bde:	f003 fc53 	bl	8004488 <HAL_UART_Transmit>
			sharedvar = 16;
 8000be2:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <ComUsartTask+0x94>)
 8000be4:	2210      	movs	r2, #16
 8000be6:	801a      	strh	r2, [r3, #0]
			sharedchannel = 0x9395;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <ComUsartTask+0x98>)
 8000bea:	f249 3295 	movw	r2, #37781	; 0x9395
 8000bee:	801a      	strh	r2, [r3, #0]
			shareddelay = 5;
 8000bf0:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <ComUsartTask+0x9c>)
 8000bf2:	2205      	movs	r2, #5
 8000bf4:	801a      	strh	r2, [r3, #0]
			//sharedvar = (uint16_t) atoi(rxBuffer[5]);
		}
		if(rxBuffer[0]==0x44){
 8000bf6:	7a3b      	ldrb	r3, [r7, #8]
 8000bf8:	2b44      	cmp	r3, #68	; 0x44
 8000bfa:	d1d9      	bne.n	8000bb0 <ComUsartTask+0x18>
			HAL_UART_Transmit(&huart2,&rxBuffer[1], 1,500);
 8000bfc:	f107 0308 	add.w	r3, r7, #8
 8000c00:	1c59      	adds	r1, r3, #1
 8000c02:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c06:	2201      	movs	r2, #1
 8000c08:	4807      	ldr	r0, [pc, #28]	; (8000c28 <ComUsartTask+0x90>)
 8000c0a:	f003 fc3d 	bl	8004488 <HAL_UART_Transmit>
			sharedvar = 16;
 8000c0e:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <ComUsartTask+0x94>)
 8000c10:	2210      	movs	r2, #16
 8000c12:	801a      	strh	r2, [r3, #0]
			sharedchannel = 0x0F05;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <ComUsartTask+0x98>)
 8000c16:	f640 7205 	movw	r2, #3845	; 0xf05
 8000c1a:	801a      	strh	r2, [r3, #0]
			shareddelay = 1;
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <ComUsartTask+0x9c>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	801a      	strh	r2, [r3, #0]
		while (HAL_UART_Receive_DMA(&huart2, rxBuffer, sizeof(rxBuffer)) != HAL_OK)
 8000c22:	e7c5      	b.n	8000bb0 <ComUsartTask+0x18>
 8000c24:	48000400 	.word	0x48000400
 8000c28:	20008480 	.word	0x20008480
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	20000002 	.word	0x20000002
 8000c34:	20000004 	.word	0x20000004

08000c38 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//scenario1();
	scenario4();
 8000c40:	f7ff ff06 	bl	8000a50 <scenario4>
  /* USER CODE END 5 */
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <StartReadTempTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadTempTask */
void StartReadTempTask(void *argument)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadTempTask */
  /* Infinite loop */
  for(;;)
  {
	scenario5();
 8000c54:	f7ff ff5c 	bl	8000b10 <scenario5>
    osDelay(1);
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f004 fb01 	bl	8005260 <osDelay>
	scenario5();
 8000c5e:	e7f9      	b.n	8000c54 <StartReadTempTask+0x8>

08000c60 <StartReadLightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadLightTask */
void StartReadLightTask(void *argument)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadLightTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f004 faf9 	bl	8005260 <osDelay>
 8000c6e:	e7fb      	b.n	8000c68 <StartReadLightTask+0x8>

08000c70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d101      	bne.n	8000c86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c82:	f000 fb15 	bl	80012b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40001000 	.word	0x40001000

08000c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
}
 8000c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  sprintf(msg,"Error\r\n");
 8000c9c:	4907      	ldr	r1, [pc, #28]	; (8000cbc <Error_Handler+0x28>)
 8000c9e:	4808      	ldr	r0, [pc, #32]	; (8000cc0 <Error_Handler+0x2c>)
 8000ca0:	f006 fe9c 	bl	80079dc <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000ca4:	4806      	ldr	r0, [pc, #24]	; (8000cc0 <Error_Handler+0x2c>)
 8000ca6:	f7ff fa93 	bl	80001d0 <strlen>
 8000caa:	4603      	mov	r3, r0
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb2:	4903      	ldr	r1, [pc, #12]	; (8000cc0 <Error_Handler+0x2c>)
 8000cb4:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <Error_Handler+0x30>)
 8000cb6:	f003 fbe7 	bl	8004488 <HAL_UART_Transmit>
  {
 8000cba:	e7ef      	b.n	8000c9c <Error_Handler+0x8>
 8000cbc:	080082a0 	.word	0x080082a0
 8000cc0:	200083f4 	.word	0x200083f4
 8000cc4:	20008480 	.word	0x20008480

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd2:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <HAL_MspInit+0x4c>)
 8000ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	6593      	str	r3, [r2, #88]	; 0x58
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	210f      	movs	r1, #15
 8000d02:	f06f 0001 	mvn.w	r0, #1
 8000d06:	f001 fa4d 	bl	80021a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40021000 	.word	0x40021000

08000d18 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a20      	ldr	r2, [pc, #128]	; (8000db8 <HAL_CAN_MspInit+0xa0>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d139      	bne.n	8000dae <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d3a:	4b20      	ldr	r3, [pc, #128]	; (8000dbc <HAL_CAN_MspInit+0xa4>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3e:	4a1f      	ldr	r2, [pc, #124]	; (8000dbc <HAL_CAN_MspInit+0xa4>)
 8000d40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d44:	6593      	str	r3, [r2, #88]	; 0x58
 8000d46:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <HAL_CAN_MspInit+0xa4>)
 8000d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <HAL_CAN_MspInit+0xa4>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	4a19      	ldr	r2, [pc, #100]	; (8000dbc <HAL_CAN_MspInit+0xa4>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5e:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <HAL_CAN_MspInit+0xa4>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d7c:	2309      	movs	r3, #9
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8a:	f001 fc2d 	bl	80025e8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2105      	movs	r1, #5
 8000d92:	2013      	movs	r0, #19
 8000d94:	f001 fa06 	bl	80021a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000d98:	2013      	movs	r0, #19
 8000d9a:	f001 fa1f 	bl	80021dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2105      	movs	r1, #5
 8000da2:	2014      	movs	r0, #20
 8000da4:	f001 f9fe 	bl	80021a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000da8:	2014      	movs	r0, #20
 8000daa:	f001 fa17 	bl	80021dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000dae:	bf00      	nop
 8000db0:	3728      	adds	r7, #40	; 0x28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40006400 	.word	0x40006400
 8000dbc:	40021000 	.word	0x40021000

08000dc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08c      	sub	sp, #48	; 0x30
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a3c      	ldr	r2, [pc, #240]	; (8000ed0 <HAL_I2C_MspInit+0x110>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d128      	bne.n	8000e34 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de2:	4b3c      	ldr	r3, [pc, #240]	; (8000ed4 <HAL_I2C_MspInit+0x114>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	4a3b      	ldr	r2, [pc, #236]	; (8000ed4 <HAL_I2C_MspInit+0x114>)
 8000de8:	f043 0302 	orr.w	r3, r3, #2
 8000dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dee:	4b39      	ldr	r3, [pc, #228]	; (8000ed4 <HAL_I2C_MspInit+0x114>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	61bb      	str	r3, [r7, #24]
 8000df8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dfa:	23c0      	movs	r3, #192	; 0xc0
 8000dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dfe:	2312      	movs	r3, #18
 8000e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	4830      	ldr	r0, [pc, #192]	; (8000ed8 <HAL_I2C_MspInit+0x118>)
 8000e16:	f001 fbe7 	bl	80025e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e1a:	4b2e      	ldr	r3, [pc, #184]	; (8000ed4 <HAL_I2C_MspInit+0x114>)
 8000e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1e:	4a2d      	ldr	r2, [pc, #180]	; (8000ed4 <HAL_I2C_MspInit+0x114>)
 8000e20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e24:	6593      	str	r3, [r2, #88]	; 0x58
 8000e26:	4b2b      	ldr	r3, [pc, #172]	; (8000ed4 <HAL_I2C_MspInit+0x114>)
 8000e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e2e:	617b      	str	r3, [r7, #20]
 8000e30:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000e32:	e049      	b.n	8000ec8 <HAL_I2C_MspInit+0x108>
  else if(hi2c->Instance==I2C3)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a28      	ldr	r2, [pc, #160]	; (8000edc <HAL_I2C_MspInit+0x11c>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d144      	bne.n	8000ec8 <HAL_I2C_MspInit+0x108>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	4b25      	ldr	r3, [pc, #148]	; (8000ed4 <HAL_I2C_MspInit+0x114>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	4a24      	ldr	r2, [pc, #144]	; (8000ed4 <HAL_I2C_MspInit+0x114>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4a:	4b22      	ldr	r3, [pc, #136]	; (8000ed4 <HAL_I2C_MspInit+0x114>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e56:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <HAL_I2C_MspInit+0x114>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	4a1e      	ldr	r2, [pc, #120]	; (8000ed4 <HAL_I2C_MspInit+0x114>)
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e62:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <HAL_I2C_MspInit+0x114>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e6e:	2380      	movs	r3, #128	; 0x80
 8000e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e72:	2312      	movs	r3, #18
 8000e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e7e:	2304      	movs	r3, #4
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	4619      	mov	r1, r3
 8000e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8c:	f001 fbac 	bl	80025e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e90:	2310      	movs	r3, #16
 8000e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e94:	2312      	movs	r3, #18
 8000e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	480b      	ldr	r0, [pc, #44]	; (8000ed8 <HAL_I2C_MspInit+0x118>)
 8000eac:	f001 fb9c 	bl	80025e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_I2C_MspInit+0x114>)
 8000eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb4:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_I2C_MspInit+0x114>)
 8000eb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000eba:	6593      	str	r3, [r2, #88]	; 0x58
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <HAL_I2C_MspInit+0x114>)
 8000ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
}
 8000ec8:	bf00      	nop
 8000eca:	3730      	adds	r7, #48	; 0x30
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40005400 	.word	0x40005400
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	48000400 	.word	0x48000400
 8000edc:	40005c00 	.word	0x40005c00

08000ee0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a40      	ldr	r2, [pc, #256]	; (8001000 <HAL_UART_MspInit+0x120>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d17a      	bne.n	8000ff8 <HAL_UART_MspInit+0x118>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f02:	4b40      	ldr	r3, [pc, #256]	; (8001004 <HAL_UART_MspInit+0x124>)
 8000f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f06:	4a3f      	ldr	r2, [pc, #252]	; (8001004 <HAL_UART_MspInit+0x124>)
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f0e:	4b3d      	ldr	r3, [pc, #244]	; (8001004 <HAL_UART_MspInit+0x124>)
 8000f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b3a      	ldr	r3, [pc, #232]	; (8001004 <HAL_UART_MspInit+0x124>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	4a39      	ldr	r2, [pc, #228]	; (8001004 <HAL_UART_MspInit+0x124>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f26:	4b37      	ldr	r3, [pc, #220]	; (8001004 <HAL_UART_MspInit+0x124>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f32:	230c      	movs	r3, #12
 8000f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f42:	2307      	movs	r3, #7
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f50:	f001 fb4a 	bl	80025e8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000f54:	4b2c      	ldr	r3, [pc, #176]	; (8001008 <HAL_UART_MspInit+0x128>)
 8000f56:	4a2d      	ldr	r2, [pc, #180]	; (800100c <HAL_UART_MspInit+0x12c>)
 8000f58:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000f5a:	4b2b      	ldr	r3, [pc, #172]	; (8001008 <HAL_UART_MspInit+0x128>)
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f60:	4b29      	ldr	r3, [pc, #164]	; (8001008 <HAL_UART_MspInit+0x128>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f66:	4b28      	ldr	r3, [pc, #160]	; (8001008 <HAL_UART_MspInit+0x128>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f6c:	4b26      	ldr	r3, [pc, #152]	; (8001008 <HAL_UART_MspInit+0x128>)
 8000f6e:	2280      	movs	r2, #128	; 0x80
 8000f70:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f72:	4b25      	ldr	r3, [pc, #148]	; (8001008 <HAL_UART_MspInit+0x128>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f78:	4b23      	ldr	r3, [pc, #140]	; (8001008 <HAL_UART_MspInit+0x128>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000f7e:	4b22      	ldr	r3, [pc, #136]	; (8001008 <HAL_UART_MspInit+0x128>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f84:	4b20      	ldr	r3, [pc, #128]	; (8001008 <HAL_UART_MspInit+0x128>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000f8a:	481f      	ldr	r0, [pc, #124]	; (8001008 <HAL_UART_MspInit+0x128>)
 8000f8c:	f001 f934 	bl	80021f8 <HAL_DMA_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 8000f96:	f7ff fe7d 	bl	8000c94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a1a      	ldr	r2, [pc, #104]	; (8001008 <HAL_UART_MspInit+0x128>)
 8000f9e:	671a      	str	r2, [r3, #112]	; 0x70
 8000fa0:	4a19      	ldr	r2, [pc, #100]	; (8001008 <HAL_UART_MspInit+0x128>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <HAL_UART_MspInit+0x130>)
 8000fa8:	4a1a      	ldr	r2, [pc, #104]	; (8001014 <HAL_UART_MspInit+0x134>)
 8000faa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000fac:	4b18      	ldr	r3, [pc, #96]	; (8001010 <HAL_UART_MspInit+0x130>)
 8000fae:	2202      	movs	r2, #2
 8000fb0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fb2:	4b17      	ldr	r3, [pc, #92]	; (8001010 <HAL_UART_MspInit+0x130>)
 8000fb4:	2210      	movs	r2, #16
 8000fb6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <HAL_UART_MspInit+0x130>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	; (8001010 <HAL_UART_MspInit+0x130>)
 8000fc0:	2280      	movs	r2, #128	; 0x80
 8000fc2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_UART_MspInit+0x130>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_UART_MspInit+0x130>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <HAL_UART_MspInit+0x130>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <HAL_UART_MspInit+0x130>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000fdc:	480c      	ldr	r0, [pc, #48]	; (8001010 <HAL_UART_MspInit+0x130>)
 8000fde:	f001 f90b 	bl	80021f8 <HAL_DMA_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8000fe8:	f7ff fe54 	bl	8000c94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a08      	ldr	r2, [pc, #32]	; (8001010 <HAL_UART_MspInit+0x130>)
 8000ff0:	66da      	str	r2, [r3, #108]	; 0x6c
 8000ff2:	4a07      	ldr	r2, [pc, #28]	; (8001010 <HAL_UART_MspInit+0x130>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ff8:	bf00      	nop
 8000ffa:	3728      	adds	r7, #40	; 0x28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40004400 	.word	0x40004400
 8001004:	40021000 	.word	0x40021000
 8001008:	20008310 	.word	0x20008310
 800100c:	4002006c 	.word	0x4002006c
 8001010:	20008428 	.word	0x20008428
 8001014:	40020080 	.word	0x40020080

08001018 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08c      	sub	sp, #48	; 0x30
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001028:	2200      	movs	r2, #0
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	2036      	movs	r0, #54	; 0x36
 800102e:	f001 f8b9 	bl	80021a4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001032:	2036      	movs	r0, #54	; 0x36
 8001034:	f001 f8d2 	bl	80021dc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001038:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <HAL_InitTick+0x9c>)
 800103a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103c:	4a1d      	ldr	r2, [pc, #116]	; (80010b4 <HAL_InitTick+0x9c>)
 800103e:	f043 0310 	orr.w	r3, r3, #16
 8001042:	6593      	str	r3, [r2, #88]	; 0x58
 8001044:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <HAL_InitTick+0x9c>)
 8001046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001048:	f003 0310 	and.w	r3, r3, #16
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001050:	f107 0210 	add.w	r2, r7, #16
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4611      	mov	r1, r2
 800105a:	4618      	mov	r0, r3
 800105c:	f002 fbbe 	bl	80037dc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001060:	f002 fb90 	bl	8003784 <HAL_RCC_GetPCLK1Freq>
 8001064:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001068:	4a13      	ldr	r2, [pc, #76]	; (80010b8 <HAL_InitTick+0xa0>)
 800106a:	fba2 2303 	umull	r2, r3, r2, r3
 800106e:	0c9b      	lsrs	r3, r3, #18
 8001070:	3b01      	subs	r3, #1
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_InitTick+0xa4>)
 8001076:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <HAL_InitTick+0xa8>)
 8001078:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <HAL_InitTick+0xa4>)
 800107c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001080:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001082:	4a0e      	ldr	r2, [pc, #56]	; (80010bc <HAL_InitTick+0xa4>)
 8001084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001086:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <HAL_InitTick+0xa4>)
 800108a:	2200      	movs	r2, #0
 800108c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_InitTick+0xa4>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001094:	4809      	ldr	r0, [pc, #36]	; (80010bc <HAL_InitTick+0xa4>)
 8001096:	f002 ff29 	bl	8003eec <HAL_TIM_Base_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d104      	bne.n	80010aa <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80010a0:	4806      	ldr	r0, [pc, #24]	; (80010bc <HAL_InitTick+0xa4>)
 80010a2:	f002 ff85 	bl	8003fb0 <HAL_TIM_Base_Start_IT>
 80010a6:	4603      	mov	r3, r0
 80010a8:	e000      	b.n	80010ac <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3730      	adds	r7, #48	; 0x30
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40021000 	.word	0x40021000
 80010b8:	431bde83 	.word	0x431bde83
 80010bc:	20008564 	.word	0x20008564
 80010c0:	40001000 	.word	0x40001000

080010c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <NMI_Handler+0x4>

080010ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <HardFault_Handler+0x4>

080010d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <MemManage_Handler+0x4>

080010d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010da:	e7fe      	b.n	80010da <BusFault_Handler+0x4>

080010dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <UsageFault_Handler+0x4>

080010e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <DMA1_Channel6_IRQHandler+0x10>)
 80010f6:	f001 f997 	bl	8002428 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20008310 	.word	0x20008310

08001104 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <DMA1_Channel7_IRQHandler+0x10>)
 800110a:	f001 f98d 	bl	8002428 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20008428 	.word	0x20008428

08001118 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <CAN1_TX_IRQHandler+0x10>)
 800111e:	f000 fd4f 	bl	8001bc0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20008504 	.word	0x20008504

0800112c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <CAN1_RX0_IRQHandler+0x10>)
 8001132:	f000 fd45 	bl	8001bc0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20008504 	.word	0x20008504

08001140 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <TIM6_DAC_IRQHandler+0x10>)
 8001146:	f002 ff87 	bl	8004058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20008564 	.word	0x20008564

08001154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800115c:	4a14      	ldr	r2, [pc, #80]	; (80011b0 <_sbrk+0x5c>)
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <_sbrk+0x60>)
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <_sbrk+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d102      	bne.n	8001176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <_sbrk+0x64>)
 8001172:	4a12      	ldr	r2, [pc, #72]	; (80011bc <_sbrk+0x68>)
 8001174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <_sbrk+0x64>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	429a      	cmp	r2, r3
 8001182:	d207      	bcs.n	8001194 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001184:	f006 fbea 	bl	800795c <__errno>
 8001188:	4603      	mov	r3, r0
 800118a:	220c      	movs	r2, #12
 800118c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	e009      	b.n	80011a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <_sbrk+0x64>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800119a:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <_sbrk+0x64>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <_sbrk+0x64>)
 80011a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011a6:	68fb      	ldr	r3, [r7, #12]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20010000 	.word	0x20010000
 80011b4:	00000400 	.word	0x00000400
 80011b8:	200000a4 	.word	0x200000a4
 80011bc:	20008608 	.word	0x20008608

080011c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <SystemInit+0x64>)
 80011c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ca:	4a16      	ldr	r2, [pc, #88]	; (8001224 <SystemInit+0x64>)
 80011cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <SystemInit+0x68>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a13      	ldr	r2, [pc, #76]	; (8001228 <SystemInit+0x68>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <SystemInit+0x68>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <SystemInit+0x68>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a0f      	ldr	r2, [pc, #60]	; (8001228 <SystemInit+0x68>)
 80011ec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80011f0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80011f4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <SystemInit+0x68>)
 80011f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011fc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <SystemInit+0x68>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a09      	ldr	r2, [pc, #36]	; (8001228 <SystemInit+0x68>)
 8001204:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001208:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <SystemInit+0x68>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <SystemInit+0x64>)
 8001212:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001216:	609a      	str	r2, [r3, #8]
#endif
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00
 8001228:	40021000 	.word	0x40021000

0800122c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800122c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001264 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001230:	f7ff ffc6 	bl	80011c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001234:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001236:	e003      	b.n	8001240 <LoopCopyDataInit>

08001238 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800123a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800123c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800123e:	3104      	adds	r1, #4

08001240 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001240:	480a      	ldr	r0, [pc, #40]	; (800126c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001244:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001246:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001248:	d3f6      	bcc.n	8001238 <CopyDataInit>
	ldr	r2, =_sbss
 800124a:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <LoopForever+0x12>)
	b	LoopFillZerobss
 800124c:	e002      	b.n	8001254 <LoopFillZerobss>

0800124e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800124e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001250:	f842 3b04 	str.w	r3, [r2], #4

08001254 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <LoopForever+0x16>)
	cmp	r2, r3
 8001256:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001258:	d3f9      	bcc.n	800124e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800125a:	f006 fb85 	bl	8007968 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800125e:	f7ff f98b 	bl	8000578 <main>

08001262 <LoopForever>:

LoopForever:
    b LoopForever
 8001262:	e7fe      	b.n	8001262 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001264:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001268:	080083dc 	.word	0x080083dc
	ldr	r0, =_sdata
 800126c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001270:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 8001274:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 8001278:	20008604 	.word	0x20008604

0800127c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800127c:	e7fe      	b.n	800127c <ADC1_IRQHandler>

0800127e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001284:	2300      	movs	r3, #0
 8001286:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001288:	2003      	movs	r0, #3
 800128a:	f000 ff80 	bl	800218e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800128e:	2000      	movs	r0, #0
 8001290:	f7ff fec2 	bl	8001018 <HAL_InitTick>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d002      	beq.n	80012a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	71fb      	strb	r3, [r7, #7]
 800129e:	e001      	b.n	80012a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012a0:	f7ff fd12 	bl	8000cc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012a4:	79fb      	ldrb	r3, [r7, #7]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_IncTick+0x20>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_IncTick+0x24>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <HAL_IncTick+0x24>)
 80012c2:	6013      	str	r3, [r2, #0]
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000018 	.word	0x20000018
 80012d4:	200085b0 	.word	0x200085b0

080012d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return uwTick;
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <HAL_GetTick+0x14>)
 80012de:	681b      	ldr	r3, [r3, #0]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	200085b0 	.word	0x200085b0

080012f0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e0ed      	b.n	80014de <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d102      	bne.n	8001314 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff fd02 	bl	8000d18 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0202 	bic.w	r2, r2, #2
 8001322:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001324:	f7ff ffd8 	bl	80012d8 <HAL_GetTick>
 8001328:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800132a:	e012      	b.n	8001352 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800132c:	f7ff ffd4 	bl	80012d8 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b0a      	cmp	r3, #10
 8001338:	d90b      	bls.n	8001352 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2205      	movs	r2, #5
 800134a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e0c5      	b.n	80014de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1e5      	bne.n	800132c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f042 0201 	orr.w	r2, r2, #1
 800136e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001370:	f7ff ffb2 	bl	80012d8 <HAL_GetTick>
 8001374:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001376:	e012      	b.n	800139e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001378:	f7ff ffae 	bl	80012d8 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b0a      	cmp	r3, #10
 8001384:	d90b      	bls.n	800139e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2205      	movs	r2, #5
 8001396:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e09f      	b.n	80014de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0e5      	beq.n	8001378 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	7e1b      	ldrb	r3, [r3, #24]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d108      	bne.n	80013c6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	e007      	b.n	80013d6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	7e5b      	ldrb	r3, [r3, #25]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d108      	bne.n	80013f0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	e007      	b.n	8001400 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	7e9b      	ldrb	r3, [r3, #26]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d108      	bne.n	800141a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 0220 	orr.w	r2, r2, #32
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	e007      	b.n	800142a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 0220 	bic.w	r2, r2, #32
 8001428:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	7edb      	ldrb	r3, [r3, #27]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d108      	bne.n	8001444 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0210 	bic.w	r2, r2, #16
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	e007      	b.n	8001454 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0210 	orr.w	r2, r2, #16
 8001452:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	7f1b      	ldrb	r3, [r3, #28]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d108      	bne.n	800146e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 0208 	orr.w	r2, r2, #8
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	e007      	b.n	800147e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 0208 	bic.w	r2, r2, #8
 800147c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7f5b      	ldrb	r3, [r3, #29]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d108      	bne.n	8001498 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f042 0204 	orr.w	r2, r2, #4
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	e007      	b.n	80014a8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 0204 	bic.w	r2, r2, #4
 80014a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	431a      	orrs	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	ea42 0103 	orr.w	r1, r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	1e5a      	subs	r2, r3, #1
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b087      	sub	sp, #28
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014fc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80014fe:	7cfb      	ldrb	r3, [r7, #19]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d003      	beq.n	800150c <HAL_CAN_ConfigFilter+0x26>
 8001504:	7cfb      	ldrb	r3, [r7, #19]
 8001506:	2b02      	cmp	r3, #2
 8001508:	f040 80aa 	bne.w	8001660 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001512:	f043 0201 	orr.w	r2, r3, #1
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	f003 031f 	and.w	r3, r3, #31
 8001524:	2201      	movs	r2, #1
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	43db      	mvns	r3, r3
 8001536:	401a      	ands	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d123      	bne.n	800158e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	43db      	mvns	r3, r3
 8001550:	401a      	ands	r2, r3
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001568:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	3248      	adds	r2, #72	; 0x48
 800156e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001582:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001584:	6979      	ldr	r1, [r7, #20]
 8001586:	3348      	adds	r3, #72	; 0x48
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	440b      	add	r3, r1
 800158c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d122      	bne.n	80015dc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	431a      	orrs	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015b6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	3248      	adds	r2, #72	; 0x48
 80015bc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015d0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015d2:	6979      	ldr	r1, [r7, #20]
 80015d4:	3348      	adds	r3, #72	; 0x48
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	440b      	add	r3, r1
 80015da:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d109      	bne.n	80015f8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	401a      	ands	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80015f6:	e007      	b.n	8001608 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	431a      	orrs	r2, r3
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d109      	bne.n	8001624 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	43db      	mvns	r3, r3
 800161a:	401a      	ands	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001622:	e007      	b.n	8001634 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	431a      	orrs	r2, r3
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d107      	bne.n	800164c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	431a      	orrs	r2, r3
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001652:	f023 0201 	bic.w	r2, r3, #1
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	e006      	b.n	800166e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
  }
}
 800166e:	4618      	mov	r0, r3
 8001670:	371c      	adds	r7, #28
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b084      	sub	sp, #16
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b01      	cmp	r3, #1
 800168c:	d12e      	bne.n	80016ec <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2202      	movs	r2, #2
 8001692:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0201 	bic.w	r2, r2, #1
 80016a4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016a6:	f7ff fe17 	bl	80012d8 <HAL_GetTick>
 80016aa:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016ac:	e012      	b.n	80016d4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016ae:	f7ff fe13 	bl	80012d8 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b0a      	cmp	r3, #10
 80016ba:	d90b      	bls.n	80016d4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2205      	movs	r2, #5
 80016cc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e012      	b.n	80016fa <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1e5      	bne.n	80016ae <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80016e8:	2300      	movs	r3, #0
 80016ea:	e006      	b.n	80016fa <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
  }
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001702:	b480      	push	{r7}
 8001704:	b089      	sub	sp, #36	; 0x24
 8001706:	af00      	add	r7, sp, #0
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
 800170e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001716:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001720:	7ffb      	ldrb	r3, [r7, #31]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d003      	beq.n	800172e <HAL_CAN_AddTxMessage+0x2c>
 8001726:	7ffb      	ldrb	r3, [r7, #31]
 8001728:	2b02      	cmp	r3, #2
 800172a:	f040 80b8 	bne.w	800189e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d10a      	bne.n	800174e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800173e:	2b00      	cmp	r3, #0
 8001740:	d105      	bne.n	800174e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 80a0 	beq.w	800188e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	0e1b      	lsrs	r3, r3, #24
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d907      	bls.n	800176e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001762:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e09e      	b.n	80018ac <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800176e:	2201      	movs	r2, #1
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	409a      	lsls	r2, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10d      	bne.n	800179c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800178a:	68f9      	ldr	r1, [r7, #12]
 800178c:	6809      	ldr	r1, [r1, #0]
 800178e:	431a      	orrs	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3318      	adds	r3, #24
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	440b      	add	r3, r1
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	e00f      	b.n	80017bc <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017a6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017ac:	68f9      	ldr	r1, [r7, #12]
 80017ae:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80017b0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3318      	adds	r3, #24
 80017b6:	011b      	lsls	r3, r3, #4
 80017b8:	440b      	add	r3, r1
 80017ba:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6819      	ldr	r1, [r3, #0]
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	691a      	ldr	r2, [r3, #16]
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	3318      	adds	r3, #24
 80017c8:	011b      	lsls	r3, r3, #4
 80017ca:	440b      	add	r3, r1
 80017cc:	3304      	adds	r3, #4
 80017ce:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	7d1b      	ldrb	r3, [r3, #20]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d111      	bne.n	80017fc <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	3318      	adds	r3, #24
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	4413      	add	r3, r2
 80017e4:	3304      	adds	r3, #4
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	6811      	ldr	r1, [r2, #0]
 80017ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	3318      	adds	r3, #24
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	440b      	add	r3, r1
 80017f8:	3304      	adds	r3, #4
 80017fa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3307      	adds	r3, #7
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	061a      	lsls	r2, r3, #24
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3306      	adds	r3, #6
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	041b      	lsls	r3, r3, #16
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3305      	adds	r3, #5
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	4313      	orrs	r3, r2
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	3204      	adds	r2, #4
 800181c:	7812      	ldrb	r2, [r2, #0]
 800181e:	4610      	mov	r0, r2
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	6811      	ldr	r1, [r2, #0]
 8001824:	ea43 0200 	orr.w	r2, r3, r0
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	011b      	lsls	r3, r3, #4
 800182c:	440b      	add	r3, r1
 800182e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001832:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3303      	adds	r3, #3
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	061a      	lsls	r2, r3, #24
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3302      	adds	r3, #2
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	041b      	lsls	r3, r3, #16
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3301      	adds	r3, #1
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	4313      	orrs	r3, r2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	7812      	ldrb	r2, [r2, #0]
 8001854:	4610      	mov	r0, r2
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	6811      	ldr	r1, [r2, #0]
 800185a:	ea43 0200 	orr.w	r2, r3, r0
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	011b      	lsls	r3, r3, #4
 8001862:	440b      	add	r3, r1
 8001864:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001868:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	3318      	adds	r3, #24
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	4413      	add	r3, r2
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	6811      	ldr	r1, [r2, #0]
 800187c:	f043 0201 	orr.w	r2, r3, #1
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	3318      	adds	r3, #24
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	440b      	add	r3, r1
 8001888:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	e00e      	b.n	80018ac <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001892:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e006      	b.n	80018ac <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
  }
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3724      	adds	r7, #36	; 0x24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018cc:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80018ce:	7afb      	ldrb	r3, [r7, #11]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d002      	beq.n	80018da <HAL_CAN_IsTxMessagePending+0x22>
 80018d4:	7afb      	ldrb	r3, [r7, #11]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d10b      	bne.n	80018f2 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	069b      	lsls	r3, r3, #26
 80018e4:	401a      	ands	r2, r3
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	069b      	lsls	r3, r3, #26
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d001      	beq.n	80018f2 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80018ee:	2301      	movs	r3, #1
 80018f0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80018f2:	68fb      	ldr	r3, [r7, #12]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001900:	b480      	push	{r7}
 8001902:	b087      	sub	sp, #28
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
 800190c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001914:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001916:	7dfb      	ldrb	r3, [r7, #23]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d003      	beq.n	8001924 <HAL_CAN_GetRxMessage+0x24>
 800191c:	7dfb      	ldrb	r3, [r7, #23]
 800191e:	2b02      	cmp	r3, #2
 8001920:	f040 80f3 	bne.w	8001b0a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10e      	bne.n	8001948 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	2b00      	cmp	r3, #0
 8001936:	d116      	bne.n	8001966 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0e7      	b.n	8001b18 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d107      	bne.n	8001966 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e0d8      	b.n	8001b18 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	331b      	adds	r3, #27
 800196e:	011b      	lsls	r3, r3, #4
 8001970:	4413      	add	r3, r2
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0204 	and.w	r2, r3, #4
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10c      	bne.n	800199e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	331b      	adds	r3, #27
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	4413      	add	r3, r2
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	0d5b      	lsrs	r3, r3, #21
 8001994:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	e00b      	b.n	80019b6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	331b      	adds	r3, #27
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	4413      	add	r3, r2
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	08db      	lsrs	r3, r3, #3
 80019ae:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	331b      	adds	r3, #27
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	4413      	add	r3, r2
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0202 	and.w	r2, r3, #2
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	331b      	adds	r3, #27
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	4413      	add	r3, r2
 80019d8:	3304      	adds	r3, #4
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 020f 	and.w	r2, r3, #15
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	331b      	adds	r3, #27
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	4413      	add	r3, r2
 80019f0:	3304      	adds	r3, #4
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	0a1b      	lsrs	r3, r3, #8
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	331b      	adds	r3, #27
 8001a04:	011b      	lsls	r3, r3, #4
 8001a06:	4413      	add	r3, r2
 8001a08:	3304      	adds	r3, #4
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	0c1b      	lsrs	r3, r3, #16
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	011b      	lsls	r3, r3, #4
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	4413      	add	r3, r2
 8001a34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	0a1a      	lsrs	r2, r3, #8
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	011b      	lsls	r3, r3, #4
 8001a4c:	4413      	add	r3, r2
 8001a4e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	0c1a      	lsrs	r2, r3, #16
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	3302      	adds	r3, #2
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	4413      	add	r3, r2
 8001a68:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	0e1a      	lsrs	r2, r3, #24
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	3303      	adds	r3, #3
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	4413      	add	r3, r2
 8001a82:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	3304      	adds	r3, #4
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	4413      	add	r3, r2
 8001a9a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	0a1a      	lsrs	r2, r3, #8
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	3305      	adds	r3, #5
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	011b      	lsls	r3, r3, #4
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	0c1a      	lsrs	r2, r3, #16
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	3306      	adds	r3, #6
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	4413      	add	r3, r2
 8001ace:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	0e1a      	lsrs	r2, r3, #24
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	3307      	adds	r3, #7
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d108      	bne.n	8001af6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0220 	orr.w	r2, r2, #32
 8001af2:	60da      	str	r2, [r3, #12]
 8001af4:	e007      	b.n	8001b06 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	691a      	ldr	r2, [r3, #16]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f042 0220 	orr.w	r2, r2, #32
 8001b04:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e006      	b.n	8001b18 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
  }
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	371c      	adds	r7, #28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b38:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b3a:	7afb      	ldrb	r3, [r7, #11]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d002      	beq.n	8001b46 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001b40:	7afb      	ldrb	r3, [r7, #11]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d10f      	bne.n	8001b66 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d106      	bne.n	8001b5a <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	e005      	b.n	8001b66 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001b66:	68fb      	ldr	r3, [r7, #12]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b84:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d002      	beq.n	8001b92 <HAL_CAN_ActivateNotification+0x1e>
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d109      	bne.n	8001ba6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6959      	ldr	r1, [r3, #20]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e006      	b.n	8001bb4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
  }
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d07c      	beq.n	8001d00 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d023      	beq.n	8001c58 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2201      	movs	r2, #1
 8001c16:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f983 	bl	8001f2e <HAL_CAN_TxMailbox0CompleteCallback>
 8001c28:	e016      	b.n	8001c58 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d004      	beq.n	8001c3e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3c:	e00c      	b.n	8001c58 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d004      	beq.n	8001c52 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c50:	e002      	b.n	8001c58 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f989 	bl	8001f6a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d024      	beq.n	8001cac <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c6a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f963 	bl	8001f42 <HAL_CAN_TxMailbox1CompleteCallback>
 8001c7c:	e016      	b.n	8001cac <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d004      	beq.n	8001c92 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c90:	e00c      	b.n	8001cac <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d004      	beq.n	8001ca6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca4:	e002      	b.n	8001cac <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f969 	bl	8001f7e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d024      	beq.n	8001d00 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cbe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f943 	bl	8001f56 <HAL_CAN_TxMailbox2CompleteCallback>
 8001cd0:	e016      	b.n	8001d00 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d004      	beq.n	8001ce6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce4:	e00c      	b.n	8001d00 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d004      	beq.n	8001cfa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf8:	e002      	b.n	8001d00 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f949 	bl	8001f92 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d00:	6a3b      	ldr	r3, [r7, #32]
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00c      	beq.n	8001d24 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f003 0310 	and.w	r3, r3, #16
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d007      	beq.n	8001d24 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2210      	movs	r2, #16
 8001d22:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d24:	6a3b      	ldr	r3, [r7, #32]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00b      	beq.n	8001d46 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d006      	beq.n	8001d46 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2208      	movs	r2, #8
 8001d3e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f93a 	bl	8001fba <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d46:	6a3b      	ldr	r3, [r7, #32]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d009      	beq.n	8001d64 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d002      	beq.n	8001d64 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f921 	bl	8001fa6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00c      	beq.n	8001d88 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d007      	beq.n	8001d88 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2210      	movs	r2, #16
 8001d86:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	f003 0320 	and.w	r3, r3, #32
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00b      	beq.n	8001daa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d006      	beq.n	8001daa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2208      	movs	r2, #8
 8001da2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f91c 	bl	8001fe2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001daa:	6a3b      	ldr	r3, [r7, #32]
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d009      	beq.n	8001dc8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d002      	beq.n	8001dc8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f903 	bl	8001fce <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00b      	beq.n	8001dea <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d006      	beq.n	8001dea <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2210      	movs	r2, #16
 8001de2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f906 	bl	8001ff6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00b      	beq.n	8001e0c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d006      	beq.n	8001e0c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2208      	movs	r2, #8
 8001e04:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8ff 	bl	800200a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
 8001e0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d07b      	beq.n	8001f0e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d072      	beq.n	8001f06 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e20:	6a3b      	ldr	r3, [r7, #32]
 8001e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d008      	beq.n	8001e3c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
 8001e3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d008      	beq.n	8001e58 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	f043 0302 	orr.w	r3, r3, #2
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d008      	beq.n	8001e74 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	f043 0304 	orr.w	r3, r3, #4
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e74:	6a3b      	ldr	r3, [r7, #32]
 8001e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d043      	beq.n	8001f06 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d03e      	beq.n	8001f06 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e8e:	2b60      	cmp	r3, #96	; 0x60
 8001e90:	d02b      	beq.n	8001eea <HAL_CAN_IRQHandler+0x32a>
 8001e92:	2b60      	cmp	r3, #96	; 0x60
 8001e94:	d82e      	bhi.n	8001ef4 <HAL_CAN_IRQHandler+0x334>
 8001e96:	2b50      	cmp	r3, #80	; 0x50
 8001e98:	d022      	beq.n	8001ee0 <HAL_CAN_IRQHandler+0x320>
 8001e9a:	2b50      	cmp	r3, #80	; 0x50
 8001e9c:	d82a      	bhi.n	8001ef4 <HAL_CAN_IRQHandler+0x334>
 8001e9e:	2b40      	cmp	r3, #64	; 0x40
 8001ea0:	d019      	beq.n	8001ed6 <HAL_CAN_IRQHandler+0x316>
 8001ea2:	2b40      	cmp	r3, #64	; 0x40
 8001ea4:	d826      	bhi.n	8001ef4 <HAL_CAN_IRQHandler+0x334>
 8001ea6:	2b30      	cmp	r3, #48	; 0x30
 8001ea8:	d010      	beq.n	8001ecc <HAL_CAN_IRQHandler+0x30c>
 8001eaa:	2b30      	cmp	r3, #48	; 0x30
 8001eac:	d822      	bhi.n	8001ef4 <HAL_CAN_IRQHandler+0x334>
 8001eae:	2b10      	cmp	r3, #16
 8001eb0:	d002      	beq.n	8001eb8 <HAL_CAN_IRQHandler+0x2f8>
 8001eb2:	2b20      	cmp	r3, #32
 8001eb4:	d005      	beq.n	8001ec2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001eb6:	e01d      	b.n	8001ef4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	f043 0308 	orr.w	r3, r3, #8
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ec0:	e019      	b.n	8001ef6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	f043 0310 	orr.w	r3, r3, #16
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001eca:	e014      	b.n	8001ef6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	f043 0320 	orr.w	r3, r3, #32
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ed4:	e00f      	b.n	8001ef6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ede:	e00a      	b.n	8001ef6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ee8:	e005      	b.n	8001ef6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ef2:	e000      	b.n	8001ef6 <HAL_CAN_IRQHandler+0x336>
            break;
 8001ef4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	699a      	ldr	r2, [r3, #24]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f04:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2204      	movs	r2, #4
 8001f0c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f87c 	bl	800201e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f26:	bf00      	nop
 8001f28:	3728      	adds	r7, #40	; 0x28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <__NVIC_SetPriorityGrouping+0x44>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002050:	4013      	ands	r3, r2
 8002052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800205c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002066:	4a04      	ldr	r2, [pc, #16]	; (8002078 <__NVIC_SetPriorityGrouping+0x44>)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	60d3      	str	r3, [r2, #12]
}
 800206c:	bf00      	nop
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002080:	4b04      	ldr	r3, [pc, #16]	; (8002094 <__NVIC_GetPriorityGrouping+0x18>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	0a1b      	lsrs	r3, r3, #8
 8002086:	f003 0307 	and.w	r3, r3, #7
}
 800208a:	4618      	mov	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	db0b      	blt.n	80020c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	f003 021f 	and.w	r2, r3, #31
 80020b0:	4907      	ldr	r1, [pc, #28]	; (80020d0 <__NVIC_EnableIRQ+0x38>)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	095b      	lsrs	r3, r3, #5
 80020b8:	2001      	movs	r0, #1
 80020ba:	fa00 f202 	lsl.w	r2, r0, r2
 80020be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	e000e100 	.word	0xe000e100

080020d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	6039      	str	r1, [r7, #0]
 80020de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	db0a      	blt.n	80020fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	490c      	ldr	r1, [pc, #48]	; (8002120 <__NVIC_SetPriority+0x4c>)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	0112      	lsls	r2, r2, #4
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	440b      	add	r3, r1
 80020f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020fc:	e00a      	b.n	8002114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	b2da      	uxtb	r2, r3
 8002102:	4908      	ldr	r1, [pc, #32]	; (8002124 <__NVIC_SetPriority+0x50>)
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	3b04      	subs	r3, #4
 800210c:	0112      	lsls	r2, r2, #4
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	440b      	add	r3, r1
 8002112:	761a      	strb	r2, [r3, #24]
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000e100 	.word	0xe000e100
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002128:	b480      	push	{r7}
 800212a:	b089      	sub	sp, #36	; 0x24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f1c3 0307 	rsb	r3, r3, #7
 8002142:	2b04      	cmp	r3, #4
 8002144:	bf28      	it	cs
 8002146:	2304      	movcs	r3, #4
 8002148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3304      	adds	r3, #4
 800214e:	2b06      	cmp	r3, #6
 8002150:	d902      	bls.n	8002158 <NVIC_EncodePriority+0x30>
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3b03      	subs	r3, #3
 8002156:	e000      	b.n	800215a <NVIC_EncodePriority+0x32>
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215c:	f04f 32ff 	mov.w	r2, #4294967295
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43da      	mvns	r2, r3
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	401a      	ands	r2, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002170:	f04f 31ff 	mov.w	r1, #4294967295
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	fa01 f303 	lsl.w	r3, r1, r3
 800217a:	43d9      	mvns	r1, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002180:	4313      	orrs	r3, r2
         );
}
 8002182:	4618      	mov	r0, r3
 8002184:	3724      	adds	r7, #36	; 0x24
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff ff4c 	bl	8002034 <__NVIC_SetPriorityGrouping>
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
 80021b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021b6:	f7ff ff61 	bl	800207c <__NVIC_GetPriorityGrouping>
 80021ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	68b9      	ldr	r1, [r7, #8]
 80021c0:	6978      	ldr	r0, [r7, #20]
 80021c2:	f7ff ffb1 	bl	8002128 <NVIC_EncodePriority>
 80021c6:	4602      	mov	r2, r0
 80021c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021cc:	4611      	mov	r1, r2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff ff80 	bl	80020d4 <__NVIC_SetPriority>
}
 80021d4:	bf00      	nop
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff ff54 	bl	8002098 <__NVIC_EnableIRQ>
}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e098      	b.n	800233c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	4b4d      	ldr	r3, [pc, #308]	; (8002348 <HAL_DMA_Init+0x150>)
 8002212:	429a      	cmp	r2, r3
 8002214:	d80f      	bhi.n	8002236 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	4b4b      	ldr	r3, [pc, #300]	; (800234c <HAL_DMA_Init+0x154>)
 800221e:	4413      	add	r3, r2
 8002220:	4a4b      	ldr	r2, [pc, #300]	; (8002350 <HAL_DMA_Init+0x158>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	091b      	lsrs	r3, r3, #4
 8002228:	009a      	lsls	r2, r3, #2
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a48      	ldr	r2, [pc, #288]	; (8002354 <HAL_DMA_Init+0x15c>)
 8002232:	641a      	str	r2, [r3, #64]	; 0x40
 8002234:	e00e      	b.n	8002254 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	461a      	mov	r2, r3
 800223c:	4b46      	ldr	r3, [pc, #280]	; (8002358 <HAL_DMA_Init+0x160>)
 800223e:	4413      	add	r3, r2
 8002240:	4a43      	ldr	r2, [pc, #268]	; (8002350 <HAL_DMA_Init+0x158>)
 8002242:	fba2 2303 	umull	r2, r3, r2, r3
 8002246:	091b      	lsrs	r3, r3, #4
 8002248:	009a      	lsls	r2, r3, #2
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a42      	ldr	r2, [pc, #264]	; (800235c <HAL_DMA_Init+0x164>)
 8002252:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800226a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800226e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002278:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002284:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002290:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022ae:	d039      	beq.n	8002324 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	4a27      	ldr	r2, [pc, #156]	; (8002354 <HAL_DMA_Init+0x15c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d11a      	bne.n	80022f0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80022ba:	4b29      	ldr	r3, [pc, #164]	; (8002360 <HAL_DMA_Init+0x168>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	f003 031c 	and.w	r3, r3, #28
 80022c6:	210f      	movs	r1, #15
 80022c8:	fa01 f303 	lsl.w	r3, r1, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	4924      	ldr	r1, [pc, #144]	; (8002360 <HAL_DMA_Init+0x168>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80022d4:	4b22      	ldr	r3, [pc, #136]	; (8002360 <HAL_DMA_Init+0x168>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6859      	ldr	r1, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e0:	f003 031c 	and.w	r3, r3, #28
 80022e4:	fa01 f303 	lsl.w	r3, r1, r3
 80022e8:	491d      	ldr	r1, [pc, #116]	; (8002360 <HAL_DMA_Init+0x168>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	600b      	str	r3, [r1, #0]
 80022ee:	e019      	b.n	8002324 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80022f0:	4b1c      	ldr	r3, [pc, #112]	; (8002364 <HAL_DMA_Init+0x16c>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f8:	f003 031c 	and.w	r3, r3, #28
 80022fc:	210f      	movs	r1, #15
 80022fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	4917      	ldr	r1, [pc, #92]	; (8002364 <HAL_DMA_Init+0x16c>)
 8002306:	4013      	ands	r3, r2
 8002308:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800230a:	4b16      	ldr	r3, [pc, #88]	; (8002364 <HAL_DMA_Init+0x16c>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6859      	ldr	r1, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	f003 031c 	and.w	r3, r3, #28
 800231a:	fa01 f303 	lsl.w	r3, r1, r3
 800231e:	4911      	ldr	r1, [pc, #68]	; (8002364 <HAL_DMA_Init+0x16c>)
 8002320:	4313      	orrs	r3, r2
 8002322:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	40020407 	.word	0x40020407
 800234c:	bffdfff8 	.word	0xbffdfff8
 8002350:	cccccccd 	.word	0xcccccccd
 8002354:	40020000 	.word	0x40020000
 8002358:	bffdfbf8 	.word	0xbffdfbf8
 800235c:	40020400 	.word	0x40020400
 8002360:	400200a8 	.word	0x400200a8
 8002364:	400204a8 	.word	0x400204a8

08002368 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_DMA_Start_IT+0x20>
 8002384:	2302      	movs	r3, #2
 8002386:	e04b      	b.n	8002420 <HAL_DMA_Start_IT+0xb8>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b01      	cmp	r3, #1
 800239a:	d13a      	bne.n	8002412 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0201 	bic.w	r2, r2, #1
 80023b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	68b9      	ldr	r1, [r7, #8]
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 f8e0 	bl	8002586 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d008      	beq.n	80023e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f042 020e 	orr.w	r2, r2, #14
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	e00f      	b.n	8002400 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0204 	bic.w	r2, r2, #4
 80023ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 020a 	orr.w	r2, r2, #10
 80023fe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0201 	orr.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	e005      	b.n	800241e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800241a:	2302      	movs	r3, #2
 800241c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800241e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002444:	f003 031c 	and.w	r3, r3, #28
 8002448:	2204      	movs	r2, #4
 800244a:	409a      	lsls	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4013      	ands	r3, r2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d026      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x7a>
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	2b00      	cmp	r3, #0
 800245c:	d021      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b00      	cmp	r3, #0
 800246a:	d107      	bne.n	800247c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0204 	bic.w	r2, r2, #4
 800247a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002480:	f003 021c 	and.w	r2, r3, #28
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	2104      	movs	r1, #4
 800248a:	fa01 f202 	lsl.w	r2, r1, r2
 800248e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	2b00      	cmp	r3, #0
 8002496:	d071      	beq.n	800257c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80024a0:	e06c      	b.n	800257c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	f003 031c 	and.w	r3, r3, #28
 80024aa:	2202      	movs	r2, #2
 80024ac:	409a      	lsls	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4013      	ands	r3, r2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d02e      	beq.n	8002514 <HAL_DMA_IRQHandler+0xec>
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d029      	beq.n	8002514 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0320 	and.w	r3, r3, #32
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10b      	bne.n	80024e6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 020a 	bic.w	r2, r2, #10
 80024dc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	f003 021c 	and.w	r2, r3, #28
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	2102      	movs	r1, #2
 80024f4:	fa01 f202 	lsl.w	r2, r1, r2
 80024f8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	2b00      	cmp	r3, #0
 8002508:	d038      	beq.n	800257c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002512:	e033      	b.n	800257c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002518:	f003 031c 	and.w	r3, r3, #28
 800251c:	2208      	movs	r2, #8
 800251e:	409a      	lsls	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4013      	ands	r3, r2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d02a      	beq.n	800257e <HAL_DMA_IRQHandler+0x156>
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d025      	beq.n	800257e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 020e 	bic.w	r2, r2, #14
 8002540:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	f003 021c 	and.w	r2, r3, #28
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	2101      	movs	r1, #1
 8002550:	fa01 f202 	lsl.w	r2, r1, r2
 8002554:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002570:	2b00      	cmp	r3, #0
 8002572:	d004      	beq.n	800257e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800257c:	bf00      	nop
 800257e:	bf00      	nop
}
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002586:	b480      	push	{r7}
 8002588:	b085      	sub	sp, #20
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607a      	str	r2, [r7, #4]
 8002592:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002598:	f003 021c 	and.w	r2, r3, #28
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	2101      	movs	r1, #1
 80025a2:	fa01 f202 	lsl.w	r2, r1, r2
 80025a6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2b10      	cmp	r3, #16
 80025b6:	d108      	bne.n	80025ca <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80025c8:	e007      	b.n	80025da <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	60da      	str	r2, [r3, #12]
}
 80025da:	bf00      	nop
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f6:	e148      	b.n	800288a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	2101      	movs	r1, #1
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	fa01 f303 	lsl.w	r3, r1, r3
 8002604:	4013      	ands	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 813a 	beq.w	8002884 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d00b      	beq.n	8002630 <HAL_GPIO_Init+0x48>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d007      	beq.n	8002630 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002624:	2b11      	cmp	r3, #17
 8002626:	d003      	beq.n	8002630 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b12      	cmp	r3, #18
 800262e:	d130      	bne.n	8002692 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002666:	2201      	movs	r2, #1
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4013      	ands	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	091b      	lsrs	r3, r3, #4
 800267c:	f003 0201 	and.w	r2, r3, #1
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	2203      	movs	r2, #3
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4013      	ands	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_Init+0xea>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b12      	cmp	r3, #18
 80026d0:	d123      	bne.n	800271a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	08da      	lsrs	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3208      	adds	r2, #8
 80026da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	220f      	movs	r2, #15
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	691a      	ldr	r2, [r3, #16]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	08da      	lsrs	r2, r3, #3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3208      	adds	r2, #8
 8002714:	6939      	ldr	r1, [r7, #16]
 8002716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	2203      	movs	r2, #3
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4013      	ands	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 0203 	and.w	r2, r3, #3
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 8094 	beq.w	8002884 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275c:	4b52      	ldr	r3, [pc, #328]	; (80028a8 <HAL_GPIO_Init+0x2c0>)
 800275e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002760:	4a51      	ldr	r2, [pc, #324]	; (80028a8 <HAL_GPIO_Init+0x2c0>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6613      	str	r3, [r2, #96]	; 0x60
 8002768:	4b4f      	ldr	r3, [pc, #316]	; (80028a8 <HAL_GPIO_Init+0x2c0>)
 800276a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002774:	4a4d      	ldr	r2, [pc, #308]	; (80028ac <HAL_GPIO_Init+0x2c4>)
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	089b      	lsrs	r3, r3, #2
 800277a:	3302      	adds	r3, #2
 800277c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002780:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	220f      	movs	r2, #15
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4013      	ands	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800279e:	d00d      	beq.n	80027bc <HAL_GPIO_Init+0x1d4>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a43      	ldr	r2, [pc, #268]	; (80028b0 <HAL_GPIO_Init+0x2c8>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d007      	beq.n	80027b8 <HAL_GPIO_Init+0x1d0>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a42      	ldr	r2, [pc, #264]	; (80028b4 <HAL_GPIO_Init+0x2cc>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d101      	bne.n	80027b4 <HAL_GPIO_Init+0x1cc>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e004      	b.n	80027be <HAL_GPIO_Init+0x1d6>
 80027b4:	2307      	movs	r3, #7
 80027b6:	e002      	b.n	80027be <HAL_GPIO_Init+0x1d6>
 80027b8:	2301      	movs	r3, #1
 80027ba:	e000      	b.n	80027be <HAL_GPIO_Init+0x1d6>
 80027bc:	2300      	movs	r3, #0
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	f002 0203 	and.w	r2, r2, #3
 80027c4:	0092      	lsls	r2, r2, #2
 80027c6:	4093      	lsls	r3, r2
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027ce:	4937      	ldr	r1, [pc, #220]	; (80028ac <HAL_GPIO_Init+0x2c4>)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	089b      	lsrs	r3, r3, #2
 80027d4:	3302      	adds	r3, #2
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80027dc:	4b36      	ldr	r3, [pc, #216]	; (80028b8 <HAL_GPIO_Init+0x2d0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4013      	ands	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002800:	4a2d      	ldr	r2, [pc, #180]	; (80028b8 <HAL_GPIO_Init+0x2d0>)
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002806:	4b2c      	ldr	r3, [pc, #176]	; (80028b8 <HAL_GPIO_Init+0x2d0>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	43db      	mvns	r3, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800282a:	4a23      	ldr	r2, [pc, #140]	; (80028b8 <HAL_GPIO_Init+0x2d0>)
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002830:	4b21      	ldr	r3, [pc, #132]	; (80028b8 <HAL_GPIO_Init+0x2d0>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	43db      	mvns	r3, r3
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4013      	ands	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002854:	4a18      	ldr	r2, [pc, #96]	; (80028b8 <HAL_GPIO_Init+0x2d0>)
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800285a:	4b17      	ldr	r3, [pc, #92]	; (80028b8 <HAL_GPIO_Init+0x2d0>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	43db      	mvns	r3, r3
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4013      	ands	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800287e:	4a0e      	ldr	r2, [pc, #56]	; (80028b8 <HAL_GPIO_Init+0x2d0>)
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	3301      	adds	r3, #1
 8002888:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	fa22 f303 	lsr.w	r3, r2, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	f47f aeaf 	bne.w	80025f8 <HAL_GPIO_Init+0x10>
  }
}
 800289a:	bf00      	nop
 800289c:	bf00      	nop
 800289e:	371c      	adds	r7, #28
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	40021000 	.word	0x40021000
 80028ac:	40010000 	.word	0x40010000
 80028b0:	48000400 	.word	0x48000400
 80028b4:	48000800 	.word	0x48000800
 80028b8:	40010400 	.word	0x40010400

080028bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	807b      	strh	r3, [r7, #2]
 80028c8:	4613      	mov	r3, r2
 80028ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028cc:	787b      	ldrb	r3, [r7, #1]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028d2:	887a      	ldrh	r2, [r7, #2]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028d8:	e002      	b.n	80028e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028da:	887a      	ldrh	r2, [r7, #2]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028fe:	887a      	ldrh	r2, [r7, #2]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4013      	ands	r3, r2
 8002904:	041a      	lsls	r2, r3, #16
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	43d9      	mvns	r1, r3
 800290a:	887b      	ldrh	r3, [r7, #2]
 800290c:	400b      	ands	r3, r1
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	619a      	str	r2, [r3, #24]
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e081      	b.n	8002a36 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fe fa3a 	bl	8000dc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2224      	movs	r2, #36	; 0x24
 8002950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0201 	bic.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002970:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002980:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d107      	bne.n	800299a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	e006      	b.n	80029a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80029a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d104      	bne.n	80029ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691a      	ldr	r2, [r3, #16]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	ea42 0103 	orr.w	r1, r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	021a      	lsls	r2, r3, #8
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69d9      	ldr	r1, [r3, #28]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a1a      	ldr	r2, [r3, #32]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b20      	cmp	r3, #32
 8002a52:	d138      	bne.n	8002ac6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e032      	b.n	8002ac8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2224      	movs	r2, #36	; 0x24
 8002a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0201 	bic.w	r2, r2, #1
 8002a80:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a90:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6819      	ldr	r1, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0201 	orr.w	r2, r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e000      	b.n	8002ac8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ac6:	2302      	movs	r3, #2
  }
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b20      	cmp	r3, #32
 8002ae8:	d139      	bne.n	8002b5e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e033      	b.n	8002b60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2224      	movs	r2, #36	; 0x24
 8002b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0201 	bic.w	r2, r2, #1
 8002b16:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b26:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	021b      	lsls	r3, r3, #8
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 0201 	orr.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	e000      	b.n	8002b60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b5e:	2302      	movs	r3, #2
  }
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b70:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a04      	ldr	r2, [pc, #16]	; (8002b88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b7a:	6013      	str	r3, [r2, #0]
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40007000 	.word	0x40007000

08002b8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b90:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40007000 	.word	0x40007000

08002ba8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bb6:	d130      	bne.n	8002c1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bb8:	4b23      	ldr	r3, [pc, #140]	; (8002c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bc4:	d038      	beq.n	8002c38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bc6:	4b20      	ldr	r3, [pc, #128]	; (8002c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bce:	4a1e      	ldr	r2, [pc, #120]	; (8002c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bd4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bd6:	4b1d      	ldr	r3, [pc, #116]	; (8002c4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2232      	movs	r2, #50	; 0x32
 8002bdc:	fb02 f303 	mul.w	r3, r2, r3
 8002be0:	4a1b      	ldr	r2, [pc, #108]	; (8002c50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002be2:	fba2 2303 	umull	r2, r3, r2, r3
 8002be6:	0c9b      	lsrs	r3, r3, #18
 8002be8:	3301      	adds	r3, #1
 8002bea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bec:	e002      	b.n	8002bf4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bf4:	4b14      	ldr	r3, [pc, #80]	; (8002c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c00:	d102      	bne.n	8002c08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1f2      	bne.n	8002bee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c08:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c14:	d110      	bne.n	8002c38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e00f      	b.n	8002c3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c1a:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c26:	d007      	beq.n	8002c38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c28:	4b07      	ldr	r3, [pc, #28]	; (8002c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c30:	4a05      	ldr	r2, [pc, #20]	; (8002c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40007000 	.word	0x40007000
 8002c4c:	20000010 	.word	0x20000010
 8002c50:	431bde83 	.word	0x431bde83

08002c54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d102      	bne.n	8002c68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	f000 bc11 	b.w	800348a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c68:	4ba0      	ldr	r3, [pc, #640]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 030c 	and.w	r3, r3, #12
 8002c70:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c72:	4b9e      	ldr	r3, [pc, #632]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0310 	and.w	r3, r3, #16
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 80e4 	beq.w	8002e52 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d007      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x4c>
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	2b0c      	cmp	r3, #12
 8002c94:	f040 808b 	bne.w	8002dae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	f040 8087 	bne.w	8002dae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ca0:	4b92      	ldr	r3, [pc, #584]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x64>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e3e8      	b.n	800348a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1a      	ldr	r2, [r3, #32]
 8002cbc:	4b8b      	ldr	r3, [pc, #556]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d004      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x7e>
 8002cc8:	4b88      	ldr	r3, [pc, #544]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cd0:	e005      	b.n	8002cde <HAL_RCC_OscConfig+0x8a>
 8002cd2:	4b86      	ldr	r3, [pc, #536]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd8:	091b      	lsrs	r3, r3, #4
 8002cda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d223      	bcs.n	8002d2a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 fdaa 	bl	8003840 <RCC_SetFlashLatencyFromMSIRange>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e3c9      	b.n	800348a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cf6:	4b7d      	ldr	r3, [pc, #500]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a7c      	ldr	r2, [pc, #496]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002cfc:	f043 0308 	orr.w	r3, r3, #8
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	4b7a      	ldr	r3, [pc, #488]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	4977      	ldr	r1, [pc, #476]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d14:	4b75      	ldr	r3, [pc, #468]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	4972      	ldr	r1, [pc, #456]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	604b      	str	r3, [r1, #4]
 8002d28:	e025      	b.n	8002d76 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d2a:	4b70      	ldr	r3, [pc, #448]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a6f      	ldr	r2, [pc, #444]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002d30:	f043 0308 	orr.w	r3, r3, #8
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	4b6d      	ldr	r3, [pc, #436]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	496a      	ldr	r1, [pc, #424]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d48:	4b68      	ldr	r3, [pc, #416]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	021b      	lsls	r3, r3, #8
 8002d56:	4965      	ldr	r1, [pc, #404]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d109      	bne.n	8002d76 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 fd6a 	bl	8003840 <RCC_SetFlashLatencyFromMSIRange>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e389      	b.n	800348a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d76:	f000 fc6f 	bl	8003658 <HAL_RCC_GetSysClockFreq>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	4b5b      	ldr	r3, [pc, #364]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	091b      	lsrs	r3, r3, #4
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	495a      	ldr	r1, [pc, #360]	; (8002ef0 <HAL_RCC_OscConfig+0x29c>)
 8002d88:	5ccb      	ldrb	r3, [r1, r3]
 8002d8a:	f003 031f 	and.w	r3, r3, #31
 8002d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d92:	4a58      	ldr	r2, [pc, #352]	; (8002ef4 <HAL_RCC_OscConfig+0x2a0>)
 8002d94:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d96:	4b58      	ldr	r3, [pc, #352]	; (8002ef8 <HAL_RCC_OscConfig+0x2a4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fe f93c 	bl	8001018 <HAL_InitTick>
 8002da0:	4603      	mov	r3, r0
 8002da2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d052      	beq.n	8002e50 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	e36d      	b.n	800348a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d032      	beq.n	8002e1c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002db6:	4b4d      	ldr	r3, [pc, #308]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a4c      	ldr	r2, [pc, #304]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dc2:	f7fe fa89 	bl	80012d8 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dca:	f7fe fa85 	bl	80012d8 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e356      	b.n	800348a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ddc:	4b43      	ldr	r3, [pc, #268]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0f0      	beq.n	8002dca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002de8:	4b40      	ldr	r3, [pc, #256]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a3f      	ldr	r2, [pc, #252]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002dee:	f043 0308 	orr.w	r3, r3, #8
 8002df2:	6013      	str	r3, [r2, #0]
 8002df4:	4b3d      	ldr	r3, [pc, #244]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	493a      	ldr	r1, [pc, #232]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e06:	4b39      	ldr	r3, [pc, #228]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	021b      	lsls	r3, r3, #8
 8002e14:	4935      	ldr	r1, [pc, #212]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	604b      	str	r3, [r1, #4]
 8002e1a:	e01a      	b.n	8002e52 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e1c:	4b33      	ldr	r3, [pc, #204]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a32      	ldr	r2, [pc, #200]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002e22:	f023 0301 	bic.w	r3, r3, #1
 8002e26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e28:	f7fe fa56 	bl	80012d8 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e30:	f7fe fa52 	bl	80012d8 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e323      	b.n	800348a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e42:	4b2a      	ldr	r3, [pc, #168]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x1dc>
 8002e4e:	e000      	b.n	8002e52 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d073      	beq.n	8002f46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d005      	beq.n	8002e70 <HAL_RCC_OscConfig+0x21c>
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2b0c      	cmp	r3, #12
 8002e68:	d10e      	bne.n	8002e88 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	d10b      	bne.n	8002e88 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e70:	4b1e      	ldr	r3, [pc, #120]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d063      	beq.n	8002f44 <HAL_RCC_OscConfig+0x2f0>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d15f      	bne.n	8002f44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e300      	b.n	800348a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e90:	d106      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x24c>
 8002e92:	4b16      	ldr	r3, [pc, #88]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a15      	ldr	r2, [pc, #84]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	e01d      	b.n	8002edc <HAL_RCC_OscConfig+0x288>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ea8:	d10c      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x270>
 8002eaa:	4b10      	ldr	r3, [pc, #64]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a0f      	ldr	r2, [pc, #60]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	4b0d      	ldr	r3, [pc, #52]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a0c      	ldr	r2, [pc, #48]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	e00b      	b.n	8002edc <HAL_RCC_OscConfig+0x288>
 8002ec4:	4b09      	ldr	r3, [pc, #36]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a08      	ldr	r2, [pc, #32]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ece:	6013      	str	r3, [r2, #0]
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a05      	ldr	r2, [pc, #20]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d01b      	beq.n	8002f1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee4:	f7fe f9f8 	bl	80012d8 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eea:	e010      	b.n	8002f0e <HAL_RCC_OscConfig+0x2ba>
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	08008350 	.word	0x08008350
 8002ef4:	20000010 	.word	0x20000010
 8002ef8:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002efc:	f7fe f9ec 	bl	80012d8 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b64      	cmp	r3, #100	; 0x64
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e2bd      	b.n	800348a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f0e:	4baf      	ldr	r3, [pc, #700]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0x2a8>
 8002f1a:	e014      	b.n	8002f46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1c:	f7fe f9dc 	bl	80012d8 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f24:	f7fe f9d8 	bl	80012d8 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b64      	cmp	r3, #100	; 0x64
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e2a9      	b.n	800348a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f36:	4ba5      	ldr	r3, [pc, #660]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x2d0>
 8002f42:	e000      	b.n	8002f46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d060      	beq.n	8003014 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d005      	beq.n	8002f64 <HAL_RCC_OscConfig+0x310>
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	2b0c      	cmp	r3, #12
 8002f5c:	d119      	bne.n	8002f92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d116      	bne.n	8002f92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f64:	4b99      	ldr	r3, [pc, #612]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_RCC_OscConfig+0x328>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e286      	b.n	800348a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7c:	4b93      	ldr	r3, [pc, #588]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	061b      	lsls	r3, r3, #24
 8002f8a:	4990      	ldr	r1, [pc, #576]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f90:	e040      	b.n	8003014 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d023      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f9a:	4b8c      	ldr	r3, [pc, #560]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a8b      	ldr	r2, [pc, #556]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8002fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa6:	f7fe f997 	bl	80012d8 <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fae:	f7fe f993 	bl	80012d8 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e264      	b.n	800348a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fc0:	4b82      	ldr	r3, [pc, #520]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0f0      	beq.n	8002fae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fcc:	4b7f      	ldr	r3, [pc, #508]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	061b      	lsls	r3, r3, #24
 8002fda:	497c      	ldr	r1, [pc, #496]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
 8002fe0:	e018      	b.n	8003014 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fe2:	4b7a      	ldr	r3, [pc, #488]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a79      	ldr	r2, [pc, #484]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8002fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fee:	f7fe f973 	bl	80012d8 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff6:	f7fe f96f 	bl	80012d8 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e240      	b.n	800348a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003008:	4b70      	ldr	r3, [pc, #448]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1f0      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b00      	cmp	r3, #0
 800301e:	d03c      	beq.n	800309a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d01c      	beq.n	8003062 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003028:	4b68      	ldr	r3, [pc, #416]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 800302a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800302e:	4a67      	ldr	r2, [pc, #412]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003038:	f7fe f94e 	bl	80012d8 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003040:	f7fe f94a 	bl	80012d8 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e21b      	b.n	800348a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003052:	4b5e      	ldr	r3, [pc, #376]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8003054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0ef      	beq.n	8003040 <HAL_RCC_OscConfig+0x3ec>
 8003060:	e01b      	b.n	800309a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003062:	4b5a      	ldr	r3, [pc, #360]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8003064:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003068:	4a58      	ldr	r2, [pc, #352]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 800306a:	f023 0301 	bic.w	r3, r3, #1
 800306e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003072:	f7fe f931 	bl	80012d8 <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800307a:	f7fe f92d 	bl	80012d8 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e1fe      	b.n	800348a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800308c:	4b4f      	ldr	r3, [pc, #316]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 800308e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1ef      	bne.n	800307a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 80a6 	beq.w	80031f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030a8:	2300      	movs	r3, #0
 80030aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030ac:	4b47      	ldr	r3, [pc, #284]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 80030ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10d      	bne.n	80030d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b8:	4b44      	ldr	r3, [pc, #272]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 80030ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030bc:	4a43      	ldr	r2, [pc, #268]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 80030be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c2:	6593      	str	r3, [r2, #88]	; 0x58
 80030c4:	4b41      	ldr	r3, [pc, #260]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 80030c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d0:	2301      	movs	r3, #1
 80030d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030d4:	4b3e      	ldr	r3, [pc, #248]	; (80031d0 <HAL_RCC_OscConfig+0x57c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d118      	bne.n	8003112 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030e0:	4b3b      	ldr	r3, [pc, #236]	; (80031d0 <HAL_RCC_OscConfig+0x57c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a3a      	ldr	r2, [pc, #232]	; (80031d0 <HAL_RCC_OscConfig+0x57c>)
 80030e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ec:	f7fe f8f4 	bl	80012d8 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f4:	f7fe f8f0 	bl	80012d8 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e1c1      	b.n	800348a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003106:	4b32      	ldr	r3, [pc, #200]	; (80031d0 <HAL_RCC_OscConfig+0x57c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0f0      	beq.n	80030f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d108      	bne.n	800312c <HAL_RCC_OscConfig+0x4d8>
 800311a:	4b2c      	ldr	r3, [pc, #176]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 800311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003120:	4a2a      	ldr	r2, [pc, #168]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800312a:	e024      	b.n	8003176 <HAL_RCC_OscConfig+0x522>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b05      	cmp	r3, #5
 8003132:	d110      	bne.n	8003156 <HAL_RCC_OscConfig+0x502>
 8003134:	4b25      	ldr	r3, [pc, #148]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313a:	4a24      	ldr	r2, [pc, #144]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 800313c:	f043 0304 	orr.w	r3, r3, #4
 8003140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003144:	4b21      	ldr	r3, [pc, #132]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8003146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314a:	4a20      	ldr	r2, [pc, #128]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003154:	e00f      	b.n	8003176 <HAL_RCC_OscConfig+0x522>
 8003156:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8003158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315c:	4a1b      	ldr	r2, [pc, #108]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 800315e:	f023 0301 	bic.w	r3, r3, #1
 8003162:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003166:	4b19      	ldr	r3, [pc, #100]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8003168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316c:	4a17      	ldr	r2, [pc, #92]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 800316e:	f023 0304 	bic.w	r3, r3, #4
 8003172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d016      	beq.n	80031ac <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317e:	f7fe f8ab 	bl	80012d8 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003184:	e00a      	b.n	800319c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003186:	f7fe f8a7 	bl	80012d8 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	f241 3288 	movw	r2, #5000	; 0x1388
 8003194:	4293      	cmp	r3, r2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e176      	b.n	800348a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800319c:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0ed      	beq.n	8003186 <HAL_RCC_OscConfig+0x532>
 80031aa:	e01a      	b.n	80031e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ac:	f7fe f894 	bl	80012d8 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031b2:	e00f      	b.n	80031d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b4:	f7fe f890 	bl	80012d8 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d906      	bls.n	80031d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e15f      	b.n	800348a <HAL_RCC_OscConfig+0x836>
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000
 80031d0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031d4:	4baa      	ldr	r3, [pc, #680]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 80031d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1e8      	bne.n	80031b4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031e2:	7ffb      	ldrb	r3, [r7, #31]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d105      	bne.n	80031f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e8:	4ba5      	ldr	r3, [pc, #660]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 80031ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ec:	4aa4      	ldr	r2, [pc, #656]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 80031ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0320 	and.w	r3, r3, #32
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d03c      	beq.n	800327a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	2b00      	cmp	r3, #0
 8003206:	d01c      	beq.n	8003242 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003208:	4b9d      	ldr	r3, [pc, #628]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 800320a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800320e:	4a9c      	ldr	r2, [pc, #624]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003218:	f7fe f85e 	bl	80012d8 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003220:	f7fe f85a 	bl	80012d8 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e12b      	b.n	800348a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003232:	4b93      	ldr	r3, [pc, #588]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 8003234:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0ef      	beq.n	8003220 <HAL_RCC_OscConfig+0x5cc>
 8003240:	e01b      	b.n	800327a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003242:	4b8f      	ldr	r3, [pc, #572]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 8003244:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003248:	4a8d      	ldr	r2, [pc, #564]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 800324a:	f023 0301 	bic.w	r3, r3, #1
 800324e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003252:	f7fe f841 	bl	80012d8 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800325a:	f7fe f83d 	bl	80012d8 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e10e      	b.n	800348a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800326c:	4b84      	ldr	r3, [pc, #528]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 800326e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1ef      	bne.n	800325a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 8102 	beq.w	8003488 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003288:	2b02      	cmp	r3, #2
 800328a:	f040 80c5 	bne.w	8003418 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800328e:	4b7c      	ldr	r3, [pc, #496]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f003 0203 	and.w	r2, r3, #3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329e:	429a      	cmp	r2, r3
 80032a0:	d12c      	bne.n	80032fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ac:	3b01      	subs	r3, #1
 80032ae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d123      	bne.n	80032fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032be:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d11b      	bne.n	80032fc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d113      	bne.n	80032fc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032de:	085b      	lsrs	r3, r3, #1
 80032e0:	3b01      	subs	r3, #1
 80032e2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d109      	bne.n	80032fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	085b      	lsrs	r3, r3, #1
 80032f4:	3b01      	subs	r3, #1
 80032f6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d067      	beq.n	80033cc <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	2b0c      	cmp	r3, #12
 8003300:	d062      	beq.n	80033c8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003302:	4b5f      	ldr	r3, [pc, #380]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e0bb      	b.n	800348a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003312:	4b5b      	ldr	r3, [pc, #364]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a5a      	ldr	r2, [pc, #360]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 8003318:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800331c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800331e:	f7fd ffdb 	bl	80012d8 <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003326:	f7fd ffd7 	bl	80012d8 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e0a8      	b.n	800348a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003338:	4b51      	ldr	r3, [pc, #324]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1f0      	bne.n	8003326 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003344:	4b4e      	ldr	r3, [pc, #312]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	4b4e      	ldr	r3, [pc, #312]	; (8003484 <HAL_RCC_OscConfig+0x830>)
 800334a:	4013      	ands	r3, r2
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003354:	3a01      	subs	r2, #1
 8003356:	0112      	lsls	r2, r2, #4
 8003358:	4311      	orrs	r1, r2
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800335e:	0212      	lsls	r2, r2, #8
 8003360:	4311      	orrs	r1, r2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003366:	0852      	lsrs	r2, r2, #1
 8003368:	3a01      	subs	r2, #1
 800336a:	0552      	lsls	r2, r2, #21
 800336c:	4311      	orrs	r1, r2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003372:	0852      	lsrs	r2, r2, #1
 8003374:	3a01      	subs	r2, #1
 8003376:	0652      	lsls	r2, r2, #25
 8003378:	4311      	orrs	r1, r2
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800337e:	06d2      	lsls	r2, r2, #27
 8003380:	430a      	orrs	r2, r1
 8003382:	493f      	ldr	r1, [pc, #252]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 8003384:	4313      	orrs	r3, r2
 8003386:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003388:	4b3d      	ldr	r3, [pc, #244]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a3c      	ldr	r2, [pc, #240]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 800338e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003392:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003394:	4b3a      	ldr	r3, [pc, #232]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	4a39      	ldr	r2, [pc, #228]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 800339a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800339e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033a0:	f7fd ff9a 	bl	80012d8 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a8:	f7fd ff96 	bl	80012d8 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e067      	b.n	800348a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ba:	4b31      	ldr	r3, [pc, #196]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033c6:	e05f      	b.n	8003488 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e05e      	b.n	800348a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033cc:	4b2c      	ldr	r3, [pc, #176]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d157      	bne.n	8003488 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033d8:	4b29      	ldr	r3, [pc, #164]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a28      	ldr	r2, [pc, #160]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 80033de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033e4:	4b26      	ldr	r3, [pc, #152]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	4a25      	ldr	r2, [pc, #148]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 80033ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033f0:	f7fd ff72 	bl	80012d8 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f8:	f7fd ff6e 	bl	80012d8 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e03f      	b.n	800348a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800340a:	4b1d      	ldr	r3, [pc, #116]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0f0      	beq.n	80033f8 <HAL_RCC_OscConfig+0x7a4>
 8003416:	e037      	b.n	8003488 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	2b0c      	cmp	r3, #12
 800341c:	d02d      	beq.n	800347a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341e:	4b18      	ldr	r3, [pc, #96]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a17      	ldr	r2, [pc, #92]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 8003424:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003428:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800342a:	4b15      	ldr	r3, [pc, #84]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d105      	bne.n	8003442 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003436:	4b12      	ldr	r3, [pc, #72]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	4a11      	ldr	r2, [pc, #68]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 800343c:	f023 0303 	bic.w	r3, r3, #3
 8003440:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003442:	4b0f      	ldr	r3, [pc, #60]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	4a0e      	ldr	r2, [pc, #56]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 8003448:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800344c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003450:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003452:	f7fd ff41 	bl	80012d8 <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345a:	f7fd ff3d 	bl	80012d8 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e00e      	b.n	800348a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800346c:	4b04      	ldr	r3, [pc, #16]	; (8003480 <HAL_RCC_OscConfig+0x82c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1f0      	bne.n	800345a <HAL_RCC_OscConfig+0x806>
 8003478:	e006      	b.n	8003488 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e005      	b.n	800348a <HAL_RCC_OscConfig+0x836>
 800347e:	bf00      	nop
 8003480:	40021000 	.word	0x40021000
 8003484:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3720      	adds	r7, #32
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop

08003494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e0c8      	b.n	800363a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034a8:	4b66      	ldr	r3, [pc, #408]	; (8003644 <HAL_RCC_ClockConfig+0x1b0>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d910      	bls.n	80034d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b6:	4b63      	ldr	r3, [pc, #396]	; (8003644 <HAL_RCC_ClockConfig+0x1b0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f023 0207 	bic.w	r2, r3, #7
 80034be:	4961      	ldr	r1, [pc, #388]	; (8003644 <HAL_RCC_ClockConfig+0x1b0>)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c6:	4b5f      	ldr	r3, [pc, #380]	; (8003644 <HAL_RCC_ClockConfig+0x1b0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d001      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0b0      	b.n	800363a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d04c      	beq.n	800357e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d107      	bne.n	80034fc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ec:	4b56      	ldr	r3, [pc, #344]	; (8003648 <HAL_RCC_ClockConfig+0x1b4>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d121      	bne.n	800353c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e09e      	b.n	800363a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b02      	cmp	r3, #2
 8003502:	d107      	bne.n	8003514 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003504:	4b50      	ldr	r3, [pc, #320]	; (8003648 <HAL_RCC_ClockConfig+0x1b4>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d115      	bne.n	800353c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e092      	b.n	800363a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d107      	bne.n	800352c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800351c:	4b4a      	ldr	r3, [pc, #296]	; (8003648 <HAL_RCC_ClockConfig+0x1b4>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d109      	bne.n	800353c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e086      	b.n	800363a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800352c:	4b46      	ldr	r3, [pc, #280]	; (8003648 <HAL_RCC_ClockConfig+0x1b4>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e07e      	b.n	800363a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800353c:	4b42      	ldr	r3, [pc, #264]	; (8003648 <HAL_RCC_ClockConfig+0x1b4>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f023 0203 	bic.w	r2, r3, #3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	493f      	ldr	r1, [pc, #252]	; (8003648 <HAL_RCC_ClockConfig+0x1b4>)
 800354a:	4313      	orrs	r3, r2
 800354c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800354e:	f7fd fec3 	bl	80012d8 <HAL_GetTick>
 8003552:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003554:	e00a      	b.n	800356c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003556:	f7fd febf 	bl	80012d8 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	f241 3288 	movw	r2, #5000	; 0x1388
 8003564:	4293      	cmp	r3, r2
 8003566:	d901      	bls.n	800356c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e066      	b.n	800363a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356c:	4b36      	ldr	r3, [pc, #216]	; (8003648 <HAL_RCC_ClockConfig+0x1b4>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 020c 	and.w	r2, r3, #12
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	429a      	cmp	r2, r3
 800357c:	d1eb      	bne.n	8003556 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d008      	beq.n	800359c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800358a:	4b2f      	ldr	r3, [pc, #188]	; (8003648 <HAL_RCC_ClockConfig+0x1b4>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	492c      	ldr	r1, [pc, #176]	; (8003648 <HAL_RCC_ClockConfig+0x1b4>)
 8003598:	4313      	orrs	r3, r2
 800359a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800359c:	4b29      	ldr	r3, [pc, #164]	; (8003644 <HAL_RCC_ClockConfig+0x1b0>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d210      	bcs.n	80035cc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035aa:	4b26      	ldr	r3, [pc, #152]	; (8003644 <HAL_RCC_ClockConfig+0x1b0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f023 0207 	bic.w	r2, r3, #7
 80035b2:	4924      	ldr	r1, [pc, #144]	; (8003644 <HAL_RCC_ClockConfig+0x1b0>)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ba:	4b22      	ldr	r3, [pc, #136]	; (8003644 <HAL_RCC_ClockConfig+0x1b0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d001      	beq.n	80035cc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e036      	b.n	800363a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d8:	4b1b      	ldr	r3, [pc, #108]	; (8003648 <HAL_RCC_ClockConfig+0x1b4>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4918      	ldr	r1, [pc, #96]	; (8003648 <HAL_RCC_ClockConfig+0x1b4>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d009      	beq.n	800360a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035f6:	4b14      	ldr	r3, [pc, #80]	; (8003648 <HAL_RCC_ClockConfig+0x1b4>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	4910      	ldr	r1, [pc, #64]	; (8003648 <HAL_RCC_ClockConfig+0x1b4>)
 8003606:	4313      	orrs	r3, r2
 8003608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800360a:	f000 f825 	bl	8003658 <HAL_RCC_GetSysClockFreq>
 800360e:	4602      	mov	r2, r0
 8003610:	4b0d      	ldr	r3, [pc, #52]	; (8003648 <HAL_RCC_ClockConfig+0x1b4>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	490c      	ldr	r1, [pc, #48]	; (800364c <HAL_RCC_ClockConfig+0x1b8>)
 800361c:	5ccb      	ldrb	r3, [r1, r3]
 800361e:	f003 031f 	and.w	r3, r3, #31
 8003622:	fa22 f303 	lsr.w	r3, r2, r3
 8003626:	4a0a      	ldr	r2, [pc, #40]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800362a:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <HAL_RCC_ClockConfig+0x1c0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f7fd fcf2 	bl	8001018 <HAL_InitTick>
 8003634:	4603      	mov	r3, r0
 8003636:	72fb      	strb	r3, [r7, #11]

  return status;
 8003638:	7afb      	ldrb	r3, [r7, #11]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40022000 	.word	0x40022000
 8003648:	40021000 	.word	0x40021000
 800364c:	08008350 	.word	0x08008350
 8003650:	20000010 	.word	0x20000010
 8003654:	20000014 	.word	0x20000014

08003658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003658:	b480      	push	{r7}
 800365a:	b089      	sub	sp, #36	; 0x24
 800365c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	61fb      	str	r3, [r7, #28]
 8003662:	2300      	movs	r3, #0
 8003664:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003666:	4b3e      	ldr	r3, [pc, #248]	; (8003760 <HAL_RCC_GetSysClockFreq+0x108>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 030c 	and.w	r3, r3, #12
 800366e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003670:	4b3b      	ldr	r3, [pc, #236]	; (8003760 <HAL_RCC_GetSysClockFreq+0x108>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <HAL_RCC_GetSysClockFreq+0x34>
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	2b0c      	cmp	r3, #12
 8003684:	d121      	bne.n	80036ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d11e      	bne.n	80036ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800368c:	4b34      	ldr	r3, [pc, #208]	; (8003760 <HAL_RCC_GetSysClockFreq+0x108>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d107      	bne.n	80036a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003698:	4b31      	ldr	r3, [pc, #196]	; (8003760 <HAL_RCC_GetSysClockFreq+0x108>)
 800369a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800369e:	0a1b      	lsrs	r3, r3, #8
 80036a0:	f003 030f 	and.w	r3, r3, #15
 80036a4:	61fb      	str	r3, [r7, #28]
 80036a6:	e005      	b.n	80036b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036a8:	4b2d      	ldr	r3, [pc, #180]	; (8003760 <HAL_RCC_GetSysClockFreq+0x108>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	091b      	lsrs	r3, r3, #4
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036b4:	4a2b      	ldr	r2, [pc, #172]	; (8003764 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10d      	bne.n	80036e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036c8:	e00a      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d102      	bne.n	80036d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036d0:	4b25      	ldr	r3, [pc, #148]	; (8003768 <HAL_RCC_GetSysClockFreq+0x110>)
 80036d2:	61bb      	str	r3, [r7, #24]
 80036d4:	e004      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d101      	bne.n	80036e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036dc:	4b22      	ldr	r3, [pc, #136]	; (8003768 <HAL_RCC_GetSysClockFreq+0x110>)
 80036de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	2b0c      	cmp	r3, #12
 80036e4:	d134      	bne.n	8003750 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036e6:	4b1e      	ldr	r3, [pc, #120]	; (8003760 <HAL_RCC_GetSysClockFreq+0x108>)
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d003      	beq.n	80036fe <HAL_RCC_GetSysClockFreq+0xa6>
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d003      	beq.n	8003704 <HAL_RCC_GetSysClockFreq+0xac>
 80036fc:	e005      	b.n	800370a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036fe:	4b1a      	ldr	r3, [pc, #104]	; (8003768 <HAL_RCC_GetSysClockFreq+0x110>)
 8003700:	617b      	str	r3, [r7, #20]
      break;
 8003702:	e005      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003704:	4b18      	ldr	r3, [pc, #96]	; (8003768 <HAL_RCC_GetSysClockFreq+0x110>)
 8003706:	617b      	str	r3, [r7, #20]
      break;
 8003708:	e002      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	617b      	str	r3, [r7, #20]
      break;
 800370e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003710:	4b13      	ldr	r3, [pc, #76]	; (8003760 <HAL_RCC_GetSysClockFreq+0x108>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	091b      	lsrs	r3, r3, #4
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	3301      	adds	r3, #1
 800371c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800371e:	4b10      	ldr	r3, [pc, #64]	; (8003760 <HAL_RCC_GetSysClockFreq+0x108>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	0a1b      	lsrs	r3, r3, #8
 8003724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	fb02 f203 	mul.w	r2, r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	fbb2 f3f3 	udiv	r3, r2, r3
 8003734:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003736:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <HAL_RCC_GetSysClockFreq+0x108>)
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	0e5b      	lsrs	r3, r3, #25
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	3301      	adds	r3, #1
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	fbb2 f3f3 	udiv	r3, r2, r3
 800374e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003750:	69bb      	ldr	r3, [r7, #24]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3724      	adds	r7, #36	; 0x24
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40021000 	.word	0x40021000
 8003764:	08008368 	.word	0x08008368
 8003768:	00f42400 	.word	0x00f42400

0800376c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003770:	4b03      	ldr	r3, [pc, #12]	; (8003780 <HAL_RCC_GetHCLKFreq+0x14>)
 8003772:	681b      	ldr	r3, [r3, #0]
}
 8003774:	4618      	mov	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	20000010 	.word	0x20000010

08003784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003788:	f7ff fff0 	bl	800376c <HAL_RCC_GetHCLKFreq>
 800378c:	4602      	mov	r2, r0
 800378e:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	0a1b      	lsrs	r3, r3, #8
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	4904      	ldr	r1, [pc, #16]	; (80037ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800379a:	5ccb      	ldrb	r3, [r1, r3]
 800379c:	f003 031f 	and.w	r3, r3, #31
 80037a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40021000 	.word	0x40021000
 80037ac:	08008360 	.word	0x08008360

080037b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037b4:	f7ff ffda 	bl	800376c <HAL_RCC_GetHCLKFreq>
 80037b8:	4602      	mov	r2, r0
 80037ba:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	0adb      	lsrs	r3, r3, #11
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	4904      	ldr	r1, [pc, #16]	; (80037d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037c6:	5ccb      	ldrb	r3, [r1, r3]
 80037c8:	f003 031f 	and.w	r3, r3, #31
 80037cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40021000 	.word	0x40021000
 80037d8:	08008360 	.word	0x08008360

080037dc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	220f      	movs	r2, #15
 80037ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80037ec:	4b12      	ldr	r3, [pc, #72]	; (8003838 <HAL_RCC_GetClockConfig+0x5c>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 0203 	and.w	r2, r3, #3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80037f8:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <HAL_RCC_GetClockConfig+0x5c>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003804:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <HAL_RCC_GetClockConfig+0x5c>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003810:	4b09      	ldr	r3, [pc, #36]	; (8003838 <HAL_RCC_GetClockConfig+0x5c>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	08db      	lsrs	r3, r3, #3
 8003816:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800381e:	4b07      	ldr	r3, [pc, #28]	; (800383c <HAL_RCC_GetClockConfig+0x60>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0207 	and.w	r2, r3, #7
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	601a      	str	r2, [r3, #0]
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40021000 	.word	0x40021000
 800383c:	40022000 	.word	0x40022000

08003840 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003848:	2300      	movs	r3, #0
 800384a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800384c:	4b2a      	ldr	r3, [pc, #168]	; (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800384e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003858:	f7ff f998 	bl	8002b8c <HAL_PWREx_GetVoltageRange>
 800385c:	6178      	str	r0, [r7, #20]
 800385e:	e014      	b.n	800388a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003860:	4b25      	ldr	r3, [pc, #148]	; (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003864:	4a24      	ldr	r2, [pc, #144]	; (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800386a:	6593      	str	r3, [r2, #88]	; 0x58
 800386c:	4b22      	ldr	r3, [pc, #136]	; (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800386e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003878:	f7ff f988 	bl	8002b8c <HAL_PWREx_GetVoltageRange>
 800387c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800387e:	4b1e      	ldr	r3, [pc, #120]	; (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003882:	4a1d      	ldr	r2, [pc, #116]	; (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003888:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003890:	d10b      	bne.n	80038aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b80      	cmp	r3, #128	; 0x80
 8003896:	d919      	bls.n	80038cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2ba0      	cmp	r3, #160	; 0xa0
 800389c:	d902      	bls.n	80038a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800389e:	2302      	movs	r3, #2
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	e013      	b.n	80038cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038a4:	2301      	movs	r3, #1
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	e010      	b.n	80038cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b80      	cmp	r3, #128	; 0x80
 80038ae:	d902      	bls.n	80038b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038b0:	2303      	movs	r3, #3
 80038b2:	613b      	str	r3, [r7, #16]
 80038b4:	e00a      	b.n	80038cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b80      	cmp	r3, #128	; 0x80
 80038ba:	d102      	bne.n	80038c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038bc:	2302      	movs	r3, #2
 80038be:	613b      	str	r3, [r7, #16]
 80038c0:	e004      	b.n	80038cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b70      	cmp	r3, #112	; 0x70
 80038c6:	d101      	bne.n	80038cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038c8:	2301      	movs	r3, #1
 80038ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f023 0207 	bic.w	r2, r3, #7
 80038d4:	4909      	ldr	r1, [pc, #36]	; (80038fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038dc:	4b07      	ldr	r3, [pc, #28]	; (80038fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d001      	beq.n	80038ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e000      	b.n	80038f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40021000 	.word	0x40021000
 80038fc:	40022000 	.word	0x40022000

08003900 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003908:	2300      	movs	r3, #0
 800390a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800390c:	2300      	movs	r3, #0
 800390e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003918:	2b00      	cmp	r3, #0
 800391a:	d031      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003920:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003924:	d01a      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003926:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800392a:	d814      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800392c:	2b00      	cmp	r3, #0
 800392e:	d009      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003930:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003934:	d10f      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003936:	4bac      	ldr	r3, [pc, #688]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	4aab      	ldr	r2, [pc, #684]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800393c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003940:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003942:	e00c      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3304      	adds	r3, #4
 8003948:	2100      	movs	r1, #0
 800394a:	4618      	mov	r0, r3
 800394c:	f000 f9dc 	bl	8003d08 <RCCEx_PLLSAI1_Config>
 8003950:	4603      	mov	r3, r0
 8003952:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003954:	e003      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	74fb      	strb	r3, [r7, #19]
      break;
 800395a:	e000      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800395c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800395e:	7cfb      	ldrb	r3, [r7, #19]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10b      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003964:	4ba0      	ldr	r3, [pc, #640]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003972:	499d      	ldr	r1, [pc, #628]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800397a:	e001      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397c:	7cfb      	ldrb	r3, [r7, #19]
 800397e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 8099 	beq.w	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800398e:	2300      	movs	r3, #0
 8003990:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003992:	4b95      	ldr	r3, [pc, #596]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80039a2:	2300      	movs	r3, #0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00d      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039a8:	4b8f      	ldr	r3, [pc, #572]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ac:	4a8e      	ldr	r2, [pc, #568]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b2:	6593      	str	r3, [r2, #88]	; 0x58
 80039b4:	4b8c      	ldr	r3, [pc, #560]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039bc:	60bb      	str	r3, [r7, #8]
 80039be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039c0:	2301      	movs	r3, #1
 80039c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039c4:	4b89      	ldr	r3, [pc, #548]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a88      	ldr	r2, [pc, #544]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80039ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039d0:	f7fd fc82 	bl	80012d8 <HAL_GetTick>
 80039d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039d6:	e009      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d8:	f7fd fc7e 	bl	80012d8 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d902      	bls.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	74fb      	strb	r3, [r7, #19]
        break;
 80039ea:	e005      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039ec:	4b7f      	ldr	r3, [pc, #508]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0ef      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80039f8:	7cfb      	ldrb	r3, [r7, #19]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d155      	bne.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039fe:	4b7a      	ldr	r3, [pc, #488]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a08:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d01e      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d019      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a1a:	4b73      	ldr	r3, [pc, #460]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a24:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a26:	4b70      	ldr	r3, [pc, #448]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2c:	4a6e      	ldr	r2, [pc, #440]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a36:	4b6c      	ldr	r3, [pc, #432]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3c:	4a6a      	ldr	r2, [pc, #424]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a46:	4a68      	ldr	r2, [pc, #416]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d016      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a58:	f7fd fc3e 	bl	80012d8 <HAL_GetTick>
 8003a5c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a5e:	e00b      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a60:	f7fd fc3a 	bl	80012d8 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d902      	bls.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	74fb      	strb	r3, [r7, #19]
            break;
 8003a76:	e006      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a78:	4b5b      	ldr	r3, [pc, #364]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0ec      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003a86:	7cfb      	ldrb	r3, [r7, #19]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10b      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a8c:	4b56      	ldr	r3, [pc, #344]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a9a:	4953      	ldr	r1, [pc, #332]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003aa2:	e004      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003aa4:	7cfb      	ldrb	r3, [r7, #19]
 8003aa6:	74bb      	strb	r3, [r7, #18]
 8003aa8:	e001      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aaa:	7cfb      	ldrb	r3, [r7, #19]
 8003aac:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aae:	7c7b      	ldrb	r3, [r7, #17]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d105      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab4:	4b4c      	ldr	r3, [pc, #304]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab8:	4a4b      	ldr	r2, [pc, #300]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003aba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003abe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00a      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003acc:	4b46      	ldr	r3, [pc, #280]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad2:	f023 0203 	bic.w	r2, r3, #3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	4943      	ldr	r1, [pc, #268]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003aee:	4b3e      	ldr	r3, [pc, #248]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af4:	f023 020c 	bic.w	r2, r3, #12
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	493a      	ldr	r1, [pc, #232]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0320 	and.w	r3, r3, #32
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b10:	4b35      	ldr	r3, [pc, #212]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1e:	4932      	ldr	r1, [pc, #200]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b32:	4b2d      	ldr	r3, [pc, #180]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b40:	4929      	ldr	r1, [pc, #164]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00a      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b54:	4b24      	ldr	r3, [pc, #144]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b62:	4921      	ldr	r1, [pc, #132]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b76:	4b1c      	ldr	r3, [pc, #112]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	4918      	ldr	r1, [pc, #96]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00a      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b98:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	4910      	ldr	r1, [pc, #64]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d02c      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bba:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	4907      	ldr	r1, [pc, #28]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bd8:	d10a      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bda:	4b03      	ldr	r3, [pc, #12]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	4a02      	ldr	r2, [pc, #8]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003be0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003be4:	60d3      	str	r3, [r2, #12]
 8003be6:	e015      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003be8:	40021000 	.word	0x40021000
 8003bec:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bf8:	d10c      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	2101      	movs	r1, #1
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 f881 	bl	8003d08 <RCCEx_PLLSAI1_Config>
 8003c06:	4603      	mov	r3, r0
 8003c08:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c0a:	7cfb      	ldrb	r3, [r7, #19]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8003c10:	7cfb      	ldrb	r3, [r7, #19]
 8003c12:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d028      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c20:	4b30      	ldr	r3, [pc, #192]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2e:	492d      	ldr	r1, [pc, #180]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c3e:	d106      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c40:	4b28      	ldr	r3, [pc, #160]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	4a27      	ldr	r2, [pc, #156]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c4a:	60d3      	str	r3, [r2, #12]
 8003c4c:	e011      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c56:	d10c      	bne.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 f852 	bl	8003d08 <RCCEx_PLLSAI1_Config>
 8003c64:	4603      	mov	r3, r0
 8003c66:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c68:	7cfb      	ldrb	r3, [r7, #19]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8003c6e:	7cfb      	ldrb	r3, [r7, #19]
 8003c70:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d01c      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c7e:	4b19      	ldr	r3, [pc, #100]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c84:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c8c:	4915      	ldr	r1, [pc, #84]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c9c:	d10c      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	2102      	movs	r1, #2
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 f82f 	bl	8003d08 <RCCEx_PLLSAI1_Config>
 8003caa:	4603      	mov	r3, r0
 8003cac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cae:	7cfb      	ldrb	r3, [r7, #19]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003cb4:	7cfb      	ldrb	r3, [r7, #19]
 8003cb6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003cc4:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd2:	4904      	ldr	r1, [pc, #16]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003cda:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40021000 	.word	0x40021000

08003ce8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003cec:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a04      	ldr	r2, [pc, #16]	; (8003d04 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003cf2:	f043 0304 	orr.w	r3, r3, #4
 8003cf6:	6013      	str	r3, [r2, #0]
}
 8003cf8:	bf00      	nop
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40021000 	.word	0x40021000

08003d08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d16:	4b74      	ldr	r3, [pc, #464]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d018      	beq.n	8003d54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d22:	4b71      	ldr	r3, [pc, #452]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f003 0203 	and.w	r2, r3, #3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d10d      	bne.n	8003d4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
       ||
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d009      	beq.n	8003d4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d3a:	4b6b      	ldr	r3, [pc, #428]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	091b      	lsrs	r3, r3, #4
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
       ||
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d047      	beq.n	8003dde <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	73fb      	strb	r3, [r7, #15]
 8003d52:	e044      	b.n	8003dde <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d018      	beq.n	8003d8e <RCCEx_PLLSAI1_Config+0x86>
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d825      	bhi.n	8003dac <RCCEx_PLLSAI1_Config+0xa4>
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d002      	beq.n	8003d6a <RCCEx_PLLSAI1_Config+0x62>
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d009      	beq.n	8003d7c <RCCEx_PLLSAI1_Config+0x74>
 8003d68:	e020      	b.n	8003dac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d6a:	4b5f      	ldr	r3, [pc, #380]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d11d      	bne.n	8003db2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d7a:	e01a      	b.n	8003db2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d7c:	4b5a      	ldr	r3, [pc, #360]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d116      	bne.n	8003db6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d8c:	e013      	b.n	8003db6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d8e:	4b56      	ldr	r3, [pc, #344]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10f      	bne.n	8003dba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d9a:	4b53      	ldr	r3, [pc, #332]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d109      	bne.n	8003dba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003daa:	e006      	b.n	8003dba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	73fb      	strb	r3, [r7, #15]
      break;
 8003db0:	e004      	b.n	8003dbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003db2:	bf00      	nop
 8003db4:	e002      	b.n	8003dbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003db6:	bf00      	nop
 8003db8:	e000      	b.n	8003dbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dba:	bf00      	nop
    }

    if(status == HAL_OK)
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10d      	bne.n	8003dde <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003dc2:	4b49      	ldr	r3, [pc, #292]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6819      	ldr	r1, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	430b      	orrs	r3, r1
 8003dd8:	4943      	ldr	r1, [pc, #268]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d17c      	bne.n	8003ede <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003de4:	4b40      	ldr	r3, [pc, #256]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a3f      	ldr	r2, [pc, #252]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003dee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003df0:	f7fd fa72 	bl	80012d8 <HAL_GetTick>
 8003df4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003df6:	e009      	b.n	8003e0c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003df8:	f7fd fa6e 	bl	80012d8 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d902      	bls.n	8003e0c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	73fb      	strb	r3, [r7, #15]
        break;
 8003e0a:	e005      	b.n	8003e18 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e0c:	4b36      	ldr	r3, [pc, #216]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1ef      	bne.n	8003df8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d15f      	bne.n	8003ede <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d110      	bne.n	8003e46 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e24:	4b30      	ldr	r3, [pc, #192]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003e2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6892      	ldr	r2, [r2, #8]
 8003e34:	0211      	lsls	r1, r2, #8
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	68d2      	ldr	r2, [r2, #12]
 8003e3a:	06d2      	lsls	r2, r2, #27
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	492a      	ldr	r1, [pc, #168]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	610b      	str	r3, [r1, #16]
 8003e44:	e027      	b.n	8003e96 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d112      	bne.n	8003e72 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e4c:	4b26      	ldr	r3, [pc, #152]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003e54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6892      	ldr	r2, [r2, #8]
 8003e5c:	0211      	lsls	r1, r2, #8
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6912      	ldr	r2, [r2, #16]
 8003e62:	0852      	lsrs	r2, r2, #1
 8003e64:	3a01      	subs	r2, #1
 8003e66:	0552      	lsls	r2, r2, #21
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	491f      	ldr	r1, [pc, #124]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	610b      	str	r3, [r1, #16]
 8003e70:	e011      	b.n	8003e96 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e72:	4b1d      	ldr	r3, [pc, #116]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6892      	ldr	r2, [r2, #8]
 8003e82:	0211      	lsls	r1, r2, #8
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6952      	ldr	r2, [r2, #20]
 8003e88:	0852      	lsrs	r2, r2, #1
 8003e8a:	3a01      	subs	r2, #1
 8003e8c:	0652      	lsls	r2, r2, #25
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	4915      	ldr	r1, [pc, #84]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e96:	4b14      	ldr	r3, [pc, #80]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a13      	ldr	r2, [pc, #76]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ea0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea2:	f7fd fa19 	bl	80012d8 <HAL_GetTick>
 8003ea6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ea8:	e009      	b.n	8003ebe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003eaa:	f7fd fa15 	bl	80012d8 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d902      	bls.n	8003ebe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	73fb      	strb	r3, [r7, #15]
          break;
 8003ebc:	e005      	b.n	8003eca <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ebe:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0ef      	beq.n	8003eaa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d106      	bne.n	8003ede <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ed0:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ed2:	691a      	ldr	r2, [r3, #16]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	4903      	ldr	r1, [pc, #12]	; (8003ee8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40021000 	.word	0x40021000

08003eec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e049      	b.n	8003f92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f841 	bl	8003f9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3304      	adds	r3, #4
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	f000 f9dc 	bl	80042e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
	...

08003fb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d001      	beq.n	8003fc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e03b      	b.n	8004040 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0201 	orr.w	r2, r2, #1
 8003fde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a19      	ldr	r2, [pc, #100]	; (800404c <HAL_TIM_Base_Start_IT+0x9c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d009      	beq.n	8003ffe <HAL_TIM_Base_Start_IT+0x4e>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff2:	d004      	beq.n	8003ffe <HAL_TIM_Base_Start_IT+0x4e>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a15      	ldr	r2, [pc, #84]	; (8004050 <HAL_TIM_Base_Start_IT+0xa0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d115      	bne.n	800402a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	4b13      	ldr	r3, [pc, #76]	; (8004054 <HAL_TIM_Base_Start_IT+0xa4>)
 8004006:	4013      	ands	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b06      	cmp	r3, #6
 800400e:	d015      	beq.n	800403c <HAL_TIM_Base_Start_IT+0x8c>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004016:	d011      	beq.n	800403c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004028:	e008      	b.n	800403c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0201 	orr.w	r2, r2, #1
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	e000      	b.n	800403e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	40012c00 	.word	0x40012c00
 8004050:	40014000 	.word	0x40014000
 8004054:	00010007 	.word	0x00010007

08004058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b02      	cmp	r3, #2
 800406c:	d122      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b02      	cmp	r3, #2
 800407a:	d11b      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0202 	mvn.w	r2, #2
 8004084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f905 	bl	80042aa <HAL_TIM_IC_CaptureCallback>
 80040a0:	e005      	b.n	80040ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f8f7 	bl	8004296 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f908 	bl	80042be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	f003 0304 	and.w	r3, r3, #4
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d122      	bne.n	8004108 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d11b      	bne.n	8004108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f06f 0204 	mvn.w	r2, #4
 80040d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2202      	movs	r2, #2
 80040de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f8db 	bl	80042aa <HAL_TIM_IC_CaptureCallback>
 80040f4:	e005      	b.n	8004102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f8cd 	bl	8004296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f8de 	bl	80042be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b08      	cmp	r3, #8
 8004114:	d122      	bne.n	800415c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b08      	cmp	r3, #8
 8004122:	d11b      	bne.n	800415c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f06f 0208 	mvn.w	r2, #8
 800412c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2204      	movs	r2, #4
 8004132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f8b1 	bl	80042aa <HAL_TIM_IC_CaptureCallback>
 8004148:	e005      	b.n	8004156 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f8a3 	bl	8004296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f8b4 	bl	80042be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	f003 0310 	and.w	r3, r3, #16
 8004166:	2b10      	cmp	r3, #16
 8004168:	d122      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f003 0310 	and.w	r3, r3, #16
 8004174:	2b10      	cmp	r3, #16
 8004176:	d11b      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f06f 0210 	mvn.w	r2, #16
 8004180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2208      	movs	r2, #8
 8004186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f887 	bl	80042aa <HAL_TIM_IC_CaptureCallback>
 800419c:	e005      	b.n	80041aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f879 	bl	8004296 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f88a 	bl	80042be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d10e      	bne.n	80041dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d107      	bne.n	80041dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f06f 0201 	mvn.w	r2, #1
 80041d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7fc fd4a 	bl	8000c70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e6:	2b80      	cmp	r3, #128	; 0x80
 80041e8:	d10e      	bne.n	8004208 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f4:	2b80      	cmp	r3, #128	; 0x80
 80041f6:	d107      	bne.n	8004208 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f8de 	bl	80043c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004216:	d10e      	bne.n	8004236 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004222:	2b80      	cmp	r3, #128	; 0x80
 8004224:	d107      	bne.n	8004236 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800422e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f8d1 	bl	80043d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004240:	2b40      	cmp	r3, #64	; 0x40
 8004242:	d10e      	bne.n	8004262 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424e:	2b40      	cmp	r3, #64	; 0x40
 8004250:	d107      	bne.n	8004262 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800425a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f838 	bl	80042d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b20      	cmp	r3, #32
 800426e:	d10e      	bne.n	800428e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b20      	cmp	r3, #32
 800427c:	d107      	bne.n	800428e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f06f 0220 	mvn.w	r2, #32
 8004286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f891 	bl	80043b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800428e:	bf00      	nop
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042be:	b480      	push	{r7}
 80042c0:	b083      	sub	sp, #12
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
	...

080042e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a2a      	ldr	r2, [pc, #168]	; (80043a4 <TIM_Base_SetConfig+0xbc>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d003      	beq.n	8004308 <TIM_Base_SetConfig+0x20>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004306:	d108      	bne.n	800431a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	4313      	orrs	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a21      	ldr	r2, [pc, #132]	; (80043a4 <TIM_Base_SetConfig+0xbc>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d00b      	beq.n	800433a <TIM_Base_SetConfig+0x52>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004328:	d007      	beq.n	800433a <TIM_Base_SetConfig+0x52>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a1e      	ldr	r2, [pc, #120]	; (80043a8 <TIM_Base_SetConfig+0xc0>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d003      	beq.n	800433a <TIM_Base_SetConfig+0x52>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a1d      	ldr	r2, [pc, #116]	; (80043ac <TIM_Base_SetConfig+0xc4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d108      	bne.n	800434c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4313      	orrs	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a0c      	ldr	r2, [pc, #48]	; (80043a4 <TIM_Base_SetConfig+0xbc>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d007      	beq.n	8004388 <TIM_Base_SetConfig+0xa0>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a0b      	ldr	r2, [pc, #44]	; (80043a8 <TIM_Base_SetConfig+0xc0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d003      	beq.n	8004388 <TIM_Base_SetConfig+0xa0>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a0a      	ldr	r2, [pc, #40]	; (80043ac <TIM_Base_SetConfig+0xc4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d103      	bne.n	8004390 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	615a      	str	r2, [r3, #20]
}
 8004396:	bf00      	nop
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40012c00 	.word	0x40012c00
 80043a8:	40014000 	.word	0x40014000
 80043ac:	40014400 	.word	0x40014400

080043b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e040      	b.n	8004480 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004402:	2b00      	cmp	r3, #0
 8004404:	d106      	bne.n	8004414 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fc fd66 	bl	8000ee0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2224      	movs	r2, #36	; 0x24
 8004418:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0201 	bic.w	r2, r2, #1
 8004428:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f92e 	bl	800468c <UART_SetConfig>
 8004430:	4603      	mov	r3, r0
 8004432:	2b01      	cmp	r3, #1
 8004434:	d101      	bne.n	800443a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e022      	b.n	8004480 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fb2e 	bl	8004aa4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004456:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689a      	ldr	r2, [r3, #8]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004466:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 fbb5 	bl	8004be8 <UART_CheckIdleState>
 800447e:	4603      	mov	r3, r0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08a      	sub	sp, #40	; 0x28
 800448c:	af02      	add	r7, sp, #8
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	603b      	str	r3, [r7, #0]
 8004494:	4613      	mov	r3, r2
 8004496:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800449c:	2b20      	cmp	r3, #32
 800449e:	f040 8082 	bne.w	80045a6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <HAL_UART_Transmit+0x26>
 80044a8:	88fb      	ldrh	r3, [r7, #6]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e07a      	b.n	80045a8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_UART_Transmit+0x38>
 80044bc:	2302      	movs	r3, #2
 80044be:	e073      	b.n	80045a8 <HAL_UART_Transmit+0x120>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2221      	movs	r2, #33	; 0x21
 80044d4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044d6:	f7fc feff 	bl	80012d8 <HAL_GetTick>
 80044da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	88fa      	ldrh	r2, [r7, #6]
 80044e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	88fa      	ldrh	r2, [r7, #6]
 80044e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f4:	d108      	bne.n	8004508 <HAL_UART_Transmit+0x80>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d104      	bne.n	8004508 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80044fe:	2300      	movs	r3, #0
 8004500:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	61bb      	str	r3, [r7, #24]
 8004506:	e003      	b.n	8004510 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800450c:	2300      	movs	r3, #0
 800450e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004518:	e02d      	b.n	8004576 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2200      	movs	r2, #0
 8004522:	2180      	movs	r1, #128	; 0x80
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 fba8 	bl	8004c7a <UART_WaitOnFlagUntilTimeout>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e039      	b.n	80045a8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10b      	bne.n	8004552 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	881a      	ldrh	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004546:	b292      	uxth	r2, r2
 8004548:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	3302      	adds	r3, #2
 800454e:	61bb      	str	r3, [r7, #24]
 8004550:	e008      	b.n	8004564 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	781a      	ldrb	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	b292      	uxth	r2, r2
 800455c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	3301      	adds	r3, #1
 8004562:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1cb      	bne.n	800451a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2200      	movs	r2, #0
 800458a:	2140      	movs	r1, #64	; 0x40
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 fb74 	bl	8004c7a <UART_WaitOnFlagUntilTimeout>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e005      	b.n	80045a8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2220      	movs	r2, #32
 80045a0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	e000      	b.n	80045a8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80045a6:	2302      	movs	r3, #2
  }
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3720      	adds	r7, #32
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	4613      	mov	r3, r2
 80045bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045c2:	2b20      	cmp	r3, #32
 80045c4:	d131      	bne.n	800462a <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d002      	beq.n	80045d2 <HAL_UART_Receive_DMA+0x22>
 80045cc:	88fb      	ldrh	r3, [r7, #6]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e02a      	b.n	800462c <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_UART_Receive_DMA+0x34>
 80045e0:	2302      	movs	r3, #2
 80045e2:	e023      	b.n	800462c <HAL_UART_Receive_DMA+0x7c>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a0f      	ldr	r2, [pc, #60]	; (8004634 <HAL_UART_Receive_DMA+0x84>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d00e      	beq.n	800461a <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d007      	beq.n	800461a <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004618:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800461a:	88fb      	ldrh	r3, [r7, #6]
 800461c:	461a      	mov	r2, r3
 800461e:	68b9      	ldr	r1, [r7, #8]
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 fba7 	bl	8004d74 <UART_Start_Receive_DMA>
 8004626:	4603      	mov	r3, r0
 8004628:	e000      	b.n	800462c <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800462a:	2302      	movs	r3, #2
  }
}
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40008000 	.word	0x40008000

08004638 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800468c:	b5b0      	push	{r4, r5, r7, lr}
 800468e:	b088      	sub	sp, #32
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004694:	2300      	movs	r3, #0
 8004696:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	4baf      	ldr	r3, [pc, #700]	; (8004974 <UART_SetConfig+0x2e8>)
 80046b8:	4013      	ands	r3, r2
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6812      	ldr	r2, [r2, #0]
 80046be:	69f9      	ldr	r1, [r7, #28]
 80046c0:	430b      	orrs	r3, r1
 80046c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4aa4      	ldr	r2, [pc, #656]	; (8004978 <UART_SetConfig+0x2ec>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d004      	beq.n	80046f4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	69fa      	ldr	r2, [r7, #28]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	430a      	orrs	r2, r1
 8004706:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a9b      	ldr	r2, [pc, #620]	; (800497c <UART_SetConfig+0x2f0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d121      	bne.n	8004756 <UART_SetConfig+0xca>
 8004712:	4b9b      	ldr	r3, [pc, #620]	; (8004980 <UART_SetConfig+0x2f4>)
 8004714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004718:	f003 0303 	and.w	r3, r3, #3
 800471c:	2b03      	cmp	r3, #3
 800471e:	d817      	bhi.n	8004750 <UART_SetConfig+0xc4>
 8004720:	a201      	add	r2, pc, #4	; (adr r2, 8004728 <UART_SetConfig+0x9c>)
 8004722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004726:	bf00      	nop
 8004728:	08004739 	.word	0x08004739
 800472c:	08004745 	.word	0x08004745
 8004730:	0800473f 	.word	0x0800473f
 8004734:	0800474b 	.word	0x0800474b
 8004738:	2301      	movs	r3, #1
 800473a:	76fb      	strb	r3, [r7, #27]
 800473c:	e070      	b.n	8004820 <UART_SetConfig+0x194>
 800473e:	2302      	movs	r3, #2
 8004740:	76fb      	strb	r3, [r7, #27]
 8004742:	e06d      	b.n	8004820 <UART_SetConfig+0x194>
 8004744:	2304      	movs	r3, #4
 8004746:	76fb      	strb	r3, [r7, #27]
 8004748:	e06a      	b.n	8004820 <UART_SetConfig+0x194>
 800474a:	2308      	movs	r3, #8
 800474c:	76fb      	strb	r3, [r7, #27]
 800474e:	e067      	b.n	8004820 <UART_SetConfig+0x194>
 8004750:	2310      	movs	r3, #16
 8004752:	76fb      	strb	r3, [r7, #27]
 8004754:	e064      	b.n	8004820 <UART_SetConfig+0x194>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a8a      	ldr	r2, [pc, #552]	; (8004984 <UART_SetConfig+0x2f8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d132      	bne.n	80047c6 <UART_SetConfig+0x13a>
 8004760:	4b87      	ldr	r3, [pc, #540]	; (8004980 <UART_SetConfig+0x2f4>)
 8004762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004766:	f003 030c 	and.w	r3, r3, #12
 800476a:	2b0c      	cmp	r3, #12
 800476c:	d828      	bhi.n	80047c0 <UART_SetConfig+0x134>
 800476e:	a201      	add	r2, pc, #4	; (adr r2, 8004774 <UART_SetConfig+0xe8>)
 8004770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004774:	080047a9 	.word	0x080047a9
 8004778:	080047c1 	.word	0x080047c1
 800477c:	080047c1 	.word	0x080047c1
 8004780:	080047c1 	.word	0x080047c1
 8004784:	080047b5 	.word	0x080047b5
 8004788:	080047c1 	.word	0x080047c1
 800478c:	080047c1 	.word	0x080047c1
 8004790:	080047c1 	.word	0x080047c1
 8004794:	080047af 	.word	0x080047af
 8004798:	080047c1 	.word	0x080047c1
 800479c:	080047c1 	.word	0x080047c1
 80047a0:	080047c1 	.word	0x080047c1
 80047a4:	080047bb 	.word	0x080047bb
 80047a8:	2300      	movs	r3, #0
 80047aa:	76fb      	strb	r3, [r7, #27]
 80047ac:	e038      	b.n	8004820 <UART_SetConfig+0x194>
 80047ae:	2302      	movs	r3, #2
 80047b0:	76fb      	strb	r3, [r7, #27]
 80047b2:	e035      	b.n	8004820 <UART_SetConfig+0x194>
 80047b4:	2304      	movs	r3, #4
 80047b6:	76fb      	strb	r3, [r7, #27]
 80047b8:	e032      	b.n	8004820 <UART_SetConfig+0x194>
 80047ba:	2308      	movs	r3, #8
 80047bc:	76fb      	strb	r3, [r7, #27]
 80047be:	e02f      	b.n	8004820 <UART_SetConfig+0x194>
 80047c0:	2310      	movs	r3, #16
 80047c2:	76fb      	strb	r3, [r7, #27]
 80047c4:	e02c      	b.n	8004820 <UART_SetConfig+0x194>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a6b      	ldr	r2, [pc, #428]	; (8004978 <UART_SetConfig+0x2ec>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d125      	bne.n	800481c <UART_SetConfig+0x190>
 80047d0:	4b6b      	ldr	r3, [pc, #428]	; (8004980 <UART_SetConfig+0x2f4>)
 80047d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047de:	d017      	beq.n	8004810 <UART_SetConfig+0x184>
 80047e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047e4:	d817      	bhi.n	8004816 <UART_SetConfig+0x18a>
 80047e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ea:	d00b      	beq.n	8004804 <UART_SetConfig+0x178>
 80047ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047f0:	d811      	bhi.n	8004816 <UART_SetConfig+0x18a>
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <UART_SetConfig+0x172>
 80047f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047fa:	d006      	beq.n	800480a <UART_SetConfig+0x17e>
 80047fc:	e00b      	b.n	8004816 <UART_SetConfig+0x18a>
 80047fe:	2300      	movs	r3, #0
 8004800:	76fb      	strb	r3, [r7, #27]
 8004802:	e00d      	b.n	8004820 <UART_SetConfig+0x194>
 8004804:	2302      	movs	r3, #2
 8004806:	76fb      	strb	r3, [r7, #27]
 8004808:	e00a      	b.n	8004820 <UART_SetConfig+0x194>
 800480a:	2304      	movs	r3, #4
 800480c:	76fb      	strb	r3, [r7, #27]
 800480e:	e007      	b.n	8004820 <UART_SetConfig+0x194>
 8004810:	2308      	movs	r3, #8
 8004812:	76fb      	strb	r3, [r7, #27]
 8004814:	e004      	b.n	8004820 <UART_SetConfig+0x194>
 8004816:	2310      	movs	r3, #16
 8004818:	76fb      	strb	r3, [r7, #27]
 800481a:	e001      	b.n	8004820 <UART_SetConfig+0x194>
 800481c:	2310      	movs	r3, #16
 800481e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a54      	ldr	r2, [pc, #336]	; (8004978 <UART_SetConfig+0x2ec>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d173      	bne.n	8004912 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800482a:	7efb      	ldrb	r3, [r7, #27]
 800482c:	2b08      	cmp	r3, #8
 800482e:	d824      	bhi.n	800487a <UART_SetConfig+0x1ee>
 8004830:	a201      	add	r2, pc, #4	; (adr r2, 8004838 <UART_SetConfig+0x1ac>)
 8004832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004836:	bf00      	nop
 8004838:	0800485d 	.word	0x0800485d
 800483c:	0800487b 	.word	0x0800487b
 8004840:	08004865 	.word	0x08004865
 8004844:	0800487b 	.word	0x0800487b
 8004848:	0800486b 	.word	0x0800486b
 800484c:	0800487b 	.word	0x0800487b
 8004850:	0800487b 	.word	0x0800487b
 8004854:	0800487b 	.word	0x0800487b
 8004858:	08004873 	.word	0x08004873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800485c:	f7fe ff92 	bl	8003784 <HAL_RCC_GetPCLK1Freq>
 8004860:	6178      	str	r0, [r7, #20]
        break;
 8004862:	e00f      	b.n	8004884 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004864:	4b48      	ldr	r3, [pc, #288]	; (8004988 <UART_SetConfig+0x2fc>)
 8004866:	617b      	str	r3, [r7, #20]
        break;
 8004868:	e00c      	b.n	8004884 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800486a:	f7fe fef5 	bl	8003658 <HAL_RCC_GetSysClockFreq>
 800486e:	6178      	str	r0, [r7, #20]
        break;
 8004870:	e008      	b.n	8004884 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004876:	617b      	str	r3, [r7, #20]
        break;
 8004878:	e004      	b.n	8004884 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	76bb      	strb	r3, [r7, #26]
        break;
 8004882:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 80fe 	beq.w	8004a88 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	4613      	mov	r3, r2
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	4413      	add	r3, r2
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	429a      	cmp	r2, r3
 800489a:	d305      	bcc.n	80048a8 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d902      	bls.n	80048ae <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	76bb      	strb	r3, [r7, #26]
 80048ac:	e0ec      	b.n	8004a88 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f04f 0100 	mov.w	r1, #0
 80048b6:	f04f 0200 	mov.w	r2, #0
 80048ba:	f04f 0300 	mov.w	r3, #0
 80048be:	020b      	lsls	r3, r1, #8
 80048c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80048c4:	0202      	lsls	r2, r0, #8
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	6849      	ldr	r1, [r1, #4]
 80048ca:	0849      	lsrs	r1, r1, #1
 80048cc:	4608      	mov	r0, r1
 80048ce:	f04f 0100 	mov.w	r1, #0
 80048d2:	1814      	adds	r4, r2, r0
 80048d4:	eb43 0501 	adc.w	r5, r3, r1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	461a      	mov	r2, r3
 80048de:	f04f 0300 	mov.w	r3, #0
 80048e2:	4620      	mov	r0, r4
 80048e4:	4629      	mov	r1, r5
 80048e6:	f7fb fccb 	bl	8000280 <__aeabi_uldivmod>
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	4613      	mov	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048f8:	d308      	bcc.n	800490c <UART_SetConfig+0x280>
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004900:	d204      	bcs.n	800490c <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	60da      	str	r2, [r3, #12]
 800490a:	e0bd      	b.n	8004a88 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	76bb      	strb	r3, [r7, #26]
 8004910:	e0ba      	b.n	8004a88 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800491a:	d168      	bne.n	80049ee <UART_SetConfig+0x362>
  {
    switch (clocksource)
 800491c:	7efb      	ldrb	r3, [r7, #27]
 800491e:	2b08      	cmp	r3, #8
 8004920:	d834      	bhi.n	800498c <UART_SetConfig+0x300>
 8004922:	a201      	add	r2, pc, #4	; (adr r2, 8004928 <UART_SetConfig+0x29c>)
 8004924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004928:	0800494d 	.word	0x0800494d
 800492c:	08004955 	.word	0x08004955
 8004930:	0800495d 	.word	0x0800495d
 8004934:	0800498d 	.word	0x0800498d
 8004938:	08004963 	.word	0x08004963
 800493c:	0800498d 	.word	0x0800498d
 8004940:	0800498d 	.word	0x0800498d
 8004944:	0800498d 	.word	0x0800498d
 8004948:	0800496b 	.word	0x0800496b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800494c:	f7fe ff1a 	bl	8003784 <HAL_RCC_GetPCLK1Freq>
 8004950:	6178      	str	r0, [r7, #20]
        break;
 8004952:	e020      	b.n	8004996 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004954:	f7fe ff2c 	bl	80037b0 <HAL_RCC_GetPCLK2Freq>
 8004958:	6178      	str	r0, [r7, #20]
        break;
 800495a:	e01c      	b.n	8004996 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800495c:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <UART_SetConfig+0x2fc>)
 800495e:	617b      	str	r3, [r7, #20]
        break;
 8004960:	e019      	b.n	8004996 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004962:	f7fe fe79 	bl	8003658 <HAL_RCC_GetSysClockFreq>
 8004966:	6178      	str	r0, [r7, #20]
        break;
 8004968:	e015      	b.n	8004996 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800496a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800496e:	617b      	str	r3, [r7, #20]
        break;
 8004970:	e011      	b.n	8004996 <UART_SetConfig+0x30a>
 8004972:	bf00      	nop
 8004974:	efff69f3 	.word	0xefff69f3
 8004978:	40008000 	.word	0x40008000
 800497c:	40013800 	.word	0x40013800
 8004980:	40021000 	.word	0x40021000
 8004984:	40004400 	.word	0x40004400
 8004988:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	76bb      	strb	r3, [r7, #26]
        break;
 8004994:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d075      	beq.n	8004a88 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	005a      	lsls	r2, r3, #1
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	085b      	lsrs	r3, r3, #1
 80049a6:	441a      	add	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	2b0f      	cmp	r3, #15
 80049b8:	d916      	bls.n	80049e8 <UART_SetConfig+0x35c>
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c0:	d212      	bcs.n	80049e8 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	f023 030f 	bic.w	r3, r3, #15
 80049ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	085b      	lsrs	r3, r3, #1
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	89fb      	ldrh	r3, [r7, #14]
 80049da:	4313      	orrs	r3, r2
 80049dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	89fa      	ldrh	r2, [r7, #14]
 80049e4:	60da      	str	r2, [r3, #12]
 80049e6:	e04f      	b.n	8004a88 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	76bb      	strb	r3, [r7, #26]
 80049ec:	e04c      	b.n	8004a88 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049ee:	7efb      	ldrb	r3, [r7, #27]
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d828      	bhi.n	8004a46 <UART_SetConfig+0x3ba>
 80049f4:	a201      	add	r2, pc, #4	; (adr r2, 80049fc <UART_SetConfig+0x370>)
 80049f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fa:	bf00      	nop
 80049fc:	08004a21 	.word	0x08004a21
 8004a00:	08004a29 	.word	0x08004a29
 8004a04:	08004a31 	.word	0x08004a31
 8004a08:	08004a47 	.word	0x08004a47
 8004a0c:	08004a37 	.word	0x08004a37
 8004a10:	08004a47 	.word	0x08004a47
 8004a14:	08004a47 	.word	0x08004a47
 8004a18:	08004a47 	.word	0x08004a47
 8004a1c:	08004a3f 	.word	0x08004a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a20:	f7fe feb0 	bl	8003784 <HAL_RCC_GetPCLK1Freq>
 8004a24:	6178      	str	r0, [r7, #20]
        break;
 8004a26:	e013      	b.n	8004a50 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a28:	f7fe fec2 	bl	80037b0 <HAL_RCC_GetPCLK2Freq>
 8004a2c:	6178      	str	r0, [r7, #20]
        break;
 8004a2e:	e00f      	b.n	8004a50 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a30:	4b1b      	ldr	r3, [pc, #108]	; (8004aa0 <UART_SetConfig+0x414>)
 8004a32:	617b      	str	r3, [r7, #20]
        break;
 8004a34:	e00c      	b.n	8004a50 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a36:	f7fe fe0f 	bl	8003658 <HAL_RCC_GetSysClockFreq>
 8004a3a:	6178      	str	r0, [r7, #20]
        break;
 8004a3c:	e008      	b.n	8004a50 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a42:	617b      	str	r3, [r7, #20]
        break;
 8004a44:	e004      	b.n	8004a50 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	76bb      	strb	r3, [r7, #26]
        break;
 8004a4e:	bf00      	nop
    }

    if (pclk != 0U)
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d018      	beq.n	8004a88 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	085a      	lsrs	r2, r3, #1
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	441a      	add	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	2b0f      	cmp	r3, #15
 8004a70:	d908      	bls.n	8004a84 <UART_SetConfig+0x3f8>
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a78:	d204      	bcs.n	8004a84 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	60da      	str	r2, [r3, #12]
 8004a82:	e001      	b.n	8004a88 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a94:	7ebb      	ldrb	r3, [r7, #26]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3720      	adds	r7, #32
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bdb0      	pop	{r4, r5, r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	00f42400 	.word	0x00f42400

08004aa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00a      	beq.n	8004ace <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00a      	beq.n	8004af0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00a      	beq.n	8004b12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	f003 0320 	and.w	r3, r3, #32
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d01a      	beq.n	8004bba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ba2:	d10a      	bne.n	8004bba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00a      	beq.n	8004bdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	605a      	str	r2, [r3, #4]
  }
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af02      	add	r7, sp, #8
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bf8:	f7fc fb6e 	bl	80012d8 <HAL_GetTick>
 8004bfc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0308 	and.w	r3, r3, #8
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d10e      	bne.n	8004c2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f82d 	bl	8004c7a <UART_WaitOnFlagUntilTimeout>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e023      	b.n	8004c72 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d10e      	bne.n	8004c56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f817 	bl	8004c7a <UART_WaitOnFlagUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e00d      	b.n	8004c72 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b084      	sub	sp, #16
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	603b      	str	r3, [r7, #0]
 8004c86:	4613      	mov	r3, r2
 8004c88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c8a:	e05e      	b.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c92:	d05a      	beq.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c94:	f7fc fb20 	bl	80012d8 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d302      	bcc.n	8004caa <UART_WaitOnFlagUntilTimeout+0x30>
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d11b      	bne.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cb8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0201 	bic.w	r2, r2, #1
 8004cc8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e043      	b.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d02c      	beq.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cfe:	d124      	bne.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d08:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d18:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0201 	bic.w	r2, r2, #1
 8004d28:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2220      	movs	r2, #32
 8004d34:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e00f      	b.n	8004d6a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69da      	ldr	r2, [r3, #28]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	4013      	ands	r3, r2
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	bf0c      	ite	eq
 8004d5a:	2301      	moveq	r3, #1
 8004d5c:	2300      	movne	r3, #0
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	461a      	mov	r2, r3
 8004d62:	79fb      	ldrb	r3, [r7, #7]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d091      	beq.n	8004c8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
	...

08004d74 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	88fa      	ldrh	r2, [r7, #6]
 8004d8c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2222      	movs	r2, #34	; 0x22
 8004d9c:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d02b      	beq.n	8004dfe <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004daa:	4a25      	ldr	r2, [pc, #148]	; (8004e40 <UART_Start_Receive_DMA+0xcc>)
 8004dac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db2:	4a24      	ldr	r2, [pc, #144]	; (8004e44 <UART_Start_Receive_DMA+0xd0>)
 8004db4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dba:	4a23      	ldr	r2, [pc, #140]	; (8004e48 <UART_Start_Receive_DMA+0xd4>)
 8004dbc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	3324      	adds	r3, #36	; 0x24
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	88fb      	ldrh	r3, [r7, #6]
 8004dda:	f7fd fac5 	bl	8002368 <HAL_DMA_Start_IT>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00c      	beq.n	8004dfe <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2210      	movs	r2, #16
 8004de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2220      	movs	r2, #32
 8004df8:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e01c      	b.n	8004e38 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e14:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f042 0201 	orr.w	r2, r2, #1
 8004e24:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e34:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	08004ed5 	.word	0x08004ed5
 8004e44:	08004f6d 	.word	0x08004f6d
 8004e48:	08004fa5 	.word	0x08004fa5

08004e4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004e62:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2220      	movs	r2, #32
 8004e68:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004e6a:	bf00      	nop
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e8c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0201 	bic.w	r2, r2, #1
 8004e9c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d107      	bne.n	8004eb6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0210 	bic.w	r2, r2, #16
 8004eb4:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0320 	and.w	r3, r3, #32
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d12a      	bne.n	8004f46 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f06:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0201 	bic.w	r2, r2, #1
 8004f16:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689a      	ldr	r2, [r3, #8]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f26:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d107      	bne.n	8004f46 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 0210 	bic.w	r2, r2, #16
 8004f44:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d107      	bne.n	8004f5e <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f54:	4619      	mov	r1, r3
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f7ff fb8c 	bl	8004674 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f5c:	e002      	b.n	8004f64 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f7ff fb6a 	bl	8004638 <HAL_UART_RxCpltCallback>
}
 8004f64:	bf00      	nop
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f78:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d109      	bne.n	8004f96 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f88:	085b      	lsrs	r3, r3, #1
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f7ff fb70 	bl	8004674 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f94:	e002      	b.n	8004f9c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f7ff fb58 	bl	800464c <HAL_UART_RxHalfCpltCallback>
}
 8004f9c:	bf00      	nop
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fb6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fbc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc8:	2b80      	cmp	r3, #128	; 0x80
 8004fca:	d109      	bne.n	8004fe0 <UART_DMAError+0x3c>
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	2b21      	cmp	r3, #33	; 0x21
 8004fd0:	d106      	bne.n	8004fe0 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004fda:	6978      	ldr	r0, [r7, #20]
 8004fdc:	f7ff ff36 	bl	8004e4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fea:	2b40      	cmp	r3, #64	; 0x40
 8004fec:	d109      	bne.n	8005002 <UART_DMAError+0x5e>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2b22      	cmp	r3, #34	; 0x22
 8004ff2:	d106      	bne.n	8005002 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004ffc:	6978      	ldr	r0, [r7, #20]
 8004ffe:	f7ff ff3a 	bl	8004e76 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005008:	f043 0210 	orr.w	r2, r3, #16
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005012:	6978      	ldr	r0, [r7, #20]
 8005014:	f7ff fb24 	bl	8004660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005018:	bf00      	nop
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <__NVIC_SetPriority>:
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	4603      	mov	r3, r0
 8005028:	6039      	str	r1, [r7, #0]
 800502a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800502c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005030:	2b00      	cmp	r3, #0
 8005032:	db0a      	blt.n	800504a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	b2da      	uxtb	r2, r3
 8005038:	490c      	ldr	r1, [pc, #48]	; (800506c <__NVIC_SetPriority+0x4c>)
 800503a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800503e:	0112      	lsls	r2, r2, #4
 8005040:	b2d2      	uxtb	r2, r2
 8005042:	440b      	add	r3, r1
 8005044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005048:	e00a      	b.n	8005060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	b2da      	uxtb	r2, r3
 800504e:	4908      	ldr	r1, [pc, #32]	; (8005070 <__NVIC_SetPriority+0x50>)
 8005050:	79fb      	ldrb	r3, [r7, #7]
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	3b04      	subs	r3, #4
 8005058:	0112      	lsls	r2, r2, #4
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	440b      	add	r3, r1
 800505e:	761a      	strb	r2, [r3, #24]
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	e000e100 	.word	0xe000e100
 8005070:	e000ed00 	.word	0xe000ed00

08005074 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005078:	4b05      	ldr	r3, [pc, #20]	; (8005090 <SysTick_Handler+0x1c>)
 800507a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800507c:	f001 fcfe 	bl	8006a7c <xTaskGetSchedulerState>
 8005080:	4603      	mov	r3, r0
 8005082:	2b01      	cmp	r3, #1
 8005084:	d001      	beq.n	800508a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005086:	f002 fae7 	bl	8007658 <xPortSysTickHandler>
  }
}
 800508a:	bf00      	nop
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	e000e010 	.word	0xe000e010

08005094 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005098:	2100      	movs	r1, #0
 800509a:	f06f 0004 	mvn.w	r0, #4
 800509e:	f7ff ffbf 	bl	8005020 <__NVIC_SetPriority>
#endif
}
 80050a2:	bf00      	nop
 80050a4:	bd80      	pop	{r7, pc}
	...

080050a8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050ae:	f3ef 8305 	mrs	r3, IPSR
 80050b2:	603b      	str	r3, [r7, #0]
  return(result);
 80050b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80050ba:	f06f 0305 	mvn.w	r3, #5
 80050be:	607b      	str	r3, [r7, #4]
 80050c0:	e00c      	b.n	80050dc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80050c2:	4b0a      	ldr	r3, [pc, #40]	; (80050ec <osKernelInitialize+0x44>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d105      	bne.n	80050d6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80050ca:	4b08      	ldr	r3, [pc, #32]	; (80050ec <osKernelInitialize+0x44>)
 80050cc:	2201      	movs	r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80050d0:	2300      	movs	r3, #0
 80050d2:	607b      	str	r3, [r7, #4]
 80050d4:	e002      	b.n	80050dc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80050d6:	f04f 33ff 	mov.w	r3, #4294967295
 80050da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80050dc:	687b      	ldr	r3, [r7, #4]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	200000a8 	.word	0x200000a8

080050f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050f6:	f3ef 8305 	mrs	r3, IPSR
 80050fa:	603b      	str	r3, [r7, #0]
  return(result);
 80050fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005102:	f06f 0305 	mvn.w	r3, #5
 8005106:	607b      	str	r3, [r7, #4]
 8005108:	e010      	b.n	800512c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800510a:	4b0b      	ldr	r3, [pc, #44]	; (8005138 <osKernelStart+0x48>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d109      	bne.n	8005126 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005112:	f7ff ffbf 	bl	8005094 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005116:	4b08      	ldr	r3, [pc, #32]	; (8005138 <osKernelStart+0x48>)
 8005118:	2202      	movs	r2, #2
 800511a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800511c:	f001 f866 	bl	80061ec <vTaskStartScheduler>
      stat = osOK;
 8005120:	2300      	movs	r3, #0
 8005122:	607b      	str	r3, [r7, #4]
 8005124:	e002      	b.n	800512c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005126:	f04f 33ff 	mov.w	r3, #4294967295
 800512a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800512c:	687b      	ldr	r3, [r7, #4]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	200000a8 	.word	0x200000a8

0800513c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800513c:	b580      	push	{r7, lr}
 800513e:	b08e      	sub	sp, #56	; 0x38
 8005140:	af04      	add	r7, sp, #16
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005148:	2300      	movs	r3, #0
 800514a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800514c:	f3ef 8305 	mrs	r3, IPSR
 8005150:	617b      	str	r3, [r7, #20]
  return(result);
 8005152:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005154:	2b00      	cmp	r3, #0
 8005156:	d17e      	bne.n	8005256 <osThreadNew+0x11a>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d07b      	beq.n	8005256 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800515e:	2380      	movs	r3, #128	; 0x80
 8005160:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005162:	2318      	movs	r3, #24
 8005164:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005166:	2300      	movs	r3, #0
 8005168:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800516a:	f04f 33ff 	mov.w	r3, #4294967295
 800516e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d045      	beq.n	8005202 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d002      	beq.n	8005184 <osThreadNew+0x48>
        name = attr->name;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d008      	beq.n	80051aa <osThreadNew+0x6e>
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	2b38      	cmp	r3, #56	; 0x38
 800519c:	d805      	bhi.n	80051aa <osThreadNew+0x6e>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <osThreadNew+0x72>
        return (NULL);
 80051aa:	2300      	movs	r3, #0
 80051ac:	e054      	b.n	8005258 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	089b      	lsrs	r3, r3, #2
 80051bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00e      	beq.n	80051e4 <osThreadNew+0xa8>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	2b5b      	cmp	r3, #91	; 0x5b
 80051cc:	d90a      	bls.n	80051e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d006      	beq.n	80051e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d002      	beq.n	80051e4 <osThreadNew+0xa8>
        mem = 1;
 80051de:	2301      	movs	r3, #1
 80051e0:	61bb      	str	r3, [r7, #24]
 80051e2:	e010      	b.n	8005206 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10c      	bne.n	8005206 <osThreadNew+0xca>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d108      	bne.n	8005206 <osThreadNew+0xca>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d104      	bne.n	8005206 <osThreadNew+0xca>
          mem = 0;
 80051fc:	2300      	movs	r3, #0
 80051fe:	61bb      	str	r3, [r7, #24]
 8005200:	e001      	b.n	8005206 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005202:	2300      	movs	r3, #0
 8005204:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d110      	bne.n	800522e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005214:	9202      	str	r2, [sp, #8]
 8005216:	9301      	str	r3, [sp, #4]
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	6a3a      	ldr	r2, [r7, #32]
 8005220:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 fe0c 	bl	8005e40 <xTaskCreateStatic>
 8005228:	4603      	mov	r3, r0
 800522a:	613b      	str	r3, [r7, #16]
 800522c:	e013      	b.n	8005256 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d110      	bne.n	8005256 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	b29a      	uxth	r2, r3
 8005238:	f107 0310 	add.w	r3, r7, #16
 800523c:	9301      	str	r3, [sp, #4]
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f000 fe57 	bl	8005efa <xTaskCreate>
 800524c:	4603      	mov	r3, r0
 800524e:	2b01      	cmp	r3, #1
 8005250:	d001      	beq.n	8005256 <osThreadNew+0x11a>
            hTask = NULL;
 8005252:	2300      	movs	r3, #0
 8005254:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005256:	693b      	ldr	r3, [r7, #16]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3728      	adds	r7, #40	; 0x28
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005268:	f3ef 8305 	mrs	r3, IPSR
 800526c:	60bb      	str	r3, [r7, #8]
  return(result);
 800526e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <osDelay+0x1c>
    stat = osErrorISR;
 8005274:	f06f 0305 	mvn.w	r3, #5
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	e007      	b.n	800528c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800527c:	2300      	movs	r3, #0
 800527e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d002      	beq.n	800528c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 ff7c 	bl	8006184 <vTaskDelay>
    }
  }

  return (stat);
 800528c:	68fb      	ldr	r3, [r7, #12]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4a07      	ldr	r2, [pc, #28]	; (80052c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80052a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	4a06      	ldr	r2, [pc, #24]	; (80052c8 <vApplicationGetIdleTaskMemory+0x30>)
 80052ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2280      	movs	r2, #128	; 0x80
 80052b4:	601a      	str	r2, [r3, #0]
}
 80052b6:	bf00      	nop
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	200000ac 	.word	0x200000ac
 80052c8:	20000108 	.word	0x20000108

080052cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4a07      	ldr	r2, [pc, #28]	; (80052f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80052dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	4a06      	ldr	r2, [pc, #24]	; (80052fc <vApplicationGetTimerTaskMemory+0x30>)
 80052e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052ea:	601a      	str	r2, [r3, #0]
}
 80052ec:	bf00      	nop
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	20000308 	.word	0x20000308
 80052fc:	20000364 	.word	0x20000364

08005300 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f103 0208 	add.w	r2, r3, #8
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f04f 32ff 	mov.w	r2, #4294967295
 8005318:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f103 0208 	add.w	r2, r3, #8
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f103 0208 	add.w	r2, r3, #8
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800535a:	b480      	push	{r7}
 800535c:	b085      	sub	sp, #20
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	601a      	str	r2, [r3, #0]
}
 8005396:	bf00      	nop
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053a2:	b480      	push	{r7}
 80053a4:	b085      	sub	sp, #20
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b8:	d103      	bne.n	80053c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	60fb      	str	r3, [r7, #12]
 80053c0:	e00c      	b.n	80053dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	3308      	adds	r3, #8
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	e002      	b.n	80053d0 <vListInsert+0x2e>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d2f6      	bcs.n	80053ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	601a      	str	r2, [r3, #0]
}
 8005408:	bf00      	nop
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6892      	ldr	r2, [r2, #8]
 800542a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	6852      	ldr	r2, [r2, #4]
 8005434:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	429a      	cmp	r2, r3
 800543e:	d103      	bne.n	8005448 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	1e5a      	subs	r2, r3, #1
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10a      	bne.n	8005492 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800547c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800548e:	bf00      	nop
 8005490:	e7fe      	b.n	8005490 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005492:	f002 f84f 	bl	8007534 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549e:	68f9      	ldr	r1, [r7, #12]
 80054a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054a2:	fb01 f303 	mul.w	r3, r1, r3
 80054a6:	441a      	add	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c2:	3b01      	subs	r3, #1
 80054c4:	68f9      	ldr	r1, [r7, #12]
 80054c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054c8:	fb01 f303 	mul.w	r3, r1, r3
 80054cc:	441a      	add	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	22ff      	movs	r2, #255	; 0xff
 80054d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	22ff      	movs	r2, #255	; 0xff
 80054de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d114      	bne.n	8005512 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d01a      	beq.n	8005526 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	3310      	adds	r3, #16
 80054f4:	4618      	mov	r0, r3
 80054f6:	f001 f903 	bl	8006700 <xTaskRemoveFromEventList>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d012      	beq.n	8005526 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005500:	4b0c      	ldr	r3, [pc, #48]	; (8005534 <xQueueGenericReset+0xcc>)
 8005502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	f3bf 8f6f 	isb	sy
 8005510:	e009      	b.n	8005526 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	3310      	adds	r3, #16
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff fef2 	bl	8005300 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	3324      	adds	r3, #36	; 0x24
 8005520:	4618      	mov	r0, r3
 8005522:	f7ff feed 	bl	8005300 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005526:	f002 f835 	bl	8007594 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800552a:	2301      	movs	r3, #1
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	e000ed04 	.word	0xe000ed04

08005538 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005538:	b580      	push	{r7, lr}
 800553a:	b08e      	sub	sp, #56	; 0x38
 800553c:	af02      	add	r7, sp, #8
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
 8005544:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10a      	bne.n	8005562 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800554c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005550:	f383 8811 	msr	BASEPRI, r3
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800555e:	bf00      	nop
 8005560:	e7fe      	b.n	8005560 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10a      	bne.n	800557e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556c:	f383 8811 	msr	BASEPRI, r3
 8005570:	f3bf 8f6f 	isb	sy
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
}
 800557a:	bf00      	nop
 800557c:	e7fe      	b.n	800557c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d002      	beq.n	800558a <xQueueGenericCreateStatic+0x52>
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <xQueueGenericCreateStatic+0x56>
 800558a:	2301      	movs	r3, #1
 800558c:	e000      	b.n	8005590 <xQueueGenericCreateStatic+0x58>
 800558e:	2300      	movs	r3, #0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10a      	bne.n	80055aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	623b      	str	r3, [r7, #32]
}
 80055a6:	bf00      	nop
 80055a8:	e7fe      	b.n	80055a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d102      	bne.n	80055b6 <xQueueGenericCreateStatic+0x7e>
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <xQueueGenericCreateStatic+0x82>
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <xQueueGenericCreateStatic+0x84>
 80055ba:	2300      	movs	r3, #0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10a      	bne.n	80055d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	61fb      	str	r3, [r7, #28]
}
 80055d2:	bf00      	nop
 80055d4:	e7fe      	b.n	80055d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80055d6:	2350      	movs	r3, #80	; 0x50
 80055d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2b50      	cmp	r3, #80	; 0x50
 80055de:	d00a      	beq.n	80055f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80055e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	61bb      	str	r3, [r7, #24]
}
 80055f2:	bf00      	nop
 80055f4:	e7fe      	b.n	80055f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80055f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80055fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00d      	beq.n	800561e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800560a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800560e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	4613      	mov	r3, r2
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	68b9      	ldr	r1, [r7, #8]
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 f805 	bl	8005628 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800561e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005620:	4618      	mov	r0, r3
 8005622:	3730      	adds	r7, #48	; 0x30
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
 8005634:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d103      	bne.n	8005644 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	e002      	b.n	800564a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005656:	2101      	movs	r1, #1
 8005658:	69b8      	ldr	r0, [r7, #24]
 800565a:	f7ff ff05 	bl	8005468 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	78fa      	ldrb	r2, [r7, #3]
 8005662:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005666:	bf00      	nop
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
	...

08005670 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b08e      	sub	sp, #56	; 0x38
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
 800567c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800567e:	2300      	movs	r3, #0
 8005680:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10a      	bne.n	80056a2 <xQueueGenericSend+0x32>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800569e:	bf00      	nop
 80056a0:	e7fe      	b.n	80056a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d103      	bne.n	80056b0 <xQueueGenericSend+0x40>
 80056a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <xQueueGenericSend+0x44>
 80056b0:	2301      	movs	r3, #1
 80056b2:	e000      	b.n	80056b6 <xQueueGenericSend+0x46>
 80056b4:	2300      	movs	r3, #0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10a      	bne.n	80056d0 <xQueueGenericSend+0x60>
	__asm volatile
 80056ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056cc:	bf00      	nop
 80056ce:	e7fe      	b.n	80056ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d103      	bne.n	80056de <xQueueGenericSend+0x6e>
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d101      	bne.n	80056e2 <xQueueGenericSend+0x72>
 80056de:	2301      	movs	r3, #1
 80056e0:	e000      	b.n	80056e4 <xQueueGenericSend+0x74>
 80056e2:	2300      	movs	r3, #0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10a      	bne.n	80056fe <xQueueGenericSend+0x8e>
	__asm volatile
 80056e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ec:	f383 8811 	msr	BASEPRI, r3
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	623b      	str	r3, [r7, #32]
}
 80056fa:	bf00      	nop
 80056fc:	e7fe      	b.n	80056fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056fe:	f001 f9bd 	bl	8006a7c <xTaskGetSchedulerState>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d102      	bne.n	800570e <xQueueGenericSend+0x9e>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <xQueueGenericSend+0xa2>
 800570e:	2301      	movs	r3, #1
 8005710:	e000      	b.n	8005714 <xQueueGenericSend+0xa4>
 8005712:	2300      	movs	r3, #0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10a      	bne.n	800572e <xQueueGenericSend+0xbe>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	61fb      	str	r3, [r7, #28]
}
 800572a:	bf00      	nop
 800572c:	e7fe      	b.n	800572c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800572e:	f001 ff01 	bl	8007534 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573a:	429a      	cmp	r2, r3
 800573c:	d302      	bcc.n	8005744 <xQueueGenericSend+0xd4>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b02      	cmp	r3, #2
 8005742:	d129      	bne.n	8005798 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	68b9      	ldr	r1, [r7, #8]
 8005748:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800574a:	f000 fa0b 	bl	8005b64 <prvCopyDataToQueue>
 800574e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005754:	2b00      	cmp	r3, #0
 8005756:	d010      	beq.n	800577a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575a:	3324      	adds	r3, #36	; 0x24
 800575c:	4618      	mov	r0, r3
 800575e:	f000 ffcf 	bl	8006700 <xTaskRemoveFromEventList>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d013      	beq.n	8005790 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005768:	4b3f      	ldr	r3, [pc, #252]	; (8005868 <xQueueGenericSend+0x1f8>)
 800576a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	e00a      	b.n	8005790 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800577a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577c:	2b00      	cmp	r3, #0
 800577e:	d007      	beq.n	8005790 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005780:	4b39      	ldr	r3, [pc, #228]	; (8005868 <xQueueGenericSend+0x1f8>)
 8005782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005790:	f001 ff00 	bl	8007594 <vPortExitCritical>
				return pdPASS;
 8005794:	2301      	movs	r3, #1
 8005796:	e063      	b.n	8005860 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d103      	bne.n	80057a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800579e:	f001 fef9 	bl	8007594 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80057a2:	2300      	movs	r3, #0
 80057a4:	e05c      	b.n	8005860 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d106      	bne.n	80057ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057ac:	f107 0314 	add.w	r3, r7, #20
 80057b0:	4618      	mov	r0, r3
 80057b2:	f001 f809 	bl	80067c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057b6:	2301      	movs	r3, #1
 80057b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057ba:	f001 feeb 	bl	8007594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057be:	f000 fd7b 	bl	80062b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057c2:	f001 feb7 	bl	8007534 <vPortEnterCritical>
 80057c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057cc:	b25b      	sxtb	r3, r3
 80057ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d2:	d103      	bne.n	80057dc <xQueueGenericSend+0x16c>
 80057d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057e2:	b25b      	sxtb	r3, r3
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e8:	d103      	bne.n	80057f2 <xQueueGenericSend+0x182>
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057f2:	f001 fecf 	bl	8007594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057f6:	1d3a      	adds	r2, r7, #4
 80057f8:	f107 0314 	add.w	r3, r7, #20
 80057fc:	4611      	mov	r1, r2
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 fff8 	bl	80067f4 <xTaskCheckForTimeOut>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d124      	bne.n	8005854 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800580a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800580c:	f000 faa2 	bl	8005d54 <prvIsQueueFull>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d018      	beq.n	8005848 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005818:	3310      	adds	r3, #16
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	4611      	mov	r1, r2
 800581e:	4618      	mov	r0, r3
 8005820:	f000 ff1e 	bl	8006660 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005824:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005826:	f000 fa2d 	bl	8005c84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800582a:	f000 fd53 	bl	80062d4 <xTaskResumeAll>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	f47f af7c 	bne.w	800572e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005836:	4b0c      	ldr	r3, [pc, #48]	; (8005868 <xQueueGenericSend+0x1f8>)
 8005838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	e772      	b.n	800572e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800584a:	f000 fa1b 	bl	8005c84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800584e:	f000 fd41 	bl	80062d4 <xTaskResumeAll>
 8005852:	e76c      	b.n	800572e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005854:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005856:	f000 fa15 	bl	8005c84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800585a:	f000 fd3b 	bl	80062d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800585e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005860:	4618      	mov	r0, r3
 8005862:	3738      	adds	r7, #56	; 0x38
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	e000ed04 	.word	0xe000ed04

0800586c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b090      	sub	sp, #64	; 0x40
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
 8005878:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800587e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10a      	bne.n	800589a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005896:	bf00      	nop
 8005898:	e7fe      	b.n	8005898 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d103      	bne.n	80058a8 <xQueueGenericSendFromISR+0x3c>
 80058a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <xQueueGenericSendFromISR+0x40>
 80058a8:	2301      	movs	r3, #1
 80058aa:	e000      	b.n	80058ae <xQueueGenericSendFromISR+0x42>
 80058ac:	2300      	movs	r3, #0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10a      	bne.n	80058c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80058b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058c4:	bf00      	nop
 80058c6:	e7fe      	b.n	80058c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d103      	bne.n	80058d6 <xQueueGenericSendFromISR+0x6a>
 80058ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d101      	bne.n	80058da <xQueueGenericSendFromISR+0x6e>
 80058d6:	2301      	movs	r3, #1
 80058d8:	e000      	b.n	80058dc <xQueueGenericSendFromISR+0x70>
 80058da:	2300      	movs	r3, #0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10a      	bne.n	80058f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	623b      	str	r3, [r7, #32]
}
 80058f2:	bf00      	nop
 80058f4:	e7fe      	b.n	80058f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058f6:	f001 feff 	bl	80076f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80058fa:	f3ef 8211 	mrs	r2, BASEPRI
 80058fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	61fa      	str	r2, [r7, #28]
 8005910:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005912:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005914:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800591a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591e:	429a      	cmp	r2, r3
 8005920:	d302      	bcc.n	8005928 <xQueueGenericSendFromISR+0xbc>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2b02      	cmp	r3, #2
 8005926:	d12f      	bne.n	8005988 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800592e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005936:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	68b9      	ldr	r1, [r7, #8]
 800593c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800593e:	f000 f911 	bl	8005b64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005942:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594a:	d112      	bne.n	8005972 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800594c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	2b00      	cmp	r3, #0
 8005952:	d016      	beq.n	8005982 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005956:	3324      	adds	r3, #36	; 0x24
 8005958:	4618      	mov	r0, r3
 800595a:	f000 fed1 	bl	8006700 <xTaskRemoveFromEventList>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00e      	beq.n	8005982 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00b      	beq.n	8005982 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	e007      	b.n	8005982 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005972:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005976:	3301      	adds	r3, #1
 8005978:	b2db      	uxtb	r3, r3
 800597a:	b25a      	sxtb	r2, r3
 800597c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005982:	2301      	movs	r3, #1
 8005984:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005986:	e001      	b.n	800598c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005988:	2300      	movs	r3, #0
 800598a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800598c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800598e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005996:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800599a:	4618      	mov	r0, r3
 800599c:	3740      	adds	r7, #64	; 0x40
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
	...

080059a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b08c      	sub	sp, #48	; 0x30
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059b0:	2300      	movs	r3, #0
 80059b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10a      	bne.n	80059d4 <xQueueReceive+0x30>
	__asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	623b      	str	r3, [r7, #32]
}
 80059d0:	bf00      	nop
 80059d2:	e7fe      	b.n	80059d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d103      	bne.n	80059e2 <xQueueReceive+0x3e>
 80059da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <xQueueReceive+0x42>
 80059e2:	2301      	movs	r3, #1
 80059e4:	e000      	b.n	80059e8 <xQueueReceive+0x44>
 80059e6:	2300      	movs	r3, #0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10a      	bne.n	8005a02 <xQueueReceive+0x5e>
	__asm volatile
 80059ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f0:	f383 8811 	msr	BASEPRI, r3
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	61fb      	str	r3, [r7, #28]
}
 80059fe:	bf00      	nop
 8005a00:	e7fe      	b.n	8005a00 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a02:	f001 f83b 	bl	8006a7c <xTaskGetSchedulerState>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d102      	bne.n	8005a12 <xQueueReceive+0x6e>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <xQueueReceive+0x72>
 8005a12:	2301      	movs	r3, #1
 8005a14:	e000      	b.n	8005a18 <xQueueReceive+0x74>
 8005a16:	2300      	movs	r3, #0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10a      	bne.n	8005a32 <xQueueReceive+0x8e>
	__asm volatile
 8005a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a20:	f383 8811 	msr	BASEPRI, r3
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	61bb      	str	r3, [r7, #24]
}
 8005a2e:	bf00      	nop
 8005a30:	e7fe      	b.n	8005a30 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a32:	f001 fd7f 	bl	8007534 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d01f      	beq.n	8005a82 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a42:	68b9      	ldr	r1, [r7, #8]
 8005a44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a46:	f000 f8f7 	bl	8005c38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	1e5a      	subs	r2, r3, #1
 8005a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a50:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00f      	beq.n	8005a7a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5c:	3310      	adds	r3, #16
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 fe4e 	bl	8006700 <xTaskRemoveFromEventList>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d007      	beq.n	8005a7a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a6a:	4b3d      	ldr	r3, [pc, #244]	; (8005b60 <xQueueReceive+0x1bc>)
 8005a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	f3bf 8f4f 	dsb	sy
 8005a76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a7a:	f001 fd8b 	bl	8007594 <vPortExitCritical>
				return pdPASS;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e069      	b.n	8005b56 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d103      	bne.n	8005a90 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a88:	f001 fd84 	bl	8007594 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	e062      	b.n	8005b56 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d106      	bne.n	8005aa4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a96:	f107 0310 	add.w	r3, r7, #16
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 fe94 	bl	80067c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005aa4:	f001 fd76 	bl	8007594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005aa8:	f000 fc06 	bl	80062b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005aac:	f001 fd42 	bl	8007534 <vPortEnterCritical>
 8005ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ab6:	b25b      	sxtb	r3, r3
 8005ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005abc:	d103      	bne.n	8005ac6 <xQueueReceive+0x122>
 8005abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005acc:	b25b      	sxtb	r3, r3
 8005ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad2:	d103      	bne.n	8005adc <xQueueReceive+0x138>
 8005ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005adc:	f001 fd5a 	bl	8007594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ae0:	1d3a      	adds	r2, r7, #4
 8005ae2:	f107 0310 	add.w	r3, r7, #16
 8005ae6:	4611      	mov	r1, r2
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 fe83 	bl	80067f4 <xTaskCheckForTimeOut>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d123      	bne.n	8005b3c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005af6:	f000 f917 	bl	8005d28 <prvIsQueueEmpty>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d017      	beq.n	8005b30 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b02:	3324      	adds	r3, #36	; 0x24
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	4611      	mov	r1, r2
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f000 fda9 	bl	8006660 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b10:	f000 f8b8 	bl	8005c84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b14:	f000 fbde 	bl	80062d4 <xTaskResumeAll>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d189      	bne.n	8005a32 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b1e:	4b10      	ldr	r3, [pc, #64]	; (8005b60 <xQueueReceive+0x1bc>)
 8005b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	e780      	b.n	8005a32 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b32:	f000 f8a7 	bl	8005c84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b36:	f000 fbcd 	bl	80062d4 <xTaskResumeAll>
 8005b3a:	e77a      	b.n	8005a32 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b3e:	f000 f8a1 	bl	8005c84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b42:	f000 fbc7 	bl	80062d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b48:	f000 f8ee 	bl	8005d28 <prvIsQueueEmpty>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f43f af6f 	beq.w	8005a32 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3730      	adds	r7, #48	; 0x30
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	e000ed04 	.word	0xe000ed04

08005b64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b70:	2300      	movs	r3, #0
 8005b72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10d      	bne.n	8005b9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d14d      	bne.n	8005c26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 ff92 	bl	8006ab8 <xTaskPriorityDisinherit>
 8005b94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	609a      	str	r2, [r3, #8]
 8005b9c:	e043      	b.n	8005c26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d119      	bne.n	8005bd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6858      	ldr	r0, [r3, #4]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bac:	461a      	mov	r2, r3
 8005bae:	68b9      	ldr	r1, [r7, #8]
 8005bb0:	f001 fefe 	bl	80079b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbc:	441a      	add	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d32b      	bcc.n	8005c26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	605a      	str	r2, [r3, #4]
 8005bd6:	e026      	b.n	8005c26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	68d8      	ldr	r0, [r3, #12]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	461a      	mov	r2, r3
 8005be2:	68b9      	ldr	r1, [r7, #8]
 8005be4:	f001 fee4 	bl	80079b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	425b      	negs	r3, r3
 8005bf2:	441a      	add	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	68da      	ldr	r2, [r3, #12]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d207      	bcs.n	8005c14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0c:	425b      	negs	r3, r3
 8005c0e:	441a      	add	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d105      	bne.n	8005c26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	1c5a      	adds	r2, r3, #1
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c2e:	697b      	ldr	r3, [r7, #20]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d018      	beq.n	8005c7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	441a      	add	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d303      	bcc.n	8005c6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68d9      	ldr	r1, [r3, #12]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c74:	461a      	mov	r2, r3
 8005c76:	6838      	ldr	r0, [r7, #0]
 8005c78:	f001 fe9a 	bl	80079b0 <memcpy>
	}
}
 8005c7c:	bf00      	nop
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c8c:	f001 fc52 	bl	8007534 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c98:	e011      	b.n	8005cbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d012      	beq.n	8005cc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	3324      	adds	r3, #36	; 0x24
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 fd2a 	bl	8006700 <xTaskRemoveFromEventList>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005cb2:	f000 fe01 	bl	80068b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005cb6:	7bfb      	ldrb	r3, [r7, #15]
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	dce9      	bgt.n	8005c9a <prvUnlockQueue+0x16>
 8005cc6:	e000      	b.n	8005cca <prvUnlockQueue+0x46>
					break;
 8005cc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	22ff      	movs	r2, #255	; 0xff
 8005cce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005cd2:	f001 fc5f 	bl	8007594 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005cd6:	f001 fc2d 	bl	8007534 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ce0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ce2:	e011      	b.n	8005d08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d012      	beq.n	8005d12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	3310      	adds	r3, #16
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 fd05 	bl	8006700 <xTaskRemoveFromEventList>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005cfc:	f000 fddc 	bl	80068b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d00:	7bbb      	ldrb	r3, [r7, #14]
 8005d02:	3b01      	subs	r3, #1
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	dce9      	bgt.n	8005ce4 <prvUnlockQueue+0x60>
 8005d10:	e000      	b.n	8005d14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	22ff      	movs	r2, #255	; 0xff
 8005d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d1c:	f001 fc3a 	bl	8007594 <vPortExitCritical>
}
 8005d20:	bf00      	nop
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d30:	f001 fc00 	bl	8007534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d102      	bne.n	8005d42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	60fb      	str	r3, [r7, #12]
 8005d40:	e001      	b.n	8005d46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d46:	f001 fc25 	bl	8007594 <vPortExitCritical>

	return xReturn;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d5c:	f001 fbea 	bl	8007534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d102      	bne.n	8005d72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	60fb      	str	r3, [r7, #12]
 8005d70:	e001      	b.n	8005d76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d76:	f001 fc0d 	bl	8007594 <vPortExitCritical>

	return xReturn;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	e014      	b.n	8005dbe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005d94:	4a0f      	ldr	r2, [pc, #60]	; (8005dd4 <vQueueAddToRegistry+0x50>)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10b      	bne.n	8005db8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005da0:	490c      	ldr	r1, [pc, #48]	; (8005dd4 <vQueueAddToRegistry+0x50>)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005daa:	4a0a      	ldr	r2, [pc, #40]	; (8005dd4 <vQueueAddToRegistry+0x50>)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	4413      	add	r3, r2
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005db6:	e006      	b.n	8005dc6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b07      	cmp	r3, #7
 8005dc2:	d9e7      	bls.n	8005d94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005dc4:	bf00      	nop
 8005dc6:	bf00      	nop
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	200085b4 	.word	0x200085b4

08005dd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005de8:	f001 fba4 	bl	8007534 <vPortEnterCritical>
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005df2:	b25b      	sxtb	r3, r3
 8005df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df8:	d103      	bne.n	8005e02 <vQueueWaitForMessageRestricted+0x2a>
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e08:	b25b      	sxtb	r3, r3
 8005e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0e:	d103      	bne.n	8005e18 <vQueueWaitForMessageRestricted+0x40>
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e18:	f001 fbbc 	bl	8007594 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d106      	bne.n	8005e32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	3324      	adds	r3, #36	; 0x24
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	68b9      	ldr	r1, [r7, #8]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f000 fc3b 	bl	80066a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e32:	6978      	ldr	r0, [r7, #20]
 8005e34:	f7ff ff26 	bl	8005c84 <prvUnlockQueue>
	}
 8005e38:	bf00      	nop
 8005e3a:	3718      	adds	r7, #24
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08e      	sub	sp, #56	; 0x38
 8005e44:	af04      	add	r7, sp, #16
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
 8005e4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10a      	bne.n	8005e6a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e58:	f383 8811 	msr	BASEPRI, r3
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	623b      	str	r3, [r7, #32]
}
 8005e66:	bf00      	nop
 8005e68:	e7fe      	b.n	8005e68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10a      	bne.n	8005e86 <xTaskCreateStatic+0x46>
	__asm volatile
 8005e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	61fb      	str	r3, [r7, #28]
}
 8005e82:	bf00      	nop
 8005e84:	e7fe      	b.n	8005e84 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e86:	235c      	movs	r3, #92	; 0x5c
 8005e88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	2b5c      	cmp	r3, #92	; 0x5c
 8005e8e:	d00a      	beq.n	8005ea6 <xTaskCreateStatic+0x66>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	61bb      	str	r3, [r7, #24]
}
 8005ea2:	bf00      	nop
 8005ea4:	e7fe      	b.n	8005ea4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ea6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d01e      	beq.n	8005eec <xTaskCreateStatic+0xac>
 8005eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d01b      	beq.n	8005eec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ebc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	2202      	movs	r2, #2
 8005ec2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	9303      	str	r3, [sp, #12]
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	9302      	str	r3, [sp, #8]
 8005ece:	f107 0314 	add.w	r3, r7, #20
 8005ed2:	9301      	str	r3, [sp, #4]
 8005ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	68b9      	ldr	r1, [r7, #8]
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 f850 	bl	8005f84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ee4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ee6:	f000 f8dd 	bl	80060a4 <prvAddNewTaskToReadyList>
 8005eea:	e001      	b.n	8005ef0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005eec:	2300      	movs	r3, #0
 8005eee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ef0:	697b      	ldr	r3, [r7, #20]
	}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3728      	adds	r7, #40	; 0x28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b08c      	sub	sp, #48	; 0x30
 8005efe:	af04      	add	r7, sp, #16
 8005f00:	60f8      	str	r0, [r7, #12]
 8005f02:	60b9      	str	r1, [r7, #8]
 8005f04:	603b      	str	r3, [r7, #0]
 8005f06:	4613      	mov	r3, r2
 8005f08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f0a:	88fb      	ldrh	r3, [r7, #6]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f001 fc32 	bl	8007778 <pvPortMalloc>
 8005f14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00e      	beq.n	8005f3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f1c:	205c      	movs	r0, #92	; 0x5c
 8005f1e:	f001 fc2b 	bl	8007778 <pvPortMalloc>
 8005f22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	631a      	str	r2, [r3, #48]	; 0x30
 8005f30:	e005      	b.n	8005f3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f32:	6978      	ldr	r0, [r7, #20]
 8005f34:	f001 fcae 	bl	8007894 <vPortFree>
 8005f38:	e001      	b.n	8005f3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d017      	beq.n	8005f74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f4c:	88fa      	ldrh	r2, [r7, #6]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	9303      	str	r3, [sp, #12]
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	9302      	str	r3, [sp, #8]
 8005f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f58:	9301      	str	r3, [sp, #4]
 8005f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	68b9      	ldr	r1, [r7, #8]
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 f80e 	bl	8005f84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f68:	69f8      	ldr	r0, [r7, #28]
 8005f6a:	f000 f89b 	bl	80060a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	61bb      	str	r3, [r7, #24]
 8005f72:	e002      	b.n	8005f7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f74:	f04f 33ff 	mov.w	r3, #4294967295
 8005f78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f7a:	69bb      	ldr	r3, [r7, #24]
	}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3720      	adds	r7, #32
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	21a5      	movs	r1, #165	; 0xa5
 8005f9e:	f001 fd15 	bl	80079cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fac:	3b01      	subs	r3, #1
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	f023 0307 	bic.w	r3, r3, #7
 8005fba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00a      	beq.n	8005fdc <prvInitialiseNewTask+0x58>
	__asm volatile
 8005fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fca:	f383 8811 	msr	BASEPRI, r3
 8005fce:	f3bf 8f6f 	isb	sy
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	617b      	str	r3, [r7, #20]
}
 8005fd8:	bf00      	nop
 8005fda:	e7fe      	b.n	8005fda <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d01f      	beq.n	8006022 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61fb      	str	r3, [r7, #28]
 8005fe6:	e012      	b.n	800600e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	4413      	add	r3, r2
 8005fee:	7819      	ldrb	r1, [r3, #0]
 8005ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	3334      	adds	r3, #52	; 0x34
 8005ff8:	460a      	mov	r2, r1
 8005ffa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	4413      	add	r3, r2
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d006      	beq.n	8006016 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	3301      	adds	r3, #1
 800600c:	61fb      	str	r3, [r7, #28]
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	2b0f      	cmp	r3, #15
 8006012:	d9e9      	bls.n	8005fe8 <prvInitialiseNewTask+0x64>
 8006014:	e000      	b.n	8006018 <prvInitialiseNewTask+0x94>
			{
				break;
 8006016:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006020:	e003      	b.n	800602a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602c:	2b37      	cmp	r3, #55	; 0x37
 800602e:	d901      	bls.n	8006034 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006030:	2337      	movs	r3, #55	; 0x37
 8006032:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006038:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800603e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006042:	2200      	movs	r2, #0
 8006044:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006048:	3304      	adds	r3, #4
 800604a:	4618      	mov	r0, r3
 800604c:	f7ff f978 	bl	8005340 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	3318      	adds	r3, #24
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff f973 	bl	8005340 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800605e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006062:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006068:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800606a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800606e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006072:	2200      	movs	r2, #0
 8006074:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	68f9      	ldr	r1, [r7, #12]
 8006082:	69b8      	ldr	r0, [r7, #24]
 8006084:	f001 f928 	bl	80072d8 <pxPortInitialiseStack>
 8006088:	4602      	mov	r2, r0
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800608e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006098:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800609a:	bf00      	nop
 800609c:	3720      	adds	r7, #32
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
	...

080060a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060ac:	f001 fa42 	bl	8007534 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060b0:	4b2d      	ldr	r3, [pc, #180]	; (8006168 <prvAddNewTaskToReadyList+0xc4>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3301      	adds	r3, #1
 80060b6:	4a2c      	ldr	r2, [pc, #176]	; (8006168 <prvAddNewTaskToReadyList+0xc4>)
 80060b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060ba:	4b2c      	ldr	r3, [pc, #176]	; (800616c <prvAddNewTaskToReadyList+0xc8>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d109      	bne.n	80060d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060c2:	4a2a      	ldr	r2, [pc, #168]	; (800616c <prvAddNewTaskToReadyList+0xc8>)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060c8:	4b27      	ldr	r3, [pc, #156]	; (8006168 <prvAddNewTaskToReadyList+0xc4>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d110      	bne.n	80060f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060d0:	f000 fc16 	bl	8006900 <prvInitialiseTaskLists>
 80060d4:	e00d      	b.n	80060f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060d6:	4b26      	ldr	r3, [pc, #152]	; (8006170 <prvAddNewTaskToReadyList+0xcc>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d109      	bne.n	80060f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060de:	4b23      	ldr	r3, [pc, #140]	; (800616c <prvAddNewTaskToReadyList+0xc8>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d802      	bhi.n	80060f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80060ec:	4a1f      	ldr	r2, [pc, #124]	; (800616c <prvAddNewTaskToReadyList+0xc8>)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80060f2:	4b20      	ldr	r3, [pc, #128]	; (8006174 <prvAddNewTaskToReadyList+0xd0>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3301      	adds	r3, #1
 80060f8:	4a1e      	ldr	r2, [pc, #120]	; (8006174 <prvAddNewTaskToReadyList+0xd0>)
 80060fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80060fc:	4b1d      	ldr	r3, [pc, #116]	; (8006174 <prvAddNewTaskToReadyList+0xd0>)
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006108:	4b1b      	ldr	r3, [pc, #108]	; (8006178 <prvAddNewTaskToReadyList+0xd4>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	429a      	cmp	r2, r3
 800610e:	d903      	bls.n	8006118 <prvAddNewTaskToReadyList+0x74>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006114:	4a18      	ldr	r2, [pc, #96]	; (8006178 <prvAddNewTaskToReadyList+0xd4>)
 8006116:	6013      	str	r3, [r2, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800611c:	4613      	mov	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4a15      	ldr	r2, [pc, #84]	; (800617c <prvAddNewTaskToReadyList+0xd8>)
 8006126:	441a      	add	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	3304      	adds	r3, #4
 800612c:	4619      	mov	r1, r3
 800612e:	4610      	mov	r0, r2
 8006130:	f7ff f913 	bl	800535a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006134:	f001 fa2e 	bl	8007594 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006138:	4b0d      	ldr	r3, [pc, #52]	; (8006170 <prvAddNewTaskToReadyList+0xcc>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00e      	beq.n	800615e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006140:	4b0a      	ldr	r3, [pc, #40]	; (800616c <prvAddNewTaskToReadyList+0xc8>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614a:	429a      	cmp	r2, r3
 800614c:	d207      	bcs.n	800615e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800614e:	4b0c      	ldr	r3, [pc, #48]	; (8006180 <prvAddNewTaskToReadyList+0xdc>)
 8006150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800615e:	bf00      	nop
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	20000c38 	.word	0x20000c38
 800616c:	20000764 	.word	0x20000764
 8006170:	20000c44 	.word	0x20000c44
 8006174:	20000c54 	.word	0x20000c54
 8006178:	20000c40 	.word	0x20000c40
 800617c:	20000768 	.word	0x20000768
 8006180:	e000ed04 	.word	0xe000ed04

08006184 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800618c:	2300      	movs	r3, #0
 800618e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d017      	beq.n	80061c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006196:	4b13      	ldr	r3, [pc, #76]	; (80061e4 <vTaskDelay+0x60>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00a      	beq.n	80061b4 <vTaskDelay+0x30>
	__asm volatile
 800619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	60bb      	str	r3, [r7, #8]
}
 80061b0:	bf00      	nop
 80061b2:	e7fe      	b.n	80061b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80061b4:	f000 f880 	bl	80062b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061b8:	2100      	movs	r1, #0
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 fcea 	bl	8006b94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061c0:	f000 f888 	bl	80062d4 <xTaskResumeAll>
 80061c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d107      	bne.n	80061dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80061cc:	4b06      	ldr	r3, [pc, #24]	; (80061e8 <vTaskDelay+0x64>)
 80061ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061dc:	bf00      	nop
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	20000c60 	.word	0x20000c60
 80061e8:	e000ed04 	.word	0xe000ed04

080061ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08a      	sub	sp, #40	; 0x28
 80061f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80061f6:	2300      	movs	r3, #0
 80061f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80061fa:	463a      	mov	r2, r7
 80061fc:	1d39      	adds	r1, r7, #4
 80061fe:	f107 0308 	add.w	r3, r7, #8
 8006202:	4618      	mov	r0, r3
 8006204:	f7ff f848 	bl	8005298 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006208:	6839      	ldr	r1, [r7, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	9202      	str	r2, [sp, #8]
 8006210:	9301      	str	r3, [sp, #4]
 8006212:	2300      	movs	r3, #0
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	2300      	movs	r3, #0
 8006218:	460a      	mov	r2, r1
 800621a:	4921      	ldr	r1, [pc, #132]	; (80062a0 <vTaskStartScheduler+0xb4>)
 800621c:	4821      	ldr	r0, [pc, #132]	; (80062a4 <vTaskStartScheduler+0xb8>)
 800621e:	f7ff fe0f 	bl	8005e40 <xTaskCreateStatic>
 8006222:	4603      	mov	r3, r0
 8006224:	4a20      	ldr	r2, [pc, #128]	; (80062a8 <vTaskStartScheduler+0xbc>)
 8006226:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006228:	4b1f      	ldr	r3, [pc, #124]	; (80062a8 <vTaskStartScheduler+0xbc>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d002      	beq.n	8006236 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006230:	2301      	movs	r3, #1
 8006232:	617b      	str	r3, [r7, #20]
 8006234:	e001      	b.n	800623a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006236:	2300      	movs	r3, #0
 8006238:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d102      	bne.n	8006246 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006240:	f000 fcfc 	bl	8006c3c <xTimerCreateTimerTask>
 8006244:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d116      	bne.n	800627a <vTaskStartScheduler+0x8e>
	__asm volatile
 800624c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	613b      	str	r3, [r7, #16]
}
 800625e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006260:	4b12      	ldr	r3, [pc, #72]	; (80062ac <vTaskStartScheduler+0xc0>)
 8006262:	f04f 32ff 	mov.w	r2, #4294967295
 8006266:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006268:	4b11      	ldr	r3, [pc, #68]	; (80062b0 <vTaskStartScheduler+0xc4>)
 800626a:	2201      	movs	r2, #1
 800626c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800626e:	4b11      	ldr	r3, [pc, #68]	; (80062b4 <vTaskStartScheduler+0xc8>)
 8006270:	2200      	movs	r2, #0
 8006272:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006274:	f001 f8bc 	bl	80073f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006278:	e00e      	b.n	8006298 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006280:	d10a      	bne.n	8006298 <vTaskStartScheduler+0xac>
	__asm volatile
 8006282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	60fb      	str	r3, [r7, #12]
}
 8006294:	bf00      	nop
 8006296:	e7fe      	b.n	8006296 <vTaskStartScheduler+0xaa>
}
 8006298:	bf00      	nop
 800629a:	3718      	adds	r7, #24
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	080082a8 	.word	0x080082a8
 80062a4:	080068d1 	.word	0x080068d1
 80062a8:	20000c5c 	.word	0x20000c5c
 80062ac:	20000c58 	.word	0x20000c58
 80062b0:	20000c44 	.word	0x20000c44
 80062b4:	20000c3c 	.word	0x20000c3c

080062b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062b8:	b480      	push	{r7}
 80062ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80062bc:	4b04      	ldr	r3, [pc, #16]	; (80062d0 <vTaskSuspendAll+0x18>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3301      	adds	r3, #1
 80062c2:	4a03      	ldr	r2, [pc, #12]	; (80062d0 <vTaskSuspendAll+0x18>)
 80062c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80062c6:	bf00      	nop
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	20000c60 	.word	0x20000c60

080062d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062da:	2300      	movs	r3, #0
 80062dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062de:	2300      	movs	r3, #0
 80062e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062e2:	4b42      	ldr	r3, [pc, #264]	; (80063ec <xTaskResumeAll+0x118>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10a      	bne.n	8006300 <xTaskResumeAll+0x2c>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	603b      	str	r3, [r7, #0]
}
 80062fc:	bf00      	nop
 80062fe:	e7fe      	b.n	80062fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006300:	f001 f918 	bl	8007534 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006304:	4b39      	ldr	r3, [pc, #228]	; (80063ec <xTaskResumeAll+0x118>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3b01      	subs	r3, #1
 800630a:	4a38      	ldr	r2, [pc, #224]	; (80063ec <xTaskResumeAll+0x118>)
 800630c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800630e:	4b37      	ldr	r3, [pc, #220]	; (80063ec <xTaskResumeAll+0x118>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d162      	bne.n	80063dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006316:	4b36      	ldr	r3, [pc, #216]	; (80063f0 <xTaskResumeAll+0x11c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d05e      	beq.n	80063dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800631e:	e02f      	b.n	8006380 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006320:	4b34      	ldr	r3, [pc, #208]	; (80063f4 <xTaskResumeAll+0x120>)
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	3318      	adds	r3, #24
 800632c:	4618      	mov	r0, r3
 800632e:	f7ff f871 	bl	8005414 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	3304      	adds	r3, #4
 8006336:	4618      	mov	r0, r3
 8006338:	f7ff f86c 	bl	8005414 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006340:	4b2d      	ldr	r3, [pc, #180]	; (80063f8 <xTaskResumeAll+0x124>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	429a      	cmp	r2, r3
 8006346:	d903      	bls.n	8006350 <xTaskResumeAll+0x7c>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634c:	4a2a      	ldr	r2, [pc, #168]	; (80063f8 <xTaskResumeAll+0x124>)
 800634e:	6013      	str	r3, [r2, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006354:	4613      	mov	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4a27      	ldr	r2, [pc, #156]	; (80063fc <xTaskResumeAll+0x128>)
 800635e:	441a      	add	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	3304      	adds	r3, #4
 8006364:	4619      	mov	r1, r3
 8006366:	4610      	mov	r0, r2
 8006368:	f7fe fff7 	bl	800535a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006370:	4b23      	ldr	r3, [pc, #140]	; (8006400 <xTaskResumeAll+0x12c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006376:	429a      	cmp	r2, r3
 8006378:	d302      	bcc.n	8006380 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800637a:	4b22      	ldr	r3, [pc, #136]	; (8006404 <xTaskResumeAll+0x130>)
 800637c:	2201      	movs	r2, #1
 800637e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006380:	4b1c      	ldr	r3, [pc, #112]	; (80063f4 <xTaskResumeAll+0x120>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1cb      	bne.n	8006320 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800638e:	f000 fb55 	bl	8006a3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006392:	4b1d      	ldr	r3, [pc, #116]	; (8006408 <xTaskResumeAll+0x134>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d010      	beq.n	80063c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800639e:	f000 f847 	bl	8006430 <xTaskIncrementTick>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80063a8:	4b16      	ldr	r3, [pc, #88]	; (8006404 <xTaskResumeAll+0x130>)
 80063aa:	2201      	movs	r2, #1
 80063ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1f1      	bne.n	800639e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80063ba:	4b13      	ldr	r3, [pc, #76]	; (8006408 <xTaskResumeAll+0x134>)
 80063bc:	2200      	movs	r2, #0
 80063be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063c0:	4b10      	ldr	r3, [pc, #64]	; (8006404 <xTaskResumeAll+0x130>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d009      	beq.n	80063dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063c8:	2301      	movs	r3, #1
 80063ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063cc:	4b0f      	ldr	r3, [pc, #60]	; (800640c <xTaskResumeAll+0x138>)
 80063ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	f3bf 8f4f 	dsb	sy
 80063d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063dc:	f001 f8da 	bl	8007594 <vPortExitCritical>

	return xAlreadyYielded;
 80063e0:	68bb      	ldr	r3, [r7, #8]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000c60 	.word	0x20000c60
 80063f0:	20000c38 	.word	0x20000c38
 80063f4:	20000bf8 	.word	0x20000bf8
 80063f8:	20000c40 	.word	0x20000c40
 80063fc:	20000768 	.word	0x20000768
 8006400:	20000764 	.word	0x20000764
 8006404:	20000c4c 	.word	0x20000c4c
 8006408:	20000c48 	.word	0x20000c48
 800640c:	e000ed04 	.word	0xe000ed04

08006410 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006416:	4b05      	ldr	r3, [pc, #20]	; (800642c <xTaskGetTickCount+0x1c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800641c:	687b      	ldr	r3, [r7, #4]
}
 800641e:	4618      	mov	r0, r3
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	20000c3c 	.word	0x20000c3c

08006430 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006436:	2300      	movs	r3, #0
 8006438:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800643a:	4b4f      	ldr	r3, [pc, #316]	; (8006578 <xTaskIncrementTick+0x148>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	f040 808f 	bne.w	8006562 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006444:	4b4d      	ldr	r3, [pc, #308]	; (800657c <xTaskIncrementTick+0x14c>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3301      	adds	r3, #1
 800644a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800644c:	4a4b      	ldr	r2, [pc, #300]	; (800657c <xTaskIncrementTick+0x14c>)
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d120      	bne.n	800649a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006458:	4b49      	ldr	r3, [pc, #292]	; (8006580 <xTaskIncrementTick+0x150>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <xTaskIncrementTick+0x48>
	__asm volatile
 8006462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	603b      	str	r3, [r7, #0]
}
 8006474:	bf00      	nop
 8006476:	e7fe      	b.n	8006476 <xTaskIncrementTick+0x46>
 8006478:	4b41      	ldr	r3, [pc, #260]	; (8006580 <xTaskIncrementTick+0x150>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	60fb      	str	r3, [r7, #12]
 800647e:	4b41      	ldr	r3, [pc, #260]	; (8006584 <xTaskIncrementTick+0x154>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a3f      	ldr	r2, [pc, #252]	; (8006580 <xTaskIncrementTick+0x150>)
 8006484:	6013      	str	r3, [r2, #0]
 8006486:	4a3f      	ldr	r2, [pc, #252]	; (8006584 <xTaskIncrementTick+0x154>)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6013      	str	r3, [r2, #0]
 800648c:	4b3e      	ldr	r3, [pc, #248]	; (8006588 <xTaskIncrementTick+0x158>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3301      	adds	r3, #1
 8006492:	4a3d      	ldr	r2, [pc, #244]	; (8006588 <xTaskIncrementTick+0x158>)
 8006494:	6013      	str	r3, [r2, #0]
 8006496:	f000 fad1 	bl	8006a3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800649a:	4b3c      	ldr	r3, [pc, #240]	; (800658c <xTaskIncrementTick+0x15c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d349      	bcc.n	8006538 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064a4:	4b36      	ldr	r3, [pc, #216]	; (8006580 <xTaskIncrementTick+0x150>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d104      	bne.n	80064b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064ae:	4b37      	ldr	r3, [pc, #220]	; (800658c <xTaskIncrementTick+0x15c>)
 80064b0:	f04f 32ff 	mov.w	r2, #4294967295
 80064b4:	601a      	str	r2, [r3, #0]
					break;
 80064b6:	e03f      	b.n	8006538 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064b8:	4b31      	ldr	r3, [pc, #196]	; (8006580 <xTaskIncrementTick+0x150>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d203      	bcs.n	80064d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80064d0:	4a2e      	ldr	r2, [pc, #184]	; (800658c <xTaskIncrementTick+0x15c>)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80064d6:	e02f      	b.n	8006538 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	3304      	adds	r3, #4
 80064dc:	4618      	mov	r0, r3
 80064de:	f7fe ff99 	bl	8005414 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d004      	beq.n	80064f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	3318      	adds	r3, #24
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fe ff90 	bl	8005414 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f8:	4b25      	ldr	r3, [pc, #148]	; (8006590 <xTaskIncrementTick+0x160>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d903      	bls.n	8006508 <xTaskIncrementTick+0xd8>
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006504:	4a22      	ldr	r2, [pc, #136]	; (8006590 <xTaskIncrementTick+0x160>)
 8006506:	6013      	str	r3, [r2, #0]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800650c:	4613      	mov	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4a1f      	ldr	r2, [pc, #124]	; (8006594 <xTaskIncrementTick+0x164>)
 8006516:	441a      	add	r2, r3
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	3304      	adds	r3, #4
 800651c:	4619      	mov	r1, r3
 800651e:	4610      	mov	r0, r2
 8006520:	f7fe ff1b 	bl	800535a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006528:	4b1b      	ldr	r3, [pc, #108]	; (8006598 <xTaskIncrementTick+0x168>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652e:	429a      	cmp	r2, r3
 8006530:	d3b8      	bcc.n	80064a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006532:	2301      	movs	r3, #1
 8006534:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006536:	e7b5      	b.n	80064a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006538:	4b17      	ldr	r3, [pc, #92]	; (8006598 <xTaskIncrementTick+0x168>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800653e:	4915      	ldr	r1, [pc, #84]	; (8006594 <xTaskIncrementTick+0x164>)
 8006540:	4613      	mov	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	440b      	add	r3, r1
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d901      	bls.n	8006554 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006550:	2301      	movs	r3, #1
 8006552:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006554:	4b11      	ldr	r3, [pc, #68]	; (800659c <xTaskIncrementTick+0x16c>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d007      	beq.n	800656c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800655c:	2301      	movs	r3, #1
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	e004      	b.n	800656c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006562:	4b0f      	ldr	r3, [pc, #60]	; (80065a0 <xTaskIncrementTick+0x170>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3301      	adds	r3, #1
 8006568:	4a0d      	ldr	r2, [pc, #52]	; (80065a0 <xTaskIncrementTick+0x170>)
 800656a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800656c:	697b      	ldr	r3, [r7, #20]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3718      	adds	r7, #24
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	20000c60 	.word	0x20000c60
 800657c:	20000c3c 	.word	0x20000c3c
 8006580:	20000bf0 	.word	0x20000bf0
 8006584:	20000bf4 	.word	0x20000bf4
 8006588:	20000c50 	.word	0x20000c50
 800658c:	20000c58 	.word	0x20000c58
 8006590:	20000c40 	.word	0x20000c40
 8006594:	20000768 	.word	0x20000768
 8006598:	20000764 	.word	0x20000764
 800659c:	20000c4c 	.word	0x20000c4c
 80065a0:	20000c48 	.word	0x20000c48

080065a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065aa:	4b28      	ldr	r3, [pc, #160]	; (800664c <vTaskSwitchContext+0xa8>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d003      	beq.n	80065ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065b2:	4b27      	ldr	r3, [pc, #156]	; (8006650 <vTaskSwitchContext+0xac>)
 80065b4:	2201      	movs	r2, #1
 80065b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065b8:	e041      	b.n	800663e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80065ba:	4b25      	ldr	r3, [pc, #148]	; (8006650 <vTaskSwitchContext+0xac>)
 80065bc:	2200      	movs	r2, #0
 80065be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065c0:	4b24      	ldr	r3, [pc, #144]	; (8006654 <vTaskSwitchContext+0xb0>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	60fb      	str	r3, [r7, #12]
 80065c6:	e010      	b.n	80065ea <vTaskSwitchContext+0x46>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10a      	bne.n	80065e4 <vTaskSwitchContext+0x40>
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	607b      	str	r3, [r7, #4]
}
 80065e0:	bf00      	nop
 80065e2:	e7fe      	b.n	80065e2 <vTaskSwitchContext+0x3e>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	3b01      	subs	r3, #1
 80065e8:	60fb      	str	r3, [r7, #12]
 80065ea:	491b      	ldr	r1, [pc, #108]	; (8006658 <vTaskSwitchContext+0xb4>)
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	4613      	mov	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	440b      	add	r3, r1
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d0e4      	beq.n	80065c8 <vTaskSwitchContext+0x24>
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	4613      	mov	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4a13      	ldr	r2, [pc, #76]	; (8006658 <vTaskSwitchContext+0xb4>)
 800660a:	4413      	add	r3, r2
 800660c:	60bb      	str	r3, [r7, #8]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	605a      	str	r2, [r3, #4]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	3308      	adds	r3, #8
 8006620:	429a      	cmp	r2, r3
 8006622:	d104      	bne.n	800662e <vTaskSwitchContext+0x8a>
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	605a      	str	r2, [r3, #4]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	4a09      	ldr	r2, [pc, #36]	; (800665c <vTaskSwitchContext+0xb8>)
 8006636:	6013      	str	r3, [r2, #0]
 8006638:	4a06      	ldr	r2, [pc, #24]	; (8006654 <vTaskSwitchContext+0xb0>)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6013      	str	r3, [r2, #0]
}
 800663e:	bf00      	nop
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	20000c60 	.word	0x20000c60
 8006650:	20000c4c 	.word	0x20000c4c
 8006654:	20000c40 	.word	0x20000c40
 8006658:	20000768 	.word	0x20000768
 800665c:	20000764 	.word	0x20000764

08006660 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10a      	bne.n	8006686 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	60fb      	str	r3, [r7, #12]
}
 8006682:	bf00      	nop
 8006684:	e7fe      	b.n	8006684 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006686:	4b07      	ldr	r3, [pc, #28]	; (80066a4 <vTaskPlaceOnEventList+0x44>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	3318      	adds	r3, #24
 800668c:	4619      	mov	r1, r3
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7fe fe87 	bl	80053a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006694:	2101      	movs	r1, #1
 8006696:	6838      	ldr	r0, [r7, #0]
 8006698:	f000 fa7c 	bl	8006b94 <prvAddCurrentTaskToDelayedList>
}
 800669c:	bf00      	nop
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	20000764 	.word	0x20000764

080066a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10a      	bne.n	80066d0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80066ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066be:	f383 8811 	msr	BASEPRI, r3
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	617b      	str	r3, [r7, #20]
}
 80066cc:	bf00      	nop
 80066ce:	e7fe      	b.n	80066ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066d0:	4b0a      	ldr	r3, [pc, #40]	; (80066fc <vTaskPlaceOnEventListRestricted+0x54>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	3318      	adds	r3, #24
 80066d6:	4619      	mov	r1, r3
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f7fe fe3e 	bl	800535a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d002      	beq.n	80066ea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80066e4:	f04f 33ff 	mov.w	r3, #4294967295
 80066e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80066ea:	6879      	ldr	r1, [r7, #4]
 80066ec:	68b8      	ldr	r0, [r7, #8]
 80066ee:	f000 fa51 	bl	8006b94 <prvAddCurrentTaskToDelayedList>
	}
 80066f2:	bf00      	nop
 80066f4:	3718      	adds	r7, #24
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	20000764 	.word	0x20000764

08006700 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10a      	bne.n	800672c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	60fb      	str	r3, [r7, #12]
}
 8006728:	bf00      	nop
 800672a:	e7fe      	b.n	800672a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	3318      	adds	r3, #24
 8006730:	4618      	mov	r0, r3
 8006732:	f7fe fe6f 	bl	8005414 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006736:	4b1e      	ldr	r3, [pc, #120]	; (80067b0 <xTaskRemoveFromEventList+0xb0>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d11d      	bne.n	800677a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	3304      	adds	r3, #4
 8006742:	4618      	mov	r0, r3
 8006744:	f7fe fe66 	bl	8005414 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674c:	4b19      	ldr	r3, [pc, #100]	; (80067b4 <xTaskRemoveFromEventList+0xb4>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	429a      	cmp	r2, r3
 8006752:	d903      	bls.n	800675c <xTaskRemoveFromEventList+0x5c>
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006758:	4a16      	ldr	r2, [pc, #88]	; (80067b4 <xTaskRemoveFromEventList+0xb4>)
 800675a:	6013      	str	r3, [r2, #0]
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006760:	4613      	mov	r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4a13      	ldr	r2, [pc, #76]	; (80067b8 <xTaskRemoveFromEventList+0xb8>)
 800676a:	441a      	add	r2, r3
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	3304      	adds	r3, #4
 8006770:	4619      	mov	r1, r3
 8006772:	4610      	mov	r0, r2
 8006774:	f7fe fdf1 	bl	800535a <vListInsertEnd>
 8006778:	e005      	b.n	8006786 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	3318      	adds	r3, #24
 800677e:	4619      	mov	r1, r3
 8006780:	480e      	ldr	r0, [pc, #56]	; (80067bc <xTaskRemoveFromEventList+0xbc>)
 8006782:	f7fe fdea 	bl	800535a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800678a:	4b0d      	ldr	r3, [pc, #52]	; (80067c0 <xTaskRemoveFromEventList+0xc0>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006790:	429a      	cmp	r2, r3
 8006792:	d905      	bls.n	80067a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006794:	2301      	movs	r3, #1
 8006796:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006798:	4b0a      	ldr	r3, [pc, #40]	; (80067c4 <xTaskRemoveFromEventList+0xc4>)
 800679a:	2201      	movs	r2, #1
 800679c:	601a      	str	r2, [r3, #0]
 800679e:	e001      	b.n	80067a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80067a0:	2300      	movs	r3, #0
 80067a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80067a4:	697b      	ldr	r3, [r7, #20]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3718      	adds	r7, #24
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	20000c60 	.word	0x20000c60
 80067b4:	20000c40 	.word	0x20000c40
 80067b8:	20000768 	.word	0x20000768
 80067bc:	20000bf8 	.word	0x20000bf8
 80067c0:	20000764 	.word	0x20000764
 80067c4:	20000c4c 	.word	0x20000c4c

080067c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067d0:	4b06      	ldr	r3, [pc, #24]	; (80067ec <vTaskInternalSetTimeOutState+0x24>)
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067d8:	4b05      	ldr	r3, [pc, #20]	; (80067f0 <vTaskInternalSetTimeOutState+0x28>)
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	605a      	str	r2, [r3, #4]
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	20000c50 	.word	0x20000c50
 80067f0:	20000c3c 	.word	0x20000c3c

080067f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10a      	bne.n	800681a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	613b      	str	r3, [r7, #16]
}
 8006816:	bf00      	nop
 8006818:	e7fe      	b.n	8006818 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10a      	bne.n	8006836 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	60fb      	str	r3, [r7, #12]
}
 8006832:	bf00      	nop
 8006834:	e7fe      	b.n	8006834 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006836:	f000 fe7d 	bl	8007534 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800683a:	4b1d      	ldr	r3, [pc, #116]	; (80068b0 <xTaskCheckForTimeOut+0xbc>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	69ba      	ldr	r2, [r7, #24]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006852:	d102      	bne.n	800685a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006854:	2300      	movs	r3, #0
 8006856:	61fb      	str	r3, [r7, #28]
 8006858:	e023      	b.n	80068a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	4b15      	ldr	r3, [pc, #84]	; (80068b4 <xTaskCheckForTimeOut+0xc0>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	429a      	cmp	r2, r3
 8006864:	d007      	beq.n	8006876 <xTaskCheckForTimeOut+0x82>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	69ba      	ldr	r2, [r7, #24]
 800686c:	429a      	cmp	r2, r3
 800686e:	d302      	bcc.n	8006876 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006870:	2301      	movs	r3, #1
 8006872:	61fb      	str	r3, [r7, #28]
 8006874:	e015      	b.n	80068a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	429a      	cmp	r2, r3
 800687e:	d20b      	bcs.n	8006898 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	1ad2      	subs	r2, r2, r3
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7ff ff9b 	bl	80067c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006892:	2300      	movs	r3, #0
 8006894:	61fb      	str	r3, [r7, #28]
 8006896:	e004      	b.n	80068a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	2200      	movs	r2, #0
 800689c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800689e:	2301      	movs	r3, #1
 80068a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80068a2:	f000 fe77 	bl	8007594 <vPortExitCritical>

	return xReturn;
 80068a6:	69fb      	ldr	r3, [r7, #28]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3720      	adds	r7, #32
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	20000c3c 	.word	0x20000c3c
 80068b4:	20000c50 	.word	0x20000c50

080068b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80068b8:	b480      	push	{r7}
 80068ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80068bc:	4b03      	ldr	r3, [pc, #12]	; (80068cc <vTaskMissedYield+0x14>)
 80068be:	2201      	movs	r2, #1
 80068c0:	601a      	str	r2, [r3, #0]
}
 80068c2:	bf00      	nop
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr
 80068cc:	20000c4c 	.word	0x20000c4c

080068d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80068d8:	f000 f852 	bl	8006980 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068dc:	4b06      	ldr	r3, [pc, #24]	; (80068f8 <prvIdleTask+0x28>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d9f9      	bls.n	80068d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80068e4:	4b05      	ldr	r3, [pc, #20]	; (80068fc <prvIdleTask+0x2c>)
 80068e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ea:	601a      	str	r2, [r3, #0]
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80068f4:	e7f0      	b.n	80068d8 <prvIdleTask+0x8>
 80068f6:	bf00      	nop
 80068f8:	20000768 	.word	0x20000768
 80068fc:	e000ed04 	.word	0xe000ed04

08006900 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006906:	2300      	movs	r3, #0
 8006908:	607b      	str	r3, [r7, #4]
 800690a:	e00c      	b.n	8006926 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	4613      	mov	r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4413      	add	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4a12      	ldr	r2, [pc, #72]	; (8006960 <prvInitialiseTaskLists+0x60>)
 8006918:	4413      	add	r3, r2
 800691a:	4618      	mov	r0, r3
 800691c:	f7fe fcf0 	bl	8005300 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	3301      	adds	r3, #1
 8006924:	607b      	str	r3, [r7, #4]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b37      	cmp	r3, #55	; 0x37
 800692a:	d9ef      	bls.n	800690c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800692c:	480d      	ldr	r0, [pc, #52]	; (8006964 <prvInitialiseTaskLists+0x64>)
 800692e:	f7fe fce7 	bl	8005300 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006932:	480d      	ldr	r0, [pc, #52]	; (8006968 <prvInitialiseTaskLists+0x68>)
 8006934:	f7fe fce4 	bl	8005300 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006938:	480c      	ldr	r0, [pc, #48]	; (800696c <prvInitialiseTaskLists+0x6c>)
 800693a:	f7fe fce1 	bl	8005300 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800693e:	480c      	ldr	r0, [pc, #48]	; (8006970 <prvInitialiseTaskLists+0x70>)
 8006940:	f7fe fcde 	bl	8005300 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006944:	480b      	ldr	r0, [pc, #44]	; (8006974 <prvInitialiseTaskLists+0x74>)
 8006946:	f7fe fcdb 	bl	8005300 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800694a:	4b0b      	ldr	r3, [pc, #44]	; (8006978 <prvInitialiseTaskLists+0x78>)
 800694c:	4a05      	ldr	r2, [pc, #20]	; (8006964 <prvInitialiseTaskLists+0x64>)
 800694e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006950:	4b0a      	ldr	r3, [pc, #40]	; (800697c <prvInitialiseTaskLists+0x7c>)
 8006952:	4a05      	ldr	r2, [pc, #20]	; (8006968 <prvInitialiseTaskLists+0x68>)
 8006954:	601a      	str	r2, [r3, #0]
}
 8006956:	bf00      	nop
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	20000768 	.word	0x20000768
 8006964:	20000bc8 	.word	0x20000bc8
 8006968:	20000bdc 	.word	0x20000bdc
 800696c:	20000bf8 	.word	0x20000bf8
 8006970:	20000c0c 	.word	0x20000c0c
 8006974:	20000c24 	.word	0x20000c24
 8006978:	20000bf0 	.word	0x20000bf0
 800697c:	20000bf4 	.word	0x20000bf4

08006980 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006986:	e019      	b.n	80069bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006988:	f000 fdd4 	bl	8007534 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800698c:	4b10      	ldr	r3, [pc, #64]	; (80069d0 <prvCheckTasksWaitingTermination+0x50>)
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	3304      	adds	r3, #4
 8006998:	4618      	mov	r0, r3
 800699a:	f7fe fd3b 	bl	8005414 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800699e:	4b0d      	ldr	r3, [pc, #52]	; (80069d4 <prvCheckTasksWaitingTermination+0x54>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	3b01      	subs	r3, #1
 80069a4:	4a0b      	ldr	r2, [pc, #44]	; (80069d4 <prvCheckTasksWaitingTermination+0x54>)
 80069a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069a8:	4b0b      	ldr	r3, [pc, #44]	; (80069d8 <prvCheckTasksWaitingTermination+0x58>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3b01      	subs	r3, #1
 80069ae:	4a0a      	ldr	r2, [pc, #40]	; (80069d8 <prvCheckTasksWaitingTermination+0x58>)
 80069b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80069b2:	f000 fdef 	bl	8007594 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f810 	bl	80069dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069bc:	4b06      	ldr	r3, [pc, #24]	; (80069d8 <prvCheckTasksWaitingTermination+0x58>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1e1      	bne.n	8006988 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80069c4:	bf00      	nop
 80069c6:	bf00      	nop
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	20000c0c 	.word	0x20000c0c
 80069d4:	20000c38 	.word	0x20000c38
 80069d8:	20000c20 	.word	0x20000c20

080069dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d108      	bne.n	8006a00 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 ff4e 	bl	8007894 <vPortFree>
				vPortFree( pxTCB );
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 ff4b 	bl	8007894 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80069fe:	e018      	b.n	8006a32 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d103      	bne.n	8006a12 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 ff42 	bl	8007894 <vPortFree>
	}
 8006a10:	e00f      	b.n	8006a32 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d00a      	beq.n	8006a32 <prvDeleteTCB+0x56>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	60fb      	str	r3, [r7, #12]
}
 8006a2e:	bf00      	nop
 8006a30:	e7fe      	b.n	8006a30 <prvDeleteTCB+0x54>
	}
 8006a32:	bf00      	nop
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
	...

08006a3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a42:	4b0c      	ldr	r3, [pc, #48]	; (8006a74 <prvResetNextTaskUnblockTime+0x38>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d104      	bne.n	8006a56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a4c:	4b0a      	ldr	r3, [pc, #40]	; (8006a78 <prvResetNextTaskUnblockTime+0x3c>)
 8006a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a54:	e008      	b.n	8006a68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a56:	4b07      	ldr	r3, [pc, #28]	; (8006a74 <prvResetNextTaskUnblockTime+0x38>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	4a04      	ldr	r2, [pc, #16]	; (8006a78 <prvResetNextTaskUnblockTime+0x3c>)
 8006a66:	6013      	str	r3, [r2, #0]
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	20000bf0 	.word	0x20000bf0
 8006a78:	20000c58 	.word	0x20000c58

08006a7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a82:	4b0b      	ldr	r3, [pc, #44]	; (8006ab0 <xTaskGetSchedulerState+0x34>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d102      	bne.n	8006a90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	607b      	str	r3, [r7, #4]
 8006a8e:	e008      	b.n	8006aa2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a90:	4b08      	ldr	r3, [pc, #32]	; (8006ab4 <xTaskGetSchedulerState+0x38>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d102      	bne.n	8006a9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a98:	2302      	movs	r3, #2
 8006a9a:	607b      	str	r3, [r7, #4]
 8006a9c:	e001      	b.n	8006aa2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006aa2:	687b      	ldr	r3, [r7, #4]
	}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	20000c44 	.word	0x20000c44
 8006ab4:	20000c60 	.word	0x20000c60

08006ab8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d056      	beq.n	8006b7c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ace:	4b2e      	ldr	r3, [pc, #184]	; (8006b88 <xTaskPriorityDisinherit+0xd0>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d00a      	beq.n	8006aee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006adc:	f383 8811 	msr	BASEPRI, r3
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	60fb      	str	r3, [r7, #12]
}
 8006aea:	bf00      	nop
 8006aec:	e7fe      	b.n	8006aec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10a      	bne.n	8006b0c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	60bb      	str	r3, [r7, #8]
}
 8006b08:	bf00      	nop
 8006b0a:	e7fe      	b.n	8006b0a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b10:	1e5a      	subs	r2, r3, #1
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d02c      	beq.n	8006b7c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d128      	bne.n	8006b7c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	3304      	adds	r3, #4
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7fe fc70 	bl	8005414 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b40:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b4c:	4b0f      	ldr	r3, [pc, #60]	; (8006b8c <xTaskPriorityDisinherit+0xd4>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d903      	bls.n	8006b5c <xTaskPriorityDisinherit+0xa4>
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b58:	4a0c      	ldr	r2, [pc, #48]	; (8006b8c <xTaskPriorityDisinherit+0xd4>)
 8006b5a:	6013      	str	r3, [r2, #0]
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b60:	4613      	mov	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4413      	add	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4a09      	ldr	r2, [pc, #36]	; (8006b90 <xTaskPriorityDisinherit+0xd8>)
 8006b6a:	441a      	add	r2, r3
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	3304      	adds	r3, #4
 8006b70:	4619      	mov	r1, r3
 8006b72:	4610      	mov	r0, r2
 8006b74:	f7fe fbf1 	bl	800535a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b7c:	697b      	ldr	r3, [r7, #20]
	}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3718      	adds	r7, #24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	20000764 	.word	0x20000764
 8006b8c:	20000c40 	.word	0x20000c40
 8006b90:	20000768 	.word	0x20000768

08006b94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b9e:	4b21      	ldr	r3, [pc, #132]	; (8006c24 <prvAddCurrentTaskToDelayedList+0x90>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ba4:	4b20      	ldr	r3, [pc, #128]	; (8006c28 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	3304      	adds	r3, #4
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7fe fc32 	bl	8005414 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb6:	d10a      	bne.n	8006bce <prvAddCurrentTaskToDelayedList+0x3a>
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d007      	beq.n	8006bce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bbe:	4b1a      	ldr	r3, [pc, #104]	; (8006c28 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	3304      	adds	r3, #4
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	4819      	ldr	r0, [pc, #100]	; (8006c2c <prvAddCurrentTaskToDelayedList+0x98>)
 8006bc8:	f7fe fbc7 	bl	800535a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006bcc:	e026      	b.n	8006c1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006bd6:	4b14      	ldr	r3, [pc, #80]	; (8006c28 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d209      	bcs.n	8006bfa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006be6:	4b12      	ldr	r3, [pc, #72]	; (8006c30 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	4b0f      	ldr	r3, [pc, #60]	; (8006c28 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	3304      	adds	r3, #4
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4610      	mov	r0, r2
 8006bf4:	f7fe fbd5 	bl	80053a2 <vListInsert>
}
 8006bf8:	e010      	b.n	8006c1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bfa:	4b0e      	ldr	r3, [pc, #56]	; (8006c34 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	4b0a      	ldr	r3, [pc, #40]	; (8006c28 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	3304      	adds	r3, #4
 8006c04:	4619      	mov	r1, r3
 8006c06:	4610      	mov	r0, r2
 8006c08:	f7fe fbcb 	bl	80053a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c0c:	4b0a      	ldr	r3, [pc, #40]	; (8006c38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d202      	bcs.n	8006c1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006c16:	4a08      	ldr	r2, [pc, #32]	; (8006c38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	6013      	str	r3, [r2, #0]
}
 8006c1c:	bf00      	nop
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	20000c3c 	.word	0x20000c3c
 8006c28:	20000764 	.word	0x20000764
 8006c2c:	20000c24 	.word	0x20000c24
 8006c30:	20000bf4 	.word	0x20000bf4
 8006c34:	20000bf0 	.word	0x20000bf0
 8006c38:	20000c58 	.word	0x20000c58

08006c3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b08a      	sub	sp, #40	; 0x28
 8006c40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006c42:	2300      	movs	r3, #0
 8006c44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c46:	f000 fb07 	bl	8007258 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006c4a:	4b1c      	ldr	r3, [pc, #112]	; (8006cbc <xTimerCreateTimerTask+0x80>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d021      	beq.n	8006c96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006c52:	2300      	movs	r3, #0
 8006c54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c56:	2300      	movs	r3, #0
 8006c58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c5a:	1d3a      	adds	r2, r7, #4
 8006c5c:	f107 0108 	add.w	r1, r7, #8
 8006c60:	f107 030c 	add.w	r3, r7, #12
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7fe fb31 	bl	80052cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c6a:	6879      	ldr	r1, [r7, #4]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	9202      	str	r2, [sp, #8]
 8006c72:	9301      	str	r3, [sp, #4]
 8006c74:	2302      	movs	r3, #2
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	2300      	movs	r3, #0
 8006c7a:	460a      	mov	r2, r1
 8006c7c:	4910      	ldr	r1, [pc, #64]	; (8006cc0 <xTimerCreateTimerTask+0x84>)
 8006c7e:	4811      	ldr	r0, [pc, #68]	; (8006cc4 <xTimerCreateTimerTask+0x88>)
 8006c80:	f7ff f8de 	bl	8005e40 <xTaskCreateStatic>
 8006c84:	4603      	mov	r3, r0
 8006c86:	4a10      	ldr	r2, [pc, #64]	; (8006cc8 <xTimerCreateTimerTask+0x8c>)
 8006c88:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006c8a:	4b0f      	ldr	r3, [pc, #60]	; (8006cc8 <xTimerCreateTimerTask+0x8c>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006c92:	2301      	movs	r3, #1
 8006c94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10a      	bne.n	8006cb2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca0:	f383 8811 	msr	BASEPRI, r3
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	613b      	str	r3, [r7, #16]
}
 8006cae:	bf00      	nop
 8006cb0:	e7fe      	b.n	8006cb0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006cb2:	697b      	ldr	r3, [r7, #20]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3718      	adds	r7, #24
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	20000c94 	.word	0x20000c94
 8006cc0:	080082b0 	.word	0x080082b0
 8006cc4:	08006e01 	.word	0x08006e01
 8006cc8:	20000c98 	.word	0x20000c98

08006ccc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b08a      	sub	sp, #40	; 0x28
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
 8006cd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d10a      	bne.n	8006cfa <xTimerGenericCommand+0x2e>
	__asm volatile
 8006ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce8:	f383 8811 	msr	BASEPRI, r3
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	623b      	str	r3, [r7, #32]
}
 8006cf6:	bf00      	nop
 8006cf8:	e7fe      	b.n	8006cf8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006cfa:	4b1a      	ldr	r3, [pc, #104]	; (8006d64 <xTimerGenericCommand+0x98>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d02a      	beq.n	8006d58 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2b05      	cmp	r3, #5
 8006d12:	dc18      	bgt.n	8006d46 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d14:	f7ff feb2 	bl	8006a7c <xTaskGetSchedulerState>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d109      	bne.n	8006d32 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d1e:	4b11      	ldr	r3, [pc, #68]	; (8006d64 <xTimerGenericCommand+0x98>)
 8006d20:	6818      	ldr	r0, [r3, #0]
 8006d22:	f107 0110 	add.w	r1, r7, #16
 8006d26:	2300      	movs	r3, #0
 8006d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d2a:	f7fe fca1 	bl	8005670 <xQueueGenericSend>
 8006d2e:	6278      	str	r0, [r7, #36]	; 0x24
 8006d30:	e012      	b.n	8006d58 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d32:	4b0c      	ldr	r3, [pc, #48]	; (8006d64 <xTimerGenericCommand+0x98>)
 8006d34:	6818      	ldr	r0, [r3, #0]
 8006d36:	f107 0110 	add.w	r1, r7, #16
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f7fe fc97 	bl	8005670 <xQueueGenericSend>
 8006d42:	6278      	str	r0, [r7, #36]	; 0x24
 8006d44:	e008      	b.n	8006d58 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d46:	4b07      	ldr	r3, [pc, #28]	; (8006d64 <xTimerGenericCommand+0x98>)
 8006d48:	6818      	ldr	r0, [r3, #0]
 8006d4a:	f107 0110 	add.w	r1, r7, #16
 8006d4e:	2300      	movs	r3, #0
 8006d50:	683a      	ldr	r2, [r7, #0]
 8006d52:	f7fe fd8b 	bl	800586c <xQueueGenericSendFromISR>
 8006d56:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3728      	adds	r7, #40	; 0x28
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	20000c94 	.word	0x20000c94

08006d68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b088      	sub	sp, #32
 8006d6c:	af02      	add	r7, sp, #8
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d72:	4b22      	ldr	r3, [pc, #136]	; (8006dfc <prvProcessExpiredTimer+0x94>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	3304      	adds	r3, #4
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7fe fb47 	bl	8005414 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d8c:	f003 0304 	and.w	r3, r3, #4
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d022      	beq.n	8006dda <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	699a      	ldr	r2, [r3, #24]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	18d1      	adds	r1, r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	6978      	ldr	r0, [r7, #20]
 8006da2:	f000 f8d1 	bl	8006f48 <prvInsertTimerInActiveList>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d01f      	beq.n	8006dec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006dac:	2300      	movs	r3, #0
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	2300      	movs	r3, #0
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	2100      	movs	r1, #0
 8006db6:	6978      	ldr	r0, [r7, #20]
 8006db8:	f7ff ff88 	bl	8006ccc <xTimerGenericCommand>
 8006dbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d113      	bne.n	8006dec <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	60fb      	str	r3, [r7, #12]
}
 8006dd6:	bf00      	nop
 8006dd8:	e7fe      	b.n	8006dd8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006de0:	f023 0301 	bic.w	r3, r3, #1
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	6a1b      	ldr	r3, [r3, #32]
 8006df0:	6978      	ldr	r0, [r7, #20]
 8006df2:	4798      	blx	r3
}
 8006df4:	bf00      	nop
 8006df6:	3718      	adds	r7, #24
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	20000c8c 	.word	0x20000c8c

08006e00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e08:	f107 0308 	add.w	r3, r7, #8
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f000 f857 	bl	8006ec0 <prvGetNextExpireTime>
 8006e12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	4619      	mov	r1, r3
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 f803 	bl	8006e24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e1e:	f000 f8d5 	bl	8006fcc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e22:	e7f1      	b.n	8006e08 <prvTimerTask+0x8>

08006e24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e2e:	f7ff fa43 	bl	80062b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e32:	f107 0308 	add.w	r3, r7, #8
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 f866 	bl	8006f08 <prvSampleTimeNow>
 8006e3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d130      	bne.n	8006ea6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10a      	bne.n	8006e60 <prvProcessTimerOrBlockTask+0x3c>
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d806      	bhi.n	8006e60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e52:	f7ff fa3f 	bl	80062d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e56:	68f9      	ldr	r1, [r7, #12]
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f7ff ff85 	bl	8006d68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e5e:	e024      	b.n	8006eaa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d008      	beq.n	8006e78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e66:	4b13      	ldr	r3, [pc, #76]	; (8006eb4 <prvProcessTimerOrBlockTask+0x90>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <prvProcessTimerOrBlockTask+0x50>
 8006e70:	2301      	movs	r3, #1
 8006e72:	e000      	b.n	8006e76 <prvProcessTimerOrBlockTask+0x52>
 8006e74:	2300      	movs	r3, #0
 8006e76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e78:	4b0f      	ldr	r3, [pc, #60]	; (8006eb8 <prvProcessTimerOrBlockTask+0x94>)
 8006e7a:	6818      	ldr	r0, [r3, #0]
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	4619      	mov	r1, r3
 8006e86:	f7fe ffa7 	bl	8005dd8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006e8a:	f7ff fa23 	bl	80062d4 <xTaskResumeAll>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10a      	bne.n	8006eaa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006e94:	4b09      	ldr	r3, [pc, #36]	; (8006ebc <prvProcessTimerOrBlockTask+0x98>)
 8006e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e9a:	601a      	str	r2, [r3, #0]
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	f3bf 8f6f 	isb	sy
}
 8006ea4:	e001      	b.n	8006eaa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006ea6:	f7ff fa15 	bl	80062d4 <xTaskResumeAll>
}
 8006eaa:	bf00      	nop
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	20000c90 	.word	0x20000c90
 8006eb8:	20000c94 	.word	0x20000c94
 8006ebc:	e000ed04 	.word	0xe000ed04

08006ec0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ec8:	4b0e      	ldr	r3, [pc, #56]	; (8006f04 <prvGetNextExpireTime+0x44>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <prvGetNextExpireTime+0x16>
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	e000      	b.n	8006ed8 <prvGetNextExpireTime+0x18>
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d105      	bne.n	8006ef0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ee4:	4b07      	ldr	r3, [pc, #28]	; (8006f04 <prvGetNextExpireTime+0x44>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	60fb      	str	r3, [r7, #12]
 8006eee:	e001      	b.n	8006ef4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	20000c8c 	.word	0x20000c8c

08006f08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f10:	f7ff fa7e 	bl	8006410 <xTaskGetTickCount>
 8006f14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f16:	4b0b      	ldr	r3, [pc, #44]	; (8006f44 <prvSampleTimeNow+0x3c>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d205      	bcs.n	8006f2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f20:	f000 f936 	bl	8007190 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	601a      	str	r2, [r3, #0]
 8006f2a:	e002      	b.n	8006f32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f32:	4a04      	ldr	r2, [pc, #16]	; (8006f44 <prvSampleTimeNow+0x3c>)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f38:	68fb      	ldr	r3, [r7, #12]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	20000c9c 	.word	0x20000c9c

08006f48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
 8006f54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f56:	2300      	movs	r3, #0
 8006f58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d812      	bhi.n	8006f94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	1ad2      	subs	r2, r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d302      	bcc.n	8006f82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	617b      	str	r3, [r7, #20]
 8006f80:	e01b      	b.n	8006fba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f82:	4b10      	ldr	r3, [pc, #64]	; (8006fc4 <prvInsertTimerInActiveList+0x7c>)
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	3304      	adds	r3, #4
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	f7fe fa08 	bl	80053a2 <vListInsert>
 8006f92:	e012      	b.n	8006fba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d206      	bcs.n	8006faa <prvInsertTimerInActiveList+0x62>
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d302      	bcc.n	8006faa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	617b      	str	r3, [r7, #20]
 8006fa8:	e007      	b.n	8006fba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006faa:	4b07      	ldr	r3, [pc, #28]	; (8006fc8 <prvInsertTimerInActiveList+0x80>)
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	3304      	adds	r3, #4
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	f7fe f9f4 	bl	80053a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006fba:	697b      	ldr	r3, [r7, #20]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3718      	adds	r7, #24
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	20000c90 	.word	0x20000c90
 8006fc8:	20000c8c 	.word	0x20000c8c

08006fcc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b08e      	sub	sp, #56	; 0x38
 8006fd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fd2:	e0ca      	b.n	800716a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	da18      	bge.n	800700c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006fda:	1d3b      	adds	r3, r7, #4
 8006fdc:	3304      	adds	r3, #4
 8006fde:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10a      	bne.n	8006ffc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fea:	f383 8811 	msr	BASEPRI, r3
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	f3bf 8f4f 	dsb	sy
 8006ff6:	61fb      	str	r3, [r7, #28]
}
 8006ff8:	bf00      	nop
 8006ffa:	e7fe      	b.n	8006ffa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007002:	6850      	ldr	r0, [r2, #4]
 8007004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007006:	6892      	ldr	r2, [r2, #8]
 8007008:	4611      	mov	r1, r2
 800700a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	f2c0 80aa 	blt.w	8007168 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d004      	beq.n	800702a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007022:	3304      	adds	r3, #4
 8007024:	4618      	mov	r0, r3
 8007026:	f7fe f9f5 	bl	8005414 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800702a:	463b      	mov	r3, r7
 800702c:	4618      	mov	r0, r3
 800702e:	f7ff ff6b 	bl	8006f08 <prvSampleTimeNow>
 8007032:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b09      	cmp	r3, #9
 8007038:	f200 8097 	bhi.w	800716a <prvProcessReceivedCommands+0x19e>
 800703c:	a201      	add	r2, pc, #4	; (adr r2, 8007044 <prvProcessReceivedCommands+0x78>)
 800703e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007042:	bf00      	nop
 8007044:	0800706d 	.word	0x0800706d
 8007048:	0800706d 	.word	0x0800706d
 800704c:	0800706d 	.word	0x0800706d
 8007050:	080070e1 	.word	0x080070e1
 8007054:	080070f5 	.word	0x080070f5
 8007058:	0800713f 	.word	0x0800713f
 800705c:	0800706d 	.word	0x0800706d
 8007060:	0800706d 	.word	0x0800706d
 8007064:	080070e1 	.word	0x080070e1
 8007068:	080070f5 	.word	0x080070f5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800706c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007072:	f043 0301 	orr.w	r3, r3, #1
 8007076:	b2da      	uxtb	r2, r3
 8007078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	18d1      	adds	r1, r2, r3
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800708a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800708c:	f7ff ff5c 	bl	8006f48 <prvInsertTimerInActiveList>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d069      	beq.n	800716a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800709c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800709e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070a4:	f003 0304 	and.w	r3, r3, #4
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d05e      	beq.n	800716a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	441a      	add	r2, r3
 80070b4:	2300      	movs	r3, #0
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	2300      	movs	r3, #0
 80070ba:	2100      	movs	r1, #0
 80070bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070be:	f7ff fe05 	bl	8006ccc <xTimerGenericCommand>
 80070c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80070c4:	6a3b      	ldr	r3, [r7, #32]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d14f      	bne.n	800716a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80070ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	61bb      	str	r3, [r7, #24]
}
 80070dc:	bf00      	nop
 80070de:	e7fe      	b.n	80070de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070e6:	f023 0301 	bic.w	r3, r3, #1
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80070f2:	e03a      	b.n	800716a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070fa:	f043 0301 	orr.w	r3, r3, #1
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007102:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800710c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10a      	bne.n	800712a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007118:	f383 8811 	msr	BASEPRI, r3
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	617b      	str	r3, [r7, #20]
}
 8007126:	bf00      	nop
 8007128:	e7fe      	b.n	8007128 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800712a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712c:	699a      	ldr	r2, [r3, #24]
 800712e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007130:	18d1      	adds	r1, r2, r3
 8007132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007138:	f7ff ff06 	bl	8006f48 <prvInsertTimerInActiveList>
					break;
 800713c:	e015      	b.n	800716a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800713e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007144:	f003 0302 	and.w	r3, r3, #2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d103      	bne.n	8007154 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800714c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800714e:	f000 fba1 	bl	8007894 <vPortFree>
 8007152:	e00a      	b.n	800716a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007156:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800715a:	f023 0301 	bic.w	r3, r3, #1
 800715e:	b2da      	uxtb	r2, r3
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007166:	e000      	b.n	800716a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007168:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800716a:	4b08      	ldr	r3, [pc, #32]	; (800718c <prvProcessReceivedCommands+0x1c0>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	1d39      	adds	r1, r7, #4
 8007170:	2200      	movs	r2, #0
 8007172:	4618      	mov	r0, r3
 8007174:	f7fe fc16 	bl	80059a4 <xQueueReceive>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	f47f af2a 	bne.w	8006fd4 <prvProcessReceivedCommands+0x8>
	}
}
 8007180:	bf00      	nop
 8007182:	bf00      	nop
 8007184:	3730      	adds	r7, #48	; 0x30
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20000c94 	.word	0x20000c94

08007190 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b088      	sub	sp, #32
 8007194:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007196:	e048      	b.n	800722a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007198:	4b2d      	ldr	r3, [pc, #180]	; (8007250 <prvSwitchTimerLists+0xc0>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071a2:	4b2b      	ldr	r3, [pc, #172]	; (8007250 <prvSwitchTimerLists+0xc0>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	3304      	adds	r3, #4
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7fe f92f 	bl	8005414 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071c4:	f003 0304 	and.w	r3, r3, #4
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d02e      	beq.n	800722a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	4413      	add	r3, r2
 80071d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d90e      	bls.n	80071fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071ea:	4b19      	ldr	r3, [pc, #100]	; (8007250 <prvSwitchTimerLists+0xc0>)
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	3304      	adds	r3, #4
 80071f2:	4619      	mov	r1, r3
 80071f4:	4610      	mov	r0, r2
 80071f6:	f7fe f8d4 	bl	80053a2 <vListInsert>
 80071fa:	e016      	b.n	800722a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071fc:	2300      	movs	r3, #0
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	2300      	movs	r3, #0
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	2100      	movs	r1, #0
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f7ff fd60 	bl	8006ccc <xTimerGenericCommand>
 800720c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10a      	bne.n	800722a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007218:	f383 8811 	msr	BASEPRI, r3
 800721c:	f3bf 8f6f 	isb	sy
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	603b      	str	r3, [r7, #0]
}
 8007226:	bf00      	nop
 8007228:	e7fe      	b.n	8007228 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800722a:	4b09      	ldr	r3, [pc, #36]	; (8007250 <prvSwitchTimerLists+0xc0>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1b1      	bne.n	8007198 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007234:	4b06      	ldr	r3, [pc, #24]	; (8007250 <prvSwitchTimerLists+0xc0>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800723a:	4b06      	ldr	r3, [pc, #24]	; (8007254 <prvSwitchTimerLists+0xc4>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a04      	ldr	r2, [pc, #16]	; (8007250 <prvSwitchTimerLists+0xc0>)
 8007240:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007242:	4a04      	ldr	r2, [pc, #16]	; (8007254 <prvSwitchTimerLists+0xc4>)
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	6013      	str	r3, [r2, #0]
}
 8007248:	bf00      	nop
 800724a:	3718      	adds	r7, #24
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20000c8c 	.word	0x20000c8c
 8007254:	20000c90 	.word	0x20000c90

08007258 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800725e:	f000 f969 	bl	8007534 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007262:	4b15      	ldr	r3, [pc, #84]	; (80072b8 <prvCheckForValidListAndQueue+0x60>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d120      	bne.n	80072ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800726a:	4814      	ldr	r0, [pc, #80]	; (80072bc <prvCheckForValidListAndQueue+0x64>)
 800726c:	f7fe f848 	bl	8005300 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007270:	4813      	ldr	r0, [pc, #76]	; (80072c0 <prvCheckForValidListAndQueue+0x68>)
 8007272:	f7fe f845 	bl	8005300 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007276:	4b13      	ldr	r3, [pc, #76]	; (80072c4 <prvCheckForValidListAndQueue+0x6c>)
 8007278:	4a10      	ldr	r2, [pc, #64]	; (80072bc <prvCheckForValidListAndQueue+0x64>)
 800727a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800727c:	4b12      	ldr	r3, [pc, #72]	; (80072c8 <prvCheckForValidListAndQueue+0x70>)
 800727e:	4a10      	ldr	r2, [pc, #64]	; (80072c0 <prvCheckForValidListAndQueue+0x68>)
 8007280:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007282:	2300      	movs	r3, #0
 8007284:	9300      	str	r3, [sp, #0]
 8007286:	4b11      	ldr	r3, [pc, #68]	; (80072cc <prvCheckForValidListAndQueue+0x74>)
 8007288:	4a11      	ldr	r2, [pc, #68]	; (80072d0 <prvCheckForValidListAndQueue+0x78>)
 800728a:	2110      	movs	r1, #16
 800728c:	200a      	movs	r0, #10
 800728e:	f7fe f953 	bl	8005538 <xQueueGenericCreateStatic>
 8007292:	4603      	mov	r3, r0
 8007294:	4a08      	ldr	r2, [pc, #32]	; (80072b8 <prvCheckForValidListAndQueue+0x60>)
 8007296:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007298:	4b07      	ldr	r3, [pc, #28]	; (80072b8 <prvCheckForValidListAndQueue+0x60>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d005      	beq.n	80072ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80072a0:	4b05      	ldr	r3, [pc, #20]	; (80072b8 <prvCheckForValidListAndQueue+0x60>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	490b      	ldr	r1, [pc, #44]	; (80072d4 <prvCheckForValidListAndQueue+0x7c>)
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7fe fd6c 	bl	8005d84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072ac:	f000 f972 	bl	8007594 <vPortExitCritical>
}
 80072b0:	bf00      	nop
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	20000c94 	.word	0x20000c94
 80072bc:	20000c64 	.word	0x20000c64
 80072c0:	20000c78 	.word	0x20000c78
 80072c4:	20000c8c 	.word	0x20000c8c
 80072c8:	20000c90 	.word	0x20000c90
 80072cc:	20000d40 	.word	0x20000d40
 80072d0:	20000ca0 	.word	0x20000ca0
 80072d4:	080082b8 	.word	0x080082b8

080072d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	3b04      	subs	r3, #4
 80072e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80072f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	3b04      	subs	r3, #4
 80072f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	f023 0201 	bic.w	r2, r3, #1
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	3b04      	subs	r3, #4
 8007306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007308:	4a0c      	ldr	r2, [pc, #48]	; (800733c <pxPortInitialiseStack+0x64>)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	3b14      	subs	r3, #20
 8007312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	3b04      	subs	r3, #4
 800731e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f06f 0202 	mvn.w	r2, #2
 8007326:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	3b20      	subs	r3, #32
 800732c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800732e:	68fb      	ldr	r3, [r7, #12]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr
 800733c:	08007341 	.word	0x08007341

08007340 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007346:	2300      	movs	r3, #0
 8007348:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800734a:	4b12      	ldr	r3, [pc, #72]	; (8007394 <prvTaskExitError+0x54>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007352:	d00a      	beq.n	800736a <prvTaskExitError+0x2a>
	__asm volatile
 8007354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007358:	f383 8811 	msr	BASEPRI, r3
 800735c:	f3bf 8f6f 	isb	sy
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	60fb      	str	r3, [r7, #12]
}
 8007366:	bf00      	nop
 8007368:	e7fe      	b.n	8007368 <prvTaskExitError+0x28>
	__asm volatile
 800736a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736e:	f383 8811 	msr	BASEPRI, r3
 8007372:	f3bf 8f6f 	isb	sy
 8007376:	f3bf 8f4f 	dsb	sy
 800737a:	60bb      	str	r3, [r7, #8]
}
 800737c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800737e:	bf00      	nop
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d0fc      	beq.n	8007380 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007386:	bf00      	nop
 8007388:	bf00      	nop
 800738a:	3714      	adds	r7, #20
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	2000001c 	.word	0x2000001c
	...

080073a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80073a0:	4b07      	ldr	r3, [pc, #28]	; (80073c0 <pxCurrentTCBConst2>)
 80073a2:	6819      	ldr	r1, [r3, #0]
 80073a4:	6808      	ldr	r0, [r1, #0]
 80073a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073aa:	f380 8809 	msr	PSP, r0
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f04f 0000 	mov.w	r0, #0
 80073b6:	f380 8811 	msr	BASEPRI, r0
 80073ba:	4770      	bx	lr
 80073bc:	f3af 8000 	nop.w

080073c0 <pxCurrentTCBConst2>:
 80073c0:	20000764 	.word	0x20000764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80073c4:	bf00      	nop
 80073c6:	bf00      	nop

080073c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80073c8:	4808      	ldr	r0, [pc, #32]	; (80073ec <prvPortStartFirstTask+0x24>)
 80073ca:	6800      	ldr	r0, [r0, #0]
 80073cc:	6800      	ldr	r0, [r0, #0]
 80073ce:	f380 8808 	msr	MSP, r0
 80073d2:	f04f 0000 	mov.w	r0, #0
 80073d6:	f380 8814 	msr	CONTROL, r0
 80073da:	b662      	cpsie	i
 80073dc:	b661      	cpsie	f
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	df00      	svc	0
 80073e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80073ea:	bf00      	nop
 80073ec:	e000ed08 	.word	0xe000ed08

080073f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80073f6:	4b46      	ldr	r3, [pc, #280]	; (8007510 <xPortStartScheduler+0x120>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a46      	ldr	r2, [pc, #280]	; (8007514 <xPortStartScheduler+0x124>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d10a      	bne.n	8007416 <xPortStartScheduler+0x26>
	__asm volatile
 8007400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007404:	f383 8811 	msr	BASEPRI, r3
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	613b      	str	r3, [r7, #16]
}
 8007412:	bf00      	nop
 8007414:	e7fe      	b.n	8007414 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007416:	4b3e      	ldr	r3, [pc, #248]	; (8007510 <xPortStartScheduler+0x120>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a3f      	ldr	r2, [pc, #252]	; (8007518 <xPortStartScheduler+0x128>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d10a      	bne.n	8007436 <xPortStartScheduler+0x46>
	__asm volatile
 8007420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	60fb      	str	r3, [r7, #12]
}
 8007432:	bf00      	nop
 8007434:	e7fe      	b.n	8007434 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007436:	4b39      	ldr	r3, [pc, #228]	; (800751c <xPortStartScheduler+0x12c>)
 8007438:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	b2db      	uxtb	r3, r3
 8007440:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	22ff      	movs	r2, #255	; 0xff
 8007446:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	b2db      	uxtb	r3, r3
 800744e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007450:	78fb      	ldrb	r3, [r7, #3]
 8007452:	b2db      	uxtb	r3, r3
 8007454:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007458:	b2da      	uxtb	r2, r3
 800745a:	4b31      	ldr	r3, [pc, #196]	; (8007520 <xPortStartScheduler+0x130>)
 800745c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800745e:	4b31      	ldr	r3, [pc, #196]	; (8007524 <xPortStartScheduler+0x134>)
 8007460:	2207      	movs	r2, #7
 8007462:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007464:	e009      	b.n	800747a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007466:	4b2f      	ldr	r3, [pc, #188]	; (8007524 <xPortStartScheduler+0x134>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3b01      	subs	r3, #1
 800746c:	4a2d      	ldr	r2, [pc, #180]	; (8007524 <xPortStartScheduler+0x134>)
 800746e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007470:	78fb      	ldrb	r3, [r7, #3]
 8007472:	b2db      	uxtb	r3, r3
 8007474:	005b      	lsls	r3, r3, #1
 8007476:	b2db      	uxtb	r3, r3
 8007478:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800747a:	78fb      	ldrb	r3, [r7, #3]
 800747c:	b2db      	uxtb	r3, r3
 800747e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007482:	2b80      	cmp	r3, #128	; 0x80
 8007484:	d0ef      	beq.n	8007466 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007486:	4b27      	ldr	r3, [pc, #156]	; (8007524 <xPortStartScheduler+0x134>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f1c3 0307 	rsb	r3, r3, #7
 800748e:	2b04      	cmp	r3, #4
 8007490:	d00a      	beq.n	80074a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	60bb      	str	r3, [r7, #8]
}
 80074a4:	bf00      	nop
 80074a6:	e7fe      	b.n	80074a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80074a8:	4b1e      	ldr	r3, [pc, #120]	; (8007524 <xPortStartScheduler+0x134>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	021b      	lsls	r3, r3, #8
 80074ae:	4a1d      	ldr	r2, [pc, #116]	; (8007524 <xPortStartScheduler+0x134>)
 80074b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80074b2:	4b1c      	ldr	r3, [pc, #112]	; (8007524 <xPortStartScheduler+0x134>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074ba:	4a1a      	ldr	r2, [pc, #104]	; (8007524 <xPortStartScheduler+0x134>)
 80074bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	b2da      	uxtb	r2, r3
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80074c6:	4b18      	ldr	r3, [pc, #96]	; (8007528 <xPortStartScheduler+0x138>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a17      	ldr	r2, [pc, #92]	; (8007528 <xPortStartScheduler+0x138>)
 80074cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80074d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80074d2:	4b15      	ldr	r3, [pc, #84]	; (8007528 <xPortStartScheduler+0x138>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a14      	ldr	r2, [pc, #80]	; (8007528 <xPortStartScheduler+0x138>)
 80074d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80074dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80074de:	f000 f8dd 	bl	800769c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80074e2:	4b12      	ldr	r3, [pc, #72]	; (800752c <xPortStartScheduler+0x13c>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80074e8:	f000 f8fc 	bl	80076e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80074ec:	4b10      	ldr	r3, [pc, #64]	; (8007530 <xPortStartScheduler+0x140>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a0f      	ldr	r2, [pc, #60]	; (8007530 <xPortStartScheduler+0x140>)
 80074f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80074f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80074f8:	f7ff ff66 	bl	80073c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80074fc:	f7ff f852 	bl	80065a4 <vTaskSwitchContext>
	prvTaskExitError();
 8007500:	f7ff ff1e 	bl	8007340 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3718      	adds	r7, #24
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	e000ed00 	.word	0xe000ed00
 8007514:	410fc271 	.word	0x410fc271
 8007518:	410fc270 	.word	0x410fc270
 800751c:	e000e400 	.word	0xe000e400
 8007520:	20000d90 	.word	0x20000d90
 8007524:	20000d94 	.word	0x20000d94
 8007528:	e000ed20 	.word	0xe000ed20
 800752c:	2000001c 	.word	0x2000001c
 8007530:	e000ef34 	.word	0xe000ef34

08007534 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
	__asm volatile
 800753a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753e:	f383 8811 	msr	BASEPRI, r3
 8007542:	f3bf 8f6f 	isb	sy
 8007546:	f3bf 8f4f 	dsb	sy
 800754a:	607b      	str	r3, [r7, #4]
}
 800754c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800754e:	4b0f      	ldr	r3, [pc, #60]	; (800758c <vPortEnterCritical+0x58>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	3301      	adds	r3, #1
 8007554:	4a0d      	ldr	r2, [pc, #52]	; (800758c <vPortEnterCritical+0x58>)
 8007556:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007558:	4b0c      	ldr	r3, [pc, #48]	; (800758c <vPortEnterCritical+0x58>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d10f      	bne.n	8007580 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007560:	4b0b      	ldr	r3, [pc, #44]	; (8007590 <vPortEnterCritical+0x5c>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00a      	beq.n	8007580 <vPortEnterCritical+0x4c>
	__asm volatile
 800756a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756e:	f383 8811 	msr	BASEPRI, r3
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	f3bf 8f4f 	dsb	sy
 800757a:	603b      	str	r3, [r7, #0]
}
 800757c:	bf00      	nop
 800757e:	e7fe      	b.n	800757e <vPortEnterCritical+0x4a>
	}
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	2000001c 	.word	0x2000001c
 8007590:	e000ed04 	.word	0xe000ed04

08007594 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800759a:	4b12      	ldr	r3, [pc, #72]	; (80075e4 <vPortExitCritical+0x50>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10a      	bne.n	80075b8 <vPortExitCritical+0x24>
	__asm volatile
 80075a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	607b      	str	r3, [r7, #4]
}
 80075b4:	bf00      	nop
 80075b6:	e7fe      	b.n	80075b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80075b8:	4b0a      	ldr	r3, [pc, #40]	; (80075e4 <vPortExitCritical+0x50>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	3b01      	subs	r3, #1
 80075be:	4a09      	ldr	r2, [pc, #36]	; (80075e4 <vPortExitCritical+0x50>)
 80075c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80075c2:	4b08      	ldr	r3, [pc, #32]	; (80075e4 <vPortExitCritical+0x50>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d105      	bne.n	80075d6 <vPortExitCritical+0x42>
 80075ca:	2300      	movs	r3, #0
 80075cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	f383 8811 	msr	BASEPRI, r3
}
 80075d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80075d6:	bf00      	nop
 80075d8:	370c      	adds	r7, #12
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	2000001c 	.word	0x2000001c
	...

080075f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80075f0:	f3ef 8009 	mrs	r0, PSP
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	4b15      	ldr	r3, [pc, #84]	; (8007650 <pxCurrentTCBConst>)
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	f01e 0f10 	tst.w	lr, #16
 8007600:	bf08      	it	eq
 8007602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800760a:	6010      	str	r0, [r2, #0]
 800760c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007614:	f380 8811 	msr	BASEPRI, r0
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	f7fe ffc0 	bl	80065a4 <vTaskSwitchContext>
 8007624:	f04f 0000 	mov.w	r0, #0
 8007628:	f380 8811 	msr	BASEPRI, r0
 800762c:	bc09      	pop	{r0, r3}
 800762e:	6819      	ldr	r1, [r3, #0]
 8007630:	6808      	ldr	r0, [r1, #0]
 8007632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007636:	f01e 0f10 	tst.w	lr, #16
 800763a:	bf08      	it	eq
 800763c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007640:	f380 8809 	msr	PSP, r0
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	f3af 8000 	nop.w

08007650 <pxCurrentTCBConst>:
 8007650:	20000764 	.word	0x20000764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007654:	bf00      	nop
 8007656:	bf00      	nop

08007658 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
	__asm volatile
 800765e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007662:	f383 8811 	msr	BASEPRI, r3
 8007666:	f3bf 8f6f 	isb	sy
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	607b      	str	r3, [r7, #4]
}
 8007670:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007672:	f7fe fedd 	bl	8006430 <xTaskIncrementTick>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d003      	beq.n	8007684 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800767c:	4b06      	ldr	r3, [pc, #24]	; (8007698 <xPortSysTickHandler+0x40>)
 800767e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	2300      	movs	r3, #0
 8007686:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	f383 8811 	msr	BASEPRI, r3
}
 800768e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007690:	bf00      	nop
 8007692:	3708      	adds	r7, #8
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	e000ed04 	.word	0xe000ed04

0800769c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800769c:	b480      	push	{r7}
 800769e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80076a0:	4b0b      	ldr	r3, [pc, #44]	; (80076d0 <vPortSetupTimerInterrupt+0x34>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80076a6:	4b0b      	ldr	r3, [pc, #44]	; (80076d4 <vPortSetupTimerInterrupt+0x38>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80076ac:	4b0a      	ldr	r3, [pc, #40]	; (80076d8 <vPortSetupTimerInterrupt+0x3c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a0a      	ldr	r2, [pc, #40]	; (80076dc <vPortSetupTimerInterrupt+0x40>)
 80076b2:	fba2 2303 	umull	r2, r3, r2, r3
 80076b6:	099b      	lsrs	r3, r3, #6
 80076b8:	4a09      	ldr	r2, [pc, #36]	; (80076e0 <vPortSetupTimerInterrupt+0x44>)
 80076ba:	3b01      	subs	r3, #1
 80076bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80076be:	4b04      	ldr	r3, [pc, #16]	; (80076d0 <vPortSetupTimerInterrupt+0x34>)
 80076c0:	2207      	movs	r2, #7
 80076c2:	601a      	str	r2, [r3, #0]
}
 80076c4:	bf00      	nop
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	e000e010 	.word	0xe000e010
 80076d4:	e000e018 	.word	0xe000e018
 80076d8:	20000010 	.word	0x20000010
 80076dc:	10624dd3 	.word	0x10624dd3
 80076e0:	e000e014 	.word	0xe000e014

080076e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80076e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80076f4 <vPortEnableVFP+0x10>
 80076e8:	6801      	ldr	r1, [r0, #0]
 80076ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80076ee:	6001      	str	r1, [r0, #0]
 80076f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80076f2:	bf00      	nop
 80076f4:	e000ed88 	.word	0xe000ed88

080076f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80076fe:	f3ef 8305 	mrs	r3, IPSR
 8007702:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2b0f      	cmp	r3, #15
 8007708:	d914      	bls.n	8007734 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800770a:	4a17      	ldr	r2, [pc, #92]	; (8007768 <vPortValidateInterruptPriority+0x70>)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4413      	add	r3, r2
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007714:	4b15      	ldr	r3, [pc, #84]	; (800776c <vPortValidateInterruptPriority+0x74>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	7afa      	ldrb	r2, [r7, #11]
 800771a:	429a      	cmp	r2, r3
 800771c:	d20a      	bcs.n	8007734 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800771e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	607b      	str	r3, [r7, #4]
}
 8007730:	bf00      	nop
 8007732:	e7fe      	b.n	8007732 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007734:	4b0e      	ldr	r3, [pc, #56]	; (8007770 <vPortValidateInterruptPriority+0x78>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800773c:	4b0d      	ldr	r3, [pc, #52]	; (8007774 <vPortValidateInterruptPriority+0x7c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	429a      	cmp	r2, r3
 8007742:	d90a      	bls.n	800775a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007748:	f383 8811 	msr	BASEPRI, r3
 800774c:	f3bf 8f6f 	isb	sy
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	603b      	str	r3, [r7, #0]
}
 8007756:	bf00      	nop
 8007758:	e7fe      	b.n	8007758 <vPortValidateInterruptPriority+0x60>
	}
 800775a:	bf00      	nop
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	e000e3f0 	.word	0xe000e3f0
 800776c:	20000d90 	.word	0x20000d90
 8007770:	e000ed0c 	.word	0xe000ed0c
 8007774:	20000d94 	.word	0x20000d94

08007778 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b088      	sub	sp, #32
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 8007780:	2300      	movs	r3, #0
 8007782:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 8007784:	f7fe fd98 	bl	80062b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 8007788:	4b3e      	ldr	r3, [pc, #248]	; (8007884 <pvPortMalloc+0x10c>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d104      	bne.n	800779a <pvPortMalloc+0x22>
		{
			prvHeapInit();
 8007790:	f000 f8ba 	bl	8007908 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 8007794:	4b3b      	ldr	r3, [pc, #236]	; (8007884 <pvPortMalloc+0x10c>)
 8007796:	2201      	movs	r2, #1
 8007798:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00e      	beq.n	80077be <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 80077a0:	2308      	movs	r3, #8
 80077a2:	461a      	mov	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4413      	add	r3, r2
 80077a8:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f003 0307 	and.w	r3, r3, #7
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d004      	beq.n	80077be <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f023 0307 	bic.w	r3, r3, #7
 80077ba:	3308      	adds	r3, #8
 80077bc:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d057      	beq.n	8007874 <pvPortMalloc+0xfc>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f247 5227 	movw	r2, #29991	; 0x7527
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d852      	bhi.n	8007874 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 80077ce:	4b2e      	ldr	r3, [pc, #184]	; (8007888 <pvPortMalloc+0x110>)
 80077d0:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 80077d2:	4b2d      	ldr	r3, [pc, #180]	; (8007888 <pvPortMalloc+0x110>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077d8:	e004      	b.n	80077e4 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d903      	bls.n	80077f6 <pvPortMalloc+0x7e>
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1f1      	bne.n	80077da <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	4a24      	ldr	r2, [pc, #144]	; (800788c <pvPortMalloc+0x114>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d03a      	beq.n	8007874 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2208      	movs	r2, #8
 8007804:	4413      	add	r3, r2
 8007806:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	2208      	movs	r2, #8
 800781a:	0052      	lsls	r2, r2, #1
 800781c:	4293      	cmp	r3, r2
 800781e:	d922      	bls.n	8007866 <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007820:	69fa      	ldr	r2, [r7, #28]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4413      	add	r3, r2
 8007826:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	685a      	ldr	r2, [r3, #4]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	1ad2      	subs	r2, r2, r3
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	60bb      	str	r3, [r7, #8]
 8007840:	4b11      	ldr	r3, [pc, #68]	; (8007888 <pvPortMalloc+0x110>)
 8007842:	613b      	str	r3, [r7, #16]
 8007844:	e002      	b.n	800784c <pvPortMalloc+0xd4>
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	613b      	str	r3, [r7, #16]
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	429a      	cmp	r2, r3
 8007856:	d8f6      	bhi.n	8007846 <pvPortMalloc+0xce>
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	601a      	str	r2, [r3, #0]
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007866:	4b0a      	ldr	r3, [pc, #40]	; (8007890 <pvPortMalloc+0x118>)
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	4a07      	ldr	r2, [pc, #28]	; (8007890 <pvPortMalloc+0x118>)
 8007872:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007874:	f7fe fd2e 	bl	80062d4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8007878:	697b      	ldr	r3, [r7, #20]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3720      	adds	r7, #32
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	200082d8 	.word	0x200082d8
 8007888:	200082c8 	.word	0x200082c8
 800788c:	200082d0 	.word	0x200082d0
 8007890:	20000020 	.word	0x20000020

08007894 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b086      	sub	sp, #24
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d027      	beq.n	80078f6 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 80078a6:	2308      	movs	r3, #8
 80078a8:	425b      	negs	r3, r3
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	4413      	add	r3, r2
 80078ae:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 80078b4:	f7fe fd00 	bl	80062b8 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	60bb      	str	r3, [r7, #8]
 80078be:	4b10      	ldr	r3, [pc, #64]	; (8007900 <vPortFree+0x6c>)
 80078c0:	617b      	str	r3, [r7, #20]
 80078c2:	e002      	b.n	80078ca <vPortFree+0x36>
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	617b      	str	r3, [r7, #20]
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	68ba      	ldr	r2, [r7, #8]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d8f6      	bhi.n	80078c4 <vPortFree+0x30>
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	601a      	str	r2, [r3, #0]
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	685a      	ldr	r2, [r3, #4]
 80078e8:	4b06      	ldr	r3, [pc, #24]	; (8007904 <vPortFree+0x70>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4413      	add	r3, r2
 80078ee:	4a05      	ldr	r2, [pc, #20]	; (8007904 <vPortFree+0x70>)
 80078f0:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 80078f2:	f7fe fcef 	bl	80062d4 <xTaskResumeAll>
	}
}
 80078f6:	bf00      	nop
 80078f8:	3718      	adds	r7, #24
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	200082c8 	.word	0x200082c8
 8007904:	20000020 	.word	0x20000020

08007908 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800790e:	4b10      	ldr	r3, [pc, #64]	; (8007950 <prvHeapInit+0x48>)
 8007910:	f023 0307 	bic.w	r3, r3, #7
 8007914:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007916:	4a0f      	ldr	r2, [pc, #60]	; (8007954 <prvHeapInit+0x4c>)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800791c:	4b0d      	ldr	r3, [pc, #52]	; (8007954 <prvHeapInit+0x4c>)
 800791e:	2200      	movs	r2, #0
 8007920:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8007922:	4b0d      	ldr	r3, [pc, #52]	; (8007958 <prvHeapInit+0x50>)
 8007924:	f247 5228 	movw	r2, #29992	; 0x7528
 8007928:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 800792a:	4b0b      	ldr	r3, [pc, #44]	; (8007958 <prvHeapInit+0x50>)
 800792c:	2200      	movs	r2, #0
 800792e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	f247 5228 	movw	r2, #29992	; 0x7528
 800793a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	4a06      	ldr	r2, [pc, #24]	; (8007958 <prvHeapInit+0x50>)
 8007940:	601a      	str	r2, [r3, #0]
}
 8007942:	bf00      	nop
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	20000da0 	.word	0x20000da0
 8007954:	200082c8 	.word	0x200082c8
 8007958:	200082d0 	.word	0x200082d0

0800795c <__errno>:
 800795c:	4b01      	ldr	r3, [pc, #4]	; (8007964 <__errno+0x8>)
 800795e:	6818      	ldr	r0, [r3, #0]
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	20000024 	.word	0x20000024

08007968 <__libc_init_array>:
 8007968:	b570      	push	{r4, r5, r6, lr}
 800796a:	4d0d      	ldr	r5, [pc, #52]	; (80079a0 <__libc_init_array+0x38>)
 800796c:	4c0d      	ldr	r4, [pc, #52]	; (80079a4 <__libc_init_array+0x3c>)
 800796e:	1b64      	subs	r4, r4, r5
 8007970:	10a4      	asrs	r4, r4, #2
 8007972:	2600      	movs	r6, #0
 8007974:	42a6      	cmp	r6, r4
 8007976:	d109      	bne.n	800798c <__libc_init_array+0x24>
 8007978:	4d0b      	ldr	r5, [pc, #44]	; (80079a8 <__libc_init_array+0x40>)
 800797a:	4c0c      	ldr	r4, [pc, #48]	; (80079ac <__libc_init_array+0x44>)
 800797c:	f000 fc4e 	bl	800821c <_init>
 8007980:	1b64      	subs	r4, r4, r5
 8007982:	10a4      	asrs	r4, r4, #2
 8007984:	2600      	movs	r6, #0
 8007986:	42a6      	cmp	r6, r4
 8007988:	d105      	bne.n	8007996 <__libc_init_array+0x2e>
 800798a:	bd70      	pop	{r4, r5, r6, pc}
 800798c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007990:	4798      	blx	r3
 8007992:	3601      	adds	r6, #1
 8007994:	e7ee      	b.n	8007974 <__libc_init_array+0xc>
 8007996:	f855 3b04 	ldr.w	r3, [r5], #4
 800799a:	4798      	blx	r3
 800799c:	3601      	adds	r6, #1
 800799e:	e7f2      	b.n	8007986 <__libc_init_array+0x1e>
 80079a0:	080083d4 	.word	0x080083d4
 80079a4:	080083d4 	.word	0x080083d4
 80079a8:	080083d4 	.word	0x080083d4
 80079ac:	080083d8 	.word	0x080083d8

080079b0 <memcpy>:
 80079b0:	440a      	add	r2, r1
 80079b2:	4291      	cmp	r1, r2
 80079b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80079b8:	d100      	bne.n	80079bc <memcpy+0xc>
 80079ba:	4770      	bx	lr
 80079bc:	b510      	push	{r4, lr}
 80079be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079c6:	4291      	cmp	r1, r2
 80079c8:	d1f9      	bne.n	80079be <memcpy+0xe>
 80079ca:	bd10      	pop	{r4, pc}

080079cc <memset>:
 80079cc:	4402      	add	r2, r0
 80079ce:	4603      	mov	r3, r0
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d100      	bne.n	80079d6 <memset+0xa>
 80079d4:	4770      	bx	lr
 80079d6:	f803 1b01 	strb.w	r1, [r3], #1
 80079da:	e7f9      	b.n	80079d0 <memset+0x4>

080079dc <siprintf>:
 80079dc:	b40e      	push	{r1, r2, r3}
 80079de:	b500      	push	{lr}
 80079e0:	b09c      	sub	sp, #112	; 0x70
 80079e2:	ab1d      	add	r3, sp, #116	; 0x74
 80079e4:	9002      	str	r0, [sp, #8]
 80079e6:	9006      	str	r0, [sp, #24]
 80079e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079ec:	4809      	ldr	r0, [pc, #36]	; (8007a14 <siprintf+0x38>)
 80079ee:	9107      	str	r1, [sp, #28]
 80079f0:	9104      	str	r1, [sp, #16]
 80079f2:	4909      	ldr	r1, [pc, #36]	; (8007a18 <siprintf+0x3c>)
 80079f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80079f8:	9105      	str	r1, [sp, #20]
 80079fa:	6800      	ldr	r0, [r0, #0]
 80079fc:	9301      	str	r3, [sp, #4]
 80079fe:	a902      	add	r1, sp, #8
 8007a00:	f000 f868 	bl	8007ad4 <_svfiprintf_r>
 8007a04:	9b02      	ldr	r3, [sp, #8]
 8007a06:	2200      	movs	r2, #0
 8007a08:	701a      	strb	r2, [r3, #0]
 8007a0a:	b01c      	add	sp, #112	; 0x70
 8007a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a10:	b003      	add	sp, #12
 8007a12:	4770      	bx	lr
 8007a14:	20000024 	.word	0x20000024
 8007a18:	ffff0208 	.word	0xffff0208

08007a1c <__ssputs_r>:
 8007a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a20:	688e      	ldr	r6, [r1, #8]
 8007a22:	429e      	cmp	r6, r3
 8007a24:	4682      	mov	sl, r0
 8007a26:	460c      	mov	r4, r1
 8007a28:	4690      	mov	r8, r2
 8007a2a:	461f      	mov	r7, r3
 8007a2c:	d838      	bhi.n	8007aa0 <__ssputs_r+0x84>
 8007a2e:	898a      	ldrh	r2, [r1, #12]
 8007a30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a34:	d032      	beq.n	8007a9c <__ssputs_r+0x80>
 8007a36:	6825      	ldr	r5, [r4, #0]
 8007a38:	6909      	ldr	r1, [r1, #16]
 8007a3a:	eba5 0901 	sub.w	r9, r5, r1
 8007a3e:	6965      	ldr	r5, [r4, #20]
 8007a40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a48:	3301      	adds	r3, #1
 8007a4a:	444b      	add	r3, r9
 8007a4c:	106d      	asrs	r5, r5, #1
 8007a4e:	429d      	cmp	r5, r3
 8007a50:	bf38      	it	cc
 8007a52:	461d      	movcc	r5, r3
 8007a54:	0553      	lsls	r3, r2, #21
 8007a56:	d531      	bpl.n	8007abc <__ssputs_r+0xa0>
 8007a58:	4629      	mov	r1, r5
 8007a5a:	f000 fb39 	bl	80080d0 <_malloc_r>
 8007a5e:	4606      	mov	r6, r0
 8007a60:	b950      	cbnz	r0, 8007a78 <__ssputs_r+0x5c>
 8007a62:	230c      	movs	r3, #12
 8007a64:	f8ca 3000 	str.w	r3, [sl]
 8007a68:	89a3      	ldrh	r3, [r4, #12]
 8007a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a6e:	81a3      	strh	r3, [r4, #12]
 8007a70:	f04f 30ff 	mov.w	r0, #4294967295
 8007a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a78:	6921      	ldr	r1, [r4, #16]
 8007a7a:	464a      	mov	r2, r9
 8007a7c:	f7ff ff98 	bl	80079b0 <memcpy>
 8007a80:	89a3      	ldrh	r3, [r4, #12]
 8007a82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a8a:	81a3      	strh	r3, [r4, #12]
 8007a8c:	6126      	str	r6, [r4, #16]
 8007a8e:	6165      	str	r5, [r4, #20]
 8007a90:	444e      	add	r6, r9
 8007a92:	eba5 0509 	sub.w	r5, r5, r9
 8007a96:	6026      	str	r6, [r4, #0]
 8007a98:	60a5      	str	r5, [r4, #8]
 8007a9a:	463e      	mov	r6, r7
 8007a9c:	42be      	cmp	r6, r7
 8007a9e:	d900      	bls.n	8007aa2 <__ssputs_r+0x86>
 8007aa0:	463e      	mov	r6, r7
 8007aa2:	4632      	mov	r2, r6
 8007aa4:	6820      	ldr	r0, [r4, #0]
 8007aa6:	4641      	mov	r1, r8
 8007aa8:	f000 faa8 	bl	8007ffc <memmove>
 8007aac:	68a3      	ldr	r3, [r4, #8]
 8007aae:	6822      	ldr	r2, [r4, #0]
 8007ab0:	1b9b      	subs	r3, r3, r6
 8007ab2:	4432      	add	r2, r6
 8007ab4:	60a3      	str	r3, [r4, #8]
 8007ab6:	6022      	str	r2, [r4, #0]
 8007ab8:	2000      	movs	r0, #0
 8007aba:	e7db      	b.n	8007a74 <__ssputs_r+0x58>
 8007abc:	462a      	mov	r2, r5
 8007abe:	f000 fb61 	bl	8008184 <_realloc_r>
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	d1e1      	bne.n	8007a8c <__ssputs_r+0x70>
 8007ac8:	6921      	ldr	r1, [r4, #16]
 8007aca:	4650      	mov	r0, sl
 8007acc:	f000 fab0 	bl	8008030 <_free_r>
 8007ad0:	e7c7      	b.n	8007a62 <__ssputs_r+0x46>
	...

08007ad4 <_svfiprintf_r>:
 8007ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad8:	4698      	mov	r8, r3
 8007ada:	898b      	ldrh	r3, [r1, #12]
 8007adc:	061b      	lsls	r3, r3, #24
 8007ade:	b09d      	sub	sp, #116	; 0x74
 8007ae0:	4607      	mov	r7, r0
 8007ae2:	460d      	mov	r5, r1
 8007ae4:	4614      	mov	r4, r2
 8007ae6:	d50e      	bpl.n	8007b06 <_svfiprintf_r+0x32>
 8007ae8:	690b      	ldr	r3, [r1, #16]
 8007aea:	b963      	cbnz	r3, 8007b06 <_svfiprintf_r+0x32>
 8007aec:	2140      	movs	r1, #64	; 0x40
 8007aee:	f000 faef 	bl	80080d0 <_malloc_r>
 8007af2:	6028      	str	r0, [r5, #0]
 8007af4:	6128      	str	r0, [r5, #16]
 8007af6:	b920      	cbnz	r0, 8007b02 <_svfiprintf_r+0x2e>
 8007af8:	230c      	movs	r3, #12
 8007afa:	603b      	str	r3, [r7, #0]
 8007afc:	f04f 30ff 	mov.w	r0, #4294967295
 8007b00:	e0d1      	b.n	8007ca6 <_svfiprintf_r+0x1d2>
 8007b02:	2340      	movs	r3, #64	; 0x40
 8007b04:	616b      	str	r3, [r5, #20]
 8007b06:	2300      	movs	r3, #0
 8007b08:	9309      	str	r3, [sp, #36]	; 0x24
 8007b0a:	2320      	movs	r3, #32
 8007b0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b10:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b14:	2330      	movs	r3, #48	; 0x30
 8007b16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007cc0 <_svfiprintf_r+0x1ec>
 8007b1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b1e:	f04f 0901 	mov.w	r9, #1
 8007b22:	4623      	mov	r3, r4
 8007b24:	469a      	mov	sl, r3
 8007b26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b2a:	b10a      	cbz	r2, 8007b30 <_svfiprintf_r+0x5c>
 8007b2c:	2a25      	cmp	r2, #37	; 0x25
 8007b2e:	d1f9      	bne.n	8007b24 <_svfiprintf_r+0x50>
 8007b30:	ebba 0b04 	subs.w	fp, sl, r4
 8007b34:	d00b      	beq.n	8007b4e <_svfiprintf_r+0x7a>
 8007b36:	465b      	mov	r3, fp
 8007b38:	4622      	mov	r2, r4
 8007b3a:	4629      	mov	r1, r5
 8007b3c:	4638      	mov	r0, r7
 8007b3e:	f7ff ff6d 	bl	8007a1c <__ssputs_r>
 8007b42:	3001      	adds	r0, #1
 8007b44:	f000 80aa 	beq.w	8007c9c <_svfiprintf_r+0x1c8>
 8007b48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b4a:	445a      	add	r2, fp
 8007b4c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f000 80a2 	beq.w	8007c9c <_svfiprintf_r+0x1c8>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b62:	f10a 0a01 	add.w	sl, sl, #1
 8007b66:	9304      	str	r3, [sp, #16]
 8007b68:	9307      	str	r3, [sp, #28]
 8007b6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b6e:	931a      	str	r3, [sp, #104]	; 0x68
 8007b70:	4654      	mov	r4, sl
 8007b72:	2205      	movs	r2, #5
 8007b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b78:	4851      	ldr	r0, [pc, #324]	; (8007cc0 <_svfiprintf_r+0x1ec>)
 8007b7a:	f7f8 fb31 	bl	80001e0 <memchr>
 8007b7e:	9a04      	ldr	r2, [sp, #16]
 8007b80:	b9d8      	cbnz	r0, 8007bba <_svfiprintf_r+0xe6>
 8007b82:	06d0      	lsls	r0, r2, #27
 8007b84:	bf44      	itt	mi
 8007b86:	2320      	movmi	r3, #32
 8007b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b8c:	0711      	lsls	r1, r2, #28
 8007b8e:	bf44      	itt	mi
 8007b90:	232b      	movmi	r3, #43	; 0x2b
 8007b92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b96:	f89a 3000 	ldrb.w	r3, [sl]
 8007b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b9c:	d015      	beq.n	8007bca <_svfiprintf_r+0xf6>
 8007b9e:	9a07      	ldr	r2, [sp, #28]
 8007ba0:	4654      	mov	r4, sl
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	f04f 0c0a 	mov.w	ip, #10
 8007ba8:	4621      	mov	r1, r4
 8007baa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bae:	3b30      	subs	r3, #48	; 0x30
 8007bb0:	2b09      	cmp	r3, #9
 8007bb2:	d94e      	bls.n	8007c52 <_svfiprintf_r+0x17e>
 8007bb4:	b1b0      	cbz	r0, 8007be4 <_svfiprintf_r+0x110>
 8007bb6:	9207      	str	r2, [sp, #28]
 8007bb8:	e014      	b.n	8007be4 <_svfiprintf_r+0x110>
 8007bba:	eba0 0308 	sub.w	r3, r0, r8
 8007bbe:	fa09 f303 	lsl.w	r3, r9, r3
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	9304      	str	r3, [sp, #16]
 8007bc6:	46a2      	mov	sl, r4
 8007bc8:	e7d2      	b.n	8007b70 <_svfiprintf_r+0x9c>
 8007bca:	9b03      	ldr	r3, [sp, #12]
 8007bcc:	1d19      	adds	r1, r3, #4
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	9103      	str	r1, [sp, #12]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	bfbb      	ittet	lt
 8007bd6:	425b      	neglt	r3, r3
 8007bd8:	f042 0202 	orrlt.w	r2, r2, #2
 8007bdc:	9307      	strge	r3, [sp, #28]
 8007bde:	9307      	strlt	r3, [sp, #28]
 8007be0:	bfb8      	it	lt
 8007be2:	9204      	strlt	r2, [sp, #16]
 8007be4:	7823      	ldrb	r3, [r4, #0]
 8007be6:	2b2e      	cmp	r3, #46	; 0x2e
 8007be8:	d10c      	bne.n	8007c04 <_svfiprintf_r+0x130>
 8007bea:	7863      	ldrb	r3, [r4, #1]
 8007bec:	2b2a      	cmp	r3, #42	; 0x2a
 8007bee:	d135      	bne.n	8007c5c <_svfiprintf_r+0x188>
 8007bf0:	9b03      	ldr	r3, [sp, #12]
 8007bf2:	1d1a      	adds	r2, r3, #4
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	9203      	str	r2, [sp, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	bfb8      	it	lt
 8007bfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c00:	3402      	adds	r4, #2
 8007c02:	9305      	str	r3, [sp, #20]
 8007c04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007cd0 <_svfiprintf_r+0x1fc>
 8007c08:	7821      	ldrb	r1, [r4, #0]
 8007c0a:	2203      	movs	r2, #3
 8007c0c:	4650      	mov	r0, sl
 8007c0e:	f7f8 fae7 	bl	80001e0 <memchr>
 8007c12:	b140      	cbz	r0, 8007c26 <_svfiprintf_r+0x152>
 8007c14:	2340      	movs	r3, #64	; 0x40
 8007c16:	eba0 000a 	sub.w	r0, r0, sl
 8007c1a:	fa03 f000 	lsl.w	r0, r3, r0
 8007c1e:	9b04      	ldr	r3, [sp, #16]
 8007c20:	4303      	orrs	r3, r0
 8007c22:	3401      	adds	r4, #1
 8007c24:	9304      	str	r3, [sp, #16]
 8007c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c2a:	4826      	ldr	r0, [pc, #152]	; (8007cc4 <_svfiprintf_r+0x1f0>)
 8007c2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c30:	2206      	movs	r2, #6
 8007c32:	f7f8 fad5 	bl	80001e0 <memchr>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d038      	beq.n	8007cac <_svfiprintf_r+0x1d8>
 8007c3a:	4b23      	ldr	r3, [pc, #140]	; (8007cc8 <_svfiprintf_r+0x1f4>)
 8007c3c:	bb1b      	cbnz	r3, 8007c86 <_svfiprintf_r+0x1b2>
 8007c3e:	9b03      	ldr	r3, [sp, #12]
 8007c40:	3307      	adds	r3, #7
 8007c42:	f023 0307 	bic.w	r3, r3, #7
 8007c46:	3308      	adds	r3, #8
 8007c48:	9303      	str	r3, [sp, #12]
 8007c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c4c:	4433      	add	r3, r6
 8007c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c50:	e767      	b.n	8007b22 <_svfiprintf_r+0x4e>
 8007c52:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c56:	460c      	mov	r4, r1
 8007c58:	2001      	movs	r0, #1
 8007c5a:	e7a5      	b.n	8007ba8 <_svfiprintf_r+0xd4>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	3401      	adds	r4, #1
 8007c60:	9305      	str	r3, [sp, #20]
 8007c62:	4619      	mov	r1, r3
 8007c64:	f04f 0c0a 	mov.w	ip, #10
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c6e:	3a30      	subs	r2, #48	; 0x30
 8007c70:	2a09      	cmp	r2, #9
 8007c72:	d903      	bls.n	8007c7c <_svfiprintf_r+0x1a8>
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d0c5      	beq.n	8007c04 <_svfiprintf_r+0x130>
 8007c78:	9105      	str	r1, [sp, #20]
 8007c7a:	e7c3      	b.n	8007c04 <_svfiprintf_r+0x130>
 8007c7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c80:	4604      	mov	r4, r0
 8007c82:	2301      	movs	r3, #1
 8007c84:	e7f0      	b.n	8007c68 <_svfiprintf_r+0x194>
 8007c86:	ab03      	add	r3, sp, #12
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	462a      	mov	r2, r5
 8007c8c:	4b0f      	ldr	r3, [pc, #60]	; (8007ccc <_svfiprintf_r+0x1f8>)
 8007c8e:	a904      	add	r1, sp, #16
 8007c90:	4638      	mov	r0, r7
 8007c92:	f3af 8000 	nop.w
 8007c96:	1c42      	adds	r2, r0, #1
 8007c98:	4606      	mov	r6, r0
 8007c9a:	d1d6      	bne.n	8007c4a <_svfiprintf_r+0x176>
 8007c9c:	89ab      	ldrh	r3, [r5, #12]
 8007c9e:	065b      	lsls	r3, r3, #25
 8007ca0:	f53f af2c 	bmi.w	8007afc <_svfiprintf_r+0x28>
 8007ca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ca6:	b01d      	add	sp, #116	; 0x74
 8007ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cac:	ab03      	add	r3, sp, #12
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	462a      	mov	r2, r5
 8007cb2:	4b06      	ldr	r3, [pc, #24]	; (8007ccc <_svfiprintf_r+0x1f8>)
 8007cb4:	a904      	add	r1, sp, #16
 8007cb6:	4638      	mov	r0, r7
 8007cb8:	f000 f87a 	bl	8007db0 <_printf_i>
 8007cbc:	e7eb      	b.n	8007c96 <_svfiprintf_r+0x1c2>
 8007cbe:	bf00      	nop
 8007cc0:	08008398 	.word	0x08008398
 8007cc4:	080083a2 	.word	0x080083a2
 8007cc8:	00000000 	.word	0x00000000
 8007ccc:	08007a1d 	.word	0x08007a1d
 8007cd0:	0800839e 	.word	0x0800839e

08007cd4 <_printf_common>:
 8007cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd8:	4616      	mov	r6, r2
 8007cda:	4699      	mov	r9, r3
 8007cdc:	688a      	ldr	r2, [r1, #8]
 8007cde:	690b      	ldr	r3, [r1, #16]
 8007ce0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	bfb8      	it	lt
 8007ce8:	4613      	movlt	r3, r2
 8007cea:	6033      	str	r3, [r6, #0]
 8007cec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cf0:	4607      	mov	r7, r0
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	b10a      	cbz	r2, 8007cfa <_printf_common+0x26>
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	6033      	str	r3, [r6, #0]
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	0699      	lsls	r1, r3, #26
 8007cfe:	bf42      	ittt	mi
 8007d00:	6833      	ldrmi	r3, [r6, #0]
 8007d02:	3302      	addmi	r3, #2
 8007d04:	6033      	strmi	r3, [r6, #0]
 8007d06:	6825      	ldr	r5, [r4, #0]
 8007d08:	f015 0506 	ands.w	r5, r5, #6
 8007d0c:	d106      	bne.n	8007d1c <_printf_common+0x48>
 8007d0e:	f104 0a19 	add.w	sl, r4, #25
 8007d12:	68e3      	ldr	r3, [r4, #12]
 8007d14:	6832      	ldr	r2, [r6, #0]
 8007d16:	1a9b      	subs	r3, r3, r2
 8007d18:	42ab      	cmp	r3, r5
 8007d1a:	dc26      	bgt.n	8007d6a <_printf_common+0x96>
 8007d1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d20:	1e13      	subs	r3, r2, #0
 8007d22:	6822      	ldr	r2, [r4, #0]
 8007d24:	bf18      	it	ne
 8007d26:	2301      	movne	r3, #1
 8007d28:	0692      	lsls	r2, r2, #26
 8007d2a:	d42b      	bmi.n	8007d84 <_printf_common+0xb0>
 8007d2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d30:	4649      	mov	r1, r9
 8007d32:	4638      	mov	r0, r7
 8007d34:	47c0      	blx	r8
 8007d36:	3001      	adds	r0, #1
 8007d38:	d01e      	beq.n	8007d78 <_printf_common+0xa4>
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	68e5      	ldr	r5, [r4, #12]
 8007d3e:	6832      	ldr	r2, [r6, #0]
 8007d40:	f003 0306 	and.w	r3, r3, #6
 8007d44:	2b04      	cmp	r3, #4
 8007d46:	bf08      	it	eq
 8007d48:	1aad      	subeq	r5, r5, r2
 8007d4a:	68a3      	ldr	r3, [r4, #8]
 8007d4c:	6922      	ldr	r2, [r4, #16]
 8007d4e:	bf0c      	ite	eq
 8007d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d54:	2500      	movne	r5, #0
 8007d56:	4293      	cmp	r3, r2
 8007d58:	bfc4      	itt	gt
 8007d5a:	1a9b      	subgt	r3, r3, r2
 8007d5c:	18ed      	addgt	r5, r5, r3
 8007d5e:	2600      	movs	r6, #0
 8007d60:	341a      	adds	r4, #26
 8007d62:	42b5      	cmp	r5, r6
 8007d64:	d11a      	bne.n	8007d9c <_printf_common+0xc8>
 8007d66:	2000      	movs	r0, #0
 8007d68:	e008      	b.n	8007d7c <_printf_common+0xa8>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	4652      	mov	r2, sl
 8007d6e:	4649      	mov	r1, r9
 8007d70:	4638      	mov	r0, r7
 8007d72:	47c0      	blx	r8
 8007d74:	3001      	adds	r0, #1
 8007d76:	d103      	bne.n	8007d80 <_printf_common+0xac>
 8007d78:	f04f 30ff 	mov.w	r0, #4294967295
 8007d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d80:	3501      	adds	r5, #1
 8007d82:	e7c6      	b.n	8007d12 <_printf_common+0x3e>
 8007d84:	18e1      	adds	r1, r4, r3
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	2030      	movs	r0, #48	; 0x30
 8007d8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d8e:	4422      	add	r2, r4
 8007d90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d98:	3302      	adds	r3, #2
 8007d9a:	e7c7      	b.n	8007d2c <_printf_common+0x58>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	4622      	mov	r2, r4
 8007da0:	4649      	mov	r1, r9
 8007da2:	4638      	mov	r0, r7
 8007da4:	47c0      	blx	r8
 8007da6:	3001      	adds	r0, #1
 8007da8:	d0e6      	beq.n	8007d78 <_printf_common+0xa4>
 8007daa:	3601      	adds	r6, #1
 8007dac:	e7d9      	b.n	8007d62 <_printf_common+0x8e>
	...

08007db0 <_printf_i>:
 8007db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007db4:	460c      	mov	r4, r1
 8007db6:	4691      	mov	r9, r2
 8007db8:	7e27      	ldrb	r7, [r4, #24]
 8007dba:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007dbc:	2f78      	cmp	r7, #120	; 0x78
 8007dbe:	4680      	mov	r8, r0
 8007dc0:	469a      	mov	sl, r3
 8007dc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007dc6:	d807      	bhi.n	8007dd8 <_printf_i+0x28>
 8007dc8:	2f62      	cmp	r7, #98	; 0x62
 8007dca:	d80a      	bhi.n	8007de2 <_printf_i+0x32>
 8007dcc:	2f00      	cmp	r7, #0
 8007dce:	f000 80d8 	beq.w	8007f82 <_printf_i+0x1d2>
 8007dd2:	2f58      	cmp	r7, #88	; 0x58
 8007dd4:	f000 80a3 	beq.w	8007f1e <_printf_i+0x16e>
 8007dd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ddc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007de0:	e03a      	b.n	8007e58 <_printf_i+0xa8>
 8007de2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007de6:	2b15      	cmp	r3, #21
 8007de8:	d8f6      	bhi.n	8007dd8 <_printf_i+0x28>
 8007dea:	a001      	add	r0, pc, #4	; (adr r0, 8007df0 <_printf_i+0x40>)
 8007dec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007df0:	08007e49 	.word	0x08007e49
 8007df4:	08007e5d 	.word	0x08007e5d
 8007df8:	08007dd9 	.word	0x08007dd9
 8007dfc:	08007dd9 	.word	0x08007dd9
 8007e00:	08007dd9 	.word	0x08007dd9
 8007e04:	08007dd9 	.word	0x08007dd9
 8007e08:	08007e5d 	.word	0x08007e5d
 8007e0c:	08007dd9 	.word	0x08007dd9
 8007e10:	08007dd9 	.word	0x08007dd9
 8007e14:	08007dd9 	.word	0x08007dd9
 8007e18:	08007dd9 	.word	0x08007dd9
 8007e1c:	08007f69 	.word	0x08007f69
 8007e20:	08007e8d 	.word	0x08007e8d
 8007e24:	08007f4b 	.word	0x08007f4b
 8007e28:	08007dd9 	.word	0x08007dd9
 8007e2c:	08007dd9 	.word	0x08007dd9
 8007e30:	08007f8b 	.word	0x08007f8b
 8007e34:	08007dd9 	.word	0x08007dd9
 8007e38:	08007e8d 	.word	0x08007e8d
 8007e3c:	08007dd9 	.word	0x08007dd9
 8007e40:	08007dd9 	.word	0x08007dd9
 8007e44:	08007f53 	.word	0x08007f53
 8007e48:	680b      	ldr	r3, [r1, #0]
 8007e4a:	1d1a      	adds	r2, r3, #4
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	600a      	str	r2, [r1, #0]
 8007e50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e0a3      	b.n	8007fa4 <_printf_i+0x1f4>
 8007e5c:	6825      	ldr	r5, [r4, #0]
 8007e5e:	6808      	ldr	r0, [r1, #0]
 8007e60:	062e      	lsls	r6, r5, #24
 8007e62:	f100 0304 	add.w	r3, r0, #4
 8007e66:	d50a      	bpl.n	8007e7e <_printf_i+0xce>
 8007e68:	6805      	ldr	r5, [r0, #0]
 8007e6a:	600b      	str	r3, [r1, #0]
 8007e6c:	2d00      	cmp	r5, #0
 8007e6e:	da03      	bge.n	8007e78 <_printf_i+0xc8>
 8007e70:	232d      	movs	r3, #45	; 0x2d
 8007e72:	426d      	negs	r5, r5
 8007e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e78:	485e      	ldr	r0, [pc, #376]	; (8007ff4 <_printf_i+0x244>)
 8007e7a:	230a      	movs	r3, #10
 8007e7c:	e019      	b.n	8007eb2 <_printf_i+0x102>
 8007e7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007e82:	6805      	ldr	r5, [r0, #0]
 8007e84:	600b      	str	r3, [r1, #0]
 8007e86:	bf18      	it	ne
 8007e88:	b22d      	sxthne	r5, r5
 8007e8a:	e7ef      	b.n	8007e6c <_printf_i+0xbc>
 8007e8c:	680b      	ldr	r3, [r1, #0]
 8007e8e:	6825      	ldr	r5, [r4, #0]
 8007e90:	1d18      	adds	r0, r3, #4
 8007e92:	6008      	str	r0, [r1, #0]
 8007e94:	0628      	lsls	r0, r5, #24
 8007e96:	d501      	bpl.n	8007e9c <_printf_i+0xec>
 8007e98:	681d      	ldr	r5, [r3, #0]
 8007e9a:	e002      	b.n	8007ea2 <_printf_i+0xf2>
 8007e9c:	0669      	lsls	r1, r5, #25
 8007e9e:	d5fb      	bpl.n	8007e98 <_printf_i+0xe8>
 8007ea0:	881d      	ldrh	r5, [r3, #0]
 8007ea2:	4854      	ldr	r0, [pc, #336]	; (8007ff4 <_printf_i+0x244>)
 8007ea4:	2f6f      	cmp	r7, #111	; 0x6f
 8007ea6:	bf0c      	ite	eq
 8007ea8:	2308      	moveq	r3, #8
 8007eaa:	230a      	movne	r3, #10
 8007eac:	2100      	movs	r1, #0
 8007eae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007eb2:	6866      	ldr	r6, [r4, #4]
 8007eb4:	60a6      	str	r6, [r4, #8]
 8007eb6:	2e00      	cmp	r6, #0
 8007eb8:	bfa2      	ittt	ge
 8007eba:	6821      	ldrge	r1, [r4, #0]
 8007ebc:	f021 0104 	bicge.w	r1, r1, #4
 8007ec0:	6021      	strge	r1, [r4, #0]
 8007ec2:	b90d      	cbnz	r5, 8007ec8 <_printf_i+0x118>
 8007ec4:	2e00      	cmp	r6, #0
 8007ec6:	d04d      	beq.n	8007f64 <_printf_i+0x1b4>
 8007ec8:	4616      	mov	r6, r2
 8007eca:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ece:	fb03 5711 	mls	r7, r3, r1, r5
 8007ed2:	5dc7      	ldrb	r7, [r0, r7]
 8007ed4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ed8:	462f      	mov	r7, r5
 8007eda:	42bb      	cmp	r3, r7
 8007edc:	460d      	mov	r5, r1
 8007ede:	d9f4      	bls.n	8007eca <_printf_i+0x11a>
 8007ee0:	2b08      	cmp	r3, #8
 8007ee2:	d10b      	bne.n	8007efc <_printf_i+0x14c>
 8007ee4:	6823      	ldr	r3, [r4, #0]
 8007ee6:	07df      	lsls	r7, r3, #31
 8007ee8:	d508      	bpl.n	8007efc <_printf_i+0x14c>
 8007eea:	6923      	ldr	r3, [r4, #16]
 8007eec:	6861      	ldr	r1, [r4, #4]
 8007eee:	4299      	cmp	r1, r3
 8007ef0:	bfde      	ittt	le
 8007ef2:	2330      	movle	r3, #48	; 0x30
 8007ef4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ef8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007efc:	1b92      	subs	r2, r2, r6
 8007efe:	6122      	str	r2, [r4, #16]
 8007f00:	f8cd a000 	str.w	sl, [sp]
 8007f04:	464b      	mov	r3, r9
 8007f06:	aa03      	add	r2, sp, #12
 8007f08:	4621      	mov	r1, r4
 8007f0a:	4640      	mov	r0, r8
 8007f0c:	f7ff fee2 	bl	8007cd4 <_printf_common>
 8007f10:	3001      	adds	r0, #1
 8007f12:	d14c      	bne.n	8007fae <_printf_i+0x1fe>
 8007f14:	f04f 30ff 	mov.w	r0, #4294967295
 8007f18:	b004      	add	sp, #16
 8007f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f1e:	4835      	ldr	r0, [pc, #212]	; (8007ff4 <_printf_i+0x244>)
 8007f20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f24:	6823      	ldr	r3, [r4, #0]
 8007f26:	680e      	ldr	r6, [r1, #0]
 8007f28:	061f      	lsls	r7, r3, #24
 8007f2a:	f856 5b04 	ldr.w	r5, [r6], #4
 8007f2e:	600e      	str	r6, [r1, #0]
 8007f30:	d514      	bpl.n	8007f5c <_printf_i+0x1ac>
 8007f32:	07d9      	lsls	r1, r3, #31
 8007f34:	bf44      	itt	mi
 8007f36:	f043 0320 	orrmi.w	r3, r3, #32
 8007f3a:	6023      	strmi	r3, [r4, #0]
 8007f3c:	b91d      	cbnz	r5, 8007f46 <_printf_i+0x196>
 8007f3e:	6823      	ldr	r3, [r4, #0]
 8007f40:	f023 0320 	bic.w	r3, r3, #32
 8007f44:	6023      	str	r3, [r4, #0]
 8007f46:	2310      	movs	r3, #16
 8007f48:	e7b0      	b.n	8007eac <_printf_i+0xfc>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	f043 0320 	orr.w	r3, r3, #32
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	2378      	movs	r3, #120	; 0x78
 8007f54:	4828      	ldr	r0, [pc, #160]	; (8007ff8 <_printf_i+0x248>)
 8007f56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f5a:	e7e3      	b.n	8007f24 <_printf_i+0x174>
 8007f5c:	065e      	lsls	r6, r3, #25
 8007f5e:	bf48      	it	mi
 8007f60:	b2ad      	uxthmi	r5, r5
 8007f62:	e7e6      	b.n	8007f32 <_printf_i+0x182>
 8007f64:	4616      	mov	r6, r2
 8007f66:	e7bb      	b.n	8007ee0 <_printf_i+0x130>
 8007f68:	680b      	ldr	r3, [r1, #0]
 8007f6a:	6826      	ldr	r6, [r4, #0]
 8007f6c:	6960      	ldr	r0, [r4, #20]
 8007f6e:	1d1d      	adds	r5, r3, #4
 8007f70:	600d      	str	r5, [r1, #0]
 8007f72:	0635      	lsls	r5, r6, #24
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	d501      	bpl.n	8007f7c <_printf_i+0x1cc>
 8007f78:	6018      	str	r0, [r3, #0]
 8007f7a:	e002      	b.n	8007f82 <_printf_i+0x1d2>
 8007f7c:	0671      	lsls	r1, r6, #25
 8007f7e:	d5fb      	bpl.n	8007f78 <_printf_i+0x1c8>
 8007f80:	8018      	strh	r0, [r3, #0]
 8007f82:	2300      	movs	r3, #0
 8007f84:	6123      	str	r3, [r4, #16]
 8007f86:	4616      	mov	r6, r2
 8007f88:	e7ba      	b.n	8007f00 <_printf_i+0x150>
 8007f8a:	680b      	ldr	r3, [r1, #0]
 8007f8c:	1d1a      	adds	r2, r3, #4
 8007f8e:	600a      	str	r2, [r1, #0]
 8007f90:	681e      	ldr	r6, [r3, #0]
 8007f92:	6862      	ldr	r2, [r4, #4]
 8007f94:	2100      	movs	r1, #0
 8007f96:	4630      	mov	r0, r6
 8007f98:	f7f8 f922 	bl	80001e0 <memchr>
 8007f9c:	b108      	cbz	r0, 8007fa2 <_printf_i+0x1f2>
 8007f9e:	1b80      	subs	r0, r0, r6
 8007fa0:	6060      	str	r0, [r4, #4]
 8007fa2:	6863      	ldr	r3, [r4, #4]
 8007fa4:	6123      	str	r3, [r4, #16]
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fac:	e7a8      	b.n	8007f00 <_printf_i+0x150>
 8007fae:	6923      	ldr	r3, [r4, #16]
 8007fb0:	4632      	mov	r2, r6
 8007fb2:	4649      	mov	r1, r9
 8007fb4:	4640      	mov	r0, r8
 8007fb6:	47d0      	blx	sl
 8007fb8:	3001      	adds	r0, #1
 8007fba:	d0ab      	beq.n	8007f14 <_printf_i+0x164>
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	079b      	lsls	r3, r3, #30
 8007fc0:	d413      	bmi.n	8007fea <_printf_i+0x23a>
 8007fc2:	68e0      	ldr	r0, [r4, #12]
 8007fc4:	9b03      	ldr	r3, [sp, #12]
 8007fc6:	4298      	cmp	r0, r3
 8007fc8:	bfb8      	it	lt
 8007fca:	4618      	movlt	r0, r3
 8007fcc:	e7a4      	b.n	8007f18 <_printf_i+0x168>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	4632      	mov	r2, r6
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	4640      	mov	r0, r8
 8007fd6:	47d0      	blx	sl
 8007fd8:	3001      	adds	r0, #1
 8007fda:	d09b      	beq.n	8007f14 <_printf_i+0x164>
 8007fdc:	3501      	adds	r5, #1
 8007fde:	68e3      	ldr	r3, [r4, #12]
 8007fe0:	9903      	ldr	r1, [sp, #12]
 8007fe2:	1a5b      	subs	r3, r3, r1
 8007fe4:	42ab      	cmp	r3, r5
 8007fe6:	dcf2      	bgt.n	8007fce <_printf_i+0x21e>
 8007fe8:	e7eb      	b.n	8007fc2 <_printf_i+0x212>
 8007fea:	2500      	movs	r5, #0
 8007fec:	f104 0619 	add.w	r6, r4, #25
 8007ff0:	e7f5      	b.n	8007fde <_printf_i+0x22e>
 8007ff2:	bf00      	nop
 8007ff4:	080083a9 	.word	0x080083a9
 8007ff8:	080083ba 	.word	0x080083ba

08007ffc <memmove>:
 8007ffc:	4288      	cmp	r0, r1
 8007ffe:	b510      	push	{r4, lr}
 8008000:	eb01 0402 	add.w	r4, r1, r2
 8008004:	d902      	bls.n	800800c <memmove+0x10>
 8008006:	4284      	cmp	r4, r0
 8008008:	4623      	mov	r3, r4
 800800a:	d807      	bhi.n	800801c <memmove+0x20>
 800800c:	1e43      	subs	r3, r0, #1
 800800e:	42a1      	cmp	r1, r4
 8008010:	d008      	beq.n	8008024 <memmove+0x28>
 8008012:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008016:	f803 2f01 	strb.w	r2, [r3, #1]!
 800801a:	e7f8      	b.n	800800e <memmove+0x12>
 800801c:	4402      	add	r2, r0
 800801e:	4601      	mov	r1, r0
 8008020:	428a      	cmp	r2, r1
 8008022:	d100      	bne.n	8008026 <memmove+0x2a>
 8008024:	bd10      	pop	{r4, pc}
 8008026:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800802a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800802e:	e7f7      	b.n	8008020 <memmove+0x24>

08008030 <_free_r>:
 8008030:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008032:	2900      	cmp	r1, #0
 8008034:	d048      	beq.n	80080c8 <_free_r+0x98>
 8008036:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800803a:	9001      	str	r0, [sp, #4]
 800803c:	2b00      	cmp	r3, #0
 800803e:	f1a1 0404 	sub.w	r4, r1, #4
 8008042:	bfb8      	it	lt
 8008044:	18e4      	addlt	r4, r4, r3
 8008046:	f000 f8d3 	bl	80081f0 <__malloc_lock>
 800804a:	4a20      	ldr	r2, [pc, #128]	; (80080cc <_free_r+0x9c>)
 800804c:	9801      	ldr	r0, [sp, #4]
 800804e:	6813      	ldr	r3, [r2, #0]
 8008050:	4615      	mov	r5, r2
 8008052:	b933      	cbnz	r3, 8008062 <_free_r+0x32>
 8008054:	6063      	str	r3, [r4, #4]
 8008056:	6014      	str	r4, [r2, #0]
 8008058:	b003      	add	sp, #12
 800805a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800805e:	f000 b8cd 	b.w	80081fc <__malloc_unlock>
 8008062:	42a3      	cmp	r3, r4
 8008064:	d90b      	bls.n	800807e <_free_r+0x4e>
 8008066:	6821      	ldr	r1, [r4, #0]
 8008068:	1862      	adds	r2, r4, r1
 800806a:	4293      	cmp	r3, r2
 800806c:	bf04      	itt	eq
 800806e:	681a      	ldreq	r2, [r3, #0]
 8008070:	685b      	ldreq	r3, [r3, #4]
 8008072:	6063      	str	r3, [r4, #4]
 8008074:	bf04      	itt	eq
 8008076:	1852      	addeq	r2, r2, r1
 8008078:	6022      	streq	r2, [r4, #0]
 800807a:	602c      	str	r4, [r5, #0]
 800807c:	e7ec      	b.n	8008058 <_free_r+0x28>
 800807e:	461a      	mov	r2, r3
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	b10b      	cbz	r3, 8008088 <_free_r+0x58>
 8008084:	42a3      	cmp	r3, r4
 8008086:	d9fa      	bls.n	800807e <_free_r+0x4e>
 8008088:	6811      	ldr	r1, [r2, #0]
 800808a:	1855      	adds	r5, r2, r1
 800808c:	42a5      	cmp	r5, r4
 800808e:	d10b      	bne.n	80080a8 <_free_r+0x78>
 8008090:	6824      	ldr	r4, [r4, #0]
 8008092:	4421      	add	r1, r4
 8008094:	1854      	adds	r4, r2, r1
 8008096:	42a3      	cmp	r3, r4
 8008098:	6011      	str	r1, [r2, #0]
 800809a:	d1dd      	bne.n	8008058 <_free_r+0x28>
 800809c:	681c      	ldr	r4, [r3, #0]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	6053      	str	r3, [r2, #4]
 80080a2:	4421      	add	r1, r4
 80080a4:	6011      	str	r1, [r2, #0]
 80080a6:	e7d7      	b.n	8008058 <_free_r+0x28>
 80080a8:	d902      	bls.n	80080b0 <_free_r+0x80>
 80080aa:	230c      	movs	r3, #12
 80080ac:	6003      	str	r3, [r0, #0]
 80080ae:	e7d3      	b.n	8008058 <_free_r+0x28>
 80080b0:	6825      	ldr	r5, [r4, #0]
 80080b2:	1961      	adds	r1, r4, r5
 80080b4:	428b      	cmp	r3, r1
 80080b6:	bf04      	itt	eq
 80080b8:	6819      	ldreq	r1, [r3, #0]
 80080ba:	685b      	ldreq	r3, [r3, #4]
 80080bc:	6063      	str	r3, [r4, #4]
 80080be:	bf04      	itt	eq
 80080c0:	1949      	addeq	r1, r1, r5
 80080c2:	6021      	streq	r1, [r4, #0]
 80080c4:	6054      	str	r4, [r2, #4]
 80080c6:	e7c7      	b.n	8008058 <_free_r+0x28>
 80080c8:	b003      	add	sp, #12
 80080ca:	bd30      	pop	{r4, r5, pc}
 80080cc:	200082dc 	.word	0x200082dc

080080d0 <_malloc_r>:
 80080d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d2:	1ccd      	adds	r5, r1, #3
 80080d4:	f025 0503 	bic.w	r5, r5, #3
 80080d8:	3508      	adds	r5, #8
 80080da:	2d0c      	cmp	r5, #12
 80080dc:	bf38      	it	cc
 80080de:	250c      	movcc	r5, #12
 80080e0:	2d00      	cmp	r5, #0
 80080e2:	4606      	mov	r6, r0
 80080e4:	db01      	blt.n	80080ea <_malloc_r+0x1a>
 80080e6:	42a9      	cmp	r1, r5
 80080e8:	d903      	bls.n	80080f2 <_malloc_r+0x22>
 80080ea:	230c      	movs	r3, #12
 80080ec:	6033      	str	r3, [r6, #0]
 80080ee:	2000      	movs	r0, #0
 80080f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080f2:	f000 f87d 	bl	80081f0 <__malloc_lock>
 80080f6:	4921      	ldr	r1, [pc, #132]	; (800817c <_malloc_r+0xac>)
 80080f8:	680a      	ldr	r2, [r1, #0]
 80080fa:	4614      	mov	r4, r2
 80080fc:	b99c      	cbnz	r4, 8008126 <_malloc_r+0x56>
 80080fe:	4f20      	ldr	r7, [pc, #128]	; (8008180 <_malloc_r+0xb0>)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	b923      	cbnz	r3, 800810e <_malloc_r+0x3e>
 8008104:	4621      	mov	r1, r4
 8008106:	4630      	mov	r0, r6
 8008108:	f000 f862 	bl	80081d0 <_sbrk_r>
 800810c:	6038      	str	r0, [r7, #0]
 800810e:	4629      	mov	r1, r5
 8008110:	4630      	mov	r0, r6
 8008112:	f000 f85d 	bl	80081d0 <_sbrk_r>
 8008116:	1c43      	adds	r3, r0, #1
 8008118:	d123      	bne.n	8008162 <_malloc_r+0x92>
 800811a:	230c      	movs	r3, #12
 800811c:	6033      	str	r3, [r6, #0]
 800811e:	4630      	mov	r0, r6
 8008120:	f000 f86c 	bl	80081fc <__malloc_unlock>
 8008124:	e7e3      	b.n	80080ee <_malloc_r+0x1e>
 8008126:	6823      	ldr	r3, [r4, #0]
 8008128:	1b5b      	subs	r3, r3, r5
 800812a:	d417      	bmi.n	800815c <_malloc_r+0x8c>
 800812c:	2b0b      	cmp	r3, #11
 800812e:	d903      	bls.n	8008138 <_malloc_r+0x68>
 8008130:	6023      	str	r3, [r4, #0]
 8008132:	441c      	add	r4, r3
 8008134:	6025      	str	r5, [r4, #0]
 8008136:	e004      	b.n	8008142 <_malloc_r+0x72>
 8008138:	6863      	ldr	r3, [r4, #4]
 800813a:	42a2      	cmp	r2, r4
 800813c:	bf0c      	ite	eq
 800813e:	600b      	streq	r3, [r1, #0]
 8008140:	6053      	strne	r3, [r2, #4]
 8008142:	4630      	mov	r0, r6
 8008144:	f000 f85a 	bl	80081fc <__malloc_unlock>
 8008148:	f104 000b 	add.w	r0, r4, #11
 800814c:	1d23      	adds	r3, r4, #4
 800814e:	f020 0007 	bic.w	r0, r0, #7
 8008152:	1ac2      	subs	r2, r0, r3
 8008154:	d0cc      	beq.n	80080f0 <_malloc_r+0x20>
 8008156:	1a1b      	subs	r3, r3, r0
 8008158:	50a3      	str	r3, [r4, r2]
 800815a:	e7c9      	b.n	80080f0 <_malloc_r+0x20>
 800815c:	4622      	mov	r2, r4
 800815e:	6864      	ldr	r4, [r4, #4]
 8008160:	e7cc      	b.n	80080fc <_malloc_r+0x2c>
 8008162:	1cc4      	adds	r4, r0, #3
 8008164:	f024 0403 	bic.w	r4, r4, #3
 8008168:	42a0      	cmp	r0, r4
 800816a:	d0e3      	beq.n	8008134 <_malloc_r+0x64>
 800816c:	1a21      	subs	r1, r4, r0
 800816e:	4630      	mov	r0, r6
 8008170:	f000 f82e 	bl	80081d0 <_sbrk_r>
 8008174:	3001      	adds	r0, #1
 8008176:	d1dd      	bne.n	8008134 <_malloc_r+0x64>
 8008178:	e7cf      	b.n	800811a <_malloc_r+0x4a>
 800817a:	bf00      	nop
 800817c:	200082dc 	.word	0x200082dc
 8008180:	200082e0 	.word	0x200082e0

08008184 <_realloc_r>:
 8008184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008186:	4607      	mov	r7, r0
 8008188:	4614      	mov	r4, r2
 800818a:	460e      	mov	r6, r1
 800818c:	b921      	cbnz	r1, 8008198 <_realloc_r+0x14>
 800818e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008192:	4611      	mov	r1, r2
 8008194:	f7ff bf9c 	b.w	80080d0 <_malloc_r>
 8008198:	b922      	cbnz	r2, 80081a4 <_realloc_r+0x20>
 800819a:	f7ff ff49 	bl	8008030 <_free_r>
 800819e:	4625      	mov	r5, r4
 80081a0:	4628      	mov	r0, r5
 80081a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081a4:	f000 f830 	bl	8008208 <_malloc_usable_size_r>
 80081a8:	42a0      	cmp	r0, r4
 80081aa:	d20f      	bcs.n	80081cc <_realloc_r+0x48>
 80081ac:	4621      	mov	r1, r4
 80081ae:	4638      	mov	r0, r7
 80081b0:	f7ff ff8e 	bl	80080d0 <_malloc_r>
 80081b4:	4605      	mov	r5, r0
 80081b6:	2800      	cmp	r0, #0
 80081b8:	d0f2      	beq.n	80081a0 <_realloc_r+0x1c>
 80081ba:	4631      	mov	r1, r6
 80081bc:	4622      	mov	r2, r4
 80081be:	f7ff fbf7 	bl	80079b0 <memcpy>
 80081c2:	4631      	mov	r1, r6
 80081c4:	4638      	mov	r0, r7
 80081c6:	f7ff ff33 	bl	8008030 <_free_r>
 80081ca:	e7e9      	b.n	80081a0 <_realloc_r+0x1c>
 80081cc:	4635      	mov	r5, r6
 80081ce:	e7e7      	b.n	80081a0 <_realloc_r+0x1c>

080081d0 <_sbrk_r>:
 80081d0:	b538      	push	{r3, r4, r5, lr}
 80081d2:	4d06      	ldr	r5, [pc, #24]	; (80081ec <_sbrk_r+0x1c>)
 80081d4:	2300      	movs	r3, #0
 80081d6:	4604      	mov	r4, r0
 80081d8:	4608      	mov	r0, r1
 80081da:	602b      	str	r3, [r5, #0]
 80081dc:	f7f8 ffba 	bl	8001154 <_sbrk>
 80081e0:	1c43      	adds	r3, r0, #1
 80081e2:	d102      	bne.n	80081ea <_sbrk_r+0x1a>
 80081e4:	682b      	ldr	r3, [r5, #0]
 80081e6:	b103      	cbz	r3, 80081ea <_sbrk_r+0x1a>
 80081e8:	6023      	str	r3, [r4, #0]
 80081ea:	bd38      	pop	{r3, r4, r5, pc}
 80081ec:	200085f4 	.word	0x200085f4

080081f0 <__malloc_lock>:
 80081f0:	4801      	ldr	r0, [pc, #4]	; (80081f8 <__malloc_lock+0x8>)
 80081f2:	f000 b811 	b.w	8008218 <__retarget_lock_acquire_recursive>
 80081f6:	bf00      	nop
 80081f8:	200085fc 	.word	0x200085fc

080081fc <__malloc_unlock>:
 80081fc:	4801      	ldr	r0, [pc, #4]	; (8008204 <__malloc_unlock+0x8>)
 80081fe:	f000 b80c 	b.w	800821a <__retarget_lock_release_recursive>
 8008202:	bf00      	nop
 8008204:	200085fc 	.word	0x200085fc

08008208 <_malloc_usable_size_r>:
 8008208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800820c:	1f18      	subs	r0, r3, #4
 800820e:	2b00      	cmp	r3, #0
 8008210:	bfbc      	itt	lt
 8008212:	580b      	ldrlt	r3, [r1, r0]
 8008214:	18c0      	addlt	r0, r0, r3
 8008216:	4770      	bx	lr

08008218 <__retarget_lock_acquire_recursive>:
 8008218:	4770      	bx	lr

0800821a <__retarget_lock_release_recursive>:
 800821a:	4770      	bx	lr

0800821c <_init>:
 800821c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821e:	bf00      	nop
 8008220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008222:	bc08      	pop	{r3}
 8008224:	469e      	mov	lr, r3
 8008226:	4770      	bx	lr

08008228 <_fini>:
 8008228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800822a:	bf00      	nop
 800822c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800822e:	bc08      	pop	{r3}
 8008230:	469e      	mov	lr, r3
 8008232:	4770      	bx	lr
