
ILD6150-PCA9685.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08006a5c  08006a5c  00016a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b20  08006b20  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08006b20  08006b20  00016b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b28  08006b28  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b28  08006b28  00016b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b2c  08006b2c  00016b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000846c  2000001c  08006b4c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008488  08006b4c  00028488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020d59  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000391d  00000000  00000000  00040da5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001af8  00000000  00000000  000446c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001950  00000000  00000000  000461c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003b2c  00000000  00000000  00047b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015429  00000000  00000000  0004b63c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7c8c  00000000  00000000  00060a65  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001386f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072a4  00000000  00000000  0013876c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a44 	.word	0x08006a44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08006a44 	.word	0x08006a44

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fd67 	bl	8000fa6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f82c 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f966 	bl	80007ac <MX_GPIO_Init>
  MX_DMA_Init();
 80004e0:	f000 f93e 	bl	8000760 <MX_DMA_Init>
  MX_I2C1_Init();
 80004e4:	f000 f8cc 	bl	8000680 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f908 	bl	80006fc <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80004ec:	f000 f894 	bl	8000618 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f0:	f003 fe14 	bl	800411c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f4:	4a09      	ldr	r2, [pc, #36]	; (800051c <main+0x4c>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	4809      	ldr	r0, [pc, #36]	; (8000520 <main+0x50>)
 80004fa:	f003 fe79 	bl	80041f0 <osThreadNew>
 80004fe:	4602      	mov	r2, r0
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <main+0x54>)
 8000502:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  comUsartTaskHandle = osThreadNew(ComUsartTask, NULL, &comUsartTask_attributes);
 8000504:	4a08      	ldr	r2, [pc, #32]	; (8000528 <main+0x58>)
 8000506:	2100      	movs	r1, #0
 8000508:	4808      	ldr	r0, [pc, #32]	; (800052c <main+0x5c>)
 800050a:	f003 fe71 	bl	80041f0 <osThreadNew>
 800050e:	4602      	mov	r2, r0
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <main+0x60>)
 8000512:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000514:	f003 fe36 	bl	8004184 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000518:	e7fe      	b.n	8000518 <main+0x48>
 800051a:	bf00      	nop
 800051c:	08006a90 	.word	0x08006a90
 8000520:	08000afd 	.word	0x08000afd
 8000524:	2000826c 	.word	0x2000826c
 8000528:	08006ab4 	.word	0x08006ab4
 800052c:	08000a5d 	.word	0x08000a5d
 8000530:	200083f4 	.word	0x200083f4

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b0ac      	sub	sp, #176	; 0xb0
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800053e:	2244      	movs	r2, #68	; 0x44
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f006 fa75 	bl	8006a32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2254      	movs	r2, #84	; 0x54
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f006 fa67 	bl	8006a32 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000564:	f001 fbf0 	bl	8001d48 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000568:	4b2a      	ldr	r3, [pc, #168]	; (8000614 <SystemClock_Config+0xe0>)
 800056a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800056e:	4a29      	ldr	r2, [pc, #164]	; (8000614 <SystemClock_Config+0xe0>)
 8000570:	f023 0318 	bic.w	r3, r3, #24
 8000574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000578:	2314      	movs	r3, #20
 800057a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800058c:	2360      	movs	r3, #96	; 0x60
 800058e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000592:	2300      	movs	r3, #0
 8000594:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800059c:	4618      	mov	r0, r3
 800059e:	f001 fc47 	bl	8001e30 <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005a8:	f000 fac4 	bl	8000b34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005b0:	2300      	movs	r3, #0
 80005b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 f852 	bl	8002670 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005d2:	f000 faaf 	bl	8000b34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80005d6:	2342      	movs	r3, #66	; 0x42
 80005d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80005da:	2304      	movs	r3, #4
 80005dc:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005de:	2300      	movs	r3, #0
 80005e0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 fa77 	bl	8002ad8 <HAL_RCCEx_PeriphCLKConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005f0:	f000 faa0 	bl	8000b34 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f8:	f001 fbc4 	bl	8001d84 <HAL_PWREx_ControlVoltageScaling>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000602:	f000 fa97 	bl	8000b34 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000606:	f002 fc59 	bl	8002ebc <HAL_RCCEx_EnableMSIPLLMode>
}
 800060a:	bf00      	nop
 800060c:	37b0      	adds	r7, #176	; 0xb0
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000

08000618 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800061c:	4b16      	ldr	r3, [pc, #88]	; (8000678 <MX_CAN1_Init+0x60>)
 800061e:	4a17      	ldr	r2, [pc, #92]	; (800067c <MX_CAN1_Init+0x64>)
 8000620:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_CAN1_Init+0x60>)
 8000624:	2210      	movs	r2, #16
 8000626:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MX_CAN1_Init+0x60>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <MX_CAN1_Init+0x60>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000634:	4b10      	ldr	r3, [pc, #64]	; (8000678 <MX_CAN1_Init+0x60>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_CAN1_Init+0x60>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000640:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <MX_CAN1_Init+0x60>)
 8000642:	2200      	movs	r2, #0
 8000644:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_CAN1_Init+0x60>)
 8000648:	2200      	movs	r2, #0
 800064a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <MX_CAN1_Init+0x60>)
 800064e:	2200      	movs	r2, #0
 8000650:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_CAN1_Init+0x60>)
 8000654:	2200      	movs	r2, #0
 8000656:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000658:	4b07      	ldr	r3, [pc, #28]	; (8000678 <MX_CAN1_Init+0x60>)
 800065a:	2200      	movs	r2, #0
 800065c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_CAN1_Init+0x60>)
 8000660:	2200      	movs	r2, #0
 8000662:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <MX_CAN1_Init+0x60>)
 8000666:	f000 fcd7 	bl	8001018 <HAL_CAN_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000670:	f000 fa60 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200083cc 	.word	0x200083cc
 800067c:	40006400 	.word	0x40006400

08000680 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_I2C1_Init+0x74>)
 8000686:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <MX_I2C1_Init+0x78>)
 8000688:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800068a:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_I2C1_Init+0x74>)
 800068c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000690:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <MX_I2C1_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_I2C1_Init+0x74>)
 800069a:	2201      	movs	r2, #1
 800069c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006bc:	480d      	ldr	r0, [pc, #52]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006be:	f001 fa1d 	bl	8001afc <HAL_I2C_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c8:	f000 fa34 	bl	8000b34 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006cc:	2100      	movs	r1, #0
 80006ce:	4809      	ldr	r0, [pc, #36]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006d0:	f001 faa3 	bl	8001c1a <HAL_I2CEx_ConfigAnalogFilter>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006da:	f000 fa2b 	bl	8000b34 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006de:	2100      	movs	r1, #0
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006e2:	f001 fae5 	bl	8001cb0 <HAL_I2CEx_ConfigDigitalFilter>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006ec:	f000 fa22 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200082b8 	.word	0x200082b8
 80006f8:	40005400 	.word	0x40005400

080006fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000702:	4a16      	ldr	r2, [pc, #88]	; (800075c <MX_USART2_UART_Init+0x60>)
 8000704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000714:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000716:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800071a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 800071e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000744:	f002 ff3a 	bl	80035bc <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 800074e:	f000 f9f1 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000834c 	.word	0x2000834c
 800075c:	40004400 	.word	0x40004400

08000760 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_DMA_Init+0x48>)
 8000768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800076a:	4a0f      	ldr	r2, [pc, #60]	; (80007a8 <MX_DMA_Init+0x48>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6493      	str	r3, [r2, #72]	; 0x48
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <MX_DMA_Init+0x48>)
 8000774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2105      	movs	r1, #5
 8000782:	2010      	movs	r0, #16
 8000784:	f000 fdfc 	bl	8001380 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000788:	2010      	movs	r0, #16
 800078a:	f000 fe15 	bl	80013b8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2105      	movs	r1, #5
 8000792:	2011      	movs	r0, #17
 8000794:	f000 fdf4 	bl	8001380 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000798:	2011      	movs	r0, #17
 800079a:	f000 fe0d 	bl	80013b8 <HAL_NVIC_EnableIRQ>

}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a16      	ldr	r2, [pc, #88]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	4a10      	ldr	r2, [pc, #64]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_GPIO_Init+0x8c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2108      	movs	r1, #8
 800080e:	480b      	ldr	r0, [pc, #44]	; (800083c <MX_GPIO_Init+0x90>)
 8000810:	f001 f942 	bl	8001a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000814:	2308      	movs	r3, #8
 8000816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	4619      	mov	r1, r3
 800082a:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_GPIO_Init+0x90>)
 800082c:	f000 ffca 	bl	80017c4 <HAL_GPIO_Init>

}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40021000 	.word	0x40021000
 800083c:	48000400 	.word	0x48000400

08000840 <scenario3>:
	 		osDelay(shareddelay);
	 	 }
	 }
}

void scenario3(){
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b091      	sub	sp, #68	; 0x44
 8000844:	af00      	add	r7, sp, #0
	//uint8_t I2C_address = 0x80;
	//pca9685_init(&hi2c1, I2C_address);

	int n = 10;
 8000846:	230a      	movs	r3, #10
 8000848:	623b      	str	r3, [r7, #32]
	int m = 1;
 800084a:	2301      	movs	r3, #1
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t temp[n*m];
 800084e:	6a3b      	ldr	r3, [r7, #32]
 8000850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000852:	fb02 f003 	mul.w	r0, r2, r3
 8000856:	1e43      	subs	r3, r0, #1
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
 800085a:	4603      	mov	r3, r0
 800085c:	4619      	mov	r1, r3
 800085e:	f04f 0200 	mov.w	r2, #0
 8000862:	f04f 0300 	mov.w	r3, #0
 8000866:	f04f 0400 	mov.w	r4, #0
 800086a:	0114      	lsls	r4, r2, #4
 800086c:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8000870:	010b      	lsls	r3, r1, #4
 8000872:	4603      	mov	r3, r0
 8000874:	4619      	mov	r1, r3
 8000876:	f04f 0200 	mov.w	r2, #0
 800087a:	f04f 0300 	mov.w	r3, #0
 800087e:	f04f 0400 	mov.w	r4, #0
 8000882:	0114      	lsls	r4, r2, #4
 8000884:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8000888:	010b      	lsls	r3, r1, #4
 800088a:	4603      	mov	r3, r0
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	3301      	adds	r3, #1
 8000890:	3307      	adds	r3, #7
 8000892:	08db      	lsrs	r3, r3, #3
 8000894:	00db      	lsls	r3, r3, #3
 8000896:	ebad 0d03 	sub.w	sp, sp, r3
 800089a:	466b      	mov	r3, sp
 800089c:	3301      	adds	r3, #1
 800089e:	085b      	lsrs	r3, r3, #1
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t id[n];
 80008a4:	6a38      	ldr	r0, [r7, #32]
 80008a6:	1e43      	subs	r3, r0, #1
 80008a8:	633b      	str	r3, [r7, #48]	; 0x30
 80008aa:	4603      	mov	r3, r0
 80008ac:	4619      	mov	r1, r3
 80008ae:	f04f 0200 	mov.w	r2, #0
 80008b2:	f04f 0300 	mov.w	r3, #0
 80008b6:	f04f 0400 	mov.w	r4, #0
 80008ba:	00d4      	lsls	r4, r2, #3
 80008bc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80008c0:	00cb      	lsls	r3, r1, #3
 80008c2:	4603      	mov	r3, r0
 80008c4:	4619      	mov	r1, r3
 80008c6:	f04f 0200 	mov.w	r2, #0
 80008ca:	f04f 0300 	mov.w	r3, #0
 80008ce:	f04f 0400 	mov.w	r4, #0
 80008d2:	00d4      	lsls	r4, r2, #3
 80008d4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80008d8:	00cb      	lsls	r3, r1, #3
 80008da:	4603      	mov	r3, r0
 80008dc:	3307      	adds	r3, #7
 80008de:	08db      	lsrs	r3, r3, #3
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	ebad 0d03 	sub.w	sp, sp, r3
 80008e6:	466b      	mov	r3, sp
 80008e8:	3300      	adds	r3, #0
 80008ea:	637b      	str	r3, [r7, #52]	; 0x34
    float x[n*m];
 80008ec:	6a3b      	ldr	r3, [r7, #32]
 80008ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008f0:	fb02 f003 	mul.w	r0, r2, r3
 80008f4:	1e43      	subs	r3, r0, #1
 80008f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80008f8:	4603      	mov	r3, r0
 80008fa:	4619      	mov	r1, r3
 80008fc:	f04f 0200 	mov.w	r2, #0
 8000900:	f04f 0300 	mov.w	r3, #0
 8000904:	f04f 0400 	mov.w	r4, #0
 8000908:	0154      	lsls	r4, r2, #5
 800090a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800090e:	014b      	lsls	r3, r1, #5
 8000910:	4603      	mov	r3, r0
 8000912:	4619      	mov	r1, r3
 8000914:	f04f 0200 	mov.w	r2, #0
 8000918:	f04f 0300 	mov.w	r3, #0
 800091c:	f04f 0400 	mov.w	r4, #0
 8000920:	0154      	lsls	r4, r2, #5
 8000922:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000926:	014b      	lsls	r3, r1, #5
 8000928:	4603      	mov	r3, r0
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	3303      	adds	r3, #3
 800092e:	3307      	adds	r3, #7
 8000930:	08db      	lsrs	r3, r3, #3
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	ebad 0d03 	sub.w	sp, sp, r3
 8000938:	466b      	mov	r3, sp
 800093a:	3303      	adds	r3, #3
 800093c:	089b      	lsrs	r3, r3, #2
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	63fb      	str	r3, [r7, #60]	; 0x3c
    float y[n*m];
 8000942:	6a3b      	ldr	r3, [r7, #32]
 8000944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000946:	fb02 f003 	mul.w	r0, r2, r3
 800094a:	1e43      	subs	r3, r0, #1
 800094c:	61fb      	str	r3, [r7, #28]
 800094e:	4603      	mov	r3, r0
 8000950:	4619      	mov	r1, r3
 8000952:	f04f 0200 	mov.w	r2, #0
 8000956:	f04f 0300 	mov.w	r3, #0
 800095a:	f04f 0400 	mov.w	r4, #0
 800095e:	0154      	lsls	r4, r2, #5
 8000960:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000964:	014b      	lsls	r3, r1, #5
 8000966:	4603      	mov	r3, r0
 8000968:	4619      	mov	r1, r3
 800096a:	f04f 0200 	mov.w	r2, #0
 800096e:	f04f 0300 	mov.w	r3, #0
 8000972:	f04f 0400 	mov.w	r4, #0
 8000976:	0154      	lsls	r4, r2, #5
 8000978:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800097c:	014b      	lsls	r3, r1, #5
 800097e:	4603      	mov	r3, r0
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	3303      	adds	r3, #3
 8000984:	3307      	adds	r3, #7
 8000986:	08db      	lsrs	r3, r3, #3
 8000988:	00db      	lsls	r3, r3, #3
 800098a:	ebad 0d03 	sub.w	sp, sp, r3
 800098e:	466b      	mov	r3, sp
 8000990:	3303      	adds	r3, #3
 8000992:	089b      	lsrs	r3, r3, #2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	61bb      	str	r3, [r7, #24]
    float z[n*m];
 8000998:	6a3b      	ldr	r3, [r7, #32]
 800099a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800099c:	fb02 f003 	mul.w	r0, r2, r3
 80009a0:	1e43      	subs	r3, r0, #1
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	4603      	mov	r3, r0
 80009a6:	4619      	mov	r1, r3
 80009a8:	f04f 0200 	mov.w	r2, #0
 80009ac:	f04f 0300 	mov.w	r3, #0
 80009b0:	f04f 0400 	mov.w	r4, #0
 80009b4:	0154      	lsls	r4, r2, #5
 80009b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80009ba:	014b      	lsls	r3, r1, #5
 80009bc:	4603      	mov	r3, r0
 80009be:	4619      	mov	r1, r3
 80009c0:	f04f 0200 	mov.w	r2, #0
 80009c4:	f04f 0300 	mov.w	r3, #0
 80009c8:	f04f 0400 	mov.w	r4, #0
 80009cc:	0154      	lsls	r4, r2, #5
 80009ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80009d2:	014b      	lsls	r3, r1, #5
 80009d4:	4603      	mov	r3, r0
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	3303      	adds	r3, #3
 80009da:	3307      	adds	r3, #7
 80009dc:	08db      	lsrs	r3, r3, #3
 80009de:	00db      	lsls	r3, r3, #3
 80009e0:	ebad 0d03 	sub.w	sp, sp, r3
 80009e4:	466b      	mov	r3, sp
 80009e6:	3303      	adds	r3, #3
 80009e8:	089b      	lsrs	r3, r3, #2
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	613b      	str	r3, [r7, #16]
    float power[n*m];
 80009ee:	6a3b      	ldr	r3, [r7, #32]
 80009f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009f2:	fb02 f003 	mul.w	r0, r2, r3
 80009f6:	1e43      	subs	r3, r0, #1
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	4603      	mov	r3, r0
 80009fc:	4619      	mov	r1, r3
 80009fe:	f04f 0200 	mov.w	r2, #0
 8000a02:	f04f 0300 	mov.w	r3, #0
 8000a06:	f04f 0400 	mov.w	r4, #0
 8000a0a:	0154      	lsls	r4, r2, #5
 8000a0c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000a10:	014b      	lsls	r3, r1, #5
 8000a12:	4603      	mov	r3, r0
 8000a14:	4619      	mov	r1, r3
 8000a16:	f04f 0200 	mov.w	r2, #0
 8000a1a:	f04f 0300 	mov.w	r3, #0
 8000a1e:	f04f 0400 	mov.w	r4, #0
 8000a22:	0154      	lsls	r4, r2, #5
 8000a24:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000a28:	014b      	lsls	r3, r1, #5
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	3303      	adds	r3, #3
 8000a30:	3307      	adds	r3, #7
 8000a32:	08db      	lsrs	r3, r3, #3
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	ebad 0d03 	sub.w	sp, sp, r3
 8000a3a:	466b      	mov	r3, sp
 8000a3c:	3303      	adds	r3, #3
 8000a3e:	089b      	lsrs	r3, r3, #2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	60bb      	str	r3, [r7, #8]

	uint8_t size = 1;
 8000a44:	2301      	movs	r3, #1
 8000a46:	71fb      	strb	r3, [r7, #7]
	//LUT_TabTypeDef pLUTChannel[size];

	for(;;){
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000a48:	2108      	movs	r1, #8
 8000a4a:	4803      	ldr	r0, [pc, #12]	; (8000a58 <scenario3+0x218>)
 8000a4c:	f001 f83c 	bl	8001ac8 <HAL_GPIO_TogglePin>
		osDelay(100);
 8000a50:	2064      	movs	r0, #100	; 0x64
 8000a52:	f003 fc73 	bl	800433c <osDelay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000a56:	e7f7      	b.n	8000a48 <scenario3+0x208>
 8000a58:	48000400 	.word	0x48000400

08000a5c <ComUsartTask>:
	}
}

void ComUsartTask(void *argument){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	uint8_t rxBuffer[8];
	for(;;)
	{
		while (HAL_UART_Receive_DMA(&huart2, rxBuffer, sizeof(rxBuffer)) != HAL_OK)
 8000a64:	e006      	b.n	8000a74 <ComUsartTask+0x18>
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000a66:	2108      	movs	r1, #8
 8000a68:	481f      	ldr	r0, [pc, #124]	; (8000ae8 <ComUsartTask+0x8c>)
 8000a6a:	f001 f82d 	bl	8001ac8 <HAL_GPIO_TogglePin>
			osDelay(5);
 8000a6e:	2005      	movs	r0, #5
 8000a70:	f003 fc64 	bl	800433c <osDelay>
		while (HAL_UART_Receive_DMA(&huart2, rxBuffer, sizeof(rxBuffer)) != HAL_OK)
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	2208      	movs	r2, #8
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	481b      	ldr	r0, [pc, #108]	; (8000aec <ComUsartTask+0x90>)
 8000a7e:	f002 fe7f 	bl	8003780 <HAL_UART_Receive_DMA>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d1ee      	bne.n	8000a66 <ComUsartTask+0xa>
		}
		osDelay(5);
 8000a88:	2005      	movs	r0, #5
 8000a8a:	f003 fc57 	bl	800433c <osDelay>
		if(rxBuffer[0]==0x4D){
 8000a8e:	7a3b      	ldrb	r3, [r7, #8]
 8000a90:	2b4d      	cmp	r3, #77	; 0x4d
 8000a92:	d112      	bne.n	8000aba <ComUsartTask+0x5e>
			HAL_UART_Transmit(&huart2,&rxBuffer[1], 1,500);
 8000a94:	f107 0308 	add.w	r3, r7, #8
 8000a98:	1c59      	adds	r1, r3, #1
 8000a9a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	4812      	ldr	r0, [pc, #72]	; (8000aec <ComUsartTask+0x90>)
 8000aa2:	f002 fdd9 	bl	8003658 <HAL_UART_Transmit>
			sharedvar = 16;
 8000aa6:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <ComUsartTask+0x94>)
 8000aa8:	2210      	movs	r2, #16
 8000aaa:	801a      	strh	r2, [r3, #0]
			sharedchannel = 0x9395;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <ComUsartTask+0x98>)
 8000aae:	f249 3295 	movw	r2, #37781	; 0x9395
 8000ab2:	801a      	strh	r2, [r3, #0]
			shareddelay = 5;
 8000ab4:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <ComUsartTask+0x9c>)
 8000ab6:	2205      	movs	r2, #5
 8000ab8:	801a      	strh	r2, [r3, #0]
			//sharedvar = (uint16_t) atoi(rxBuffer[5]);
		}
		if(rxBuffer[0]==0x44){
 8000aba:	7a3b      	ldrb	r3, [r7, #8]
 8000abc:	2b44      	cmp	r3, #68	; 0x44
 8000abe:	d1d9      	bne.n	8000a74 <ComUsartTask+0x18>
			HAL_UART_Transmit(&huart2,&rxBuffer[1], 1,500);
 8000ac0:	f107 0308 	add.w	r3, r7, #8
 8000ac4:	1c59      	adds	r1, r3, #1
 8000ac6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000aca:	2201      	movs	r2, #1
 8000acc:	4807      	ldr	r0, [pc, #28]	; (8000aec <ComUsartTask+0x90>)
 8000ace:	f002 fdc3 	bl	8003658 <HAL_UART_Transmit>
			sharedvar = 16;
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <ComUsartTask+0x94>)
 8000ad4:	2210      	movs	r2, #16
 8000ad6:	801a      	strh	r2, [r3, #0]
			sharedchannel = 0x0F05;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <ComUsartTask+0x98>)
 8000ada:	f640 7205 	movw	r2, #3845	; 0xf05
 8000ade:	801a      	strh	r2, [r3, #0]
			shareddelay = 1;
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <ComUsartTask+0x9c>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	801a      	strh	r2, [r3, #0]
		while (HAL_UART_Receive_DMA(&huart2, rxBuffer, sizeof(rxBuffer)) != HAL_OK)
 8000ae6:	e7c5      	b.n	8000a74 <ComUsartTask+0x18>
 8000ae8:	48000400 	.word	0x48000400
 8000aec:	2000834c 	.word	0x2000834c
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000002 	.word	0x20000002
 8000af8:	20000004 	.word	0x20000004

08000afc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//scenario1();
	scenario3();
 8000b04:	f7ff fe9c 	bl	8000840 <scenario3>
  /* USER CODE END 5 */
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d101      	bne.n	8000b26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b22:	f000 fa59 	bl	8000fd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40001000 	.word	0x40001000

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <Error_Handler+0x6>

08000b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b46:	4a10      	ldr	r2, [pc, #64]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b64:	6593      	str	r3, [r2, #88]	; 0x58
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_MspInit+0x4c>)
 8000b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	210f      	movs	r1, #15
 8000b76:	f06f 0001 	mvn.w	r0, #1
 8000b7a:	f000 fc01 	bl	8001380 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000

08000b8c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a18      	ldr	r2, [pc, #96]	; (8000c0c <HAL_CAN_MspInit+0x80>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d129      	bne.n	8000c02 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <HAL_CAN_MspInit+0x84>)
 8000bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb2:	4a17      	ldr	r2, [pc, #92]	; (8000c10 <HAL_CAN_MspInit+0x84>)
 8000bb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_CAN_MspInit+0x84>)
 8000bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_CAN_MspInit+0x84>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	4a11      	ldr	r2, [pc, #68]	; (8000c10 <HAL_CAN_MspInit+0x84>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <HAL_CAN_MspInit+0x84>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000bde:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000bf0:	2309      	movs	r3, #9
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfe:	f000 fde1 	bl	80017c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c02:	bf00      	nop
 8000c04:	3728      	adds	r7, #40	; 0x28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40006400 	.word	0x40006400
 8000c10:	40021000 	.word	0x40021000

08000c14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a17      	ldr	r2, [pc, #92]	; (8000c90 <HAL_I2C_MspInit+0x7c>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d127      	bne.n	8000c86 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <HAL_I2C_MspInit+0x80>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	4a16      	ldr	r2, [pc, #88]	; (8000c94 <HAL_I2C_MspInit+0x80>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c42:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <HAL_I2C_MspInit+0x80>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c4e:	23c0      	movs	r3, #192	; 0xc0
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c52:	2312      	movs	r3, #18
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c5e:	2304      	movs	r3, #4
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	480b      	ldr	r0, [pc, #44]	; (8000c98 <HAL_I2C_MspInit+0x84>)
 8000c6a:	f000 fdab 	bl	80017c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <HAL_I2C_MspInit+0x80>)
 8000c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c72:	4a08      	ldr	r2, [pc, #32]	; (8000c94 <HAL_I2C_MspInit+0x80>)
 8000c74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c78:	6593      	str	r3, [r2, #88]	; 0x58
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_I2C_MspInit+0x80>)
 8000c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c86:	bf00      	nop
 8000c88:	3728      	adds	r7, #40	; 0x28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40005400 	.word	0x40005400
 8000c94:	40021000 	.word	0x40021000
 8000c98:	48000400 	.word	0x48000400

08000c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a40      	ldr	r2, [pc, #256]	; (8000dbc <HAL_UART_MspInit+0x120>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d17a      	bne.n	8000db4 <HAL_UART_MspInit+0x118>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cbe:	4b40      	ldr	r3, [pc, #256]	; (8000dc0 <HAL_UART_MspInit+0x124>)
 8000cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc2:	4a3f      	ldr	r2, [pc, #252]	; (8000dc0 <HAL_UART_MspInit+0x124>)
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cca:	4b3d      	ldr	r3, [pc, #244]	; (8000dc0 <HAL_UART_MspInit+0x124>)
 8000ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b3a      	ldr	r3, [pc, #232]	; (8000dc0 <HAL_UART_MspInit+0x124>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	4a39      	ldr	r2, [pc, #228]	; (8000dc0 <HAL_UART_MspInit+0x124>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce2:	4b37      	ldr	r3, [pc, #220]	; (8000dc0 <HAL_UART_MspInit+0x124>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cee:	230c      	movs	r3, #12
 8000cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cfe:	2307      	movs	r3, #7
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0c:	f000 fd5a 	bl	80017c4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000d10:	4b2c      	ldr	r3, [pc, #176]	; (8000dc4 <HAL_UART_MspInit+0x128>)
 8000d12:	4a2d      	ldr	r2, [pc, #180]	; (8000dc8 <HAL_UART_MspInit+0x12c>)
 8000d14:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000d16:	4b2b      	ldr	r3, [pc, #172]	; (8000dc4 <HAL_UART_MspInit+0x128>)
 8000d18:	2202      	movs	r2, #2
 8000d1a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d1c:	4b29      	ldr	r3, [pc, #164]	; (8000dc4 <HAL_UART_MspInit+0x128>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d22:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <HAL_UART_MspInit+0x128>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d28:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <HAL_UART_MspInit+0x128>)
 8000d2a:	2280      	movs	r2, #128	; 0x80
 8000d2c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d2e:	4b25      	ldr	r3, [pc, #148]	; (8000dc4 <HAL_UART_MspInit+0x128>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d34:	4b23      	ldr	r3, [pc, #140]	; (8000dc4 <HAL_UART_MspInit+0x128>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000d3a:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <HAL_UART_MspInit+0x128>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d40:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <HAL_UART_MspInit+0x128>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d46:	481f      	ldr	r0, [pc, #124]	; (8000dc4 <HAL_UART_MspInit+0x128>)
 8000d48:	f000 fb44 	bl	80013d4 <HAL_DMA_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 8000d52:	f7ff feef 	bl	8000b34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a1a      	ldr	r2, [pc, #104]	; (8000dc4 <HAL_UART_MspInit+0x128>)
 8000d5a:	66da      	str	r2, [r3, #108]	; 0x6c
 8000d5c:	4a19      	ldr	r2, [pc, #100]	; (8000dc4 <HAL_UART_MspInit+0x128>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <HAL_UART_MspInit+0x130>)
 8000d64:	4a1a      	ldr	r2, [pc, #104]	; (8000dd0 <HAL_UART_MspInit+0x134>)
 8000d66:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_UART_MspInit+0x130>)
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <HAL_UART_MspInit+0x130>)
 8000d70:	2210      	movs	r2, #16
 8000d72:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_UART_MspInit+0x130>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <HAL_UART_MspInit+0x130>)
 8000d7c:	2280      	movs	r2, #128	; 0x80
 8000d7e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_UART_MspInit+0x130>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <HAL_UART_MspInit+0x130>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <HAL_UART_MspInit+0x130>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_UART_MspInit+0x130>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000d98:	480c      	ldr	r0, [pc, #48]	; (8000dcc <HAL_UART_MspInit+0x130>)
 8000d9a:	f000 fb1b 	bl	80013d4 <HAL_DMA_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8000da4:	f7ff fec6 	bl	8000b34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a08      	ldr	r2, [pc, #32]	; (8000dcc <HAL_UART_MspInit+0x130>)
 8000dac:	669a      	str	r2, [r3, #104]	; 0x68
 8000dae:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <HAL_UART_MspInit+0x130>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000db4:	bf00      	nop
 8000db6:	3728      	adds	r7, #40	; 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40004400 	.word	0x40004400
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	20008270 	.word	0x20008270
 8000dc8:	4002006c 	.word	0x4002006c
 8000dcc:	20008304 	.word	0x20008304
 8000dd0:	40020080 	.word	0x40020080

08000dd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08c      	sub	sp, #48	; 0x30
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000de4:	2200      	movs	r2, #0
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	2036      	movs	r0, #54	; 0x36
 8000dea:	f000 fac9 	bl	8001380 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dee:	2036      	movs	r0, #54	; 0x36
 8000df0:	f000 fae2 	bl	80013b8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000df4:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <HAL_InitTick+0x9c>)
 8000df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df8:	4a1d      	ldr	r2, [pc, #116]	; (8000e70 <HAL_InitTick+0x9c>)
 8000dfa:	f043 0310 	orr.w	r3, r3, #16
 8000dfe:	6593      	str	r3, [r2, #88]	; 0x58
 8000e00:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <HAL_InitTick+0x9c>)
 8000e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e04:	f003 0310 	and.w	r3, r3, #16
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e0c:	f107 0210 	add.w	r2, r7, #16
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4611      	mov	r1, r2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f001 fdcc 	bl	80029b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e1c:	f001 fd9e 	bl	800295c <HAL_RCC_GetPCLK1Freq>
 8000e20:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e24:	4a13      	ldr	r2, [pc, #76]	; (8000e74 <HAL_InitTick+0xa0>)
 8000e26:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2a:	0c9b      	lsrs	r3, r3, #18
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <HAL_InitTick+0xa4>)
 8000e32:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <HAL_InitTick+0xa8>)
 8000e34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <HAL_InitTick+0xa4>)
 8000e38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e3c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e3e:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <HAL_InitTick+0xa4>)
 8000e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e42:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <HAL_InitTick+0xa4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <HAL_InitTick+0xa4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e50:	4809      	ldr	r0, [pc, #36]	; (8000e78 <HAL_InitTick+0xa4>)
 8000e52:	f002 f933 	bl	80030bc <HAL_TIM_Base_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d104      	bne.n	8000e66 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e5c:	4806      	ldr	r0, [pc, #24]	; (8000e78 <HAL_InitTick+0xa4>)
 8000e5e:	f002 f98f 	bl	8003180 <HAL_TIM_Base_Start_IT>
 8000e62:	4603      	mov	r3, r0
 8000e64:	e000      	b.n	8000e68 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3730      	adds	r7, #48	; 0x30
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40021000 	.word	0x40021000
 8000e74:	431bde83 	.word	0x431bde83
 8000e78:	200083f8 	.word	0x200083f8
 8000e7c:	40001000 	.word	0x40001000

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <NMI_Handler+0x4>

08000e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <MemManage_Handler+0x4>

08000e92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <BusFault_Handler+0x4>

08000e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <UsageFault_Handler+0x4>

08000e9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <DMA1_Channel6_IRQHandler+0x10>)
 8000eb2:	f000 fba7 	bl	8001604 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20008270 	.word	0x20008270

08000ec0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000ec4:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <DMA1_Channel7_IRQHandler+0x10>)
 8000ec6:	f000 fb9d 	bl	8001604 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20008304 	.word	0x20008304

08000ed4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ed8:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <TIM6_DAC_IRQHandler+0x10>)
 8000eda:	f002 f9a5 	bl	8003228 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200083f8 	.word	0x200083f8

08000ee8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eec:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <SystemInit+0x64>)
 8000eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ef2:	4a16      	ldr	r2, [pc, #88]	; (8000f4c <SystemInit+0x64>)
 8000ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <SystemInit+0x68>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a13      	ldr	r2, [pc, #76]	; (8000f50 <SystemInit+0x68>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <SystemInit+0x68>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <SystemInit+0x68>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a0f      	ldr	r2, [pc, #60]	; (8000f50 <SystemInit+0x68>)
 8000f14:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f18:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f1c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <SystemInit+0x68>)
 8000f20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f24:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <SystemInit+0x68>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <SystemInit+0x68>)
 8000f2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f30:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <SystemInit+0x68>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <SystemInit+0x64>)
 8000f3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f3e:	609a      	str	r2, [r3, #8]
#endif
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00
 8000f50:	40021000 	.word	0x40021000

08000f54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f58:	f7ff ffc6 	bl	8000ee8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f5c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f5e:	e003      	b.n	8000f68 <LoopCopyDataInit>

08000f60 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f62:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f64:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f66:	3104      	adds	r1, #4

08000f68 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f68:	480a      	ldr	r0, [pc, #40]	; (8000f94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f6c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f6e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f70:	d3f6      	bcc.n	8000f60 <CopyDataInit>
	ldr	r2, =_sbss
 8000f72:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f74:	e002      	b.n	8000f7c <LoopFillZerobss>

08000f76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f76:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f78:	f842 3b04 	str.w	r3, [r2], #4

08000f7c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <LoopForever+0x16>)
	cmp	r2, r3
 8000f7e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f80:	d3f9      	bcc.n	8000f76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f82:	f005 fd27 	bl	80069d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f86:	f7ff faa3 	bl	80004d0 <main>

08000f8a <LoopForever>:

LoopForever:
    b LoopForever
 8000f8a:	e7fe      	b.n	8000f8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f8c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000f90:	08006b30 	.word	0x08006b30
	ldr	r0, =_sdata
 8000f94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f98:	2000001c 	.word	0x2000001c
	ldr	r2, =_sbss
 8000f9c:	2000001c 	.word	0x2000001c
	ldr	r3, = _ebss
 8000fa0:	20008488 	.word	0x20008488

08000fa4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fa4:	e7fe      	b.n	8000fa4 <ADC1_IRQHandler>

08000fa6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fac:	2300      	movs	r3, #0
 8000fae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f000 f9da 	bl	800136a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f7ff ff0c 	bl	8000dd4 <HAL_InitTick>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d002      	beq.n	8000fc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	71fb      	strb	r3, [r7, #7]
 8000fc6:	e001      	b.n	8000fcc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fc8:	f7ff fdb8 	bl	8000b3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_IncTick+0x20>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x24>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <HAL_IncTick+0x24>)
 8000fea:	6013      	str	r3, [r2, #0]
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000010 	.word	0x20000010
 8000ffc:	20008444 	.word	0x20008444

08001000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return uwTick;
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <HAL_GetTick+0x14>)
 8001006:	681b      	ldr	r3, [r3, #0]
}
 8001008:	4618      	mov	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20008444 	.word	0x20008444

08001018 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e0ed      	b.n	8001206 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d102      	bne.n	800103c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff fda8 	bl	8000b8c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 0202 	bic.w	r2, r2, #2
 800104a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800104c:	f7ff ffd8 	bl	8001000 <HAL_GetTick>
 8001050:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001052:	e012      	b.n	800107a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001054:	f7ff ffd4 	bl	8001000 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b0a      	cmp	r3, #10
 8001060:	d90b      	bls.n	800107a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001066:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2205      	movs	r2, #5
 8001072:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e0c5      	b.n	8001206 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1e5      	bne.n	8001054 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f042 0201 	orr.w	r2, r2, #1
 8001096:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001098:	f7ff ffb2 	bl	8001000 <HAL_GetTick>
 800109c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800109e:	e012      	b.n	80010c6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010a0:	f7ff ffae 	bl	8001000 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b0a      	cmp	r3, #10
 80010ac:	d90b      	bls.n	80010c6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2205      	movs	r2, #5
 80010be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e09f      	b.n	8001206 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0e5      	beq.n	80010a0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	7e1b      	ldrb	r3, [r3, #24]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d108      	bne.n	80010ee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	e007      	b.n	80010fe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	7e5b      	ldrb	r3, [r3, #25]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d108      	bne.n	8001118 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	e007      	b.n	8001128 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001126:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	7e9b      	ldrb	r3, [r3, #26]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d108      	bne.n	8001142 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f042 0220 	orr.w	r2, r2, #32
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	e007      	b.n	8001152 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f022 0220 	bic.w	r2, r2, #32
 8001150:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	7edb      	ldrb	r3, [r3, #27]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d108      	bne.n	800116c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 0210 	bic.w	r2, r2, #16
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	e007      	b.n	800117c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f042 0210 	orr.w	r2, r2, #16
 800117a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7f1b      	ldrb	r3, [r3, #28]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d108      	bne.n	8001196 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f042 0208 	orr.w	r2, r2, #8
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	e007      	b.n	80011a6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f022 0208 	bic.w	r2, r2, #8
 80011a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	7f5b      	ldrb	r3, [r3, #29]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d108      	bne.n	80011c0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f042 0204 	orr.w	r2, r2, #4
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	e007      	b.n	80011d0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f022 0204 	bic.w	r2, r2, #4
 80011ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	431a      	orrs	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	431a      	orrs	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	ea42 0103 	orr.w	r1, r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	1e5a      	subs	r2, r3, #1
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	430a      	orrs	r2, r1
 80011f4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800122c:	4013      	ands	r3, r2
 800122e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800123c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001242:	4a04      	ldr	r2, [pc, #16]	; (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	60d3      	str	r3, [r2, #12]
}
 8001248:	bf00      	nop
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <__NVIC_GetPriorityGrouping+0x18>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	f003 0307 	and.w	r3, r3, #7
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	2b00      	cmp	r3, #0
 8001284:	db0b      	blt.n	800129e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	f003 021f 	and.w	r2, r3, #31
 800128c:	4907      	ldr	r1, [pc, #28]	; (80012ac <__NVIC_EnableIRQ+0x38>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	095b      	lsrs	r3, r3, #5
 8001294:	2001      	movs	r0, #1
 8001296:	fa00 f202 	lsl.w	r2, r0, r2
 800129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000e100 	.word	0xe000e100

080012b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	db0a      	blt.n	80012da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	490c      	ldr	r1, [pc, #48]	; (80012fc <__NVIC_SetPriority+0x4c>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	0112      	lsls	r2, r2, #4
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	440b      	add	r3, r1
 80012d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d8:	e00a      	b.n	80012f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4908      	ldr	r1, [pc, #32]	; (8001300 <__NVIC_SetPriority+0x50>)
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	3b04      	subs	r3, #4
 80012e8:	0112      	lsls	r2, r2, #4
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	440b      	add	r3, r1
 80012ee:	761a      	strb	r2, [r3, #24]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000e100 	.word	0xe000e100
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	; 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f1c3 0307 	rsb	r3, r3, #7
 800131e:	2b04      	cmp	r3, #4
 8001320:	bf28      	it	cs
 8001322:	2304      	movcs	r3, #4
 8001324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3304      	adds	r3, #4
 800132a:	2b06      	cmp	r3, #6
 800132c:	d902      	bls.n	8001334 <NVIC_EncodePriority+0x30>
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3b03      	subs	r3, #3
 8001332:	e000      	b.n	8001336 <NVIC_EncodePriority+0x32>
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	f04f 32ff 	mov.w	r2, #4294967295
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	401a      	ands	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800134c:	f04f 31ff 	mov.w	r1, #4294967295
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	43d9      	mvns	r1, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	4313      	orrs	r3, r2
         );
}
 800135e:	4618      	mov	r0, r3
 8001360:	3724      	adds	r7, #36	; 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ff4c 	bl	8001210 <__NVIC_SetPriorityGrouping>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001392:	f7ff ff61 	bl	8001258 <__NVIC_GetPriorityGrouping>
 8001396:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	68b9      	ldr	r1, [r7, #8]
 800139c:	6978      	ldr	r0, [r7, #20]
 800139e:	f7ff ffb1 	bl	8001304 <NVIC_EncodePriority>
 80013a2:	4602      	mov	r2, r0
 80013a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a8:	4611      	mov	r1, r2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff ff80 	bl	80012b0 <__NVIC_SetPriority>
}
 80013b0:	bf00      	nop
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ff54 	bl	8001274 <__NVIC_EnableIRQ>
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d101      	bne.n	80013e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e098      	b.n	8001518 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b4d      	ldr	r3, [pc, #308]	; (8001524 <HAL_DMA_Init+0x150>)
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d80f      	bhi.n	8001412 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	4b4b      	ldr	r3, [pc, #300]	; (8001528 <HAL_DMA_Init+0x154>)
 80013fa:	4413      	add	r3, r2
 80013fc:	4a4b      	ldr	r2, [pc, #300]	; (800152c <HAL_DMA_Init+0x158>)
 80013fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001402:	091b      	lsrs	r3, r3, #4
 8001404:	009a      	lsls	r2, r3, #2
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a48      	ldr	r2, [pc, #288]	; (8001530 <HAL_DMA_Init+0x15c>)
 800140e:	641a      	str	r2, [r3, #64]	; 0x40
 8001410:	e00e      	b.n	8001430 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	4b46      	ldr	r3, [pc, #280]	; (8001534 <HAL_DMA_Init+0x160>)
 800141a:	4413      	add	r3, r2
 800141c:	4a43      	ldr	r2, [pc, #268]	; (800152c <HAL_DMA_Init+0x158>)
 800141e:	fba2 2303 	umull	r2, r3, r2, r3
 8001422:	091b      	lsrs	r3, r3, #4
 8001424:	009a      	lsls	r2, r3, #2
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a42      	ldr	r2, [pc, #264]	; (8001538 <HAL_DMA_Init+0x164>)
 800142e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2202      	movs	r2, #2
 8001434:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800144a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001454:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001460:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800146c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a1b      	ldr	r3, [r3, #32]
 8001472:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	4313      	orrs	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800148a:	d039      	beq.n	8001500 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	4a27      	ldr	r2, [pc, #156]	; (8001530 <HAL_DMA_Init+0x15c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d11a      	bne.n	80014cc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001496:	4b29      	ldr	r3, [pc, #164]	; (800153c <HAL_DMA_Init+0x168>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	f003 031c 	and.w	r3, r3, #28
 80014a2:	210f      	movs	r1, #15
 80014a4:	fa01 f303 	lsl.w	r3, r1, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	4924      	ldr	r1, [pc, #144]	; (800153c <HAL_DMA_Init+0x168>)
 80014ac:	4013      	ands	r3, r2
 80014ae:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80014b0:	4b22      	ldr	r3, [pc, #136]	; (800153c <HAL_DMA_Init+0x168>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6859      	ldr	r1, [r3, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014bc:	f003 031c 	and.w	r3, r3, #28
 80014c0:	fa01 f303 	lsl.w	r3, r1, r3
 80014c4:	491d      	ldr	r1, [pc, #116]	; (800153c <HAL_DMA_Init+0x168>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	600b      	str	r3, [r1, #0]
 80014ca:	e019      	b.n	8001500 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80014cc:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <HAL_DMA_Init+0x16c>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d4:	f003 031c 	and.w	r3, r3, #28
 80014d8:	210f      	movs	r1, #15
 80014da:	fa01 f303 	lsl.w	r3, r1, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	4917      	ldr	r1, [pc, #92]	; (8001540 <HAL_DMA_Init+0x16c>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <HAL_DMA_Init+0x16c>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6859      	ldr	r1, [r3, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f003 031c 	and.w	r3, r3, #28
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	4911      	ldr	r1, [pc, #68]	; (8001540 <HAL_DMA_Init+0x16c>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	40020407 	.word	0x40020407
 8001528:	bffdfff8 	.word	0xbffdfff8
 800152c:	cccccccd 	.word	0xcccccccd
 8001530:	40020000 	.word	0x40020000
 8001534:	bffdfbf8 	.word	0xbffdfbf8
 8001538:	40020400 	.word	0x40020400
 800153c:	400200a8 	.word	0x400200a8
 8001540:	400204a8 	.word	0x400204a8

08001544 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
 8001550:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800155c:	2b01      	cmp	r3, #1
 800155e:	d101      	bne.n	8001564 <HAL_DMA_Start_IT+0x20>
 8001560:	2302      	movs	r3, #2
 8001562:	e04b      	b.n	80015fc <HAL_DMA_Start_IT+0xb8>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b01      	cmp	r3, #1
 8001576:	d13a      	bne.n	80015ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2202      	movs	r2, #2
 800157c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2200      	movs	r2, #0
 8001584:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0201 	bic.w	r2, r2, #1
 8001594:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	68b9      	ldr	r1, [r7, #8]
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	f000 f8e0 	bl	8001762 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d008      	beq.n	80015bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f042 020e 	orr.w	r2, r2, #14
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	e00f      	b.n	80015dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 0204 	bic.w	r2, r2, #4
 80015ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f042 020a 	orr.w	r2, r2, #10
 80015da:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0201 	orr.w	r2, r2, #1
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	e005      	b.n	80015fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80015f6:	2302      	movs	r3, #2
 80015f8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80015fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001620:	f003 031c 	and.w	r3, r3, #28
 8001624:	2204      	movs	r2, #4
 8001626:	409a      	lsls	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4013      	ands	r3, r2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d026      	beq.n	800167e <HAL_DMA_IRQHandler+0x7a>
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	2b00      	cmp	r3, #0
 8001638:	d021      	beq.n	800167e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0320 	and.w	r3, r3, #32
 8001644:	2b00      	cmp	r3, #0
 8001646:	d107      	bne.n	8001658 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0204 	bic.w	r2, r2, #4
 8001656:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165c:	f003 021c 	and.w	r2, r3, #28
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	2104      	movs	r1, #4
 8001666:	fa01 f202 	lsl.w	r2, r1, r2
 800166a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001670:	2b00      	cmp	r3, #0
 8001672:	d071      	beq.n	8001758 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800167c:	e06c      	b.n	8001758 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	f003 031c 	and.w	r3, r3, #28
 8001686:	2202      	movs	r2, #2
 8001688:	409a      	lsls	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4013      	ands	r3, r2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d02e      	beq.n	80016f0 <HAL_DMA_IRQHandler+0xec>
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d029      	beq.n	80016f0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0320 	and.w	r3, r3, #32
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10b      	bne.n	80016c2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 020a 	bic.w	r2, r2, #10
 80016b8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	f003 021c 	and.w	r2, r3, #28
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	2102      	movs	r1, #2
 80016d0:	fa01 f202 	lsl.w	r2, r1, r2
 80016d4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d038      	beq.n	8001758 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80016ee:	e033      	b.n	8001758 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f4:	f003 031c 	and.w	r3, r3, #28
 80016f8:	2208      	movs	r2, #8
 80016fa:	409a      	lsls	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4013      	ands	r3, r2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d02a      	beq.n	800175a <HAL_DMA_IRQHandler+0x156>
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	2b00      	cmp	r3, #0
 800170c:	d025      	beq.n	800175a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 020e 	bic.w	r2, r2, #14
 800171c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	f003 021c 	and.w	r2, r3, #28
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	2101      	movs	r1, #1
 800172c:	fa01 f202 	lsl.w	r2, r1, r2
 8001730:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800174c:	2b00      	cmp	r3, #0
 800174e:	d004      	beq.n	800175a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001758:	bf00      	nop
 800175a:	bf00      	nop
}
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001762:	b480      	push	{r7}
 8001764:	b085      	sub	sp, #20
 8001766:	af00      	add	r7, sp, #0
 8001768:	60f8      	str	r0, [r7, #12]
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001774:	f003 021c 	and.w	r2, r3, #28
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	2101      	movs	r1, #1
 800177e:	fa01 f202 	lsl.w	r2, r1, r2
 8001782:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b10      	cmp	r3, #16
 8001792:	d108      	bne.n	80017a6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68ba      	ldr	r2, [r7, #8]
 80017a2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017a4:	e007      	b.n	80017b6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	60da      	str	r2, [r3, #12]
}
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d2:	e148      	b.n	8001a66 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	2101      	movs	r1, #1
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	4013      	ands	r3, r2
 80017e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 813a 	beq.w	8001a60 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d00b      	beq.n	800180c <HAL_GPIO_Init+0x48>
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d007      	beq.n	800180c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001800:	2b11      	cmp	r3, #17
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b12      	cmp	r3, #18
 800180a:	d130      	bne.n	800186e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	2203      	movs	r2, #3
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001842:	2201      	movs	r2, #1
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4013      	ands	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	091b      	lsrs	r3, r3, #4
 8001858:	f003 0201 	and.w	r2, r3, #1
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	2203      	movs	r2, #3
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_Init+0xea>
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b12      	cmp	r3, #18
 80018ac:	d123      	bne.n	80018f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	08da      	lsrs	r2, r3, #3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3208      	adds	r2, #8
 80018b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	220f      	movs	r2, #15
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	691a      	ldr	r2, [r3, #16]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	08da      	lsrs	r2, r3, #3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3208      	adds	r2, #8
 80018f0:	6939      	ldr	r1, [r7, #16]
 80018f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	2203      	movs	r2, #3
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 0203 	and.w	r2, r3, #3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 8094 	beq.w	8001a60 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001938:	4b52      	ldr	r3, [pc, #328]	; (8001a84 <HAL_GPIO_Init+0x2c0>)
 800193a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193c:	4a51      	ldr	r2, [pc, #324]	; (8001a84 <HAL_GPIO_Init+0x2c0>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6613      	str	r3, [r2, #96]	; 0x60
 8001944:	4b4f      	ldr	r3, [pc, #316]	; (8001a84 <HAL_GPIO_Init+0x2c0>)
 8001946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001950:	4a4d      	ldr	r2, [pc, #308]	; (8001a88 <HAL_GPIO_Init+0x2c4>)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	3302      	adds	r3, #2
 8001958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	220f      	movs	r2, #15
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800197a:	d00d      	beq.n	8001998 <HAL_GPIO_Init+0x1d4>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a43      	ldr	r2, [pc, #268]	; (8001a8c <HAL_GPIO_Init+0x2c8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d007      	beq.n	8001994 <HAL_GPIO_Init+0x1d0>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a42      	ldr	r2, [pc, #264]	; (8001a90 <HAL_GPIO_Init+0x2cc>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d101      	bne.n	8001990 <HAL_GPIO_Init+0x1cc>
 800198c:	2302      	movs	r3, #2
 800198e:	e004      	b.n	800199a <HAL_GPIO_Init+0x1d6>
 8001990:	2307      	movs	r3, #7
 8001992:	e002      	b.n	800199a <HAL_GPIO_Init+0x1d6>
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <HAL_GPIO_Init+0x1d6>
 8001998:	2300      	movs	r3, #0
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	f002 0203 	and.w	r2, r2, #3
 80019a0:	0092      	lsls	r2, r2, #2
 80019a2:	4093      	lsls	r3, r2
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019aa:	4937      	ldr	r1, [pc, #220]	; (8001a88 <HAL_GPIO_Init+0x2c4>)
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	3302      	adds	r3, #2
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019b8:	4b36      	ldr	r3, [pc, #216]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019dc:	4a2d      	ldr	r2, [pc, #180]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80019e2:	4b2c      	ldr	r3, [pc, #176]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a06:	4a23      	ldr	r2, [pc, #140]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a0c:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a30:	4a18      	ldr	r2, [pc, #96]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a36:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a5a:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <HAL_GPIO_Init+0x2d0>)
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	3301      	adds	r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f47f aeaf 	bne.w	80017d4 <HAL_GPIO_Init+0x10>
  }
}
 8001a76:	bf00      	nop
 8001a78:	371c      	adds	r7, #28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40010000 	.word	0x40010000
 8001a8c:	48000400 	.word	0x48000400
 8001a90:	48000800 	.word	0x48000800
 8001a94:	40010400 	.word	0x40010400

08001a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	807b      	strh	r3, [r7, #2]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aa8:	787b      	ldrb	r3, [r7, #1]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ab4:	e002      	b.n	8001abc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ab6:	887a      	ldrh	r2, [r7, #2]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ada:	887a      	ldrh	r2, [r7, #2]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	041a      	lsls	r2, r3, #16
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	43d9      	mvns	r1, r3
 8001ae6:	887b      	ldrh	r3, [r7, #2]
 8001ae8:	400b      	ands	r3, r1
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	619a      	str	r2, [r3, #24]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e081      	b.n	8001c12 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d106      	bne.n	8001b28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff f876 	bl	8000c14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2224      	movs	r2, #36	; 0x24
 8001b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0201 	bic.w	r2, r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d107      	bne.n	8001b76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	e006      	b.n	8001b84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d104      	bne.n	8001b96 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ba8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bb8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	691a      	ldr	r2, [r3, #16]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	ea42 0103 	orr.w	r1, r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	021a      	lsls	r2, r3, #8
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69d9      	ldr	r1, [r3, #28]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a1a      	ldr	r2, [r3, #32]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0201 	orr.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b20      	cmp	r3, #32
 8001c2e:	d138      	bne.n	8001ca2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e032      	b.n	8001ca4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2224      	movs	r2, #36	; 0x24
 8001c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0201 	bic.w	r2, r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c6c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6819      	ldr	r1, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 0201 	orr.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2220      	movs	r2, #32
 8001c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e000      	b.n	8001ca4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ca2:	2302      	movs	r3, #2
  }
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b20      	cmp	r3, #32
 8001cc4:	d139      	bne.n	8001d3a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e033      	b.n	8001d3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2224      	movs	r2, #36	; 0x24
 8001ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0201 	bic.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d02:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f042 0201 	orr.w	r2, r2, #1
 8001d24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2220      	movs	r2, #32
 8001d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	e000      	b.n	8001d3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d3a:	2302      	movs	r3, #2
  }
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d56:	6013      	str	r3, [r2, #0]
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40007000 	.word	0x40007000

08001d68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40007000 	.word	0x40007000

08001d84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d92:	d130      	bne.n	8001df6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d94:	4b23      	ldr	r3, [pc, #140]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da0:	d038      	beq.n	8001e14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001da2:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001daa:	4a1e      	ldr	r2, [pc, #120]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001db0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001db2:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2232      	movs	r2, #50	; 0x32
 8001db8:	fb02 f303 	mul.w	r3, r2, r3
 8001dbc:	4a1b      	ldr	r2, [pc, #108]	; (8001e2c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc2:	0c9b      	lsrs	r3, r3, #18
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dc8:	e002      	b.n	8001dd0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dd0:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ddc:	d102      	bne.n	8001de4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f2      	bne.n	8001dca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001df0:	d110      	bne.n	8001e14 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e00f      	b.n	8001e16 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001df6:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e02:	d007      	beq.n	8001e14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e04:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e0c:	4a05      	ldr	r2, [pc, #20]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40007000 	.word	0x40007000
 8001e28:	20000008 	.word	0x20000008
 8001e2c:	431bde83 	.word	0x431bde83

08001e30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d102      	bne.n	8001e44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	f000 bc11 	b.w	8002666 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e44:	4ba0      	ldr	r3, [pc, #640]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 030c 	and.w	r3, r3, #12
 8001e4c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e4e:	4b9e      	ldr	r3, [pc, #632]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0310 	and.w	r3, r3, #16
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 80e4 	beq.w	800202e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d007      	beq.n	8001e7c <HAL_RCC_OscConfig+0x4c>
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	2b0c      	cmp	r3, #12
 8001e70:	f040 808b 	bne.w	8001f8a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	f040 8087 	bne.w	8001f8a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e7c:	4b92      	ldr	r3, [pc, #584]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_OscConfig+0x64>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e3e8      	b.n	8002666 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a1a      	ldr	r2, [r3, #32]
 8001e98:	4b8b      	ldr	r3, [pc, #556]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0308 	and.w	r3, r3, #8
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d004      	beq.n	8001eae <HAL_RCC_OscConfig+0x7e>
 8001ea4:	4b88      	ldr	r3, [pc, #544]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eac:	e005      	b.n	8001eba <HAL_RCC_OscConfig+0x8a>
 8001eae:	4b86      	ldr	r3, [pc, #536]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb4:	091b      	lsrs	r3, r3, #4
 8001eb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d223      	bcs.n	8001f06 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 fda8 	bl	8002a18 <RCC_SetFlashLatencyFromMSIRange>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e3c9      	b.n	8002666 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ed2:	4b7d      	ldr	r3, [pc, #500]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a7c      	ldr	r2, [pc, #496]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001ed8:	f043 0308 	orr.w	r3, r3, #8
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	4b7a      	ldr	r3, [pc, #488]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	4977      	ldr	r1, [pc, #476]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ef0:	4b75      	ldr	r3, [pc, #468]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	021b      	lsls	r3, r3, #8
 8001efe:	4972      	ldr	r1, [pc, #456]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	604b      	str	r3, [r1, #4]
 8001f04:	e025      	b.n	8001f52 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f06:	4b70      	ldr	r3, [pc, #448]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a6f      	ldr	r2, [pc, #444]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001f0c:	f043 0308 	orr.w	r3, r3, #8
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	4b6d      	ldr	r3, [pc, #436]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	496a      	ldr	r1, [pc, #424]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f24:	4b68      	ldr	r3, [pc, #416]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	021b      	lsls	r3, r3, #8
 8001f32:	4965      	ldr	r1, [pc, #404]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d109      	bne.n	8001f52 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 fd68 	bl	8002a18 <RCC_SetFlashLatencyFromMSIRange>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e389      	b.n	8002666 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f52:	f000 fc6f 	bl	8002834 <HAL_RCC_GetSysClockFreq>
 8001f56:	4601      	mov	r1, r0
 8001f58:	4b5b      	ldr	r3, [pc, #364]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	4a5a      	ldr	r2, [pc, #360]	; (80020cc <HAL_RCC_OscConfig+0x29c>)
 8001f64:	5cd3      	ldrb	r3, [r2, r3]
 8001f66:	f003 031f 	and.w	r3, r3, #31
 8001f6a:	fa21 f303 	lsr.w	r3, r1, r3
 8001f6e:	4a58      	ldr	r2, [pc, #352]	; (80020d0 <HAL_RCC_OscConfig+0x2a0>)
 8001f70:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f72:	4b58      	ldr	r3, [pc, #352]	; (80020d4 <HAL_RCC_OscConfig+0x2a4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe ff2c 	bl	8000dd4 <HAL_InitTick>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d052      	beq.n	800202c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
 8001f88:	e36d      	b.n	8002666 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d032      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f92:	4b4d      	ldr	r3, [pc, #308]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a4c      	ldr	r2, [pc, #304]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f9e:	f7ff f82f 	bl	8001000 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fa6:	f7ff f82b 	bl	8001000 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e356      	b.n	8002666 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fb8:	4b43      	ldr	r3, [pc, #268]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fc4:	4b40      	ldr	r3, [pc, #256]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a3f      	ldr	r2, [pc, #252]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001fca:	f043 0308 	orr.w	r3, r3, #8
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	4b3d      	ldr	r3, [pc, #244]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	493a      	ldr	r1, [pc, #232]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fe2:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	021b      	lsls	r3, r3, #8
 8001ff0:	4935      	ldr	r1, [pc, #212]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
 8001ff6:	e01a      	b.n	800202e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ff8:	4b33      	ldr	r3, [pc, #204]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a32      	ldr	r2, [pc, #200]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8001ffe:	f023 0301 	bic.w	r3, r3, #1
 8002002:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002004:	f7fe fffc 	bl	8001000 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800200c:	f7fe fff8 	bl	8001000 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e323      	b.n	8002666 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800201e:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x1dc>
 800202a:	e000      	b.n	800202e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800202c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d073      	beq.n	8002122 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	2b08      	cmp	r3, #8
 800203e:	d005      	beq.n	800204c <HAL_RCC_OscConfig+0x21c>
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	2b0c      	cmp	r3, #12
 8002044:	d10e      	bne.n	8002064 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2b03      	cmp	r3, #3
 800204a:	d10b      	bne.n	8002064 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204c:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d063      	beq.n	8002120 <HAL_RCC_OscConfig+0x2f0>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d15f      	bne.n	8002120 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e300      	b.n	8002666 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206c:	d106      	bne.n	800207c <HAL_RCC_OscConfig+0x24c>
 800206e:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a15      	ldr	r2, [pc, #84]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8002074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	e01d      	b.n	80020b8 <HAL_RCC_OscConfig+0x288>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002084:	d10c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x270>
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a0f      	ldr	r2, [pc, #60]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 800208c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a0c      	ldr	r2, [pc, #48]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 8002098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e00b      	b.n	80020b8 <HAL_RCC_OscConfig+0x288>
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a08      	ldr	r2, [pc, #32]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 80020a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a05      	ldr	r2, [pc, #20]	; (80020c8 <HAL_RCC_OscConfig+0x298>)
 80020b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d01b      	beq.n	80020f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c0:	f7fe ff9e 	bl	8001000 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020c6:	e010      	b.n	80020ea <HAL_RCC_OscConfig+0x2ba>
 80020c8:	40021000 	.word	0x40021000
 80020cc:	08006ad8 	.word	0x08006ad8
 80020d0:	20000008 	.word	0x20000008
 80020d4:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d8:	f7fe ff92 	bl	8001000 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b64      	cmp	r3, #100	; 0x64
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e2bd      	b.n	8002666 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ea:	4baf      	ldr	r3, [pc, #700]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0f0      	beq.n	80020d8 <HAL_RCC_OscConfig+0x2a8>
 80020f6:	e014      	b.n	8002122 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7fe ff82 	bl	8001000 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002100:	f7fe ff7e 	bl	8001000 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b64      	cmp	r3, #100	; 0x64
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e2a9      	b.n	8002666 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002112:	4ba5      	ldr	r3, [pc, #660]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0x2d0>
 800211e:	e000      	b.n	8002122 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d060      	beq.n	80021f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b04      	cmp	r3, #4
 8002132:	d005      	beq.n	8002140 <HAL_RCC_OscConfig+0x310>
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	2b0c      	cmp	r3, #12
 8002138:	d119      	bne.n	800216e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d116      	bne.n	800216e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002140:	4b99      	ldr	r3, [pc, #612]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_RCC_OscConfig+0x328>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e286      	b.n	8002666 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002158:	4b93      	ldr	r3, [pc, #588]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	061b      	lsls	r3, r3, #24
 8002166:	4990      	ldr	r1, [pc, #576]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002168:	4313      	orrs	r3, r2
 800216a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800216c:	e040      	b.n	80021f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d023      	beq.n	80021be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002176:	4b8c      	ldr	r3, [pc, #560]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a8b      	ldr	r2, [pc, #556]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800217c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002182:	f7fe ff3d 	bl	8001000 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218a:	f7fe ff39 	bl	8001000 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e264      	b.n	8002666 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800219c:	4b82      	ldr	r3, [pc, #520]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a8:	4b7f      	ldr	r3, [pc, #508]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	061b      	lsls	r3, r3, #24
 80021b6:	497c      	ldr	r1, [pc, #496]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]
 80021bc:	e018      	b.n	80021f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021be:	4b7a      	ldr	r3, [pc, #488]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a79      	ldr	r2, [pc, #484]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80021c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ca:	f7fe ff19 	bl	8001000 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d2:	f7fe ff15 	bl	8001000 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e240      	b.n	8002666 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021e4:	4b70      	ldr	r3, [pc, #448]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f0      	bne.n	80021d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d03c      	beq.n	8002276 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d01c      	beq.n	800223e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002204:	4b68      	ldr	r3, [pc, #416]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800220a:	4a67      	ldr	r2, [pc, #412]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002214:	f7fe fef4 	bl	8001000 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800221c:	f7fe fef0 	bl	8001000 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e21b      	b.n	8002666 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800222e:	4b5e      	ldr	r3, [pc, #376]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0ef      	beq.n	800221c <HAL_RCC_OscConfig+0x3ec>
 800223c:	e01b      	b.n	8002276 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800223e:	4b5a      	ldr	r3, [pc, #360]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002240:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002244:	4a58      	ldr	r2, [pc, #352]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002246:	f023 0301 	bic.w	r3, r3, #1
 800224a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224e:	f7fe fed7 	bl	8001000 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002256:	f7fe fed3 	bl	8001000 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e1fe      	b.n	8002666 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002268:	4b4f      	ldr	r3, [pc, #316]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800226a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1ef      	bne.n	8002256 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 80a6 	beq.w	80023d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002284:	2300      	movs	r3, #0
 8002286:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002288:	4b47      	ldr	r3, [pc, #284]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800228a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10d      	bne.n	80022b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002294:	4b44      	ldr	r3, [pc, #272]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002298:	4a43      	ldr	r2, [pc, #268]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800229a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229e:	6593      	str	r3, [r2, #88]	; 0x58
 80022a0:	4b41      	ldr	r3, [pc, #260]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80022a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ac:	2301      	movs	r3, #1
 80022ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b0:	4b3e      	ldr	r3, [pc, #248]	; (80023ac <HAL_RCC_OscConfig+0x57c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d118      	bne.n	80022ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022bc:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <HAL_RCC_OscConfig+0x57c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a3a      	ldr	r2, [pc, #232]	; (80023ac <HAL_RCC_OscConfig+0x57c>)
 80022c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c8:	f7fe fe9a 	bl	8001000 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d0:	f7fe fe96 	bl	8001000 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e1c1      	b.n	8002666 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022e2:	4b32      	ldr	r3, [pc, #200]	; (80023ac <HAL_RCC_OscConfig+0x57c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d108      	bne.n	8002308 <HAL_RCC_OscConfig+0x4d8>
 80022f6:	4b2c      	ldr	r3, [pc, #176]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80022f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fc:	4a2a      	ldr	r2, [pc, #168]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002306:	e024      	b.n	8002352 <HAL_RCC_OscConfig+0x522>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2b05      	cmp	r3, #5
 800230e:	d110      	bne.n	8002332 <HAL_RCC_OscConfig+0x502>
 8002310:	4b25      	ldr	r3, [pc, #148]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002316:	4a24      	ldr	r2, [pc, #144]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002318:	f043 0304 	orr.w	r3, r3, #4
 800231c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002320:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002326:	4a20      	ldr	r2, [pc, #128]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002330:	e00f      	b.n	8002352 <HAL_RCC_OscConfig+0x522>
 8002332:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002338:	4a1b      	ldr	r2, [pc, #108]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800233a:	f023 0301 	bic.w	r3, r3, #1
 800233e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002342:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 8002344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002348:	4a17      	ldr	r2, [pc, #92]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800234a:	f023 0304 	bic.w	r3, r3, #4
 800234e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d016      	beq.n	8002388 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235a:	f7fe fe51 	bl	8001000 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002360:	e00a      	b.n	8002378 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002362:	f7fe fe4d 	bl	8001000 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002370:	4293      	cmp	r3, r2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e176      	b.n	8002666 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_RCC_OscConfig+0x578>)
 800237a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0ed      	beq.n	8002362 <HAL_RCC_OscConfig+0x532>
 8002386:	e01a      	b.n	80023be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002388:	f7fe fe3a 	bl	8001000 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800238e:	e00f      	b.n	80023b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002390:	f7fe fe36 	bl	8001000 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f241 3288 	movw	r2, #5000	; 0x1388
 800239e:	4293      	cmp	r3, r2
 80023a0:	d906      	bls.n	80023b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e15f      	b.n	8002666 <HAL_RCC_OscConfig+0x836>
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023b0:	4baa      	ldr	r3, [pc, #680]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1e8      	bne.n	8002390 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023be:	7ffb      	ldrb	r3, [r7, #31]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d105      	bne.n	80023d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c4:	4ba5      	ldr	r3, [pc, #660]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 80023c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c8:	4aa4      	ldr	r2, [pc, #656]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 80023ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0320 	and.w	r3, r3, #32
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d03c      	beq.n	8002456 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d01c      	beq.n	800241e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023e4:	4b9d      	ldr	r3, [pc, #628]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 80023e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023ea:	4a9c      	ldr	r2, [pc, #624]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f4:	f7fe fe04 	bl	8001000 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023fc:	f7fe fe00 	bl	8001000 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e12b      	b.n	8002666 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800240e:	4b93      	ldr	r3, [pc, #588]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 8002410:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0ef      	beq.n	80023fc <HAL_RCC_OscConfig+0x5cc>
 800241c:	e01b      	b.n	8002456 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800241e:	4b8f      	ldr	r3, [pc, #572]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 8002420:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002424:	4a8d      	ldr	r2, [pc, #564]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 8002426:	f023 0301 	bic.w	r3, r3, #1
 800242a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242e:	f7fe fde7 	bl	8001000 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002436:	f7fe fde3 	bl	8001000 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e10e      	b.n	8002666 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002448:	4b84      	ldr	r3, [pc, #528]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 800244a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1ef      	bne.n	8002436 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 8102 	beq.w	8002664 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002464:	2b02      	cmp	r3, #2
 8002466:	f040 80c5 	bne.w	80025f4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800246a:	4b7c      	ldr	r3, [pc, #496]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f003 0203 	and.w	r2, r3, #3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247a:	429a      	cmp	r2, r3
 800247c:	d12c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	3b01      	subs	r3, #1
 800248a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800248c:	429a      	cmp	r2, r3
 800248e:	d123      	bne.n	80024d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800249a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800249c:	429a      	cmp	r2, r3
 800249e:	d11b      	bne.n	80024d8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d113      	bne.n	80024d8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ba:	085b      	lsrs	r3, r3, #1
 80024bc:	3b01      	subs	r3, #1
 80024be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d109      	bne.n	80024d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	085b      	lsrs	r3, r3, #1
 80024d0:	3b01      	subs	r3, #1
 80024d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d067      	beq.n	80025a8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	2b0c      	cmp	r3, #12
 80024dc:	d062      	beq.n	80025a4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024de:	4b5f      	ldr	r3, [pc, #380]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e0bb      	b.n	8002666 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024ee:	4b5b      	ldr	r3, [pc, #364]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a5a      	ldr	r2, [pc, #360]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 80024f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024fa:	f7fe fd81 	bl	8001000 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002502:	f7fe fd7d 	bl	8001000 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e0a8      	b.n	8002666 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002514:	4b51      	ldr	r3, [pc, #324]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1f0      	bne.n	8002502 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002520:	4b4e      	ldr	r3, [pc, #312]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	4b4e      	ldr	r3, [pc, #312]	; (8002660 <HAL_RCC_OscConfig+0x830>)
 8002526:	4013      	ands	r3, r2
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002530:	3a01      	subs	r2, #1
 8002532:	0112      	lsls	r2, r2, #4
 8002534:	4311      	orrs	r1, r2
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800253a:	0212      	lsls	r2, r2, #8
 800253c:	4311      	orrs	r1, r2
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002542:	0852      	lsrs	r2, r2, #1
 8002544:	3a01      	subs	r2, #1
 8002546:	0552      	lsls	r2, r2, #21
 8002548:	4311      	orrs	r1, r2
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800254e:	0852      	lsrs	r2, r2, #1
 8002550:	3a01      	subs	r2, #1
 8002552:	0652      	lsls	r2, r2, #25
 8002554:	4311      	orrs	r1, r2
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800255a:	06d2      	lsls	r2, r2, #27
 800255c:	430a      	orrs	r2, r1
 800255e:	493f      	ldr	r1, [pc, #252]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 8002560:	4313      	orrs	r3, r2
 8002562:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002564:	4b3d      	ldr	r3, [pc, #244]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a3c      	ldr	r2, [pc, #240]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 800256a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800256e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002570:	4b3a      	ldr	r3, [pc, #232]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	4a39      	ldr	r2, [pc, #228]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 8002576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800257a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800257c:	f7fe fd40 	bl	8001000 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002584:	f7fe fd3c 	bl	8001000 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e067      	b.n	8002666 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002596:	4b31      	ldr	r3, [pc, #196]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0f0      	beq.n	8002584 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025a2:	e05f      	b.n	8002664 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e05e      	b.n	8002666 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025a8:	4b2c      	ldr	r3, [pc, #176]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d157      	bne.n	8002664 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025b4:	4b29      	ldr	r3, [pc, #164]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a28      	ldr	r2, [pc, #160]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 80025ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025c0:	4b26      	ldr	r3, [pc, #152]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	4a25      	ldr	r2, [pc, #148]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 80025c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025cc:	f7fe fd18 	bl	8001000 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d4:	f7fe fd14 	bl	8001000 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e03f      	b.n	8002666 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025e6:	4b1d      	ldr	r3, [pc, #116]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCC_OscConfig+0x7a4>
 80025f2:	e037      	b.n	8002664 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	2b0c      	cmp	r3, #12
 80025f8:	d02d      	beq.n	8002656 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fa:	4b18      	ldr	r3, [pc, #96]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a17      	ldr	r2, [pc, #92]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 8002600:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002604:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002606:	4b15      	ldr	r3, [pc, #84]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d105      	bne.n	800261e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002612:	4b12      	ldr	r3, [pc, #72]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	4a11      	ldr	r2, [pc, #68]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 8002618:	f023 0303 	bic.w	r3, r3, #3
 800261c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800261e:	4b0f      	ldr	r3, [pc, #60]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	4a0e      	ldr	r2, [pc, #56]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 8002624:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800262c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262e:	f7fe fce7 	bl	8001000 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002636:	f7fe fce3 	bl	8001000 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e00e      	b.n	8002666 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <HAL_RCC_OscConfig+0x82c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f0      	bne.n	8002636 <HAL_RCC_OscConfig+0x806>
 8002654:	e006      	b.n	8002664 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e005      	b.n	8002666 <HAL_RCC_OscConfig+0x836>
 800265a:	bf00      	nop
 800265c:	40021000 	.word	0x40021000
 8002660:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3720      	adds	r7, #32
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop

08002670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0c8      	b.n	8002816 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002684:	4b66      	ldr	r3, [pc, #408]	; (8002820 <HAL_RCC_ClockConfig+0x1b0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d910      	bls.n	80026b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002692:	4b63      	ldr	r3, [pc, #396]	; (8002820 <HAL_RCC_ClockConfig+0x1b0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 0207 	bic.w	r2, r3, #7
 800269a:	4961      	ldr	r1, [pc, #388]	; (8002820 <HAL_RCC_ClockConfig+0x1b0>)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	4313      	orrs	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a2:	4b5f      	ldr	r3, [pc, #380]	; (8002820 <HAL_RCC_ClockConfig+0x1b0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d001      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0b0      	b.n	8002816 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d04c      	beq.n	800275a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d107      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026c8:	4b56      	ldr	r3, [pc, #344]	; (8002824 <HAL_RCC_ClockConfig+0x1b4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d121      	bne.n	8002718 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e09e      	b.n	8002816 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d107      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026e0:	4b50      	ldr	r3, [pc, #320]	; (8002824 <HAL_RCC_ClockConfig+0x1b4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d115      	bne.n	8002718 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e092      	b.n	8002816 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d107      	bne.n	8002708 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026f8:	4b4a      	ldr	r3, [pc, #296]	; (8002824 <HAL_RCC_ClockConfig+0x1b4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d109      	bne.n	8002718 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e086      	b.n	8002816 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002708:	4b46      	ldr	r3, [pc, #280]	; (8002824 <HAL_RCC_ClockConfig+0x1b4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e07e      	b.n	8002816 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002718:	4b42      	ldr	r3, [pc, #264]	; (8002824 <HAL_RCC_ClockConfig+0x1b4>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f023 0203 	bic.w	r2, r3, #3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	493f      	ldr	r1, [pc, #252]	; (8002824 <HAL_RCC_ClockConfig+0x1b4>)
 8002726:	4313      	orrs	r3, r2
 8002728:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800272a:	f7fe fc69 	bl	8001000 <HAL_GetTick>
 800272e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002730:	e00a      	b.n	8002748 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002732:	f7fe fc65 	bl	8001000 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002740:	4293      	cmp	r3, r2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e066      	b.n	8002816 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002748:	4b36      	ldr	r3, [pc, #216]	; (8002824 <HAL_RCC_ClockConfig+0x1b4>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 020c 	and.w	r2, r3, #12
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	429a      	cmp	r2, r3
 8002758:	d1eb      	bne.n	8002732 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d008      	beq.n	8002778 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002766:	4b2f      	ldr	r3, [pc, #188]	; (8002824 <HAL_RCC_ClockConfig+0x1b4>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	492c      	ldr	r1, [pc, #176]	; (8002824 <HAL_RCC_ClockConfig+0x1b4>)
 8002774:	4313      	orrs	r3, r2
 8002776:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002778:	4b29      	ldr	r3, [pc, #164]	; (8002820 <HAL_RCC_ClockConfig+0x1b0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d210      	bcs.n	80027a8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002786:	4b26      	ldr	r3, [pc, #152]	; (8002820 <HAL_RCC_ClockConfig+0x1b0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f023 0207 	bic.w	r2, r3, #7
 800278e:	4924      	ldr	r1, [pc, #144]	; (8002820 <HAL_RCC_ClockConfig+0x1b0>)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002796:	4b22      	ldr	r3, [pc, #136]	; (8002820 <HAL_RCC_ClockConfig+0x1b0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e036      	b.n	8002816 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027b4:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <HAL_RCC_ClockConfig+0x1b4>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	4918      	ldr	r1, [pc, #96]	; (8002824 <HAL_RCC_ClockConfig+0x1b4>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d009      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027d2:	4b14      	ldr	r3, [pc, #80]	; (8002824 <HAL_RCC_ClockConfig+0x1b4>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4910      	ldr	r1, [pc, #64]	; (8002824 <HAL_RCC_ClockConfig+0x1b4>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027e6:	f000 f825 	bl	8002834 <HAL_RCC_GetSysClockFreq>
 80027ea:	4601      	mov	r1, r0
 80027ec:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <HAL_RCC_ClockConfig+0x1b4>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	091b      	lsrs	r3, r3, #4
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	4a0c      	ldr	r2, [pc, #48]	; (8002828 <HAL_RCC_ClockConfig+0x1b8>)
 80027f8:	5cd3      	ldrb	r3, [r2, r3]
 80027fa:	f003 031f 	and.w	r3, r3, #31
 80027fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002802:	4a0a      	ldr	r2, [pc, #40]	; (800282c <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002806:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <HAL_RCC_ClockConfig+0x1c0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f7fe fae2 	bl	8000dd4 <HAL_InitTick>
 8002810:	4603      	mov	r3, r0
 8002812:	72fb      	strb	r3, [r7, #11]

  return status;
 8002814:	7afb      	ldrb	r3, [r7, #11]
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40022000 	.word	0x40022000
 8002824:	40021000 	.word	0x40021000
 8002828:	08006ad8 	.word	0x08006ad8
 800282c:	20000008 	.word	0x20000008
 8002830:	2000000c 	.word	0x2000000c

08002834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002834:	b480      	push	{r7}
 8002836:	b089      	sub	sp, #36	; 0x24
 8002838:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
 800283e:	2300      	movs	r3, #0
 8002840:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002842:	4b3d      	ldr	r3, [pc, #244]	; (8002938 <HAL_RCC_GetSysClockFreq+0x104>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 030c 	and.w	r3, r3, #12
 800284a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800284c:	4b3a      	ldr	r3, [pc, #232]	; (8002938 <HAL_RCC_GetSysClockFreq+0x104>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f003 0303 	and.w	r3, r3, #3
 8002854:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <HAL_RCC_GetSysClockFreq+0x34>
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	2b0c      	cmp	r3, #12
 8002860:	d121      	bne.n	80028a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d11e      	bne.n	80028a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002868:	4b33      	ldr	r3, [pc, #204]	; (8002938 <HAL_RCC_GetSysClockFreq+0x104>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	2b00      	cmp	r3, #0
 8002872:	d107      	bne.n	8002884 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002874:	4b30      	ldr	r3, [pc, #192]	; (8002938 <HAL_RCC_GetSysClockFreq+0x104>)
 8002876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800287a:	0a1b      	lsrs	r3, r3, #8
 800287c:	f003 030f 	and.w	r3, r3, #15
 8002880:	61fb      	str	r3, [r7, #28]
 8002882:	e005      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002884:	4b2c      	ldr	r3, [pc, #176]	; (8002938 <HAL_RCC_GetSysClockFreq+0x104>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002890:	4a2a      	ldr	r2, [pc, #168]	; (800293c <HAL_RCC_GetSysClockFreq+0x108>)
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002898:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10d      	bne.n	80028bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028a4:	e00a      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d102      	bne.n	80028b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028ac:	4b24      	ldr	r3, [pc, #144]	; (8002940 <HAL_RCC_GetSysClockFreq+0x10c>)
 80028ae:	61bb      	str	r3, [r7, #24]
 80028b0:	e004      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d101      	bne.n	80028bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028b8:	4b21      	ldr	r3, [pc, #132]	; (8002940 <HAL_RCC_GetSysClockFreq+0x10c>)
 80028ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	2b0c      	cmp	r3, #12
 80028c0:	d133      	bne.n	800292a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028c2:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <HAL_RCC_GetSysClockFreq+0x104>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d002      	beq.n	80028d8 <HAL_RCC_GetSysClockFreq+0xa4>
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d003      	beq.n	80028de <HAL_RCC_GetSysClockFreq+0xaa>
 80028d6:	e005      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80028d8:	4b19      	ldr	r3, [pc, #100]	; (8002940 <HAL_RCC_GetSysClockFreq+0x10c>)
 80028da:	617b      	str	r3, [r7, #20]
      break;
 80028dc:	e005      	b.n	80028ea <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80028de:	4b18      	ldr	r3, [pc, #96]	; (8002940 <HAL_RCC_GetSysClockFreq+0x10c>)
 80028e0:	617b      	str	r3, [r7, #20]
      break;
 80028e2:	e002      	b.n	80028ea <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	617b      	str	r3, [r7, #20]
      break;
 80028e8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028ea:	4b13      	ldr	r3, [pc, #76]	; (8002938 <HAL_RCC_GetSysClockFreq+0x104>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	091b      	lsrs	r3, r3, #4
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	3301      	adds	r3, #1
 80028f6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028f8:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <HAL_RCC_GetSysClockFreq+0x104>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	0a1b      	lsrs	r3, r3, #8
 80028fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	fb02 f203 	mul.w	r2, r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	fbb2 f3f3 	udiv	r3, r2, r3
 800290e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002910:	4b09      	ldr	r3, [pc, #36]	; (8002938 <HAL_RCC_GetSysClockFreq+0x104>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	0e5b      	lsrs	r3, r3, #25
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	3301      	adds	r3, #1
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	fbb2 f3f3 	udiv	r3, r2, r3
 8002928:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800292a:	69bb      	ldr	r3, [r7, #24]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3724      	adds	r7, #36	; 0x24
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	40021000 	.word	0x40021000
 800293c:	08006af0 	.word	0x08006af0
 8002940:	00f42400 	.word	0x00f42400

08002944 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002948:	4b03      	ldr	r3, [pc, #12]	; (8002958 <HAL_RCC_GetHCLKFreq+0x14>)
 800294a:	681b      	ldr	r3, [r3, #0]
}
 800294c:	4618      	mov	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	20000008 	.word	0x20000008

0800295c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002960:	f7ff fff0 	bl	8002944 <HAL_RCC_GetHCLKFreq>
 8002964:	4601      	mov	r1, r0
 8002966:	4b06      	ldr	r3, [pc, #24]	; (8002980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	0a1b      	lsrs	r3, r3, #8
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	4a04      	ldr	r2, [pc, #16]	; (8002984 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002972:	5cd3      	ldrb	r3, [r2, r3]
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	fa21 f303 	lsr.w	r3, r1, r3
}
 800297c:	4618      	mov	r0, r3
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000
 8002984:	08006ae8 	.word	0x08006ae8

08002988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800298c:	f7ff ffda 	bl	8002944 <HAL_RCC_GetHCLKFreq>
 8002990:	4601      	mov	r1, r0
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	0adb      	lsrs	r3, r3, #11
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	4a04      	ldr	r2, [pc, #16]	; (80029b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800299e:	5cd3      	ldrb	r3, [r2, r3]
 80029a0:	f003 031f 	and.w	r3, r3, #31
 80029a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40021000 	.word	0x40021000
 80029b0:	08006ae8 	.word	0x08006ae8

080029b4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	220f      	movs	r2, #15
 80029c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80029c4:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <HAL_RCC_GetClockConfig+0x5c>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 0203 	and.w	r2, r3, #3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80029d0:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <HAL_RCC_GetClockConfig+0x5c>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80029dc:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <HAL_RCC_GetClockConfig+0x5c>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80029e8:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HAL_RCC_GetClockConfig+0x5c>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	08db      	lsrs	r3, r3, #3
 80029ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80029f6:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <HAL_RCC_GetClockConfig+0x60>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0207 	and.w	r2, r3, #7
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	601a      	str	r2, [r3, #0]
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40022000 	.word	0x40022000

08002a18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a20:	2300      	movs	r3, #0
 8002a22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a24:	4b2a      	ldr	r3, [pc, #168]	; (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a30:	f7ff f99a 	bl	8001d68 <HAL_PWREx_GetVoltageRange>
 8002a34:	6178      	str	r0, [r7, #20]
 8002a36:	e014      	b.n	8002a62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a38:	4b25      	ldr	r3, [pc, #148]	; (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3c:	4a24      	ldr	r2, [pc, #144]	; (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a42:	6593      	str	r3, [r2, #88]	; 0x58
 8002a44:	4b22      	ldr	r3, [pc, #136]	; (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a50:	f7ff f98a 	bl	8001d68 <HAL_PWREx_GetVoltageRange>
 8002a54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a56:	4b1e      	ldr	r3, [pc, #120]	; (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5a:	4a1d      	ldr	r2, [pc, #116]	; (8002ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a60:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a68:	d10b      	bne.n	8002a82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b80      	cmp	r3, #128	; 0x80
 8002a6e:	d919      	bls.n	8002aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2ba0      	cmp	r3, #160	; 0xa0
 8002a74:	d902      	bls.n	8002a7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a76:	2302      	movs	r3, #2
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	e013      	b.n	8002aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	e010      	b.n	8002aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b80      	cmp	r3, #128	; 0x80
 8002a86:	d902      	bls.n	8002a8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a88:	2303      	movs	r3, #3
 8002a8a:	613b      	str	r3, [r7, #16]
 8002a8c:	e00a      	b.n	8002aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b80      	cmp	r3, #128	; 0x80
 8002a92:	d102      	bne.n	8002a9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a94:	2302      	movs	r3, #2
 8002a96:	613b      	str	r3, [r7, #16]
 8002a98:	e004      	b.n	8002aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b70      	cmp	r3, #112	; 0x70
 8002a9e:	d101      	bne.n	8002aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f023 0207 	bic.w	r2, r3, #7
 8002aac:	4909      	ldr	r1, [pc, #36]	; (8002ad4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ab4:	4b07      	ldr	r3, [pc, #28]	; (8002ad4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d001      	beq.n	8002ac6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40022000 	.word	0x40022000

08002ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d02f      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002afc:	d005      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002afe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b02:	d015      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d007      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002b08:	e00f      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002b0a:	4bac      	ldr	r3, [pc, #688]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	4aab      	ldr	r2, [pc, #684]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b14:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b16:	e00c      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 f9dc 	bl	8002edc <RCCEx_PLLSAI1_Config>
 8002b24:	4603      	mov	r3, r0
 8002b26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b28:	e003      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	74fb      	strb	r3, [r7, #19]
      break;
 8002b2e:	e000      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002b30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b32:	7cfb      	ldrb	r3, [r7, #19]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10b      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b38:	4ba0      	ldr	r3, [pc, #640]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b46:	499d      	ldr	r1, [pc, #628]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b4e:	e001      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b50:	7cfb      	ldrb	r3, [r7, #19]
 8002b52:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 8099 	beq.w	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b62:	2300      	movs	r3, #0
 8002b64:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b66:	4b95      	ldr	r3, [pc, #596]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002b76:	2300      	movs	r3, #0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00d      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7c:	4b8f      	ldr	r3, [pc, #572]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b80:	4a8e      	ldr	r2, [pc, #568]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b86:	6593      	str	r3, [r2, #88]	; 0x58
 8002b88:	4b8c      	ldr	r3, [pc, #560]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b94:	2301      	movs	r3, #1
 8002b96:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b98:	4b89      	ldr	r3, [pc, #548]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a88      	ldr	r2, [pc, #544]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ba4:	f7fe fa2c 	bl	8001000 <HAL_GetTick>
 8002ba8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002baa:	e009      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bac:	f7fe fa28 	bl	8001000 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d902      	bls.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	74fb      	strb	r3, [r7, #19]
        break;
 8002bbe:	e005      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bc0:	4b7f      	ldr	r3, [pc, #508]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0ef      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002bcc:	7cfb      	ldrb	r3, [r7, #19]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d155      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bd2:	4b7a      	ldr	r3, [pc, #488]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bdc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d01e      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d019      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bee:	4b73      	ldr	r3, [pc, #460]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bfa:	4b70      	ldr	r3, [pc, #448]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c00:	4a6e      	ldr	r2, [pc, #440]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c0a:	4b6c      	ldr	r3, [pc, #432]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c10:	4a6a      	ldr	r2, [pc, #424]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c1a:	4a68      	ldr	r2, [pc, #416]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d016      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2c:	f7fe f9e8 	bl	8001000 <HAL_GetTick>
 8002c30:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c32:	e00b      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c34:	f7fe f9e4 	bl	8001000 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d902      	bls.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	74fb      	strb	r3, [r7, #19]
            break;
 8002c4a:	e006      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c4c:	4b5b      	ldr	r3, [pc, #364]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0ec      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002c5a:	7cfb      	ldrb	r3, [r7, #19]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10b      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c60:	4b56      	ldr	r3, [pc, #344]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c6e:	4953      	ldr	r1, [pc, #332]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c76:	e004      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c78:	7cfb      	ldrb	r3, [r7, #19]
 8002c7a:	74bb      	strb	r3, [r7, #18]
 8002c7c:	e001      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c7e:	7cfb      	ldrb	r3, [r7, #19]
 8002c80:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c82:	7c7b      	ldrb	r3, [r7, #17]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d105      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c88:	4b4c      	ldr	r3, [pc, #304]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8c:	4a4b      	ldr	r2, [pc, #300]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00a      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ca0:	4b46      	ldr	r3, [pc, #280]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca6:	f023 0203 	bic.w	r2, r3, #3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	4943      	ldr	r1, [pc, #268]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00a      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cc2:	4b3e      	ldr	r3, [pc, #248]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc8:	f023 020c 	bic.w	r2, r3, #12
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	493a      	ldr	r1, [pc, #232]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0320 	and.w	r3, r3, #32
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00a      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ce4:	4b35      	ldr	r3, [pc, #212]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf2:	4932      	ldr	r1, [pc, #200]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d06:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d14:	4929      	ldr	r1, [pc, #164]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00a      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d28:	4b24      	ldr	r3, [pc, #144]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d36:	4921      	ldr	r1, [pc, #132]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d4a:	4b1c      	ldr	r3, [pc, #112]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	4918      	ldr	r1, [pc, #96]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00a      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d6c:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	4910      	ldr	r1, [pc, #64]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d02c      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d8e:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d94:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	4907      	ldr	r1, [pc, #28]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dac:	d10a      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dae:	4b03      	ldr	r3, [pc, #12]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	4a02      	ldr	r2, [pc, #8]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002db4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002db8:	60d3      	str	r3, [r2, #12]
 8002dba:	e015      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dcc:	d10c      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 f881 	bl	8002edc <RCCEx_PLLSAI1_Config>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002dde:	7cfb      	ldrb	r3, [r7, #19]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8002de4:	7cfb      	ldrb	r3, [r7, #19]
 8002de6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d028      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002df4:	4b30      	ldr	r3, [pc, #192]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	492d      	ldr	r1, [pc, #180]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e12:	d106      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e14:	4b28      	ldr	r3, [pc, #160]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	4a27      	ldr	r2, [pc, #156]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e1e:	60d3      	str	r3, [r2, #12]
 8002e20:	e011      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e2a:	d10c      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3304      	adds	r3, #4
 8002e30:	2101      	movs	r1, #1
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 f852 	bl	8002edc <RCCEx_PLLSAI1_Config>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e3c:	7cfb      	ldrb	r3, [r7, #19]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8002e42:	7cfb      	ldrb	r3, [r7, #19]
 8002e44:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d01c      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e52:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e58:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e60:	4915      	ldr	r1, [pc, #84]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3304      	adds	r3, #4
 8002e76:	2102      	movs	r1, #2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 f82f 	bl	8002edc <RCCEx_PLLSAI1_Config>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e82:	7cfb      	ldrb	r3, [r7, #19]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002e88:	7cfb      	ldrb	r3, [r7, #19]
 8002e8a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00a      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e98:	4b07      	ldr	r3, [pc, #28]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea6:	4904      	ldr	r1, [pc, #16]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002eae:	7cbb      	ldrb	r3, [r7, #18]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40021000 	.word	0x40021000

08002ebc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a04      	ldr	r2, [pc, #16]	; (8002ed8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002ec6:	f043 0304 	orr.w	r3, r3, #4
 8002eca:	6013      	str	r3, [r2, #0]
}
 8002ecc:	bf00      	nop
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40021000 	.word	0x40021000

08002edc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002eea:	4b73      	ldr	r3, [pc, #460]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d018      	beq.n	8002f28 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ef6:	4b70      	ldr	r3, [pc, #448]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f003 0203 	and.w	r2, r3, #3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d10d      	bne.n	8002f22 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
       ||
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d009      	beq.n	8002f22 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f0e:	4b6a      	ldr	r3, [pc, #424]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	091b      	lsrs	r3, r3, #4
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
       ||
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d044      	beq.n	8002fac <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
 8002f26:	e041      	b.n	8002fac <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d00c      	beq.n	8002f4a <RCCEx_PLLSAI1_Config+0x6e>
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d013      	beq.n	8002f5c <RCCEx_PLLSAI1_Config+0x80>
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d120      	bne.n	8002f7a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f38:	4b5f      	ldr	r3, [pc, #380]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d11d      	bne.n	8002f80 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f48:	e01a      	b.n	8002f80 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f4a:	4b5b      	ldr	r3, [pc, #364]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d116      	bne.n	8002f84 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f5a:	e013      	b.n	8002f84 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f5c:	4b56      	ldr	r3, [pc, #344]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10f      	bne.n	8002f88 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f68:	4b53      	ldr	r3, [pc, #332]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d109      	bne.n	8002f88 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f78:	e006      	b.n	8002f88 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	73fb      	strb	r3, [r7, #15]
      break;
 8002f7e:	e004      	b.n	8002f8a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002f80:	bf00      	nop
 8002f82:	e002      	b.n	8002f8a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002f84:	bf00      	nop
 8002f86:	e000      	b.n	8002f8a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002f88:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10d      	bne.n	8002fac <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f90:	4b49      	ldr	r3, [pc, #292]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6819      	ldr	r1, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	430b      	orrs	r3, r1
 8002fa6:	4944      	ldr	r1, [pc, #272]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d17c      	bne.n	80030ac <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002fb2:	4b41      	ldr	r3, [pc, #260]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a40      	ldr	r2, [pc, #256]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fb8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fbe:	f7fe f81f 	bl	8001000 <HAL_GetTick>
 8002fc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fc4:	e009      	b.n	8002fda <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fc6:	f7fe f81b 	bl	8001000 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d902      	bls.n	8002fda <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	73fb      	strb	r3, [r7, #15]
        break;
 8002fd8:	e005      	b.n	8002fe6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fda:	4b37      	ldr	r3, [pc, #220]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1ef      	bne.n	8002fc6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d15f      	bne.n	80030ac <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d110      	bne.n	8003014 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ff2:	4b31      	ldr	r3, [pc, #196]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002ffa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6892      	ldr	r2, [r2, #8]
 8003002:	0211      	lsls	r1, r2, #8
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	68d2      	ldr	r2, [r2, #12]
 8003008:	06d2      	lsls	r2, r2, #27
 800300a:	430a      	orrs	r2, r1
 800300c:	492a      	ldr	r1, [pc, #168]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800300e:	4313      	orrs	r3, r2
 8003010:	610b      	str	r3, [r1, #16]
 8003012:	e027      	b.n	8003064 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d112      	bne.n	8003040 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800301a:	4b27      	ldr	r3, [pc, #156]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003022:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6892      	ldr	r2, [r2, #8]
 800302a:	0211      	lsls	r1, r2, #8
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6912      	ldr	r2, [r2, #16]
 8003030:	0852      	lsrs	r2, r2, #1
 8003032:	3a01      	subs	r2, #1
 8003034:	0552      	lsls	r2, r2, #21
 8003036:	430a      	orrs	r2, r1
 8003038:	491f      	ldr	r1, [pc, #124]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800303a:	4313      	orrs	r3, r2
 800303c:	610b      	str	r3, [r1, #16]
 800303e:	e011      	b.n	8003064 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003040:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003048:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6892      	ldr	r2, [r2, #8]
 8003050:	0211      	lsls	r1, r2, #8
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6952      	ldr	r2, [r2, #20]
 8003056:	0852      	lsrs	r2, r2, #1
 8003058:	3a01      	subs	r2, #1
 800305a:	0652      	lsls	r2, r2, #25
 800305c:	430a      	orrs	r2, r1
 800305e:	4916      	ldr	r1, [pc, #88]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003060:	4313      	orrs	r3, r2
 8003062:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003064:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a13      	ldr	r2, [pc, #76]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800306a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800306e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003070:	f7fd ffc6 	bl	8001000 <HAL_GetTick>
 8003074:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003076:	e009      	b.n	800308c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003078:	f7fd ffc2 	bl	8001000 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d902      	bls.n	800308c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	73fb      	strb	r3, [r7, #15]
          break;
 800308a:	e005      	b.n	8003098 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800308c:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0ef      	beq.n	8003078 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d106      	bne.n	80030ac <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800309e:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030a0:	691a      	ldr	r2, [r3, #16]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	4904      	ldr	r1, [pc, #16]	; (80030b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40021000 	.word	0x40021000

080030bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e049      	b.n	8003162 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f841 	bl	800316a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3304      	adds	r3, #4
 80030f8:	4619      	mov	r1, r3
 80030fa:	4610      	mov	r0, r2
 80030fc:	f000 f9dc 	bl	80034b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
	...

08003180 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b01      	cmp	r3, #1
 8003192:	d001      	beq.n	8003198 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e03b      	b.n	8003210 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0201 	orr.w	r2, r2, #1
 80031ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a19      	ldr	r2, [pc, #100]	; (800321c <HAL_TIM_Base_Start_IT+0x9c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d009      	beq.n	80031ce <HAL_TIM_Base_Start_IT+0x4e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c2:	d004      	beq.n	80031ce <HAL_TIM_Base_Start_IT+0x4e>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a15      	ldr	r2, [pc, #84]	; (8003220 <HAL_TIM_Base_Start_IT+0xa0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d115      	bne.n	80031fa <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	4b13      	ldr	r3, [pc, #76]	; (8003224 <HAL_TIM_Base_Start_IT+0xa4>)
 80031d6:	4013      	ands	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2b06      	cmp	r3, #6
 80031de:	d015      	beq.n	800320c <HAL_TIM_Base_Start_IT+0x8c>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e6:	d011      	beq.n	800320c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031f8:	e008      	b.n	800320c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f042 0201 	orr.w	r2, r2, #1
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	e000      	b.n	800320e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	40012c00 	.word	0x40012c00
 8003220:	40014000 	.word	0x40014000
 8003224:	00010007 	.word	0x00010007

08003228 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b02      	cmp	r3, #2
 800323c:	d122      	bne.n	8003284 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b02      	cmp	r3, #2
 800324a:	d11b      	bne.n	8003284 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f06f 0202 	mvn.w	r2, #2
 8003254:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f905 	bl	800347a <HAL_TIM_IC_CaptureCallback>
 8003270:	e005      	b.n	800327e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f8f7 	bl	8003466 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 f908 	bl	800348e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	2b04      	cmp	r3, #4
 8003290:	d122      	bne.n	80032d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b04      	cmp	r3, #4
 800329e:	d11b      	bne.n	80032d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f06f 0204 	mvn.w	r2, #4
 80032a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2202      	movs	r2, #2
 80032ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f8db 	bl	800347a <HAL_TIM_IC_CaptureCallback>
 80032c4:	e005      	b.n	80032d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f8cd 	bl	8003466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f8de 	bl	800348e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d122      	bne.n	800332c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d11b      	bne.n	800332c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f06f 0208 	mvn.w	r2, #8
 80032fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2204      	movs	r2, #4
 8003302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f8b1 	bl	800347a <HAL_TIM_IC_CaptureCallback>
 8003318:	e005      	b.n	8003326 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f8a3 	bl	8003466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f8b4 	bl	800348e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	2b10      	cmp	r3, #16
 8003338:	d122      	bne.n	8003380 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	2b10      	cmp	r3, #16
 8003346:	d11b      	bne.n	8003380 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f06f 0210 	mvn.w	r2, #16
 8003350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2208      	movs	r2, #8
 8003356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f887 	bl	800347a <HAL_TIM_IC_CaptureCallback>
 800336c:	e005      	b.n	800337a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f879 	bl	8003466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f88a 	bl	800348e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b01      	cmp	r3, #1
 800338c:	d10e      	bne.n	80033ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b01      	cmp	r3, #1
 800339a:	d107      	bne.n	80033ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f06f 0201 	mvn.w	r2, #1
 80033a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7fd fbb2 	bl	8000b10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b6:	2b80      	cmp	r3, #128	; 0x80
 80033b8:	d10e      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c4:	2b80      	cmp	r3, #128	; 0x80
 80033c6:	d107      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f8de 	bl	8003594 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033e6:	d10e      	bne.n	8003406 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f2:	2b80      	cmp	r3, #128	; 0x80
 80033f4:	d107      	bne.n	8003406 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80033fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f8d1 	bl	80035a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003410:	2b40      	cmp	r3, #64	; 0x40
 8003412:	d10e      	bne.n	8003432 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341e:	2b40      	cmp	r3, #64	; 0x40
 8003420:	d107      	bne.n	8003432 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800342a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f838 	bl	80034a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b20      	cmp	r3, #32
 800343e:	d10e      	bne.n	800345e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b20      	cmp	r3, #32
 800344c:	d107      	bne.n	800345e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f06f 0220 	mvn.w	r2, #32
 8003456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f891 	bl	8003580 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
	...

080034b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a2a      	ldr	r2, [pc, #168]	; (8003574 <TIM_Base_SetConfig+0xbc>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d003      	beq.n	80034d8 <TIM_Base_SetConfig+0x20>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d6:	d108      	bne.n	80034ea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a21      	ldr	r2, [pc, #132]	; (8003574 <TIM_Base_SetConfig+0xbc>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d00b      	beq.n	800350a <TIM_Base_SetConfig+0x52>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f8:	d007      	beq.n	800350a <TIM_Base_SetConfig+0x52>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a1e      	ldr	r2, [pc, #120]	; (8003578 <TIM_Base_SetConfig+0xc0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d003      	beq.n	800350a <TIM_Base_SetConfig+0x52>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a1d      	ldr	r2, [pc, #116]	; (800357c <TIM_Base_SetConfig+0xc4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d108      	bne.n	800351c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	4313      	orrs	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	4313      	orrs	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a0c      	ldr	r2, [pc, #48]	; (8003574 <TIM_Base_SetConfig+0xbc>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d007      	beq.n	8003558 <TIM_Base_SetConfig+0xa0>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a0b      	ldr	r2, [pc, #44]	; (8003578 <TIM_Base_SetConfig+0xc0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d003      	beq.n	8003558 <TIM_Base_SetConfig+0xa0>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a0a      	ldr	r2, [pc, #40]	; (800357c <TIM_Base_SetConfig+0xc4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d103      	bne.n	8003560 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	691a      	ldr	r2, [r3, #16]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	615a      	str	r2, [r3, #20]
}
 8003566:	bf00      	nop
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40012c00 	.word	0x40012c00
 8003578:	40014000 	.word	0x40014000
 800357c:	40014400 	.word	0x40014400

08003580 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e040      	b.n	8003650 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d106      	bne.n	80035e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7fd fb5c 	bl	8000c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2224      	movs	r2, #36	; 0x24
 80035e8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0201 	bic.w	r2, r2, #1
 80035f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f962 	bl	80038c4 <UART_SetConfig>
 8003600:	4603      	mov	r3, r0
 8003602:	2b01      	cmp	r3, #1
 8003604:	d101      	bne.n	800360a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e022      	b.n	8003650 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 fb66 	bl	8003ce4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003626:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003636:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 fbed 	bl	8003e28 <UART_CheckIdleState>
 800364e:	4603      	mov	r3, r0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08a      	sub	sp, #40	; 0x28
 800365c:	af02      	add	r7, sp, #8
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	603b      	str	r3, [r7, #0]
 8003664:	4613      	mov	r3, r2
 8003666:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800366c:	2b20      	cmp	r3, #32
 800366e:	f040 8081 	bne.w	8003774 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d002      	beq.n	800367e <HAL_UART_Transmit+0x26>
 8003678:	88fb      	ldrh	r3, [r7, #6]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e079      	b.n	8003776 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_UART_Transmit+0x38>
 800368c:	2302      	movs	r3, #2
 800368e:	e072      	b.n	8003776 <HAL_UART_Transmit+0x11e>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2221      	movs	r2, #33	; 0x21
 80036a2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80036a4:	f7fd fcac 	bl	8001000 <HAL_GetTick>
 80036a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	88fa      	ldrh	r2, [r7, #6]
 80036ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	88fa      	ldrh	r2, [r7, #6]
 80036b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c2:	d108      	bne.n	80036d6 <HAL_UART_Transmit+0x7e>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d104      	bne.n	80036d6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	61bb      	str	r3, [r7, #24]
 80036d4:	e003      	b.n	80036de <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80036e6:	e02d      	b.n	8003744 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	2200      	movs	r2, #0
 80036f0:	2180      	movs	r1, #128	; 0x80
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 fbdd 	bl	8003eb2 <UART_WaitOnFlagUntilTimeout>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e039      	b.n	8003776 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10b      	bne.n	8003720 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	881a      	ldrh	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003714:	b292      	uxth	r2, r2
 8003716:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	3302      	adds	r3, #2
 800371c:	61bb      	str	r3, [r7, #24]
 800371e:	e008      	b.n	8003732 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	781a      	ldrb	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	b292      	uxth	r2, r2
 800372a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	3301      	adds	r3, #1
 8003730:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003738:	b29b      	uxth	r3, r3
 800373a:	3b01      	subs	r3, #1
 800373c:	b29a      	uxth	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800374a:	b29b      	uxth	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1cb      	bne.n	80036e8 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	2200      	movs	r2, #0
 8003758:	2140      	movs	r1, #64	; 0x40
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 fba9 	bl	8003eb2 <UART_WaitOnFlagUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e005      	b.n	8003776 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2220      	movs	r2, #32
 800376e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	e000      	b.n	8003776 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003774:	2302      	movs	r3, #2
  }
}
 8003776:	4618      	mov	r0, r3
 8003778:	3720      	adds	r7, #32
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	4613      	mov	r3, r2
 800378c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003792:	2b20      	cmp	r3, #32
 8003794:	d16c      	bne.n	8003870 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <HAL_UART_Receive_DMA+0x22>
 800379c:	88fb      	ldrh	r3, [r7, #6]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e065      	b.n	8003872 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_UART_Receive_DMA+0x34>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e05e      	b.n	8003872 <HAL_UART_Receive_DMA+0xf2>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	88fa      	ldrh	r2, [r7, #6]
 80037c6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2222      	movs	r2, #34	; 0x22
 80037d4:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d02a      	beq.n	8003834 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037e2:	4a26      	ldr	r2, [pc, #152]	; (800387c <HAL_UART_Receive_DMA+0xfc>)
 80037e4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ea:	4a25      	ldr	r2, [pc, #148]	; (8003880 <HAL_UART_Receive_DMA+0x100>)
 80037ec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037f2:	4a24      	ldr	r2, [pc, #144]	; (8003884 <HAL_UART_Receive_DMA+0x104>)
 80037f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037fa:	2200      	movs	r2, #0
 80037fc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	3324      	adds	r3, #36	; 0x24
 8003808:	4619      	mov	r1, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380e:	461a      	mov	r2, r3
 8003810:	88fb      	ldrh	r3, [r7, #6]
 8003812:	f7fd fe97 	bl	8001544 <HAL_DMA_Start_IT>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00b      	beq.n	8003834 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2210      	movs	r2, #16
 8003820:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2220      	movs	r2, #32
 800382e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e01e      	b.n	8003872 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800384a:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800386a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800386c:	2300      	movs	r3, #0
 800386e:	e000      	b.n	8003872 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8003870:	2302      	movs	r3, #2
  }
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	08004013 	.word	0x08004013
 8003880:	0800407b 	.word	0x0800407b
 8003884:	08004097 	.word	0x08004097

08003888 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038c4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80038c8:	b088      	sub	sp, #32
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689a      	ldr	r2, [r3, #8]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	431a      	orrs	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	4bb0      	ldr	r3, [pc, #704]	; (8003bb4 <UART_SetConfig+0x2f0>)
 80038f2:	4013      	ands	r3, r2
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6812      	ldr	r2, [r2, #0]
 80038f8:	69f9      	ldr	r1, [r7, #28]
 80038fa:	430b      	orrs	r3, r1
 80038fc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4aa6      	ldr	r2, [pc, #664]	; (8003bb8 <UART_SetConfig+0x2f4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d004      	beq.n	800392e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	69fa      	ldr	r2, [r7, #28]
 800392a:	4313      	orrs	r3, r2
 800392c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	69fa      	ldr	r2, [r7, #28]
 800393e:	430a      	orrs	r2, r1
 8003940:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a9d      	ldr	r2, [pc, #628]	; (8003bbc <UART_SetConfig+0x2f8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d121      	bne.n	8003990 <UART_SetConfig+0xcc>
 800394c:	4b9c      	ldr	r3, [pc, #624]	; (8003bc0 <UART_SetConfig+0x2fc>)
 800394e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	2b03      	cmp	r3, #3
 8003958:	d816      	bhi.n	8003988 <UART_SetConfig+0xc4>
 800395a:	a201      	add	r2, pc, #4	; (adr r2, 8003960 <UART_SetConfig+0x9c>)
 800395c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003960:	08003971 	.word	0x08003971
 8003964:	0800397d 	.word	0x0800397d
 8003968:	08003977 	.word	0x08003977
 800396c:	08003983 	.word	0x08003983
 8003970:	2301      	movs	r3, #1
 8003972:	76fb      	strb	r3, [r7, #27]
 8003974:	e072      	b.n	8003a5c <UART_SetConfig+0x198>
 8003976:	2302      	movs	r3, #2
 8003978:	76fb      	strb	r3, [r7, #27]
 800397a:	e06f      	b.n	8003a5c <UART_SetConfig+0x198>
 800397c:	2304      	movs	r3, #4
 800397e:	76fb      	strb	r3, [r7, #27]
 8003980:	e06c      	b.n	8003a5c <UART_SetConfig+0x198>
 8003982:	2308      	movs	r3, #8
 8003984:	76fb      	strb	r3, [r7, #27]
 8003986:	e069      	b.n	8003a5c <UART_SetConfig+0x198>
 8003988:	2310      	movs	r3, #16
 800398a:	76fb      	strb	r3, [r7, #27]
 800398c:	bf00      	nop
 800398e:	e065      	b.n	8003a5c <UART_SetConfig+0x198>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a8b      	ldr	r2, [pc, #556]	; (8003bc4 <UART_SetConfig+0x300>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d134      	bne.n	8003a04 <UART_SetConfig+0x140>
 800399a:	4b89      	ldr	r3, [pc, #548]	; (8003bc0 <UART_SetConfig+0x2fc>)
 800399c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a0:	f003 030c 	and.w	r3, r3, #12
 80039a4:	2b0c      	cmp	r3, #12
 80039a6:	d829      	bhi.n	80039fc <UART_SetConfig+0x138>
 80039a8:	a201      	add	r2, pc, #4	; (adr r2, 80039b0 <UART_SetConfig+0xec>)
 80039aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ae:	bf00      	nop
 80039b0:	080039e5 	.word	0x080039e5
 80039b4:	080039fd 	.word	0x080039fd
 80039b8:	080039fd 	.word	0x080039fd
 80039bc:	080039fd 	.word	0x080039fd
 80039c0:	080039f1 	.word	0x080039f1
 80039c4:	080039fd 	.word	0x080039fd
 80039c8:	080039fd 	.word	0x080039fd
 80039cc:	080039fd 	.word	0x080039fd
 80039d0:	080039eb 	.word	0x080039eb
 80039d4:	080039fd 	.word	0x080039fd
 80039d8:	080039fd 	.word	0x080039fd
 80039dc:	080039fd 	.word	0x080039fd
 80039e0:	080039f7 	.word	0x080039f7
 80039e4:	2300      	movs	r3, #0
 80039e6:	76fb      	strb	r3, [r7, #27]
 80039e8:	e038      	b.n	8003a5c <UART_SetConfig+0x198>
 80039ea:	2302      	movs	r3, #2
 80039ec:	76fb      	strb	r3, [r7, #27]
 80039ee:	e035      	b.n	8003a5c <UART_SetConfig+0x198>
 80039f0:	2304      	movs	r3, #4
 80039f2:	76fb      	strb	r3, [r7, #27]
 80039f4:	e032      	b.n	8003a5c <UART_SetConfig+0x198>
 80039f6:	2308      	movs	r3, #8
 80039f8:	76fb      	strb	r3, [r7, #27]
 80039fa:	e02f      	b.n	8003a5c <UART_SetConfig+0x198>
 80039fc:	2310      	movs	r3, #16
 80039fe:	76fb      	strb	r3, [r7, #27]
 8003a00:	bf00      	nop
 8003a02:	e02b      	b.n	8003a5c <UART_SetConfig+0x198>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a6b      	ldr	r2, [pc, #428]	; (8003bb8 <UART_SetConfig+0x2f4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d124      	bne.n	8003a58 <UART_SetConfig+0x194>
 8003a0e:	4b6c      	ldr	r3, [pc, #432]	; (8003bc0 <UART_SetConfig+0x2fc>)
 8003a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a1c:	d012      	beq.n	8003a44 <UART_SetConfig+0x180>
 8003a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a22:	d802      	bhi.n	8003a2a <UART_SetConfig+0x166>
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d007      	beq.n	8003a38 <UART_SetConfig+0x174>
 8003a28:	e012      	b.n	8003a50 <UART_SetConfig+0x18c>
 8003a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a2e:	d006      	beq.n	8003a3e <UART_SetConfig+0x17a>
 8003a30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a34:	d009      	beq.n	8003a4a <UART_SetConfig+0x186>
 8003a36:	e00b      	b.n	8003a50 <UART_SetConfig+0x18c>
 8003a38:	2300      	movs	r3, #0
 8003a3a:	76fb      	strb	r3, [r7, #27]
 8003a3c:	e00e      	b.n	8003a5c <UART_SetConfig+0x198>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	76fb      	strb	r3, [r7, #27]
 8003a42:	e00b      	b.n	8003a5c <UART_SetConfig+0x198>
 8003a44:	2304      	movs	r3, #4
 8003a46:	76fb      	strb	r3, [r7, #27]
 8003a48:	e008      	b.n	8003a5c <UART_SetConfig+0x198>
 8003a4a:	2308      	movs	r3, #8
 8003a4c:	76fb      	strb	r3, [r7, #27]
 8003a4e:	e005      	b.n	8003a5c <UART_SetConfig+0x198>
 8003a50:	2310      	movs	r3, #16
 8003a52:	76fb      	strb	r3, [r7, #27]
 8003a54:	bf00      	nop
 8003a56:	e001      	b.n	8003a5c <UART_SetConfig+0x198>
 8003a58:	2310      	movs	r3, #16
 8003a5a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a55      	ldr	r2, [pc, #340]	; (8003bb8 <UART_SetConfig+0x2f4>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d174      	bne.n	8003b50 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a66:	7efb      	ldrb	r3, [r7, #27]
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d824      	bhi.n	8003ab6 <UART_SetConfig+0x1f2>
 8003a6c:	a201      	add	r2, pc, #4	; (adr r2, 8003a74 <UART_SetConfig+0x1b0>)
 8003a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a72:	bf00      	nop
 8003a74:	08003a99 	.word	0x08003a99
 8003a78:	08003ab7 	.word	0x08003ab7
 8003a7c:	08003aa1 	.word	0x08003aa1
 8003a80:	08003ab7 	.word	0x08003ab7
 8003a84:	08003aa7 	.word	0x08003aa7
 8003a88:	08003ab7 	.word	0x08003ab7
 8003a8c:	08003ab7 	.word	0x08003ab7
 8003a90:	08003ab7 	.word	0x08003ab7
 8003a94:	08003aaf 	.word	0x08003aaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a98:	f7fe ff60 	bl	800295c <HAL_RCC_GetPCLK1Freq>
 8003a9c:	6178      	str	r0, [r7, #20]
        break;
 8003a9e:	e00f      	b.n	8003ac0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aa0:	4b49      	ldr	r3, [pc, #292]	; (8003bc8 <UART_SetConfig+0x304>)
 8003aa2:	617b      	str	r3, [r7, #20]
        break;
 8003aa4:	e00c      	b.n	8003ac0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aa6:	f7fe fec5 	bl	8002834 <HAL_RCC_GetSysClockFreq>
 8003aaa:	6178      	str	r0, [r7, #20]
        break;
 8003aac:	e008      	b.n	8003ac0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ab2:	617b      	str	r3, [r7, #20]
        break;
 8003ab4:	e004      	b.n	8003ac0 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	76bb      	strb	r3, [r7, #26]
        break;
 8003abe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 8100 	beq.w	8003cc8 <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	4613      	mov	r3, r2
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	4413      	add	r3, r2
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d305      	bcc.n	8003ae4 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d902      	bls.n	8003aea <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	76bb      	strb	r3, [r7, #26]
 8003ae8:	e0ee      	b.n	8003cc8 <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	4619      	mov	r1, r3
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	f04f 0400 	mov.w	r4, #0
 8003afa:	0214      	lsls	r4, r2, #8
 8003afc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003b00:	020b      	lsls	r3, r1, #8
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6852      	ldr	r2, [r2, #4]
 8003b06:	0852      	lsrs	r2, r2, #1
 8003b08:	4611      	mov	r1, r2
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	eb13 0b01 	adds.w	fp, r3, r1
 8003b12:	eb44 0c02 	adc.w	ip, r4, r2
 8003b16:	4658      	mov	r0, fp
 8003b18:	4661      	mov	r1, ip
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f04f 0400 	mov.w	r4, #0
 8003b22:	461a      	mov	r2, r3
 8003b24:	4623      	mov	r3, r4
 8003b26:	f7fc fb53 	bl	80001d0 <__aeabi_uldivmod>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	460c      	mov	r4, r1
 8003b2e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b36:	d308      	bcc.n	8003b4a <UART_SetConfig+0x286>
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b3e:	d204      	bcs.n	8003b4a <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	60da      	str	r2, [r3, #12]
 8003b48:	e0be      	b.n	8003cc8 <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	76bb      	strb	r3, [r7, #26]
 8003b4e:	e0bb      	b.n	8003cc8 <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b58:	d169      	bne.n	8003c2e <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 8003b5a:	7efb      	ldrb	r3, [r7, #27]
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d835      	bhi.n	8003bcc <UART_SetConfig+0x308>
 8003b60:	a201      	add	r2, pc, #4	; (adr r2, 8003b68 <UART_SetConfig+0x2a4>)
 8003b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b66:	bf00      	nop
 8003b68:	08003b8d 	.word	0x08003b8d
 8003b6c:	08003b95 	.word	0x08003b95
 8003b70:	08003b9d 	.word	0x08003b9d
 8003b74:	08003bcd 	.word	0x08003bcd
 8003b78:	08003ba3 	.word	0x08003ba3
 8003b7c:	08003bcd 	.word	0x08003bcd
 8003b80:	08003bcd 	.word	0x08003bcd
 8003b84:	08003bcd 	.word	0x08003bcd
 8003b88:	08003bab 	.word	0x08003bab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b8c:	f7fe fee6 	bl	800295c <HAL_RCC_GetPCLK1Freq>
 8003b90:	6178      	str	r0, [r7, #20]
        break;
 8003b92:	e020      	b.n	8003bd6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b94:	f7fe fef8 	bl	8002988 <HAL_RCC_GetPCLK2Freq>
 8003b98:	6178      	str	r0, [r7, #20]
        break;
 8003b9a:	e01c      	b.n	8003bd6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b9c:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <UART_SetConfig+0x304>)
 8003b9e:	617b      	str	r3, [r7, #20]
        break;
 8003ba0:	e019      	b.n	8003bd6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ba2:	f7fe fe47 	bl	8002834 <HAL_RCC_GetSysClockFreq>
 8003ba6:	6178      	str	r0, [r7, #20]
        break;
 8003ba8:	e015      	b.n	8003bd6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bae:	617b      	str	r3, [r7, #20]
        break;
 8003bb0:	e011      	b.n	8003bd6 <UART_SetConfig+0x312>
 8003bb2:	bf00      	nop
 8003bb4:	efff69f3 	.word	0xefff69f3
 8003bb8:	40008000 	.word	0x40008000
 8003bbc:	40013800 	.word	0x40013800
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	40004400 	.word	0x40004400
 8003bc8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	76bb      	strb	r3, [r7, #26]
        break;
 8003bd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d075      	beq.n	8003cc8 <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	005a      	lsls	r2, r3, #1
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	085b      	lsrs	r3, r3, #1
 8003be6:	441a      	add	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	2b0f      	cmp	r3, #15
 8003bf8:	d916      	bls.n	8003c28 <UART_SetConfig+0x364>
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c00:	d212      	bcs.n	8003c28 <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	f023 030f 	bic.w	r3, r3, #15
 8003c0a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	085b      	lsrs	r3, r3, #1
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	89fb      	ldrh	r3, [r7, #14]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	89fa      	ldrh	r2, [r7, #14]
 8003c24:	60da      	str	r2, [r3, #12]
 8003c26:	e04f      	b.n	8003cc8 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	76bb      	strb	r3, [r7, #26]
 8003c2c:	e04c      	b.n	8003cc8 <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c2e:	7efb      	ldrb	r3, [r7, #27]
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d828      	bhi.n	8003c86 <UART_SetConfig+0x3c2>
 8003c34:	a201      	add	r2, pc, #4	; (adr r2, 8003c3c <UART_SetConfig+0x378>)
 8003c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3a:	bf00      	nop
 8003c3c:	08003c61 	.word	0x08003c61
 8003c40:	08003c69 	.word	0x08003c69
 8003c44:	08003c71 	.word	0x08003c71
 8003c48:	08003c87 	.word	0x08003c87
 8003c4c:	08003c77 	.word	0x08003c77
 8003c50:	08003c87 	.word	0x08003c87
 8003c54:	08003c87 	.word	0x08003c87
 8003c58:	08003c87 	.word	0x08003c87
 8003c5c:	08003c7f 	.word	0x08003c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c60:	f7fe fe7c 	bl	800295c <HAL_RCC_GetPCLK1Freq>
 8003c64:	6178      	str	r0, [r7, #20]
        break;
 8003c66:	e013      	b.n	8003c90 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c68:	f7fe fe8e 	bl	8002988 <HAL_RCC_GetPCLK2Freq>
 8003c6c:	6178      	str	r0, [r7, #20]
        break;
 8003c6e:	e00f      	b.n	8003c90 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c70:	4b1b      	ldr	r3, [pc, #108]	; (8003ce0 <UART_SetConfig+0x41c>)
 8003c72:	617b      	str	r3, [r7, #20]
        break;
 8003c74:	e00c      	b.n	8003c90 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c76:	f7fe fddd 	bl	8002834 <HAL_RCC_GetSysClockFreq>
 8003c7a:	6178      	str	r0, [r7, #20]
        break;
 8003c7c:	e008      	b.n	8003c90 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c82:	617b      	str	r3, [r7, #20]
        break;
 8003c84:	e004      	b.n	8003c90 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	76bb      	strb	r3, [r7, #26]
        break;
 8003c8e:	bf00      	nop
    }

    if (pclk != 0U)
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d018      	beq.n	8003cc8 <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	085a      	lsrs	r2, r3, #1
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	441a      	add	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	2b0f      	cmp	r3, #15
 8003cb0:	d908      	bls.n	8003cc4 <UART_SetConfig+0x400>
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb8:	d204      	bcs.n	8003cc4 <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	60da      	str	r2, [r3, #12]
 8003cc2:	e001      	b.n	8003cc8 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003cd4:	7ebb      	ldrb	r3, [r7, #26]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3720      	adds	r7, #32
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003ce0:	00f42400 	.word	0x00f42400

08003ce4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d01a      	beq.n	8003dfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003de2:	d10a      	bne.n	8003dfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	605a      	str	r2, [r3, #4]
  }
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003e36:	f7fd f8e3 	bl	8001000 <HAL_GetTick>
 8003e3a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b08      	cmp	r3, #8
 8003e48:	d10e      	bne.n	8003e68 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f82a 	bl	8003eb2 <UART_WaitOnFlagUntilTimeout>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e020      	b.n	8003eaa <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0304 	and.w	r3, r3, #4
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d10e      	bne.n	8003e94 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f814 	bl	8003eb2 <UART_WaitOnFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e00a      	b.n	8003eaa <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b084      	sub	sp, #16
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	603b      	str	r3, [r7, #0]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec2:	e05d      	b.n	8003f80 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eca:	d059      	beq.n	8003f80 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ecc:	f7fd f898 	bl	8001000 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d302      	bcc.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d11b      	bne.n	8003f1a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ef0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0201 	bic.w	r2, r2, #1
 8003f00:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2220      	movs	r2, #32
 8003f06:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e042      	b.n	8003fa0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d02b      	beq.n	8003f80 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f36:	d123      	bne.n	8003f80 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f50:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0201 	bic.w	r2, r2, #1
 8003f60:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2220      	movs	r2, #32
 8003f66:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2220      	movs	r2, #32
 8003f72:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e00f      	b.n	8003fa0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	69da      	ldr	r2, [r3, #28]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	bf0c      	ite	eq
 8003f90:	2301      	moveq	r3, #1
 8003f92:	2300      	movne	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	461a      	mov	r2, r3
 8003f98:	79fb      	ldrb	r3, [r7, #7]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d092      	beq.n	8003ec4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003fbe:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003fe8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0201 	bic.w	r2, r2, #1
 8003ff8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b084      	sub	sp, #16
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b00      	cmp	r3, #0
 800402c:	d11e      	bne.n	800406c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004044:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0201 	bic.w	r2, r2, #1
 8004054:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004064:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2220      	movs	r2, #32
 800406a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f7ff fc0b 	bl	8003888 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004072:	bf00      	nop
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b084      	sub	sp, #16
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004086:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f7ff fc07 	bl	800389c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b086      	sub	sp, #24
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ba:	2b80      	cmp	r3, #128	; 0x80
 80040bc:	d109      	bne.n	80040d2 <UART_DMAError+0x3c>
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	2b21      	cmp	r3, #33	; 0x21
 80040c2:	d106      	bne.n	80040d2 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80040cc:	6978      	ldr	r0, [r7, #20]
 80040ce:	f7ff ff6b 	bl	8003fa8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040dc:	2b40      	cmp	r3, #64	; 0x40
 80040de:	d109      	bne.n	80040f4 <UART_DMAError+0x5e>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b22      	cmp	r3, #34	; 0x22
 80040e4:	d106      	bne.n	80040f4 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80040ee:	6978      	ldr	r0, [r7, #20]
 80040f0:	f7ff ff6f 	bl	8003fd2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040f8:	f043 0210 	orr.w	r2, r3, #16
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004100:	6978      	ldr	r0, [r7, #20]
 8004102:	f7ff fbd5 	bl	80038b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004106:	bf00      	nop
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800410e:	b480      	push	{r7}
 8004110:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004112:	bf00      	nop
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004122:	f3ef 8305 	mrs	r3, IPSR
 8004126:	60bb      	str	r3, [r7, #8]
  return(result);
 8004128:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10f      	bne.n	800414e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800412e:	f3ef 8310 	mrs	r3, PRIMASK
 8004132:	607b      	str	r3, [r7, #4]
  return(result);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d105      	bne.n	8004146 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800413a:	f3ef 8311 	mrs	r3, BASEPRI
 800413e:	603b      	str	r3, [r7, #0]
  return(result);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d007      	beq.n	8004156 <osKernelInitialize+0x3a>
 8004146:	4b0e      	ldr	r3, [pc, #56]	; (8004180 <osKernelInitialize+0x64>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b02      	cmp	r3, #2
 800414c:	d103      	bne.n	8004156 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800414e:	f06f 0305 	mvn.w	r3, #5
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	e00c      	b.n	8004170 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004156:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <osKernelInitialize+0x64>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d105      	bne.n	800416a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800415e:	4b08      	ldr	r3, [pc, #32]	; (8004180 <osKernelInitialize+0x64>)
 8004160:	2201      	movs	r2, #1
 8004162:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	e002      	b.n	8004170 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800416a:	f04f 33ff 	mov.w	r3, #4294967295
 800416e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004170:	68fb      	ldr	r3, [r7, #12]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	20000038 	.word	0x20000038

08004184 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800418a:	f3ef 8305 	mrs	r3, IPSR
 800418e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004190:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10f      	bne.n	80041b6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004196:	f3ef 8310 	mrs	r3, PRIMASK
 800419a:	607b      	str	r3, [r7, #4]
  return(result);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d105      	bne.n	80041ae <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041a2:	f3ef 8311 	mrs	r3, BASEPRI
 80041a6:	603b      	str	r3, [r7, #0]
  return(result);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d007      	beq.n	80041be <osKernelStart+0x3a>
 80041ae:	4b0f      	ldr	r3, [pc, #60]	; (80041ec <osKernelStart+0x68>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d103      	bne.n	80041be <osKernelStart+0x3a>
    stat = osErrorISR;
 80041b6:	f06f 0305 	mvn.w	r3, #5
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	e010      	b.n	80041e0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80041be:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <osKernelStart+0x68>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d109      	bne.n	80041da <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80041c6:	f7ff ffa2 	bl	800410e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80041ca:	4b08      	ldr	r3, [pc, #32]	; (80041ec <osKernelStart+0x68>)
 80041cc:	2202      	movs	r2, #2
 80041ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80041d0:	f001 f870 	bl	80052b4 <vTaskStartScheduler>
      stat = osOK;
 80041d4:	2300      	movs	r3, #0
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	e002      	b.n	80041e0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80041da:	f04f 33ff 	mov.w	r3, #4294967295
 80041de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80041e0:	68fb      	ldr	r3, [r7, #12]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	20000038 	.word	0x20000038

080041f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b090      	sub	sp, #64	; 0x40
 80041f4:	af04      	add	r7, sp, #16
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80041fc:	2300      	movs	r3, #0
 80041fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004200:	f3ef 8305 	mrs	r3, IPSR
 8004204:	61fb      	str	r3, [r7, #28]
  return(result);
 8004206:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004208:	2b00      	cmp	r3, #0
 800420a:	f040 808f 	bne.w	800432c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800420e:	f3ef 8310 	mrs	r3, PRIMASK
 8004212:	61bb      	str	r3, [r7, #24]
  return(result);
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d105      	bne.n	8004226 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800421a:	f3ef 8311 	mrs	r3, BASEPRI
 800421e:	617b      	str	r3, [r7, #20]
  return(result);
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <osThreadNew+0x3e>
 8004226:	4b44      	ldr	r3, [pc, #272]	; (8004338 <osThreadNew+0x148>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b02      	cmp	r3, #2
 800422c:	d07e      	beq.n	800432c <osThreadNew+0x13c>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d07b      	beq.n	800432c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004234:	2380      	movs	r3, #128	; 0x80
 8004236:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004238:	2318      	movs	r3, #24
 800423a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800423c:	2300      	movs	r3, #0
 800423e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004240:	f04f 33ff 	mov.w	r3, #4294967295
 8004244:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d045      	beq.n	80042d8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <osThreadNew+0x6a>
        name = attr->name;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	2b00      	cmp	r3, #0
 800426c:	d008      	beq.n	8004280 <osThreadNew+0x90>
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	2b38      	cmp	r3, #56	; 0x38
 8004272:	d805      	bhi.n	8004280 <osThreadNew+0x90>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <osThreadNew+0x94>
        return (NULL);
 8004280:	2300      	movs	r3, #0
 8004282:	e054      	b.n	800432e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	089b      	lsrs	r3, r3, #2
 8004292:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00e      	beq.n	80042ba <osThreadNew+0xca>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	2b5b      	cmp	r3, #91	; 0x5b
 80042a2:	d90a      	bls.n	80042ba <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d006      	beq.n	80042ba <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d002      	beq.n	80042ba <osThreadNew+0xca>
        mem = 1;
 80042b4:	2301      	movs	r3, #1
 80042b6:	623b      	str	r3, [r7, #32]
 80042b8:	e010      	b.n	80042dc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10c      	bne.n	80042dc <osThreadNew+0xec>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d108      	bne.n	80042dc <osThreadNew+0xec>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d104      	bne.n	80042dc <osThreadNew+0xec>
          mem = 0;
 80042d2:	2300      	movs	r3, #0
 80042d4:	623b      	str	r3, [r7, #32]
 80042d6:	e001      	b.n	80042dc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80042d8:	2300      	movs	r3, #0
 80042da:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d110      	bne.n	8004304 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80042ea:	9202      	str	r2, [sp, #8]
 80042ec:	9301      	str	r3, [sp, #4]
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 fe09 	bl	8004f10 <xTaskCreateStatic>
 80042fe:	4603      	mov	r3, r0
 8004300:	613b      	str	r3, [r7, #16]
 8004302:	e013      	b.n	800432c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d110      	bne.n	800432c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430c:	b29a      	uxth	r2, r3
 800430e:	f107 0310 	add.w	r3, r7, #16
 8004312:	9301      	str	r3, [sp, #4]
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 fe51 	bl	8004fc4 <xTaskCreate>
 8004322:	4603      	mov	r3, r0
 8004324:	2b01      	cmp	r3, #1
 8004326:	d001      	beq.n	800432c <osThreadNew+0x13c>
          hTask = NULL;
 8004328:	2300      	movs	r3, #0
 800432a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800432c:	693b      	ldr	r3, [r7, #16]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3730      	adds	r7, #48	; 0x30
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20000038 	.word	0x20000038

0800433c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004344:	f3ef 8305 	mrs	r3, IPSR
 8004348:	613b      	str	r3, [r7, #16]
  return(result);
 800434a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10f      	bne.n	8004370 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004350:	f3ef 8310 	mrs	r3, PRIMASK
 8004354:	60fb      	str	r3, [r7, #12]
  return(result);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d105      	bne.n	8004368 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800435c:	f3ef 8311 	mrs	r3, BASEPRI
 8004360:	60bb      	str	r3, [r7, #8]
  return(result);
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d007      	beq.n	8004378 <osDelay+0x3c>
 8004368:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <osDelay+0x58>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b02      	cmp	r3, #2
 800436e:	d103      	bne.n	8004378 <osDelay+0x3c>
    stat = osErrorISR;
 8004370:	f06f 0305 	mvn.w	r3, #5
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	e007      	b.n	8004388 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004378:	2300      	movs	r3, #0
 800437a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 ff62 	bl	800524c <vTaskDelay>
    }
  }

  return (stat);
 8004388:	697b      	ldr	r3, [r7, #20]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20000038 	.word	0x20000038

08004398 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4a07      	ldr	r2, [pc, #28]	; (80043c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80043a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	4a06      	ldr	r2, [pc, #24]	; (80043c8 <vApplicationGetIdleTaskMemory+0x30>)
 80043ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2280      	movs	r2, #128	; 0x80
 80043b4:	601a      	str	r2, [r3, #0]
}
 80043b6:	bf00      	nop
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	2000003c 	.word	0x2000003c
 80043c8:	20000098 	.word	0x20000098

080043cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4a07      	ldr	r2, [pc, #28]	; (80043f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80043dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	4a06      	ldr	r2, [pc, #24]	; (80043fc <vApplicationGetTimerTaskMemory+0x30>)
 80043e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043ea:	601a      	str	r2, [r3, #0]
}
 80043ec:	bf00      	nop
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	20000298 	.word	0x20000298
 80043fc:	200002f4 	.word	0x200002f4

08004400 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f103 0208 	add.w	r2, r3, #8
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f04f 32ff 	mov.w	r2, #4294967295
 8004418:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f103 0208 	add.w	r2, r3, #8
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f103 0208 	add.w	r2, r3, #8
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800445a:	b480      	push	{r7}
 800445c:	b085      	sub	sp, #20
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
 8004462:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	1c5a      	adds	r2, r3, #1
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	601a      	str	r2, [r3, #0]
}
 8004496:	bf00      	nop
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044a2:	b480      	push	{r7}
 80044a4:	b085      	sub	sp, #20
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b8:	d103      	bne.n	80044c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	e00c      	b.n	80044dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3308      	adds	r3, #8
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	e002      	b.n	80044d0 <vListInsert+0x2e>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d2f6      	bcs.n	80044ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	601a      	str	r2, [r3, #0]
}
 8004508:	bf00      	nop
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6892      	ldr	r2, [r2, #8]
 800452a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6852      	ldr	r2, [r2, #4]
 8004534:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	429a      	cmp	r2, r3
 800453e:	d103      	bne.n	8004548 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	1e5a      	subs	r2, r3, #1
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
}
 800455c:	4618      	mov	r0, r3
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d109      	bne.n	8004590 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800457c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	60bb      	str	r3, [r7, #8]
 800458e:	e7fe      	b.n	800458e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004590:	f002 f814 	bl	80065bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459c:	68f9      	ldr	r1, [r7, #12]
 800459e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80045a0:	fb01 f303 	mul.w	r3, r1, r3
 80045a4:	441a      	add	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c0:	3b01      	subs	r3, #1
 80045c2:	68f9      	ldr	r1, [r7, #12]
 80045c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80045c6:	fb01 f303 	mul.w	r3, r1, r3
 80045ca:	441a      	add	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	22ff      	movs	r2, #255	; 0xff
 80045d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	22ff      	movs	r2, #255	; 0xff
 80045dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d114      	bne.n	8004610 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d01a      	beq.n	8004624 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3310      	adds	r3, #16
 80045f2:	4618      	mov	r0, r3
 80045f4:	f001 f8de 	bl	80057b4 <xTaskRemoveFromEventList>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d012      	beq.n	8004624 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80045fe:	4b0d      	ldr	r3, [pc, #52]	; (8004634 <xQueueGenericReset+0xcc>)
 8004600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	f3bf 8f4f 	dsb	sy
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	e009      	b.n	8004624 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	3310      	adds	r3, #16
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff fef3 	bl	8004400 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	3324      	adds	r3, #36	; 0x24
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff feee 	bl	8004400 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004624:	f001 fff8 	bl	8006618 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004628:	2301      	movs	r3, #1
}
 800462a:	4618      	mov	r0, r3
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	e000ed04 	.word	0xe000ed04

08004638 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08e      	sub	sp, #56	; 0x38
 800463c:	af02      	add	r7, sp, #8
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
 8004644:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d109      	bne.n	8004660 <xQueueGenericCreateStatic+0x28>
 800464c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	62bb      	str	r3, [r7, #40]	; 0x28
 800465e:	e7fe      	b.n	800465e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d109      	bne.n	800467a <xQueueGenericCreateStatic+0x42>
 8004666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
 8004678:	e7fe      	b.n	8004678 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <xQueueGenericCreateStatic+0x4e>
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <xQueueGenericCreateStatic+0x52>
 8004686:	2301      	movs	r3, #1
 8004688:	e000      	b.n	800468c <xQueueGenericCreateStatic+0x54>
 800468a:	2300      	movs	r3, #0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d109      	bne.n	80046a4 <xQueueGenericCreateStatic+0x6c>
 8004690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	623b      	str	r3, [r7, #32]
 80046a2:	e7fe      	b.n	80046a2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d102      	bne.n	80046b0 <xQueueGenericCreateStatic+0x78>
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <xQueueGenericCreateStatic+0x7c>
 80046b0:	2301      	movs	r3, #1
 80046b2:	e000      	b.n	80046b6 <xQueueGenericCreateStatic+0x7e>
 80046b4:	2300      	movs	r3, #0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d109      	bne.n	80046ce <xQueueGenericCreateStatic+0x96>
 80046ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046be:	f383 8811 	msr	BASEPRI, r3
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	61fb      	str	r3, [r7, #28]
 80046cc:	e7fe      	b.n	80046cc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80046ce:	2350      	movs	r3, #80	; 0x50
 80046d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2b50      	cmp	r3, #80	; 0x50
 80046d6:	d009      	beq.n	80046ec <xQueueGenericCreateStatic+0xb4>
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	61bb      	str	r3, [r7, #24]
 80046ea:	e7fe      	b.n	80046ea <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80046ec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80046f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00d      	beq.n	8004714 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80046f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004700:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	4613      	mov	r3, r2
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	68b9      	ldr	r1, [r7, #8]
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f805 	bl	800471e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004716:	4618      	mov	r0, r3
 8004718:	3730      	adds	r7, #48	; 0x30
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b084      	sub	sp, #16
 8004722:	af00      	add	r7, sp, #0
 8004724:	60f8      	str	r0, [r7, #12]
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	607a      	str	r2, [r7, #4]
 800472a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d103      	bne.n	800473a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	e002      	b.n	8004740 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800474c:	2101      	movs	r1, #1
 800474e:	69b8      	ldr	r0, [r7, #24]
 8004750:	f7ff ff0a 	bl	8004568 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	78fa      	ldrb	r2, [r7, #3]
 8004758:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800475c:	bf00      	nop
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08e      	sub	sp, #56	; 0x38
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004772:	2300      	movs	r3, #0
 8004774:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800477a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477c:	2b00      	cmp	r3, #0
 800477e:	d109      	bne.n	8004794 <xQueueGenericSend+0x30>
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	62bb      	str	r3, [r7, #40]	; 0x28
 8004792:	e7fe      	b.n	8004792 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d103      	bne.n	80047a2 <xQueueGenericSend+0x3e>
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <xQueueGenericSend+0x42>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <xQueueGenericSend+0x44>
 80047a6:	2300      	movs	r3, #0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d109      	bne.n	80047c0 <xQueueGenericSend+0x5c>
 80047ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	627b      	str	r3, [r7, #36]	; 0x24
 80047be:	e7fe      	b.n	80047be <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d103      	bne.n	80047ce <xQueueGenericSend+0x6a>
 80047c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d101      	bne.n	80047d2 <xQueueGenericSend+0x6e>
 80047ce:	2301      	movs	r3, #1
 80047d0:	e000      	b.n	80047d4 <xQueueGenericSend+0x70>
 80047d2:	2300      	movs	r3, #0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d109      	bne.n	80047ec <xQueueGenericSend+0x88>
 80047d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	623b      	str	r3, [r7, #32]
 80047ea:	e7fe      	b.n	80047ea <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047ec:	f001 f998 	bl	8005b20 <xTaskGetSchedulerState>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d102      	bne.n	80047fc <xQueueGenericSend+0x98>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <xQueueGenericSend+0x9c>
 80047fc:	2301      	movs	r3, #1
 80047fe:	e000      	b.n	8004802 <xQueueGenericSend+0x9e>
 8004800:	2300      	movs	r3, #0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d109      	bne.n	800481a <xQueueGenericSend+0xb6>
 8004806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	61fb      	str	r3, [r7, #28]
 8004818:	e7fe      	b.n	8004818 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800481a:	f001 fecf 	bl	80065bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004826:	429a      	cmp	r2, r3
 8004828:	d302      	bcc.n	8004830 <xQueueGenericSend+0xcc>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b02      	cmp	r3, #2
 800482e:	d129      	bne.n	8004884 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	68b9      	ldr	r1, [r7, #8]
 8004834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004836:	f000 f9ff 	bl	8004c38 <prvCopyDataToQueue>
 800483a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800483c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	2b00      	cmp	r3, #0
 8004842:	d010      	beq.n	8004866 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004846:	3324      	adds	r3, #36	; 0x24
 8004848:	4618      	mov	r0, r3
 800484a:	f000 ffb3 	bl	80057b4 <xTaskRemoveFromEventList>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d013      	beq.n	800487c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004854:	4b3f      	ldr	r3, [pc, #252]	; (8004954 <xQueueGenericSend+0x1f0>)
 8004856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	f3bf 8f6f 	isb	sy
 8004864:	e00a      	b.n	800487c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004868:	2b00      	cmp	r3, #0
 800486a:	d007      	beq.n	800487c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800486c:	4b39      	ldr	r3, [pc, #228]	; (8004954 <xQueueGenericSend+0x1f0>)
 800486e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800487c:	f001 fecc 	bl	8006618 <vPortExitCritical>
				return pdPASS;
 8004880:	2301      	movs	r3, #1
 8004882:	e063      	b.n	800494c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d103      	bne.n	8004892 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800488a:	f001 fec5 	bl	8006618 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800488e:	2300      	movs	r3, #0
 8004890:	e05c      	b.n	800494c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004894:	2b00      	cmp	r3, #0
 8004896:	d106      	bne.n	80048a6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004898:	f107 0314 	add.w	r3, r7, #20
 800489c:	4618      	mov	r0, r3
 800489e:	f000 ffeb 	bl	8005878 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048a2:	2301      	movs	r3, #1
 80048a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048a6:	f001 feb7 	bl	8006618 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048aa:	f000 fd67 	bl	800537c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048ae:	f001 fe85 	bl	80065bc <vPortEnterCritical>
 80048b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048b8:	b25b      	sxtb	r3, r3
 80048ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048be:	d103      	bne.n	80048c8 <xQueueGenericSend+0x164>
 80048c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048ce:	b25b      	sxtb	r3, r3
 80048d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d4:	d103      	bne.n	80048de <xQueueGenericSend+0x17a>
 80048d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048de:	f001 fe9b 	bl	8006618 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048e2:	1d3a      	adds	r2, r7, #4
 80048e4:	f107 0314 	add.w	r3, r7, #20
 80048e8:	4611      	mov	r1, r2
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 ffda 	bl	80058a4 <xTaskCheckForTimeOut>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d124      	bne.n	8004940 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80048f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048f8:	f000 fa96 	bl	8004e28 <prvIsQueueFull>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d018      	beq.n	8004934 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004904:	3310      	adds	r3, #16
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	4611      	mov	r1, r2
 800490a:	4618      	mov	r0, r3
 800490c:	f000 ff04 	bl	8005718 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004912:	f000 fa21 	bl	8004d58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004916:	f000 fd3f 	bl	8005398 <xTaskResumeAll>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	f47f af7c 	bne.w	800481a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004922:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <xQueueGenericSend+0x1f0>)
 8004924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	e772      	b.n	800481a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004936:	f000 fa0f 	bl	8004d58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800493a:	f000 fd2d 	bl	8005398 <xTaskResumeAll>
 800493e:	e76c      	b.n	800481a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004942:	f000 fa09 	bl	8004d58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004946:	f000 fd27 	bl	8005398 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800494a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800494c:	4618      	mov	r0, r3
 800494e:	3738      	adds	r7, #56	; 0x38
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	e000ed04 	.word	0xe000ed04

08004958 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b08e      	sub	sp, #56	; 0x38
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800496a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496c:	2b00      	cmp	r3, #0
 800496e:	d109      	bne.n	8004984 <xQueueGenericSendFromISR+0x2c>
 8004970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004974:	f383 8811 	msr	BASEPRI, r3
 8004978:	f3bf 8f6f 	isb	sy
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	627b      	str	r3, [r7, #36]	; 0x24
 8004982:	e7fe      	b.n	8004982 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d103      	bne.n	8004992 <xQueueGenericSendFromISR+0x3a>
 800498a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <xQueueGenericSendFromISR+0x3e>
 8004992:	2301      	movs	r3, #1
 8004994:	e000      	b.n	8004998 <xQueueGenericSendFromISR+0x40>
 8004996:	2300      	movs	r3, #0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d109      	bne.n	80049b0 <xQueueGenericSendFromISR+0x58>
 800499c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	623b      	str	r3, [r7, #32]
 80049ae:	e7fe      	b.n	80049ae <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d103      	bne.n	80049be <xQueueGenericSendFromISR+0x66>
 80049b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d101      	bne.n	80049c2 <xQueueGenericSendFromISR+0x6a>
 80049be:	2301      	movs	r3, #1
 80049c0:	e000      	b.n	80049c4 <xQueueGenericSendFromISR+0x6c>
 80049c2:	2300      	movs	r3, #0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d109      	bne.n	80049dc <xQueueGenericSendFromISR+0x84>
 80049c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	61fb      	str	r3, [r7, #28]
 80049da:	e7fe      	b.n	80049da <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80049dc:	f001 feca 	bl	8006774 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80049e0:	f3ef 8211 	mrs	r2, BASEPRI
 80049e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	61ba      	str	r2, [r7, #24]
 80049f6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80049f8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d302      	bcc.n	8004a0e <xQueueGenericSendFromISR+0xb6>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d12c      	bne.n	8004a68 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	68b9      	ldr	r1, [r7, #8]
 8004a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a1e:	f000 f90b 	bl	8004c38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a22:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2a:	d112      	bne.n	8004a52 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d016      	beq.n	8004a62 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a36:	3324      	adds	r3, #36	; 0x24
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 febb 	bl	80057b4 <xTaskRemoveFromEventList>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00e      	beq.n	8004a62 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00b      	beq.n	8004a62 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	e007      	b.n	8004a62 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a56:	3301      	adds	r3, #1
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	b25a      	sxtb	r2, r3
 8004a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a62:	2301      	movs	r3, #1
 8004a64:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004a66:	e001      	b.n	8004a6c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3738      	adds	r7, #56	; 0x38
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08c      	sub	sp, #48	; 0x30
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d109      	bne.n	8004aae <xQueueReceive+0x2e>
	__asm volatile
 8004a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9e:	f383 8811 	msr	BASEPRI, r3
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	623b      	str	r3, [r7, #32]
 8004aac:	e7fe      	b.n	8004aac <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d103      	bne.n	8004abc <xQueueReceive+0x3c>
 8004ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <xQueueReceive+0x40>
 8004abc:	2301      	movs	r3, #1
 8004abe:	e000      	b.n	8004ac2 <xQueueReceive+0x42>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d109      	bne.n	8004ada <xQueueReceive+0x5a>
 8004ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aca:	f383 8811 	msr	BASEPRI, r3
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	61fb      	str	r3, [r7, #28]
 8004ad8:	e7fe      	b.n	8004ad8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ada:	f001 f821 	bl	8005b20 <xTaskGetSchedulerState>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d102      	bne.n	8004aea <xQueueReceive+0x6a>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <xQueueReceive+0x6e>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <xQueueReceive+0x70>
 8004aee:	2300      	movs	r3, #0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d109      	bne.n	8004b08 <xQueueReceive+0x88>
 8004af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	61bb      	str	r3, [r7, #24]
 8004b06:	e7fe      	b.n	8004b06 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b08:	f001 fd58 	bl	80065bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b10:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d01f      	beq.n	8004b58 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b1c:	f000 f8f6 	bl	8004d0c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	1e5a      	subs	r2, r3, #1
 8004b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b26:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00f      	beq.n	8004b50 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b32:	3310      	adds	r3, #16
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 fe3d 	bl	80057b4 <xTaskRemoveFromEventList>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d007      	beq.n	8004b50 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b40:	4b3c      	ldr	r3, [pc, #240]	; (8004c34 <xQueueReceive+0x1b4>)
 8004b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b50:	f001 fd62 	bl	8006618 <vPortExitCritical>
				return pdPASS;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e069      	b.n	8004c2c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d103      	bne.n	8004b66 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b5e:	f001 fd5b 	bl	8006618 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b62:	2300      	movs	r3, #0
 8004b64:	e062      	b.n	8004c2c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d106      	bne.n	8004b7a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b6c:	f107 0310 	add.w	r3, r7, #16
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 fe81 	bl	8005878 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b76:	2301      	movs	r3, #1
 8004b78:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b7a:	f001 fd4d 	bl	8006618 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b7e:	f000 fbfd 	bl	800537c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b82:	f001 fd1b 	bl	80065bc <vPortEnterCritical>
 8004b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b8c:	b25b      	sxtb	r3, r3
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b92:	d103      	bne.n	8004b9c <xQueueReceive+0x11c>
 8004b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ba2:	b25b      	sxtb	r3, r3
 8004ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba8:	d103      	bne.n	8004bb2 <xQueueReceive+0x132>
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bb2:	f001 fd31 	bl	8006618 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bb6:	1d3a      	adds	r2, r7, #4
 8004bb8:	f107 0310 	add.w	r3, r7, #16
 8004bbc:	4611      	mov	r1, r2
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 fe70 	bl	80058a4 <xTaskCheckForTimeOut>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d123      	bne.n	8004c12 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bcc:	f000 f916 	bl	8004dfc <prvIsQueueEmpty>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d017      	beq.n	8004c06 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd8:	3324      	adds	r3, #36	; 0x24
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	4611      	mov	r1, r2
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fd9a 	bl	8005718 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004be4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004be6:	f000 f8b7 	bl	8004d58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004bea:	f000 fbd5 	bl	8005398 <xTaskResumeAll>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d189      	bne.n	8004b08 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004bf4:	4b0f      	ldr	r3, [pc, #60]	; (8004c34 <xQueueReceive+0x1b4>)
 8004bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	e780      	b.n	8004b08 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c08:	f000 f8a6 	bl	8004d58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c0c:	f000 fbc4 	bl	8005398 <xTaskResumeAll>
 8004c10:	e77a      	b.n	8004b08 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c14:	f000 f8a0 	bl	8004d58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c18:	f000 fbbe 	bl	8005398 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c1e:	f000 f8ed 	bl	8004dfc <prvIsQueueEmpty>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f43f af6f 	beq.w	8004b08 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c2a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3730      	adds	r7, #48	; 0x30
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	e000ed04 	.word	0xe000ed04

08004c38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c44:	2300      	movs	r3, #0
 8004c46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10d      	bne.n	8004c72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d14d      	bne.n	8004cfa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 ff7a 	bl	8005b5c <xTaskPriorityDisinherit>
 8004c68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	609a      	str	r2, [r3, #8]
 8004c70:	e043      	b.n	8004cfa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d119      	bne.n	8004cac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6858      	ldr	r0, [r3, #4]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	461a      	mov	r2, r3
 8004c82:	68b9      	ldr	r1, [r7, #8]
 8004c84:	f001 feca 	bl	8006a1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	441a      	add	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d32b      	bcc.n	8004cfa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	605a      	str	r2, [r3, #4]
 8004caa:	e026      	b.n	8004cfa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	68d8      	ldr	r0, [r3, #12]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	68b9      	ldr	r1, [r7, #8]
 8004cb8:	f001 feb0 	bl	8006a1c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	68da      	ldr	r2, [r3, #12]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	425b      	negs	r3, r3
 8004cc6:	441a      	add	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d207      	bcs.n	8004ce8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce0:	425b      	negs	r3, r3
 8004ce2:	441a      	add	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d105      	bne.n	8004cfa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1c5a      	adds	r2, r3, #1
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004d02:	697b      	ldr	r3, [r7, #20]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d018      	beq.n	8004d50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	441a      	add	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d303      	bcc.n	8004d40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68d9      	ldr	r1, [r3, #12]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	461a      	mov	r2, r3
 8004d4a:	6838      	ldr	r0, [r7, #0]
 8004d4c:	f001 fe66 	bl	8006a1c <memcpy>
	}
}
 8004d50:	bf00      	nop
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d60:	f001 fc2c 	bl	80065bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d6c:	e011      	b.n	8004d92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d012      	beq.n	8004d9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3324      	adds	r3, #36	; 0x24
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 fd1a 	bl	80057b4 <xTaskRemoveFromEventList>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d86:	f000 fded 	bl	8005964 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d8a:	7bfb      	ldrb	r3, [r7, #15]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	dce9      	bgt.n	8004d6e <prvUnlockQueue+0x16>
 8004d9a:	e000      	b.n	8004d9e <prvUnlockQueue+0x46>
					break;
 8004d9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	22ff      	movs	r2, #255	; 0xff
 8004da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004da6:	f001 fc37 	bl	8006618 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004daa:	f001 fc07 	bl	80065bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004db4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004db6:	e011      	b.n	8004ddc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d012      	beq.n	8004de6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3310      	adds	r3, #16
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 fcf5 	bl	80057b4 <xTaskRemoveFromEventList>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004dd0:	f000 fdc8 	bl	8005964 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004dd4:	7bbb      	ldrb	r3, [r7, #14]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ddc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	dce9      	bgt.n	8004db8 <prvUnlockQueue+0x60>
 8004de4:	e000      	b.n	8004de8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004de6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	22ff      	movs	r2, #255	; 0xff
 8004dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004df0:	f001 fc12 	bl	8006618 <vPortExitCritical>
}
 8004df4:	bf00      	nop
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e04:	f001 fbda 	bl	80065bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d102      	bne.n	8004e16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e10:	2301      	movs	r3, #1
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	e001      	b.n	8004e1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e16:	2300      	movs	r3, #0
 8004e18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e1a:	f001 fbfd 	bl	8006618 <vPortExitCritical>

	return xReturn;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e30:	f001 fbc4 	bl	80065bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d102      	bne.n	8004e46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e40:	2301      	movs	r3, #1
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	e001      	b.n	8004e4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e46:	2300      	movs	r3, #0
 8004e48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e4a:	f001 fbe5 	bl	8006618 <vPortExitCritical>

	return xReturn;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e62:	2300      	movs	r3, #0
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	e014      	b.n	8004e92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e68:	4a0e      	ldr	r2, [pc, #56]	; (8004ea4 <vQueueAddToRegistry+0x4c>)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10b      	bne.n	8004e8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e74:	490b      	ldr	r1, [pc, #44]	; (8004ea4 <vQueueAddToRegistry+0x4c>)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004e7e:	4a09      	ldr	r2, [pc, #36]	; (8004ea4 <vQueueAddToRegistry+0x4c>)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	4413      	add	r3, r2
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004e8a:	e005      	b.n	8004e98 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2b07      	cmp	r3, #7
 8004e96:	d9e7      	bls.n	8004e68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004e98:	bf00      	nop
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	20008448 	.word	0x20008448

08004ea8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004eb8:	f001 fb80 	bl	80065bc <vPortEnterCritical>
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ec2:	b25b      	sxtb	r3, r3
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d103      	bne.n	8004ed2 <vQueueWaitForMessageRestricted+0x2a>
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ed8:	b25b      	sxtb	r3, r3
 8004eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ede:	d103      	bne.n	8004ee8 <vQueueWaitForMessageRestricted+0x40>
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ee8:	f001 fb96 	bl	8006618 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d106      	bne.n	8004f02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	3324      	adds	r3, #36	; 0x24
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	68b9      	ldr	r1, [r7, #8]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 fc2f 	bl	8005760 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004f02:	6978      	ldr	r0, [r7, #20]
 8004f04:	f7ff ff28 	bl	8004d58 <prvUnlockQueue>
	}
 8004f08:	bf00      	nop
 8004f0a:	3718      	adds	r7, #24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b08e      	sub	sp, #56	; 0x38
 8004f14:	af04      	add	r7, sp, #16
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d109      	bne.n	8004f38 <xTaskCreateStatic+0x28>
 8004f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	623b      	str	r3, [r7, #32]
 8004f36:	e7fe      	b.n	8004f36 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d109      	bne.n	8004f52 <xTaskCreateStatic+0x42>
 8004f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	61fb      	str	r3, [r7, #28]
 8004f50:	e7fe      	b.n	8004f50 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f52:	235c      	movs	r3, #92	; 0x5c
 8004f54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	2b5c      	cmp	r3, #92	; 0x5c
 8004f5a:	d009      	beq.n	8004f70 <xTaskCreateStatic+0x60>
 8004f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	61bb      	str	r3, [r7, #24]
 8004f6e:	e7fe      	b.n	8004f6e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f70:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d01e      	beq.n	8004fb6 <xTaskCreateStatic+0xa6>
 8004f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d01b      	beq.n	8004fb6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f86:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f90:	2300      	movs	r3, #0
 8004f92:	9303      	str	r3, [sp, #12]
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	9302      	str	r3, [sp, #8]
 8004f98:	f107 0314 	add.w	r3, r7, #20
 8004f9c:	9301      	str	r3, [sp, #4]
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	68b9      	ldr	r1, [r7, #8]
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f000 f850 	bl	800504e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fb0:	f000 f8dc 	bl	800516c <prvAddNewTaskToReadyList>
 8004fb4:	e001      	b.n	8004fba <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004fba:	697b      	ldr	r3, [r7, #20]
	}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3728      	adds	r7, #40	; 0x28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08c      	sub	sp, #48	; 0x30
 8004fc8:	af04      	add	r7, sp, #16
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	603b      	str	r3, [r7, #0]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004fd4:	88fb      	ldrh	r3, [r7, #6]
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f001 fc09 	bl	80067f0 <pvPortMalloc>
 8004fde:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00e      	beq.n	8005004 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004fe6:	205c      	movs	r0, #92	; 0x5c
 8004fe8:	f001 fc02 	bl	80067f0 <pvPortMalloc>
 8004fec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d003      	beq.n	8004ffc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	631a      	str	r2, [r3, #48]	; 0x30
 8004ffa:	e005      	b.n	8005008 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ffc:	6978      	ldr	r0, [r7, #20]
 8004ffe:	f001 fc85 	bl	800690c <vPortFree>
 8005002:	e001      	b.n	8005008 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005004:	2300      	movs	r3, #0
 8005006:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d017      	beq.n	800503e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005016:	88fa      	ldrh	r2, [r7, #6]
 8005018:	2300      	movs	r3, #0
 800501a:	9303      	str	r3, [sp, #12]
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	9302      	str	r3, [sp, #8]
 8005020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005022:	9301      	str	r3, [sp, #4]
 8005024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	68b9      	ldr	r1, [r7, #8]
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 f80e 	bl	800504e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005032:	69f8      	ldr	r0, [r7, #28]
 8005034:	f000 f89a 	bl	800516c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005038:	2301      	movs	r3, #1
 800503a:	61bb      	str	r3, [r7, #24]
 800503c:	e002      	b.n	8005044 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800503e:	f04f 33ff 	mov.w	r3, #4294967295
 8005042:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005044:	69bb      	ldr	r3, [r7, #24]
	}
 8005046:	4618      	mov	r0, r3
 8005048:	3720      	adds	r7, #32
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b088      	sub	sp, #32
 8005052:	af00      	add	r7, sp, #0
 8005054:	60f8      	str	r0, [r7, #12]
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	607a      	str	r2, [r7, #4]
 800505a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800505c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	461a      	mov	r2, r3
 8005066:	21a5      	movs	r1, #165	; 0xa5
 8005068:	f001 fce3 	bl	8006a32 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800506c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005076:	3b01      	subs	r3, #1
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	f023 0307 	bic.w	r3, r3, #7
 8005084:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	2b00      	cmp	r3, #0
 800508e:	d009      	beq.n	80050a4 <prvInitialiseNewTask+0x56>
 8005090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	617b      	str	r3, [r7, #20]
 80050a2:	e7fe      	b.n	80050a2 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d01f      	beq.n	80050ea <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050aa:	2300      	movs	r3, #0
 80050ac:	61fb      	str	r3, [r7, #28]
 80050ae:	e012      	b.n	80050d6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	4413      	add	r3, r2
 80050b6:	7819      	ldrb	r1, [r3, #0]
 80050b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	4413      	add	r3, r2
 80050be:	3334      	adds	r3, #52	; 0x34
 80050c0:	460a      	mov	r2, r1
 80050c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	4413      	add	r3, r2
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d006      	beq.n	80050de <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	3301      	adds	r3, #1
 80050d4:	61fb      	str	r3, [r7, #28]
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	2b0f      	cmp	r3, #15
 80050da:	d9e9      	bls.n	80050b0 <prvInitialiseNewTask+0x62>
 80050dc:	e000      	b.n	80050e0 <prvInitialiseNewTask+0x92>
			{
				break;
 80050de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050e8:	e003      	b.n	80050f2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80050ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80050f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f4:	2b37      	cmp	r3, #55	; 0x37
 80050f6:	d901      	bls.n	80050fc <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80050f8:	2337      	movs	r3, #55	; 0x37
 80050fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005100:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005104:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005106:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510a:	2200      	movs	r2, #0
 800510c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800510e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005110:	3304      	adds	r3, #4
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff f994 	bl	8004440 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511a:	3318      	adds	r3, #24
 800511c:	4618      	mov	r0, r3
 800511e:	f7ff f98f 	bl	8004440 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005126:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005130:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005136:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513a:	2200      	movs	r2, #0
 800513c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	68f9      	ldr	r1, [r7, #12]
 800514a:	69b8      	ldr	r0, [r7, #24]
 800514c:	f001 f90c 	bl	8006368 <pxPortInitialiseStack>
 8005150:	4602      	mov	r2, r0
 8005152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005154:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800515c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005160:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005162:	bf00      	nop
 8005164:	3720      	adds	r7, #32
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
	...

0800516c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005174:	f001 fa22 	bl	80065bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005178:	4b2d      	ldr	r3, [pc, #180]	; (8005230 <prvAddNewTaskToReadyList+0xc4>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3301      	adds	r3, #1
 800517e:	4a2c      	ldr	r2, [pc, #176]	; (8005230 <prvAddNewTaskToReadyList+0xc4>)
 8005180:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005182:	4b2c      	ldr	r3, [pc, #176]	; (8005234 <prvAddNewTaskToReadyList+0xc8>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d109      	bne.n	800519e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800518a:	4a2a      	ldr	r2, [pc, #168]	; (8005234 <prvAddNewTaskToReadyList+0xc8>)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005190:	4b27      	ldr	r3, [pc, #156]	; (8005230 <prvAddNewTaskToReadyList+0xc4>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d110      	bne.n	80051ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005198:	f000 fc08 	bl	80059ac <prvInitialiseTaskLists>
 800519c:	e00d      	b.n	80051ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800519e:	4b26      	ldr	r3, [pc, #152]	; (8005238 <prvAddNewTaskToReadyList+0xcc>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d109      	bne.n	80051ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051a6:	4b23      	ldr	r3, [pc, #140]	; (8005234 <prvAddNewTaskToReadyList+0xc8>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d802      	bhi.n	80051ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80051b4:	4a1f      	ldr	r2, [pc, #124]	; (8005234 <prvAddNewTaskToReadyList+0xc8>)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80051ba:	4b20      	ldr	r3, [pc, #128]	; (800523c <prvAddNewTaskToReadyList+0xd0>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3301      	adds	r3, #1
 80051c0:	4a1e      	ldr	r2, [pc, #120]	; (800523c <prvAddNewTaskToReadyList+0xd0>)
 80051c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80051c4:	4b1d      	ldr	r3, [pc, #116]	; (800523c <prvAddNewTaskToReadyList+0xd0>)
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d0:	4b1b      	ldr	r3, [pc, #108]	; (8005240 <prvAddNewTaskToReadyList+0xd4>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d903      	bls.n	80051e0 <prvAddNewTaskToReadyList+0x74>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051dc:	4a18      	ldr	r2, [pc, #96]	; (8005240 <prvAddNewTaskToReadyList+0xd4>)
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e4:	4613      	mov	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4a15      	ldr	r2, [pc, #84]	; (8005244 <prvAddNewTaskToReadyList+0xd8>)
 80051ee:	441a      	add	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3304      	adds	r3, #4
 80051f4:	4619      	mov	r1, r3
 80051f6:	4610      	mov	r0, r2
 80051f8:	f7ff f92f 	bl	800445a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80051fc:	f001 fa0c 	bl	8006618 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005200:	4b0d      	ldr	r3, [pc, #52]	; (8005238 <prvAddNewTaskToReadyList+0xcc>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00e      	beq.n	8005226 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005208:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <prvAddNewTaskToReadyList+0xc8>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005212:	429a      	cmp	r2, r3
 8005214:	d207      	bcs.n	8005226 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005216:	4b0c      	ldr	r3, [pc, #48]	; (8005248 <prvAddNewTaskToReadyList+0xdc>)
 8005218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005226:	bf00      	nop
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	20000bc8 	.word	0x20000bc8
 8005234:	200006f4 	.word	0x200006f4
 8005238:	20000bd4 	.word	0x20000bd4
 800523c:	20000be4 	.word	0x20000be4
 8005240:	20000bd0 	.word	0x20000bd0
 8005244:	200006f8 	.word	0x200006f8
 8005248:	e000ed04 	.word	0xe000ed04

0800524c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d016      	beq.n	800528c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800525e:	4b13      	ldr	r3, [pc, #76]	; (80052ac <vTaskDelay+0x60>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d009      	beq.n	800527a <vTaskDelay+0x2e>
 8005266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526a:	f383 8811 	msr	BASEPRI, r3
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	60bb      	str	r3, [r7, #8]
 8005278:	e7fe      	b.n	8005278 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800527a:	f000 f87f 	bl	800537c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800527e:	2100      	movs	r1, #0
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fcd7 	bl	8005c34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005286:	f000 f887 	bl	8005398 <xTaskResumeAll>
 800528a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d107      	bne.n	80052a2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005292:	4b07      	ldr	r3, [pc, #28]	; (80052b0 <vTaskDelay+0x64>)
 8005294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052a2:	bf00      	nop
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	20000bf0 	.word	0x20000bf0
 80052b0:	e000ed04 	.word	0xe000ed04

080052b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b08a      	sub	sp, #40	; 0x28
 80052b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80052ba:	2300      	movs	r3, #0
 80052bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80052be:	2300      	movs	r3, #0
 80052c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80052c2:	463a      	mov	r2, r7
 80052c4:	1d39      	adds	r1, r7, #4
 80052c6:	f107 0308 	add.w	r3, r7, #8
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff f864 	bl	8004398 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80052d0:	6839      	ldr	r1, [r7, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	9202      	str	r2, [sp, #8]
 80052d8:	9301      	str	r3, [sp, #4]
 80052da:	2300      	movs	r3, #0
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	2300      	movs	r3, #0
 80052e0:	460a      	mov	r2, r1
 80052e2:	4920      	ldr	r1, [pc, #128]	; (8005364 <vTaskStartScheduler+0xb0>)
 80052e4:	4820      	ldr	r0, [pc, #128]	; (8005368 <vTaskStartScheduler+0xb4>)
 80052e6:	f7ff fe13 	bl	8004f10 <xTaskCreateStatic>
 80052ea:	4602      	mov	r2, r0
 80052ec:	4b1f      	ldr	r3, [pc, #124]	; (800536c <vTaskStartScheduler+0xb8>)
 80052ee:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80052f0:	4b1e      	ldr	r3, [pc, #120]	; (800536c <vTaskStartScheduler+0xb8>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80052f8:	2301      	movs	r3, #1
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	e001      	b.n	8005302 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80052fe:	2300      	movs	r3, #0
 8005300:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d102      	bne.n	800530e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005308:	f000 fce8 	bl	8005cdc <xTimerCreateTimerTask>
 800530c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d115      	bne.n	8005340 <vTaskStartScheduler+0x8c>
 8005314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005326:	4b12      	ldr	r3, [pc, #72]	; (8005370 <vTaskStartScheduler+0xbc>)
 8005328:	f04f 32ff 	mov.w	r2, #4294967295
 800532c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800532e:	4b11      	ldr	r3, [pc, #68]	; (8005374 <vTaskStartScheduler+0xc0>)
 8005330:	2201      	movs	r2, #1
 8005332:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005334:	4b10      	ldr	r3, [pc, #64]	; (8005378 <vTaskStartScheduler+0xc4>)
 8005336:	2200      	movs	r2, #0
 8005338:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800533a:	f001 f8a1 	bl	8006480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800533e:	e00d      	b.n	800535c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005346:	d109      	bne.n	800535c <vTaskStartScheduler+0xa8>
 8005348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534c:	f383 8811 	msr	BASEPRI, r3
 8005350:	f3bf 8f6f 	isb	sy
 8005354:	f3bf 8f4f 	dsb	sy
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	e7fe      	b.n	800535a <vTaskStartScheduler+0xa6>
}
 800535c:	bf00      	nop
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	08006a78 	.word	0x08006a78
 8005368:	0800597d 	.word	0x0800597d
 800536c:	20000bec 	.word	0x20000bec
 8005370:	20000be8 	.word	0x20000be8
 8005374:	20000bd4 	.word	0x20000bd4
 8005378:	20000bcc 	.word	0x20000bcc

0800537c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005380:	4b04      	ldr	r3, [pc, #16]	; (8005394 <vTaskSuspendAll+0x18>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3301      	adds	r3, #1
 8005386:	4a03      	ldr	r2, [pc, #12]	; (8005394 <vTaskSuspendAll+0x18>)
 8005388:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800538a:	bf00      	nop
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	20000bf0 	.word	0x20000bf0

08005398 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80053a6:	4b41      	ldr	r3, [pc, #260]	; (80054ac <xTaskResumeAll+0x114>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d109      	bne.n	80053c2 <xTaskResumeAll+0x2a>
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	e7fe      	b.n	80053c0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80053c2:	f001 f8fb 	bl	80065bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80053c6:	4b39      	ldr	r3, [pc, #228]	; (80054ac <xTaskResumeAll+0x114>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	4a37      	ldr	r2, [pc, #220]	; (80054ac <xTaskResumeAll+0x114>)
 80053ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053d0:	4b36      	ldr	r3, [pc, #216]	; (80054ac <xTaskResumeAll+0x114>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d162      	bne.n	800549e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80053d8:	4b35      	ldr	r3, [pc, #212]	; (80054b0 <xTaskResumeAll+0x118>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d05e      	beq.n	800549e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053e0:	e02f      	b.n	8005442 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053e2:	4b34      	ldr	r3, [pc, #208]	; (80054b4 <xTaskResumeAll+0x11c>)
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	3318      	adds	r3, #24
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7ff f890 	bl	8004514 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	3304      	adds	r3, #4
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff f88b 	bl	8004514 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005402:	4b2d      	ldr	r3, [pc, #180]	; (80054b8 <xTaskResumeAll+0x120>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	429a      	cmp	r2, r3
 8005408:	d903      	bls.n	8005412 <xTaskResumeAll+0x7a>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540e:	4a2a      	ldr	r2, [pc, #168]	; (80054b8 <xTaskResumeAll+0x120>)
 8005410:	6013      	str	r3, [r2, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005416:	4613      	mov	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	4a27      	ldr	r2, [pc, #156]	; (80054bc <xTaskResumeAll+0x124>)
 8005420:	441a      	add	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	3304      	adds	r3, #4
 8005426:	4619      	mov	r1, r3
 8005428:	4610      	mov	r0, r2
 800542a:	f7ff f816 	bl	800445a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005432:	4b23      	ldr	r3, [pc, #140]	; (80054c0 <xTaskResumeAll+0x128>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	429a      	cmp	r2, r3
 800543a:	d302      	bcc.n	8005442 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800543c:	4b21      	ldr	r3, [pc, #132]	; (80054c4 <xTaskResumeAll+0x12c>)
 800543e:	2201      	movs	r2, #1
 8005440:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005442:	4b1c      	ldr	r3, [pc, #112]	; (80054b4 <xTaskResumeAll+0x11c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1cb      	bne.n	80053e2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005450:	f000 fb46 	bl	8005ae0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005454:	4b1c      	ldr	r3, [pc, #112]	; (80054c8 <xTaskResumeAll+0x130>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d010      	beq.n	8005482 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005460:	f000 f846 	bl	80054f0 <xTaskIncrementTick>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d002      	beq.n	8005470 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800546a:	4b16      	ldr	r3, [pc, #88]	; (80054c4 <xTaskResumeAll+0x12c>)
 800546c:	2201      	movs	r2, #1
 800546e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3b01      	subs	r3, #1
 8005474:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1f1      	bne.n	8005460 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800547c:	4b12      	ldr	r3, [pc, #72]	; (80054c8 <xTaskResumeAll+0x130>)
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005482:	4b10      	ldr	r3, [pc, #64]	; (80054c4 <xTaskResumeAll+0x12c>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d009      	beq.n	800549e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800548a:	2301      	movs	r3, #1
 800548c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800548e:	4b0f      	ldr	r3, [pc, #60]	; (80054cc <xTaskResumeAll+0x134>)
 8005490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800549e:	f001 f8bb 	bl	8006618 <vPortExitCritical>

	return xAlreadyYielded;
 80054a2:	68bb      	ldr	r3, [r7, #8]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	20000bf0 	.word	0x20000bf0
 80054b0:	20000bc8 	.word	0x20000bc8
 80054b4:	20000b88 	.word	0x20000b88
 80054b8:	20000bd0 	.word	0x20000bd0
 80054bc:	200006f8 	.word	0x200006f8
 80054c0:	200006f4 	.word	0x200006f4
 80054c4:	20000bdc 	.word	0x20000bdc
 80054c8:	20000bd8 	.word	0x20000bd8
 80054cc:	e000ed04 	.word	0xe000ed04

080054d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80054d6:	4b05      	ldr	r3, [pc, #20]	; (80054ec <xTaskGetTickCount+0x1c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80054dc:	687b      	ldr	r3, [r7, #4]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	20000bcc 	.word	0x20000bcc

080054f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80054f6:	2300      	movs	r3, #0
 80054f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054fa:	4b4e      	ldr	r3, [pc, #312]	; (8005634 <xTaskIncrementTick+0x144>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f040 8088 	bne.w	8005614 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005504:	4b4c      	ldr	r3, [pc, #304]	; (8005638 <xTaskIncrementTick+0x148>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3301      	adds	r3, #1
 800550a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800550c:	4a4a      	ldr	r2, [pc, #296]	; (8005638 <xTaskIncrementTick+0x148>)
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d11f      	bne.n	8005558 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005518:	4b48      	ldr	r3, [pc, #288]	; (800563c <xTaskIncrementTick+0x14c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d009      	beq.n	8005536 <xTaskIncrementTick+0x46>
 8005522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	603b      	str	r3, [r7, #0]
 8005534:	e7fe      	b.n	8005534 <xTaskIncrementTick+0x44>
 8005536:	4b41      	ldr	r3, [pc, #260]	; (800563c <xTaskIncrementTick+0x14c>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	4b40      	ldr	r3, [pc, #256]	; (8005640 <xTaskIncrementTick+0x150>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a3e      	ldr	r2, [pc, #248]	; (800563c <xTaskIncrementTick+0x14c>)
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	4a3e      	ldr	r2, [pc, #248]	; (8005640 <xTaskIncrementTick+0x150>)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	4b3e      	ldr	r3, [pc, #248]	; (8005644 <xTaskIncrementTick+0x154>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	3301      	adds	r3, #1
 8005550:	4a3c      	ldr	r2, [pc, #240]	; (8005644 <xTaskIncrementTick+0x154>)
 8005552:	6013      	str	r3, [r2, #0]
 8005554:	f000 fac4 	bl	8005ae0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005558:	4b3b      	ldr	r3, [pc, #236]	; (8005648 <xTaskIncrementTick+0x158>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	429a      	cmp	r2, r3
 8005560:	d349      	bcc.n	80055f6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005562:	4b36      	ldr	r3, [pc, #216]	; (800563c <xTaskIncrementTick+0x14c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d104      	bne.n	8005576 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800556c:	4b36      	ldr	r3, [pc, #216]	; (8005648 <xTaskIncrementTick+0x158>)
 800556e:	f04f 32ff 	mov.w	r2, #4294967295
 8005572:	601a      	str	r2, [r3, #0]
					break;
 8005574:	e03f      	b.n	80055f6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005576:	4b31      	ldr	r3, [pc, #196]	; (800563c <xTaskIncrementTick+0x14c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	429a      	cmp	r2, r3
 800558c:	d203      	bcs.n	8005596 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800558e:	4a2e      	ldr	r2, [pc, #184]	; (8005648 <xTaskIncrementTick+0x158>)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005594:	e02f      	b.n	80055f6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	3304      	adds	r3, #4
 800559a:	4618      	mov	r0, r3
 800559c:	f7fe ffba 	bl	8004514 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d004      	beq.n	80055b2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	3318      	adds	r3, #24
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7fe ffb1 	bl	8004514 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b6:	4b25      	ldr	r3, [pc, #148]	; (800564c <xTaskIncrementTick+0x15c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d903      	bls.n	80055c6 <xTaskIncrementTick+0xd6>
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c2:	4a22      	ldr	r2, [pc, #136]	; (800564c <xTaskIncrementTick+0x15c>)
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ca:	4613      	mov	r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4413      	add	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4a1f      	ldr	r2, [pc, #124]	; (8005650 <xTaskIncrementTick+0x160>)
 80055d4:	441a      	add	r2, r3
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	3304      	adds	r3, #4
 80055da:	4619      	mov	r1, r3
 80055dc:	4610      	mov	r0, r2
 80055de:	f7fe ff3c 	bl	800445a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e6:	4b1b      	ldr	r3, [pc, #108]	; (8005654 <xTaskIncrementTick+0x164>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d3b8      	bcc.n	8005562 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80055f0:	2301      	movs	r3, #1
 80055f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055f4:	e7b5      	b.n	8005562 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80055f6:	4b17      	ldr	r3, [pc, #92]	; (8005654 <xTaskIncrementTick+0x164>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055fc:	4914      	ldr	r1, [pc, #80]	; (8005650 <xTaskIncrementTick+0x160>)
 80055fe:	4613      	mov	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	440b      	add	r3, r1
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d907      	bls.n	800561e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800560e:	2301      	movs	r3, #1
 8005610:	617b      	str	r3, [r7, #20]
 8005612:	e004      	b.n	800561e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005614:	4b10      	ldr	r3, [pc, #64]	; (8005658 <xTaskIncrementTick+0x168>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3301      	adds	r3, #1
 800561a:	4a0f      	ldr	r2, [pc, #60]	; (8005658 <xTaskIncrementTick+0x168>)
 800561c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800561e:	4b0f      	ldr	r3, [pc, #60]	; (800565c <xTaskIncrementTick+0x16c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005626:	2301      	movs	r3, #1
 8005628:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800562a:	697b      	ldr	r3, [r7, #20]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3718      	adds	r7, #24
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	20000bf0 	.word	0x20000bf0
 8005638:	20000bcc 	.word	0x20000bcc
 800563c:	20000b80 	.word	0x20000b80
 8005640:	20000b84 	.word	0x20000b84
 8005644:	20000be0 	.word	0x20000be0
 8005648:	20000be8 	.word	0x20000be8
 800564c:	20000bd0 	.word	0x20000bd0
 8005650:	200006f8 	.word	0x200006f8
 8005654:	200006f4 	.word	0x200006f4
 8005658:	20000bd8 	.word	0x20000bd8
 800565c:	20000bdc 	.word	0x20000bdc

08005660 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005666:	4b27      	ldr	r3, [pc, #156]	; (8005704 <vTaskSwitchContext+0xa4>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800566e:	4b26      	ldr	r3, [pc, #152]	; (8005708 <vTaskSwitchContext+0xa8>)
 8005670:	2201      	movs	r2, #1
 8005672:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005674:	e040      	b.n	80056f8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005676:	4b24      	ldr	r3, [pc, #144]	; (8005708 <vTaskSwitchContext+0xa8>)
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800567c:	4b23      	ldr	r3, [pc, #140]	; (800570c <vTaskSwitchContext+0xac>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	e00f      	b.n	80056a4 <vTaskSwitchContext+0x44>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d109      	bne.n	800569e <vTaskSwitchContext+0x3e>
 800568a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	607b      	str	r3, [r7, #4]
 800569c:	e7fe      	b.n	800569c <vTaskSwitchContext+0x3c>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	491a      	ldr	r1, [pc, #104]	; (8005710 <vTaskSwitchContext+0xb0>)
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	4613      	mov	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0e5      	beq.n	8005684 <vTaskSwitchContext+0x24>
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	4613      	mov	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	4a13      	ldr	r2, [pc, #76]	; (8005710 <vTaskSwitchContext+0xb0>)
 80056c4:	4413      	add	r3, r2
 80056c6:	60bb      	str	r3, [r7, #8]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	605a      	str	r2, [r3, #4]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	3308      	adds	r3, #8
 80056da:	429a      	cmp	r2, r3
 80056dc:	d104      	bne.n	80056e8 <vTaskSwitchContext+0x88>
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	605a      	str	r2, [r3, #4]
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	4a09      	ldr	r2, [pc, #36]	; (8005714 <vTaskSwitchContext+0xb4>)
 80056f0:	6013      	str	r3, [r2, #0]
 80056f2:	4a06      	ldr	r2, [pc, #24]	; (800570c <vTaskSwitchContext+0xac>)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6013      	str	r3, [r2, #0]
}
 80056f8:	bf00      	nop
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	20000bf0 	.word	0x20000bf0
 8005708:	20000bdc 	.word	0x20000bdc
 800570c:	20000bd0 	.word	0x20000bd0
 8005710:	200006f8 	.word	0x200006f8
 8005714:	200006f4 	.word	0x200006f4

08005718 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d109      	bne.n	800573c <vTaskPlaceOnEventList+0x24>
 8005728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	60fb      	str	r3, [r7, #12]
 800573a:	e7fe      	b.n	800573a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800573c:	4b07      	ldr	r3, [pc, #28]	; (800575c <vTaskPlaceOnEventList+0x44>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3318      	adds	r3, #24
 8005742:	4619      	mov	r1, r3
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7fe feac 	bl	80044a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800574a:	2101      	movs	r1, #1
 800574c:	6838      	ldr	r0, [r7, #0]
 800574e:	f000 fa71 	bl	8005c34 <prvAddCurrentTaskToDelayedList>
}
 8005752:	bf00      	nop
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	200006f4 	.word	0x200006f4

08005760 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d109      	bne.n	8005786 <vTaskPlaceOnEventListRestricted+0x26>
 8005772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	617b      	str	r3, [r7, #20]
 8005784:	e7fe      	b.n	8005784 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005786:	4b0a      	ldr	r3, [pc, #40]	; (80057b0 <vTaskPlaceOnEventListRestricted+0x50>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3318      	adds	r3, #24
 800578c:	4619      	mov	r1, r3
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f7fe fe63 	bl	800445a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d002      	beq.n	80057a0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800579a:	f04f 33ff 	mov.w	r3, #4294967295
 800579e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80057a0:	6879      	ldr	r1, [r7, #4]
 80057a2:	68b8      	ldr	r0, [r7, #8]
 80057a4:	f000 fa46 	bl	8005c34 <prvAddCurrentTaskToDelayedList>
	}
 80057a8:	bf00      	nop
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	200006f4 	.word	0x200006f4

080057b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d109      	bne.n	80057de <xTaskRemoveFromEventList+0x2a>
 80057ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	e7fe      	b.n	80057dc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	3318      	adds	r3, #24
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fe fe96 	bl	8004514 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057e8:	4b1d      	ldr	r3, [pc, #116]	; (8005860 <xTaskRemoveFromEventList+0xac>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d11d      	bne.n	800582c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	3304      	adds	r3, #4
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fe fe8d 	bl	8004514 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fe:	4b19      	ldr	r3, [pc, #100]	; (8005864 <xTaskRemoveFromEventList+0xb0>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	429a      	cmp	r2, r3
 8005804:	d903      	bls.n	800580e <xTaskRemoveFromEventList+0x5a>
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580a:	4a16      	ldr	r2, [pc, #88]	; (8005864 <xTaskRemoveFromEventList+0xb0>)
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005812:	4613      	mov	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4a13      	ldr	r2, [pc, #76]	; (8005868 <xTaskRemoveFromEventList+0xb4>)
 800581c:	441a      	add	r2, r3
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	3304      	adds	r3, #4
 8005822:	4619      	mov	r1, r3
 8005824:	4610      	mov	r0, r2
 8005826:	f7fe fe18 	bl	800445a <vListInsertEnd>
 800582a:	e005      	b.n	8005838 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	3318      	adds	r3, #24
 8005830:	4619      	mov	r1, r3
 8005832:	480e      	ldr	r0, [pc, #56]	; (800586c <xTaskRemoveFromEventList+0xb8>)
 8005834:	f7fe fe11 	bl	800445a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583c:	4b0c      	ldr	r3, [pc, #48]	; (8005870 <xTaskRemoveFromEventList+0xbc>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005842:	429a      	cmp	r2, r3
 8005844:	d905      	bls.n	8005852 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005846:	2301      	movs	r3, #1
 8005848:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800584a:	4b0a      	ldr	r3, [pc, #40]	; (8005874 <xTaskRemoveFromEventList+0xc0>)
 800584c:	2201      	movs	r2, #1
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	e001      	b.n	8005856 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005852:	2300      	movs	r3, #0
 8005854:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005856:	697b      	ldr	r3, [r7, #20]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	20000bf0 	.word	0x20000bf0
 8005864:	20000bd0 	.word	0x20000bd0
 8005868:	200006f8 	.word	0x200006f8
 800586c:	20000b88 	.word	0x20000b88
 8005870:	200006f4 	.word	0x200006f4
 8005874:	20000bdc 	.word	0x20000bdc

08005878 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005880:	4b06      	ldr	r3, [pc, #24]	; (800589c <vTaskInternalSetTimeOutState+0x24>)
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005888:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <vTaskInternalSetTimeOutState+0x28>)
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	605a      	str	r2, [r3, #4]
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	20000be0 	.word	0x20000be0
 80058a0:	20000bcc 	.word	0x20000bcc

080058a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b088      	sub	sp, #32
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d109      	bne.n	80058c8 <xTaskCheckForTimeOut+0x24>
 80058b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	613b      	str	r3, [r7, #16]
 80058c6:	e7fe      	b.n	80058c6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d109      	bne.n	80058e2 <xTaskCheckForTimeOut+0x3e>
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	e7fe      	b.n	80058e0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80058e2:	f000 fe6b 	bl	80065bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80058e6:	4b1d      	ldr	r3, [pc, #116]	; (800595c <xTaskCheckForTimeOut+0xb8>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fe:	d102      	bne.n	8005906 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005900:	2300      	movs	r3, #0
 8005902:	61fb      	str	r3, [r7, #28]
 8005904:	e023      	b.n	800594e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	4b15      	ldr	r3, [pc, #84]	; (8005960 <xTaskCheckForTimeOut+0xbc>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	429a      	cmp	r2, r3
 8005910:	d007      	beq.n	8005922 <xTaskCheckForTimeOut+0x7e>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	429a      	cmp	r2, r3
 800591a:	d302      	bcc.n	8005922 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800591c:	2301      	movs	r3, #1
 800591e:	61fb      	str	r3, [r7, #28]
 8005920:	e015      	b.n	800594e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	429a      	cmp	r2, r3
 800592a:	d20b      	bcs.n	8005944 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	1ad2      	subs	r2, r2, r3
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7ff ff9d 	bl	8005878 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800593e:	2300      	movs	r3, #0
 8005940:	61fb      	str	r3, [r7, #28]
 8005942:	e004      	b.n	800594e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	2200      	movs	r2, #0
 8005948:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800594a:	2301      	movs	r3, #1
 800594c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800594e:	f000 fe63 	bl	8006618 <vPortExitCritical>

	return xReturn;
 8005952:	69fb      	ldr	r3, [r7, #28]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3720      	adds	r7, #32
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	20000bcc 	.word	0x20000bcc
 8005960:	20000be0 	.word	0x20000be0

08005964 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005964:	b480      	push	{r7}
 8005966:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005968:	4b03      	ldr	r3, [pc, #12]	; (8005978 <vTaskMissedYield+0x14>)
 800596a:	2201      	movs	r2, #1
 800596c:	601a      	str	r2, [r3, #0]
}
 800596e:	bf00      	nop
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	20000bdc 	.word	0x20000bdc

0800597c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005984:	f000 f852 	bl	8005a2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005988:	4b06      	ldr	r3, [pc, #24]	; (80059a4 <prvIdleTask+0x28>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d9f9      	bls.n	8005984 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005990:	4b05      	ldr	r3, [pc, #20]	; (80059a8 <prvIdleTask+0x2c>)
 8005992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005996:	601a      	str	r2, [r3, #0]
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059a0:	e7f0      	b.n	8005984 <prvIdleTask+0x8>
 80059a2:	bf00      	nop
 80059a4:	200006f8 	.word	0x200006f8
 80059a8:	e000ed04 	.word	0xe000ed04

080059ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059b2:	2300      	movs	r3, #0
 80059b4:	607b      	str	r3, [r7, #4]
 80059b6:	e00c      	b.n	80059d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	4613      	mov	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4a12      	ldr	r2, [pc, #72]	; (8005a0c <prvInitialiseTaskLists+0x60>)
 80059c4:	4413      	add	r3, r2
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fe fd1a 	bl	8004400 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3301      	adds	r3, #1
 80059d0:	607b      	str	r3, [r7, #4]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b37      	cmp	r3, #55	; 0x37
 80059d6:	d9ef      	bls.n	80059b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059d8:	480d      	ldr	r0, [pc, #52]	; (8005a10 <prvInitialiseTaskLists+0x64>)
 80059da:	f7fe fd11 	bl	8004400 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059de:	480d      	ldr	r0, [pc, #52]	; (8005a14 <prvInitialiseTaskLists+0x68>)
 80059e0:	f7fe fd0e 	bl	8004400 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059e4:	480c      	ldr	r0, [pc, #48]	; (8005a18 <prvInitialiseTaskLists+0x6c>)
 80059e6:	f7fe fd0b 	bl	8004400 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059ea:	480c      	ldr	r0, [pc, #48]	; (8005a1c <prvInitialiseTaskLists+0x70>)
 80059ec:	f7fe fd08 	bl	8004400 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059f0:	480b      	ldr	r0, [pc, #44]	; (8005a20 <prvInitialiseTaskLists+0x74>)
 80059f2:	f7fe fd05 	bl	8004400 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80059f6:	4b0b      	ldr	r3, [pc, #44]	; (8005a24 <prvInitialiseTaskLists+0x78>)
 80059f8:	4a05      	ldr	r2, [pc, #20]	; (8005a10 <prvInitialiseTaskLists+0x64>)
 80059fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80059fc:	4b0a      	ldr	r3, [pc, #40]	; (8005a28 <prvInitialiseTaskLists+0x7c>)
 80059fe:	4a05      	ldr	r2, [pc, #20]	; (8005a14 <prvInitialiseTaskLists+0x68>)
 8005a00:	601a      	str	r2, [r3, #0]
}
 8005a02:	bf00      	nop
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	200006f8 	.word	0x200006f8
 8005a10:	20000b58 	.word	0x20000b58
 8005a14:	20000b6c 	.word	0x20000b6c
 8005a18:	20000b88 	.word	0x20000b88
 8005a1c:	20000b9c 	.word	0x20000b9c
 8005a20:	20000bb4 	.word	0x20000bb4
 8005a24:	20000b80 	.word	0x20000b80
 8005a28:	20000b84 	.word	0x20000b84

08005a2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a32:	e019      	b.n	8005a68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a34:	f000 fdc2 	bl	80065bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a38:	4b0f      	ldr	r3, [pc, #60]	; (8005a78 <prvCheckTasksWaitingTermination+0x4c>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3304      	adds	r3, #4
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7fe fd65 	bl	8004514 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a4a:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <prvCheckTasksWaitingTermination+0x50>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	4a0a      	ldr	r2, [pc, #40]	; (8005a7c <prvCheckTasksWaitingTermination+0x50>)
 8005a52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a54:	4b0a      	ldr	r3, [pc, #40]	; (8005a80 <prvCheckTasksWaitingTermination+0x54>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	4a09      	ldr	r2, [pc, #36]	; (8005a80 <prvCheckTasksWaitingTermination+0x54>)
 8005a5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a5e:	f000 fddb 	bl	8006618 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f80e 	bl	8005a84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a68:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <prvCheckTasksWaitingTermination+0x54>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1e1      	bne.n	8005a34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a70:	bf00      	nop
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	20000b9c 	.word	0x20000b9c
 8005a7c:	20000bc8 	.word	0x20000bc8
 8005a80:	20000bb0 	.word	0x20000bb0

08005a84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d108      	bne.n	8005aa8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 ff36 	bl	800690c <vPortFree>
				vPortFree( pxTCB );
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 ff33 	bl	800690c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005aa6:	e017      	b.n	8005ad8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d103      	bne.n	8005aba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 ff2a 	bl	800690c <vPortFree>
	}
 8005ab8:	e00e      	b.n	8005ad8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d009      	beq.n	8005ad8 <prvDeleteTCB+0x54>
 8005ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	60fb      	str	r3, [r7, #12]
 8005ad6:	e7fe      	b.n	8005ad6 <prvDeleteTCB+0x52>
	}
 8005ad8:	bf00      	nop
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ae6:	4b0c      	ldr	r3, [pc, #48]	; (8005b18 <prvResetNextTaskUnblockTime+0x38>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d104      	bne.n	8005afa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005af0:	4b0a      	ldr	r3, [pc, #40]	; (8005b1c <prvResetNextTaskUnblockTime+0x3c>)
 8005af2:	f04f 32ff 	mov.w	r2, #4294967295
 8005af6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005af8:	e008      	b.n	8005b0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005afa:	4b07      	ldr	r3, [pc, #28]	; (8005b18 <prvResetNextTaskUnblockTime+0x38>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	4a04      	ldr	r2, [pc, #16]	; (8005b1c <prvResetNextTaskUnblockTime+0x3c>)
 8005b0a:	6013      	str	r3, [r2, #0]
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	20000b80 	.word	0x20000b80
 8005b1c:	20000be8 	.word	0x20000be8

08005b20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b26:	4b0b      	ldr	r3, [pc, #44]	; (8005b54 <xTaskGetSchedulerState+0x34>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d102      	bne.n	8005b34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	607b      	str	r3, [r7, #4]
 8005b32:	e008      	b.n	8005b46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b34:	4b08      	ldr	r3, [pc, #32]	; (8005b58 <xTaskGetSchedulerState+0x38>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d102      	bne.n	8005b42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	607b      	str	r3, [r7, #4]
 8005b40:	e001      	b.n	8005b46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b42:	2300      	movs	r3, #0
 8005b44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b46:	687b      	ldr	r3, [r7, #4]
	}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	20000bd4 	.word	0x20000bd4
 8005b58:	20000bf0 	.word	0x20000bf0

08005b5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d054      	beq.n	8005c1c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b72:	4b2d      	ldr	r3, [pc, #180]	; (8005c28 <xTaskPriorityDisinherit+0xcc>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d009      	beq.n	8005b90 <xTaskPriorityDisinherit+0x34>
 8005b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	e7fe      	b.n	8005b8e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d109      	bne.n	8005bac <xTaskPriorityDisinherit+0x50>
 8005b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9c:	f383 8811 	msr	BASEPRI, r3
 8005ba0:	f3bf 8f6f 	isb	sy
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	60bb      	str	r3, [r7, #8]
 8005baa:	e7fe      	b.n	8005baa <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb0:	1e5a      	subs	r2, r3, #1
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d02c      	beq.n	8005c1c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d128      	bne.n	8005c1c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	3304      	adds	r3, #4
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7fe fca0 	bl	8004514 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bec:	4b0f      	ldr	r3, [pc, #60]	; (8005c2c <xTaskPriorityDisinherit+0xd0>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d903      	bls.n	8005bfc <xTaskPriorityDisinherit+0xa0>
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	4a0c      	ldr	r2, [pc, #48]	; (8005c2c <xTaskPriorityDisinherit+0xd0>)
 8005bfa:	6013      	str	r3, [r2, #0]
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c00:	4613      	mov	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4a09      	ldr	r2, [pc, #36]	; (8005c30 <xTaskPriorityDisinherit+0xd4>)
 8005c0a:	441a      	add	r2, r3
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	3304      	adds	r3, #4
 8005c10:	4619      	mov	r1, r3
 8005c12:	4610      	mov	r0, r2
 8005c14:	f7fe fc21 	bl	800445a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c1c:	697b      	ldr	r3, [r7, #20]
	}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	200006f4 	.word	0x200006f4
 8005c2c:	20000bd0 	.word	0x20000bd0
 8005c30:	200006f8 	.word	0x200006f8

08005c34 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c3e:	4b21      	ldr	r3, [pc, #132]	; (8005cc4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c44:	4b20      	ldr	r3, [pc, #128]	; (8005cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3304      	adds	r3, #4
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fe fc62 	bl	8004514 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c56:	d10a      	bne.n	8005c6e <prvAddCurrentTaskToDelayedList+0x3a>
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d007      	beq.n	8005c6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c5e:	4b1a      	ldr	r3, [pc, #104]	; (8005cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	3304      	adds	r3, #4
 8005c64:	4619      	mov	r1, r3
 8005c66:	4819      	ldr	r0, [pc, #100]	; (8005ccc <prvAddCurrentTaskToDelayedList+0x98>)
 8005c68:	f7fe fbf7 	bl	800445a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c6c:	e026      	b.n	8005cbc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4413      	add	r3, r2
 8005c74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c76:	4b14      	ldr	r3, [pc, #80]	; (8005cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d209      	bcs.n	8005c9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c86:	4b12      	ldr	r3, [pc, #72]	; (8005cd0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	4b0f      	ldr	r3, [pc, #60]	; (8005cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3304      	adds	r3, #4
 8005c90:	4619      	mov	r1, r3
 8005c92:	4610      	mov	r0, r2
 8005c94:	f7fe fc05 	bl	80044a2 <vListInsert>
}
 8005c98:	e010      	b.n	8005cbc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c9a:	4b0e      	ldr	r3, [pc, #56]	; (8005cd4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	4b0a      	ldr	r3, [pc, #40]	; (8005cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4610      	mov	r0, r2
 8005ca8:	f7fe fbfb 	bl	80044a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005cac:	4b0a      	ldr	r3, [pc, #40]	; (8005cd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d202      	bcs.n	8005cbc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005cb6:	4a08      	ldr	r2, [pc, #32]	; (8005cd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	6013      	str	r3, [r2, #0]
}
 8005cbc:	bf00      	nop
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	20000bcc 	.word	0x20000bcc
 8005cc8:	200006f4 	.word	0x200006f4
 8005ccc:	20000bb4 	.word	0x20000bb4
 8005cd0:	20000b84 	.word	0x20000b84
 8005cd4:	20000b80 	.word	0x20000b80
 8005cd8:	20000be8 	.word	0x20000be8

08005cdc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b08a      	sub	sp, #40	; 0x28
 8005ce0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005ce6:	f000 faff 	bl	80062e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005cea:	4b1c      	ldr	r3, [pc, #112]	; (8005d5c <xTimerCreateTimerTask+0x80>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d021      	beq.n	8005d36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005cfa:	1d3a      	adds	r2, r7, #4
 8005cfc:	f107 0108 	add.w	r1, r7, #8
 8005d00:	f107 030c 	add.w	r3, r7, #12
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7fe fb61 	bl	80043cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005d0a:	6879      	ldr	r1, [r7, #4]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	9202      	str	r2, [sp, #8]
 8005d12:	9301      	str	r3, [sp, #4]
 8005d14:	2302      	movs	r3, #2
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	2300      	movs	r3, #0
 8005d1a:	460a      	mov	r2, r1
 8005d1c:	4910      	ldr	r1, [pc, #64]	; (8005d60 <xTimerCreateTimerTask+0x84>)
 8005d1e:	4811      	ldr	r0, [pc, #68]	; (8005d64 <xTimerCreateTimerTask+0x88>)
 8005d20:	f7ff f8f6 	bl	8004f10 <xTaskCreateStatic>
 8005d24:	4602      	mov	r2, r0
 8005d26:	4b10      	ldr	r3, [pc, #64]	; (8005d68 <xTimerCreateTimerTask+0x8c>)
 8005d28:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005d2a:	4b0f      	ldr	r3, [pc, #60]	; (8005d68 <xTimerCreateTimerTask+0x8c>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005d32:	2301      	movs	r3, #1
 8005d34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d109      	bne.n	8005d50 <xTimerCreateTimerTask+0x74>
 8005d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d40:	f383 8811 	msr	BASEPRI, r3
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	613b      	str	r3, [r7, #16]
 8005d4e:	e7fe      	b.n	8005d4e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005d50:	697b      	ldr	r3, [r7, #20]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3718      	adds	r7, #24
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20000c24 	.word	0x20000c24
 8005d60:	08006a80 	.word	0x08006a80
 8005d64:	08005e9d 	.word	0x08005e9d
 8005d68:	20000c28 	.word	0x20000c28

08005d6c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b08a      	sub	sp, #40	; 0x28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
 8005d78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d109      	bne.n	8005d98 <xTimerGenericCommand+0x2c>
 8005d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d88:	f383 8811 	msr	BASEPRI, r3
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	623b      	str	r3, [r7, #32]
 8005d96:	e7fe      	b.n	8005d96 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d98:	4b19      	ldr	r3, [pc, #100]	; (8005e00 <xTimerGenericCommand+0x94>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d02a      	beq.n	8005df6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2b05      	cmp	r3, #5
 8005db0:	dc18      	bgt.n	8005de4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005db2:	f7ff feb5 	bl	8005b20 <xTaskGetSchedulerState>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d109      	bne.n	8005dd0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005dbc:	4b10      	ldr	r3, [pc, #64]	; (8005e00 <xTimerGenericCommand+0x94>)
 8005dbe:	6818      	ldr	r0, [r3, #0]
 8005dc0:	f107 0110 	add.w	r1, r7, #16
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dc8:	f7fe fccc 	bl	8004764 <xQueueGenericSend>
 8005dcc:	6278      	str	r0, [r7, #36]	; 0x24
 8005dce:	e012      	b.n	8005df6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005dd0:	4b0b      	ldr	r3, [pc, #44]	; (8005e00 <xTimerGenericCommand+0x94>)
 8005dd2:	6818      	ldr	r0, [r3, #0]
 8005dd4:	f107 0110 	add.w	r1, r7, #16
 8005dd8:	2300      	movs	r3, #0
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f7fe fcc2 	bl	8004764 <xQueueGenericSend>
 8005de0:	6278      	str	r0, [r7, #36]	; 0x24
 8005de2:	e008      	b.n	8005df6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005de4:	4b06      	ldr	r3, [pc, #24]	; (8005e00 <xTimerGenericCommand+0x94>)
 8005de6:	6818      	ldr	r0, [r3, #0]
 8005de8:	f107 0110 	add.w	r1, r7, #16
 8005dec:	2300      	movs	r3, #0
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	f7fe fdb2 	bl	8004958 <xQueueGenericSendFromISR>
 8005df4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3728      	adds	r7, #40	; 0x28
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	20000c24 	.word	0x20000c24

08005e04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b088      	sub	sp, #32
 8005e08:	af02      	add	r7, sp, #8
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e0e:	4b22      	ldr	r3, [pc, #136]	; (8005e98 <prvProcessExpiredTimer+0x94>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7fe fb79 	bl	8004514 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e28:	f003 0304 	and.w	r3, r3, #4
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d021      	beq.n	8005e74 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	699a      	ldr	r2, [r3, #24]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	18d1      	adds	r1, r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	6978      	ldr	r0, [r7, #20]
 8005e3e:	f000 f8d1 	bl	8005fe4 <prvInsertTimerInActiveList>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d01e      	beq.n	8005e86 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e48:	2300      	movs	r3, #0
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	2100      	movs	r1, #0
 8005e52:	6978      	ldr	r0, [r7, #20]
 8005e54:	f7ff ff8a 	bl	8005d6c <xTimerGenericCommand>
 8005e58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d112      	bne.n	8005e86 <prvProcessExpiredTimer+0x82>
 8005e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	e7fe      	b.n	8005e72 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e7a:	f023 0301 	bic.w	r3, r3, #1
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	6978      	ldr	r0, [r7, #20]
 8005e8c:	4798      	blx	r3
}
 8005e8e:	bf00      	nop
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	20000c1c 	.word	0x20000c1c

08005e9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ea4:	f107 0308 	add.w	r3, r7, #8
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f000 f857 	bl	8005f5c <prvGetNextExpireTime>
 8005eae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f000 f803 	bl	8005ec0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005eba:	f000 f8d5 	bl	8006068 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ebe:	e7f1      	b.n	8005ea4 <prvTimerTask+0x8>

08005ec0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005eca:	f7ff fa57 	bl	800537c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ece:	f107 0308 	add.w	r3, r7, #8
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 f866 	bl	8005fa4 <prvSampleTimeNow>
 8005ed8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d130      	bne.n	8005f42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10a      	bne.n	8005efc <prvProcessTimerOrBlockTask+0x3c>
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d806      	bhi.n	8005efc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005eee:	f7ff fa53 	bl	8005398 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005ef2:	68f9      	ldr	r1, [r7, #12]
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f7ff ff85 	bl	8005e04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005efa:	e024      	b.n	8005f46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d008      	beq.n	8005f14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005f02:	4b13      	ldr	r3, [pc, #76]	; (8005f50 <prvProcessTimerOrBlockTask+0x90>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <prvProcessTimerOrBlockTask+0x50>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e000      	b.n	8005f12 <prvProcessTimerOrBlockTask+0x52>
 8005f10:	2300      	movs	r3, #0
 8005f12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005f14:	4b0f      	ldr	r3, [pc, #60]	; (8005f54 <prvProcessTimerOrBlockTask+0x94>)
 8005f16:	6818      	ldr	r0, [r3, #0]
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	683a      	ldr	r2, [r7, #0]
 8005f20:	4619      	mov	r1, r3
 8005f22:	f7fe ffc1 	bl	8004ea8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005f26:	f7ff fa37 	bl	8005398 <xTaskResumeAll>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10a      	bne.n	8005f46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005f30:	4b09      	ldr	r3, [pc, #36]	; (8005f58 <prvProcessTimerOrBlockTask+0x98>)
 8005f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	f3bf 8f6f 	isb	sy
}
 8005f40:	e001      	b.n	8005f46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005f42:	f7ff fa29 	bl	8005398 <xTaskResumeAll>
}
 8005f46:	bf00      	nop
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	20000c20 	.word	0x20000c20
 8005f54:	20000c24 	.word	0x20000c24
 8005f58:	e000ed04 	.word	0xe000ed04

08005f5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f64:	4b0e      	ldr	r3, [pc, #56]	; (8005fa0 <prvGetNextExpireTime+0x44>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <prvGetNextExpireTime+0x16>
 8005f6e:	2201      	movs	r2, #1
 8005f70:	e000      	b.n	8005f74 <prvGetNextExpireTime+0x18>
 8005f72:	2200      	movs	r2, #0
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d105      	bne.n	8005f8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f80:	4b07      	ldr	r3, [pc, #28]	; (8005fa0 <prvGetNextExpireTime+0x44>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	60fb      	str	r3, [r7, #12]
 8005f8a:	e001      	b.n	8005f90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f90:	68fb      	ldr	r3, [r7, #12]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	20000c1c 	.word	0x20000c1c

08005fa4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005fac:	f7ff fa90 	bl	80054d0 <xTaskGetTickCount>
 8005fb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005fb2:	4b0b      	ldr	r3, [pc, #44]	; (8005fe0 <prvSampleTimeNow+0x3c>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d205      	bcs.n	8005fc8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005fbc:	f000 f930 	bl	8006220 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	601a      	str	r2, [r3, #0]
 8005fc6:	e002      	b.n	8005fce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005fce:	4a04      	ldr	r2, [pc, #16]	; (8005fe0 <prvSampleTimeNow+0x3c>)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	20000c2c 	.word	0x20000c2c

08005fe4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
 8005ff0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	429a      	cmp	r2, r3
 8006008:	d812      	bhi.n	8006030 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	1ad2      	subs	r2, r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	429a      	cmp	r2, r3
 8006016:	d302      	bcc.n	800601e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006018:	2301      	movs	r3, #1
 800601a:	617b      	str	r3, [r7, #20]
 800601c:	e01b      	b.n	8006056 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800601e:	4b10      	ldr	r3, [pc, #64]	; (8006060 <prvInsertTimerInActiveList+0x7c>)
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	3304      	adds	r3, #4
 8006026:	4619      	mov	r1, r3
 8006028:	4610      	mov	r0, r2
 800602a:	f7fe fa3a 	bl	80044a2 <vListInsert>
 800602e:	e012      	b.n	8006056 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	429a      	cmp	r2, r3
 8006036:	d206      	bcs.n	8006046 <prvInsertTimerInActiveList+0x62>
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	429a      	cmp	r2, r3
 800603e:	d302      	bcc.n	8006046 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006040:	2301      	movs	r3, #1
 8006042:	617b      	str	r3, [r7, #20]
 8006044:	e007      	b.n	8006056 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006046:	4b07      	ldr	r3, [pc, #28]	; (8006064 <prvInsertTimerInActiveList+0x80>)
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	3304      	adds	r3, #4
 800604e:	4619      	mov	r1, r3
 8006050:	4610      	mov	r0, r2
 8006052:	f7fe fa26 	bl	80044a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006056:	697b      	ldr	r3, [r7, #20]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3718      	adds	r7, #24
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	20000c20 	.word	0x20000c20
 8006064:	20000c1c 	.word	0x20000c1c

08006068 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b08e      	sub	sp, #56	; 0x38
 800606c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800606e:	e0c6      	b.n	80061fe <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	da17      	bge.n	80060a6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006076:	1d3b      	adds	r3, r7, #4
 8006078:	3304      	adds	r3, #4
 800607a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800607c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607e:	2b00      	cmp	r3, #0
 8006080:	d109      	bne.n	8006096 <prvProcessReceivedCommands+0x2e>
 8006082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	61fb      	str	r3, [r7, #28]
 8006094:	e7fe      	b.n	8006094 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800609c:	6850      	ldr	r0, [r2, #4]
 800609e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060a0:	6892      	ldr	r2, [r2, #8]
 80060a2:	4611      	mov	r1, r2
 80060a4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f2c0 80a7 	blt.w	80061fc <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80060b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d004      	beq.n	80060c4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060bc:	3304      	adds	r3, #4
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fe fa28 	bl	8004514 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060c4:	463b      	mov	r3, r7
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7ff ff6c 	bl	8005fa4 <prvSampleTimeNow>
 80060cc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2b09      	cmp	r3, #9
 80060d2:	f200 8094 	bhi.w	80061fe <prvProcessReceivedCommands+0x196>
 80060d6:	a201      	add	r2, pc, #4	; (adr r2, 80060dc <prvProcessReceivedCommands+0x74>)
 80060d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060dc:	08006105 	.word	0x08006105
 80060e0:	08006105 	.word	0x08006105
 80060e4:	08006105 	.word	0x08006105
 80060e8:	08006177 	.word	0x08006177
 80060ec:	0800618b 	.word	0x0800618b
 80060f0:	080061d3 	.word	0x080061d3
 80060f4:	08006105 	.word	0x08006105
 80060f8:	08006105 	.word	0x08006105
 80060fc:	08006177 	.word	0x08006177
 8006100:	0800618b 	.word	0x0800618b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006106:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800610a:	f043 0301 	orr.w	r3, r3, #1
 800610e:	b2da      	uxtb	r2, r3
 8006110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006112:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	18d1      	adds	r1, r2, r3
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006124:	f7ff ff5e 	bl	8005fe4 <prvInsertTimerInActiveList>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d067      	beq.n	80061fe <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800612e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006134:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006138:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800613c:	f003 0304 	and.w	r3, r3, #4
 8006140:	2b00      	cmp	r3, #0
 8006142:	d05c      	beq.n	80061fe <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	441a      	add	r2, r3
 800614c:	2300      	movs	r3, #0
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	2300      	movs	r3, #0
 8006152:	2100      	movs	r1, #0
 8006154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006156:	f7ff fe09 	bl	8005d6c <xTimerGenericCommand>
 800615a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d14d      	bne.n	80061fe <prvProcessReceivedCommands+0x196>
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	61bb      	str	r3, [r7, #24]
 8006174:	e7fe      	b.n	8006174 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006178:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800617c:	f023 0301 	bic.w	r3, r3, #1
 8006180:	b2da      	uxtb	r2, r3
 8006182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006184:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006188:	e039      	b.n	80061fe <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800618a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006190:	f043 0301 	orr.w	r3, r3, #1
 8006194:	b2da      	uxtb	r2, r3
 8006196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006198:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80061a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d109      	bne.n	80061be <prvProcessReceivedCommands+0x156>
 80061aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	617b      	str	r3, [r7, #20]
 80061bc:	e7fe      	b.n	80061bc <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80061be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c0:	699a      	ldr	r2, [r3, #24]
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	18d1      	adds	r1, r2, r3
 80061c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061cc:	f7ff ff0a 	bl	8005fe4 <prvInsertTimerInActiveList>
					break;
 80061d0:	e015      	b.n	80061fe <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80061d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061d8:	f003 0302 	and.w	r3, r3, #2
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d103      	bne.n	80061e8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80061e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061e2:	f000 fb93 	bl	800690c <vPortFree>
 80061e6:	e00a      	b.n	80061fe <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061ee:	f023 0301 	bic.w	r3, r3, #1
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80061fa:	e000      	b.n	80061fe <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80061fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061fe:	4b07      	ldr	r3, [pc, #28]	; (800621c <prvProcessReceivedCommands+0x1b4>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	1d39      	adds	r1, r7, #4
 8006204:	2200      	movs	r2, #0
 8006206:	4618      	mov	r0, r3
 8006208:	f7fe fc3a 	bl	8004a80 <xQueueReceive>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	f47f af2e 	bne.w	8006070 <prvProcessReceivedCommands+0x8>
	}
}
 8006214:	bf00      	nop
 8006216:	3730      	adds	r7, #48	; 0x30
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	20000c24 	.word	0x20000c24

08006220 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b088      	sub	sp, #32
 8006224:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006226:	e047      	b.n	80062b8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006228:	4b2d      	ldr	r3, [pc, #180]	; (80062e0 <prvSwitchTimerLists+0xc0>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006232:	4b2b      	ldr	r3, [pc, #172]	; (80062e0 <prvSwitchTimerLists+0xc0>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	3304      	adds	r3, #4
 8006240:	4618      	mov	r0, r3
 8006242:	f7fe f967 	bl	8004514 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006254:	f003 0304 	and.w	r3, r3, #4
 8006258:	2b00      	cmp	r3, #0
 800625a:	d02d      	beq.n	80062b8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	4413      	add	r3, r2
 8006264:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	429a      	cmp	r2, r3
 800626c:	d90e      	bls.n	800628c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800627a:	4b19      	ldr	r3, [pc, #100]	; (80062e0 <prvSwitchTimerLists+0xc0>)
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	3304      	adds	r3, #4
 8006282:	4619      	mov	r1, r3
 8006284:	4610      	mov	r0, r2
 8006286:	f7fe f90c 	bl	80044a2 <vListInsert>
 800628a:	e015      	b.n	80062b8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800628c:	2300      	movs	r3, #0
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	2300      	movs	r3, #0
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	2100      	movs	r1, #0
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f7ff fd68 	bl	8005d6c <xTimerGenericCommand>
 800629c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d109      	bne.n	80062b8 <prvSwitchTimerLists+0x98>
 80062a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a8:	f383 8811 	msr	BASEPRI, r3
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	603b      	str	r3, [r7, #0]
 80062b6:	e7fe      	b.n	80062b6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062b8:	4b09      	ldr	r3, [pc, #36]	; (80062e0 <prvSwitchTimerLists+0xc0>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1b2      	bne.n	8006228 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80062c2:	4b07      	ldr	r3, [pc, #28]	; (80062e0 <prvSwitchTimerLists+0xc0>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80062c8:	4b06      	ldr	r3, [pc, #24]	; (80062e4 <prvSwitchTimerLists+0xc4>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a04      	ldr	r2, [pc, #16]	; (80062e0 <prvSwitchTimerLists+0xc0>)
 80062ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80062d0:	4a04      	ldr	r2, [pc, #16]	; (80062e4 <prvSwitchTimerLists+0xc4>)
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	6013      	str	r3, [r2, #0]
}
 80062d6:	bf00      	nop
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	20000c1c 	.word	0x20000c1c
 80062e4:	20000c20 	.word	0x20000c20

080062e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80062ee:	f000 f965 	bl	80065bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80062f2:	4b15      	ldr	r3, [pc, #84]	; (8006348 <prvCheckForValidListAndQueue+0x60>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d120      	bne.n	800633c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80062fa:	4814      	ldr	r0, [pc, #80]	; (800634c <prvCheckForValidListAndQueue+0x64>)
 80062fc:	f7fe f880 	bl	8004400 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006300:	4813      	ldr	r0, [pc, #76]	; (8006350 <prvCheckForValidListAndQueue+0x68>)
 8006302:	f7fe f87d 	bl	8004400 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006306:	4b13      	ldr	r3, [pc, #76]	; (8006354 <prvCheckForValidListAndQueue+0x6c>)
 8006308:	4a10      	ldr	r2, [pc, #64]	; (800634c <prvCheckForValidListAndQueue+0x64>)
 800630a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800630c:	4b12      	ldr	r3, [pc, #72]	; (8006358 <prvCheckForValidListAndQueue+0x70>)
 800630e:	4a10      	ldr	r2, [pc, #64]	; (8006350 <prvCheckForValidListAndQueue+0x68>)
 8006310:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006312:	2300      	movs	r3, #0
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	4b11      	ldr	r3, [pc, #68]	; (800635c <prvCheckForValidListAndQueue+0x74>)
 8006318:	4a11      	ldr	r2, [pc, #68]	; (8006360 <prvCheckForValidListAndQueue+0x78>)
 800631a:	2110      	movs	r1, #16
 800631c:	200a      	movs	r0, #10
 800631e:	f7fe f98b 	bl	8004638 <xQueueGenericCreateStatic>
 8006322:	4602      	mov	r2, r0
 8006324:	4b08      	ldr	r3, [pc, #32]	; (8006348 <prvCheckForValidListAndQueue+0x60>)
 8006326:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006328:	4b07      	ldr	r3, [pc, #28]	; (8006348 <prvCheckForValidListAndQueue+0x60>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d005      	beq.n	800633c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006330:	4b05      	ldr	r3, [pc, #20]	; (8006348 <prvCheckForValidListAndQueue+0x60>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	490b      	ldr	r1, [pc, #44]	; (8006364 <prvCheckForValidListAndQueue+0x7c>)
 8006336:	4618      	mov	r0, r3
 8006338:	f7fe fd8e 	bl	8004e58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800633c:	f000 f96c 	bl	8006618 <vPortExitCritical>
}
 8006340:	bf00      	nop
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20000c24 	.word	0x20000c24
 800634c:	20000bf4 	.word	0x20000bf4
 8006350:	20000c08 	.word	0x20000c08
 8006354:	20000c1c 	.word	0x20000c1c
 8006358:	20000c20 	.word	0x20000c20
 800635c:	20000cd0 	.word	0x20000cd0
 8006360:	20000c30 	.word	0x20000c30
 8006364:	08006a88 	.word	0x08006a88

08006368 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	3b04      	subs	r3, #4
 8006378:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006380:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3b04      	subs	r3, #4
 8006386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	f023 0201 	bic.w	r2, r3, #1
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	3b04      	subs	r3, #4
 8006396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006398:	4a0c      	ldr	r2, [pc, #48]	; (80063cc <pxPortInitialiseStack+0x64>)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	3b14      	subs	r3, #20
 80063a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	3b04      	subs	r3, #4
 80063ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f06f 0202 	mvn.w	r2, #2
 80063b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	3b20      	subs	r3, #32
 80063bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063be:	68fb      	ldr	r3, [r7, #12]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	080063d1 	.word	0x080063d1

080063d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80063d6:	2300      	movs	r3, #0
 80063d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063da:	4b11      	ldr	r3, [pc, #68]	; (8006420 <prvTaskExitError+0x50>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e2:	d009      	beq.n	80063f8 <prvTaskExitError+0x28>
 80063e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	60fb      	str	r3, [r7, #12]
 80063f6:	e7fe      	b.n	80063f6 <prvTaskExitError+0x26>
 80063f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800640a:	bf00      	nop
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0fc      	beq.n	800640c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006412:	bf00      	nop
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	20000014 	.word	0x20000014
	...

08006430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006430:	4b07      	ldr	r3, [pc, #28]	; (8006450 <pxCurrentTCBConst2>)
 8006432:	6819      	ldr	r1, [r3, #0]
 8006434:	6808      	ldr	r0, [r1, #0]
 8006436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800643a:	f380 8809 	msr	PSP, r0
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f04f 0000 	mov.w	r0, #0
 8006446:	f380 8811 	msr	BASEPRI, r0
 800644a:	4770      	bx	lr
 800644c:	f3af 8000 	nop.w

08006450 <pxCurrentTCBConst2>:
 8006450:	200006f4 	.word	0x200006f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop

08006458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006458:	4808      	ldr	r0, [pc, #32]	; (800647c <prvPortStartFirstTask+0x24>)
 800645a:	6800      	ldr	r0, [r0, #0]
 800645c:	6800      	ldr	r0, [r0, #0]
 800645e:	f380 8808 	msr	MSP, r0
 8006462:	f04f 0000 	mov.w	r0, #0
 8006466:	f380 8814 	msr	CONTROL, r0
 800646a:	b662      	cpsie	i
 800646c:	b661      	cpsie	f
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	df00      	svc	0
 8006478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800647a:	bf00      	nop
 800647c:	e000ed08 	.word	0xe000ed08

08006480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006486:	4b44      	ldr	r3, [pc, #272]	; (8006598 <xPortStartScheduler+0x118>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a44      	ldr	r2, [pc, #272]	; (800659c <xPortStartScheduler+0x11c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d109      	bne.n	80064a4 <xPortStartScheduler+0x24>
 8006490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	613b      	str	r3, [r7, #16]
 80064a2:	e7fe      	b.n	80064a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80064a4:	4b3c      	ldr	r3, [pc, #240]	; (8006598 <xPortStartScheduler+0x118>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a3d      	ldr	r2, [pc, #244]	; (80065a0 <xPortStartScheduler+0x120>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d109      	bne.n	80064c2 <xPortStartScheduler+0x42>
 80064ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	e7fe      	b.n	80064c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064c2:	4b38      	ldr	r3, [pc, #224]	; (80065a4 <xPortStartScheduler+0x124>)
 80064c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	22ff      	movs	r2, #255	; 0xff
 80064d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064dc:	78fb      	ldrb	r3, [r7, #3]
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	4b30      	ldr	r3, [pc, #192]	; (80065a8 <xPortStartScheduler+0x128>)
 80064e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064ea:	4b30      	ldr	r3, [pc, #192]	; (80065ac <xPortStartScheduler+0x12c>)
 80064ec:	2207      	movs	r2, #7
 80064ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064f0:	e009      	b.n	8006506 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80064f2:	4b2e      	ldr	r3, [pc, #184]	; (80065ac <xPortStartScheduler+0x12c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3b01      	subs	r3, #1
 80064f8:	4a2c      	ldr	r2, [pc, #176]	; (80065ac <xPortStartScheduler+0x12c>)
 80064fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064fc:	78fb      	ldrb	r3, [r7, #3]
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	b2db      	uxtb	r3, r3
 8006504:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006506:	78fb      	ldrb	r3, [r7, #3]
 8006508:	b2db      	uxtb	r3, r3
 800650a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800650e:	2b80      	cmp	r3, #128	; 0x80
 8006510:	d0ef      	beq.n	80064f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006512:	4b26      	ldr	r3, [pc, #152]	; (80065ac <xPortStartScheduler+0x12c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f1c3 0307 	rsb	r3, r3, #7
 800651a:	2b04      	cmp	r3, #4
 800651c:	d009      	beq.n	8006532 <xPortStartScheduler+0xb2>
 800651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	60bb      	str	r3, [r7, #8]
 8006530:	e7fe      	b.n	8006530 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006532:	4b1e      	ldr	r3, [pc, #120]	; (80065ac <xPortStartScheduler+0x12c>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	021b      	lsls	r3, r3, #8
 8006538:	4a1c      	ldr	r2, [pc, #112]	; (80065ac <xPortStartScheduler+0x12c>)
 800653a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800653c:	4b1b      	ldr	r3, [pc, #108]	; (80065ac <xPortStartScheduler+0x12c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006544:	4a19      	ldr	r2, [pc, #100]	; (80065ac <xPortStartScheduler+0x12c>)
 8006546:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	b2da      	uxtb	r2, r3
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006550:	4b17      	ldr	r3, [pc, #92]	; (80065b0 <xPortStartScheduler+0x130>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a16      	ldr	r2, [pc, #88]	; (80065b0 <xPortStartScheduler+0x130>)
 8006556:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800655a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800655c:	4b14      	ldr	r3, [pc, #80]	; (80065b0 <xPortStartScheduler+0x130>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a13      	ldr	r2, [pc, #76]	; (80065b0 <xPortStartScheduler+0x130>)
 8006562:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006566:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006568:	f000 f8d6 	bl	8006718 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800656c:	4b11      	ldr	r3, [pc, #68]	; (80065b4 <xPortStartScheduler+0x134>)
 800656e:	2200      	movs	r2, #0
 8006570:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006572:	f000 f8f5 	bl	8006760 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006576:	4b10      	ldr	r3, [pc, #64]	; (80065b8 <xPortStartScheduler+0x138>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a0f      	ldr	r2, [pc, #60]	; (80065b8 <xPortStartScheduler+0x138>)
 800657c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006580:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006582:	f7ff ff69 	bl	8006458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006586:	f7ff f86b 	bl	8005660 <vTaskSwitchContext>
	prvTaskExitError();
 800658a:	f7ff ff21 	bl	80063d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	e000ed00 	.word	0xe000ed00
 800659c:	410fc271 	.word	0x410fc271
 80065a0:	410fc270 	.word	0x410fc270
 80065a4:	e000e400 	.word	0xe000e400
 80065a8:	20000d20 	.word	0x20000d20
 80065ac:	20000d24 	.word	0x20000d24
 80065b0:	e000ed20 	.word	0xe000ed20
 80065b4:	20000014 	.word	0x20000014
 80065b8:	e000ef34 	.word	0xe000ef34

080065bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065d4:	4b0e      	ldr	r3, [pc, #56]	; (8006610 <vPortEnterCritical+0x54>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3301      	adds	r3, #1
 80065da:	4a0d      	ldr	r2, [pc, #52]	; (8006610 <vPortEnterCritical+0x54>)
 80065dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065de:	4b0c      	ldr	r3, [pc, #48]	; (8006610 <vPortEnterCritical+0x54>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d10e      	bne.n	8006604 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065e6:	4b0b      	ldr	r3, [pc, #44]	; (8006614 <vPortEnterCritical+0x58>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d009      	beq.n	8006604 <vPortEnterCritical+0x48>
 80065f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	603b      	str	r3, [r7, #0]
 8006602:	e7fe      	b.n	8006602 <vPortEnterCritical+0x46>
	}
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	20000014 	.word	0x20000014
 8006614:	e000ed04 	.word	0xe000ed04

08006618 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800661e:	4b11      	ldr	r3, [pc, #68]	; (8006664 <vPortExitCritical+0x4c>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d109      	bne.n	800663a <vPortExitCritical+0x22>
 8006626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	607b      	str	r3, [r7, #4]
 8006638:	e7fe      	b.n	8006638 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800663a:	4b0a      	ldr	r3, [pc, #40]	; (8006664 <vPortExitCritical+0x4c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	3b01      	subs	r3, #1
 8006640:	4a08      	ldr	r2, [pc, #32]	; (8006664 <vPortExitCritical+0x4c>)
 8006642:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006644:	4b07      	ldr	r3, [pc, #28]	; (8006664 <vPortExitCritical+0x4c>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d104      	bne.n	8006656 <vPortExitCritical+0x3e>
 800664c:	2300      	movs	r3, #0
 800664e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006656:	bf00      	nop
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	20000014 	.word	0x20000014
	...

08006670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006670:	f3ef 8009 	mrs	r0, PSP
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	4b15      	ldr	r3, [pc, #84]	; (80066d0 <pxCurrentTCBConst>)
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	f01e 0f10 	tst.w	lr, #16
 8006680:	bf08      	it	eq
 8006682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800668a:	6010      	str	r0, [r2, #0]
 800668c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006690:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006694:	f380 8811 	msr	BASEPRI, r0
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f7fe ffde 	bl	8005660 <vTaskSwitchContext>
 80066a4:	f04f 0000 	mov.w	r0, #0
 80066a8:	f380 8811 	msr	BASEPRI, r0
 80066ac:	bc09      	pop	{r0, r3}
 80066ae:	6819      	ldr	r1, [r3, #0]
 80066b0:	6808      	ldr	r0, [r1, #0]
 80066b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b6:	f01e 0f10 	tst.w	lr, #16
 80066ba:	bf08      	it	eq
 80066bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066c0:	f380 8809 	msr	PSP, r0
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	f3af 8000 	nop.w

080066d0 <pxCurrentTCBConst>:
 80066d0:	200006f4 	.word	0x200006f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop

080066d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066f0:	f7fe fefe 	bl	80054f0 <xTaskIncrementTick>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066fa:	4b06      	ldr	r3, [pc, #24]	; (8006714 <SysTick_Handler+0x3c>)
 80066fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006700:	601a      	str	r2, [r3, #0]
 8006702:	2300      	movs	r3, #0
 8006704:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800670c:	bf00      	nop
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	e000ed04 	.word	0xe000ed04

08006718 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006718:	b480      	push	{r7}
 800671a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800671c:	4b0b      	ldr	r3, [pc, #44]	; (800674c <vPortSetupTimerInterrupt+0x34>)
 800671e:	2200      	movs	r2, #0
 8006720:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006722:	4b0b      	ldr	r3, [pc, #44]	; (8006750 <vPortSetupTimerInterrupt+0x38>)
 8006724:	2200      	movs	r2, #0
 8006726:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006728:	4b0a      	ldr	r3, [pc, #40]	; (8006754 <vPortSetupTimerInterrupt+0x3c>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a0a      	ldr	r2, [pc, #40]	; (8006758 <vPortSetupTimerInterrupt+0x40>)
 800672e:	fba2 2303 	umull	r2, r3, r2, r3
 8006732:	099b      	lsrs	r3, r3, #6
 8006734:	4a09      	ldr	r2, [pc, #36]	; (800675c <vPortSetupTimerInterrupt+0x44>)
 8006736:	3b01      	subs	r3, #1
 8006738:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800673a:	4b04      	ldr	r3, [pc, #16]	; (800674c <vPortSetupTimerInterrupt+0x34>)
 800673c:	2207      	movs	r2, #7
 800673e:	601a      	str	r2, [r3, #0]
}
 8006740:	bf00      	nop
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	e000e010 	.word	0xe000e010
 8006750:	e000e018 	.word	0xe000e018
 8006754:	20000008 	.word	0x20000008
 8006758:	10624dd3 	.word	0x10624dd3
 800675c:	e000e014 	.word	0xe000e014

08006760 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006760:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006770 <vPortEnableVFP+0x10>
 8006764:	6801      	ldr	r1, [r0, #0]
 8006766:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800676a:	6001      	str	r1, [r0, #0]
 800676c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800676e:	bf00      	nop
 8006770:	e000ed88 	.word	0xe000ed88

08006774 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800677a:	f3ef 8305 	mrs	r3, IPSR
 800677e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2b0f      	cmp	r3, #15
 8006784:	d913      	bls.n	80067ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006786:	4a16      	ldr	r2, [pc, #88]	; (80067e0 <vPortValidateInterruptPriority+0x6c>)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4413      	add	r3, r2
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006790:	4b14      	ldr	r3, [pc, #80]	; (80067e4 <vPortValidateInterruptPriority+0x70>)
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	7afa      	ldrb	r2, [r7, #11]
 8006796:	429a      	cmp	r2, r3
 8006798:	d209      	bcs.n	80067ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800679a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	607b      	str	r3, [r7, #4]
 80067ac:	e7fe      	b.n	80067ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067ae:	4b0e      	ldr	r3, [pc, #56]	; (80067e8 <vPortValidateInterruptPriority+0x74>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067b6:	4b0d      	ldr	r3, [pc, #52]	; (80067ec <vPortValidateInterruptPriority+0x78>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d909      	bls.n	80067d2 <vPortValidateInterruptPriority+0x5e>
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	603b      	str	r3, [r7, #0]
 80067d0:	e7fe      	b.n	80067d0 <vPortValidateInterruptPriority+0x5c>
	}
 80067d2:	bf00      	nop
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	e000e3f0 	.word	0xe000e3f0
 80067e4:	20000d20 	.word	0x20000d20
 80067e8:	e000ed0c 	.word	0xe000ed0c
 80067ec:	20000d24 	.word	0x20000d24

080067f0 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b088      	sub	sp, #32
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 80067f8:	2300      	movs	r3, #0
 80067fa:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 80067fc:	f7fe fdbe 	bl	800537c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 8006800:	4b3e      	ldr	r3, [pc, #248]	; (80068fc <pvPortMalloc+0x10c>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d104      	bne.n	8006812 <pvPortMalloc+0x22>
		{
			prvHeapInit();
 8006808:	f000 f8ba 	bl	8006980 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 800680c:	4b3b      	ldr	r3, [pc, #236]	; (80068fc <pvPortMalloc+0x10c>)
 800680e:	2201      	movs	r2, #1
 8006810:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00e      	beq.n	8006836 <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 8006818:	2308      	movs	r3, #8
 800681a:	461a      	mov	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4413      	add	r3, r2
 8006820:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f003 0307 	and.w	r3, r3, #7
 8006828:	2b00      	cmp	r3, #0
 800682a:	d004      	beq.n	8006836 <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f023 0307 	bic.w	r3, r3, #7
 8006832:	3308      	adds	r3, #8
 8006834:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d057      	beq.n	80068ec <pvPortMalloc+0xfc>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f247 5227 	movw	r2, #29991	; 0x7527
 8006842:	4293      	cmp	r3, r2
 8006844:	d852      	bhi.n	80068ec <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 8006846:	4b2e      	ldr	r3, [pc, #184]	; (8006900 <pvPortMalloc+0x110>)
 8006848:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 800684a:	4b2d      	ldr	r3, [pc, #180]	; (8006900 <pvPortMalloc+0x110>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006850:	e004      	b.n	800685c <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	429a      	cmp	r2, r3
 8006864:	d903      	bls.n	800686e <pvPortMalloc+0x7e>
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1f1      	bne.n	8006852 <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	4a24      	ldr	r2, [pc, #144]	; (8006904 <pvPortMalloc+0x114>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d03a      	beq.n	80068ec <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2208      	movs	r2, #8
 800687c:	4413      	add	r3, r2
 800687e:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	2208      	movs	r2, #8
 8006892:	0052      	lsls	r2, r2, #1
 8006894:	4293      	cmp	r3, r2
 8006896:	d922      	bls.n	80068de <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006898:	69fa      	ldr	r2, [r7, #28]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4413      	add	r3, r2
 800689e:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	1ad2      	subs	r2, r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	60bb      	str	r3, [r7, #8]
 80068b8:	4b11      	ldr	r3, [pc, #68]	; (8006900 <pvPortMalloc+0x110>)
 80068ba:	613b      	str	r3, [r7, #16]
 80068bc:	e002      	b.n	80068c4 <pvPortMalloc+0xd4>
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	613b      	str	r3, [r7, #16]
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d8f6      	bhi.n	80068be <pvPortMalloc+0xce>
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068de:	4b0a      	ldr	r3, [pc, #40]	; (8006908 <pvPortMalloc+0x118>)
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	4a07      	ldr	r2, [pc, #28]	; (8006908 <pvPortMalloc+0x118>)
 80068ea:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80068ec:	f7fe fd54 	bl	8005398 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 80068f0:	697b      	ldr	r3, [r7, #20]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3720      	adds	r7, #32
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	20008268 	.word	0x20008268
 8006900:	20008258 	.word	0x20008258
 8006904:	20008260 	.word	0x20008260
 8006908:	20000018 	.word	0x20000018

0800690c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d027      	beq.n	800696e <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 800691e:	2308      	movs	r3, #8
 8006920:	425b      	negs	r3, r3
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	4413      	add	r3, r2
 8006926:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 800692c:	f7fe fd26 	bl	800537c <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	60bb      	str	r3, [r7, #8]
 8006936:	4b10      	ldr	r3, [pc, #64]	; (8006978 <vPortFree+0x6c>)
 8006938:	617b      	str	r3, [r7, #20]
 800693a:	e002      	b.n	8006942 <vPortFree+0x36>
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	617b      	str	r3, [r7, #20]
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	429a      	cmp	r2, r3
 800694c:	d8f6      	bhi.n	800693c <vPortFree+0x30>
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	685a      	ldr	r2, [r3, #4]
 8006960:	4b06      	ldr	r3, [pc, #24]	; (800697c <vPortFree+0x70>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4413      	add	r3, r2
 8006966:	4a05      	ldr	r2, [pc, #20]	; (800697c <vPortFree+0x70>)
 8006968:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 800696a:	f7fe fd15 	bl	8005398 <xTaskResumeAll>
	}
}
 800696e:	bf00      	nop
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20008258 	.word	0x20008258
 800697c:	20000018 	.word	0x20000018

08006980 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8006986:	4b10      	ldr	r3, [pc, #64]	; (80069c8 <prvHeapInit+0x48>)
 8006988:	f023 0307 	bic.w	r3, r3, #7
 800698c:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800698e:	4a0f      	ldr	r2, [pc, #60]	; (80069cc <prvHeapInit+0x4c>)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006994:	4b0d      	ldr	r3, [pc, #52]	; (80069cc <prvHeapInit+0x4c>)
 8006996:	2200      	movs	r2, #0
 8006998:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 800699a:	4b0d      	ldr	r3, [pc, #52]	; (80069d0 <prvHeapInit+0x50>)
 800699c:	f247 5228 	movw	r2, #29992	; 0x7528
 80069a0:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 80069a2:	4b0b      	ldr	r3, [pc, #44]	; (80069d0 <prvHeapInit+0x50>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	f247 5228 	movw	r2, #29992	; 0x7528
 80069b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	4a06      	ldr	r2, [pc, #24]	; (80069d0 <prvHeapInit+0x50>)
 80069b8:	601a      	str	r2, [r3, #0]
}
 80069ba:	bf00      	nop
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	20000d30 	.word	0x20000d30
 80069cc:	20008258 	.word	0x20008258
 80069d0:	20008260 	.word	0x20008260

080069d4 <__libc_init_array>:
 80069d4:	b570      	push	{r4, r5, r6, lr}
 80069d6:	4e0d      	ldr	r6, [pc, #52]	; (8006a0c <__libc_init_array+0x38>)
 80069d8:	4c0d      	ldr	r4, [pc, #52]	; (8006a10 <__libc_init_array+0x3c>)
 80069da:	1ba4      	subs	r4, r4, r6
 80069dc:	10a4      	asrs	r4, r4, #2
 80069de:	2500      	movs	r5, #0
 80069e0:	42a5      	cmp	r5, r4
 80069e2:	d109      	bne.n	80069f8 <__libc_init_array+0x24>
 80069e4:	4e0b      	ldr	r6, [pc, #44]	; (8006a14 <__libc_init_array+0x40>)
 80069e6:	4c0c      	ldr	r4, [pc, #48]	; (8006a18 <__libc_init_array+0x44>)
 80069e8:	f000 f82c 	bl	8006a44 <_init>
 80069ec:	1ba4      	subs	r4, r4, r6
 80069ee:	10a4      	asrs	r4, r4, #2
 80069f0:	2500      	movs	r5, #0
 80069f2:	42a5      	cmp	r5, r4
 80069f4:	d105      	bne.n	8006a02 <__libc_init_array+0x2e>
 80069f6:	bd70      	pop	{r4, r5, r6, pc}
 80069f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069fc:	4798      	blx	r3
 80069fe:	3501      	adds	r5, #1
 8006a00:	e7ee      	b.n	80069e0 <__libc_init_array+0xc>
 8006a02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a06:	4798      	blx	r3
 8006a08:	3501      	adds	r5, #1
 8006a0a:	e7f2      	b.n	80069f2 <__libc_init_array+0x1e>
 8006a0c:	08006b28 	.word	0x08006b28
 8006a10:	08006b28 	.word	0x08006b28
 8006a14:	08006b28 	.word	0x08006b28
 8006a18:	08006b2c 	.word	0x08006b2c

08006a1c <memcpy>:
 8006a1c:	b510      	push	{r4, lr}
 8006a1e:	1e43      	subs	r3, r0, #1
 8006a20:	440a      	add	r2, r1
 8006a22:	4291      	cmp	r1, r2
 8006a24:	d100      	bne.n	8006a28 <memcpy+0xc>
 8006a26:	bd10      	pop	{r4, pc}
 8006a28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a30:	e7f7      	b.n	8006a22 <memcpy+0x6>

08006a32 <memset>:
 8006a32:	4402      	add	r2, r0
 8006a34:	4603      	mov	r3, r0
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d100      	bne.n	8006a3c <memset+0xa>
 8006a3a:	4770      	bx	lr
 8006a3c:	f803 1b01 	strb.w	r1, [r3], #1
 8006a40:	e7f9      	b.n	8006a36 <memset+0x4>
	...

08006a44 <_init>:
 8006a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a46:	bf00      	nop
 8006a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a4a:	bc08      	pop	{r3}
 8006a4c:	469e      	mov	lr, r3
 8006a4e:	4770      	bx	lr

08006a50 <_fini>:
 8006a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a52:	bf00      	nop
 8006a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a56:	bc08      	pop	{r3}
 8006a58:	469e      	mov	lr, r3
 8006a5a:	4770      	bx	lr
