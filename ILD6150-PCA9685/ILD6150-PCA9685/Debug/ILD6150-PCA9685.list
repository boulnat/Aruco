
ILD6150-PCA9685.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007de4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08007f74  08007f74  00017f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008100  08008100  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008100  08008100  00018100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008108  08008108  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008108  08008108  00018108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800810c  0800810c  0001810c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008550  20000080  08008190  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200085d0  08008190  000285d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002362d  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040cb  00000000  00000000  000436dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c10  00000000  00000000  000477a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a88  00000000  00000000  000493b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000040f1  00000000  00000000  0004ae40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d543  00000000  00000000  0004ef31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d89e4  00000000  00000000  0006c474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00144e58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ae4  00000000  00000000  00144eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007f5c 	.word	0x08007f5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08007f5c 	.word	0x08007f5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f000 fe19 	bl	80011b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f86e 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f000 f9e8 	bl	8000958 <MX_GPIO_Init>
  MX_DMA_Init();
 8000588:	f000 f9c0 	bl	800090c <MX_DMA_Init>
  MX_I2C1_Init();
 800058c:	f000 f912 	bl	80007b4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000590:	f000 f98c 	bl	80008ac <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000594:	f000 f8d8 	bl	8000748 <MX_CAN1_Init>
  MX_I2C3_Init();
 8000598:	f000 f94a 	bl	8000830 <MX_I2C3_Init>
  {

  Error_Handler();
  }
*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 800059c:	4822      	ldr	r0, [pc, #136]	; (8000628 <main+0xb0>)
 800059e:	f000 ff3c 	bl	800141a <HAL_CAN_Start>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <main+0x34>
  {
  /* Start Error */
  Error_Handler();
 80005a8:	f000 fb22 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 80005ac:	2103      	movs	r1, #3
 80005ae:	481e      	ldr	r0, [pc, #120]	; (8000628 <main+0xb0>)
 80005b0:	f001 f988 	bl	80018c4 <HAL_CAN_ActivateNotification>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <main+0x46>
  {
  /* Notification Error */
  Error_Handler();
 80005ba:	f000 fb19 	bl	8000bf0 <Error_Handler>
  }
  TxHeader.StdId = 0x321; //07
 80005be:	4b1b      	ldr	r3, [pc, #108]	; (800062c <main+0xb4>)
 80005c0:	f240 3221 	movw	r2, #801	; 0x321
 80005c4:	601a      	str	r2, [r3, #0]
  //TxHeader.ExtId = 0x01; //delete
  TxHeader.RTR = CAN_RTR_DATA;
 80005c6:	4b19      	ldr	r3, [pc, #100]	; (800062c <main+0xb4>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 80005cc:	4b17      	ldr	r3, [pc, #92]	; (800062c <main+0xb4>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <main+0xb4>)
 80005d4:	2208      	movs	r2, #8
 80005d6:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <main+0xb4>)
 80005da:	2200      	movs	r2, #0
 80005dc:	751a      	strb	r2, [r3, #20]


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005de:	f004 fc01 	bl	8004de4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005e2:	4a13      	ldr	r2, [pc, #76]	; (8000630 <main+0xb8>)
 80005e4:	2100      	movs	r1, #0
 80005e6:	4813      	ldr	r0, [pc, #76]	; (8000634 <main+0xbc>)
 80005e8:	f004 fc46 	bl	8004e78 <osThreadNew>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4a12      	ldr	r2, [pc, #72]	; (8000638 <main+0xc0>)
 80005f0:	6013      	str	r3, [r2, #0]

  /* creation of readTempTask */
  readTempTaskHandle = osThreadNew(StartReadTempTask, NULL, &readTempTask_attributes);
 80005f2:	4a12      	ldr	r2, [pc, #72]	; (800063c <main+0xc4>)
 80005f4:	2100      	movs	r1, #0
 80005f6:	4812      	ldr	r0, [pc, #72]	; (8000640 <main+0xc8>)
 80005f8:	f004 fc3e 	bl	8004e78 <osThreadNew>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a11      	ldr	r2, [pc, #68]	; (8000644 <main+0xcc>)
 8000600:	6013      	str	r3, [r2, #0]

  /* creation of readLightTask */
  readLightTaskHandle = osThreadNew(StartReadLightTask, NULL, &readLightTask_attributes);
 8000602:	4a11      	ldr	r2, [pc, #68]	; (8000648 <main+0xd0>)
 8000604:	2100      	movs	r1, #0
 8000606:	4811      	ldr	r0, [pc, #68]	; (800064c <main+0xd4>)
 8000608:	f004 fc36 	bl	8004e78 <osThreadNew>
 800060c:	4603      	mov	r3, r0
 800060e:	4a10      	ldr	r2, [pc, #64]	; (8000650 <main+0xd8>)
 8000610:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  comUsartTaskHandle = osThreadNew(ComUsartTask, NULL, &comUsartTask_attributes);
 8000612:	4a10      	ldr	r2, [pc, #64]	; (8000654 <main+0xdc>)
 8000614:	2100      	movs	r1, #0
 8000616:	4810      	ldr	r0, [pc, #64]	; (8000658 <main+0xe0>)
 8000618:	f004 fc2e 	bl	8004e78 <osThreadNew>
 800061c:	4603      	mov	r3, r0
 800061e:	4a0f      	ldr	r2, [pc, #60]	; (800065c <main+0xe4>)
 8000620:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000622:	f004 fc03 	bl	8004e2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000626:	e7fe      	b.n	8000626 <main+0xae>
 8000628:	200084d0 	.word	0x200084d0
 800062c:	200084f8 	.word	0x200084f8
 8000630:	08007ff4 	.word	0x08007ff4
 8000634:	08000b99 	.word	0x08000b99
 8000638:	20008304 	.word	0x20008304
 800063c:	08008018 	.word	0x08008018
 8000640:	08000bad 	.word	0x08000bad
 8000644:	200083e8 	.word	0x200083e8
 8000648:	0800803c 	.word	0x0800803c
 800064c:	08000bbd 	.word	0x08000bbd
 8000650:	2000843c 	.word	0x2000843c
 8000654:	08008060 	.word	0x08008060
 8000658:	08000af9 	.word	0x08000af9
 800065c:	20008510 	.word	0x20008510

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b0ac      	sub	sp, #176	; 0xb0
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800066a:	2244      	movs	r2, #68	; 0x44
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f007 f84c 	bl	800770c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2254      	movs	r2, #84	; 0x54
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f007 f83e 	bl	800770c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000690:	f002 f90a 	bl	80028a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000694:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <SystemClock_Config+0xe4>)
 8000696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800069a:	4a2a      	ldr	r2, [pc, #168]	; (8000744 <SystemClock_Config+0xe4>)
 800069c:	f023 0318 	bic.w	r3, r3, #24
 80006a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006a4:	2314      	movs	r3, #20
 80006a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006b8:	2360      	movs	r3, #96	; 0x60
 80006ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006be:	2300      	movs	r3, #0
 80006c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006c8:	4618      	mov	r0, r3
 80006ca:	f002 f961 	bl	8002990 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80006d4:	f000 fa8c 	bl	8000bf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006dc:	2300      	movs	r3, #0
 80006de:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 fd6c 	bl	80031d0 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006fe:	f000 fa77 	bl	8000bf0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000702:	f44f 73a1 	mov.w	r3, #322	; 0x142
 8000706:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000708:	2304      	movs	r3, #4
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800070c:	2300      	movs	r3, #0
 800070e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000710:	2300      	movs	r3, #0
 8000712:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4618      	mov	r0, r3
 8000718:	f002 ff90 	bl	800363c <HAL_RCCEx_PeriphCLKConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000722:	f000 fa65 	bl	8000bf0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000726:	f44f 7000 	mov.w	r0, #512	; 0x200
 800072a:	f002 f8db 	bl	80028e4 <HAL_PWREx_ControlVoltageScaling>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000734:	f000 fa5c 	bl	8000bf0 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000738:	f003 f974 	bl	8003a24 <HAL_RCCEx_EnableMSIPLLMode>
}
 800073c:	bf00      	nop
 800073e:	37b0      	adds	r7, #176	; 0xb0
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40021000 	.word	0x40021000

08000748 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <MX_CAN1_Init+0x64>)
 800074e:	4a18      	ldr	r2, [pc, #96]	; (80007b0 <MX_CAN1_Init+0x68>)
 8000750:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_CAN1_Init+0x64>)
 8000754:	2201      	movs	r2, #1
 8000756:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_CAN1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_CAN1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_CAN1_Init+0x64>)
 8000766:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800076a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_CAN1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_CAN1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_CAN1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_CAN1_Init+0x64>)
 8000780:	2200      	movs	r2, #0
 8000782:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_CAN1_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_CAN1_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_CAN1_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_CAN1_Init+0x64>)
 8000798:	f000 fd44 	bl	8001224 <HAL_CAN_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80007a2:	f000 fa25 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200084d0 	.word	0x200084d0
 80007b0:	40006400 	.word	0x40006400

080007b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_I2C1_Init+0x74>)
 80007ba:	4a1c      	ldr	r2, [pc, #112]	; (800082c <MX_I2C1_Init+0x78>)
 80007bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_I2C1_Init+0x74>)
 80007c0:	f640 6214 	movw	r2, #3604	; 0xe14
 80007c4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_I2C1_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_I2C1_Init+0x74>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_I2C1_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_I2C1_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_I2C1_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_I2C1_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_I2C1_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f0:	480d      	ldr	r0, [pc, #52]	; (8000828 <MX_I2C1_Init+0x74>)
 80007f2:	f001 ff33 	bl	800265c <HAL_I2C_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007fc:	f000 f9f8 	bl	8000bf0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000800:	2100      	movs	r1, #0
 8000802:	4809      	ldr	r0, [pc, #36]	; (8000828 <MX_I2C1_Init+0x74>)
 8000804:	f001 ffb9 	bl	800277a <HAL_I2CEx_ConfigAnalogFilter>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800080e:	f000 f9ef 	bl	8000bf0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000812:	2100      	movs	r1, #0
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_I2C1_Init+0x74>)
 8000816:	f001 fffb 	bl	8002810 <HAL_I2CEx_ConfigDigitalFilter>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000820:	f000 f9e6 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	2000839c 	.word	0x2000839c
 800082c:	40005400 	.word	0x40005400

08000830 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000834:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <MX_I2C3_Init+0x74>)
 8000836:	4a1c      	ldr	r2, [pc, #112]	; (80008a8 <MX_I2C3_Init+0x78>)
 8000838:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 800083a:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <MX_I2C3_Init+0x74>)
 800083c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000840:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000842:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <MX_I2C3_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000848:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_I2C3_Init+0x74>)
 800084a:	2201      	movs	r2, #1
 800084c:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <MX_I2C3_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <MX_I2C3_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_I2C3_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000860:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <MX_I2C3_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_I2C3_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <MX_I2C3_Init+0x74>)
 800086e:	f001 fef5 	bl	800265c <HAL_I2C_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000878:	f000 f9ba 	bl	8000bf0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800087c:	2100      	movs	r1, #0
 800087e:	4809      	ldr	r0, [pc, #36]	; (80008a4 <MX_I2C3_Init+0x74>)
 8000880:	f001 ff7b 	bl	800277a <HAL_I2CEx_ConfigAnalogFilter>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800088a:	f000 f9b1 	bl	8000bf0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800088e:	2100      	movs	r1, #0
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_I2C3_Init+0x74>)
 8000892:	f001 ffbd 	bl	8002810 <HAL_I2CEx_ConfigDigitalFilter>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800089c:	f000 f9a8 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20008350 	.word	0x20008350
 80008a8:	40005c00 	.word	0x40005c00

080008ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008b2:	4a15      	ldr	r2, [pc, #84]	; (8000908 <MX_USART2_UART_Init+0x5c>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008f0:	f003 fc1a 	bl	8004128 <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008fa:	f000 f979 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	2000844c 	.word	0x2000844c
 8000908:	40004400 	.word	0x40004400

0800090c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <MX_DMA_Init+0x48>)
 8000914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000916:	4a0f      	ldr	r2, [pc, #60]	; (8000954 <MX_DMA_Init+0x48>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6493      	str	r3, [r2, #72]	; 0x48
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <MX_DMA_Init+0x48>)
 8000920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2105      	movs	r1, #5
 800092e:	2010      	movs	r0, #16
 8000930:	f001 fad6 	bl	8001ee0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000934:	2010      	movs	r0, #16
 8000936:	f001 faef 	bl	8001f18 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2105      	movs	r1, #5
 800093e:	2011      	movs	r0, #17
 8000940:	f001 face 	bl	8001ee0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000944:	2011      	movs	r0, #17
 8000946:	f001 fae7 	bl	8001f18 <HAL_NVIC_EnableIRQ>

}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40021000 	.word	0x40021000

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <MX_GPIO_Init+0x8c>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	4a1c      	ldr	r2, [pc, #112]	; (80009e4 <MX_GPIO_Init+0x8c>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <MX_GPIO_Init+0x8c>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <MX_GPIO_Init+0x8c>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	4a16      	ldr	r2, [pc, #88]	; (80009e4 <MX_GPIO_Init+0x8c>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_GPIO_Init+0x8c>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_GPIO_Init+0x8c>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	4a10      	ldr	r2, [pc, #64]	; (80009e4 <MX_GPIO_Init+0x8c>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_GPIO_Init+0x8c>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2108      	movs	r1, #8
 80009ba:	480b      	ldr	r0, [pc, #44]	; (80009e8 <MX_GPIO_Init+0x90>)
 80009bc:	f001 fe1c 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009c0:	2308      	movs	r3, #8
 80009c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	4619      	mov	r1, r3
 80009d6:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_GPIO_Init+0x90>)
 80009d8:	f001 fca4 	bl	8002324 <HAL_GPIO_Init>

}
 80009dc:	bf00      	nop
 80009de:	3720      	adds	r7, #32
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40021000 	.word	0x40021000
 80009e8:	48000400 	.word	0x48000400

080009ec <scenario4>:
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
		osDelay(100);
	}
}

void scenario4(){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b090      	sub	sp, #64	; 0x40
 80009f0:	af00      	add	r7, sp, #0

	uint8_t aData[6]={'A','C','G','U','Q','D'};
 80009f2:	4a2e      	ldr	r2, [pc, #184]	; (8000aac <scenario4+0xc0>)
 80009f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009fc:	6018      	str	r0, [r3, #0]
 80009fe:	3304      	adds	r3, #4
 8000a00:	8019      	strh	r1, [r3, #0]
	uint32_t pTxMailbox;
	char msg[50];

	sprintf(msg,"Init\r\n");
 8000a02:	463b      	mov	r3, r7
 8000a04:	492a      	ldr	r1, [pc, #168]	; (8000ab0 <scenario4+0xc4>)
 8000a06:	4618      	mov	r0, r3
 8000a08:	f006 fe88 	bl	800771c <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fbde 	bl	80001d0 <strlen>
 8000a14:	4603      	mov	r3, r0
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	4639      	mov	r1, r7
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1e:	4825      	ldr	r0, [pc, #148]	; (8000ab4 <scenario4+0xc8>)
 8000a20:	f003 fbd0 	bl	80041c4 <HAL_UART_Transmit>
	HAL_CAN_Start(&hcan1);
 8000a24:	4824      	ldr	r0, [pc, #144]	; (8000ab8 <scenario4+0xcc>)
 8000a26:	f000 fcf8 	bl	800141a <HAL_CAN_Start>
	TxData[0]=1;
 8000a2a:	4b24      	ldr	r3, [pc, #144]	; (8000abc <scenario4+0xd0>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	701a      	strb	r2, [r3, #0]

	for(;;){


		if(HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox)!= HAL_OK){
 8000a30:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <scenario4+0xd4>)
 8000a32:	4a22      	ldr	r2, [pc, #136]	; (8000abc <scenario4+0xd0>)
 8000a34:	4923      	ldr	r1, [pc, #140]	; (8000ac4 <scenario4+0xd8>)
 8000a36:	4820      	ldr	r0, [pc, #128]	; (8000ab8 <scenario4+0xcc>)
 8000a38:	f000 fd33 	bl	80014a2 <HAL_CAN_AddTxMessage>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d010      	beq.n	8000a64 <scenario4+0x78>
			sprintf(msg,"HAL NOK\r\n");
 8000a42:	463b      	mov	r3, r7
 8000a44:	4920      	ldr	r1, [pc, #128]	; (8000ac8 <scenario4+0xdc>)
 8000a46:	4618      	mov	r0, r3
 8000a48:	f006 fe68 	bl	800771c <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fbbe 	bl	80001d0 <strlen>
 8000a54:	4603      	mov	r3, r0
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	4639      	mov	r1, r7
 8000a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5e:	4815      	ldr	r0, [pc, #84]	; (8000ab4 <scenario4+0xc8>)
 8000a60:	f003 fbb0 	bl	80041c4 <HAL_UART_Transmit>
		}

		while(HAL_CAN_IsTxMessagePending(&hcan1,pTxMailbox));
 8000a64:	bf00      	nop
 8000a66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000a68:	4813      	ldr	r0, [pc, #76]	; (8000ab8 <scenario4+0xcc>)
 8000a6a:	f000 fdf5 	bl	8001658 <HAL_CAN_IsTxMessagePending>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d1f8      	bne.n	8000a66 <scenario4+0x7a>
		TxData[0]+=1;
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <scenario4+0xd0>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <scenario4+0xd0>)
 8000a7e:	701a      	strb	r2, [r3, #0]

		sprintf(msg,"Transmitted\r\n");
 8000a80:	463b      	mov	r3, r7
 8000a82:	4912      	ldr	r1, [pc, #72]	; (8000acc <scenario4+0xe0>)
 8000a84:	4618      	mov	r0, r3
 8000a86:	f006 fe49 	bl	800771c <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fb9f 	bl	80001d0 <strlen>
 8000a92:	4603      	mov	r3, r0
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	4639      	mov	r1, r7
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9c:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <scenario4+0xc8>)
 8000a9e:	f003 fb91 	bl	80041c4 <HAL_UART_Transmit>
		osDelay(4000);
 8000aa2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000aa6:	f004 fa79 	bl	8004f9c <osDelay>
		if(HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox)!= HAL_OK){
 8000aaa:	e7c1      	b.n	8000a30 <scenario4+0x44>
 8000aac:	08007fd4 	.word	0x08007fd4
 8000ab0:	08007fb0 	.word	0x08007fb0
 8000ab4:	2000844c 	.word	0x2000844c
 8000ab8:	200084d0 	.word	0x200084d0
 8000abc:	20008434 	.word	0x20008434
 8000ac0:	20008440 	.word	0x20008440
 8000ac4:	200084f8 	.word	0x200084f8
 8000ac8:	08007fb8 	.word	0x08007fb8
 8000acc:	08007fc4 	.word	0x08007fc4

08000ad0 <HAL_CAN_RxFifo0MsgPendingCallback>:

}
*/

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8000ada:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8000adc:	2100      	movs	r1, #0
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8000ae0:	f000 fdde 	bl	80016a0 <HAL_CAN_GetRxMessage>

}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20008444 	.word	0x20008444
 8000af0:	20008514 	.word	0x20008514
 8000af4:	200084d0 	.word	0x200084d0

08000af8 <ComUsartTask>:
	osDelay(100);
	}
	*/


void ComUsartTask(void *argument){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	uint8_t rxBuffer[8];
	for(;;)
	{
		while (HAL_UART_Receive_DMA(&huart2, rxBuffer, sizeof(rxBuffer)) != HAL_OK)
 8000b00:	e006      	b.n	8000b10 <ComUsartTask+0x18>
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000b02:	2108      	movs	r1, #8
 8000b04:	481f      	ldr	r0, [pc, #124]	; (8000b84 <ComUsartTask+0x8c>)
 8000b06:	f001 fd8f 	bl	8002628 <HAL_GPIO_TogglePin>
			osDelay(5);
 8000b0a:	2005      	movs	r0, #5
 8000b0c:	f004 fa46 	bl	8004f9c <osDelay>
		while (HAL_UART_Receive_DMA(&huart2, rxBuffer, sizeof(rxBuffer)) != HAL_OK)
 8000b10:	f107 0308 	add.w	r3, r7, #8
 8000b14:	2208      	movs	r2, #8
 8000b16:	4619      	mov	r1, r3
 8000b18:	481b      	ldr	r0, [pc, #108]	; (8000b88 <ComUsartTask+0x90>)
 8000b1a:	f003 fbe7 	bl	80042ec <HAL_UART_Receive_DMA>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1ee      	bne.n	8000b02 <ComUsartTask+0xa>
		}
		osDelay(5);
 8000b24:	2005      	movs	r0, #5
 8000b26:	f004 fa39 	bl	8004f9c <osDelay>
		if(rxBuffer[0]==0x4D){
 8000b2a:	7a3b      	ldrb	r3, [r7, #8]
 8000b2c:	2b4d      	cmp	r3, #77	; 0x4d
 8000b2e:	d112      	bne.n	8000b56 <ComUsartTask+0x5e>
			HAL_UART_Transmit(&huart2,&rxBuffer[1], 1,500);
 8000b30:	f107 0308 	add.w	r3, r7, #8
 8000b34:	1c59      	adds	r1, r3, #1
 8000b36:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	4812      	ldr	r0, [pc, #72]	; (8000b88 <ComUsartTask+0x90>)
 8000b3e:	f003 fb41 	bl	80041c4 <HAL_UART_Transmit>
			sharedvar = 16;
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <ComUsartTask+0x94>)
 8000b44:	2210      	movs	r2, #16
 8000b46:	801a      	strh	r2, [r3, #0]
			sharedchannel = 0x9395;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <ComUsartTask+0x98>)
 8000b4a:	f249 3295 	movw	r2, #37781	; 0x9395
 8000b4e:	801a      	strh	r2, [r3, #0]
			shareddelay = 5;
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <ComUsartTask+0x9c>)
 8000b52:	2205      	movs	r2, #5
 8000b54:	801a      	strh	r2, [r3, #0]
			//sharedvar = (uint16_t) atoi(rxBuffer[5]);
		}
		if(rxBuffer[0]==0x44){
 8000b56:	7a3b      	ldrb	r3, [r7, #8]
 8000b58:	2b44      	cmp	r3, #68	; 0x44
 8000b5a:	d1d9      	bne.n	8000b10 <ComUsartTask+0x18>
			HAL_UART_Transmit(&huart2,&rxBuffer[1], 1,500);
 8000b5c:	f107 0308 	add.w	r3, r7, #8
 8000b60:	1c59      	adds	r1, r3, #1
 8000b62:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b66:	2201      	movs	r2, #1
 8000b68:	4807      	ldr	r0, [pc, #28]	; (8000b88 <ComUsartTask+0x90>)
 8000b6a:	f003 fb2b 	bl	80041c4 <HAL_UART_Transmit>
			sharedvar = 16;
 8000b6e:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <ComUsartTask+0x94>)
 8000b70:	2210      	movs	r2, #16
 8000b72:	801a      	strh	r2, [r3, #0]
			sharedchannel = 0x0F05;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <ComUsartTask+0x98>)
 8000b76:	f640 7205 	movw	r2, #3845	; 0xf05
 8000b7a:	801a      	strh	r2, [r3, #0]
			shareddelay = 1;
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <ComUsartTask+0x9c>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	801a      	strh	r2, [r3, #0]
		while (HAL_UART_Receive_DMA(&huart2, rxBuffer, sizeof(rxBuffer)) != HAL_OK)
 8000b82:	e7c5      	b.n	8000b10 <ComUsartTask+0x18>
 8000b84:	48000400 	.word	0x48000400
 8000b88:	2000844c 	.word	0x2000844c
 8000b8c:	20000000 	.word	0x20000000
 8000b90:	20000002 	.word	0x20000002
 8000b94:	20000004 	.word	0x20000004

08000b98 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//scenario1();
	scenario4();
 8000ba0:	f7ff ff24 	bl	80009ec <scenario4>
  /* USER CODE END 5 */
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <StartReadTempTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadTempTask */
void StartReadTempTask(void *argument)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadTempTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f004 f9f1 	bl	8004f9c <osDelay>
 8000bba:	e7fb      	b.n	8000bb4 <StartReadTempTask+0x8>

08000bbc <StartReadLightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadLightTask */
void StartReadLightTask(void *argument)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadLightTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f004 f9e9 	bl	8004f9c <osDelay>
 8000bca:	e7fb      	b.n	8000bc4 <StartReadLightTask+0x8>

08000bcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d101      	bne.n	8000be2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bde:	f000 fb01 	bl	80011e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40001000 	.word	0x40001000

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <Error_Handler+0x8>
	...

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c06:	4a10      	ldr	r2, [pc, #64]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c24:	6593      	str	r3, [r2, #88]	; 0x58
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	210f      	movs	r1, #15
 8000c36:	f06f 0001 	mvn.w	r0, #1
 8000c3a:	f001 f951 	bl	8001ee0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000

08000c4c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a20      	ldr	r2, [pc, #128]	; (8000cec <HAL_CAN_MspInit+0xa0>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d139      	bne.n	8000ce2 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c6e:	4b20      	ldr	r3, [pc, #128]	; (8000cf0 <HAL_CAN_MspInit+0xa4>)
 8000c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c72:	4a1f      	ldr	r2, [pc, #124]	; (8000cf0 <HAL_CAN_MspInit+0xa4>)
 8000c74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c78:	6593      	str	r3, [r2, #88]	; 0x58
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <HAL_CAN_MspInit+0xa4>)
 8000c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <HAL_CAN_MspInit+0xa4>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8a:	4a19      	ldr	r2, [pc, #100]	; (8000cf0 <HAL_CAN_MspInit+0xa4>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <HAL_CAN_MspInit+0xa4>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000cb0:	2309      	movs	r3, #9
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cbe:	f001 fb31 	bl	8002324 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2105      	movs	r1, #5
 8000cc6:	2013      	movs	r0, #19
 8000cc8:	f001 f90a 	bl	8001ee0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000ccc:	2013      	movs	r0, #19
 8000cce:	f001 f923 	bl	8001f18 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2105      	movs	r1, #5
 8000cd6:	2014      	movs	r0, #20
 8000cd8:	f001 f902 	bl	8001ee0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000cdc:	2014      	movs	r0, #20
 8000cde:	f001 f91b 	bl	8001f18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3728      	adds	r7, #40	; 0x28
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40006400 	.word	0x40006400
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08c      	sub	sp, #48	; 0x30
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a3c      	ldr	r2, [pc, #240]	; (8000e04 <HAL_I2C_MspInit+0x110>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d128      	bne.n	8000d68 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	4b3c      	ldr	r3, [pc, #240]	; (8000e08 <HAL_I2C_MspInit+0x114>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1a:	4a3b      	ldr	r2, [pc, #236]	; (8000e08 <HAL_I2C_MspInit+0x114>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d22:	4b39      	ldr	r3, [pc, #228]	; (8000e08 <HAL_I2C_MspInit+0x114>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	61bb      	str	r3, [r7, #24]
 8000d2c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d2e:	23c0      	movs	r3, #192	; 0xc0
 8000d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d32:	2312      	movs	r3, #18
 8000d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d3e:	2304      	movs	r3, #4
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d42:	f107 031c 	add.w	r3, r7, #28
 8000d46:	4619      	mov	r1, r3
 8000d48:	4830      	ldr	r0, [pc, #192]	; (8000e0c <HAL_I2C_MspInit+0x118>)
 8000d4a:	f001 faeb 	bl	8002324 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d4e:	4b2e      	ldr	r3, [pc, #184]	; (8000e08 <HAL_I2C_MspInit+0x114>)
 8000d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d52:	4a2d      	ldr	r2, [pc, #180]	; (8000e08 <HAL_I2C_MspInit+0x114>)
 8000d54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d58:	6593      	str	r3, [r2, #88]	; 0x58
 8000d5a:	4b2b      	ldr	r3, [pc, #172]	; (8000e08 <HAL_I2C_MspInit+0x114>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000d66:	e049      	b.n	8000dfc <HAL_I2C_MspInit+0x108>
  else if(hi2c->Instance==I2C3)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a28      	ldr	r2, [pc, #160]	; (8000e10 <HAL_I2C_MspInit+0x11c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d144      	bne.n	8000dfc <HAL_I2C_MspInit+0x108>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	4b25      	ldr	r3, [pc, #148]	; (8000e08 <HAL_I2C_MspInit+0x114>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	4a24      	ldr	r2, [pc, #144]	; (8000e08 <HAL_I2C_MspInit+0x114>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7e:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <HAL_I2C_MspInit+0x114>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8a:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <HAL_I2C_MspInit+0x114>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	4a1e      	ldr	r2, [pc, #120]	; (8000e08 <HAL_I2C_MspInit+0x114>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d96:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <HAL_I2C_MspInit+0x114>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000da2:	2380      	movs	r3, #128	; 0x80
 8000da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da6:	2312      	movs	r3, #18
 8000da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000daa:	2301      	movs	r3, #1
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dae:	2303      	movs	r3, #3
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000db2:	2304      	movs	r3, #4
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc0:	f001 fab0 	bl	8002324 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dc4:	2310      	movs	r3, #16
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc8:	2312      	movs	r3, #18
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480b      	ldr	r0, [pc, #44]	; (8000e0c <HAL_I2C_MspInit+0x118>)
 8000de0:	f001 faa0 	bl	8002324 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <HAL_I2C_MspInit+0x114>)
 8000de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de8:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <HAL_I2C_MspInit+0x114>)
 8000dea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000dee:	6593      	str	r3, [r2, #88]	; 0x58
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_I2C_MspInit+0x114>)
 8000df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
}
 8000dfc:	bf00      	nop
 8000dfe:	3730      	adds	r7, #48	; 0x30
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40005400 	.word	0x40005400
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	48000400 	.word	0x48000400
 8000e10:	40005c00 	.word	0x40005c00

08000e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	; 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a40      	ldr	r2, [pc, #256]	; (8000f34 <HAL_UART_MspInit+0x120>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d17a      	bne.n	8000f2c <HAL_UART_MspInit+0x118>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e36:	4b40      	ldr	r3, [pc, #256]	; (8000f38 <HAL_UART_MspInit+0x124>)
 8000e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3a:	4a3f      	ldr	r2, [pc, #252]	; (8000f38 <HAL_UART_MspInit+0x124>)
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e40:	6593      	str	r3, [r2, #88]	; 0x58
 8000e42:	4b3d      	ldr	r3, [pc, #244]	; (8000f38 <HAL_UART_MspInit+0x124>)
 8000e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	4b3a      	ldr	r3, [pc, #232]	; (8000f38 <HAL_UART_MspInit+0x124>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e52:	4a39      	ldr	r2, [pc, #228]	; (8000f38 <HAL_UART_MspInit+0x124>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5a:	4b37      	ldr	r3, [pc, #220]	; (8000f38 <HAL_UART_MspInit+0x124>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e66:	230c      	movs	r3, #12
 8000e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e76:	2307      	movs	r3, #7
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e84:	f001 fa4e 	bl	8002324 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000e88:	4b2c      	ldr	r3, [pc, #176]	; (8000f3c <HAL_UART_MspInit+0x128>)
 8000e8a:	4a2d      	ldr	r2, [pc, #180]	; (8000f40 <HAL_UART_MspInit+0x12c>)
 8000e8c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000e8e:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <HAL_UART_MspInit+0x128>)
 8000e90:	2202      	movs	r2, #2
 8000e92:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e94:	4b29      	ldr	r3, [pc, #164]	; (8000f3c <HAL_UART_MspInit+0x128>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e9a:	4b28      	ldr	r3, [pc, #160]	; (8000f3c <HAL_UART_MspInit+0x128>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ea0:	4b26      	ldr	r3, [pc, #152]	; (8000f3c <HAL_UART_MspInit+0x128>)
 8000ea2:	2280      	movs	r2, #128	; 0x80
 8000ea4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ea6:	4b25      	ldr	r3, [pc, #148]	; (8000f3c <HAL_UART_MspInit+0x128>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eac:	4b23      	ldr	r3, [pc, #140]	; (8000f3c <HAL_UART_MspInit+0x128>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000eb2:	4b22      	ldr	r3, [pc, #136]	; (8000f3c <HAL_UART_MspInit+0x128>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000eb8:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <HAL_UART_MspInit+0x128>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ebe:	481f      	ldr	r0, [pc, #124]	; (8000f3c <HAL_UART_MspInit+0x128>)
 8000ec0:	f001 f838 	bl	8001f34 <HAL_DMA_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 8000eca:	f7ff fe91 	bl	8000bf0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a1a      	ldr	r2, [pc, #104]	; (8000f3c <HAL_UART_MspInit+0x128>)
 8000ed2:	671a      	str	r2, [r3, #112]	; 0x70
 8000ed4:	4a19      	ldr	r2, [pc, #100]	; (8000f3c <HAL_UART_MspInit+0x128>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <HAL_UART_MspInit+0x130>)
 8000edc:	4a1a      	ldr	r2, [pc, #104]	; (8000f48 <HAL_UART_MspInit+0x134>)
 8000ede:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000ee0:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <HAL_UART_MspInit+0x130>)
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <HAL_UART_MspInit+0x130>)
 8000ee8:	2210      	movs	r2, #16
 8000eea:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eec:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <HAL_UART_MspInit+0x130>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <HAL_UART_MspInit+0x130>)
 8000ef4:	2280      	movs	r2, #128	; 0x80
 8000ef6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_UART_MspInit+0x130>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <HAL_UART_MspInit+0x130>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <HAL_UART_MspInit+0x130>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_UART_MspInit+0x130>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000f10:	480c      	ldr	r0, [pc, #48]	; (8000f44 <HAL_UART_MspInit+0x130>)
 8000f12:	f001 f80f 	bl	8001f34 <HAL_DMA_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8000f1c:	f7ff fe68 	bl	8000bf0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a08      	ldr	r2, [pc, #32]	; (8000f44 <HAL_UART_MspInit+0x130>)
 8000f24:	66da      	str	r2, [r3, #108]	; 0x6c
 8000f26:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <HAL_UART_MspInit+0x130>)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f2c:	bf00      	nop
 8000f2e:	3728      	adds	r7, #40	; 0x28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40004400 	.word	0x40004400
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	20008308 	.word	0x20008308
 8000f40:	4002006c 	.word	0x4002006c
 8000f44:	200083ec 	.word	0x200083ec
 8000f48:	40020080 	.word	0x40020080

08000f4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08c      	sub	sp, #48	; 0x30
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	2036      	movs	r0, #54	; 0x36
 8000f62:	f000 ffbd 	bl	8001ee0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f66:	2036      	movs	r0, #54	; 0x36
 8000f68:	f000 ffd6 	bl	8001f18 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f6c:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <HAL_InitTick+0x9c>)
 8000f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f70:	4a1d      	ldr	r2, [pc, #116]	; (8000fe8 <HAL_InitTick+0x9c>)
 8000f72:	f043 0310 	orr.w	r3, r3, #16
 8000f76:	6593      	str	r3, [r2, #88]	; 0x58
 8000f78:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <HAL_InitTick+0x9c>)
 8000f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7c:	f003 0310 	and.w	r3, r3, #16
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f84:	f107 0210 	add.w	r2, r7, #16
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f002 fac2 	bl	8003518 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f94:	f002 fa94 	bl	80034c0 <HAL_RCC_GetPCLK1Freq>
 8000f98:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f9c:	4a13      	ldr	r2, [pc, #76]	; (8000fec <HAL_InitTick+0xa0>)
 8000f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa2:	0c9b      	lsrs	r3, r3, #18
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <HAL_InitTick+0xa4>)
 8000faa:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <HAL_InitTick+0xa8>)
 8000fac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <HAL_InitTick+0xa4>)
 8000fb0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fb4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000fb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <HAL_InitTick+0xa4>)
 8000fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <HAL_InitTick+0xa4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <HAL_InitTick+0xa4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000fc8:	4809      	ldr	r0, [pc, #36]	; (8000ff0 <HAL_InitTick+0xa4>)
 8000fca:	f002 fe2d 	bl	8003c28 <HAL_TIM_Base_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d104      	bne.n	8000fde <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000fd4:	4806      	ldr	r0, [pc, #24]	; (8000ff0 <HAL_InitTick+0xa4>)
 8000fd6:	f002 fe89 	bl	8003cec <HAL_TIM_Base_Start_IT>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	e000      	b.n	8000fe0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3730      	adds	r7, #48	; 0x30
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	431bde83 	.word	0x431bde83
 8000ff0:	20008530 	.word	0x20008530
 8000ff4:	40001000 	.word	0x40001000

08000ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <NMI_Handler+0x4>

08000ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <HardFault_Handler+0x4>

08001004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <MemManage_Handler+0x4>

0800100a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <BusFault_Handler+0x4>

08001010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <UsageFault_Handler+0x4>

08001016 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <DMA1_Channel6_IRQHandler+0x10>)
 800102a:	f001 f89b 	bl	8002164 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20008308 	.word	0x20008308

08001038 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <DMA1_Channel7_IRQHandler+0x10>)
 800103e:	f001 f891 	bl	8002164 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200083ec 	.word	0x200083ec

0800104c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <CAN1_TX_IRQHandler+0x10>)
 8001052:	f000 fc5d 	bl	8001910 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200084d0 	.word	0x200084d0

08001060 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <CAN1_RX0_IRQHandler+0x10>)
 8001066:	f000 fc53 	bl	8001910 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200084d0 	.word	0x200084d0

08001074 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <TIM6_DAC_IRQHandler+0x10>)
 800107a:	f002 fe8b 	bl	8003d94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20008530 	.word	0x20008530

08001088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001090:	4a14      	ldr	r2, [pc, #80]	; (80010e4 <_sbrk+0x5c>)
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <_sbrk+0x60>)
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <_sbrk+0x64>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d102      	bne.n	80010aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <_sbrk+0x64>)
 80010a6:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <_sbrk+0x68>)
 80010a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <_sbrk+0x64>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d207      	bcs.n	80010c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b8:	f006 faf0 	bl	800769c <__errno>
 80010bc:	4603      	mov	r3, r0
 80010be:	220c      	movs	r2, #12
 80010c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
 80010c6:	e009      	b.n	80010dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ce:	4b07      	ldr	r3, [pc, #28]	; (80010ec <_sbrk+0x64>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <_sbrk+0x64>)
 80010d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010da:	68fb      	ldr	r3, [r7, #12]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20010000 	.word	0x20010000
 80010e8:	00000400 	.word	0x00000400
 80010ec:	2000009c 	.word	0x2000009c
 80010f0:	200085d0 	.word	0x200085d0

080010f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f8:	4b17      	ldr	r3, [pc, #92]	; (8001158 <SystemInit+0x64>)
 80010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fe:	4a16      	ldr	r2, [pc, #88]	; (8001158 <SystemInit+0x64>)
 8001100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001108:	4b14      	ldr	r3, [pc, #80]	; (800115c <SystemInit+0x68>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a13      	ldr	r2, [pc, #76]	; (800115c <SystemInit+0x68>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <SystemInit+0x68>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <SystemInit+0x68>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a0f      	ldr	r2, [pc, #60]	; (800115c <SystemInit+0x68>)
 8001120:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001124:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001128:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <SystemInit+0x68>)
 800112c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001130:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <SystemInit+0x68>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a09      	ldr	r2, [pc, #36]	; (800115c <SystemInit+0x68>)
 8001138:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800113c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800113e:	4b07      	ldr	r3, [pc, #28]	; (800115c <SystemInit+0x68>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <SystemInit+0x64>)
 8001146:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800114a:	609a      	str	r2, [r3, #8]
#endif
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00
 800115c:	40021000 	.word	0x40021000

08001160 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001160:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001198 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001164:	f7ff ffc6 	bl	80010f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001168:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800116a:	e003      	b.n	8001174 <LoopCopyDataInit>

0800116c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800116e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001170:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001172:	3104      	adds	r1, #4

08001174 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001174:	480a      	ldr	r0, [pc, #40]	; (80011a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001178:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800117a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800117c:	d3f6      	bcc.n	800116c <CopyDataInit>
	ldr	r2, =_sbss
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001180:	e002      	b.n	8001188 <LoopFillZerobss>

08001182 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001182:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001184:	f842 3b04 	str.w	r3, [r2], #4

08001188 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <LoopForever+0x16>)
	cmp	r2, r3
 800118a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800118c:	d3f9      	bcc.n	8001182 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800118e:	f006 fa8b 	bl	80076a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001192:	f7ff f9f1 	bl	8000578 <main>

08001196 <LoopForever>:

LoopForever:
    b LoopForever
 8001196:	e7fe      	b.n	8001196 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001198:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800119c:	08008110 	.word	0x08008110
	ldr	r0, =_sdata
 80011a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80011a4:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 80011a8:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 80011ac:	200085d0 	.word	0x200085d0

080011b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC1_IRQHandler>

080011b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011bc:	2003      	movs	r0, #3
 80011be:	f000 fe84 	bl	8001eca <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011c2:	2000      	movs	r0, #0
 80011c4:	f7ff fec2 	bl	8000f4c <HAL_InitTick>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d002      	beq.n	80011d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	e001      	b.n	80011d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011d4:	f7ff fd12 	bl	8000bfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011d8:	79fb      	ldrb	r3, [r7, #7]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_IncTick+0x20>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_IncTick+0x24>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	4a04      	ldr	r2, [pc, #16]	; (8001208 <HAL_IncTick+0x24>)
 80011f6:	6013      	str	r3, [r2, #0]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000010 	.word	0x20000010
 8001208:	2000857c 	.word	0x2000857c

0800120c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return uwTick;
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <HAL_GetTick+0x14>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	2000857c 	.word	0x2000857c

08001224 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e0ed      	b.n	8001412 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 3020 	ldrb.w	r3, [r3, #32]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d102      	bne.n	8001248 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff fd02 	bl	8000c4c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 0202 	bic.w	r2, r2, #2
 8001256:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001258:	f7ff ffd8 	bl	800120c <HAL_GetTick>
 800125c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800125e:	e012      	b.n	8001286 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001260:	f7ff ffd4 	bl	800120c <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b0a      	cmp	r3, #10
 800126c:	d90b      	bls.n	8001286 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2205      	movs	r2, #5
 800127e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e0c5      	b.n	8001412 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1e5      	bne.n	8001260 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 0201 	orr.w	r2, r2, #1
 80012a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012a4:	f7ff ffb2 	bl	800120c <HAL_GetTick>
 80012a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012aa:	e012      	b.n	80012d2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012ac:	f7ff ffae 	bl	800120c <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b0a      	cmp	r3, #10
 80012b8:	d90b      	bls.n	80012d2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2205      	movs	r2, #5
 80012ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e09f      	b.n	8001412 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0e5      	beq.n	80012ac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	7e1b      	ldrb	r3, [r3, #24]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d108      	bne.n	80012fa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	e007      	b.n	800130a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001308:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	7e5b      	ldrb	r3, [r3, #25]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d108      	bne.n	8001324 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	e007      	b.n	8001334 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001332:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	7e9b      	ldrb	r3, [r3, #26]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d108      	bne.n	800134e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f042 0220 	orr.w	r2, r2, #32
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	e007      	b.n	800135e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 0220 	bic.w	r2, r2, #32
 800135c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7edb      	ldrb	r3, [r3, #27]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d108      	bne.n	8001378 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f022 0210 	bic.w	r2, r2, #16
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	e007      	b.n	8001388 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f042 0210 	orr.w	r2, r2, #16
 8001386:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	7f1b      	ldrb	r3, [r3, #28]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d108      	bne.n	80013a2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 0208 	orr.w	r2, r2, #8
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	e007      	b.n	80013b2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 0208 	bic.w	r2, r2, #8
 80013b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	7f5b      	ldrb	r3, [r3, #29]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d108      	bne.n	80013cc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f042 0204 	orr.w	r2, r2, #4
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	e007      	b.n	80013dc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0204 	bic.w	r2, r2, #4
 80013da:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	431a      	orrs	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	ea42 0103 	orr.w	r1, r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	1e5a      	subs	r2, r3, #1
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b084      	sub	sp, #16
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b01      	cmp	r3, #1
 800142c:	d12e      	bne.n	800148c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2202      	movs	r2, #2
 8001432:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 0201 	bic.w	r2, r2, #1
 8001444:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001446:	f7ff fee1 	bl	800120c <HAL_GetTick>
 800144a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800144c:	e012      	b.n	8001474 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800144e:	f7ff fedd 	bl	800120c <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b0a      	cmp	r3, #10
 800145a:	d90b      	bls.n	8001474 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001460:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2205      	movs	r2, #5
 800146c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e012      	b.n	800149a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1e5      	bne.n	800144e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	e006      	b.n	800149a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001490:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
  }
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b089      	sub	sp, #36	; 0x24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	60f8      	str	r0, [r7, #12]
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80014c0:	7ffb      	ldrb	r3, [r7, #31]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d003      	beq.n	80014ce <HAL_CAN_AddTxMessage+0x2c>
 80014c6:	7ffb      	ldrb	r3, [r7, #31]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	f040 80b8 	bne.w	800163e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d10a      	bne.n	80014ee <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d105      	bne.n	80014ee <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80a0 	beq.w	800162e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	0e1b      	lsrs	r3, r3, #24
 80014f2:	f003 0303 	and.w	r3, r3, #3
 80014f6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d907      	bls.n	800150e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e09e      	b.n	800164c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800150e:	2201      	movs	r2, #1
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	409a      	lsls	r2, r3
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10d      	bne.n	800153c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800152a:	68f9      	ldr	r1, [r7, #12]
 800152c:	6809      	ldr	r1, [r1, #0]
 800152e:	431a      	orrs	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	3318      	adds	r3, #24
 8001534:	011b      	lsls	r3, r3, #4
 8001536:	440b      	add	r3, r1
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	e00f      	b.n	800155c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001546:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800154c:	68f9      	ldr	r1, [r7, #12]
 800154e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001550:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	3318      	adds	r3, #24
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	440b      	add	r3, r1
 800155a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6819      	ldr	r1, [r3, #0]
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	691a      	ldr	r2, [r3, #16]
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	3318      	adds	r3, #24
 8001568:	011b      	lsls	r3, r3, #4
 800156a:	440b      	add	r3, r1
 800156c:	3304      	adds	r3, #4
 800156e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	7d1b      	ldrb	r3, [r3, #20]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d111      	bne.n	800159c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	3318      	adds	r3, #24
 8001580:	011b      	lsls	r3, r3, #4
 8001582:	4413      	add	r3, r2
 8001584:	3304      	adds	r3, #4
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	6811      	ldr	r1, [r2, #0]
 800158c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	3318      	adds	r3, #24
 8001594:	011b      	lsls	r3, r3, #4
 8001596:	440b      	add	r3, r1
 8001598:	3304      	adds	r3, #4
 800159a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3307      	adds	r3, #7
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	061a      	lsls	r2, r3, #24
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3306      	adds	r3, #6
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	041b      	lsls	r3, r3, #16
 80015ac:	431a      	orrs	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3305      	adds	r3, #5
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	4313      	orrs	r3, r2
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	3204      	adds	r2, #4
 80015bc:	7812      	ldrb	r2, [r2, #0]
 80015be:	4610      	mov	r0, r2
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	6811      	ldr	r1, [r2, #0]
 80015c4:	ea43 0200 	orr.w	r2, r3, r0
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	011b      	lsls	r3, r3, #4
 80015cc:	440b      	add	r3, r1
 80015ce:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80015d2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3303      	adds	r3, #3
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	061a      	lsls	r2, r3, #24
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3302      	adds	r3, #2
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	041b      	lsls	r3, r3, #16
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3301      	adds	r3, #1
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	4313      	orrs	r3, r2
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	7812      	ldrb	r2, [r2, #0]
 80015f4:	4610      	mov	r0, r2
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	6811      	ldr	r1, [r2, #0]
 80015fa:	ea43 0200 	orr.w	r2, r3, r0
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	440b      	add	r3, r1
 8001604:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001608:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	3318      	adds	r3, #24
 8001612:	011b      	lsls	r3, r3, #4
 8001614:	4413      	add	r3, r2
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	6811      	ldr	r1, [r2, #0]
 800161c:	f043 0201 	orr.w	r2, r3, #1
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	3318      	adds	r3, #24
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	440b      	add	r3, r1
 8001628:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e00e      	b.n	800164c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e006      	b.n	800164c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
  }
}
 800164c:	4618      	mov	r0, r3
 800164e:	3724      	adds	r7, #36	; 0x24
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3020 	ldrb.w	r3, [r3, #32]
 800166c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800166e:	7afb      	ldrb	r3, [r7, #11]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d002      	beq.n	800167a <HAL_CAN_IsTxMessagePending+0x22>
 8001674:	7afb      	ldrb	r3, [r7, #11]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d10b      	bne.n	8001692 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	069b      	lsls	r3, r3, #26
 8001684:	401a      	ands	r2, r3
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	069b      	lsls	r3, r3, #26
 800168a:	429a      	cmp	r2, r3
 800168c:	d001      	beq.n	8001692 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800168e:	2301      	movs	r3, #1
 8001690:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001692:	68fb      	ldr	r3, [r7, #12]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80016a0:	b480      	push	{r7}
 80016a2:	b087      	sub	sp, #28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
 80016ac:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016b4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80016b6:	7dfb      	ldrb	r3, [r7, #23]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d003      	beq.n	80016c4 <HAL_CAN_GetRxMessage+0x24>
 80016bc:	7dfb      	ldrb	r3, [r7, #23]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	f040 80f3 	bne.w	80018aa <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10e      	bne.n	80016e8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d116      	bne.n	8001706 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e0e7      	b.n	80018b8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d107      	bne.n	8001706 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e0d8      	b.n	80018b8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	331b      	adds	r3, #27
 800170e:	011b      	lsls	r3, r3, #4
 8001710:	4413      	add	r3, r2
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0204 	and.w	r2, r3, #4
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10c      	bne.n	800173e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	331b      	adds	r3, #27
 800172c:	011b      	lsls	r3, r3, #4
 800172e:	4413      	add	r3, r2
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	0d5b      	lsrs	r3, r3, #21
 8001734:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	e00b      	b.n	8001756 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	331b      	adds	r3, #27
 8001746:	011b      	lsls	r3, r3, #4
 8001748:	4413      	add	r3, r2
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	08db      	lsrs	r3, r3, #3
 800174e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	331b      	adds	r3, #27
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	4413      	add	r3, r2
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0202 	and.w	r2, r3, #2
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	331b      	adds	r3, #27
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	4413      	add	r3, r2
 8001778:	3304      	adds	r3, #4
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 020f 	and.w	r2, r3, #15
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	331b      	adds	r3, #27
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	4413      	add	r3, r2
 8001790:	3304      	adds	r3, #4
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	b2da      	uxtb	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	331b      	adds	r3, #27
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	4413      	add	r3, r2
 80017a8:	3304      	adds	r3, #4
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	0c1b      	lsrs	r3, r3, #16
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	4413      	add	r3, r2
 80017be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	011b      	lsls	r3, r3, #4
 80017d2:	4413      	add	r3, r2
 80017d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	0a1a      	lsrs	r2, r3, #8
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	3301      	adds	r3, #1
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	011b      	lsls	r3, r3, #4
 80017ec:	4413      	add	r3, r2
 80017ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	0c1a      	lsrs	r2, r3, #16
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	3302      	adds	r3, #2
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	011b      	lsls	r3, r3, #4
 8001806:	4413      	add	r3, r2
 8001808:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	0e1a      	lsrs	r2, r3, #24
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	3303      	adds	r3, #3
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	011b      	lsls	r3, r3, #4
 8001820:	4413      	add	r3, r2
 8001822:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	3304      	adds	r3, #4
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	011b      	lsls	r3, r3, #4
 8001838:	4413      	add	r3, r2
 800183a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	0a1a      	lsrs	r2, r3, #8
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	3305      	adds	r3, #5
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	4413      	add	r3, r2
 8001854:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	0c1a      	lsrs	r2, r3, #16
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	3306      	adds	r3, #6
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	4413      	add	r3, r2
 800186e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	0e1a      	lsrs	r2, r3, #24
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	3307      	adds	r3, #7
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d108      	bne.n	8001896 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0220 	orr.w	r2, r2, #32
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	e007      	b.n	80018a6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f042 0220 	orr.w	r2, r2, #32
 80018a4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e006      	b.n	80018b8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
  }
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	371c      	adds	r7, #28
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d002      	beq.n	80018e2 <HAL_CAN_ActivateNotification+0x1e>
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d109      	bne.n	80018f6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6959      	ldr	r1, [r3, #20]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e006      	b.n	8001904 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
  }
}
 8001904:	4618      	mov	r0, r3
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001918:	2300      	movs	r3, #0
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d07c      	beq.n	8001a50 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b00      	cmp	r3, #0
 800195e:	d023      	beq.n	80019a8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2201      	movs	r2, #1
 8001966:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f983 	bl	8001c7e <HAL_CAN_TxMailbox0CompleteCallback>
 8001978:	e016      	b.n	80019a8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	d004      	beq.n	800198e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
 800198c:	e00c      	b.n	80019a8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	2b00      	cmp	r3, #0
 8001996:	d004      	beq.n	80019a2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
 80019a0:	e002      	b.n	80019a8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f989 	bl	8001cba <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d024      	beq.n	80019fc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f963 	bl	8001c92 <HAL_CAN_TxMailbox1CompleteCallback>
 80019cc:	e016      	b.n	80019fc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d004      	beq.n	80019e2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
 80019e0:	e00c      	b.n	80019fc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d004      	beq.n	80019f6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
 80019f4:	e002      	b.n	80019fc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f969 	bl	8001cce <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d024      	beq.n	8001a50 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a0e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f943 	bl	8001ca6 <HAL_CAN_TxMailbox2CompleteCallback>
 8001a20:	e016      	b.n	8001a50 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d004      	beq.n	8001a36 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
 8001a34:	e00c      	b.n	8001a50 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d004      	beq.n	8001a4a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
 8001a48:	e002      	b.n	8001a50 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f949 	bl	8001ce2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00c      	beq.n	8001a74 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f003 0310 	and.w	r3, r3, #16
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d007      	beq.n	8001a74 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2210      	movs	r2, #16
 8001a72:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00b      	beq.n	8001a96 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f003 0308 	and.w	r3, r3, #8
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d006      	beq.n	8001a96 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2208      	movs	r2, #8
 8001a8e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f930 	bl	8001cf6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a96:	6a3b      	ldr	r3, [r7, #32]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d009      	beq.n	8001ab4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d002      	beq.n	8001ab4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff f80e 	bl	8000ad0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
 8001ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00c      	beq.n	8001ad8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	f003 0310 	and.w	r3, r3, #16
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d007      	beq.n	8001ad8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2210      	movs	r2, #16
 8001ad6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ad8:	6a3b      	ldr	r3, [r7, #32]
 8001ada:	f003 0320 	and.w	r3, r3, #32
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00b      	beq.n	8001afa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d006      	beq.n	8001afa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2208      	movs	r2, #8
 8001af2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f912 	bl	8001d1e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001afa:	6a3b      	ldr	r3, [r7, #32]
 8001afc:	f003 0310 	and.w	r3, r3, #16
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d009      	beq.n	8001b18 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d002      	beq.n	8001b18 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f8f9 	bl	8001d0a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b18:	6a3b      	ldr	r3, [r7, #32]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00b      	beq.n	8001b3a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	f003 0310 	and.w	r3, r3, #16
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d006      	beq.n	8001b3a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2210      	movs	r2, #16
 8001b32:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f8fc 	bl	8001d32 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00b      	beq.n	8001b5c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d006      	beq.n	8001b5c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2208      	movs	r2, #8
 8001b54:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f8f5 	bl	8001d46 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b5c:	6a3b      	ldr	r3, [r7, #32]
 8001b5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d07b      	beq.n	8001c5e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d072      	beq.n	8001c56 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d008      	beq.n	8001b8c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d008      	beq.n	8001ba8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	f043 0302 	orr.w	r3, r3, #2
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ba8:	6a3b      	ldr	r3, [r7, #32]
 8001baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d008      	beq.n	8001bc4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	f043 0304 	orr.w	r3, r3, #4
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d043      	beq.n	8001c56 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d03e      	beq.n	8001c56 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bde:	2b60      	cmp	r3, #96	; 0x60
 8001be0:	d02b      	beq.n	8001c3a <HAL_CAN_IRQHandler+0x32a>
 8001be2:	2b60      	cmp	r3, #96	; 0x60
 8001be4:	d82e      	bhi.n	8001c44 <HAL_CAN_IRQHandler+0x334>
 8001be6:	2b50      	cmp	r3, #80	; 0x50
 8001be8:	d022      	beq.n	8001c30 <HAL_CAN_IRQHandler+0x320>
 8001bea:	2b50      	cmp	r3, #80	; 0x50
 8001bec:	d82a      	bhi.n	8001c44 <HAL_CAN_IRQHandler+0x334>
 8001bee:	2b40      	cmp	r3, #64	; 0x40
 8001bf0:	d019      	beq.n	8001c26 <HAL_CAN_IRQHandler+0x316>
 8001bf2:	2b40      	cmp	r3, #64	; 0x40
 8001bf4:	d826      	bhi.n	8001c44 <HAL_CAN_IRQHandler+0x334>
 8001bf6:	2b30      	cmp	r3, #48	; 0x30
 8001bf8:	d010      	beq.n	8001c1c <HAL_CAN_IRQHandler+0x30c>
 8001bfa:	2b30      	cmp	r3, #48	; 0x30
 8001bfc:	d822      	bhi.n	8001c44 <HAL_CAN_IRQHandler+0x334>
 8001bfe:	2b10      	cmp	r3, #16
 8001c00:	d002      	beq.n	8001c08 <HAL_CAN_IRQHandler+0x2f8>
 8001c02:	2b20      	cmp	r3, #32
 8001c04:	d005      	beq.n	8001c12 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c06:	e01d      	b.n	8001c44 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	f043 0308 	orr.w	r3, r3, #8
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c10:	e019      	b.n	8001c46 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	f043 0310 	orr.w	r3, r3, #16
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c1a:	e014      	b.n	8001c46 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	f043 0320 	orr.w	r3, r3, #32
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c24:	e00f      	b.n	8001c46 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c2e:	e00a      	b.n	8001c46 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c38:	e005      	b.n	8001c46 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c42:	e000      	b.n	8001c46 <HAL_CAN_IRQHandler+0x336>
            break;
 8001c44:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	699a      	ldr	r2, [r3, #24]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c54:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d008      	beq.n	8001c76 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f872 	bl	8001d5a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c76:	bf00      	nop
 8001c78:	3728      	adds	r7, #40	; 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001da2:	4a04      	ldr	r2, [pc, #16]	; (8001db4 <__NVIC_SetPriorityGrouping+0x44>)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	60d3      	str	r3, [r2, #12]
}
 8001da8:	bf00      	nop
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	0a1b      	lsrs	r3, r3, #8
 8001dc2:	f003 0307 	and.w	r3, r3, #7
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	db0b      	blt.n	8001dfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	f003 021f 	and.w	r2, r3, #31
 8001dec:	4907      	ldr	r1, [pc, #28]	; (8001e0c <__NVIC_EnableIRQ+0x38>)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	095b      	lsrs	r3, r3, #5
 8001df4:	2001      	movs	r0, #1
 8001df6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	e000e100 	.word	0xe000e100

08001e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	6039      	str	r1, [r7, #0]
 8001e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	db0a      	blt.n	8001e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	490c      	ldr	r1, [pc, #48]	; (8001e5c <__NVIC_SetPriority+0x4c>)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	0112      	lsls	r2, r2, #4
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	440b      	add	r3, r1
 8001e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e38:	e00a      	b.n	8001e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4908      	ldr	r1, [pc, #32]	; (8001e60 <__NVIC_SetPriority+0x50>)
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	3b04      	subs	r3, #4
 8001e48:	0112      	lsls	r2, r2, #4
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	761a      	strb	r2, [r3, #24]
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000e100 	.word	0xe000e100
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b089      	sub	sp, #36	; 0x24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f1c3 0307 	rsb	r3, r3, #7
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	bf28      	it	cs
 8001e82:	2304      	movcs	r3, #4
 8001e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	2b06      	cmp	r3, #6
 8001e8c:	d902      	bls.n	8001e94 <NVIC_EncodePriority+0x30>
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3b03      	subs	r3, #3
 8001e92:	e000      	b.n	8001e96 <NVIC_EncodePriority+0x32>
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e98:	f04f 32ff 	mov.w	r2, #4294967295
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43da      	mvns	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eac:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb6:	43d9      	mvns	r1, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ebc:	4313      	orrs	r3, r2
         );
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3724      	adds	r7, #36	; 0x24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff ff4c 	bl	8001d70 <__NVIC_SetPriorityGrouping>
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
 8001eec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef2:	f7ff ff61 	bl	8001db8 <__NVIC_GetPriorityGrouping>
 8001ef6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	68b9      	ldr	r1, [r7, #8]
 8001efc:	6978      	ldr	r0, [r7, #20]
 8001efe:	f7ff ffb1 	bl	8001e64 <NVIC_EncodePriority>
 8001f02:	4602      	mov	r2, r0
 8001f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff ff80 	bl	8001e10 <__NVIC_SetPriority>
}
 8001f10:	bf00      	nop
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff ff54 	bl	8001dd4 <__NVIC_EnableIRQ>
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e098      	b.n	8002078 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4b4d      	ldr	r3, [pc, #308]	; (8002084 <HAL_DMA_Init+0x150>)
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d80f      	bhi.n	8001f72 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	4b4b      	ldr	r3, [pc, #300]	; (8002088 <HAL_DMA_Init+0x154>)
 8001f5a:	4413      	add	r3, r2
 8001f5c:	4a4b      	ldr	r2, [pc, #300]	; (800208c <HAL_DMA_Init+0x158>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	091b      	lsrs	r3, r3, #4
 8001f64:	009a      	lsls	r2, r3, #2
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a48      	ldr	r2, [pc, #288]	; (8002090 <HAL_DMA_Init+0x15c>)
 8001f6e:	641a      	str	r2, [r3, #64]	; 0x40
 8001f70:	e00e      	b.n	8001f90 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	4b46      	ldr	r3, [pc, #280]	; (8002094 <HAL_DMA_Init+0x160>)
 8001f7a:	4413      	add	r3, r2
 8001f7c:	4a43      	ldr	r2, [pc, #268]	; (800208c <HAL_DMA_Init+0x158>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	091b      	lsrs	r3, r3, #4
 8001f84:	009a      	lsls	r2, r3, #2
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a42      	ldr	r2, [pc, #264]	; (8002098 <HAL_DMA_Init+0x164>)
 8001f8e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2202      	movs	r2, #2
 8001f94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001faa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001fb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fea:	d039      	beq.n	8002060 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	4a27      	ldr	r2, [pc, #156]	; (8002090 <HAL_DMA_Init+0x15c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d11a      	bne.n	800202c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001ff6:	4b29      	ldr	r3, [pc, #164]	; (800209c <HAL_DMA_Init+0x168>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	f003 031c 	and.w	r3, r3, #28
 8002002:	210f      	movs	r1, #15
 8002004:	fa01 f303 	lsl.w	r3, r1, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	4924      	ldr	r1, [pc, #144]	; (800209c <HAL_DMA_Init+0x168>)
 800200c:	4013      	ands	r3, r2
 800200e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002010:	4b22      	ldr	r3, [pc, #136]	; (800209c <HAL_DMA_Init+0x168>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6859      	ldr	r1, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201c:	f003 031c 	and.w	r3, r3, #28
 8002020:	fa01 f303 	lsl.w	r3, r1, r3
 8002024:	491d      	ldr	r1, [pc, #116]	; (800209c <HAL_DMA_Init+0x168>)
 8002026:	4313      	orrs	r3, r2
 8002028:	600b      	str	r3, [r1, #0]
 800202a:	e019      	b.n	8002060 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800202c:	4b1c      	ldr	r3, [pc, #112]	; (80020a0 <HAL_DMA_Init+0x16c>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002034:	f003 031c 	and.w	r3, r3, #28
 8002038:	210f      	movs	r1, #15
 800203a:	fa01 f303 	lsl.w	r3, r1, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	4917      	ldr	r1, [pc, #92]	; (80020a0 <HAL_DMA_Init+0x16c>)
 8002042:	4013      	ands	r3, r2
 8002044:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002046:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <HAL_DMA_Init+0x16c>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6859      	ldr	r1, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	f003 031c 	and.w	r3, r3, #28
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	4911      	ldr	r1, [pc, #68]	; (80020a0 <HAL_DMA_Init+0x16c>)
 800205c:	4313      	orrs	r3, r2
 800205e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	40020407 	.word	0x40020407
 8002088:	bffdfff8 	.word	0xbffdfff8
 800208c:	cccccccd 	.word	0xcccccccd
 8002090:	40020000 	.word	0x40020000
 8002094:	bffdfbf8 	.word	0xbffdfbf8
 8002098:	40020400 	.word	0x40020400
 800209c:	400200a8 	.word	0x400200a8
 80020a0:	400204a8 	.word	0x400204a8

080020a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_DMA_Start_IT+0x20>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e04b      	b.n	800215c <HAL_DMA_Start_IT+0xb8>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d13a      	bne.n	800214e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2202      	movs	r2, #2
 80020dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 0201 	bic.w	r2, r2, #1
 80020f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	68b9      	ldr	r1, [r7, #8]
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 f8e0 	bl	80022c2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	2b00      	cmp	r3, #0
 8002108:	d008      	beq.n	800211c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f042 020e 	orr.w	r2, r2, #14
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	e00f      	b.n	800213c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0204 	bic.w	r2, r2, #4
 800212a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 020a 	orr.w	r2, r2, #10
 800213a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	e005      	b.n	800215a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002156:	2302      	movs	r3, #2
 8002158:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800215a:	7dfb      	ldrb	r3, [r7, #23]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002180:	f003 031c 	and.w	r3, r3, #28
 8002184:	2204      	movs	r2, #4
 8002186:	409a      	lsls	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4013      	ands	r3, r2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d026      	beq.n	80021de <HAL_DMA_IRQHandler+0x7a>
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b00      	cmp	r3, #0
 8002198:	d021      	beq.n	80021de <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0320 	and.w	r3, r3, #32
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d107      	bne.n	80021b8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0204 	bic.w	r2, r2, #4
 80021b6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021bc:	f003 021c 	and.w	r2, r3, #28
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	2104      	movs	r1, #4
 80021c6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ca:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d071      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80021dc:	e06c      	b.n	80022b8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	f003 031c 	and.w	r3, r3, #28
 80021e6:	2202      	movs	r2, #2
 80021e8:	409a      	lsls	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d02e      	beq.n	8002250 <HAL_DMA_IRQHandler+0xec>
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d029      	beq.n	8002250 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0320 	and.w	r3, r3, #32
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10b      	bne.n	8002222 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 020a 	bic.w	r2, r2, #10
 8002218:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	f003 021c 	and.w	r2, r3, #28
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	2102      	movs	r1, #2
 8002230:	fa01 f202 	lsl.w	r2, r1, r2
 8002234:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002242:	2b00      	cmp	r3, #0
 8002244:	d038      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800224e:	e033      	b.n	80022b8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002254:	f003 031c 	and.w	r3, r3, #28
 8002258:	2208      	movs	r2, #8
 800225a:	409a      	lsls	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4013      	ands	r3, r2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d02a      	beq.n	80022ba <HAL_DMA_IRQHandler+0x156>
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b00      	cmp	r3, #0
 800226c:	d025      	beq.n	80022ba <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 020e 	bic.w	r2, r2, #14
 800227c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002282:	f003 021c 	and.w	r2, r3, #28
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	2101      	movs	r1, #1
 800228c:	fa01 f202 	lsl.w	r2, r1, r2
 8002290:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d004      	beq.n	80022ba <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
}
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b085      	sub	sp, #20
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	60f8      	str	r0, [r7, #12]
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d4:	f003 021c 	and.w	r2, r3, #28
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	2101      	movs	r1, #1
 80022de:	fa01 f202 	lsl.w	r2, r1, r2
 80022e2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b10      	cmp	r3, #16
 80022f2:	d108      	bne.n	8002306 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002304:	e007      	b.n	8002316 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	60da      	str	r2, [r3, #12]
}
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002332:	e148      	b.n	80025c6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	2101      	movs	r1, #1
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	fa01 f303 	lsl.w	r3, r1, r3
 8002340:	4013      	ands	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 813a 	beq.w	80025c0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d00b      	beq.n	800236c <HAL_GPIO_Init+0x48>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d007      	beq.n	800236c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002360:	2b11      	cmp	r3, #17
 8002362:	d003      	beq.n	800236c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b12      	cmp	r3, #18
 800236a:	d130      	bne.n	80023ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	2203      	movs	r2, #3
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4013      	ands	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	68da      	ldr	r2, [r3, #12]
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023a2:	2201      	movs	r2, #1
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	091b      	lsrs	r3, r3, #4
 80023b8:	f003 0201 	and.w	r2, r3, #1
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	2203      	movs	r2, #3
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	4013      	ands	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d003      	beq.n	800240e <HAL_GPIO_Init+0xea>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b12      	cmp	r3, #18
 800240c:	d123      	bne.n	8002456 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	08da      	lsrs	r2, r3, #3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3208      	adds	r2, #8
 8002416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800241a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	220f      	movs	r2, #15
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4013      	ands	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	691a      	ldr	r2, [r3, #16]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	08da      	lsrs	r2, r3, #3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3208      	adds	r2, #8
 8002450:	6939      	ldr	r1, [r7, #16]
 8002452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	2203      	movs	r2, #3
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 0203 	and.w	r2, r3, #3
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 8094 	beq.w	80025c0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002498:	4b52      	ldr	r3, [pc, #328]	; (80025e4 <HAL_GPIO_Init+0x2c0>)
 800249a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249c:	4a51      	ldr	r2, [pc, #324]	; (80025e4 <HAL_GPIO_Init+0x2c0>)
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	6613      	str	r3, [r2, #96]	; 0x60
 80024a4:	4b4f      	ldr	r3, [pc, #316]	; (80025e4 <HAL_GPIO_Init+0x2c0>)
 80024a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024b0:	4a4d      	ldr	r2, [pc, #308]	; (80025e8 <HAL_GPIO_Init+0x2c4>)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	089b      	lsrs	r3, r3, #2
 80024b6:	3302      	adds	r3, #2
 80024b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	220f      	movs	r2, #15
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4013      	ands	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024da:	d00d      	beq.n	80024f8 <HAL_GPIO_Init+0x1d4>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a43      	ldr	r2, [pc, #268]	; (80025ec <HAL_GPIO_Init+0x2c8>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d007      	beq.n	80024f4 <HAL_GPIO_Init+0x1d0>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a42      	ldr	r2, [pc, #264]	; (80025f0 <HAL_GPIO_Init+0x2cc>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d101      	bne.n	80024f0 <HAL_GPIO_Init+0x1cc>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e004      	b.n	80024fa <HAL_GPIO_Init+0x1d6>
 80024f0:	2307      	movs	r3, #7
 80024f2:	e002      	b.n	80024fa <HAL_GPIO_Init+0x1d6>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <HAL_GPIO_Init+0x1d6>
 80024f8:	2300      	movs	r3, #0
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	f002 0203 	and.w	r2, r2, #3
 8002500:	0092      	lsls	r2, r2, #2
 8002502:	4093      	lsls	r3, r2
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4313      	orrs	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800250a:	4937      	ldr	r1, [pc, #220]	; (80025e8 <HAL_GPIO_Init+0x2c4>)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	089b      	lsrs	r3, r3, #2
 8002510:	3302      	adds	r3, #2
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002518:	4b36      	ldr	r3, [pc, #216]	; (80025f4 <HAL_GPIO_Init+0x2d0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	43db      	mvns	r3, r3
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4013      	ands	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800253c:	4a2d      	ldr	r2, [pc, #180]	; (80025f4 <HAL_GPIO_Init+0x2d0>)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002542:	4b2c      	ldr	r3, [pc, #176]	; (80025f4 <HAL_GPIO_Init+0x2d0>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	43db      	mvns	r3, r3
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4013      	ands	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4313      	orrs	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002566:	4a23      	ldr	r2, [pc, #140]	; (80025f4 <HAL_GPIO_Init+0x2d0>)
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800256c:	4b21      	ldr	r3, [pc, #132]	; (80025f4 <HAL_GPIO_Init+0x2d0>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	43db      	mvns	r3, r3
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002590:	4a18      	ldr	r2, [pc, #96]	; (80025f4 <HAL_GPIO_Init+0x2d0>)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002596:	4b17      	ldr	r3, [pc, #92]	; (80025f4 <HAL_GPIO_Init+0x2d0>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	43db      	mvns	r3, r3
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	4013      	ands	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025ba:	4a0e      	ldr	r2, [pc, #56]	; (80025f4 <HAL_GPIO_Init+0x2d0>)
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	3301      	adds	r3, #1
 80025c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f47f aeaf 	bne.w	8002334 <HAL_GPIO_Init+0x10>
  }
}
 80025d6:	bf00      	nop
 80025d8:	bf00      	nop
 80025da:	371c      	adds	r7, #28
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40010000 	.word	0x40010000
 80025ec:	48000400 	.word	0x48000400
 80025f0:	48000800 	.word	0x48000800
 80025f4:	40010400 	.word	0x40010400

080025f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	807b      	strh	r3, [r7, #2]
 8002604:	4613      	mov	r3, r2
 8002606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002608:	787b      	ldrb	r3, [r7, #1]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800260e:	887a      	ldrh	r2, [r7, #2]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002614:	e002      	b.n	800261c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002616:	887a      	ldrh	r2, [r7, #2]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800263a:	887a      	ldrh	r2, [r7, #2]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4013      	ands	r3, r2
 8002640:	041a      	lsls	r2, r3, #16
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	43d9      	mvns	r1, r3
 8002646:	887b      	ldrh	r3, [r7, #2]
 8002648:	400b      	ands	r3, r1
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	619a      	str	r2, [r3, #24]
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e081      	b.n	8002772 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d106      	bne.n	8002688 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7fe fb36 	bl	8000cf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2224      	movs	r2, #36	; 0x24
 800268c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0201 	bic.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d107      	bne.n	80026d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	e006      	b.n	80026e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80026e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d104      	bne.n	80026f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002708:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002718:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	ea42 0103 	orr.w	r1, r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	021a      	lsls	r2, r3, #8
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69d9      	ldr	r1, [r3, #28]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1a      	ldr	r2, [r3, #32]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2220      	movs	r2, #32
 800275e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b20      	cmp	r3, #32
 800278e:	d138      	bne.n	8002802 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800279a:	2302      	movs	r3, #2
 800279c:	e032      	b.n	8002804 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2224      	movs	r2, #36	; 0x24
 80027aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0201 	bic.w	r2, r2, #1
 80027bc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027cc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6819      	ldr	r1, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f042 0201 	orr.w	r2, r2, #1
 80027ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	e000      	b.n	8002804 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002802:	2302      	movs	r3, #2
  }
}
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b20      	cmp	r3, #32
 8002824:	d139      	bne.n	800289a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002830:	2302      	movs	r3, #2
 8002832:	e033      	b.n	800289c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2224      	movs	r2, #36	; 0x24
 8002840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0201 	bic.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002862:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	021b      	lsls	r3, r3, #8
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4313      	orrs	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0201 	orr.w	r2, r2, #1
 8002884:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2220      	movs	r2, #32
 800288a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	e000      	b.n	800289c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800289a:	2302      	movs	r3, #2
  }
}
 800289c:	4618      	mov	r0, r3
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028ac:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a04      	ldr	r2, [pc, #16]	; (80028c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b6:	6013      	str	r3, [r2, #0]
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40007000 	.word	0x40007000

080028c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028cc:	4b04      	ldr	r3, [pc, #16]	; (80028e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40007000 	.word	0x40007000

080028e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028f2:	d130      	bne.n	8002956 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80028f4:	4b23      	ldr	r3, [pc, #140]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002900:	d038      	beq.n	8002974 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002902:	4b20      	ldr	r3, [pc, #128]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800290a:	4a1e      	ldr	r2, [pc, #120]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800290c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002910:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002912:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2232      	movs	r2, #50	; 0x32
 8002918:	fb02 f303 	mul.w	r3, r2, r3
 800291c:	4a1b      	ldr	r2, [pc, #108]	; (800298c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	0c9b      	lsrs	r3, r3, #18
 8002924:	3301      	adds	r3, #1
 8002926:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002928:	e002      	b.n	8002930 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	3b01      	subs	r3, #1
 800292e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002930:	4b14      	ldr	r3, [pc, #80]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800293c:	d102      	bne.n	8002944 <HAL_PWREx_ControlVoltageScaling+0x60>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1f2      	bne.n	800292a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002944:	4b0f      	ldr	r3, [pc, #60]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002950:	d110      	bne.n	8002974 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e00f      	b.n	8002976 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002956:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800295e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002962:	d007      	beq.n	8002974 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002964:	4b07      	ldr	r3, [pc, #28]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800296c:	4a05      	ldr	r2, [pc, #20]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800296e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002972:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40007000 	.word	0x40007000
 8002988:	20000008 	.word	0x20000008
 800298c:	431bde83 	.word	0x431bde83

08002990 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d102      	bne.n	80029a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	f000 bc11 	b.w	80031c6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029a4:	4ba0      	ldr	r3, [pc, #640]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 030c 	and.w	r3, r3, #12
 80029ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029ae:	4b9e      	ldr	r3, [pc, #632]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0310 	and.w	r3, r3, #16
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80e4 	beq.w	8002b8e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d007      	beq.n	80029dc <HAL_RCC_OscConfig+0x4c>
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	2b0c      	cmp	r3, #12
 80029d0:	f040 808b 	bne.w	8002aea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	f040 8087 	bne.w	8002aea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029dc:	4b92      	ldr	r3, [pc, #584]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_RCC_OscConfig+0x64>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e3e8      	b.n	80031c6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1a      	ldr	r2, [r3, #32]
 80029f8:	4b8b      	ldr	r3, [pc, #556]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d004      	beq.n	8002a0e <HAL_RCC_OscConfig+0x7e>
 8002a04:	4b88      	ldr	r3, [pc, #544]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a0c:	e005      	b.n	8002a1a <HAL_RCC_OscConfig+0x8a>
 8002a0e:	4b86      	ldr	r3, [pc, #536]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a14:	091b      	lsrs	r3, r3, #4
 8002a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d223      	bcs.n	8002a66 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 fdaa 	bl	800357c <RCC_SetFlashLatencyFromMSIRange>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e3c9      	b.n	80031c6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a32:	4b7d      	ldr	r3, [pc, #500]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a7c      	ldr	r2, [pc, #496]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002a38:	f043 0308 	orr.w	r3, r3, #8
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	4b7a      	ldr	r3, [pc, #488]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	4977      	ldr	r1, [pc, #476]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a50:	4b75      	ldr	r3, [pc, #468]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	021b      	lsls	r3, r3, #8
 8002a5e:	4972      	ldr	r1, [pc, #456]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	604b      	str	r3, [r1, #4]
 8002a64:	e025      	b.n	8002ab2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a66:	4b70      	ldr	r3, [pc, #448]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a6f      	ldr	r2, [pc, #444]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002a6c:	f043 0308 	orr.w	r3, r3, #8
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	4b6d      	ldr	r3, [pc, #436]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	496a      	ldr	r1, [pc, #424]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a84:	4b68      	ldr	r3, [pc, #416]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	021b      	lsls	r3, r3, #8
 8002a92:	4965      	ldr	r1, [pc, #404]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d109      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 fd6a 	bl	800357c <RCC_SetFlashLatencyFromMSIRange>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e389      	b.n	80031c6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ab2:	f000 fc6f 	bl	8003394 <HAL_RCC_GetSysClockFreq>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	4b5b      	ldr	r3, [pc, #364]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	495a      	ldr	r1, [pc, #360]	; (8002c2c <HAL_RCC_OscConfig+0x29c>)
 8002ac4:	5ccb      	ldrb	r3, [r1, r3]
 8002ac6:	f003 031f 	and.w	r3, r3, #31
 8002aca:	fa22 f303 	lsr.w	r3, r2, r3
 8002ace:	4a58      	ldr	r2, [pc, #352]	; (8002c30 <HAL_RCC_OscConfig+0x2a0>)
 8002ad0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ad2:	4b58      	ldr	r3, [pc, #352]	; (8002c34 <HAL_RCC_OscConfig+0x2a4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe fa38 	bl	8000f4c <HAL_InitTick>
 8002adc:	4603      	mov	r3, r0
 8002ade:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d052      	beq.n	8002b8c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	e36d      	b.n	80031c6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d032      	beq.n	8002b58 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002af2:	4b4d      	ldr	r3, [pc, #308]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a4c      	ldr	r2, [pc, #304]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002afe:	f7fe fb85 	bl	800120c <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b06:	f7fe fb81 	bl	800120c <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e356      	b.n	80031c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b18:	4b43      	ldr	r3, [pc, #268]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0f0      	beq.n	8002b06 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b24:	4b40      	ldr	r3, [pc, #256]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a3f      	ldr	r2, [pc, #252]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002b2a:	f043 0308 	orr.w	r3, r3, #8
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	4b3d      	ldr	r3, [pc, #244]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	493a      	ldr	r1, [pc, #232]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b42:	4b39      	ldr	r3, [pc, #228]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	4935      	ldr	r1, [pc, #212]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	604b      	str	r3, [r1, #4]
 8002b56:	e01a      	b.n	8002b8e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b58:	4b33      	ldr	r3, [pc, #204]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a32      	ldr	r2, [pc, #200]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002b5e:	f023 0301 	bic.w	r3, r3, #1
 8002b62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b64:	f7fe fb52 	bl	800120c <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b6c:	f7fe fb4e 	bl	800120c <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e323      	b.n	80031c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b7e:	4b2a      	ldr	r3, [pc, #168]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x1dc>
 8002b8a:	e000      	b.n	8002b8e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d073      	beq.n	8002c82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d005      	beq.n	8002bac <HAL_RCC_OscConfig+0x21c>
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	2b0c      	cmp	r3, #12
 8002ba4:	d10e      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d10b      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bac:	4b1e      	ldr	r3, [pc, #120]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d063      	beq.n	8002c80 <HAL_RCC_OscConfig+0x2f0>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d15f      	bne.n	8002c80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e300      	b.n	80031c6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bcc:	d106      	bne.n	8002bdc <HAL_RCC_OscConfig+0x24c>
 8002bce:	4b16      	ldr	r3, [pc, #88]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a15      	ldr	r2, [pc, #84]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	e01d      	b.n	8002c18 <HAL_RCC_OscConfig+0x288>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002be4:	d10c      	bne.n	8002c00 <HAL_RCC_OscConfig+0x270>
 8002be6:	4b10      	ldr	r3, [pc, #64]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a0f      	ldr	r2, [pc, #60]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	4b0d      	ldr	r3, [pc, #52]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a0c      	ldr	r2, [pc, #48]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	e00b      	b.n	8002c18 <HAL_RCC_OscConfig+0x288>
 8002c00:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a08      	ldr	r2, [pc, #32]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a05      	ldr	r2, [pc, #20]	; (8002c28 <HAL_RCC_OscConfig+0x298>)
 8002c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d01b      	beq.n	8002c58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c20:	f7fe faf4 	bl	800120c <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c26:	e010      	b.n	8002c4a <HAL_RCC_OscConfig+0x2ba>
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	08008084 	.word	0x08008084
 8002c30:	20000008 	.word	0x20000008
 8002c34:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c38:	f7fe fae8 	bl	800120c <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b64      	cmp	r3, #100	; 0x64
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e2bd      	b.n	80031c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c4a:	4baf      	ldr	r3, [pc, #700]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x2a8>
 8002c56:	e014      	b.n	8002c82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7fe fad8 	bl	800120c <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c60:	f7fe fad4 	bl	800120c <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b64      	cmp	r3, #100	; 0x64
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e2a9      	b.n	80031c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c72:	4ba5      	ldr	r3, [pc, #660]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0x2d0>
 8002c7e:	e000      	b.n	8002c82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d060      	beq.n	8002d50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d005      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x310>
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	2b0c      	cmp	r3, #12
 8002c98:	d119      	bne.n	8002cce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d116      	bne.n	8002cce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ca0:	4b99      	ldr	r3, [pc, #612]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x328>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e286      	b.n	80031c6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb8:	4b93      	ldr	r3, [pc, #588]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	061b      	lsls	r3, r3, #24
 8002cc6:	4990      	ldr	r1, [pc, #576]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ccc:	e040      	b.n	8002d50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d023      	beq.n	8002d1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd6:	4b8c      	ldr	r3, [pc, #560]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a8b      	ldr	r2, [pc, #556]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce2:	f7fe fa93 	bl	800120c <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cea:	f7fe fa8f 	bl	800120c <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e264      	b.n	80031c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cfc:	4b82      	ldr	r3, [pc, #520]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d08:	4b7f      	ldr	r3, [pc, #508]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	061b      	lsls	r3, r3, #24
 8002d16:	497c      	ldr	r1, [pc, #496]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	604b      	str	r3, [r1, #4]
 8002d1c:	e018      	b.n	8002d50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d1e:	4b7a      	ldr	r3, [pc, #488]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a79      	ldr	r2, [pc, #484]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2a:	f7fe fa6f 	bl	800120c <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d32:	f7fe fa6b 	bl	800120c <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e240      	b.n	80031c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d44:	4b70      	ldr	r3, [pc, #448]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1f0      	bne.n	8002d32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d03c      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d01c      	beq.n	8002d9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d64:	4b68      	ldr	r3, [pc, #416]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d6a:	4a67      	ldr	r2, [pc, #412]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d74:	f7fe fa4a 	bl	800120c <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d7c:	f7fe fa46 	bl	800120c <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e21b      	b.n	80031c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d8e:	4b5e      	ldr	r3, [pc, #376]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0ef      	beq.n	8002d7c <HAL_RCC_OscConfig+0x3ec>
 8002d9c:	e01b      	b.n	8002dd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d9e:	4b5a      	ldr	r3, [pc, #360]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da4:	4a58      	ldr	r2, [pc, #352]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002da6:	f023 0301 	bic.w	r3, r3, #1
 8002daa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dae:	f7fe fa2d 	bl	800120c <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db6:	f7fe fa29 	bl	800120c <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e1fe      	b.n	80031c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dc8:	4b4f      	ldr	r3, [pc, #316]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1ef      	bne.n	8002db6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80a6 	beq.w	8002f30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de4:	2300      	movs	r3, #0
 8002de6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002de8:	4b47      	ldr	r3, [pc, #284]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10d      	bne.n	8002e10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df4:	4b44      	ldr	r3, [pc, #272]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df8:	4a43      	ldr	r2, [pc, #268]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	6593      	str	r3, [r2, #88]	; 0x58
 8002e00:	4b41      	ldr	r3, [pc, #260]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e10:	4b3e      	ldr	r3, [pc, #248]	; (8002f0c <HAL_RCC_OscConfig+0x57c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d118      	bne.n	8002e4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e1c:	4b3b      	ldr	r3, [pc, #236]	; (8002f0c <HAL_RCC_OscConfig+0x57c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a3a      	ldr	r2, [pc, #232]	; (8002f0c <HAL_RCC_OscConfig+0x57c>)
 8002e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e28:	f7fe f9f0 	bl	800120c <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e30:	f7fe f9ec 	bl	800120c <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e1c1      	b.n	80031c6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e42:	4b32      	ldr	r3, [pc, #200]	; (8002f0c <HAL_RCC_OscConfig+0x57c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d108      	bne.n	8002e68 <HAL_RCC_OscConfig+0x4d8>
 8002e56:	4b2c      	ldr	r3, [pc, #176]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5c:	4a2a      	ldr	r2, [pc, #168]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e66:	e024      	b.n	8002eb2 <HAL_RCC_OscConfig+0x522>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b05      	cmp	r3, #5
 8002e6e:	d110      	bne.n	8002e92 <HAL_RCC_OscConfig+0x502>
 8002e70:	4b25      	ldr	r3, [pc, #148]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e76:	4a24      	ldr	r2, [pc, #144]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002e78:	f043 0304 	orr.w	r3, r3, #4
 8002e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e80:	4b21      	ldr	r3, [pc, #132]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e86:	4a20      	ldr	r2, [pc, #128]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e90:	e00f      	b.n	8002eb2 <HAL_RCC_OscConfig+0x522>
 8002e92:	4b1d      	ldr	r3, [pc, #116]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e98:	4a1b      	ldr	r2, [pc, #108]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002e9a:	f023 0301 	bic.w	r3, r3, #1
 8002e9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ea2:	4b19      	ldr	r3, [pc, #100]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea8:	4a17      	ldr	r2, [pc, #92]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002eaa:	f023 0304 	bic.w	r3, r3, #4
 8002eae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d016      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eba:	f7fe f9a7 	bl	800120c <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ec0:	e00a      	b.n	8002ed8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec2:	f7fe f9a3 	bl	800120c <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e176      	b.n	80031c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <HAL_RCC_OscConfig+0x578>)
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0ed      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x532>
 8002ee6:	e01a      	b.n	8002f1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee8:	f7fe f990 	bl	800120c <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002eee:	e00f      	b.n	8002f10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef0:	f7fe f98c 	bl	800120c <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d906      	bls.n	8002f10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e15f      	b.n	80031c6 <HAL_RCC_OscConfig+0x836>
 8002f06:	bf00      	nop
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f10:	4baa      	ldr	r3, [pc, #680]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1e8      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f1e:	7ffb      	ldrb	r3, [r7, #31]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d105      	bne.n	8002f30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f24:	4ba5      	ldr	r3, [pc, #660]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 8002f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f28:	4aa4      	ldr	r2, [pc, #656]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 8002f2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0320 	and.w	r3, r3, #32
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d03c      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d01c      	beq.n	8002f7e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f44:	4b9d      	ldr	r3, [pc, #628]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 8002f46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f4a:	4a9c      	ldr	r2, [pc, #624]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f54:	f7fe f95a 	bl	800120c <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f5c:	f7fe f956 	bl	800120c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e12b      	b.n	80031c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f6e:	4b93      	ldr	r3, [pc, #588]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 8002f70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0ef      	beq.n	8002f5c <HAL_RCC_OscConfig+0x5cc>
 8002f7c:	e01b      	b.n	8002fb6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f7e:	4b8f      	ldr	r3, [pc, #572]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 8002f80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f84:	4a8d      	ldr	r2, [pc, #564]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 8002f86:	f023 0301 	bic.w	r3, r3, #1
 8002f8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8e:	f7fe f93d 	bl	800120c <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f96:	f7fe f939 	bl	800120c <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e10e      	b.n	80031c6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fa8:	4b84      	ldr	r3, [pc, #528]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 8002faa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1ef      	bne.n	8002f96 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 8102 	beq.w	80031c4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	f040 80c5 	bne.w	8003154 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002fca:	4b7c      	ldr	r3, [pc, #496]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	f003 0203 	and.w	r2, r3, #3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d12c      	bne.n	8003038 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d123      	bne.n	8003038 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d11b      	bne.n	8003038 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800300c:	429a      	cmp	r2, r3
 800300e:	d113      	bne.n	8003038 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301a:	085b      	lsrs	r3, r3, #1
 800301c:	3b01      	subs	r3, #1
 800301e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003020:	429a      	cmp	r2, r3
 8003022:	d109      	bne.n	8003038 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	085b      	lsrs	r3, r3, #1
 8003030:	3b01      	subs	r3, #1
 8003032:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003034:	429a      	cmp	r2, r3
 8003036:	d067      	beq.n	8003108 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	2b0c      	cmp	r3, #12
 800303c:	d062      	beq.n	8003104 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800303e:	4b5f      	ldr	r3, [pc, #380]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e0bb      	b.n	80031c6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800304e:	4b5b      	ldr	r3, [pc, #364]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a5a      	ldr	r2, [pc, #360]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 8003054:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003058:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800305a:	f7fe f8d7 	bl	800120c <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003062:	f7fe f8d3 	bl	800120c <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e0a8      	b.n	80031c6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003074:	4b51      	ldr	r3, [pc, #324]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1f0      	bne.n	8003062 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003080:	4b4e      	ldr	r3, [pc, #312]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	4b4e      	ldr	r3, [pc, #312]	; (80031c0 <HAL_RCC_OscConfig+0x830>)
 8003086:	4013      	ands	r3, r2
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003090:	3a01      	subs	r2, #1
 8003092:	0112      	lsls	r2, r2, #4
 8003094:	4311      	orrs	r1, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800309a:	0212      	lsls	r2, r2, #8
 800309c:	4311      	orrs	r1, r2
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030a2:	0852      	lsrs	r2, r2, #1
 80030a4:	3a01      	subs	r2, #1
 80030a6:	0552      	lsls	r2, r2, #21
 80030a8:	4311      	orrs	r1, r2
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030ae:	0852      	lsrs	r2, r2, #1
 80030b0:	3a01      	subs	r2, #1
 80030b2:	0652      	lsls	r2, r2, #25
 80030b4:	4311      	orrs	r1, r2
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030ba:	06d2      	lsls	r2, r2, #27
 80030bc:	430a      	orrs	r2, r1
 80030be:	493f      	ldr	r1, [pc, #252]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030c4:	4b3d      	ldr	r3, [pc, #244]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a3c      	ldr	r2, [pc, #240]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 80030ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030d0:	4b3a      	ldr	r3, [pc, #232]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	4a39      	ldr	r2, [pc, #228]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 80030d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030dc:	f7fe f896 	bl	800120c <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e4:	f7fe f892 	bl	800120c <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e067      	b.n	80031c6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f6:	4b31      	ldr	r3, [pc, #196]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003102:	e05f      	b.n	80031c4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e05e      	b.n	80031c6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003108:	4b2c      	ldr	r3, [pc, #176]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d157      	bne.n	80031c4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003114:	4b29      	ldr	r3, [pc, #164]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a28      	ldr	r2, [pc, #160]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 800311a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800311e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003120:	4b26      	ldr	r3, [pc, #152]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4a25      	ldr	r2, [pc, #148]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 8003126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800312a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800312c:	f7fe f86e 	bl	800120c <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003134:	f7fe f86a 	bl	800120c <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e03f      	b.n	80031c6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003146:	4b1d      	ldr	r3, [pc, #116]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0f0      	beq.n	8003134 <HAL_RCC_OscConfig+0x7a4>
 8003152:	e037      	b.n	80031c4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	2b0c      	cmp	r3, #12
 8003158:	d02d      	beq.n	80031b6 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315a:	4b18      	ldr	r3, [pc, #96]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a17      	ldr	r2, [pc, #92]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 8003160:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003164:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003166:	4b15      	ldr	r3, [pc, #84]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d105      	bne.n	800317e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003172:	4b12      	ldr	r3, [pc, #72]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	4a11      	ldr	r2, [pc, #68]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 8003178:	f023 0303 	bic.w	r3, r3, #3
 800317c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800317e:	4b0f      	ldr	r3, [pc, #60]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	4a0e      	ldr	r2, [pc, #56]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 8003184:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800318c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318e:	f7fe f83d 	bl	800120c <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003196:	f7fe f839 	bl	800120c <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e00e      	b.n	80031c6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031a8:	4b04      	ldr	r3, [pc, #16]	; (80031bc <HAL_RCC_OscConfig+0x82c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1f0      	bne.n	8003196 <HAL_RCC_OscConfig+0x806>
 80031b4:	e006      	b.n	80031c4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e005      	b.n	80031c6 <HAL_RCC_OscConfig+0x836>
 80031ba:	bf00      	nop
 80031bc:	40021000 	.word	0x40021000
 80031c0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3720      	adds	r7, #32
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop

080031d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e0c8      	b.n	8003376 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031e4:	4b66      	ldr	r3, [pc, #408]	; (8003380 <HAL_RCC_ClockConfig+0x1b0>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d910      	bls.n	8003214 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f2:	4b63      	ldr	r3, [pc, #396]	; (8003380 <HAL_RCC_ClockConfig+0x1b0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 0207 	bic.w	r2, r3, #7
 80031fa:	4961      	ldr	r1, [pc, #388]	; (8003380 <HAL_RCC_ClockConfig+0x1b0>)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	4313      	orrs	r3, r2
 8003200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003202:	4b5f      	ldr	r3, [pc, #380]	; (8003380 <HAL_RCC_ClockConfig+0x1b0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d001      	beq.n	8003214 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0b0      	b.n	8003376 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d04c      	beq.n	80032ba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b03      	cmp	r3, #3
 8003226:	d107      	bne.n	8003238 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003228:	4b56      	ldr	r3, [pc, #344]	; (8003384 <HAL_RCC_ClockConfig+0x1b4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d121      	bne.n	8003278 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e09e      	b.n	8003376 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b02      	cmp	r3, #2
 800323e:	d107      	bne.n	8003250 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003240:	4b50      	ldr	r3, [pc, #320]	; (8003384 <HAL_RCC_ClockConfig+0x1b4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d115      	bne.n	8003278 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e092      	b.n	8003376 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d107      	bne.n	8003268 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003258:	4b4a      	ldr	r3, [pc, #296]	; (8003384 <HAL_RCC_ClockConfig+0x1b4>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d109      	bne.n	8003278 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e086      	b.n	8003376 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003268:	4b46      	ldr	r3, [pc, #280]	; (8003384 <HAL_RCC_ClockConfig+0x1b4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e07e      	b.n	8003376 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003278:	4b42      	ldr	r3, [pc, #264]	; (8003384 <HAL_RCC_ClockConfig+0x1b4>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f023 0203 	bic.w	r2, r3, #3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	493f      	ldr	r1, [pc, #252]	; (8003384 <HAL_RCC_ClockConfig+0x1b4>)
 8003286:	4313      	orrs	r3, r2
 8003288:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800328a:	f7fd ffbf 	bl	800120c <HAL_GetTick>
 800328e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003290:	e00a      	b.n	80032a8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003292:	f7fd ffbb 	bl	800120c <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e066      	b.n	8003376 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a8:	4b36      	ldr	r3, [pc, #216]	; (8003384 <HAL_RCC_ClockConfig+0x1b4>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 020c 	and.w	r2, r3, #12
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d1eb      	bne.n	8003292 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d008      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c6:	4b2f      	ldr	r3, [pc, #188]	; (8003384 <HAL_RCC_ClockConfig+0x1b4>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	492c      	ldr	r1, [pc, #176]	; (8003384 <HAL_RCC_ClockConfig+0x1b4>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032d8:	4b29      	ldr	r3, [pc, #164]	; (8003380 <HAL_RCC_ClockConfig+0x1b0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d210      	bcs.n	8003308 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e6:	4b26      	ldr	r3, [pc, #152]	; (8003380 <HAL_RCC_ClockConfig+0x1b0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 0207 	bic.w	r2, r3, #7
 80032ee:	4924      	ldr	r1, [pc, #144]	; (8003380 <HAL_RCC_ClockConfig+0x1b0>)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f6:	4b22      	ldr	r3, [pc, #136]	; (8003380 <HAL_RCC_ClockConfig+0x1b0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	429a      	cmp	r2, r3
 8003302:	d001      	beq.n	8003308 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e036      	b.n	8003376 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003314:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <HAL_RCC_ClockConfig+0x1b4>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	4918      	ldr	r1, [pc, #96]	; (8003384 <HAL_RCC_ClockConfig+0x1b4>)
 8003322:	4313      	orrs	r3, r2
 8003324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d009      	beq.n	8003346 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003332:	4b14      	ldr	r3, [pc, #80]	; (8003384 <HAL_RCC_ClockConfig+0x1b4>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4910      	ldr	r1, [pc, #64]	; (8003384 <HAL_RCC_ClockConfig+0x1b4>)
 8003342:	4313      	orrs	r3, r2
 8003344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003346:	f000 f825 	bl	8003394 <HAL_RCC_GetSysClockFreq>
 800334a:	4602      	mov	r2, r0
 800334c:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <HAL_RCC_ClockConfig+0x1b4>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	091b      	lsrs	r3, r3, #4
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	490c      	ldr	r1, [pc, #48]	; (8003388 <HAL_RCC_ClockConfig+0x1b8>)
 8003358:	5ccb      	ldrb	r3, [r1, r3]
 800335a:	f003 031f 	and.w	r3, r3, #31
 800335e:	fa22 f303 	lsr.w	r3, r2, r3
 8003362:	4a0a      	ldr	r2, [pc, #40]	; (800338c <HAL_RCC_ClockConfig+0x1bc>)
 8003364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003366:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <HAL_RCC_ClockConfig+0x1c0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7fd fdee 	bl	8000f4c <HAL_InitTick>
 8003370:	4603      	mov	r3, r0
 8003372:	72fb      	strb	r3, [r7, #11]

  return status;
 8003374:	7afb      	ldrb	r3, [r7, #11]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40022000 	.word	0x40022000
 8003384:	40021000 	.word	0x40021000
 8003388:	08008084 	.word	0x08008084
 800338c:	20000008 	.word	0x20000008
 8003390:	2000000c 	.word	0x2000000c

08003394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003394:	b480      	push	{r7}
 8003396:	b089      	sub	sp, #36	; 0x24
 8003398:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	61fb      	str	r3, [r7, #28]
 800339e:	2300      	movs	r3, #0
 80033a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033a2:	4b3e      	ldr	r3, [pc, #248]	; (800349c <HAL_RCC_GetSysClockFreq+0x108>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 030c 	and.w	r3, r3, #12
 80033aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033ac:	4b3b      	ldr	r3, [pc, #236]	; (800349c <HAL_RCC_GetSysClockFreq+0x108>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d005      	beq.n	80033c8 <HAL_RCC_GetSysClockFreq+0x34>
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	2b0c      	cmp	r3, #12
 80033c0:	d121      	bne.n	8003406 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d11e      	bne.n	8003406 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033c8:	4b34      	ldr	r3, [pc, #208]	; (800349c <HAL_RCC_GetSysClockFreq+0x108>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d107      	bne.n	80033e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033d4:	4b31      	ldr	r3, [pc, #196]	; (800349c <HAL_RCC_GetSysClockFreq+0x108>)
 80033d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033da:	0a1b      	lsrs	r3, r3, #8
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	61fb      	str	r3, [r7, #28]
 80033e2:	e005      	b.n	80033f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033e4:	4b2d      	ldr	r3, [pc, #180]	; (800349c <HAL_RCC_GetSysClockFreq+0x108>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033f0:	4a2b      	ldr	r2, [pc, #172]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10d      	bne.n	800341c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003404:	e00a      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	2b04      	cmp	r3, #4
 800340a:	d102      	bne.n	8003412 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800340c:	4b25      	ldr	r3, [pc, #148]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800340e:	61bb      	str	r3, [r7, #24]
 8003410:	e004      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	2b08      	cmp	r3, #8
 8003416:	d101      	bne.n	800341c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003418:	4b22      	ldr	r3, [pc, #136]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800341a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	2b0c      	cmp	r3, #12
 8003420:	d134      	bne.n	800348c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003422:	4b1e      	ldr	r3, [pc, #120]	; (800349c <HAL_RCC_GetSysClockFreq+0x108>)
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d003      	beq.n	800343a <HAL_RCC_GetSysClockFreq+0xa6>
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b03      	cmp	r3, #3
 8003436:	d003      	beq.n	8003440 <HAL_RCC_GetSysClockFreq+0xac>
 8003438:	e005      	b.n	8003446 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800343a:	4b1a      	ldr	r3, [pc, #104]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800343c:	617b      	str	r3, [r7, #20]
      break;
 800343e:	e005      	b.n	800344c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003440:	4b18      	ldr	r3, [pc, #96]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003442:	617b      	str	r3, [r7, #20]
      break;
 8003444:	e002      	b.n	800344c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	617b      	str	r3, [r7, #20]
      break;
 800344a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800344c:	4b13      	ldr	r3, [pc, #76]	; (800349c <HAL_RCC_GetSysClockFreq+0x108>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	091b      	lsrs	r3, r3, #4
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	3301      	adds	r3, #1
 8003458:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800345a:	4b10      	ldr	r3, [pc, #64]	; (800349c <HAL_RCC_GetSysClockFreq+0x108>)
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	0a1b      	lsrs	r3, r3, #8
 8003460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	fb02 f203 	mul.w	r2, r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003470:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003472:	4b0a      	ldr	r3, [pc, #40]	; (800349c <HAL_RCC_GetSysClockFreq+0x108>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	0e5b      	lsrs	r3, r3, #25
 8003478:	f003 0303 	and.w	r3, r3, #3
 800347c:	3301      	adds	r3, #1
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	fbb2 f3f3 	udiv	r3, r2, r3
 800348a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800348c:	69bb      	ldr	r3, [r7, #24]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3724      	adds	r7, #36	; 0x24
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40021000 	.word	0x40021000
 80034a0:	0800809c 	.word	0x0800809c
 80034a4:	00f42400 	.word	0x00f42400

080034a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034ac:	4b03      	ldr	r3, [pc, #12]	; (80034bc <HAL_RCC_GetHCLKFreq+0x14>)
 80034ae:	681b      	ldr	r3, [r3, #0]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	20000008 	.word	0x20000008

080034c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034c4:	f7ff fff0 	bl	80034a8 <HAL_RCC_GetHCLKFreq>
 80034c8:	4602      	mov	r2, r0
 80034ca:	4b06      	ldr	r3, [pc, #24]	; (80034e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	0a1b      	lsrs	r3, r3, #8
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	4904      	ldr	r1, [pc, #16]	; (80034e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034d6:	5ccb      	ldrb	r3, [r1, r3]
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40021000 	.word	0x40021000
 80034e8:	08008094 	.word	0x08008094

080034ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034f0:	f7ff ffda 	bl	80034a8 <HAL_RCC_GetHCLKFreq>
 80034f4:	4602      	mov	r2, r0
 80034f6:	4b06      	ldr	r3, [pc, #24]	; (8003510 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	0adb      	lsrs	r3, r3, #11
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	4904      	ldr	r1, [pc, #16]	; (8003514 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003502:	5ccb      	ldrb	r3, [r1, r3]
 8003504:	f003 031f 	and.w	r3, r3, #31
 8003508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800350c:	4618      	mov	r0, r3
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40021000 	.word	0x40021000
 8003514:	08008094 	.word	0x08008094

08003518 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	220f      	movs	r2, #15
 8003526:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003528:	4b12      	ldr	r3, [pc, #72]	; (8003574 <HAL_RCC_GetClockConfig+0x5c>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 0203 	and.w	r2, r3, #3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003534:	4b0f      	ldr	r3, [pc, #60]	; (8003574 <HAL_RCC_GetClockConfig+0x5c>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003540:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <HAL_RCC_GetClockConfig+0x5c>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800354c:	4b09      	ldr	r3, [pc, #36]	; (8003574 <HAL_RCC_GetClockConfig+0x5c>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	08db      	lsrs	r3, r3, #3
 8003552:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800355a:	4b07      	ldr	r3, [pc, #28]	; (8003578 <HAL_RCC_GetClockConfig+0x60>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0207 	and.w	r2, r3, #7
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	601a      	str	r2, [r3, #0]
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40021000 	.word	0x40021000
 8003578:	40022000 	.word	0x40022000

0800357c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003584:	2300      	movs	r3, #0
 8003586:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003588:	4b2a      	ldr	r3, [pc, #168]	; (8003634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800358a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003594:	f7ff f998 	bl	80028c8 <HAL_PWREx_GetVoltageRange>
 8003598:	6178      	str	r0, [r7, #20]
 800359a:	e014      	b.n	80035c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800359c:	4b25      	ldr	r3, [pc, #148]	; (8003634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800359e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a0:	4a24      	ldr	r2, [pc, #144]	; (8003634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a6:	6593      	str	r3, [r2, #88]	; 0x58
 80035a8:	4b22      	ldr	r3, [pc, #136]	; (8003634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035b4:	f7ff f988 	bl	80028c8 <HAL_PWREx_GetVoltageRange>
 80035b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035ba:	4b1e      	ldr	r3, [pc, #120]	; (8003634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035be:	4a1d      	ldr	r2, [pc, #116]	; (8003634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035cc:	d10b      	bne.n	80035e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b80      	cmp	r3, #128	; 0x80
 80035d2:	d919      	bls.n	8003608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2ba0      	cmp	r3, #160	; 0xa0
 80035d8:	d902      	bls.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035da:	2302      	movs	r3, #2
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	e013      	b.n	8003608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035e0:	2301      	movs	r3, #1
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	e010      	b.n	8003608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b80      	cmp	r3, #128	; 0x80
 80035ea:	d902      	bls.n	80035f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035ec:	2303      	movs	r3, #3
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	e00a      	b.n	8003608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b80      	cmp	r3, #128	; 0x80
 80035f6:	d102      	bne.n	80035fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035f8:	2302      	movs	r3, #2
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	e004      	b.n	8003608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b70      	cmp	r3, #112	; 0x70
 8003602:	d101      	bne.n	8003608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003604:	2301      	movs	r3, #1
 8003606:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003608:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f023 0207 	bic.w	r2, r3, #7
 8003610:	4909      	ldr	r1, [pc, #36]	; (8003638 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003618:	4b07      	ldr	r3, [pc, #28]	; (8003638 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	429a      	cmp	r2, r3
 8003624:	d001      	beq.n	800362a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40021000 	.word	0x40021000
 8003638:	40022000 	.word	0x40022000

0800363c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003644:	2300      	movs	r3, #0
 8003646:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003648:	2300      	movs	r3, #0
 800364a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003654:	2b00      	cmp	r3, #0
 8003656:	d031      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003660:	d01a      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003662:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003666:	d814      	bhi.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003668:	2b00      	cmp	r3, #0
 800366a:	d009      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800366c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003670:	d10f      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003672:	4bac      	ldr	r3, [pc, #688]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	4aab      	ldr	r2, [pc, #684]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800367e:	e00c      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3304      	adds	r3, #4
 8003684:	2100      	movs	r1, #0
 8003686:	4618      	mov	r0, r3
 8003688:	f000 f9dc 	bl	8003a44 <RCCEx_PLLSAI1_Config>
 800368c:	4603      	mov	r3, r0
 800368e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003690:	e003      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	74fb      	strb	r3, [r7, #19]
      break;
 8003696:	e000      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003698:	bf00      	nop
    }

    if(ret == HAL_OK)
 800369a:	7cfb      	ldrb	r3, [r7, #19]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10b      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036a0:	4ba0      	ldr	r3, [pc, #640]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ae:	499d      	ldr	r1, [pc, #628]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036b6:	e001      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b8:	7cfb      	ldrb	r3, [r7, #19]
 80036ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 8099 	beq.w	80037fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ca:	2300      	movs	r3, #0
 80036cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036ce:	4b95      	ldr	r3, [pc, #596]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80036de:	2300      	movs	r3, #0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00d      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e4:	4b8f      	ldr	r3, [pc, #572]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e8:	4a8e      	ldr	r2, [pc, #568]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ee:	6593      	str	r3, [r2, #88]	; 0x58
 80036f0:	4b8c      	ldr	r3, [pc, #560]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80036f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036fc:	2301      	movs	r3, #1
 80036fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003700:	4b89      	ldr	r3, [pc, #548]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a88      	ldr	r2, [pc, #544]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800370a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800370c:	f7fd fd7e 	bl	800120c <HAL_GetTick>
 8003710:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003712:	e009      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003714:	f7fd fd7a 	bl	800120c <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d902      	bls.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	74fb      	strb	r3, [r7, #19]
        break;
 8003726:	e005      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003728:	4b7f      	ldr	r3, [pc, #508]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0ef      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003734:	7cfb      	ldrb	r3, [r7, #19]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d155      	bne.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800373a:	4b7a      	ldr	r3, [pc, #488]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800373c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003740:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003744:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d01e      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	429a      	cmp	r2, r3
 8003754:	d019      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003756:	4b73      	ldr	r3, [pc, #460]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003760:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003762:	4b70      	ldr	r3, [pc, #448]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003768:	4a6e      	ldr	r2, [pc, #440]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800376a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800376e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003772:	4b6c      	ldr	r3, [pc, #432]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003778:	4a6a      	ldr	r2, [pc, #424]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800377a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800377e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003782:	4a68      	ldr	r2, [pc, #416]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d016      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003794:	f7fd fd3a 	bl	800120c <HAL_GetTick>
 8003798:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800379a:	e00b      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800379c:	f7fd fd36 	bl	800120c <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d902      	bls.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	74fb      	strb	r3, [r7, #19]
            break;
 80037b2:	e006      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037b4:	4b5b      	ldr	r3, [pc, #364]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0ec      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80037c2:	7cfb      	ldrb	r3, [r7, #19]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10b      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037c8:	4b56      	ldr	r3, [pc, #344]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d6:	4953      	ldr	r1, [pc, #332]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037de:	e004      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037e0:	7cfb      	ldrb	r3, [r7, #19]
 80037e2:	74bb      	strb	r3, [r7, #18]
 80037e4:	e001      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e6:	7cfb      	ldrb	r3, [r7, #19]
 80037e8:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037ea:	7c7b      	ldrb	r3, [r7, #17]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d105      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f0:	4b4c      	ldr	r3, [pc, #304]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f4:	4a4b      	ldr	r2, [pc, #300]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80037f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003808:	4b46      	ldr	r3, [pc, #280]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380e:	f023 0203 	bic.w	r2, r3, #3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	4943      	ldr	r1, [pc, #268]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003818:	4313      	orrs	r3, r2
 800381a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800382a:	4b3e      	ldr	r3, [pc, #248]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800382c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003830:	f023 020c 	bic.w	r2, r3, #12
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	493a      	ldr	r1, [pc, #232]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0320 	and.w	r3, r3, #32
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800384c:	4b35      	ldr	r3, [pc, #212]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800384e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003852:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	4932      	ldr	r1, [pc, #200]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800386e:	4b2d      	ldr	r3, [pc, #180]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003874:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387c:	4929      	ldr	r1, [pc, #164]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003890:	4b24      	ldr	r3, [pc, #144]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003896:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389e:	4921      	ldr	r1, [pc, #132]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038b2:	4b1c      	ldr	r3, [pc, #112]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	4918      	ldr	r1, [pc, #96]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038d4:	4b13      	ldr	r3, [pc, #76]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	4910      	ldr	r1, [pc, #64]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d02c      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038f6:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80038f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	4907      	ldr	r1, [pc, #28]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003914:	d10a      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003916:	4b03      	ldr	r3, [pc, #12]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	4a02      	ldr	r2, [pc, #8]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800391c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003920:	60d3      	str	r3, [r2, #12]
 8003922:	e015      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003924:	40021000 	.word	0x40021000
 8003928:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003934:	d10c      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3304      	adds	r3, #4
 800393a:	2101      	movs	r1, #1
 800393c:	4618      	mov	r0, r3
 800393e:	f000 f881 	bl	8003a44 <RCCEx_PLLSAI1_Config>
 8003942:	4603      	mov	r3, r0
 8003944:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003946:	7cfb      	ldrb	r3, [r7, #19]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 800394c:	7cfb      	ldrb	r3, [r7, #19]
 800394e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d028      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800395c:	4b30      	ldr	r3, [pc, #192]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800395e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003962:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396a:	492d      	ldr	r1, [pc, #180]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800396c:	4313      	orrs	r3, r2
 800396e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003976:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800397a:	d106      	bne.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800397c:	4b28      	ldr	r3, [pc, #160]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	4a27      	ldr	r2, [pc, #156]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003982:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003986:	60d3      	str	r3, [r2, #12]
 8003988:	e011      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003992:	d10c      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3304      	adds	r3, #4
 8003998:	2101      	movs	r1, #1
 800399a:	4618      	mov	r0, r3
 800399c:	f000 f852 	bl	8003a44 <RCCEx_PLLSAI1_Config>
 80039a0:	4603      	mov	r3, r0
 80039a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039a4:	7cfb      	ldrb	r3, [r7, #19]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 80039aa:	7cfb      	ldrb	r3, [r7, #19]
 80039ac:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d01c      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039ba:	4b19      	ldr	r3, [pc, #100]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c8:	4915      	ldr	r1, [pc, #84]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039d8:	d10c      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3304      	adds	r3, #4
 80039de:	2102      	movs	r1, #2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 f82f 	bl	8003a44 <RCCEx_PLLSAI1_Config>
 80039e6:	4603      	mov	r3, r0
 80039e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039ea:	7cfb      	ldrb	r3, [r7, #19]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80039f0:	7cfb      	ldrb	r3, [r7, #19]
 80039f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00a      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a00:	4b07      	ldr	r3, [pc, #28]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a06:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0e:	4904      	ldr	r1, [pc, #16]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a16:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40021000 	.word	0x40021000

08003a24 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003a28:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a04      	ldr	r2, [pc, #16]	; (8003a40 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003a2e:	f043 0304 	orr.w	r3, r3, #4
 8003a32:	6013      	str	r3, [r2, #0]
}
 8003a34:	bf00      	nop
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40021000 	.word	0x40021000

08003a44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a52:	4b74      	ldr	r3, [pc, #464]	; (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d018      	beq.n	8003a90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a5e:	4b71      	ldr	r3, [pc, #452]	; (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f003 0203 	and.w	r2, r3, #3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d10d      	bne.n	8003a8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
       ||
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d009      	beq.n	8003a8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a76:	4b6b      	ldr	r3, [pc, #428]	; (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	091b      	lsrs	r3, r3, #4
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
       ||
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d047      	beq.n	8003b1a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	73fb      	strb	r3, [r7, #15]
 8003a8e:	e044      	b.n	8003b1a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d018      	beq.n	8003aca <RCCEx_PLLSAI1_Config+0x86>
 8003a98:	2b03      	cmp	r3, #3
 8003a9a:	d825      	bhi.n	8003ae8 <RCCEx_PLLSAI1_Config+0xa4>
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d002      	beq.n	8003aa6 <RCCEx_PLLSAI1_Config+0x62>
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d009      	beq.n	8003ab8 <RCCEx_PLLSAI1_Config+0x74>
 8003aa4:	e020      	b.n	8003ae8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003aa6:	4b5f      	ldr	r3, [pc, #380]	; (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d11d      	bne.n	8003aee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ab6:	e01a      	b.n	8003aee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ab8:	4b5a      	ldr	r3, [pc, #360]	; (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d116      	bne.n	8003af2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ac8:	e013      	b.n	8003af2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003aca:	4b56      	ldr	r3, [pc, #344]	; (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10f      	bne.n	8003af6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ad6:	4b53      	ldr	r3, [pc, #332]	; (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d109      	bne.n	8003af6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ae6:	e006      	b.n	8003af6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	73fb      	strb	r3, [r7, #15]
      break;
 8003aec:	e004      	b.n	8003af8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aee:	bf00      	nop
 8003af0:	e002      	b.n	8003af8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003af2:	bf00      	nop
 8003af4:	e000      	b.n	8003af8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003af6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10d      	bne.n	8003b1a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003afe:	4b49      	ldr	r3, [pc, #292]	; (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6819      	ldr	r1, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	430b      	orrs	r3, r1
 8003b14:	4943      	ldr	r1, [pc, #268]	; (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d17c      	bne.n	8003c1a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b20:	4b40      	ldr	r3, [pc, #256]	; (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a3f      	ldr	r2, [pc, #252]	; (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b2c:	f7fd fb6e 	bl	800120c <HAL_GetTick>
 8003b30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b32:	e009      	b.n	8003b48 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b34:	f7fd fb6a 	bl	800120c <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d902      	bls.n	8003b48 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	73fb      	strb	r3, [r7, #15]
        break;
 8003b46:	e005      	b.n	8003b54 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b48:	4b36      	ldr	r3, [pc, #216]	; (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1ef      	bne.n	8003b34 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d15f      	bne.n	8003c1a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d110      	bne.n	8003b82 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b60:	4b30      	ldr	r3, [pc, #192]	; (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003b68:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6892      	ldr	r2, [r2, #8]
 8003b70:	0211      	lsls	r1, r2, #8
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	68d2      	ldr	r2, [r2, #12]
 8003b76:	06d2      	lsls	r2, r2, #27
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	492a      	ldr	r1, [pc, #168]	; (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	610b      	str	r3, [r1, #16]
 8003b80:	e027      	b.n	8003bd2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d112      	bne.n	8003bae <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b88:	4b26      	ldr	r3, [pc, #152]	; (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6892      	ldr	r2, [r2, #8]
 8003b98:	0211      	lsls	r1, r2, #8
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6912      	ldr	r2, [r2, #16]
 8003b9e:	0852      	lsrs	r2, r2, #1
 8003ba0:	3a01      	subs	r2, #1
 8003ba2:	0552      	lsls	r2, r2, #21
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	491f      	ldr	r1, [pc, #124]	; (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	610b      	str	r3, [r1, #16]
 8003bac:	e011      	b.n	8003bd2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bae:	4b1d      	ldr	r3, [pc, #116]	; (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003bb6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6892      	ldr	r2, [r2, #8]
 8003bbe:	0211      	lsls	r1, r2, #8
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6952      	ldr	r2, [r2, #20]
 8003bc4:	0852      	lsrs	r2, r2, #1
 8003bc6:	3a01      	subs	r2, #1
 8003bc8:	0652      	lsls	r2, r2, #25
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	4915      	ldr	r1, [pc, #84]	; (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003bd2:	4b14      	ldr	r3, [pc, #80]	; (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a13      	ldr	r2, [pc, #76]	; (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bdc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bde:	f7fd fb15 	bl	800120c <HAL_GetTick>
 8003be2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003be4:	e009      	b.n	8003bfa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003be6:	f7fd fb11 	bl	800120c <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d902      	bls.n	8003bfa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	73fb      	strb	r3, [r7, #15]
          break;
 8003bf8:	e005      	b.n	8003c06 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bfa:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0ef      	beq.n	8003be6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d106      	bne.n	8003c1a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c0c:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	4903      	ldr	r1, [pc, #12]	; (8003c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40021000 	.word	0x40021000

08003c28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e049      	b.n	8003cce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f841 	bl	8003cd6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3304      	adds	r3, #4
 8003c64:	4619      	mov	r1, r3
 8003c66:	4610      	mov	r0, r2
 8003c68:	f000 f9dc 	bl	8004024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
	...

08003cec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d001      	beq.n	8003d04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e03b      	b.n	8003d7c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0201 	orr.w	r2, r2, #1
 8003d1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a19      	ldr	r2, [pc, #100]	; (8003d88 <HAL_TIM_Base_Start_IT+0x9c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d009      	beq.n	8003d3a <HAL_TIM_Base_Start_IT+0x4e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d2e:	d004      	beq.n	8003d3a <HAL_TIM_Base_Start_IT+0x4e>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a15      	ldr	r2, [pc, #84]	; (8003d8c <HAL_TIM_Base_Start_IT+0xa0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d115      	bne.n	8003d66 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	4b13      	ldr	r3, [pc, #76]	; (8003d90 <HAL_TIM_Base_Start_IT+0xa4>)
 8003d42:	4013      	ands	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2b06      	cmp	r3, #6
 8003d4a:	d015      	beq.n	8003d78 <HAL_TIM_Base_Start_IT+0x8c>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d52:	d011      	beq.n	8003d78 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0201 	orr.w	r2, r2, #1
 8003d62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d64:	e008      	b.n	8003d78 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f042 0201 	orr.w	r2, r2, #1
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	e000      	b.n	8003d7a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	40012c00 	.word	0x40012c00
 8003d8c:	40014000 	.word	0x40014000
 8003d90:	00010007 	.word	0x00010007

08003d94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d122      	bne.n	8003df0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d11b      	bne.n	8003df0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0202 	mvn.w	r2, #2
 8003dc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f905 	bl	8003fe6 <HAL_TIM_IC_CaptureCallback>
 8003ddc:	e005      	b.n	8003dea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f8f7 	bl	8003fd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f908 	bl	8003ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d122      	bne.n	8003e44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d11b      	bne.n	8003e44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f06f 0204 	mvn.w	r2, #4
 8003e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2202      	movs	r2, #2
 8003e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f8db 	bl	8003fe6 <HAL_TIM_IC_CaptureCallback>
 8003e30:	e005      	b.n	8003e3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f8cd 	bl	8003fd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f8de 	bl	8003ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	2b08      	cmp	r3, #8
 8003e50:	d122      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d11b      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f06f 0208 	mvn.w	r2, #8
 8003e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2204      	movs	r2, #4
 8003e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f8b1 	bl	8003fe6 <HAL_TIM_IC_CaptureCallback>
 8003e84:	e005      	b.n	8003e92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f8a3 	bl	8003fd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f8b4 	bl	8003ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f003 0310 	and.w	r3, r3, #16
 8003ea2:	2b10      	cmp	r3, #16
 8003ea4:	d122      	bne.n	8003eec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f003 0310 	and.w	r3, r3, #16
 8003eb0:	2b10      	cmp	r3, #16
 8003eb2:	d11b      	bne.n	8003eec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f06f 0210 	mvn.w	r2, #16
 8003ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2208      	movs	r2, #8
 8003ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f887 	bl	8003fe6 <HAL_TIM_IC_CaptureCallback>
 8003ed8:	e005      	b.n	8003ee6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f879 	bl	8003fd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f88a 	bl	8003ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d10e      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d107      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f06f 0201 	mvn.w	r2, #1
 8003f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7fc fe5a 	bl	8000bcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f22:	2b80      	cmp	r3, #128	; 0x80
 8003f24:	d10e      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f30:	2b80      	cmp	r3, #128	; 0x80
 8003f32:	d107      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f8de 	bl	8004100 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f52:	d10e      	bne.n	8003f72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5e:	2b80      	cmp	r3, #128	; 0x80
 8003f60:	d107      	bne.n	8003f72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f8d1 	bl	8004114 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7c:	2b40      	cmp	r3, #64	; 0x40
 8003f7e:	d10e      	bne.n	8003f9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8a:	2b40      	cmp	r3, #64	; 0x40
 8003f8c:	d107      	bne.n	8003f9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f838 	bl	800400e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	f003 0320 	and.w	r3, r3, #32
 8003fa8:	2b20      	cmp	r3, #32
 8003faa:	d10e      	bne.n	8003fca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b20      	cmp	r3, #32
 8003fb8:	d107      	bne.n	8003fca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f06f 0220 	mvn.w	r2, #32
 8003fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f891 	bl	80040ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fca:	bf00      	nop
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
	...

08004024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a2a      	ldr	r2, [pc, #168]	; (80040e0 <TIM_Base_SetConfig+0xbc>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d003      	beq.n	8004044 <TIM_Base_SetConfig+0x20>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004042:	d108      	bne.n	8004056 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	4313      	orrs	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a21      	ldr	r2, [pc, #132]	; (80040e0 <TIM_Base_SetConfig+0xbc>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00b      	beq.n	8004076 <TIM_Base_SetConfig+0x52>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004064:	d007      	beq.n	8004076 <TIM_Base_SetConfig+0x52>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a1e      	ldr	r2, [pc, #120]	; (80040e4 <TIM_Base_SetConfig+0xc0>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d003      	beq.n	8004076 <TIM_Base_SetConfig+0x52>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a1d      	ldr	r2, [pc, #116]	; (80040e8 <TIM_Base_SetConfig+0xc4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d108      	bne.n	8004088 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800407c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4313      	orrs	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a0c      	ldr	r2, [pc, #48]	; (80040e0 <TIM_Base_SetConfig+0xbc>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d007      	beq.n	80040c4 <TIM_Base_SetConfig+0xa0>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a0b      	ldr	r2, [pc, #44]	; (80040e4 <TIM_Base_SetConfig+0xc0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d003      	beq.n	80040c4 <TIM_Base_SetConfig+0xa0>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a0a      	ldr	r2, [pc, #40]	; (80040e8 <TIM_Base_SetConfig+0xc4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d103      	bne.n	80040cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	615a      	str	r2, [r3, #20]
}
 80040d2:	bf00      	nop
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40012c00 	.word	0x40012c00
 80040e4:	40014000 	.word	0x40014000
 80040e8:	40014400 	.word	0x40014400

080040ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e040      	b.n	80041bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800413e:	2b00      	cmp	r3, #0
 8004140:	d106      	bne.n	8004150 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fc fe62 	bl	8000e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2224      	movs	r2, #36	; 0x24
 8004154:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0201 	bic.w	r2, r2, #1
 8004164:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f92e 	bl	80043c8 <UART_SetConfig>
 800416c:	4603      	mov	r3, r0
 800416e:	2b01      	cmp	r3, #1
 8004170:	d101      	bne.n	8004176 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e022      	b.n	80041bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fb2e 	bl	80047e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004192:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0201 	orr.w	r2, r2, #1
 80041b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 fbb5 	bl	8004924 <UART_CheckIdleState>
 80041ba:	4603      	mov	r3, r0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08a      	sub	sp, #40	; 0x28
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	603b      	str	r3, [r7, #0]
 80041d0:	4613      	mov	r3, r2
 80041d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041d8:	2b20      	cmp	r3, #32
 80041da:	f040 8082 	bne.w	80042e2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <HAL_UART_Transmit+0x26>
 80041e4:	88fb      	ldrh	r3, [r7, #6]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e07a      	b.n	80042e4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <HAL_UART_Transmit+0x38>
 80041f8:	2302      	movs	r3, #2
 80041fa:	e073      	b.n	80042e4 <HAL_UART_Transmit+0x120>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2221      	movs	r2, #33	; 0x21
 8004210:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004212:	f7fc fffb 	bl	800120c <HAL_GetTick>
 8004216:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	88fa      	ldrh	r2, [r7, #6]
 800421c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	88fa      	ldrh	r2, [r7, #6]
 8004224:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004230:	d108      	bne.n	8004244 <HAL_UART_Transmit+0x80>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d104      	bne.n	8004244 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800423a:	2300      	movs	r3, #0
 800423c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	61bb      	str	r3, [r7, #24]
 8004242:	e003      	b.n	800424c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004248:	2300      	movs	r3, #0
 800424a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004254:	e02d      	b.n	80042b2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2200      	movs	r2, #0
 800425e:	2180      	movs	r1, #128	; 0x80
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 fba8 	bl	80049b6 <UART_WaitOnFlagUntilTimeout>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e039      	b.n	80042e4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10b      	bne.n	800428e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	881a      	ldrh	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004282:	b292      	uxth	r2, r2
 8004284:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	3302      	adds	r3, #2
 800428a:	61bb      	str	r3, [r7, #24]
 800428c:	e008      	b.n	80042a0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	781a      	ldrb	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	b292      	uxth	r2, r2
 8004298:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	3301      	adds	r3, #1
 800429e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	3b01      	subs	r3, #1
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1cb      	bne.n	8004256 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2200      	movs	r2, #0
 80042c6:	2140      	movs	r1, #64	; 0x40
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 fb74 	bl	80049b6 <UART_WaitOnFlagUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e005      	b.n	80042e4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2220      	movs	r2, #32
 80042dc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	e000      	b.n	80042e4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80042e2:	2302      	movs	r3, #2
  }
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3720      	adds	r7, #32
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	4613      	mov	r3, r2
 80042f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042fe:	2b20      	cmp	r3, #32
 8004300:	d131      	bne.n	8004366 <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d002      	beq.n	800430e <HAL_UART_Receive_DMA+0x22>
 8004308:	88fb      	ldrh	r3, [r7, #6]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e02a      	b.n	8004368 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_UART_Receive_DMA+0x34>
 800431c:	2302      	movs	r3, #2
 800431e:	e023      	b.n	8004368 <HAL_UART_Receive_DMA+0x7c>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a0f      	ldr	r2, [pc, #60]	; (8004370 <HAL_UART_Receive_DMA+0x84>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00e      	beq.n	8004356 <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d007      	beq.n	8004356 <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004354:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004356:	88fb      	ldrh	r3, [r7, #6]
 8004358:	461a      	mov	r2, r3
 800435a:	68b9      	ldr	r1, [r7, #8]
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 fba7 	bl	8004ab0 <UART_Start_Receive_DMA>
 8004362:	4603      	mov	r3, r0
 8004364:	e000      	b.n	8004368 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8004366:	2302      	movs	r3, #2
  }
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40008000 	.word	0x40008000

08004374 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043c8:	b5b0      	push	{r4, r5, r7, lr}
 80043ca:	b088      	sub	sp, #32
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	4baf      	ldr	r3, [pc, #700]	; (80046b0 <UART_SetConfig+0x2e8>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6812      	ldr	r2, [r2, #0]
 80043fa:	69f9      	ldr	r1, [r7, #28]
 80043fc:	430b      	orrs	r3, r1
 80043fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4aa4      	ldr	r2, [pc, #656]	; (80046b4 <UART_SetConfig+0x2ec>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d004      	beq.n	8004430 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	69fa      	ldr	r2, [r7, #28]
 800442c:	4313      	orrs	r3, r2
 800442e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69fa      	ldr	r2, [r7, #28]
 8004440:	430a      	orrs	r2, r1
 8004442:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a9b      	ldr	r2, [pc, #620]	; (80046b8 <UART_SetConfig+0x2f0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d121      	bne.n	8004492 <UART_SetConfig+0xca>
 800444e:	4b9b      	ldr	r3, [pc, #620]	; (80046bc <UART_SetConfig+0x2f4>)
 8004450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004454:	f003 0303 	and.w	r3, r3, #3
 8004458:	2b03      	cmp	r3, #3
 800445a:	d817      	bhi.n	800448c <UART_SetConfig+0xc4>
 800445c:	a201      	add	r2, pc, #4	; (adr r2, 8004464 <UART_SetConfig+0x9c>)
 800445e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004462:	bf00      	nop
 8004464:	08004475 	.word	0x08004475
 8004468:	08004481 	.word	0x08004481
 800446c:	0800447b 	.word	0x0800447b
 8004470:	08004487 	.word	0x08004487
 8004474:	2301      	movs	r3, #1
 8004476:	76fb      	strb	r3, [r7, #27]
 8004478:	e070      	b.n	800455c <UART_SetConfig+0x194>
 800447a:	2302      	movs	r3, #2
 800447c:	76fb      	strb	r3, [r7, #27]
 800447e:	e06d      	b.n	800455c <UART_SetConfig+0x194>
 8004480:	2304      	movs	r3, #4
 8004482:	76fb      	strb	r3, [r7, #27]
 8004484:	e06a      	b.n	800455c <UART_SetConfig+0x194>
 8004486:	2308      	movs	r3, #8
 8004488:	76fb      	strb	r3, [r7, #27]
 800448a:	e067      	b.n	800455c <UART_SetConfig+0x194>
 800448c:	2310      	movs	r3, #16
 800448e:	76fb      	strb	r3, [r7, #27]
 8004490:	e064      	b.n	800455c <UART_SetConfig+0x194>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a8a      	ldr	r2, [pc, #552]	; (80046c0 <UART_SetConfig+0x2f8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d132      	bne.n	8004502 <UART_SetConfig+0x13a>
 800449c:	4b87      	ldr	r3, [pc, #540]	; (80046bc <UART_SetConfig+0x2f4>)
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a2:	f003 030c 	and.w	r3, r3, #12
 80044a6:	2b0c      	cmp	r3, #12
 80044a8:	d828      	bhi.n	80044fc <UART_SetConfig+0x134>
 80044aa:	a201      	add	r2, pc, #4	; (adr r2, 80044b0 <UART_SetConfig+0xe8>)
 80044ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b0:	080044e5 	.word	0x080044e5
 80044b4:	080044fd 	.word	0x080044fd
 80044b8:	080044fd 	.word	0x080044fd
 80044bc:	080044fd 	.word	0x080044fd
 80044c0:	080044f1 	.word	0x080044f1
 80044c4:	080044fd 	.word	0x080044fd
 80044c8:	080044fd 	.word	0x080044fd
 80044cc:	080044fd 	.word	0x080044fd
 80044d0:	080044eb 	.word	0x080044eb
 80044d4:	080044fd 	.word	0x080044fd
 80044d8:	080044fd 	.word	0x080044fd
 80044dc:	080044fd 	.word	0x080044fd
 80044e0:	080044f7 	.word	0x080044f7
 80044e4:	2300      	movs	r3, #0
 80044e6:	76fb      	strb	r3, [r7, #27]
 80044e8:	e038      	b.n	800455c <UART_SetConfig+0x194>
 80044ea:	2302      	movs	r3, #2
 80044ec:	76fb      	strb	r3, [r7, #27]
 80044ee:	e035      	b.n	800455c <UART_SetConfig+0x194>
 80044f0:	2304      	movs	r3, #4
 80044f2:	76fb      	strb	r3, [r7, #27]
 80044f4:	e032      	b.n	800455c <UART_SetConfig+0x194>
 80044f6:	2308      	movs	r3, #8
 80044f8:	76fb      	strb	r3, [r7, #27]
 80044fa:	e02f      	b.n	800455c <UART_SetConfig+0x194>
 80044fc:	2310      	movs	r3, #16
 80044fe:	76fb      	strb	r3, [r7, #27]
 8004500:	e02c      	b.n	800455c <UART_SetConfig+0x194>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a6b      	ldr	r2, [pc, #428]	; (80046b4 <UART_SetConfig+0x2ec>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d125      	bne.n	8004558 <UART_SetConfig+0x190>
 800450c:	4b6b      	ldr	r3, [pc, #428]	; (80046bc <UART_SetConfig+0x2f4>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004512:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004516:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800451a:	d017      	beq.n	800454c <UART_SetConfig+0x184>
 800451c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004520:	d817      	bhi.n	8004552 <UART_SetConfig+0x18a>
 8004522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004526:	d00b      	beq.n	8004540 <UART_SetConfig+0x178>
 8004528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800452c:	d811      	bhi.n	8004552 <UART_SetConfig+0x18a>
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <UART_SetConfig+0x172>
 8004532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004536:	d006      	beq.n	8004546 <UART_SetConfig+0x17e>
 8004538:	e00b      	b.n	8004552 <UART_SetConfig+0x18a>
 800453a:	2300      	movs	r3, #0
 800453c:	76fb      	strb	r3, [r7, #27]
 800453e:	e00d      	b.n	800455c <UART_SetConfig+0x194>
 8004540:	2302      	movs	r3, #2
 8004542:	76fb      	strb	r3, [r7, #27]
 8004544:	e00a      	b.n	800455c <UART_SetConfig+0x194>
 8004546:	2304      	movs	r3, #4
 8004548:	76fb      	strb	r3, [r7, #27]
 800454a:	e007      	b.n	800455c <UART_SetConfig+0x194>
 800454c:	2308      	movs	r3, #8
 800454e:	76fb      	strb	r3, [r7, #27]
 8004550:	e004      	b.n	800455c <UART_SetConfig+0x194>
 8004552:	2310      	movs	r3, #16
 8004554:	76fb      	strb	r3, [r7, #27]
 8004556:	e001      	b.n	800455c <UART_SetConfig+0x194>
 8004558:	2310      	movs	r3, #16
 800455a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a54      	ldr	r2, [pc, #336]	; (80046b4 <UART_SetConfig+0x2ec>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d173      	bne.n	800464e <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004566:	7efb      	ldrb	r3, [r7, #27]
 8004568:	2b08      	cmp	r3, #8
 800456a:	d824      	bhi.n	80045b6 <UART_SetConfig+0x1ee>
 800456c:	a201      	add	r2, pc, #4	; (adr r2, 8004574 <UART_SetConfig+0x1ac>)
 800456e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004572:	bf00      	nop
 8004574:	08004599 	.word	0x08004599
 8004578:	080045b7 	.word	0x080045b7
 800457c:	080045a1 	.word	0x080045a1
 8004580:	080045b7 	.word	0x080045b7
 8004584:	080045a7 	.word	0x080045a7
 8004588:	080045b7 	.word	0x080045b7
 800458c:	080045b7 	.word	0x080045b7
 8004590:	080045b7 	.word	0x080045b7
 8004594:	080045af 	.word	0x080045af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004598:	f7fe ff92 	bl	80034c0 <HAL_RCC_GetPCLK1Freq>
 800459c:	6178      	str	r0, [r7, #20]
        break;
 800459e:	e00f      	b.n	80045c0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045a0:	4b48      	ldr	r3, [pc, #288]	; (80046c4 <UART_SetConfig+0x2fc>)
 80045a2:	617b      	str	r3, [r7, #20]
        break;
 80045a4:	e00c      	b.n	80045c0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045a6:	f7fe fef5 	bl	8003394 <HAL_RCC_GetSysClockFreq>
 80045aa:	6178      	str	r0, [r7, #20]
        break;
 80045ac:	e008      	b.n	80045c0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045b2:	617b      	str	r3, [r7, #20]
        break;
 80045b4:	e004      	b.n	80045c0 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	76bb      	strb	r3, [r7, #26]
        break;
 80045be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 80fe 	beq.w	80047c4 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	4613      	mov	r3, r2
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	4413      	add	r3, r2
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d305      	bcc.n	80045e4 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d902      	bls.n	80045ea <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	76bb      	strb	r3, [r7, #26]
 80045e8:	e0ec      	b.n	80047c4 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f04f 0100 	mov.w	r1, #0
 80045f2:	f04f 0200 	mov.w	r2, #0
 80045f6:	f04f 0300 	mov.w	r3, #0
 80045fa:	020b      	lsls	r3, r1, #8
 80045fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004600:	0202      	lsls	r2, r0, #8
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	6849      	ldr	r1, [r1, #4]
 8004606:	0849      	lsrs	r1, r1, #1
 8004608:	4608      	mov	r0, r1
 800460a:	f04f 0100 	mov.w	r1, #0
 800460e:	1814      	adds	r4, r2, r0
 8004610:	eb43 0501 	adc.w	r5, r3, r1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	461a      	mov	r2, r3
 800461a:	f04f 0300 	mov.w	r3, #0
 800461e:	4620      	mov	r0, r4
 8004620:	4629      	mov	r1, r5
 8004622:	f7fb fe2d 	bl	8000280 <__aeabi_uldivmod>
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	4613      	mov	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004634:	d308      	bcc.n	8004648 <UART_SetConfig+0x280>
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800463c:	d204      	bcs.n	8004648 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	60da      	str	r2, [r3, #12]
 8004646:	e0bd      	b.n	80047c4 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	76bb      	strb	r3, [r7, #26]
 800464c:	e0ba      	b.n	80047c4 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004656:	d168      	bne.n	800472a <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8004658:	7efb      	ldrb	r3, [r7, #27]
 800465a:	2b08      	cmp	r3, #8
 800465c:	d834      	bhi.n	80046c8 <UART_SetConfig+0x300>
 800465e:	a201      	add	r2, pc, #4	; (adr r2, 8004664 <UART_SetConfig+0x29c>)
 8004660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004664:	08004689 	.word	0x08004689
 8004668:	08004691 	.word	0x08004691
 800466c:	08004699 	.word	0x08004699
 8004670:	080046c9 	.word	0x080046c9
 8004674:	0800469f 	.word	0x0800469f
 8004678:	080046c9 	.word	0x080046c9
 800467c:	080046c9 	.word	0x080046c9
 8004680:	080046c9 	.word	0x080046c9
 8004684:	080046a7 	.word	0x080046a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004688:	f7fe ff1a 	bl	80034c0 <HAL_RCC_GetPCLK1Freq>
 800468c:	6178      	str	r0, [r7, #20]
        break;
 800468e:	e020      	b.n	80046d2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004690:	f7fe ff2c 	bl	80034ec <HAL_RCC_GetPCLK2Freq>
 8004694:	6178      	str	r0, [r7, #20]
        break;
 8004696:	e01c      	b.n	80046d2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <UART_SetConfig+0x2fc>)
 800469a:	617b      	str	r3, [r7, #20]
        break;
 800469c:	e019      	b.n	80046d2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800469e:	f7fe fe79 	bl	8003394 <HAL_RCC_GetSysClockFreq>
 80046a2:	6178      	str	r0, [r7, #20]
        break;
 80046a4:	e015      	b.n	80046d2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046aa:	617b      	str	r3, [r7, #20]
        break;
 80046ac:	e011      	b.n	80046d2 <UART_SetConfig+0x30a>
 80046ae:	bf00      	nop
 80046b0:	efff69f3 	.word	0xefff69f3
 80046b4:	40008000 	.word	0x40008000
 80046b8:	40013800 	.word	0x40013800
 80046bc:	40021000 	.word	0x40021000
 80046c0:	40004400 	.word	0x40004400
 80046c4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	76bb      	strb	r3, [r7, #26]
        break;
 80046d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d075      	beq.n	80047c4 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	005a      	lsls	r2, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	085b      	lsrs	r3, r3, #1
 80046e2:	441a      	add	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	2b0f      	cmp	r3, #15
 80046f4:	d916      	bls.n	8004724 <UART_SetConfig+0x35c>
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046fc:	d212      	bcs.n	8004724 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	b29b      	uxth	r3, r3
 8004702:	f023 030f 	bic.w	r3, r3, #15
 8004706:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	085b      	lsrs	r3, r3, #1
 800470c:	b29b      	uxth	r3, r3
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	b29a      	uxth	r2, r3
 8004714:	89fb      	ldrh	r3, [r7, #14]
 8004716:	4313      	orrs	r3, r2
 8004718:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	89fa      	ldrh	r2, [r7, #14]
 8004720:	60da      	str	r2, [r3, #12]
 8004722:	e04f      	b.n	80047c4 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	76bb      	strb	r3, [r7, #26]
 8004728:	e04c      	b.n	80047c4 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800472a:	7efb      	ldrb	r3, [r7, #27]
 800472c:	2b08      	cmp	r3, #8
 800472e:	d828      	bhi.n	8004782 <UART_SetConfig+0x3ba>
 8004730:	a201      	add	r2, pc, #4	; (adr r2, 8004738 <UART_SetConfig+0x370>)
 8004732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004736:	bf00      	nop
 8004738:	0800475d 	.word	0x0800475d
 800473c:	08004765 	.word	0x08004765
 8004740:	0800476d 	.word	0x0800476d
 8004744:	08004783 	.word	0x08004783
 8004748:	08004773 	.word	0x08004773
 800474c:	08004783 	.word	0x08004783
 8004750:	08004783 	.word	0x08004783
 8004754:	08004783 	.word	0x08004783
 8004758:	0800477b 	.word	0x0800477b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800475c:	f7fe feb0 	bl	80034c0 <HAL_RCC_GetPCLK1Freq>
 8004760:	6178      	str	r0, [r7, #20]
        break;
 8004762:	e013      	b.n	800478c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004764:	f7fe fec2 	bl	80034ec <HAL_RCC_GetPCLK2Freq>
 8004768:	6178      	str	r0, [r7, #20]
        break;
 800476a:	e00f      	b.n	800478c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800476c:	4b1b      	ldr	r3, [pc, #108]	; (80047dc <UART_SetConfig+0x414>)
 800476e:	617b      	str	r3, [r7, #20]
        break;
 8004770:	e00c      	b.n	800478c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004772:	f7fe fe0f 	bl	8003394 <HAL_RCC_GetSysClockFreq>
 8004776:	6178      	str	r0, [r7, #20]
        break;
 8004778:	e008      	b.n	800478c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800477a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800477e:	617b      	str	r3, [r7, #20]
        break;
 8004780:	e004      	b.n	800478c <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	76bb      	strb	r3, [r7, #26]
        break;
 800478a:	bf00      	nop
    }

    if (pclk != 0U)
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d018      	beq.n	80047c4 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	085a      	lsrs	r2, r3, #1
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	441a      	add	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	2b0f      	cmp	r3, #15
 80047ac:	d908      	bls.n	80047c0 <UART_SetConfig+0x3f8>
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b4:	d204      	bcs.n	80047c0 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	60da      	str	r2, [r3, #12]
 80047be:	e001      	b.n	80047c4 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80047d0:	7ebb      	ldrb	r3, [r7, #26]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3720      	adds	r7, #32
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bdb0      	pop	{r4, r5, r7, pc}
 80047da:	bf00      	nop
 80047dc:	00f42400 	.word	0x00f42400

080047e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00a      	beq.n	800480a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	f003 0308 	and.w	r3, r3, #8
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	f003 0310 	and.w	r3, r3, #16
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00a      	beq.n	8004892 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	f003 0320 	and.w	r3, r3, #32
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00a      	beq.n	80048b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01a      	beq.n	80048f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048de:	d10a      	bne.n	80048f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	605a      	str	r2, [r3, #4]
  }
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af02      	add	r7, sp, #8
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004934:	f7fc fc6a 	bl	800120c <HAL_GetTick>
 8004938:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0308 	and.w	r3, r3, #8
 8004944:	2b08      	cmp	r3, #8
 8004946:	d10e      	bne.n	8004966 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004948:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f82d 	bl	80049b6 <UART_WaitOnFlagUntilTimeout>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e023      	b.n	80049ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b04      	cmp	r3, #4
 8004972:	d10e      	bne.n	8004992 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004974:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f817 	bl	80049b6 <UART_WaitOnFlagUntilTimeout>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e00d      	b.n	80049ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2220      	movs	r2, #32
 8004996:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2220      	movs	r2, #32
 800499c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b084      	sub	sp, #16
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	60f8      	str	r0, [r7, #12]
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	603b      	str	r3, [r7, #0]
 80049c2:	4613      	mov	r3, r2
 80049c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049c6:	e05e      	b.n	8004a86 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ce:	d05a      	beq.n	8004a86 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d0:	f7fc fc1c 	bl	800120c <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d302      	bcc.n	80049e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d11b      	bne.n	8004a1e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049f4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0201 	bic.w	r2, r2, #1
 8004a04:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e043      	b.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d02c      	beq.n	8004a86 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a3a:	d124      	bne.n	8004a86 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a44:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a54:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0201 	bic.w	r2, r2, #1
 8004a64:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2220      	movs	r2, #32
 8004a76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e00f      	b.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	69da      	ldr	r2, [r3, #28]
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	bf0c      	ite	eq
 8004a96:	2301      	moveq	r3, #1
 8004a98:	2300      	movne	r3, #0
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	79fb      	ldrb	r3, [r7, #7]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d091      	beq.n	80049c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	4613      	mov	r3, r2
 8004abc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	88fa      	ldrh	r2, [r7, #6]
 8004ac8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2222      	movs	r2, #34	; 0x22
 8004ad8:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d02b      	beq.n	8004b3a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae6:	4a25      	ldr	r2, [pc, #148]	; (8004b7c <UART_Start_Receive_DMA+0xcc>)
 8004ae8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aee:	4a24      	ldr	r2, [pc, #144]	; (8004b80 <UART_Start_Receive_DMA+0xd0>)
 8004af0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af6:	4a23      	ldr	r2, [pc, #140]	; (8004b84 <UART_Start_Receive_DMA+0xd4>)
 8004af8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afe:	2200      	movs	r2, #0
 8004b00:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3324      	adds	r3, #36	; 0x24
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b12:	461a      	mov	r2, r3
 8004b14:	88fb      	ldrh	r3, [r7, #6]
 8004b16:	f7fd fac5 	bl	80020a4 <HAL_DMA_Start_IT>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00c      	beq.n	8004b3a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2210      	movs	r2, #16
 8004b24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2220      	movs	r2, #32
 8004b34:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e01c      	b.n	8004b74 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b50:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689a      	ldr	r2, [r3, #8]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f042 0201 	orr.w	r2, r2, #1
 8004b60:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b70:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	08004c11 	.word	0x08004c11
 8004b80:	08004ca9 	.word	0x08004ca9
 8004b84:	08004ce1 	.word	0x08004ce1

08004b88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004b9e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004bc8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0201 	bic.w	r2, r2, #1
 8004bd8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d107      	bne.n	8004bf2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0210 	bic.w	r2, r2, #16
 8004bf0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0320 	and.w	r3, r3, #32
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d12a      	bne.n	8004c82 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c42:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0201 	bic.w	r2, r2, #1
 8004c52:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689a      	ldr	r2, [r3, #8]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c62:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2220      	movs	r2, #32
 8004c68:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d107      	bne.n	8004c82 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0210 	bic.w	r2, r2, #16
 8004c80:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d107      	bne.n	8004c9a <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c90:	4619      	mov	r1, r3
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f7ff fb8c 	bl	80043b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c98:	e002      	b.n	8004ca0 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f7ff fb6a 	bl	8004374 <HAL_UART_RxCpltCallback>
}
 8004ca0:	bf00      	nop
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d109      	bne.n	8004cd2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004cc4:	085b      	lsrs	r3, r3, #1
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	4619      	mov	r1, r3
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f7ff fb70 	bl	80043b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004cd0:	e002      	b.n	8004cd8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f7ff fb58 	bl	8004388 <HAL_UART_RxHalfCpltCallback>
}
 8004cd8:	bf00      	nop
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cec:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cf2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cf8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d04:	2b80      	cmp	r3, #128	; 0x80
 8004d06:	d109      	bne.n	8004d1c <UART_DMAError+0x3c>
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	2b21      	cmp	r3, #33	; 0x21
 8004d0c:	d106      	bne.n	8004d1c <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004d16:	6978      	ldr	r0, [r7, #20]
 8004d18:	f7ff ff36 	bl	8004b88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d26:	2b40      	cmp	r3, #64	; 0x40
 8004d28:	d109      	bne.n	8004d3e <UART_DMAError+0x5e>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2b22      	cmp	r3, #34	; 0x22
 8004d2e:	d106      	bne.n	8004d3e <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004d38:	6978      	ldr	r0, [r7, #20]
 8004d3a:	f7ff ff3a 	bl	8004bb2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d44:	f043 0210 	orr.w	r2, r3, #16
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d4e:	6978      	ldr	r0, [r7, #20]
 8004d50:	f7ff fb24 	bl	800439c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d54:	bf00      	nop
 8004d56:	3718      	adds	r7, #24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <__NVIC_SetPriority>:
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	4603      	mov	r3, r0
 8004d64:	6039      	str	r1, [r7, #0]
 8004d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	db0a      	blt.n	8004d86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	490c      	ldr	r1, [pc, #48]	; (8004da8 <__NVIC_SetPriority+0x4c>)
 8004d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d7a:	0112      	lsls	r2, r2, #4
 8004d7c:	b2d2      	uxtb	r2, r2
 8004d7e:	440b      	add	r3, r1
 8004d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004d84:	e00a      	b.n	8004d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	4908      	ldr	r1, [pc, #32]	; (8004dac <__NVIC_SetPriority+0x50>)
 8004d8c:	79fb      	ldrb	r3, [r7, #7]
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	3b04      	subs	r3, #4
 8004d94:	0112      	lsls	r2, r2, #4
 8004d96:	b2d2      	uxtb	r2, r2
 8004d98:	440b      	add	r3, r1
 8004d9a:	761a      	strb	r2, [r3, #24]
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	e000e100 	.word	0xe000e100
 8004dac:	e000ed00 	.word	0xe000ed00

08004db0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004db4:	4b05      	ldr	r3, [pc, #20]	; (8004dcc <SysTick_Handler+0x1c>)
 8004db6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004db8:	f001 fcfe 	bl	80067b8 <xTaskGetSchedulerState>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d001      	beq.n	8004dc6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004dc2:	f002 fae9 	bl	8007398 <xPortSysTickHandler>
  }
}
 8004dc6:	bf00      	nop
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	e000e010 	.word	0xe000e010

08004dd0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	f06f 0004 	mvn.w	r0, #4
 8004dda:	f7ff ffbf 	bl	8004d5c <__NVIC_SetPriority>
#endif
}
 8004dde:	bf00      	nop
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dea:	f3ef 8305 	mrs	r3, IPSR
 8004dee:	603b      	str	r3, [r7, #0]
  return(result);
 8004df0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004df6:	f06f 0305 	mvn.w	r3, #5
 8004dfa:	607b      	str	r3, [r7, #4]
 8004dfc:	e00c      	b.n	8004e18 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004dfe:	4b0a      	ldr	r3, [pc, #40]	; (8004e28 <osKernelInitialize+0x44>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d105      	bne.n	8004e12 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004e06:	4b08      	ldr	r3, [pc, #32]	; (8004e28 <osKernelInitialize+0x44>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	607b      	str	r3, [r7, #4]
 8004e10:	e002      	b.n	8004e18 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004e12:	f04f 33ff 	mov.w	r3, #4294967295
 8004e16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004e18:	687b      	ldr	r3, [r7, #4]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	200000a0 	.word	0x200000a0

08004e2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e32:	f3ef 8305 	mrs	r3, IPSR
 8004e36:	603b      	str	r3, [r7, #0]
  return(result);
 8004e38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004e3e:	f06f 0305 	mvn.w	r3, #5
 8004e42:	607b      	str	r3, [r7, #4]
 8004e44:	e010      	b.n	8004e68 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004e46:	4b0b      	ldr	r3, [pc, #44]	; (8004e74 <osKernelStart+0x48>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d109      	bne.n	8004e62 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004e4e:	f7ff ffbf 	bl	8004dd0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004e52:	4b08      	ldr	r3, [pc, #32]	; (8004e74 <osKernelStart+0x48>)
 8004e54:	2202      	movs	r2, #2
 8004e56:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004e58:	f001 f866 	bl	8005f28 <vTaskStartScheduler>
      stat = osOK;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	607b      	str	r3, [r7, #4]
 8004e60:	e002      	b.n	8004e68 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004e62:	f04f 33ff 	mov.w	r3, #4294967295
 8004e66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004e68:	687b      	ldr	r3, [r7, #4]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	200000a0 	.word	0x200000a0

08004e78 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08e      	sub	sp, #56	; 0x38
 8004e7c:	af04      	add	r7, sp, #16
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004e84:	2300      	movs	r3, #0
 8004e86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e88:	f3ef 8305 	mrs	r3, IPSR
 8004e8c:	617b      	str	r3, [r7, #20]
  return(result);
 8004e8e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d17e      	bne.n	8004f92 <osThreadNew+0x11a>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d07b      	beq.n	8004f92 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004e9a:	2380      	movs	r3, #128	; 0x80
 8004e9c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004e9e:	2318      	movs	r3, #24
 8004ea0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eaa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d045      	beq.n	8004f3e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d002      	beq.n	8004ec0 <osThreadNew+0x48>
        name = attr->name;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d008      	beq.n	8004ee6 <osThreadNew+0x6e>
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	2b38      	cmp	r3, #56	; 0x38
 8004ed8:	d805      	bhi.n	8004ee6 <osThreadNew+0x6e>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <osThreadNew+0x72>
        return (NULL);
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	e054      	b.n	8004f94 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	089b      	lsrs	r3, r3, #2
 8004ef8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00e      	beq.n	8004f20 <osThreadNew+0xa8>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	2b5b      	cmp	r3, #91	; 0x5b
 8004f08:	d90a      	bls.n	8004f20 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d006      	beq.n	8004f20 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <osThreadNew+0xa8>
        mem = 1;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	61bb      	str	r3, [r7, #24]
 8004f1e:	e010      	b.n	8004f42 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10c      	bne.n	8004f42 <osThreadNew+0xca>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d108      	bne.n	8004f42 <osThreadNew+0xca>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d104      	bne.n	8004f42 <osThreadNew+0xca>
          mem = 0;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	61bb      	str	r3, [r7, #24]
 8004f3c:	e001      	b.n	8004f42 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d110      	bne.n	8004f6a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f50:	9202      	str	r2, [sp, #8]
 8004f52:	9301      	str	r3, [sp, #4]
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	6a3a      	ldr	r2, [r7, #32]
 8004f5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 fe0c 	bl	8005b7c <xTaskCreateStatic>
 8004f64:	4603      	mov	r3, r0
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	e013      	b.n	8004f92 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d110      	bne.n	8004f92 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	f107 0310 	add.w	r3, r7, #16
 8004f78:	9301      	str	r3, [sp, #4]
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 fe57 	bl	8005c36 <xTaskCreate>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d001      	beq.n	8004f92 <osThreadNew+0x11a>
            hTask = NULL;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004f92:	693b      	ldr	r3, [r7, #16]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3728      	adds	r7, #40	; 0x28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fa4:	f3ef 8305 	mrs	r3, IPSR
 8004fa8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004faa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d003      	beq.n	8004fb8 <osDelay+0x1c>
    stat = osErrorISR;
 8004fb0:	f06f 0305 	mvn.w	r3, #5
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	e007      	b.n	8004fc8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 ff7c 	bl	8005ec0 <vTaskDelay>
    }
  }

  return (stat);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4a07      	ldr	r2, [pc, #28]	; (8005000 <vApplicationGetIdleTaskMemory+0x2c>)
 8004fe4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	4a06      	ldr	r2, [pc, #24]	; (8005004 <vApplicationGetIdleTaskMemory+0x30>)
 8004fea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2280      	movs	r2, #128	; 0x80
 8004ff0:	601a      	str	r2, [r3, #0]
}
 8004ff2:	bf00      	nop
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	200000a4 	.word	0x200000a4
 8005004:	20000100 	.word	0x20000100

08005008 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4a07      	ldr	r2, [pc, #28]	; (8005034 <vApplicationGetTimerTaskMemory+0x2c>)
 8005018:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	4a06      	ldr	r2, [pc, #24]	; (8005038 <vApplicationGetTimerTaskMemory+0x30>)
 800501e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005026:	601a      	str	r2, [r3, #0]
}
 8005028:	bf00      	nop
 800502a:	3714      	adds	r7, #20
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	20000300 	.word	0x20000300
 8005038:	2000035c 	.word	0x2000035c

0800503c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f103 0208 	add.w	r2, r3, #8
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f04f 32ff 	mov.w	r2, #4294967295
 8005054:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f103 0208 	add.w	r2, r3, #8
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f103 0208 	add.w	r2, r3, #8
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005096:	b480      	push	{r7}
 8005098:	b085      	sub	sp, #20
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	601a      	str	r2, [r3, #0]
}
 80050d2:	bf00      	nop
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050de:	b480      	push	{r7}
 80050e0:	b085      	sub	sp, #20
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f4:	d103      	bne.n	80050fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	e00c      	b.n	8005118 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	3308      	adds	r3, #8
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	e002      	b.n	800510c <vListInsert+0x2e>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	429a      	cmp	r2, r3
 8005116:	d2f6      	bcs.n	8005106 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	1c5a      	adds	r2, r3, #1
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	601a      	str	r2, [r3, #0]
}
 8005144:	bf00      	nop
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6892      	ldr	r2, [r2, #8]
 8005166:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6852      	ldr	r2, [r2, #4]
 8005170:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	429a      	cmp	r2, r3
 800517a:	d103      	bne.n	8005184 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	1e5a      	subs	r2, r3, #1
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10a      	bne.n	80051ce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051ca:	bf00      	nop
 80051cc:	e7fe      	b.n	80051cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80051ce:	f002 f851 	bl	8007274 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051da:	68f9      	ldr	r1, [r7, #12]
 80051dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051de:	fb01 f303 	mul.w	r3, r1, r3
 80051e2:	441a      	add	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fe:	3b01      	subs	r3, #1
 8005200:	68f9      	ldr	r1, [r7, #12]
 8005202:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005204:	fb01 f303 	mul.w	r3, r1, r3
 8005208:	441a      	add	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	22ff      	movs	r2, #255	; 0xff
 8005212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	22ff      	movs	r2, #255	; 0xff
 800521a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d114      	bne.n	800524e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d01a      	beq.n	8005262 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	3310      	adds	r3, #16
 8005230:	4618      	mov	r0, r3
 8005232:	f001 f903 	bl	800643c <xTaskRemoveFromEventList>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d012      	beq.n	8005262 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800523c:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <xQueueGenericReset+0xcc>)
 800523e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	e009      	b.n	8005262 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	3310      	adds	r3, #16
 8005252:	4618      	mov	r0, r3
 8005254:	f7ff fef2 	bl	800503c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	3324      	adds	r3, #36	; 0x24
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff feed 	bl	800503c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005262:	f002 f837 	bl	80072d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005266:	2301      	movs	r3, #1
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	e000ed04 	.word	0xe000ed04

08005274 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08e      	sub	sp, #56	; 0x38
 8005278:	af02      	add	r7, sp, #8
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
 8005280:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10a      	bne.n	800529e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528c:	f383 8811 	msr	BASEPRI, r3
 8005290:	f3bf 8f6f 	isb	sy
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800529a:	bf00      	nop
 800529c:	e7fe      	b.n	800529c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10a      	bne.n	80052ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80052a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80052b6:	bf00      	nop
 80052b8:	e7fe      	b.n	80052b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <xQueueGenericCreateStatic+0x52>
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <xQueueGenericCreateStatic+0x56>
 80052c6:	2301      	movs	r3, #1
 80052c8:	e000      	b.n	80052cc <xQueueGenericCreateStatic+0x58>
 80052ca:	2300      	movs	r3, #0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10a      	bne.n	80052e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80052d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	623b      	str	r3, [r7, #32]
}
 80052e2:	bf00      	nop
 80052e4:	e7fe      	b.n	80052e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d102      	bne.n	80052f2 <xQueueGenericCreateStatic+0x7e>
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <xQueueGenericCreateStatic+0x82>
 80052f2:	2301      	movs	r3, #1
 80052f4:	e000      	b.n	80052f8 <xQueueGenericCreateStatic+0x84>
 80052f6:	2300      	movs	r3, #0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10a      	bne.n	8005312 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80052fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	61fb      	str	r3, [r7, #28]
}
 800530e:	bf00      	nop
 8005310:	e7fe      	b.n	8005310 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005312:	2350      	movs	r3, #80	; 0x50
 8005314:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2b50      	cmp	r3, #80	; 0x50
 800531a:	d00a      	beq.n	8005332 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800531c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	61bb      	str	r3, [r7, #24]
}
 800532e:	bf00      	nop
 8005330:	e7fe      	b.n	8005330 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005332:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00d      	beq.n	800535a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800533e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005346:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800534a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	4613      	mov	r3, r2
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	68b9      	ldr	r1, [r7, #8]
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 f805 	bl	8005364 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800535a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800535c:	4618      	mov	r0, r3
 800535e:	3730      	adds	r7, #48	; 0x30
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
 8005370:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d103      	bne.n	8005380 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	e002      	b.n	8005386 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005392:	2101      	movs	r1, #1
 8005394:	69b8      	ldr	r0, [r7, #24]
 8005396:	f7ff ff05 	bl	80051a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	78fa      	ldrb	r2, [r7, #3]
 800539e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80053a2:	bf00      	nop
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
	...

080053ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b08e      	sub	sp, #56	; 0x38
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80053ba:	2300      	movs	r3, #0
 80053bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10a      	bne.n	80053de <xQueueGenericSend+0x32>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80053da:	bf00      	nop
 80053dc:	e7fe      	b.n	80053dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d103      	bne.n	80053ec <xQueueGenericSend+0x40>
 80053e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <xQueueGenericSend+0x44>
 80053ec:	2301      	movs	r3, #1
 80053ee:	e000      	b.n	80053f2 <xQueueGenericSend+0x46>
 80053f0:	2300      	movs	r3, #0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10a      	bne.n	800540c <xQueueGenericSend+0x60>
	__asm volatile
 80053f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005408:	bf00      	nop
 800540a:	e7fe      	b.n	800540a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	2b02      	cmp	r3, #2
 8005410:	d103      	bne.n	800541a <xQueueGenericSend+0x6e>
 8005412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005416:	2b01      	cmp	r3, #1
 8005418:	d101      	bne.n	800541e <xQueueGenericSend+0x72>
 800541a:	2301      	movs	r3, #1
 800541c:	e000      	b.n	8005420 <xQueueGenericSend+0x74>
 800541e:	2300      	movs	r3, #0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10a      	bne.n	800543a <xQueueGenericSend+0x8e>
	__asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	623b      	str	r3, [r7, #32]
}
 8005436:	bf00      	nop
 8005438:	e7fe      	b.n	8005438 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800543a:	f001 f9bd 	bl	80067b8 <xTaskGetSchedulerState>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d102      	bne.n	800544a <xQueueGenericSend+0x9e>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <xQueueGenericSend+0xa2>
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <xQueueGenericSend+0xa4>
 800544e:	2300      	movs	r3, #0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10a      	bne.n	800546a <xQueueGenericSend+0xbe>
	__asm volatile
 8005454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	61fb      	str	r3, [r7, #28]
}
 8005466:	bf00      	nop
 8005468:	e7fe      	b.n	8005468 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800546a:	f001 ff03 	bl	8007274 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800546e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005476:	429a      	cmp	r2, r3
 8005478:	d302      	bcc.n	8005480 <xQueueGenericSend+0xd4>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b02      	cmp	r3, #2
 800547e:	d129      	bne.n	80054d4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	68b9      	ldr	r1, [r7, #8]
 8005484:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005486:	f000 fa0b 	bl	80058a0 <prvCopyDataToQueue>
 800548a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	2b00      	cmp	r3, #0
 8005492:	d010      	beq.n	80054b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005496:	3324      	adds	r3, #36	; 0x24
 8005498:	4618      	mov	r0, r3
 800549a:	f000 ffcf 	bl	800643c <xTaskRemoveFromEventList>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d013      	beq.n	80054cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80054a4:	4b3f      	ldr	r3, [pc, #252]	; (80055a4 <xQueueGenericSend+0x1f8>)
 80054a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	e00a      	b.n	80054cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80054b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d007      	beq.n	80054cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80054bc:	4b39      	ldr	r3, [pc, #228]	; (80055a4 <xQueueGenericSend+0x1f8>)
 80054be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80054cc:	f001 ff02 	bl	80072d4 <vPortExitCritical>
				return pdPASS;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e063      	b.n	800559c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d103      	bne.n	80054e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054da:	f001 fefb 	bl	80072d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80054de:	2300      	movs	r3, #0
 80054e0:	e05c      	b.n	800559c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d106      	bne.n	80054f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054e8:	f107 0314 	add.w	r3, r7, #20
 80054ec:	4618      	mov	r0, r3
 80054ee:	f001 f809 	bl	8006504 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054f2:	2301      	movs	r3, #1
 80054f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054f6:	f001 feed 	bl	80072d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054fa:	f000 fd7b 	bl	8005ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054fe:	f001 feb9 	bl	8007274 <vPortEnterCritical>
 8005502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005504:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005508:	b25b      	sxtb	r3, r3
 800550a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550e:	d103      	bne.n	8005518 <xQueueGenericSend+0x16c>
 8005510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800551e:	b25b      	sxtb	r3, r3
 8005520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005524:	d103      	bne.n	800552e <xQueueGenericSend+0x182>
 8005526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800552e:	f001 fed1 	bl	80072d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005532:	1d3a      	adds	r2, r7, #4
 8005534:	f107 0314 	add.w	r3, r7, #20
 8005538:	4611      	mov	r1, r2
 800553a:	4618      	mov	r0, r3
 800553c:	f000 fff8 	bl	8006530 <xTaskCheckForTimeOut>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d124      	bne.n	8005590 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005546:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005548:	f000 faa2 	bl	8005a90 <prvIsQueueFull>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d018      	beq.n	8005584 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005554:	3310      	adds	r3, #16
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	4611      	mov	r1, r2
 800555a:	4618      	mov	r0, r3
 800555c:	f000 ff1e 	bl	800639c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005562:	f000 fa2d 	bl	80059c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005566:	f000 fd53 	bl	8006010 <xTaskResumeAll>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	f47f af7c 	bne.w	800546a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005572:	4b0c      	ldr	r3, [pc, #48]	; (80055a4 <xQueueGenericSend+0x1f8>)
 8005574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	e772      	b.n	800546a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005584:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005586:	f000 fa1b 	bl	80059c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800558a:	f000 fd41 	bl	8006010 <xTaskResumeAll>
 800558e:	e76c      	b.n	800546a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005592:	f000 fa15 	bl	80059c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005596:	f000 fd3b 	bl	8006010 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800559a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800559c:	4618      	mov	r0, r3
 800559e:	3738      	adds	r7, #56	; 0x38
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	e000ed04 	.word	0xe000ed04

080055a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b090      	sub	sp, #64	; 0x40
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80055ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10a      	bne.n	80055d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80055d2:	bf00      	nop
 80055d4:	e7fe      	b.n	80055d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d103      	bne.n	80055e4 <xQueueGenericSendFromISR+0x3c>
 80055dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <xQueueGenericSendFromISR+0x40>
 80055e4:	2301      	movs	r3, #1
 80055e6:	e000      	b.n	80055ea <xQueueGenericSendFromISR+0x42>
 80055e8:	2300      	movs	r3, #0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10a      	bne.n	8005604 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005600:	bf00      	nop
 8005602:	e7fe      	b.n	8005602 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	2b02      	cmp	r3, #2
 8005608:	d103      	bne.n	8005612 <xQueueGenericSendFromISR+0x6a>
 800560a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560e:	2b01      	cmp	r3, #1
 8005610:	d101      	bne.n	8005616 <xQueueGenericSendFromISR+0x6e>
 8005612:	2301      	movs	r3, #1
 8005614:	e000      	b.n	8005618 <xQueueGenericSendFromISR+0x70>
 8005616:	2300      	movs	r3, #0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10a      	bne.n	8005632 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800561c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005620:	f383 8811 	msr	BASEPRI, r3
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	623b      	str	r3, [r7, #32]
}
 800562e:	bf00      	nop
 8005630:	e7fe      	b.n	8005630 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005632:	f001 ff01 	bl	8007438 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005636:	f3ef 8211 	mrs	r2, BASEPRI
 800563a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563e:	f383 8811 	msr	BASEPRI, r3
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	61fa      	str	r2, [r7, #28]
 800564c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800564e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005650:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565a:	429a      	cmp	r2, r3
 800565c:	d302      	bcc.n	8005664 <xQueueGenericSendFromISR+0xbc>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b02      	cmp	r3, #2
 8005662:	d12f      	bne.n	80056c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005666:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800566a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800566e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005672:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	68b9      	ldr	r1, [r7, #8]
 8005678:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800567a:	f000 f911 	bl	80058a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800567e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005686:	d112      	bne.n	80056ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	2b00      	cmp	r3, #0
 800568e:	d016      	beq.n	80056be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005692:	3324      	adds	r3, #36	; 0x24
 8005694:	4618      	mov	r0, r3
 8005696:	f000 fed1 	bl	800643c <xTaskRemoveFromEventList>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00e      	beq.n	80056be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00b      	beq.n	80056be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	e007      	b.n	80056be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80056ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80056b2:	3301      	adds	r3, #1
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	b25a      	sxtb	r2, r3
 80056b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80056be:	2301      	movs	r3, #1
 80056c0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80056c2:	e001      	b.n	80056c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80056c4:	2300      	movs	r3, #0
 80056c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80056d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3740      	adds	r7, #64	; 0x40
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
	...

080056e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b08c      	sub	sp, #48	; 0x30
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80056ec:	2300      	movs	r3, #0
 80056ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80056f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10a      	bne.n	8005710 <xQueueReceive+0x30>
	__asm volatile
 80056fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	623b      	str	r3, [r7, #32]
}
 800570c:	bf00      	nop
 800570e:	e7fe      	b.n	800570e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d103      	bne.n	800571e <xQueueReceive+0x3e>
 8005716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <xQueueReceive+0x42>
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <xQueueReceive+0x44>
 8005722:	2300      	movs	r3, #0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10a      	bne.n	800573e <xQueueReceive+0x5e>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	61fb      	str	r3, [r7, #28]
}
 800573a:	bf00      	nop
 800573c:	e7fe      	b.n	800573c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800573e:	f001 f83b 	bl	80067b8 <xTaskGetSchedulerState>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d102      	bne.n	800574e <xQueueReceive+0x6e>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <xQueueReceive+0x72>
 800574e:	2301      	movs	r3, #1
 8005750:	e000      	b.n	8005754 <xQueueReceive+0x74>
 8005752:	2300      	movs	r3, #0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10a      	bne.n	800576e <xQueueReceive+0x8e>
	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	61bb      	str	r3, [r7, #24]
}
 800576a:	bf00      	nop
 800576c:	e7fe      	b.n	800576c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800576e:	f001 fd81 	bl	8007274 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005776:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	2b00      	cmp	r3, #0
 800577c:	d01f      	beq.n	80057be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800577e:	68b9      	ldr	r1, [r7, #8]
 8005780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005782:	f000 f8f7 	bl	8005974 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	1e5a      	subs	r2, r3, #1
 800578a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00f      	beq.n	80057b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005798:	3310      	adds	r3, #16
 800579a:	4618      	mov	r0, r3
 800579c:	f000 fe4e 	bl	800643c <xTaskRemoveFromEventList>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d007      	beq.n	80057b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80057a6:	4b3d      	ldr	r3, [pc, #244]	; (800589c <xQueueReceive+0x1bc>)
 80057a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80057b6:	f001 fd8d 	bl	80072d4 <vPortExitCritical>
				return pdPASS;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e069      	b.n	8005892 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d103      	bne.n	80057cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057c4:	f001 fd86 	bl	80072d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057c8:	2300      	movs	r3, #0
 80057ca:	e062      	b.n	8005892 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d106      	bne.n	80057e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057d2:	f107 0310 	add.w	r3, r7, #16
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fe94 	bl	8006504 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057dc:	2301      	movs	r3, #1
 80057de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057e0:	f001 fd78 	bl	80072d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057e4:	f000 fc06 	bl	8005ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057e8:	f001 fd44 	bl	8007274 <vPortEnterCritical>
 80057ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057f2:	b25b      	sxtb	r3, r3
 80057f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f8:	d103      	bne.n	8005802 <xQueueReceive+0x122>
 80057fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005804:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005808:	b25b      	sxtb	r3, r3
 800580a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580e:	d103      	bne.n	8005818 <xQueueReceive+0x138>
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005818:	f001 fd5c 	bl	80072d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800581c:	1d3a      	adds	r2, r7, #4
 800581e:	f107 0310 	add.w	r3, r7, #16
 8005822:	4611      	mov	r1, r2
 8005824:	4618      	mov	r0, r3
 8005826:	f000 fe83 	bl	8006530 <xTaskCheckForTimeOut>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d123      	bne.n	8005878 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005832:	f000 f917 	bl	8005a64 <prvIsQueueEmpty>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d017      	beq.n	800586c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	3324      	adds	r3, #36	; 0x24
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	4611      	mov	r1, r2
 8005844:	4618      	mov	r0, r3
 8005846:	f000 fda9 	bl	800639c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800584a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800584c:	f000 f8b8 	bl	80059c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005850:	f000 fbde 	bl	8006010 <xTaskResumeAll>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d189      	bne.n	800576e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800585a:	4b10      	ldr	r3, [pc, #64]	; (800589c <xQueueReceive+0x1bc>)
 800585c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	e780      	b.n	800576e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800586c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800586e:	f000 f8a7 	bl	80059c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005872:	f000 fbcd 	bl	8006010 <xTaskResumeAll>
 8005876:	e77a      	b.n	800576e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800587a:	f000 f8a1 	bl	80059c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800587e:	f000 fbc7 	bl	8006010 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005884:	f000 f8ee 	bl	8005a64 <prvIsQueueEmpty>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	f43f af6f 	beq.w	800576e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005890:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005892:	4618      	mov	r0, r3
 8005894:	3730      	adds	r7, #48	; 0x30
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	e000ed04 	.word	0xe000ed04

080058a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80058ac:	2300      	movs	r3, #0
 80058ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10d      	bne.n	80058da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d14d      	bne.n	8005962 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 ff92 	bl	80067f4 <xTaskPriorityDisinherit>
 80058d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	609a      	str	r2, [r3, #8]
 80058d8:	e043      	b.n	8005962 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d119      	bne.n	8005914 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6858      	ldr	r0, [r3, #4]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e8:	461a      	mov	r2, r3
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	f001 ff00 	bl	80076f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f8:	441a      	add	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	429a      	cmp	r2, r3
 8005908:	d32b      	bcc.n	8005962 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	605a      	str	r2, [r3, #4]
 8005912:	e026      	b.n	8005962 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	68d8      	ldr	r0, [r3, #12]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	461a      	mov	r2, r3
 800591e:	68b9      	ldr	r1, [r7, #8]
 8005920:	f001 fee6 	bl	80076f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	68da      	ldr	r2, [r3, #12]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592c:	425b      	negs	r3, r3
 800592e:	441a      	add	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	68da      	ldr	r2, [r3, #12]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	429a      	cmp	r2, r3
 800593e:	d207      	bcs.n	8005950 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005948:	425b      	negs	r3, r3
 800594a:	441a      	add	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b02      	cmp	r3, #2
 8005954:	d105      	bne.n	8005962 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	3b01      	subs	r3, #1
 8005960:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1c5a      	adds	r2, r3, #1
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800596a:	697b      	ldr	r3, [r7, #20]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	2b00      	cmp	r3, #0
 8005984:	d018      	beq.n	80059b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68da      	ldr	r2, [r3, #12]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	441a      	add	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	429a      	cmp	r2, r3
 800599e:	d303      	bcc.n	80059a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68d9      	ldr	r1, [r3, #12]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b0:	461a      	mov	r2, r3
 80059b2:	6838      	ldr	r0, [r7, #0]
 80059b4:	f001 fe9c 	bl	80076f0 <memcpy>
	}
}
 80059b8:	bf00      	nop
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80059c8:	f001 fc54 	bl	8007274 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80059d4:	e011      	b.n	80059fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d012      	beq.n	8005a04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	3324      	adds	r3, #36	; 0x24
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 fd2a 	bl	800643c <xTaskRemoveFromEventList>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80059ee:	f000 fe01 	bl	80065f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
 80059f4:	3b01      	subs	r3, #1
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80059fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	dce9      	bgt.n	80059d6 <prvUnlockQueue+0x16>
 8005a02:	e000      	b.n	8005a06 <prvUnlockQueue+0x46>
					break;
 8005a04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	22ff      	movs	r2, #255	; 0xff
 8005a0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005a0e:	f001 fc61 	bl	80072d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a12:	f001 fc2f 	bl	8007274 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a1e:	e011      	b.n	8005a44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d012      	beq.n	8005a4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3310      	adds	r3, #16
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 fd05 	bl	800643c <xTaskRemoveFromEventList>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d001      	beq.n	8005a3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005a38:	f000 fddc 	bl	80065f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005a3c:	7bbb      	ldrb	r3, [r7, #14]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	dce9      	bgt.n	8005a20 <prvUnlockQueue+0x60>
 8005a4c:	e000      	b.n	8005a50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005a4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	22ff      	movs	r2, #255	; 0xff
 8005a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005a58:	f001 fc3c 	bl	80072d4 <vPortExitCritical>
}
 8005a5c:	bf00      	nop
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a6c:	f001 fc02 	bl	8007274 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d102      	bne.n	8005a7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	60fb      	str	r3, [r7, #12]
 8005a7c:	e001      	b.n	8005a82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a82:	f001 fc27 	bl	80072d4 <vPortExitCritical>

	return xReturn;
 8005a86:	68fb      	ldr	r3, [r7, #12]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a98:	f001 fbec 	bl	8007274 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d102      	bne.n	8005aae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	60fb      	str	r3, [r7, #12]
 8005aac:	e001      	b.n	8005ab2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ab2:	f001 fc0f 	bl	80072d4 <vPortExitCritical>

	return xReturn;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005aca:	2300      	movs	r3, #0
 8005acc:	60fb      	str	r3, [r7, #12]
 8005ace:	e014      	b.n	8005afa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005ad0:	4a0f      	ldr	r2, [pc, #60]	; (8005b10 <vQueueAddToRegistry+0x50>)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10b      	bne.n	8005af4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005adc:	490c      	ldr	r1, [pc, #48]	; (8005b10 <vQueueAddToRegistry+0x50>)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005ae6:	4a0a      	ldr	r2, [pc, #40]	; (8005b10 <vQueueAddToRegistry+0x50>)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	4413      	add	r3, r2
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005af2:	e006      	b.n	8005b02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	3301      	adds	r3, #1
 8005af8:	60fb      	str	r3, [r7, #12]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2b07      	cmp	r3, #7
 8005afe:	d9e7      	bls.n	8005ad0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b00:	bf00      	nop
 8005b02:	bf00      	nop
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	20008580 	.word	0x20008580

08005b14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005b24:	f001 fba6 	bl	8007274 <vPortEnterCritical>
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b2e:	b25b      	sxtb	r3, r3
 8005b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b34:	d103      	bne.n	8005b3e <vQueueWaitForMessageRestricted+0x2a>
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b44:	b25b      	sxtb	r3, r3
 8005b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4a:	d103      	bne.n	8005b54 <vQueueWaitForMessageRestricted+0x40>
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b54:	f001 fbbe 	bl	80072d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d106      	bne.n	8005b6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	3324      	adds	r3, #36	; 0x24
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	68b9      	ldr	r1, [r7, #8]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 fc3b 	bl	80063e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005b6e:	6978      	ldr	r0, [r7, #20]
 8005b70:	f7ff ff26 	bl	80059c0 <prvUnlockQueue>
	}
 8005b74:	bf00      	nop
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b08e      	sub	sp, #56	; 0x38
 8005b80:	af04      	add	r7, sp, #16
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
 8005b88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10a      	bne.n	8005ba6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	623b      	str	r3, [r7, #32]
}
 8005ba2:	bf00      	nop
 8005ba4:	e7fe      	b.n	8005ba4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10a      	bne.n	8005bc2 <xTaskCreateStatic+0x46>
	__asm volatile
 8005bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb0:	f383 8811 	msr	BASEPRI, r3
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	61fb      	str	r3, [r7, #28]
}
 8005bbe:	bf00      	nop
 8005bc0:	e7fe      	b.n	8005bc0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005bc2:	235c      	movs	r3, #92	; 0x5c
 8005bc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	2b5c      	cmp	r3, #92	; 0x5c
 8005bca:	d00a      	beq.n	8005be2 <xTaskCreateStatic+0x66>
	__asm volatile
 8005bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	61bb      	str	r3, [r7, #24]
}
 8005bde:	bf00      	nop
 8005be0:	e7fe      	b.n	8005be0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005be2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d01e      	beq.n	8005c28 <xTaskCreateStatic+0xac>
 8005bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d01b      	beq.n	8005c28 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bf8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c02:	2300      	movs	r3, #0
 8005c04:	9303      	str	r3, [sp, #12]
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	9302      	str	r3, [sp, #8]
 8005c0a:	f107 0314 	add.w	r3, r7, #20
 8005c0e:	9301      	str	r3, [sp, #4]
 8005c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 f850 	bl	8005cc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c22:	f000 f8dd 	bl	8005de0 <prvAddNewTaskToReadyList>
 8005c26:	e001      	b.n	8005c2c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005c2c:	697b      	ldr	r3, [r7, #20]
	}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3728      	adds	r7, #40	; 0x28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b08c      	sub	sp, #48	; 0x30
 8005c3a:	af04      	add	r7, sp, #16
 8005c3c:	60f8      	str	r0, [r7, #12]
 8005c3e:	60b9      	str	r1, [r7, #8]
 8005c40:	603b      	str	r3, [r7, #0]
 8005c42:	4613      	mov	r3, r2
 8005c44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005c46:	88fb      	ldrh	r3, [r7, #6]
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f001 fc34 	bl	80074b8 <pvPortMalloc>
 8005c50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00e      	beq.n	8005c76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005c58:	205c      	movs	r0, #92	; 0x5c
 8005c5a:	f001 fc2d 	bl	80074b8 <pvPortMalloc>
 8005c5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	631a      	str	r2, [r3, #48]	; 0x30
 8005c6c:	e005      	b.n	8005c7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c6e:	6978      	ldr	r0, [r7, #20]
 8005c70:	f001 fcb0 	bl	80075d4 <vPortFree>
 8005c74:	e001      	b.n	8005c7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c76:	2300      	movs	r3, #0
 8005c78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d017      	beq.n	8005cb0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c88:	88fa      	ldrh	r2, [r7, #6]
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	9303      	str	r3, [sp, #12]
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	9302      	str	r3, [sp, #8]
 8005c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c94:	9301      	str	r3, [sp, #4]
 8005c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68b9      	ldr	r1, [r7, #8]
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 f80e 	bl	8005cc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ca4:	69f8      	ldr	r0, [r7, #28]
 8005ca6:	f000 f89b 	bl	8005de0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005caa:	2301      	movs	r3, #1
 8005cac:	61bb      	str	r3, [r7, #24]
 8005cae:	e002      	b.n	8005cb6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005cb4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005cb6:	69bb      	ldr	r3, [r7, #24]
	}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3720      	adds	r7, #32
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b088      	sub	sp, #32
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	21a5      	movs	r1, #165	; 0xa5
 8005cda:	f001 fd17 	bl	800770c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	f023 0307 	bic.w	r3, r3, #7
 8005cf6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	f003 0307 	and.w	r3, r3, #7
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00a      	beq.n	8005d18 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d06:	f383 8811 	msr	BASEPRI, r3
 8005d0a:	f3bf 8f6f 	isb	sy
 8005d0e:	f3bf 8f4f 	dsb	sy
 8005d12:	617b      	str	r3, [r7, #20]
}
 8005d14:	bf00      	nop
 8005d16:	e7fe      	b.n	8005d16 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d01f      	beq.n	8005d5e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d1e:	2300      	movs	r3, #0
 8005d20:	61fb      	str	r3, [r7, #28]
 8005d22:	e012      	b.n	8005d4a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	4413      	add	r3, r2
 8005d2a:	7819      	ldrb	r1, [r3, #0]
 8005d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	4413      	add	r3, r2
 8005d32:	3334      	adds	r3, #52	; 0x34
 8005d34:	460a      	mov	r2, r1
 8005d36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d006      	beq.n	8005d52 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	3301      	adds	r3, #1
 8005d48:	61fb      	str	r3, [r7, #28]
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	2b0f      	cmp	r3, #15
 8005d4e:	d9e9      	bls.n	8005d24 <prvInitialiseNewTask+0x64>
 8005d50:	e000      	b.n	8005d54 <prvInitialiseNewTask+0x94>
			{
				break;
 8005d52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d5c:	e003      	b.n	8005d66 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d68:	2b37      	cmp	r3, #55	; 0x37
 8005d6a:	d901      	bls.n	8005d70 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d6c:	2337      	movs	r3, #55	; 0x37
 8005d6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d7a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7e:	2200      	movs	r2, #0
 8005d80:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d84:	3304      	adds	r3, #4
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7ff f978 	bl	800507c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8e:	3318      	adds	r3, #24
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7ff f973 	bl	800507c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005daa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dae:	2200      	movs	r2, #0
 8005db0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	68f9      	ldr	r1, [r7, #12]
 8005dbe:	69b8      	ldr	r0, [r7, #24]
 8005dc0:	f001 f928 	bl	8007014 <pxPortInitialiseStack>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d002      	beq.n	8005dd6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dd6:	bf00      	nop
 8005dd8:	3720      	adds	r7, #32
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
	...

08005de0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005de8:	f001 fa44 	bl	8007274 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005dec:	4b2d      	ldr	r3, [pc, #180]	; (8005ea4 <prvAddNewTaskToReadyList+0xc4>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	3301      	adds	r3, #1
 8005df2:	4a2c      	ldr	r2, [pc, #176]	; (8005ea4 <prvAddNewTaskToReadyList+0xc4>)
 8005df4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005df6:	4b2c      	ldr	r3, [pc, #176]	; (8005ea8 <prvAddNewTaskToReadyList+0xc8>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d109      	bne.n	8005e12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005dfe:	4a2a      	ldr	r2, [pc, #168]	; (8005ea8 <prvAddNewTaskToReadyList+0xc8>)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e04:	4b27      	ldr	r3, [pc, #156]	; (8005ea4 <prvAddNewTaskToReadyList+0xc4>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d110      	bne.n	8005e2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e0c:	f000 fc16 	bl	800663c <prvInitialiseTaskLists>
 8005e10:	e00d      	b.n	8005e2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005e12:	4b26      	ldr	r3, [pc, #152]	; (8005eac <prvAddNewTaskToReadyList+0xcc>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d109      	bne.n	8005e2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e1a:	4b23      	ldr	r3, [pc, #140]	; (8005ea8 <prvAddNewTaskToReadyList+0xc8>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d802      	bhi.n	8005e2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e28:	4a1f      	ldr	r2, [pc, #124]	; (8005ea8 <prvAddNewTaskToReadyList+0xc8>)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e2e:	4b20      	ldr	r3, [pc, #128]	; (8005eb0 <prvAddNewTaskToReadyList+0xd0>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3301      	adds	r3, #1
 8005e34:	4a1e      	ldr	r2, [pc, #120]	; (8005eb0 <prvAddNewTaskToReadyList+0xd0>)
 8005e36:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005e38:	4b1d      	ldr	r3, [pc, #116]	; (8005eb0 <prvAddNewTaskToReadyList+0xd0>)
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e44:	4b1b      	ldr	r3, [pc, #108]	; (8005eb4 <prvAddNewTaskToReadyList+0xd4>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d903      	bls.n	8005e54 <prvAddNewTaskToReadyList+0x74>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e50:	4a18      	ldr	r2, [pc, #96]	; (8005eb4 <prvAddNewTaskToReadyList+0xd4>)
 8005e52:	6013      	str	r3, [r2, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e58:	4613      	mov	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4a15      	ldr	r2, [pc, #84]	; (8005eb8 <prvAddNewTaskToReadyList+0xd8>)
 8005e62:	441a      	add	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3304      	adds	r3, #4
 8005e68:	4619      	mov	r1, r3
 8005e6a:	4610      	mov	r0, r2
 8005e6c:	f7ff f913 	bl	8005096 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e70:	f001 fa30 	bl	80072d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e74:	4b0d      	ldr	r3, [pc, #52]	; (8005eac <prvAddNewTaskToReadyList+0xcc>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00e      	beq.n	8005e9a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e7c:	4b0a      	ldr	r3, [pc, #40]	; (8005ea8 <prvAddNewTaskToReadyList+0xc8>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d207      	bcs.n	8005e9a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e8a:	4b0c      	ldr	r3, [pc, #48]	; (8005ebc <prvAddNewTaskToReadyList+0xdc>)
 8005e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e90:	601a      	str	r2, [r3, #0]
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e9a:	bf00      	nop
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	20000c30 	.word	0x20000c30
 8005ea8:	2000075c 	.word	0x2000075c
 8005eac:	20000c3c 	.word	0x20000c3c
 8005eb0:	20000c4c 	.word	0x20000c4c
 8005eb4:	20000c38 	.word	0x20000c38
 8005eb8:	20000760 	.word	0x20000760
 8005ebc:	e000ed04 	.word	0xe000ed04

08005ec0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d017      	beq.n	8005f02 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ed2:	4b13      	ldr	r3, [pc, #76]	; (8005f20 <vTaskDelay+0x60>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00a      	beq.n	8005ef0 <vTaskDelay+0x30>
	__asm volatile
 8005eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ede:	f383 8811 	msr	BASEPRI, r3
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	f3bf 8f4f 	dsb	sy
 8005eea:	60bb      	str	r3, [r7, #8]
}
 8005eec:	bf00      	nop
 8005eee:	e7fe      	b.n	8005eee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ef0:	f000 f880 	bl	8005ff4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fcea 	bl	80068d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005efc:	f000 f888 	bl	8006010 <xTaskResumeAll>
 8005f00:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d107      	bne.n	8005f18 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005f08:	4b06      	ldr	r3, [pc, #24]	; (8005f24 <vTaskDelay+0x64>)
 8005f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f18:	bf00      	nop
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	20000c58 	.word	0x20000c58
 8005f24:	e000ed04 	.word	0xe000ed04

08005f28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b08a      	sub	sp, #40	; 0x28
 8005f2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f32:	2300      	movs	r3, #0
 8005f34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f36:	463a      	mov	r2, r7
 8005f38:	1d39      	adds	r1, r7, #4
 8005f3a:	f107 0308 	add.w	r3, r7, #8
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7ff f848 	bl	8004fd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f44:	6839      	ldr	r1, [r7, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	9202      	str	r2, [sp, #8]
 8005f4c:	9301      	str	r3, [sp, #4]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	2300      	movs	r3, #0
 8005f54:	460a      	mov	r2, r1
 8005f56:	4921      	ldr	r1, [pc, #132]	; (8005fdc <vTaskStartScheduler+0xb4>)
 8005f58:	4821      	ldr	r0, [pc, #132]	; (8005fe0 <vTaskStartScheduler+0xb8>)
 8005f5a:	f7ff fe0f 	bl	8005b7c <xTaskCreateStatic>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	4a20      	ldr	r2, [pc, #128]	; (8005fe4 <vTaskStartScheduler+0xbc>)
 8005f62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f64:	4b1f      	ldr	r3, [pc, #124]	; (8005fe4 <vTaskStartScheduler+0xbc>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	617b      	str	r3, [r7, #20]
 8005f70:	e001      	b.n	8005f76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d102      	bne.n	8005f82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005f7c:	f000 fcfc 	bl	8006978 <xTimerCreateTimerTask>
 8005f80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d116      	bne.n	8005fb6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	613b      	str	r3, [r7, #16]
}
 8005f9a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f9c:	4b12      	ldr	r3, [pc, #72]	; (8005fe8 <vTaskStartScheduler+0xc0>)
 8005f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005fa4:	4b11      	ldr	r3, [pc, #68]	; (8005fec <vTaskStartScheduler+0xc4>)
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005faa:	4b11      	ldr	r3, [pc, #68]	; (8005ff0 <vTaskStartScheduler+0xc8>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005fb0:	f001 f8be 	bl	8007130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005fb4:	e00e      	b.n	8005fd4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbc:	d10a      	bne.n	8005fd4 <vTaskStartScheduler+0xac>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	60fb      	str	r3, [r7, #12]
}
 8005fd0:	bf00      	nop
 8005fd2:	e7fe      	b.n	8005fd2 <vTaskStartScheduler+0xaa>
}
 8005fd4:	bf00      	nop
 8005fd6:	3718      	adds	r7, #24
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	08007fdc 	.word	0x08007fdc
 8005fe0:	0800660d 	.word	0x0800660d
 8005fe4:	20000c54 	.word	0x20000c54
 8005fe8:	20000c50 	.word	0x20000c50
 8005fec:	20000c3c 	.word	0x20000c3c
 8005ff0:	20000c34 	.word	0x20000c34

08005ff4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ff8:	4b04      	ldr	r3, [pc, #16]	; (800600c <vTaskSuspendAll+0x18>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	4a03      	ldr	r2, [pc, #12]	; (800600c <vTaskSuspendAll+0x18>)
 8006000:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006002:	bf00      	nop
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	20000c58 	.word	0x20000c58

08006010 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006016:	2300      	movs	r3, #0
 8006018:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800601a:	2300      	movs	r3, #0
 800601c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800601e:	4b42      	ldr	r3, [pc, #264]	; (8006128 <xTaskResumeAll+0x118>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10a      	bne.n	800603c <xTaskResumeAll+0x2c>
	__asm volatile
 8006026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	603b      	str	r3, [r7, #0]
}
 8006038:	bf00      	nop
 800603a:	e7fe      	b.n	800603a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800603c:	f001 f91a 	bl	8007274 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006040:	4b39      	ldr	r3, [pc, #228]	; (8006128 <xTaskResumeAll+0x118>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3b01      	subs	r3, #1
 8006046:	4a38      	ldr	r2, [pc, #224]	; (8006128 <xTaskResumeAll+0x118>)
 8006048:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800604a:	4b37      	ldr	r3, [pc, #220]	; (8006128 <xTaskResumeAll+0x118>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d162      	bne.n	8006118 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006052:	4b36      	ldr	r3, [pc, #216]	; (800612c <xTaskResumeAll+0x11c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d05e      	beq.n	8006118 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800605a:	e02f      	b.n	80060bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800605c:	4b34      	ldr	r3, [pc, #208]	; (8006130 <xTaskResumeAll+0x120>)
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	3318      	adds	r3, #24
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff f871 	bl	8005150 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	3304      	adds	r3, #4
 8006072:	4618      	mov	r0, r3
 8006074:	f7ff f86c 	bl	8005150 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800607c:	4b2d      	ldr	r3, [pc, #180]	; (8006134 <xTaskResumeAll+0x124>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	429a      	cmp	r2, r3
 8006082:	d903      	bls.n	800608c <xTaskResumeAll+0x7c>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	4a2a      	ldr	r2, [pc, #168]	; (8006134 <xTaskResumeAll+0x124>)
 800608a:	6013      	str	r3, [r2, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006090:	4613      	mov	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4413      	add	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4a27      	ldr	r2, [pc, #156]	; (8006138 <xTaskResumeAll+0x128>)
 800609a:	441a      	add	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	3304      	adds	r3, #4
 80060a0:	4619      	mov	r1, r3
 80060a2:	4610      	mov	r0, r2
 80060a4:	f7fe fff7 	bl	8005096 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ac:	4b23      	ldr	r3, [pc, #140]	; (800613c <xTaskResumeAll+0x12c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d302      	bcc.n	80060bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80060b6:	4b22      	ldr	r3, [pc, #136]	; (8006140 <xTaskResumeAll+0x130>)
 80060b8:	2201      	movs	r2, #1
 80060ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060bc:	4b1c      	ldr	r3, [pc, #112]	; (8006130 <xTaskResumeAll+0x120>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1cb      	bne.n	800605c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80060ca:	f000 fb55 	bl	8006778 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80060ce:	4b1d      	ldr	r3, [pc, #116]	; (8006144 <xTaskResumeAll+0x134>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d010      	beq.n	80060fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80060da:	f000 f847 	bl	800616c <xTaskIncrementTick>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80060e4:	4b16      	ldr	r3, [pc, #88]	; (8006140 <xTaskResumeAll+0x130>)
 80060e6:	2201      	movs	r2, #1
 80060e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	3b01      	subs	r3, #1
 80060ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1f1      	bne.n	80060da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80060f6:	4b13      	ldr	r3, [pc, #76]	; (8006144 <xTaskResumeAll+0x134>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80060fc:	4b10      	ldr	r3, [pc, #64]	; (8006140 <xTaskResumeAll+0x130>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d009      	beq.n	8006118 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006104:	2301      	movs	r3, #1
 8006106:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006108:	4b0f      	ldr	r3, [pc, #60]	; (8006148 <xTaskResumeAll+0x138>)
 800610a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	f3bf 8f4f 	dsb	sy
 8006114:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006118:	f001 f8dc 	bl	80072d4 <vPortExitCritical>

	return xAlreadyYielded;
 800611c:	68bb      	ldr	r3, [r7, #8]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	20000c58 	.word	0x20000c58
 800612c:	20000c30 	.word	0x20000c30
 8006130:	20000bf0 	.word	0x20000bf0
 8006134:	20000c38 	.word	0x20000c38
 8006138:	20000760 	.word	0x20000760
 800613c:	2000075c 	.word	0x2000075c
 8006140:	20000c44 	.word	0x20000c44
 8006144:	20000c40 	.word	0x20000c40
 8006148:	e000ed04 	.word	0xe000ed04

0800614c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006152:	4b05      	ldr	r3, [pc, #20]	; (8006168 <xTaskGetTickCount+0x1c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006158:	687b      	ldr	r3, [r7, #4]
}
 800615a:	4618      	mov	r0, r3
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	20000c34 	.word	0x20000c34

0800616c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006172:	2300      	movs	r3, #0
 8006174:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006176:	4b4f      	ldr	r3, [pc, #316]	; (80062b4 <xTaskIncrementTick+0x148>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	f040 808f 	bne.w	800629e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006180:	4b4d      	ldr	r3, [pc, #308]	; (80062b8 <xTaskIncrementTick+0x14c>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	3301      	adds	r3, #1
 8006186:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006188:	4a4b      	ldr	r2, [pc, #300]	; (80062b8 <xTaskIncrementTick+0x14c>)
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d120      	bne.n	80061d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006194:	4b49      	ldr	r3, [pc, #292]	; (80062bc <xTaskIncrementTick+0x150>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00a      	beq.n	80061b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	603b      	str	r3, [r7, #0]
}
 80061b0:	bf00      	nop
 80061b2:	e7fe      	b.n	80061b2 <xTaskIncrementTick+0x46>
 80061b4:	4b41      	ldr	r3, [pc, #260]	; (80062bc <xTaskIncrementTick+0x150>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	60fb      	str	r3, [r7, #12]
 80061ba:	4b41      	ldr	r3, [pc, #260]	; (80062c0 <xTaskIncrementTick+0x154>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a3f      	ldr	r2, [pc, #252]	; (80062bc <xTaskIncrementTick+0x150>)
 80061c0:	6013      	str	r3, [r2, #0]
 80061c2:	4a3f      	ldr	r2, [pc, #252]	; (80062c0 <xTaskIncrementTick+0x154>)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6013      	str	r3, [r2, #0]
 80061c8:	4b3e      	ldr	r3, [pc, #248]	; (80062c4 <xTaskIncrementTick+0x158>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3301      	adds	r3, #1
 80061ce:	4a3d      	ldr	r2, [pc, #244]	; (80062c4 <xTaskIncrementTick+0x158>)
 80061d0:	6013      	str	r3, [r2, #0]
 80061d2:	f000 fad1 	bl	8006778 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80061d6:	4b3c      	ldr	r3, [pc, #240]	; (80062c8 <xTaskIncrementTick+0x15c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d349      	bcc.n	8006274 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061e0:	4b36      	ldr	r3, [pc, #216]	; (80062bc <xTaskIncrementTick+0x150>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d104      	bne.n	80061f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ea:	4b37      	ldr	r3, [pc, #220]	; (80062c8 <xTaskIncrementTick+0x15c>)
 80061ec:	f04f 32ff 	mov.w	r2, #4294967295
 80061f0:	601a      	str	r2, [r3, #0]
					break;
 80061f2:	e03f      	b.n	8006274 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061f4:	4b31      	ldr	r3, [pc, #196]	; (80062bc <xTaskIncrementTick+0x150>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	429a      	cmp	r2, r3
 800620a:	d203      	bcs.n	8006214 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800620c:	4a2e      	ldr	r2, [pc, #184]	; (80062c8 <xTaskIncrementTick+0x15c>)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006212:	e02f      	b.n	8006274 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	3304      	adds	r3, #4
 8006218:	4618      	mov	r0, r3
 800621a:	f7fe ff99 	bl	8005150 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006222:	2b00      	cmp	r3, #0
 8006224:	d004      	beq.n	8006230 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	3318      	adds	r3, #24
 800622a:	4618      	mov	r0, r3
 800622c:	f7fe ff90 	bl	8005150 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006234:	4b25      	ldr	r3, [pc, #148]	; (80062cc <xTaskIncrementTick+0x160>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	429a      	cmp	r2, r3
 800623a:	d903      	bls.n	8006244 <xTaskIncrementTick+0xd8>
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006240:	4a22      	ldr	r2, [pc, #136]	; (80062cc <xTaskIncrementTick+0x160>)
 8006242:	6013      	str	r3, [r2, #0]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006248:	4613      	mov	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4a1f      	ldr	r2, [pc, #124]	; (80062d0 <xTaskIncrementTick+0x164>)
 8006252:	441a      	add	r2, r3
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	3304      	adds	r3, #4
 8006258:	4619      	mov	r1, r3
 800625a:	4610      	mov	r0, r2
 800625c:	f7fe ff1b 	bl	8005096 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006264:	4b1b      	ldr	r3, [pc, #108]	; (80062d4 <xTaskIncrementTick+0x168>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626a:	429a      	cmp	r2, r3
 800626c:	d3b8      	bcc.n	80061e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800626e:	2301      	movs	r3, #1
 8006270:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006272:	e7b5      	b.n	80061e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006274:	4b17      	ldr	r3, [pc, #92]	; (80062d4 <xTaskIncrementTick+0x168>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800627a:	4915      	ldr	r1, [pc, #84]	; (80062d0 <xTaskIncrementTick+0x164>)
 800627c:	4613      	mov	r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4413      	add	r3, r2
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	440b      	add	r3, r1
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d901      	bls.n	8006290 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800628c:	2301      	movs	r3, #1
 800628e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006290:	4b11      	ldr	r3, [pc, #68]	; (80062d8 <xTaskIncrementTick+0x16c>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d007      	beq.n	80062a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006298:	2301      	movs	r3, #1
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	e004      	b.n	80062a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800629e:	4b0f      	ldr	r3, [pc, #60]	; (80062dc <xTaskIncrementTick+0x170>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3301      	adds	r3, #1
 80062a4:	4a0d      	ldr	r2, [pc, #52]	; (80062dc <xTaskIncrementTick+0x170>)
 80062a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80062a8:	697b      	ldr	r3, [r7, #20]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3718      	adds	r7, #24
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	20000c58 	.word	0x20000c58
 80062b8:	20000c34 	.word	0x20000c34
 80062bc:	20000be8 	.word	0x20000be8
 80062c0:	20000bec 	.word	0x20000bec
 80062c4:	20000c48 	.word	0x20000c48
 80062c8:	20000c50 	.word	0x20000c50
 80062cc:	20000c38 	.word	0x20000c38
 80062d0:	20000760 	.word	0x20000760
 80062d4:	2000075c 	.word	0x2000075c
 80062d8:	20000c44 	.word	0x20000c44
 80062dc:	20000c40 	.word	0x20000c40

080062e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80062e6:	4b28      	ldr	r3, [pc, #160]	; (8006388 <vTaskSwitchContext+0xa8>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80062ee:	4b27      	ldr	r3, [pc, #156]	; (800638c <vTaskSwitchContext+0xac>)
 80062f0:	2201      	movs	r2, #1
 80062f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80062f4:	e041      	b.n	800637a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80062f6:	4b25      	ldr	r3, [pc, #148]	; (800638c <vTaskSwitchContext+0xac>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062fc:	4b24      	ldr	r3, [pc, #144]	; (8006390 <vTaskSwitchContext+0xb0>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	60fb      	str	r3, [r7, #12]
 8006302:	e010      	b.n	8006326 <vTaskSwitchContext+0x46>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10a      	bne.n	8006320 <vTaskSwitchContext+0x40>
	__asm volatile
 800630a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630e:	f383 8811 	msr	BASEPRI, r3
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	607b      	str	r3, [r7, #4]
}
 800631c:	bf00      	nop
 800631e:	e7fe      	b.n	800631e <vTaskSwitchContext+0x3e>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	3b01      	subs	r3, #1
 8006324:	60fb      	str	r3, [r7, #12]
 8006326:	491b      	ldr	r1, [pc, #108]	; (8006394 <vTaskSwitchContext+0xb4>)
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	4613      	mov	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4413      	add	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	440b      	add	r3, r1
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d0e4      	beq.n	8006304 <vTaskSwitchContext+0x24>
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4613      	mov	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4a13      	ldr	r2, [pc, #76]	; (8006394 <vTaskSwitchContext+0xb4>)
 8006346:	4413      	add	r3, r2
 8006348:	60bb      	str	r3, [r7, #8]
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	605a      	str	r2, [r3, #4]
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	3308      	adds	r3, #8
 800635c:	429a      	cmp	r2, r3
 800635e:	d104      	bne.n	800636a <vTaskSwitchContext+0x8a>
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	605a      	str	r2, [r3, #4]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	4a09      	ldr	r2, [pc, #36]	; (8006398 <vTaskSwitchContext+0xb8>)
 8006372:	6013      	str	r3, [r2, #0]
 8006374:	4a06      	ldr	r2, [pc, #24]	; (8006390 <vTaskSwitchContext+0xb0>)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6013      	str	r3, [r2, #0]
}
 800637a:	bf00      	nop
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	20000c58 	.word	0x20000c58
 800638c:	20000c44 	.word	0x20000c44
 8006390:	20000c38 	.word	0x20000c38
 8006394:	20000760 	.word	0x20000760
 8006398:	2000075c 	.word	0x2000075c

0800639c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10a      	bne.n	80063c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80063ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	60fb      	str	r3, [r7, #12]
}
 80063be:	bf00      	nop
 80063c0:	e7fe      	b.n	80063c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063c2:	4b07      	ldr	r3, [pc, #28]	; (80063e0 <vTaskPlaceOnEventList+0x44>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3318      	adds	r3, #24
 80063c8:	4619      	mov	r1, r3
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7fe fe87 	bl	80050de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80063d0:	2101      	movs	r1, #1
 80063d2:	6838      	ldr	r0, [r7, #0]
 80063d4:	f000 fa7c 	bl	80068d0 <prvAddCurrentTaskToDelayedList>
}
 80063d8:	bf00      	nop
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	2000075c 	.word	0x2000075c

080063e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10a      	bne.n	800640c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	617b      	str	r3, [r7, #20]
}
 8006408:	bf00      	nop
 800640a:	e7fe      	b.n	800640a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800640c:	4b0a      	ldr	r3, [pc, #40]	; (8006438 <vTaskPlaceOnEventListRestricted+0x54>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3318      	adds	r3, #24
 8006412:	4619      	mov	r1, r3
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f7fe fe3e 	bl	8005096 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006420:	f04f 33ff 	mov.w	r3, #4294967295
 8006424:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006426:	6879      	ldr	r1, [r7, #4]
 8006428:	68b8      	ldr	r0, [r7, #8]
 800642a:	f000 fa51 	bl	80068d0 <prvAddCurrentTaskToDelayedList>
	}
 800642e:	bf00      	nop
 8006430:	3718      	adds	r7, #24
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	2000075c 	.word	0x2000075c

0800643c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10a      	bne.n	8006468 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006456:	f383 8811 	msr	BASEPRI, r3
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	60fb      	str	r3, [r7, #12]
}
 8006464:	bf00      	nop
 8006466:	e7fe      	b.n	8006466 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	3318      	adds	r3, #24
 800646c:	4618      	mov	r0, r3
 800646e:	f7fe fe6f 	bl	8005150 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006472:	4b1e      	ldr	r3, [pc, #120]	; (80064ec <xTaskRemoveFromEventList+0xb0>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d11d      	bne.n	80064b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	3304      	adds	r3, #4
 800647e:	4618      	mov	r0, r3
 8006480:	f7fe fe66 	bl	8005150 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006488:	4b19      	ldr	r3, [pc, #100]	; (80064f0 <xTaskRemoveFromEventList+0xb4>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	429a      	cmp	r2, r3
 800648e:	d903      	bls.n	8006498 <xTaskRemoveFromEventList+0x5c>
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006494:	4a16      	ldr	r2, [pc, #88]	; (80064f0 <xTaskRemoveFromEventList+0xb4>)
 8006496:	6013      	str	r3, [r2, #0]
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649c:	4613      	mov	r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4a13      	ldr	r2, [pc, #76]	; (80064f4 <xTaskRemoveFromEventList+0xb8>)
 80064a6:	441a      	add	r2, r3
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	3304      	adds	r3, #4
 80064ac:	4619      	mov	r1, r3
 80064ae:	4610      	mov	r0, r2
 80064b0:	f7fe fdf1 	bl	8005096 <vListInsertEnd>
 80064b4:	e005      	b.n	80064c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	3318      	adds	r3, #24
 80064ba:	4619      	mov	r1, r3
 80064bc:	480e      	ldr	r0, [pc, #56]	; (80064f8 <xTaskRemoveFromEventList+0xbc>)
 80064be:	f7fe fdea 	bl	8005096 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c6:	4b0d      	ldr	r3, [pc, #52]	; (80064fc <xTaskRemoveFromEventList+0xc0>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d905      	bls.n	80064dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80064d0:	2301      	movs	r3, #1
 80064d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80064d4:	4b0a      	ldr	r3, [pc, #40]	; (8006500 <xTaskRemoveFromEventList+0xc4>)
 80064d6:	2201      	movs	r2, #1
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	e001      	b.n	80064e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80064dc:	2300      	movs	r3, #0
 80064de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80064e0:	697b      	ldr	r3, [r7, #20]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3718      	adds	r7, #24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	20000c58 	.word	0x20000c58
 80064f0:	20000c38 	.word	0x20000c38
 80064f4:	20000760 	.word	0x20000760
 80064f8:	20000bf0 	.word	0x20000bf0
 80064fc:	2000075c 	.word	0x2000075c
 8006500:	20000c44 	.word	0x20000c44

08006504 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800650c:	4b06      	ldr	r3, [pc, #24]	; (8006528 <vTaskInternalSetTimeOutState+0x24>)
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006514:	4b05      	ldr	r3, [pc, #20]	; (800652c <vTaskInternalSetTimeOutState+0x28>)
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	605a      	str	r2, [r3, #4]
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr
 8006528:	20000c48 	.word	0x20000c48
 800652c:	20000c34 	.word	0x20000c34

08006530 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b088      	sub	sp, #32
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10a      	bne.n	8006556 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	613b      	str	r3, [r7, #16]
}
 8006552:	bf00      	nop
 8006554:	e7fe      	b.n	8006554 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10a      	bne.n	8006572 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800655c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	60fb      	str	r3, [r7, #12]
}
 800656e:	bf00      	nop
 8006570:	e7fe      	b.n	8006570 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006572:	f000 fe7f 	bl	8007274 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006576:	4b1d      	ldr	r3, [pc, #116]	; (80065ec <xTaskCheckForTimeOut+0xbc>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658e:	d102      	bne.n	8006596 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006590:	2300      	movs	r3, #0
 8006592:	61fb      	str	r3, [r7, #28]
 8006594:	e023      	b.n	80065de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	4b15      	ldr	r3, [pc, #84]	; (80065f0 <xTaskCheckForTimeOut+0xc0>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d007      	beq.n	80065b2 <xTaskCheckForTimeOut+0x82>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	69ba      	ldr	r2, [r7, #24]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d302      	bcc.n	80065b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80065ac:	2301      	movs	r3, #1
 80065ae:	61fb      	str	r3, [r7, #28]
 80065b0:	e015      	b.n	80065de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d20b      	bcs.n	80065d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	1ad2      	subs	r2, r2, r3
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7ff ff9b 	bl	8006504 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80065ce:	2300      	movs	r3, #0
 80065d0:	61fb      	str	r3, [r7, #28]
 80065d2:	e004      	b.n	80065de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	2200      	movs	r2, #0
 80065d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80065da:	2301      	movs	r3, #1
 80065dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80065de:	f000 fe79 	bl	80072d4 <vPortExitCritical>

	return xReturn;
 80065e2:	69fb      	ldr	r3, [r7, #28]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3720      	adds	r7, #32
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	20000c34 	.word	0x20000c34
 80065f0:	20000c48 	.word	0x20000c48

080065f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80065f4:	b480      	push	{r7}
 80065f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80065f8:	4b03      	ldr	r3, [pc, #12]	; (8006608 <vTaskMissedYield+0x14>)
 80065fa:	2201      	movs	r2, #1
 80065fc:	601a      	str	r2, [r3, #0]
}
 80065fe:	bf00      	nop
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	20000c44 	.word	0x20000c44

0800660c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006614:	f000 f852 	bl	80066bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006618:	4b06      	ldr	r3, [pc, #24]	; (8006634 <prvIdleTask+0x28>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d9f9      	bls.n	8006614 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006620:	4b05      	ldr	r3, [pc, #20]	; (8006638 <prvIdleTask+0x2c>)
 8006622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006626:	601a      	str	r2, [r3, #0]
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006630:	e7f0      	b.n	8006614 <prvIdleTask+0x8>
 8006632:	bf00      	nop
 8006634:	20000760 	.word	0x20000760
 8006638:	e000ed04 	.word	0xe000ed04

0800663c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006642:	2300      	movs	r3, #0
 8006644:	607b      	str	r3, [r7, #4]
 8006646:	e00c      	b.n	8006662 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	4613      	mov	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	4a12      	ldr	r2, [pc, #72]	; (800669c <prvInitialiseTaskLists+0x60>)
 8006654:	4413      	add	r3, r2
 8006656:	4618      	mov	r0, r3
 8006658:	f7fe fcf0 	bl	800503c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	3301      	adds	r3, #1
 8006660:	607b      	str	r3, [r7, #4]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b37      	cmp	r3, #55	; 0x37
 8006666:	d9ef      	bls.n	8006648 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006668:	480d      	ldr	r0, [pc, #52]	; (80066a0 <prvInitialiseTaskLists+0x64>)
 800666a:	f7fe fce7 	bl	800503c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800666e:	480d      	ldr	r0, [pc, #52]	; (80066a4 <prvInitialiseTaskLists+0x68>)
 8006670:	f7fe fce4 	bl	800503c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006674:	480c      	ldr	r0, [pc, #48]	; (80066a8 <prvInitialiseTaskLists+0x6c>)
 8006676:	f7fe fce1 	bl	800503c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800667a:	480c      	ldr	r0, [pc, #48]	; (80066ac <prvInitialiseTaskLists+0x70>)
 800667c:	f7fe fcde 	bl	800503c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006680:	480b      	ldr	r0, [pc, #44]	; (80066b0 <prvInitialiseTaskLists+0x74>)
 8006682:	f7fe fcdb 	bl	800503c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006686:	4b0b      	ldr	r3, [pc, #44]	; (80066b4 <prvInitialiseTaskLists+0x78>)
 8006688:	4a05      	ldr	r2, [pc, #20]	; (80066a0 <prvInitialiseTaskLists+0x64>)
 800668a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800668c:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <prvInitialiseTaskLists+0x7c>)
 800668e:	4a05      	ldr	r2, [pc, #20]	; (80066a4 <prvInitialiseTaskLists+0x68>)
 8006690:	601a      	str	r2, [r3, #0]
}
 8006692:	bf00      	nop
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	20000760 	.word	0x20000760
 80066a0:	20000bc0 	.word	0x20000bc0
 80066a4:	20000bd4 	.word	0x20000bd4
 80066a8:	20000bf0 	.word	0x20000bf0
 80066ac:	20000c04 	.word	0x20000c04
 80066b0:	20000c1c 	.word	0x20000c1c
 80066b4:	20000be8 	.word	0x20000be8
 80066b8:	20000bec 	.word	0x20000bec

080066bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066c2:	e019      	b.n	80066f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80066c4:	f000 fdd6 	bl	8007274 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066c8:	4b10      	ldr	r3, [pc, #64]	; (800670c <prvCheckTasksWaitingTermination+0x50>)
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	3304      	adds	r3, #4
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7fe fd3b 	bl	8005150 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80066da:	4b0d      	ldr	r3, [pc, #52]	; (8006710 <prvCheckTasksWaitingTermination+0x54>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	3b01      	subs	r3, #1
 80066e0:	4a0b      	ldr	r2, [pc, #44]	; (8006710 <prvCheckTasksWaitingTermination+0x54>)
 80066e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80066e4:	4b0b      	ldr	r3, [pc, #44]	; (8006714 <prvCheckTasksWaitingTermination+0x58>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3b01      	subs	r3, #1
 80066ea:	4a0a      	ldr	r2, [pc, #40]	; (8006714 <prvCheckTasksWaitingTermination+0x58>)
 80066ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80066ee:	f000 fdf1 	bl	80072d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f810 	bl	8006718 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066f8:	4b06      	ldr	r3, [pc, #24]	; (8006714 <prvCheckTasksWaitingTermination+0x58>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1e1      	bne.n	80066c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006700:	bf00      	nop
 8006702:	bf00      	nop
 8006704:	3708      	adds	r7, #8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	20000c04 	.word	0x20000c04
 8006710:	20000c30 	.word	0x20000c30
 8006714:	20000c18 	.word	0x20000c18

08006718 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006726:	2b00      	cmp	r3, #0
 8006728:	d108      	bne.n	800673c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672e:	4618      	mov	r0, r3
 8006730:	f000 ff50 	bl	80075d4 <vPortFree>
				vPortFree( pxTCB );
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 ff4d 	bl	80075d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800673a:	e018      	b.n	800676e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006742:	2b01      	cmp	r3, #1
 8006744:	d103      	bne.n	800674e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 ff44 	bl	80075d4 <vPortFree>
	}
 800674c:	e00f      	b.n	800676e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006754:	2b02      	cmp	r3, #2
 8006756:	d00a      	beq.n	800676e <prvDeleteTCB+0x56>
	__asm volatile
 8006758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675c:	f383 8811 	msr	BASEPRI, r3
 8006760:	f3bf 8f6f 	isb	sy
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	60fb      	str	r3, [r7, #12]
}
 800676a:	bf00      	nop
 800676c:	e7fe      	b.n	800676c <prvDeleteTCB+0x54>
	}
 800676e:	bf00      	nop
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
	...

08006778 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800677e:	4b0c      	ldr	r3, [pc, #48]	; (80067b0 <prvResetNextTaskUnblockTime+0x38>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d104      	bne.n	8006792 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006788:	4b0a      	ldr	r3, [pc, #40]	; (80067b4 <prvResetNextTaskUnblockTime+0x3c>)
 800678a:	f04f 32ff 	mov.w	r2, #4294967295
 800678e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006790:	e008      	b.n	80067a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006792:	4b07      	ldr	r3, [pc, #28]	; (80067b0 <prvResetNextTaskUnblockTime+0x38>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	4a04      	ldr	r2, [pc, #16]	; (80067b4 <prvResetNextTaskUnblockTime+0x3c>)
 80067a2:	6013      	str	r3, [r2, #0]
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	20000be8 	.word	0x20000be8
 80067b4:	20000c50 	.word	0x20000c50

080067b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80067be:	4b0b      	ldr	r3, [pc, #44]	; (80067ec <xTaskGetSchedulerState+0x34>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d102      	bne.n	80067cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80067c6:	2301      	movs	r3, #1
 80067c8:	607b      	str	r3, [r7, #4]
 80067ca:	e008      	b.n	80067de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067cc:	4b08      	ldr	r3, [pc, #32]	; (80067f0 <xTaskGetSchedulerState+0x38>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d102      	bne.n	80067da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80067d4:	2302      	movs	r3, #2
 80067d6:	607b      	str	r3, [r7, #4]
 80067d8:	e001      	b.n	80067de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80067da:	2300      	movs	r3, #0
 80067dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80067de:	687b      	ldr	r3, [r7, #4]
	}
 80067e0:	4618      	mov	r0, r3
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	20000c3c 	.word	0x20000c3c
 80067f0:	20000c58 	.word	0x20000c58

080067f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006800:	2300      	movs	r3, #0
 8006802:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d056      	beq.n	80068b8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800680a:	4b2e      	ldr	r3, [pc, #184]	; (80068c4 <xTaskPriorityDisinherit+0xd0>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	429a      	cmp	r2, r3
 8006812:	d00a      	beq.n	800682a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006818:	f383 8811 	msr	BASEPRI, r3
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	f3bf 8f4f 	dsb	sy
 8006824:	60fb      	str	r3, [r7, #12]
}
 8006826:	bf00      	nop
 8006828:	e7fe      	b.n	8006828 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10a      	bne.n	8006848 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	60bb      	str	r3, [r7, #8]
}
 8006844:	bf00      	nop
 8006846:	e7fe      	b.n	8006846 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800684c:	1e5a      	subs	r2, r3, #1
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800685a:	429a      	cmp	r2, r3
 800685c:	d02c      	beq.n	80068b8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006862:	2b00      	cmp	r3, #0
 8006864:	d128      	bne.n	80068b8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	3304      	adds	r3, #4
 800686a:	4618      	mov	r0, r3
 800686c:	f7fe fc70 	bl	8005150 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006888:	4b0f      	ldr	r3, [pc, #60]	; (80068c8 <xTaskPriorityDisinherit+0xd4>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	429a      	cmp	r2, r3
 800688e:	d903      	bls.n	8006898 <xTaskPriorityDisinherit+0xa4>
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006894:	4a0c      	ldr	r2, [pc, #48]	; (80068c8 <xTaskPriorityDisinherit+0xd4>)
 8006896:	6013      	str	r3, [r2, #0]
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689c:	4613      	mov	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4a09      	ldr	r2, [pc, #36]	; (80068cc <xTaskPriorityDisinherit+0xd8>)
 80068a6:	441a      	add	r2, r3
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	3304      	adds	r3, #4
 80068ac:	4619      	mov	r1, r3
 80068ae:	4610      	mov	r0, r2
 80068b0:	f7fe fbf1 	bl	8005096 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80068b4:	2301      	movs	r3, #1
 80068b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80068b8:	697b      	ldr	r3, [r7, #20]
	}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3718      	adds	r7, #24
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	2000075c 	.word	0x2000075c
 80068c8:	20000c38 	.word	0x20000c38
 80068cc:	20000760 	.word	0x20000760

080068d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80068da:	4b21      	ldr	r3, [pc, #132]	; (8006960 <prvAddCurrentTaskToDelayedList+0x90>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068e0:	4b20      	ldr	r3, [pc, #128]	; (8006964 <prvAddCurrentTaskToDelayedList+0x94>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3304      	adds	r3, #4
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fe fc32 	bl	8005150 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f2:	d10a      	bne.n	800690a <prvAddCurrentTaskToDelayedList+0x3a>
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d007      	beq.n	800690a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068fa:	4b1a      	ldr	r3, [pc, #104]	; (8006964 <prvAddCurrentTaskToDelayedList+0x94>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3304      	adds	r3, #4
 8006900:	4619      	mov	r1, r3
 8006902:	4819      	ldr	r0, [pc, #100]	; (8006968 <prvAddCurrentTaskToDelayedList+0x98>)
 8006904:	f7fe fbc7 	bl	8005096 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006908:	e026      	b.n	8006958 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4413      	add	r3, r2
 8006910:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006912:	4b14      	ldr	r3, [pc, #80]	; (8006964 <prvAddCurrentTaskToDelayedList+0x94>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	429a      	cmp	r2, r3
 8006920:	d209      	bcs.n	8006936 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006922:	4b12      	ldr	r3, [pc, #72]	; (800696c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	4b0f      	ldr	r3, [pc, #60]	; (8006964 <prvAddCurrentTaskToDelayedList+0x94>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3304      	adds	r3, #4
 800692c:	4619      	mov	r1, r3
 800692e:	4610      	mov	r0, r2
 8006930:	f7fe fbd5 	bl	80050de <vListInsert>
}
 8006934:	e010      	b.n	8006958 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006936:	4b0e      	ldr	r3, [pc, #56]	; (8006970 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	4b0a      	ldr	r3, [pc, #40]	; (8006964 <prvAddCurrentTaskToDelayedList+0x94>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3304      	adds	r3, #4
 8006940:	4619      	mov	r1, r3
 8006942:	4610      	mov	r0, r2
 8006944:	f7fe fbcb 	bl	80050de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006948:	4b0a      	ldr	r3, [pc, #40]	; (8006974 <prvAddCurrentTaskToDelayedList+0xa4>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	429a      	cmp	r2, r3
 8006950:	d202      	bcs.n	8006958 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006952:	4a08      	ldr	r2, [pc, #32]	; (8006974 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	6013      	str	r3, [r2, #0]
}
 8006958:	bf00      	nop
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	20000c34 	.word	0x20000c34
 8006964:	2000075c 	.word	0x2000075c
 8006968:	20000c1c 	.word	0x20000c1c
 800696c:	20000bec 	.word	0x20000bec
 8006970:	20000be8 	.word	0x20000be8
 8006974:	20000c50 	.word	0x20000c50

08006978 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b08a      	sub	sp, #40	; 0x28
 800697c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800697e:	2300      	movs	r3, #0
 8006980:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006982:	f000 fb07 	bl	8006f94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006986:	4b1c      	ldr	r3, [pc, #112]	; (80069f8 <xTimerCreateTimerTask+0x80>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d021      	beq.n	80069d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800698e:	2300      	movs	r3, #0
 8006990:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006992:	2300      	movs	r3, #0
 8006994:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006996:	1d3a      	adds	r2, r7, #4
 8006998:	f107 0108 	add.w	r1, r7, #8
 800699c:	f107 030c 	add.w	r3, r7, #12
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7fe fb31 	bl	8005008 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80069a6:	6879      	ldr	r1, [r7, #4]
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	9202      	str	r2, [sp, #8]
 80069ae:	9301      	str	r3, [sp, #4]
 80069b0:	2302      	movs	r3, #2
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	2300      	movs	r3, #0
 80069b6:	460a      	mov	r2, r1
 80069b8:	4910      	ldr	r1, [pc, #64]	; (80069fc <xTimerCreateTimerTask+0x84>)
 80069ba:	4811      	ldr	r0, [pc, #68]	; (8006a00 <xTimerCreateTimerTask+0x88>)
 80069bc:	f7ff f8de 	bl	8005b7c <xTaskCreateStatic>
 80069c0:	4603      	mov	r3, r0
 80069c2:	4a10      	ldr	r2, [pc, #64]	; (8006a04 <xTimerCreateTimerTask+0x8c>)
 80069c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80069c6:	4b0f      	ldr	r3, [pc, #60]	; (8006a04 <xTimerCreateTimerTask+0x8c>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80069ce:	2301      	movs	r3, #1
 80069d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10a      	bne.n	80069ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 80069d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	613b      	str	r3, [r7, #16]
}
 80069ea:	bf00      	nop
 80069ec:	e7fe      	b.n	80069ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80069ee:	697b      	ldr	r3, [r7, #20]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3718      	adds	r7, #24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20000c8c 	.word	0x20000c8c
 80069fc:	08007fe4 	.word	0x08007fe4
 8006a00:	08006b3d 	.word	0x08006b3d
 8006a04:	20000c90 	.word	0x20000c90

08006a08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b08a      	sub	sp, #40	; 0x28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
 8006a14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006a16:	2300      	movs	r3, #0
 8006a18:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10a      	bne.n	8006a36 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	623b      	str	r3, [r7, #32]
}
 8006a32:	bf00      	nop
 8006a34:	e7fe      	b.n	8006a34 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006a36:	4b1a      	ldr	r3, [pc, #104]	; (8006aa0 <xTimerGenericCommand+0x98>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d02a      	beq.n	8006a94 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2b05      	cmp	r3, #5
 8006a4e:	dc18      	bgt.n	8006a82 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006a50:	f7ff feb2 	bl	80067b8 <xTaskGetSchedulerState>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d109      	bne.n	8006a6e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006a5a:	4b11      	ldr	r3, [pc, #68]	; (8006aa0 <xTimerGenericCommand+0x98>)
 8006a5c:	6818      	ldr	r0, [r3, #0]
 8006a5e:	f107 0110 	add.w	r1, r7, #16
 8006a62:	2300      	movs	r3, #0
 8006a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a66:	f7fe fca1 	bl	80053ac <xQueueGenericSend>
 8006a6a:	6278      	str	r0, [r7, #36]	; 0x24
 8006a6c:	e012      	b.n	8006a94 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006a6e:	4b0c      	ldr	r3, [pc, #48]	; (8006aa0 <xTimerGenericCommand+0x98>)
 8006a70:	6818      	ldr	r0, [r3, #0]
 8006a72:	f107 0110 	add.w	r1, r7, #16
 8006a76:	2300      	movs	r3, #0
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f7fe fc97 	bl	80053ac <xQueueGenericSend>
 8006a7e:	6278      	str	r0, [r7, #36]	; 0x24
 8006a80:	e008      	b.n	8006a94 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a82:	4b07      	ldr	r3, [pc, #28]	; (8006aa0 <xTimerGenericCommand+0x98>)
 8006a84:	6818      	ldr	r0, [r3, #0]
 8006a86:	f107 0110 	add.w	r1, r7, #16
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	f7fe fd8b 	bl	80055a8 <xQueueGenericSendFromISR>
 8006a92:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3728      	adds	r7, #40	; 0x28
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	20000c8c 	.word	0x20000c8c

08006aa4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b088      	sub	sp, #32
 8006aa8:	af02      	add	r7, sp, #8
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aae:	4b22      	ldr	r3, [pc, #136]	; (8006b38 <prvProcessExpiredTimer+0x94>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	3304      	adds	r3, #4
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7fe fb47 	bl	8005150 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ac8:	f003 0304 	and.w	r3, r3, #4
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d022      	beq.n	8006b16 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	699a      	ldr	r2, [r3, #24]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	18d1      	adds	r1, r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	683a      	ldr	r2, [r7, #0]
 8006adc:	6978      	ldr	r0, [r7, #20]
 8006ade:	f000 f8d1 	bl	8006c84 <prvInsertTimerInActiveList>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01f      	beq.n	8006b28 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ae8:	2300      	movs	r3, #0
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	2300      	movs	r3, #0
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	2100      	movs	r1, #0
 8006af2:	6978      	ldr	r0, [r7, #20]
 8006af4:	f7ff ff88 	bl	8006a08 <xTimerGenericCommand>
 8006af8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d113      	bne.n	8006b28 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	60fb      	str	r3, [r7, #12]
}
 8006b12:	bf00      	nop
 8006b14:	e7fe      	b.n	8006b14 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b1c:	f023 0301 	bic.w	r3, r3, #1
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	6978      	ldr	r0, [r7, #20]
 8006b2e:	4798      	blx	r3
}
 8006b30:	bf00      	nop
 8006b32:	3718      	adds	r7, #24
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	20000c84 	.word	0x20000c84

08006b3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b44:	f107 0308 	add.w	r3, r7, #8
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 f857 	bl	8006bfc <prvGetNextExpireTime>
 8006b4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	4619      	mov	r1, r3
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 f803 	bl	8006b60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006b5a:	f000 f8d5 	bl	8006d08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b5e:	e7f1      	b.n	8006b44 <prvTimerTask+0x8>

08006b60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006b6a:	f7ff fa43 	bl	8005ff4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b6e:	f107 0308 	add.w	r3, r7, #8
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 f866 	bl	8006c44 <prvSampleTimeNow>
 8006b78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d130      	bne.n	8006be2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10a      	bne.n	8006b9c <prvProcessTimerOrBlockTask+0x3c>
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d806      	bhi.n	8006b9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006b8e:	f7ff fa3f 	bl	8006010 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006b92:	68f9      	ldr	r1, [r7, #12]
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f7ff ff85 	bl	8006aa4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006b9a:	e024      	b.n	8006be6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d008      	beq.n	8006bb4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006ba2:	4b13      	ldr	r3, [pc, #76]	; (8006bf0 <prvProcessTimerOrBlockTask+0x90>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <prvProcessTimerOrBlockTask+0x50>
 8006bac:	2301      	movs	r3, #1
 8006bae:	e000      	b.n	8006bb2 <prvProcessTimerOrBlockTask+0x52>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006bb4:	4b0f      	ldr	r3, [pc, #60]	; (8006bf4 <prvProcessTimerOrBlockTask+0x94>)
 8006bb6:	6818      	ldr	r0, [r3, #0]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	f7fe ffa7 	bl	8005b14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006bc6:	f7ff fa23 	bl	8006010 <xTaskResumeAll>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10a      	bne.n	8006be6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006bd0:	4b09      	ldr	r3, [pc, #36]	; (8006bf8 <prvProcessTimerOrBlockTask+0x98>)
 8006bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bd6:	601a      	str	r2, [r3, #0]
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	f3bf 8f6f 	isb	sy
}
 8006be0:	e001      	b.n	8006be6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006be2:	f7ff fa15 	bl	8006010 <xTaskResumeAll>
}
 8006be6:	bf00      	nop
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20000c88 	.word	0x20000c88
 8006bf4:	20000c8c 	.word	0x20000c8c
 8006bf8:	e000ed04 	.word	0xe000ed04

08006bfc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006c04:	4b0e      	ldr	r3, [pc, #56]	; (8006c40 <prvGetNextExpireTime+0x44>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <prvGetNextExpireTime+0x16>
 8006c0e:	2201      	movs	r2, #1
 8006c10:	e000      	b.n	8006c14 <prvGetNextExpireTime+0x18>
 8006c12:	2200      	movs	r2, #0
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d105      	bne.n	8006c2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c20:	4b07      	ldr	r3, [pc, #28]	; (8006c40 <prvGetNextExpireTime+0x44>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	60fb      	str	r3, [r7, #12]
 8006c2a:	e001      	b.n	8006c30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006c30:	68fb      	ldr	r3, [r7, #12]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	20000c84 	.word	0x20000c84

08006c44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006c4c:	f7ff fa7e 	bl	800614c <xTaskGetTickCount>
 8006c50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006c52:	4b0b      	ldr	r3, [pc, #44]	; (8006c80 <prvSampleTimeNow+0x3c>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d205      	bcs.n	8006c68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006c5c:	f000 f936 	bl	8006ecc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	601a      	str	r2, [r3, #0]
 8006c66:	e002      	b.n	8006c6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006c6e:	4a04      	ldr	r2, [pc, #16]	; (8006c80 <prvSampleTimeNow+0x3c>)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006c74:	68fb      	ldr	r3, [r7, #12]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	20000c94 	.word	0x20000c94

08006c84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
 8006c90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006c92:	2300      	movs	r3, #0
 8006c94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d812      	bhi.n	8006cd0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	1ad2      	subs	r2, r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d302      	bcc.n	8006cbe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	617b      	str	r3, [r7, #20]
 8006cbc:	e01b      	b.n	8006cf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006cbe:	4b10      	ldr	r3, [pc, #64]	; (8006d00 <prvInsertTimerInActiveList+0x7c>)
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	3304      	adds	r3, #4
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	4610      	mov	r0, r2
 8006cca:	f7fe fa08 	bl	80050de <vListInsert>
 8006cce:	e012      	b.n	8006cf6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d206      	bcs.n	8006ce6 <prvInsertTimerInActiveList+0x62>
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d302      	bcc.n	8006ce6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	617b      	str	r3, [r7, #20]
 8006ce4:	e007      	b.n	8006cf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ce6:	4b07      	ldr	r3, [pc, #28]	; (8006d04 <prvInsertTimerInActiveList+0x80>)
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	3304      	adds	r3, #4
 8006cee:	4619      	mov	r1, r3
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	f7fe f9f4 	bl	80050de <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006cf6:	697b      	ldr	r3, [r7, #20]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3718      	adds	r7, #24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	20000c88 	.word	0x20000c88
 8006d04:	20000c84 	.word	0x20000c84

08006d08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b08e      	sub	sp, #56	; 0x38
 8006d0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d0e:	e0ca      	b.n	8006ea6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	da18      	bge.n	8006d48 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006d16:	1d3b      	adds	r3, r7, #4
 8006d18:	3304      	adds	r3, #4
 8006d1a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10a      	bne.n	8006d38 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	61fb      	str	r3, [r7, #28]
}
 8006d34:	bf00      	nop
 8006d36:	e7fe      	b.n	8006d36 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d3e:	6850      	ldr	r0, [r2, #4]
 8006d40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d42:	6892      	ldr	r2, [r2, #8]
 8006d44:	4611      	mov	r1, r2
 8006d46:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f2c0 80aa 	blt.w	8006ea4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d004      	beq.n	8006d66 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5e:	3304      	adds	r3, #4
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7fe f9f5 	bl	8005150 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d66:	463b      	mov	r3, r7
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7ff ff6b 	bl	8006c44 <prvSampleTimeNow>
 8006d6e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b09      	cmp	r3, #9
 8006d74:	f200 8097 	bhi.w	8006ea6 <prvProcessReceivedCommands+0x19e>
 8006d78:	a201      	add	r2, pc, #4	; (adr r2, 8006d80 <prvProcessReceivedCommands+0x78>)
 8006d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7e:	bf00      	nop
 8006d80:	08006da9 	.word	0x08006da9
 8006d84:	08006da9 	.word	0x08006da9
 8006d88:	08006da9 	.word	0x08006da9
 8006d8c:	08006e1d 	.word	0x08006e1d
 8006d90:	08006e31 	.word	0x08006e31
 8006d94:	08006e7b 	.word	0x08006e7b
 8006d98:	08006da9 	.word	0x08006da9
 8006d9c:	08006da9 	.word	0x08006da9
 8006da0:	08006e1d 	.word	0x08006e1d
 8006da4:	08006e31 	.word	0x08006e31
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006daa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dae:	f043 0301 	orr.w	r3, r3, #1
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	18d1      	adds	r1, r2, r3
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dc8:	f7ff ff5c 	bl	8006c84 <prvInsertTimerInActiveList>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d069      	beq.n	8006ea6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dd8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d05e      	beq.n	8006ea6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	441a      	add	r2, r3
 8006df0:	2300      	movs	r3, #0
 8006df2:	9300      	str	r3, [sp, #0]
 8006df4:	2300      	movs	r3, #0
 8006df6:	2100      	movs	r1, #0
 8006df8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dfa:	f7ff fe05 	bl	8006a08 <xTimerGenericCommand>
 8006dfe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d14f      	bne.n	8006ea6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0a:	f383 8811 	msr	BASEPRI, r3
 8006e0e:	f3bf 8f6f 	isb	sy
 8006e12:	f3bf 8f4f 	dsb	sy
 8006e16:	61bb      	str	r3, [r7, #24]
}
 8006e18:	bf00      	nop
 8006e1a:	e7fe      	b.n	8006e1a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e22:	f023 0301 	bic.w	r3, r3, #1
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006e2e:	e03a      	b.n	8006ea6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e36:	f043 0301 	orr.w	r3, r3, #1
 8006e3a:	b2da      	uxtb	r2, r3
 8006e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e46:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d10a      	bne.n	8006e66 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e54:	f383 8811 	msr	BASEPRI, r3
 8006e58:	f3bf 8f6f 	isb	sy
 8006e5c:	f3bf 8f4f 	dsb	sy
 8006e60:	617b      	str	r3, [r7, #20]
}
 8006e62:	bf00      	nop
 8006e64:	e7fe      	b.n	8006e64 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e68:	699a      	ldr	r2, [r3, #24]
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6c:	18d1      	adds	r1, r2, r3
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e74:	f7ff ff06 	bl	8006c84 <prvInsertTimerInActiveList>
					break;
 8006e78:	e015      	b.n	8006ea6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e80:	f003 0302 	and.w	r3, r3, #2
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d103      	bne.n	8006e90 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e8a:	f000 fba3 	bl	80075d4 <vPortFree>
 8006e8e:	e00a      	b.n	8006ea6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e96:	f023 0301 	bic.w	r3, r3, #1
 8006e9a:	b2da      	uxtb	r2, r3
 8006e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006ea2:	e000      	b.n	8006ea6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006ea4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ea6:	4b08      	ldr	r3, [pc, #32]	; (8006ec8 <prvProcessReceivedCommands+0x1c0>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	1d39      	adds	r1, r7, #4
 8006eac:	2200      	movs	r2, #0
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fe fc16 	bl	80056e0 <xQueueReceive>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f47f af2a 	bne.w	8006d10 <prvProcessReceivedCommands+0x8>
	}
}
 8006ebc:	bf00      	nop
 8006ebe:	bf00      	nop
 8006ec0:	3730      	adds	r7, #48	; 0x30
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	20000c8c 	.word	0x20000c8c

08006ecc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b088      	sub	sp, #32
 8006ed0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ed2:	e048      	b.n	8006f66 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ed4:	4b2d      	ldr	r3, [pc, #180]	; (8006f8c <prvSwitchTimerLists+0xc0>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ede:	4b2b      	ldr	r3, [pc, #172]	; (8006f8c <prvSwitchTimerLists+0xc0>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	3304      	adds	r3, #4
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7fe f92f 	bl	8005150 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f00:	f003 0304 	and.w	r3, r3, #4
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d02e      	beq.n	8006f66 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	4413      	add	r3, r2
 8006f10:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d90e      	bls.n	8006f38 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f26:	4b19      	ldr	r3, [pc, #100]	; (8006f8c <prvSwitchTimerLists+0xc0>)
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	4619      	mov	r1, r3
 8006f30:	4610      	mov	r0, r2
 8006f32:	f7fe f8d4 	bl	80050de <vListInsert>
 8006f36:	e016      	b.n	8006f66 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f38:	2300      	movs	r3, #0
 8006f3a:	9300      	str	r3, [sp, #0]
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	2100      	movs	r1, #0
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f7ff fd60 	bl	8006a08 <xTimerGenericCommand>
 8006f48:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10a      	bne.n	8006f66 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	603b      	str	r3, [r7, #0]
}
 8006f62:	bf00      	nop
 8006f64:	e7fe      	b.n	8006f64 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f66:	4b09      	ldr	r3, [pc, #36]	; (8006f8c <prvSwitchTimerLists+0xc0>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1b1      	bne.n	8006ed4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006f70:	4b06      	ldr	r3, [pc, #24]	; (8006f8c <prvSwitchTimerLists+0xc0>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006f76:	4b06      	ldr	r3, [pc, #24]	; (8006f90 <prvSwitchTimerLists+0xc4>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a04      	ldr	r2, [pc, #16]	; (8006f8c <prvSwitchTimerLists+0xc0>)
 8006f7c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006f7e:	4a04      	ldr	r2, [pc, #16]	; (8006f90 <prvSwitchTimerLists+0xc4>)
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	6013      	str	r3, [r2, #0]
}
 8006f84:	bf00      	nop
 8006f86:	3718      	adds	r7, #24
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	20000c84 	.word	0x20000c84
 8006f90:	20000c88 	.word	0x20000c88

08006f94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006f9a:	f000 f96b 	bl	8007274 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006f9e:	4b15      	ldr	r3, [pc, #84]	; (8006ff4 <prvCheckForValidListAndQueue+0x60>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d120      	bne.n	8006fe8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006fa6:	4814      	ldr	r0, [pc, #80]	; (8006ff8 <prvCheckForValidListAndQueue+0x64>)
 8006fa8:	f7fe f848 	bl	800503c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006fac:	4813      	ldr	r0, [pc, #76]	; (8006ffc <prvCheckForValidListAndQueue+0x68>)
 8006fae:	f7fe f845 	bl	800503c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006fb2:	4b13      	ldr	r3, [pc, #76]	; (8007000 <prvCheckForValidListAndQueue+0x6c>)
 8006fb4:	4a10      	ldr	r2, [pc, #64]	; (8006ff8 <prvCheckForValidListAndQueue+0x64>)
 8006fb6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006fb8:	4b12      	ldr	r3, [pc, #72]	; (8007004 <prvCheckForValidListAndQueue+0x70>)
 8006fba:	4a10      	ldr	r2, [pc, #64]	; (8006ffc <prvCheckForValidListAndQueue+0x68>)
 8006fbc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	4b11      	ldr	r3, [pc, #68]	; (8007008 <prvCheckForValidListAndQueue+0x74>)
 8006fc4:	4a11      	ldr	r2, [pc, #68]	; (800700c <prvCheckForValidListAndQueue+0x78>)
 8006fc6:	2110      	movs	r1, #16
 8006fc8:	200a      	movs	r0, #10
 8006fca:	f7fe f953 	bl	8005274 <xQueueGenericCreateStatic>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	4a08      	ldr	r2, [pc, #32]	; (8006ff4 <prvCheckForValidListAndQueue+0x60>)
 8006fd2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006fd4:	4b07      	ldr	r3, [pc, #28]	; (8006ff4 <prvCheckForValidListAndQueue+0x60>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d005      	beq.n	8006fe8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006fdc:	4b05      	ldr	r3, [pc, #20]	; (8006ff4 <prvCheckForValidListAndQueue+0x60>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	490b      	ldr	r1, [pc, #44]	; (8007010 <prvCheckForValidListAndQueue+0x7c>)
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7fe fd6c 	bl	8005ac0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fe8:	f000 f974 	bl	80072d4 <vPortExitCritical>
}
 8006fec:	bf00      	nop
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	20000c8c 	.word	0x20000c8c
 8006ff8:	20000c5c 	.word	0x20000c5c
 8006ffc:	20000c70 	.word	0x20000c70
 8007000:	20000c84 	.word	0x20000c84
 8007004:	20000c88 	.word	0x20000c88
 8007008:	20000d38 	.word	0x20000d38
 800700c:	20000c98 	.word	0x20000c98
 8007010:	08007fec 	.word	0x08007fec

08007014 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3b04      	subs	r3, #4
 8007024:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800702c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	3b04      	subs	r3, #4
 8007032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	f023 0201 	bic.w	r2, r3, #1
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	3b04      	subs	r3, #4
 8007042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007044:	4a0c      	ldr	r2, [pc, #48]	; (8007078 <pxPortInitialiseStack+0x64>)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	3b14      	subs	r3, #20
 800704e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	3b04      	subs	r3, #4
 800705a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f06f 0202 	mvn.w	r2, #2
 8007062:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	3b20      	subs	r3, #32
 8007068:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800706a:	68fb      	ldr	r3, [r7, #12]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	0800707d 	.word	0x0800707d

0800707c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007082:	2300      	movs	r3, #0
 8007084:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007086:	4b12      	ldr	r3, [pc, #72]	; (80070d0 <prvTaskExitError+0x54>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708e:	d00a      	beq.n	80070a6 <prvTaskExitError+0x2a>
	__asm volatile
 8007090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	60fb      	str	r3, [r7, #12]
}
 80070a2:	bf00      	nop
 80070a4:	e7fe      	b.n	80070a4 <prvTaskExitError+0x28>
	__asm volatile
 80070a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	60bb      	str	r3, [r7, #8]
}
 80070b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80070ba:	bf00      	nop
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d0fc      	beq.n	80070bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80070c2:	bf00      	nop
 80070c4:	bf00      	nop
 80070c6:	3714      	adds	r7, #20
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	20000014 	.word	0x20000014
	...

080070e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80070e0:	4b07      	ldr	r3, [pc, #28]	; (8007100 <pxCurrentTCBConst2>)
 80070e2:	6819      	ldr	r1, [r3, #0]
 80070e4:	6808      	ldr	r0, [r1, #0]
 80070e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ea:	f380 8809 	msr	PSP, r0
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f04f 0000 	mov.w	r0, #0
 80070f6:	f380 8811 	msr	BASEPRI, r0
 80070fa:	4770      	bx	lr
 80070fc:	f3af 8000 	nop.w

08007100 <pxCurrentTCBConst2>:
 8007100:	2000075c 	.word	0x2000075c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007104:	bf00      	nop
 8007106:	bf00      	nop

08007108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007108:	4808      	ldr	r0, [pc, #32]	; (800712c <prvPortStartFirstTask+0x24>)
 800710a:	6800      	ldr	r0, [r0, #0]
 800710c:	6800      	ldr	r0, [r0, #0]
 800710e:	f380 8808 	msr	MSP, r0
 8007112:	f04f 0000 	mov.w	r0, #0
 8007116:	f380 8814 	msr	CONTROL, r0
 800711a:	b662      	cpsie	i
 800711c:	b661      	cpsie	f
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	df00      	svc	0
 8007128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800712a:	bf00      	nop
 800712c:	e000ed08 	.word	0xe000ed08

08007130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b086      	sub	sp, #24
 8007134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007136:	4b46      	ldr	r3, [pc, #280]	; (8007250 <xPortStartScheduler+0x120>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a46      	ldr	r2, [pc, #280]	; (8007254 <xPortStartScheduler+0x124>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d10a      	bne.n	8007156 <xPortStartScheduler+0x26>
	__asm volatile
 8007140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007144:	f383 8811 	msr	BASEPRI, r3
 8007148:	f3bf 8f6f 	isb	sy
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	613b      	str	r3, [r7, #16]
}
 8007152:	bf00      	nop
 8007154:	e7fe      	b.n	8007154 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007156:	4b3e      	ldr	r3, [pc, #248]	; (8007250 <xPortStartScheduler+0x120>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a3f      	ldr	r2, [pc, #252]	; (8007258 <xPortStartScheduler+0x128>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d10a      	bne.n	8007176 <xPortStartScheduler+0x46>
	__asm volatile
 8007160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	60fb      	str	r3, [r7, #12]
}
 8007172:	bf00      	nop
 8007174:	e7fe      	b.n	8007174 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007176:	4b39      	ldr	r3, [pc, #228]	; (800725c <xPortStartScheduler+0x12c>)
 8007178:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	b2db      	uxtb	r3, r3
 8007180:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	22ff      	movs	r2, #255	; 0xff
 8007186:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	b2db      	uxtb	r3, r3
 800718e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007190:	78fb      	ldrb	r3, [r7, #3]
 8007192:	b2db      	uxtb	r3, r3
 8007194:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007198:	b2da      	uxtb	r2, r3
 800719a:	4b31      	ldr	r3, [pc, #196]	; (8007260 <xPortStartScheduler+0x130>)
 800719c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800719e:	4b31      	ldr	r3, [pc, #196]	; (8007264 <xPortStartScheduler+0x134>)
 80071a0:	2207      	movs	r2, #7
 80071a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071a4:	e009      	b.n	80071ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80071a6:	4b2f      	ldr	r3, [pc, #188]	; (8007264 <xPortStartScheduler+0x134>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3b01      	subs	r3, #1
 80071ac:	4a2d      	ldr	r2, [pc, #180]	; (8007264 <xPortStartScheduler+0x134>)
 80071ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80071b0:	78fb      	ldrb	r3, [r7, #3]
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071ba:	78fb      	ldrb	r3, [r7, #3]
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c2:	2b80      	cmp	r3, #128	; 0x80
 80071c4:	d0ef      	beq.n	80071a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80071c6:	4b27      	ldr	r3, [pc, #156]	; (8007264 <xPortStartScheduler+0x134>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f1c3 0307 	rsb	r3, r3, #7
 80071ce:	2b04      	cmp	r3, #4
 80071d0:	d00a      	beq.n	80071e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80071d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d6:	f383 8811 	msr	BASEPRI, r3
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	60bb      	str	r3, [r7, #8]
}
 80071e4:	bf00      	nop
 80071e6:	e7fe      	b.n	80071e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80071e8:	4b1e      	ldr	r3, [pc, #120]	; (8007264 <xPortStartScheduler+0x134>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	021b      	lsls	r3, r3, #8
 80071ee:	4a1d      	ldr	r2, [pc, #116]	; (8007264 <xPortStartScheduler+0x134>)
 80071f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071f2:	4b1c      	ldr	r3, [pc, #112]	; (8007264 <xPortStartScheduler+0x134>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071fa:	4a1a      	ldr	r2, [pc, #104]	; (8007264 <xPortStartScheduler+0x134>)
 80071fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	b2da      	uxtb	r2, r3
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007206:	4b18      	ldr	r3, [pc, #96]	; (8007268 <xPortStartScheduler+0x138>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a17      	ldr	r2, [pc, #92]	; (8007268 <xPortStartScheduler+0x138>)
 800720c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007210:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007212:	4b15      	ldr	r3, [pc, #84]	; (8007268 <xPortStartScheduler+0x138>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a14      	ldr	r2, [pc, #80]	; (8007268 <xPortStartScheduler+0x138>)
 8007218:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800721c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800721e:	f000 f8dd 	bl	80073dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007222:	4b12      	ldr	r3, [pc, #72]	; (800726c <xPortStartScheduler+0x13c>)
 8007224:	2200      	movs	r2, #0
 8007226:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007228:	f000 f8fc 	bl	8007424 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800722c:	4b10      	ldr	r3, [pc, #64]	; (8007270 <xPortStartScheduler+0x140>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a0f      	ldr	r2, [pc, #60]	; (8007270 <xPortStartScheduler+0x140>)
 8007232:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007236:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007238:	f7ff ff66 	bl	8007108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800723c:	f7ff f850 	bl	80062e0 <vTaskSwitchContext>
	prvTaskExitError();
 8007240:	f7ff ff1c 	bl	800707c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3718      	adds	r7, #24
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	e000ed00 	.word	0xe000ed00
 8007254:	410fc271 	.word	0x410fc271
 8007258:	410fc270 	.word	0x410fc270
 800725c:	e000e400 	.word	0xe000e400
 8007260:	20000d88 	.word	0x20000d88
 8007264:	20000d8c 	.word	0x20000d8c
 8007268:	e000ed20 	.word	0xe000ed20
 800726c:	20000014 	.word	0x20000014
 8007270:	e000ef34 	.word	0xe000ef34

08007274 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
	__asm volatile
 800727a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	607b      	str	r3, [r7, #4]
}
 800728c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800728e:	4b0f      	ldr	r3, [pc, #60]	; (80072cc <vPortEnterCritical+0x58>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3301      	adds	r3, #1
 8007294:	4a0d      	ldr	r2, [pc, #52]	; (80072cc <vPortEnterCritical+0x58>)
 8007296:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007298:	4b0c      	ldr	r3, [pc, #48]	; (80072cc <vPortEnterCritical+0x58>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d10f      	bne.n	80072c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80072a0:	4b0b      	ldr	r3, [pc, #44]	; (80072d0 <vPortEnterCritical+0x5c>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00a      	beq.n	80072c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80072aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ae:	f383 8811 	msr	BASEPRI, r3
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	603b      	str	r3, [r7, #0]
}
 80072bc:	bf00      	nop
 80072be:	e7fe      	b.n	80072be <vPortEnterCritical+0x4a>
	}
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	20000014 	.word	0x20000014
 80072d0:	e000ed04 	.word	0xe000ed04

080072d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80072da:	4b12      	ldr	r3, [pc, #72]	; (8007324 <vPortExitCritical+0x50>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d10a      	bne.n	80072f8 <vPortExitCritical+0x24>
	__asm volatile
 80072e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e6:	f383 8811 	msr	BASEPRI, r3
 80072ea:	f3bf 8f6f 	isb	sy
 80072ee:	f3bf 8f4f 	dsb	sy
 80072f2:	607b      	str	r3, [r7, #4]
}
 80072f4:	bf00      	nop
 80072f6:	e7fe      	b.n	80072f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80072f8:	4b0a      	ldr	r3, [pc, #40]	; (8007324 <vPortExitCritical+0x50>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3b01      	subs	r3, #1
 80072fe:	4a09      	ldr	r2, [pc, #36]	; (8007324 <vPortExitCritical+0x50>)
 8007300:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007302:	4b08      	ldr	r3, [pc, #32]	; (8007324 <vPortExitCritical+0x50>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d105      	bne.n	8007316 <vPortExitCritical+0x42>
 800730a:	2300      	movs	r3, #0
 800730c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	f383 8811 	msr	BASEPRI, r3
}
 8007314:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007316:	bf00      	nop
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	20000014 	.word	0x20000014
	...

08007330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007330:	f3ef 8009 	mrs	r0, PSP
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	4b15      	ldr	r3, [pc, #84]	; (8007390 <pxCurrentTCBConst>)
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	f01e 0f10 	tst.w	lr, #16
 8007340:	bf08      	it	eq
 8007342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800734a:	6010      	str	r0, [r2, #0]
 800734c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007350:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007354:	f380 8811 	msr	BASEPRI, r0
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	f3bf 8f6f 	isb	sy
 8007360:	f7fe ffbe 	bl	80062e0 <vTaskSwitchContext>
 8007364:	f04f 0000 	mov.w	r0, #0
 8007368:	f380 8811 	msr	BASEPRI, r0
 800736c:	bc09      	pop	{r0, r3}
 800736e:	6819      	ldr	r1, [r3, #0]
 8007370:	6808      	ldr	r0, [r1, #0]
 8007372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007376:	f01e 0f10 	tst.w	lr, #16
 800737a:	bf08      	it	eq
 800737c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007380:	f380 8809 	msr	PSP, r0
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	f3af 8000 	nop.w

08007390 <pxCurrentTCBConst>:
 8007390:	2000075c 	.word	0x2000075c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007394:	bf00      	nop
 8007396:	bf00      	nop

08007398 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
	__asm volatile
 800739e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	607b      	str	r3, [r7, #4]
}
 80073b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80073b2:	f7fe fedb 	bl	800616c <xTaskIncrementTick>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d003      	beq.n	80073c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80073bc:	4b06      	ldr	r3, [pc, #24]	; (80073d8 <xPortSysTickHandler+0x40>)
 80073be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073c2:	601a      	str	r2, [r3, #0]
 80073c4:	2300      	movs	r3, #0
 80073c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	f383 8811 	msr	BASEPRI, r3
}
 80073ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80073d0:	bf00      	nop
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	e000ed04 	.word	0xe000ed04

080073dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80073dc:	b480      	push	{r7}
 80073de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80073e0:	4b0b      	ldr	r3, [pc, #44]	; (8007410 <vPortSetupTimerInterrupt+0x34>)
 80073e2:	2200      	movs	r2, #0
 80073e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80073e6:	4b0b      	ldr	r3, [pc, #44]	; (8007414 <vPortSetupTimerInterrupt+0x38>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80073ec:	4b0a      	ldr	r3, [pc, #40]	; (8007418 <vPortSetupTimerInterrupt+0x3c>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a0a      	ldr	r2, [pc, #40]	; (800741c <vPortSetupTimerInterrupt+0x40>)
 80073f2:	fba2 2303 	umull	r2, r3, r2, r3
 80073f6:	099b      	lsrs	r3, r3, #6
 80073f8:	4a09      	ldr	r2, [pc, #36]	; (8007420 <vPortSetupTimerInterrupt+0x44>)
 80073fa:	3b01      	subs	r3, #1
 80073fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80073fe:	4b04      	ldr	r3, [pc, #16]	; (8007410 <vPortSetupTimerInterrupt+0x34>)
 8007400:	2207      	movs	r2, #7
 8007402:	601a      	str	r2, [r3, #0]
}
 8007404:	bf00      	nop
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	e000e010 	.word	0xe000e010
 8007414:	e000e018 	.word	0xe000e018
 8007418:	20000008 	.word	0x20000008
 800741c:	10624dd3 	.word	0x10624dd3
 8007420:	e000e014 	.word	0xe000e014

08007424 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007424:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007434 <vPortEnableVFP+0x10>
 8007428:	6801      	ldr	r1, [r0, #0]
 800742a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800742e:	6001      	str	r1, [r0, #0]
 8007430:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007432:	bf00      	nop
 8007434:	e000ed88 	.word	0xe000ed88

08007438 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800743e:	f3ef 8305 	mrs	r3, IPSR
 8007442:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2b0f      	cmp	r3, #15
 8007448:	d914      	bls.n	8007474 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800744a:	4a17      	ldr	r2, [pc, #92]	; (80074a8 <vPortValidateInterruptPriority+0x70>)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4413      	add	r3, r2
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007454:	4b15      	ldr	r3, [pc, #84]	; (80074ac <vPortValidateInterruptPriority+0x74>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	7afa      	ldrb	r2, [r7, #11]
 800745a:	429a      	cmp	r2, r3
 800745c:	d20a      	bcs.n	8007474 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800745e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007462:	f383 8811 	msr	BASEPRI, r3
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	607b      	str	r3, [r7, #4]
}
 8007470:	bf00      	nop
 8007472:	e7fe      	b.n	8007472 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007474:	4b0e      	ldr	r3, [pc, #56]	; (80074b0 <vPortValidateInterruptPriority+0x78>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800747c:	4b0d      	ldr	r3, [pc, #52]	; (80074b4 <vPortValidateInterruptPriority+0x7c>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	429a      	cmp	r2, r3
 8007482:	d90a      	bls.n	800749a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007488:	f383 8811 	msr	BASEPRI, r3
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	603b      	str	r3, [r7, #0]
}
 8007496:	bf00      	nop
 8007498:	e7fe      	b.n	8007498 <vPortValidateInterruptPriority+0x60>
	}
 800749a:	bf00      	nop
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	e000e3f0 	.word	0xe000e3f0
 80074ac:	20000d88 	.word	0x20000d88
 80074b0:	e000ed0c 	.word	0xe000ed0c
 80074b4:	20000d8c 	.word	0x20000d8c

080074b8 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b088      	sub	sp, #32
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 80074c0:	2300      	movs	r3, #0
 80074c2:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 80074c4:	f7fe fd96 	bl	8005ff4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 80074c8:	4b3e      	ldr	r3, [pc, #248]	; (80075c4 <pvPortMalloc+0x10c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d104      	bne.n	80074da <pvPortMalloc+0x22>
		{
			prvHeapInit();
 80074d0:	f000 f8ba 	bl	8007648 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 80074d4:	4b3b      	ldr	r3, [pc, #236]	; (80075c4 <pvPortMalloc+0x10c>)
 80074d6:	2201      	movs	r2, #1
 80074d8:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00e      	beq.n	80074fe <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 80074e0:	2308      	movs	r3, #8
 80074e2:	461a      	mov	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4413      	add	r3, r2
 80074e8:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f003 0307 	and.w	r3, r3, #7
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d004      	beq.n	80074fe <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f023 0307 	bic.w	r3, r3, #7
 80074fa:	3308      	adds	r3, #8
 80074fc:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d057      	beq.n	80075b4 <pvPortMalloc+0xfc>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f247 5227 	movw	r2, #29991	; 0x7527
 800750a:	4293      	cmp	r3, r2
 800750c:	d852      	bhi.n	80075b4 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 800750e:	4b2e      	ldr	r3, [pc, #184]	; (80075c8 <pvPortMalloc+0x110>)
 8007510:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 8007512:	4b2d      	ldr	r3, [pc, #180]	; (80075c8 <pvPortMalloc+0x110>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007518:	e004      	b.n	8007524 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	429a      	cmp	r2, r3
 800752c:	d903      	bls.n	8007536 <pvPortMalloc+0x7e>
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1f1      	bne.n	800751a <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	4a24      	ldr	r2, [pc, #144]	; (80075cc <pvPortMalloc+0x114>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d03a      	beq.n	80075b4 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2208      	movs	r2, #8
 8007544:	4413      	add	r3, r2
 8007546:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	1ad3      	subs	r3, r2, r3
 8007558:	2208      	movs	r2, #8
 800755a:	0052      	lsls	r2, r2, #1
 800755c:	4293      	cmp	r3, r2
 800755e:	d922      	bls.n	80075a6 <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007560:	69fa      	ldr	r2, [r7, #28]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4413      	add	r3, r2
 8007566:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	1ad2      	subs	r2, r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	60bb      	str	r3, [r7, #8]
 8007580:	4b11      	ldr	r3, [pc, #68]	; (80075c8 <pvPortMalloc+0x110>)
 8007582:	613b      	str	r3, [r7, #16]
 8007584:	e002      	b.n	800758c <pvPortMalloc+0xd4>
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	613b      	str	r3, [r7, #16]
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	429a      	cmp	r2, r3
 8007596:	d8f6      	bhi.n	8007586 <pvPortMalloc+0xce>
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	601a      	str	r2, [r3, #0]
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075a6:	4b0a      	ldr	r3, [pc, #40]	; (80075d0 <pvPortMalloc+0x118>)
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	4a07      	ldr	r2, [pc, #28]	; (80075d0 <pvPortMalloc+0x118>)
 80075b2:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80075b4:	f7fe fd2c 	bl	8006010 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 80075b8:	697b      	ldr	r3, [r7, #20]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3720      	adds	r7, #32
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	200082d0 	.word	0x200082d0
 80075c8:	200082c0 	.word	0x200082c0
 80075cc:	200082c8 	.word	0x200082c8
 80075d0:	20000018 	.word	0x20000018

080075d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d027      	beq.n	8007636 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 80075e6:	2308      	movs	r3, #8
 80075e8:	425b      	negs	r3, r3
 80075ea:	693a      	ldr	r2, [r7, #16]
 80075ec:	4413      	add	r3, r2
 80075ee:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 80075f4:	f7fe fcfe 	bl	8005ff4 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	60bb      	str	r3, [r7, #8]
 80075fe:	4b10      	ldr	r3, [pc, #64]	; (8007640 <vPortFree+0x6c>)
 8007600:	617b      	str	r3, [r7, #20]
 8007602:	e002      	b.n	800760a <vPortFree+0x36>
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	617b      	str	r3, [r7, #20]
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	429a      	cmp	r2, r3
 8007614:	d8f6      	bhi.n	8007604 <vPortFree+0x30>
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	685a      	ldr	r2, [r3, #4]
 8007628:	4b06      	ldr	r3, [pc, #24]	; (8007644 <vPortFree+0x70>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4413      	add	r3, r2
 800762e:	4a05      	ldr	r2, [pc, #20]	; (8007644 <vPortFree+0x70>)
 8007630:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 8007632:	f7fe fced 	bl	8006010 <xTaskResumeAll>
	}
}
 8007636:	bf00      	nop
 8007638:	3718      	adds	r7, #24
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	200082c0 	.word	0x200082c0
 8007644:	20000018 	.word	0x20000018

08007648 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800764e:	4b10      	ldr	r3, [pc, #64]	; (8007690 <prvHeapInit+0x48>)
 8007650:	f023 0307 	bic.w	r3, r3, #7
 8007654:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007656:	4a0f      	ldr	r2, [pc, #60]	; (8007694 <prvHeapInit+0x4c>)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800765c:	4b0d      	ldr	r3, [pc, #52]	; (8007694 <prvHeapInit+0x4c>)
 800765e:	2200      	movs	r2, #0
 8007660:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8007662:	4b0d      	ldr	r3, [pc, #52]	; (8007698 <prvHeapInit+0x50>)
 8007664:	f247 5228 	movw	r2, #29992	; 0x7528
 8007668:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 800766a:	4b0b      	ldr	r3, [pc, #44]	; (8007698 <prvHeapInit+0x50>)
 800766c:	2200      	movs	r2, #0
 800766e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	f247 5228 	movw	r2, #29992	; 0x7528
 800767a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	4a06      	ldr	r2, [pc, #24]	; (8007698 <prvHeapInit+0x50>)
 8007680:	601a      	str	r2, [r3, #0]
}
 8007682:	bf00      	nop
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	20000d98 	.word	0x20000d98
 8007694:	200082c0 	.word	0x200082c0
 8007698:	200082c8 	.word	0x200082c8

0800769c <__errno>:
 800769c:	4b01      	ldr	r3, [pc, #4]	; (80076a4 <__errno+0x8>)
 800769e:	6818      	ldr	r0, [r3, #0]
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	2000001c 	.word	0x2000001c

080076a8 <__libc_init_array>:
 80076a8:	b570      	push	{r4, r5, r6, lr}
 80076aa:	4d0d      	ldr	r5, [pc, #52]	; (80076e0 <__libc_init_array+0x38>)
 80076ac:	4c0d      	ldr	r4, [pc, #52]	; (80076e4 <__libc_init_array+0x3c>)
 80076ae:	1b64      	subs	r4, r4, r5
 80076b0:	10a4      	asrs	r4, r4, #2
 80076b2:	2600      	movs	r6, #0
 80076b4:	42a6      	cmp	r6, r4
 80076b6:	d109      	bne.n	80076cc <__libc_init_array+0x24>
 80076b8:	4d0b      	ldr	r5, [pc, #44]	; (80076e8 <__libc_init_array+0x40>)
 80076ba:	4c0c      	ldr	r4, [pc, #48]	; (80076ec <__libc_init_array+0x44>)
 80076bc:	f000 fc4e 	bl	8007f5c <_init>
 80076c0:	1b64      	subs	r4, r4, r5
 80076c2:	10a4      	asrs	r4, r4, #2
 80076c4:	2600      	movs	r6, #0
 80076c6:	42a6      	cmp	r6, r4
 80076c8:	d105      	bne.n	80076d6 <__libc_init_array+0x2e>
 80076ca:	bd70      	pop	{r4, r5, r6, pc}
 80076cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80076d0:	4798      	blx	r3
 80076d2:	3601      	adds	r6, #1
 80076d4:	e7ee      	b.n	80076b4 <__libc_init_array+0xc>
 80076d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80076da:	4798      	blx	r3
 80076dc:	3601      	adds	r6, #1
 80076de:	e7f2      	b.n	80076c6 <__libc_init_array+0x1e>
 80076e0:	08008108 	.word	0x08008108
 80076e4:	08008108 	.word	0x08008108
 80076e8:	08008108 	.word	0x08008108
 80076ec:	0800810c 	.word	0x0800810c

080076f0 <memcpy>:
 80076f0:	440a      	add	r2, r1
 80076f2:	4291      	cmp	r1, r2
 80076f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80076f8:	d100      	bne.n	80076fc <memcpy+0xc>
 80076fa:	4770      	bx	lr
 80076fc:	b510      	push	{r4, lr}
 80076fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007702:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007706:	4291      	cmp	r1, r2
 8007708:	d1f9      	bne.n	80076fe <memcpy+0xe>
 800770a:	bd10      	pop	{r4, pc}

0800770c <memset>:
 800770c:	4402      	add	r2, r0
 800770e:	4603      	mov	r3, r0
 8007710:	4293      	cmp	r3, r2
 8007712:	d100      	bne.n	8007716 <memset+0xa>
 8007714:	4770      	bx	lr
 8007716:	f803 1b01 	strb.w	r1, [r3], #1
 800771a:	e7f9      	b.n	8007710 <memset+0x4>

0800771c <siprintf>:
 800771c:	b40e      	push	{r1, r2, r3}
 800771e:	b500      	push	{lr}
 8007720:	b09c      	sub	sp, #112	; 0x70
 8007722:	ab1d      	add	r3, sp, #116	; 0x74
 8007724:	9002      	str	r0, [sp, #8]
 8007726:	9006      	str	r0, [sp, #24]
 8007728:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800772c:	4809      	ldr	r0, [pc, #36]	; (8007754 <siprintf+0x38>)
 800772e:	9107      	str	r1, [sp, #28]
 8007730:	9104      	str	r1, [sp, #16]
 8007732:	4909      	ldr	r1, [pc, #36]	; (8007758 <siprintf+0x3c>)
 8007734:	f853 2b04 	ldr.w	r2, [r3], #4
 8007738:	9105      	str	r1, [sp, #20]
 800773a:	6800      	ldr	r0, [r0, #0]
 800773c:	9301      	str	r3, [sp, #4]
 800773e:	a902      	add	r1, sp, #8
 8007740:	f000 f868 	bl	8007814 <_svfiprintf_r>
 8007744:	9b02      	ldr	r3, [sp, #8]
 8007746:	2200      	movs	r2, #0
 8007748:	701a      	strb	r2, [r3, #0]
 800774a:	b01c      	add	sp, #112	; 0x70
 800774c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007750:	b003      	add	sp, #12
 8007752:	4770      	bx	lr
 8007754:	2000001c 	.word	0x2000001c
 8007758:	ffff0208 	.word	0xffff0208

0800775c <__ssputs_r>:
 800775c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007760:	688e      	ldr	r6, [r1, #8]
 8007762:	429e      	cmp	r6, r3
 8007764:	4682      	mov	sl, r0
 8007766:	460c      	mov	r4, r1
 8007768:	4690      	mov	r8, r2
 800776a:	461f      	mov	r7, r3
 800776c:	d838      	bhi.n	80077e0 <__ssputs_r+0x84>
 800776e:	898a      	ldrh	r2, [r1, #12]
 8007770:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007774:	d032      	beq.n	80077dc <__ssputs_r+0x80>
 8007776:	6825      	ldr	r5, [r4, #0]
 8007778:	6909      	ldr	r1, [r1, #16]
 800777a:	eba5 0901 	sub.w	r9, r5, r1
 800777e:	6965      	ldr	r5, [r4, #20]
 8007780:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007784:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007788:	3301      	adds	r3, #1
 800778a:	444b      	add	r3, r9
 800778c:	106d      	asrs	r5, r5, #1
 800778e:	429d      	cmp	r5, r3
 8007790:	bf38      	it	cc
 8007792:	461d      	movcc	r5, r3
 8007794:	0553      	lsls	r3, r2, #21
 8007796:	d531      	bpl.n	80077fc <__ssputs_r+0xa0>
 8007798:	4629      	mov	r1, r5
 800779a:	f000 fb39 	bl	8007e10 <_malloc_r>
 800779e:	4606      	mov	r6, r0
 80077a0:	b950      	cbnz	r0, 80077b8 <__ssputs_r+0x5c>
 80077a2:	230c      	movs	r3, #12
 80077a4:	f8ca 3000 	str.w	r3, [sl]
 80077a8:	89a3      	ldrh	r3, [r4, #12]
 80077aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077ae:	81a3      	strh	r3, [r4, #12]
 80077b0:	f04f 30ff 	mov.w	r0, #4294967295
 80077b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077b8:	6921      	ldr	r1, [r4, #16]
 80077ba:	464a      	mov	r2, r9
 80077bc:	f7ff ff98 	bl	80076f0 <memcpy>
 80077c0:	89a3      	ldrh	r3, [r4, #12]
 80077c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ca:	81a3      	strh	r3, [r4, #12]
 80077cc:	6126      	str	r6, [r4, #16]
 80077ce:	6165      	str	r5, [r4, #20]
 80077d0:	444e      	add	r6, r9
 80077d2:	eba5 0509 	sub.w	r5, r5, r9
 80077d6:	6026      	str	r6, [r4, #0]
 80077d8:	60a5      	str	r5, [r4, #8]
 80077da:	463e      	mov	r6, r7
 80077dc:	42be      	cmp	r6, r7
 80077de:	d900      	bls.n	80077e2 <__ssputs_r+0x86>
 80077e0:	463e      	mov	r6, r7
 80077e2:	4632      	mov	r2, r6
 80077e4:	6820      	ldr	r0, [r4, #0]
 80077e6:	4641      	mov	r1, r8
 80077e8:	f000 faa8 	bl	8007d3c <memmove>
 80077ec:	68a3      	ldr	r3, [r4, #8]
 80077ee:	6822      	ldr	r2, [r4, #0]
 80077f0:	1b9b      	subs	r3, r3, r6
 80077f2:	4432      	add	r2, r6
 80077f4:	60a3      	str	r3, [r4, #8]
 80077f6:	6022      	str	r2, [r4, #0]
 80077f8:	2000      	movs	r0, #0
 80077fa:	e7db      	b.n	80077b4 <__ssputs_r+0x58>
 80077fc:	462a      	mov	r2, r5
 80077fe:	f000 fb61 	bl	8007ec4 <_realloc_r>
 8007802:	4606      	mov	r6, r0
 8007804:	2800      	cmp	r0, #0
 8007806:	d1e1      	bne.n	80077cc <__ssputs_r+0x70>
 8007808:	6921      	ldr	r1, [r4, #16]
 800780a:	4650      	mov	r0, sl
 800780c:	f000 fab0 	bl	8007d70 <_free_r>
 8007810:	e7c7      	b.n	80077a2 <__ssputs_r+0x46>
	...

08007814 <_svfiprintf_r>:
 8007814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007818:	4698      	mov	r8, r3
 800781a:	898b      	ldrh	r3, [r1, #12]
 800781c:	061b      	lsls	r3, r3, #24
 800781e:	b09d      	sub	sp, #116	; 0x74
 8007820:	4607      	mov	r7, r0
 8007822:	460d      	mov	r5, r1
 8007824:	4614      	mov	r4, r2
 8007826:	d50e      	bpl.n	8007846 <_svfiprintf_r+0x32>
 8007828:	690b      	ldr	r3, [r1, #16]
 800782a:	b963      	cbnz	r3, 8007846 <_svfiprintf_r+0x32>
 800782c:	2140      	movs	r1, #64	; 0x40
 800782e:	f000 faef 	bl	8007e10 <_malloc_r>
 8007832:	6028      	str	r0, [r5, #0]
 8007834:	6128      	str	r0, [r5, #16]
 8007836:	b920      	cbnz	r0, 8007842 <_svfiprintf_r+0x2e>
 8007838:	230c      	movs	r3, #12
 800783a:	603b      	str	r3, [r7, #0]
 800783c:	f04f 30ff 	mov.w	r0, #4294967295
 8007840:	e0d1      	b.n	80079e6 <_svfiprintf_r+0x1d2>
 8007842:	2340      	movs	r3, #64	; 0x40
 8007844:	616b      	str	r3, [r5, #20]
 8007846:	2300      	movs	r3, #0
 8007848:	9309      	str	r3, [sp, #36]	; 0x24
 800784a:	2320      	movs	r3, #32
 800784c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007850:	f8cd 800c 	str.w	r8, [sp, #12]
 8007854:	2330      	movs	r3, #48	; 0x30
 8007856:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007a00 <_svfiprintf_r+0x1ec>
 800785a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800785e:	f04f 0901 	mov.w	r9, #1
 8007862:	4623      	mov	r3, r4
 8007864:	469a      	mov	sl, r3
 8007866:	f813 2b01 	ldrb.w	r2, [r3], #1
 800786a:	b10a      	cbz	r2, 8007870 <_svfiprintf_r+0x5c>
 800786c:	2a25      	cmp	r2, #37	; 0x25
 800786e:	d1f9      	bne.n	8007864 <_svfiprintf_r+0x50>
 8007870:	ebba 0b04 	subs.w	fp, sl, r4
 8007874:	d00b      	beq.n	800788e <_svfiprintf_r+0x7a>
 8007876:	465b      	mov	r3, fp
 8007878:	4622      	mov	r2, r4
 800787a:	4629      	mov	r1, r5
 800787c:	4638      	mov	r0, r7
 800787e:	f7ff ff6d 	bl	800775c <__ssputs_r>
 8007882:	3001      	adds	r0, #1
 8007884:	f000 80aa 	beq.w	80079dc <_svfiprintf_r+0x1c8>
 8007888:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800788a:	445a      	add	r2, fp
 800788c:	9209      	str	r2, [sp, #36]	; 0x24
 800788e:	f89a 3000 	ldrb.w	r3, [sl]
 8007892:	2b00      	cmp	r3, #0
 8007894:	f000 80a2 	beq.w	80079dc <_svfiprintf_r+0x1c8>
 8007898:	2300      	movs	r3, #0
 800789a:	f04f 32ff 	mov.w	r2, #4294967295
 800789e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078a2:	f10a 0a01 	add.w	sl, sl, #1
 80078a6:	9304      	str	r3, [sp, #16]
 80078a8:	9307      	str	r3, [sp, #28]
 80078aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078ae:	931a      	str	r3, [sp, #104]	; 0x68
 80078b0:	4654      	mov	r4, sl
 80078b2:	2205      	movs	r2, #5
 80078b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078b8:	4851      	ldr	r0, [pc, #324]	; (8007a00 <_svfiprintf_r+0x1ec>)
 80078ba:	f7f8 fc91 	bl	80001e0 <memchr>
 80078be:	9a04      	ldr	r2, [sp, #16]
 80078c0:	b9d8      	cbnz	r0, 80078fa <_svfiprintf_r+0xe6>
 80078c2:	06d0      	lsls	r0, r2, #27
 80078c4:	bf44      	itt	mi
 80078c6:	2320      	movmi	r3, #32
 80078c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078cc:	0711      	lsls	r1, r2, #28
 80078ce:	bf44      	itt	mi
 80078d0:	232b      	movmi	r3, #43	; 0x2b
 80078d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078d6:	f89a 3000 	ldrb.w	r3, [sl]
 80078da:	2b2a      	cmp	r3, #42	; 0x2a
 80078dc:	d015      	beq.n	800790a <_svfiprintf_r+0xf6>
 80078de:	9a07      	ldr	r2, [sp, #28]
 80078e0:	4654      	mov	r4, sl
 80078e2:	2000      	movs	r0, #0
 80078e4:	f04f 0c0a 	mov.w	ip, #10
 80078e8:	4621      	mov	r1, r4
 80078ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078ee:	3b30      	subs	r3, #48	; 0x30
 80078f0:	2b09      	cmp	r3, #9
 80078f2:	d94e      	bls.n	8007992 <_svfiprintf_r+0x17e>
 80078f4:	b1b0      	cbz	r0, 8007924 <_svfiprintf_r+0x110>
 80078f6:	9207      	str	r2, [sp, #28]
 80078f8:	e014      	b.n	8007924 <_svfiprintf_r+0x110>
 80078fa:	eba0 0308 	sub.w	r3, r0, r8
 80078fe:	fa09 f303 	lsl.w	r3, r9, r3
 8007902:	4313      	orrs	r3, r2
 8007904:	9304      	str	r3, [sp, #16]
 8007906:	46a2      	mov	sl, r4
 8007908:	e7d2      	b.n	80078b0 <_svfiprintf_r+0x9c>
 800790a:	9b03      	ldr	r3, [sp, #12]
 800790c:	1d19      	adds	r1, r3, #4
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	9103      	str	r1, [sp, #12]
 8007912:	2b00      	cmp	r3, #0
 8007914:	bfbb      	ittet	lt
 8007916:	425b      	neglt	r3, r3
 8007918:	f042 0202 	orrlt.w	r2, r2, #2
 800791c:	9307      	strge	r3, [sp, #28]
 800791e:	9307      	strlt	r3, [sp, #28]
 8007920:	bfb8      	it	lt
 8007922:	9204      	strlt	r2, [sp, #16]
 8007924:	7823      	ldrb	r3, [r4, #0]
 8007926:	2b2e      	cmp	r3, #46	; 0x2e
 8007928:	d10c      	bne.n	8007944 <_svfiprintf_r+0x130>
 800792a:	7863      	ldrb	r3, [r4, #1]
 800792c:	2b2a      	cmp	r3, #42	; 0x2a
 800792e:	d135      	bne.n	800799c <_svfiprintf_r+0x188>
 8007930:	9b03      	ldr	r3, [sp, #12]
 8007932:	1d1a      	adds	r2, r3, #4
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	9203      	str	r2, [sp, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	bfb8      	it	lt
 800793c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007940:	3402      	adds	r4, #2
 8007942:	9305      	str	r3, [sp, #20]
 8007944:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a10 <_svfiprintf_r+0x1fc>
 8007948:	7821      	ldrb	r1, [r4, #0]
 800794a:	2203      	movs	r2, #3
 800794c:	4650      	mov	r0, sl
 800794e:	f7f8 fc47 	bl	80001e0 <memchr>
 8007952:	b140      	cbz	r0, 8007966 <_svfiprintf_r+0x152>
 8007954:	2340      	movs	r3, #64	; 0x40
 8007956:	eba0 000a 	sub.w	r0, r0, sl
 800795a:	fa03 f000 	lsl.w	r0, r3, r0
 800795e:	9b04      	ldr	r3, [sp, #16]
 8007960:	4303      	orrs	r3, r0
 8007962:	3401      	adds	r4, #1
 8007964:	9304      	str	r3, [sp, #16]
 8007966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800796a:	4826      	ldr	r0, [pc, #152]	; (8007a04 <_svfiprintf_r+0x1f0>)
 800796c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007970:	2206      	movs	r2, #6
 8007972:	f7f8 fc35 	bl	80001e0 <memchr>
 8007976:	2800      	cmp	r0, #0
 8007978:	d038      	beq.n	80079ec <_svfiprintf_r+0x1d8>
 800797a:	4b23      	ldr	r3, [pc, #140]	; (8007a08 <_svfiprintf_r+0x1f4>)
 800797c:	bb1b      	cbnz	r3, 80079c6 <_svfiprintf_r+0x1b2>
 800797e:	9b03      	ldr	r3, [sp, #12]
 8007980:	3307      	adds	r3, #7
 8007982:	f023 0307 	bic.w	r3, r3, #7
 8007986:	3308      	adds	r3, #8
 8007988:	9303      	str	r3, [sp, #12]
 800798a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800798c:	4433      	add	r3, r6
 800798e:	9309      	str	r3, [sp, #36]	; 0x24
 8007990:	e767      	b.n	8007862 <_svfiprintf_r+0x4e>
 8007992:	fb0c 3202 	mla	r2, ip, r2, r3
 8007996:	460c      	mov	r4, r1
 8007998:	2001      	movs	r0, #1
 800799a:	e7a5      	b.n	80078e8 <_svfiprintf_r+0xd4>
 800799c:	2300      	movs	r3, #0
 800799e:	3401      	adds	r4, #1
 80079a0:	9305      	str	r3, [sp, #20]
 80079a2:	4619      	mov	r1, r3
 80079a4:	f04f 0c0a 	mov.w	ip, #10
 80079a8:	4620      	mov	r0, r4
 80079aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079ae:	3a30      	subs	r2, #48	; 0x30
 80079b0:	2a09      	cmp	r2, #9
 80079b2:	d903      	bls.n	80079bc <_svfiprintf_r+0x1a8>
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d0c5      	beq.n	8007944 <_svfiprintf_r+0x130>
 80079b8:	9105      	str	r1, [sp, #20]
 80079ba:	e7c3      	b.n	8007944 <_svfiprintf_r+0x130>
 80079bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80079c0:	4604      	mov	r4, r0
 80079c2:	2301      	movs	r3, #1
 80079c4:	e7f0      	b.n	80079a8 <_svfiprintf_r+0x194>
 80079c6:	ab03      	add	r3, sp, #12
 80079c8:	9300      	str	r3, [sp, #0]
 80079ca:	462a      	mov	r2, r5
 80079cc:	4b0f      	ldr	r3, [pc, #60]	; (8007a0c <_svfiprintf_r+0x1f8>)
 80079ce:	a904      	add	r1, sp, #16
 80079d0:	4638      	mov	r0, r7
 80079d2:	f3af 8000 	nop.w
 80079d6:	1c42      	adds	r2, r0, #1
 80079d8:	4606      	mov	r6, r0
 80079da:	d1d6      	bne.n	800798a <_svfiprintf_r+0x176>
 80079dc:	89ab      	ldrh	r3, [r5, #12]
 80079de:	065b      	lsls	r3, r3, #25
 80079e0:	f53f af2c 	bmi.w	800783c <_svfiprintf_r+0x28>
 80079e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079e6:	b01d      	add	sp, #116	; 0x74
 80079e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ec:	ab03      	add	r3, sp, #12
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	462a      	mov	r2, r5
 80079f2:	4b06      	ldr	r3, [pc, #24]	; (8007a0c <_svfiprintf_r+0x1f8>)
 80079f4:	a904      	add	r1, sp, #16
 80079f6:	4638      	mov	r0, r7
 80079f8:	f000 f87a 	bl	8007af0 <_printf_i>
 80079fc:	e7eb      	b.n	80079d6 <_svfiprintf_r+0x1c2>
 80079fe:	bf00      	nop
 8007a00:	080080cc 	.word	0x080080cc
 8007a04:	080080d6 	.word	0x080080d6
 8007a08:	00000000 	.word	0x00000000
 8007a0c:	0800775d 	.word	0x0800775d
 8007a10:	080080d2 	.word	0x080080d2

08007a14 <_printf_common>:
 8007a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a18:	4616      	mov	r6, r2
 8007a1a:	4699      	mov	r9, r3
 8007a1c:	688a      	ldr	r2, [r1, #8]
 8007a1e:	690b      	ldr	r3, [r1, #16]
 8007a20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a24:	4293      	cmp	r3, r2
 8007a26:	bfb8      	it	lt
 8007a28:	4613      	movlt	r3, r2
 8007a2a:	6033      	str	r3, [r6, #0]
 8007a2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a30:	4607      	mov	r7, r0
 8007a32:	460c      	mov	r4, r1
 8007a34:	b10a      	cbz	r2, 8007a3a <_printf_common+0x26>
 8007a36:	3301      	adds	r3, #1
 8007a38:	6033      	str	r3, [r6, #0]
 8007a3a:	6823      	ldr	r3, [r4, #0]
 8007a3c:	0699      	lsls	r1, r3, #26
 8007a3e:	bf42      	ittt	mi
 8007a40:	6833      	ldrmi	r3, [r6, #0]
 8007a42:	3302      	addmi	r3, #2
 8007a44:	6033      	strmi	r3, [r6, #0]
 8007a46:	6825      	ldr	r5, [r4, #0]
 8007a48:	f015 0506 	ands.w	r5, r5, #6
 8007a4c:	d106      	bne.n	8007a5c <_printf_common+0x48>
 8007a4e:	f104 0a19 	add.w	sl, r4, #25
 8007a52:	68e3      	ldr	r3, [r4, #12]
 8007a54:	6832      	ldr	r2, [r6, #0]
 8007a56:	1a9b      	subs	r3, r3, r2
 8007a58:	42ab      	cmp	r3, r5
 8007a5a:	dc26      	bgt.n	8007aaa <_printf_common+0x96>
 8007a5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a60:	1e13      	subs	r3, r2, #0
 8007a62:	6822      	ldr	r2, [r4, #0]
 8007a64:	bf18      	it	ne
 8007a66:	2301      	movne	r3, #1
 8007a68:	0692      	lsls	r2, r2, #26
 8007a6a:	d42b      	bmi.n	8007ac4 <_printf_common+0xb0>
 8007a6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a70:	4649      	mov	r1, r9
 8007a72:	4638      	mov	r0, r7
 8007a74:	47c0      	blx	r8
 8007a76:	3001      	adds	r0, #1
 8007a78:	d01e      	beq.n	8007ab8 <_printf_common+0xa4>
 8007a7a:	6823      	ldr	r3, [r4, #0]
 8007a7c:	68e5      	ldr	r5, [r4, #12]
 8007a7e:	6832      	ldr	r2, [r6, #0]
 8007a80:	f003 0306 	and.w	r3, r3, #6
 8007a84:	2b04      	cmp	r3, #4
 8007a86:	bf08      	it	eq
 8007a88:	1aad      	subeq	r5, r5, r2
 8007a8a:	68a3      	ldr	r3, [r4, #8]
 8007a8c:	6922      	ldr	r2, [r4, #16]
 8007a8e:	bf0c      	ite	eq
 8007a90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a94:	2500      	movne	r5, #0
 8007a96:	4293      	cmp	r3, r2
 8007a98:	bfc4      	itt	gt
 8007a9a:	1a9b      	subgt	r3, r3, r2
 8007a9c:	18ed      	addgt	r5, r5, r3
 8007a9e:	2600      	movs	r6, #0
 8007aa0:	341a      	adds	r4, #26
 8007aa2:	42b5      	cmp	r5, r6
 8007aa4:	d11a      	bne.n	8007adc <_printf_common+0xc8>
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	e008      	b.n	8007abc <_printf_common+0xa8>
 8007aaa:	2301      	movs	r3, #1
 8007aac:	4652      	mov	r2, sl
 8007aae:	4649      	mov	r1, r9
 8007ab0:	4638      	mov	r0, r7
 8007ab2:	47c0      	blx	r8
 8007ab4:	3001      	adds	r0, #1
 8007ab6:	d103      	bne.n	8007ac0 <_printf_common+0xac>
 8007ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8007abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ac0:	3501      	adds	r5, #1
 8007ac2:	e7c6      	b.n	8007a52 <_printf_common+0x3e>
 8007ac4:	18e1      	adds	r1, r4, r3
 8007ac6:	1c5a      	adds	r2, r3, #1
 8007ac8:	2030      	movs	r0, #48	; 0x30
 8007aca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ace:	4422      	add	r2, r4
 8007ad0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ad4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ad8:	3302      	adds	r3, #2
 8007ada:	e7c7      	b.n	8007a6c <_printf_common+0x58>
 8007adc:	2301      	movs	r3, #1
 8007ade:	4622      	mov	r2, r4
 8007ae0:	4649      	mov	r1, r9
 8007ae2:	4638      	mov	r0, r7
 8007ae4:	47c0      	blx	r8
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	d0e6      	beq.n	8007ab8 <_printf_common+0xa4>
 8007aea:	3601      	adds	r6, #1
 8007aec:	e7d9      	b.n	8007aa2 <_printf_common+0x8e>
	...

08007af0 <_printf_i>:
 8007af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007af4:	460c      	mov	r4, r1
 8007af6:	4691      	mov	r9, r2
 8007af8:	7e27      	ldrb	r7, [r4, #24]
 8007afa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007afc:	2f78      	cmp	r7, #120	; 0x78
 8007afe:	4680      	mov	r8, r0
 8007b00:	469a      	mov	sl, r3
 8007b02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b06:	d807      	bhi.n	8007b18 <_printf_i+0x28>
 8007b08:	2f62      	cmp	r7, #98	; 0x62
 8007b0a:	d80a      	bhi.n	8007b22 <_printf_i+0x32>
 8007b0c:	2f00      	cmp	r7, #0
 8007b0e:	f000 80d8 	beq.w	8007cc2 <_printf_i+0x1d2>
 8007b12:	2f58      	cmp	r7, #88	; 0x58
 8007b14:	f000 80a3 	beq.w	8007c5e <_printf_i+0x16e>
 8007b18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b20:	e03a      	b.n	8007b98 <_printf_i+0xa8>
 8007b22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b26:	2b15      	cmp	r3, #21
 8007b28:	d8f6      	bhi.n	8007b18 <_printf_i+0x28>
 8007b2a:	a001      	add	r0, pc, #4	; (adr r0, 8007b30 <_printf_i+0x40>)
 8007b2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007b30:	08007b89 	.word	0x08007b89
 8007b34:	08007b9d 	.word	0x08007b9d
 8007b38:	08007b19 	.word	0x08007b19
 8007b3c:	08007b19 	.word	0x08007b19
 8007b40:	08007b19 	.word	0x08007b19
 8007b44:	08007b19 	.word	0x08007b19
 8007b48:	08007b9d 	.word	0x08007b9d
 8007b4c:	08007b19 	.word	0x08007b19
 8007b50:	08007b19 	.word	0x08007b19
 8007b54:	08007b19 	.word	0x08007b19
 8007b58:	08007b19 	.word	0x08007b19
 8007b5c:	08007ca9 	.word	0x08007ca9
 8007b60:	08007bcd 	.word	0x08007bcd
 8007b64:	08007c8b 	.word	0x08007c8b
 8007b68:	08007b19 	.word	0x08007b19
 8007b6c:	08007b19 	.word	0x08007b19
 8007b70:	08007ccb 	.word	0x08007ccb
 8007b74:	08007b19 	.word	0x08007b19
 8007b78:	08007bcd 	.word	0x08007bcd
 8007b7c:	08007b19 	.word	0x08007b19
 8007b80:	08007b19 	.word	0x08007b19
 8007b84:	08007c93 	.word	0x08007c93
 8007b88:	680b      	ldr	r3, [r1, #0]
 8007b8a:	1d1a      	adds	r2, r3, #4
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	600a      	str	r2, [r1, #0]
 8007b90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e0a3      	b.n	8007ce4 <_printf_i+0x1f4>
 8007b9c:	6825      	ldr	r5, [r4, #0]
 8007b9e:	6808      	ldr	r0, [r1, #0]
 8007ba0:	062e      	lsls	r6, r5, #24
 8007ba2:	f100 0304 	add.w	r3, r0, #4
 8007ba6:	d50a      	bpl.n	8007bbe <_printf_i+0xce>
 8007ba8:	6805      	ldr	r5, [r0, #0]
 8007baa:	600b      	str	r3, [r1, #0]
 8007bac:	2d00      	cmp	r5, #0
 8007bae:	da03      	bge.n	8007bb8 <_printf_i+0xc8>
 8007bb0:	232d      	movs	r3, #45	; 0x2d
 8007bb2:	426d      	negs	r5, r5
 8007bb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bb8:	485e      	ldr	r0, [pc, #376]	; (8007d34 <_printf_i+0x244>)
 8007bba:	230a      	movs	r3, #10
 8007bbc:	e019      	b.n	8007bf2 <_printf_i+0x102>
 8007bbe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007bc2:	6805      	ldr	r5, [r0, #0]
 8007bc4:	600b      	str	r3, [r1, #0]
 8007bc6:	bf18      	it	ne
 8007bc8:	b22d      	sxthne	r5, r5
 8007bca:	e7ef      	b.n	8007bac <_printf_i+0xbc>
 8007bcc:	680b      	ldr	r3, [r1, #0]
 8007bce:	6825      	ldr	r5, [r4, #0]
 8007bd0:	1d18      	adds	r0, r3, #4
 8007bd2:	6008      	str	r0, [r1, #0]
 8007bd4:	0628      	lsls	r0, r5, #24
 8007bd6:	d501      	bpl.n	8007bdc <_printf_i+0xec>
 8007bd8:	681d      	ldr	r5, [r3, #0]
 8007bda:	e002      	b.n	8007be2 <_printf_i+0xf2>
 8007bdc:	0669      	lsls	r1, r5, #25
 8007bde:	d5fb      	bpl.n	8007bd8 <_printf_i+0xe8>
 8007be0:	881d      	ldrh	r5, [r3, #0]
 8007be2:	4854      	ldr	r0, [pc, #336]	; (8007d34 <_printf_i+0x244>)
 8007be4:	2f6f      	cmp	r7, #111	; 0x6f
 8007be6:	bf0c      	ite	eq
 8007be8:	2308      	moveq	r3, #8
 8007bea:	230a      	movne	r3, #10
 8007bec:	2100      	movs	r1, #0
 8007bee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007bf2:	6866      	ldr	r6, [r4, #4]
 8007bf4:	60a6      	str	r6, [r4, #8]
 8007bf6:	2e00      	cmp	r6, #0
 8007bf8:	bfa2      	ittt	ge
 8007bfa:	6821      	ldrge	r1, [r4, #0]
 8007bfc:	f021 0104 	bicge.w	r1, r1, #4
 8007c00:	6021      	strge	r1, [r4, #0]
 8007c02:	b90d      	cbnz	r5, 8007c08 <_printf_i+0x118>
 8007c04:	2e00      	cmp	r6, #0
 8007c06:	d04d      	beq.n	8007ca4 <_printf_i+0x1b4>
 8007c08:	4616      	mov	r6, r2
 8007c0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c0e:	fb03 5711 	mls	r7, r3, r1, r5
 8007c12:	5dc7      	ldrb	r7, [r0, r7]
 8007c14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c18:	462f      	mov	r7, r5
 8007c1a:	42bb      	cmp	r3, r7
 8007c1c:	460d      	mov	r5, r1
 8007c1e:	d9f4      	bls.n	8007c0a <_printf_i+0x11a>
 8007c20:	2b08      	cmp	r3, #8
 8007c22:	d10b      	bne.n	8007c3c <_printf_i+0x14c>
 8007c24:	6823      	ldr	r3, [r4, #0]
 8007c26:	07df      	lsls	r7, r3, #31
 8007c28:	d508      	bpl.n	8007c3c <_printf_i+0x14c>
 8007c2a:	6923      	ldr	r3, [r4, #16]
 8007c2c:	6861      	ldr	r1, [r4, #4]
 8007c2e:	4299      	cmp	r1, r3
 8007c30:	bfde      	ittt	le
 8007c32:	2330      	movle	r3, #48	; 0x30
 8007c34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c3c:	1b92      	subs	r2, r2, r6
 8007c3e:	6122      	str	r2, [r4, #16]
 8007c40:	f8cd a000 	str.w	sl, [sp]
 8007c44:	464b      	mov	r3, r9
 8007c46:	aa03      	add	r2, sp, #12
 8007c48:	4621      	mov	r1, r4
 8007c4a:	4640      	mov	r0, r8
 8007c4c:	f7ff fee2 	bl	8007a14 <_printf_common>
 8007c50:	3001      	adds	r0, #1
 8007c52:	d14c      	bne.n	8007cee <_printf_i+0x1fe>
 8007c54:	f04f 30ff 	mov.w	r0, #4294967295
 8007c58:	b004      	add	sp, #16
 8007c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c5e:	4835      	ldr	r0, [pc, #212]	; (8007d34 <_printf_i+0x244>)
 8007c60:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	680e      	ldr	r6, [r1, #0]
 8007c68:	061f      	lsls	r7, r3, #24
 8007c6a:	f856 5b04 	ldr.w	r5, [r6], #4
 8007c6e:	600e      	str	r6, [r1, #0]
 8007c70:	d514      	bpl.n	8007c9c <_printf_i+0x1ac>
 8007c72:	07d9      	lsls	r1, r3, #31
 8007c74:	bf44      	itt	mi
 8007c76:	f043 0320 	orrmi.w	r3, r3, #32
 8007c7a:	6023      	strmi	r3, [r4, #0]
 8007c7c:	b91d      	cbnz	r5, 8007c86 <_printf_i+0x196>
 8007c7e:	6823      	ldr	r3, [r4, #0]
 8007c80:	f023 0320 	bic.w	r3, r3, #32
 8007c84:	6023      	str	r3, [r4, #0]
 8007c86:	2310      	movs	r3, #16
 8007c88:	e7b0      	b.n	8007bec <_printf_i+0xfc>
 8007c8a:	6823      	ldr	r3, [r4, #0]
 8007c8c:	f043 0320 	orr.w	r3, r3, #32
 8007c90:	6023      	str	r3, [r4, #0]
 8007c92:	2378      	movs	r3, #120	; 0x78
 8007c94:	4828      	ldr	r0, [pc, #160]	; (8007d38 <_printf_i+0x248>)
 8007c96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c9a:	e7e3      	b.n	8007c64 <_printf_i+0x174>
 8007c9c:	065e      	lsls	r6, r3, #25
 8007c9e:	bf48      	it	mi
 8007ca0:	b2ad      	uxthmi	r5, r5
 8007ca2:	e7e6      	b.n	8007c72 <_printf_i+0x182>
 8007ca4:	4616      	mov	r6, r2
 8007ca6:	e7bb      	b.n	8007c20 <_printf_i+0x130>
 8007ca8:	680b      	ldr	r3, [r1, #0]
 8007caa:	6826      	ldr	r6, [r4, #0]
 8007cac:	6960      	ldr	r0, [r4, #20]
 8007cae:	1d1d      	adds	r5, r3, #4
 8007cb0:	600d      	str	r5, [r1, #0]
 8007cb2:	0635      	lsls	r5, r6, #24
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	d501      	bpl.n	8007cbc <_printf_i+0x1cc>
 8007cb8:	6018      	str	r0, [r3, #0]
 8007cba:	e002      	b.n	8007cc2 <_printf_i+0x1d2>
 8007cbc:	0671      	lsls	r1, r6, #25
 8007cbe:	d5fb      	bpl.n	8007cb8 <_printf_i+0x1c8>
 8007cc0:	8018      	strh	r0, [r3, #0]
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	6123      	str	r3, [r4, #16]
 8007cc6:	4616      	mov	r6, r2
 8007cc8:	e7ba      	b.n	8007c40 <_printf_i+0x150>
 8007cca:	680b      	ldr	r3, [r1, #0]
 8007ccc:	1d1a      	adds	r2, r3, #4
 8007cce:	600a      	str	r2, [r1, #0]
 8007cd0:	681e      	ldr	r6, [r3, #0]
 8007cd2:	6862      	ldr	r2, [r4, #4]
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	f7f8 fa82 	bl	80001e0 <memchr>
 8007cdc:	b108      	cbz	r0, 8007ce2 <_printf_i+0x1f2>
 8007cde:	1b80      	subs	r0, r0, r6
 8007ce0:	6060      	str	r0, [r4, #4]
 8007ce2:	6863      	ldr	r3, [r4, #4]
 8007ce4:	6123      	str	r3, [r4, #16]
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cec:	e7a8      	b.n	8007c40 <_printf_i+0x150>
 8007cee:	6923      	ldr	r3, [r4, #16]
 8007cf0:	4632      	mov	r2, r6
 8007cf2:	4649      	mov	r1, r9
 8007cf4:	4640      	mov	r0, r8
 8007cf6:	47d0      	blx	sl
 8007cf8:	3001      	adds	r0, #1
 8007cfa:	d0ab      	beq.n	8007c54 <_printf_i+0x164>
 8007cfc:	6823      	ldr	r3, [r4, #0]
 8007cfe:	079b      	lsls	r3, r3, #30
 8007d00:	d413      	bmi.n	8007d2a <_printf_i+0x23a>
 8007d02:	68e0      	ldr	r0, [r4, #12]
 8007d04:	9b03      	ldr	r3, [sp, #12]
 8007d06:	4298      	cmp	r0, r3
 8007d08:	bfb8      	it	lt
 8007d0a:	4618      	movlt	r0, r3
 8007d0c:	e7a4      	b.n	8007c58 <_printf_i+0x168>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	4632      	mov	r2, r6
 8007d12:	4649      	mov	r1, r9
 8007d14:	4640      	mov	r0, r8
 8007d16:	47d0      	blx	sl
 8007d18:	3001      	adds	r0, #1
 8007d1a:	d09b      	beq.n	8007c54 <_printf_i+0x164>
 8007d1c:	3501      	adds	r5, #1
 8007d1e:	68e3      	ldr	r3, [r4, #12]
 8007d20:	9903      	ldr	r1, [sp, #12]
 8007d22:	1a5b      	subs	r3, r3, r1
 8007d24:	42ab      	cmp	r3, r5
 8007d26:	dcf2      	bgt.n	8007d0e <_printf_i+0x21e>
 8007d28:	e7eb      	b.n	8007d02 <_printf_i+0x212>
 8007d2a:	2500      	movs	r5, #0
 8007d2c:	f104 0619 	add.w	r6, r4, #25
 8007d30:	e7f5      	b.n	8007d1e <_printf_i+0x22e>
 8007d32:	bf00      	nop
 8007d34:	080080dd 	.word	0x080080dd
 8007d38:	080080ee 	.word	0x080080ee

08007d3c <memmove>:
 8007d3c:	4288      	cmp	r0, r1
 8007d3e:	b510      	push	{r4, lr}
 8007d40:	eb01 0402 	add.w	r4, r1, r2
 8007d44:	d902      	bls.n	8007d4c <memmove+0x10>
 8007d46:	4284      	cmp	r4, r0
 8007d48:	4623      	mov	r3, r4
 8007d4a:	d807      	bhi.n	8007d5c <memmove+0x20>
 8007d4c:	1e43      	subs	r3, r0, #1
 8007d4e:	42a1      	cmp	r1, r4
 8007d50:	d008      	beq.n	8007d64 <memmove+0x28>
 8007d52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d5a:	e7f8      	b.n	8007d4e <memmove+0x12>
 8007d5c:	4402      	add	r2, r0
 8007d5e:	4601      	mov	r1, r0
 8007d60:	428a      	cmp	r2, r1
 8007d62:	d100      	bne.n	8007d66 <memmove+0x2a>
 8007d64:	bd10      	pop	{r4, pc}
 8007d66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d6e:	e7f7      	b.n	8007d60 <memmove+0x24>

08007d70 <_free_r>:
 8007d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d72:	2900      	cmp	r1, #0
 8007d74:	d048      	beq.n	8007e08 <_free_r+0x98>
 8007d76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d7a:	9001      	str	r0, [sp, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f1a1 0404 	sub.w	r4, r1, #4
 8007d82:	bfb8      	it	lt
 8007d84:	18e4      	addlt	r4, r4, r3
 8007d86:	f000 f8d3 	bl	8007f30 <__malloc_lock>
 8007d8a:	4a20      	ldr	r2, [pc, #128]	; (8007e0c <_free_r+0x9c>)
 8007d8c:	9801      	ldr	r0, [sp, #4]
 8007d8e:	6813      	ldr	r3, [r2, #0]
 8007d90:	4615      	mov	r5, r2
 8007d92:	b933      	cbnz	r3, 8007da2 <_free_r+0x32>
 8007d94:	6063      	str	r3, [r4, #4]
 8007d96:	6014      	str	r4, [r2, #0]
 8007d98:	b003      	add	sp, #12
 8007d9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d9e:	f000 b8cd 	b.w	8007f3c <__malloc_unlock>
 8007da2:	42a3      	cmp	r3, r4
 8007da4:	d90b      	bls.n	8007dbe <_free_r+0x4e>
 8007da6:	6821      	ldr	r1, [r4, #0]
 8007da8:	1862      	adds	r2, r4, r1
 8007daa:	4293      	cmp	r3, r2
 8007dac:	bf04      	itt	eq
 8007dae:	681a      	ldreq	r2, [r3, #0]
 8007db0:	685b      	ldreq	r3, [r3, #4]
 8007db2:	6063      	str	r3, [r4, #4]
 8007db4:	bf04      	itt	eq
 8007db6:	1852      	addeq	r2, r2, r1
 8007db8:	6022      	streq	r2, [r4, #0]
 8007dba:	602c      	str	r4, [r5, #0]
 8007dbc:	e7ec      	b.n	8007d98 <_free_r+0x28>
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	b10b      	cbz	r3, 8007dc8 <_free_r+0x58>
 8007dc4:	42a3      	cmp	r3, r4
 8007dc6:	d9fa      	bls.n	8007dbe <_free_r+0x4e>
 8007dc8:	6811      	ldr	r1, [r2, #0]
 8007dca:	1855      	adds	r5, r2, r1
 8007dcc:	42a5      	cmp	r5, r4
 8007dce:	d10b      	bne.n	8007de8 <_free_r+0x78>
 8007dd0:	6824      	ldr	r4, [r4, #0]
 8007dd2:	4421      	add	r1, r4
 8007dd4:	1854      	adds	r4, r2, r1
 8007dd6:	42a3      	cmp	r3, r4
 8007dd8:	6011      	str	r1, [r2, #0]
 8007dda:	d1dd      	bne.n	8007d98 <_free_r+0x28>
 8007ddc:	681c      	ldr	r4, [r3, #0]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	6053      	str	r3, [r2, #4]
 8007de2:	4421      	add	r1, r4
 8007de4:	6011      	str	r1, [r2, #0]
 8007de6:	e7d7      	b.n	8007d98 <_free_r+0x28>
 8007de8:	d902      	bls.n	8007df0 <_free_r+0x80>
 8007dea:	230c      	movs	r3, #12
 8007dec:	6003      	str	r3, [r0, #0]
 8007dee:	e7d3      	b.n	8007d98 <_free_r+0x28>
 8007df0:	6825      	ldr	r5, [r4, #0]
 8007df2:	1961      	adds	r1, r4, r5
 8007df4:	428b      	cmp	r3, r1
 8007df6:	bf04      	itt	eq
 8007df8:	6819      	ldreq	r1, [r3, #0]
 8007dfa:	685b      	ldreq	r3, [r3, #4]
 8007dfc:	6063      	str	r3, [r4, #4]
 8007dfe:	bf04      	itt	eq
 8007e00:	1949      	addeq	r1, r1, r5
 8007e02:	6021      	streq	r1, [r4, #0]
 8007e04:	6054      	str	r4, [r2, #4]
 8007e06:	e7c7      	b.n	8007d98 <_free_r+0x28>
 8007e08:	b003      	add	sp, #12
 8007e0a:	bd30      	pop	{r4, r5, pc}
 8007e0c:	200082d4 	.word	0x200082d4

08007e10 <_malloc_r>:
 8007e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e12:	1ccd      	adds	r5, r1, #3
 8007e14:	f025 0503 	bic.w	r5, r5, #3
 8007e18:	3508      	adds	r5, #8
 8007e1a:	2d0c      	cmp	r5, #12
 8007e1c:	bf38      	it	cc
 8007e1e:	250c      	movcc	r5, #12
 8007e20:	2d00      	cmp	r5, #0
 8007e22:	4606      	mov	r6, r0
 8007e24:	db01      	blt.n	8007e2a <_malloc_r+0x1a>
 8007e26:	42a9      	cmp	r1, r5
 8007e28:	d903      	bls.n	8007e32 <_malloc_r+0x22>
 8007e2a:	230c      	movs	r3, #12
 8007e2c:	6033      	str	r3, [r6, #0]
 8007e2e:	2000      	movs	r0, #0
 8007e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e32:	f000 f87d 	bl	8007f30 <__malloc_lock>
 8007e36:	4921      	ldr	r1, [pc, #132]	; (8007ebc <_malloc_r+0xac>)
 8007e38:	680a      	ldr	r2, [r1, #0]
 8007e3a:	4614      	mov	r4, r2
 8007e3c:	b99c      	cbnz	r4, 8007e66 <_malloc_r+0x56>
 8007e3e:	4f20      	ldr	r7, [pc, #128]	; (8007ec0 <_malloc_r+0xb0>)
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	b923      	cbnz	r3, 8007e4e <_malloc_r+0x3e>
 8007e44:	4621      	mov	r1, r4
 8007e46:	4630      	mov	r0, r6
 8007e48:	f000 f862 	bl	8007f10 <_sbrk_r>
 8007e4c:	6038      	str	r0, [r7, #0]
 8007e4e:	4629      	mov	r1, r5
 8007e50:	4630      	mov	r0, r6
 8007e52:	f000 f85d 	bl	8007f10 <_sbrk_r>
 8007e56:	1c43      	adds	r3, r0, #1
 8007e58:	d123      	bne.n	8007ea2 <_malloc_r+0x92>
 8007e5a:	230c      	movs	r3, #12
 8007e5c:	6033      	str	r3, [r6, #0]
 8007e5e:	4630      	mov	r0, r6
 8007e60:	f000 f86c 	bl	8007f3c <__malloc_unlock>
 8007e64:	e7e3      	b.n	8007e2e <_malloc_r+0x1e>
 8007e66:	6823      	ldr	r3, [r4, #0]
 8007e68:	1b5b      	subs	r3, r3, r5
 8007e6a:	d417      	bmi.n	8007e9c <_malloc_r+0x8c>
 8007e6c:	2b0b      	cmp	r3, #11
 8007e6e:	d903      	bls.n	8007e78 <_malloc_r+0x68>
 8007e70:	6023      	str	r3, [r4, #0]
 8007e72:	441c      	add	r4, r3
 8007e74:	6025      	str	r5, [r4, #0]
 8007e76:	e004      	b.n	8007e82 <_malloc_r+0x72>
 8007e78:	6863      	ldr	r3, [r4, #4]
 8007e7a:	42a2      	cmp	r2, r4
 8007e7c:	bf0c      	ite	eq
 8007e7e:	600b      	streq	r3, [r1, #0]
 8007e80:	6053      	strne	r3, [r2, #4]
 8007e82:	4630      	mov	r0, r6
 8007e84:	f000 f85a 	bl	8007f3c <__malloc_unlock>
 8007e88:	f104 000b 	add.w	r0, r4, #11
 8007e8c:	1d23      	adds	r3, r4, #4
 8007e8e:	f020 0007 	bic.w	r0, r0, #7
 8007e92:	1ac2      	subs	r2, r0, r3
 8007e94:	d0cc      	beq.n	8007e30 <_malloc_r+0x20>
 8007e96:	1a1b      	subs	r3, r3, r0
 8007e98:	50a3      	str	r3, [r4, r2]
 8007e9a:	e7c9      	b.n	8007e30 <_malloc_r+0x20>
 8007e9c:	4622      	mov	r2, r4
 8007e9e:	6864      	ldr	r4, [r4, #4]
 8007ea0:	e7cc      	b.n	8007e3c <_malloc_r+0x2c>
 8007ea2:	1cc4      	adds	r4, r0, #3
 8007ea4:	f024 0403 	bic.w	r4, r4, #3
 8007ea8:	42a0      	cmp	r0, r4
 8007eaa:	d0e3      	beq.n	8007e74 <_malloc_r+0x64>
 8007eac:	1a21      	subs	r1, r4, r0
 8007eae:	4630      	mov	r0, r6
 8007eb0:	f000 f82e 	bl	8007f10 <_sbrk_r>
 8007eb4:	3001      	adds	r0, #1
 8007eb6:	d1dd      	bne.n	8007e74 <_malloc_r+0x64>
 8007eb8:	e7cf      	b.n	8007e5a <_malloc_r+0x4a>
 8007eba:	bf00      	nop
 8007ebc:	200082d4 	.word	0x200082d4
 8007ec0:	200082d8 	.word	0x200082d8

08007ec4 <_realloc_r>:
 8007ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ec6:	4607      	mov	r7, r0
 8007ec8:	4614      	mov	r4, r2
 8007eca:	460e      	mov	r6, r1
 8007ecc:	b921      	cbnz	r1, 8007ed8 <_realloc_r+0x14>
 8007ece:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ed2:	4611      	mov	r1, r2
 8007ed4:	f7ff bf9c 	b.w	8007e10 <_malloc_r>
 8007ed8:	b922      	cbnz	r2, 8007ee4 <_realloc_r+0x20>
 8007eda:	f7ff ff49 	bl	8007d70 <_free_r>
 8007ede:	4625      	mov	r5, r4
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ee4:	f000 f830 	bl	8007f48 <_malloc_usable_size_r>
 8007ee8:	42a0      	cmp	r0, r4
 8007eea:	d20f      	bcs.n	8007f0c <_realloc_r+0x48>
 8007eec:	4621      	mov	r1, r4
 8007eee:	4638      	mov	r0, r7
 8007ef0:	f7ff ff8e 	bl	8007e10 <_malloc_r>
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	d0f2      	beq.n	8007ee0 <_realloc_r+0x1c>
 8007efa:	4631      	mov	r1, r6
 8007efc:	4622      	mov	r2, r4
 8007efe:	f7ff fbf7 	bl	80076f0 <memcpy>
 8007f02:	4631      	mov	r1, r6
 8007f04:	4638      	mov	r0, r7
 8007f06:	f7ff ff33 	bl	8007d70 <_free_r>
 8007f0a:	e7e9      	b.n	8007ee0 <_realloc_r+0x1c>
 8007f0c:	4635      	mov	r5, r6
 8007f0e:	e7e7      	b.n	8007ee0 <_realloc_r+0x1c>

08007f10 <_sbrk_r>:
 8007f10:	b538      	push	{r3, r4, r5, lr}
 8007f12:	4d06      	ldr	r5, [pc, #24]	; (8007f2c <_sbrk_r+0x1c>)
 8007f14:	2300      	movs	r3, #0
 8007f16:	4604      	mov	r4, r0
 8007f18:	4608      	mov	r0, r1
 8007f1a:	602b      	str	r3, [r5, #0]
 8007f1c:	f7f9 f8b4 	bl	8001088 <_sbrk>
 8007f20:	1c43      	adds	r3, r0, #1
 8007f22:	d102      	bne.n	8007f2a <_sbrk_r+0x1a>
 8007f24:	682b      	ldr	r3, [r5, #0]
 8007f26:	b103      	cbz	r3, 8007f2a <_sbrk_r+0x1a>
 8007f28:	6023      	str	r3, [r4, #0]
 8007f2a:	bd38      	pop	{r3, r4, r5, pc}
 8007f2c:	200085c0 	.word	0x200085c0

08007f30 <__malloc_lock>:
 8007f30:	4801      	ldr	r0, [pc, #4]	; (8007f38 <__malloc_lock+0x8>)
 8007f32:	f000 b811 	b.w	8007f58 <__retarget_lock_acquire_recursive>
 8007f36:	bf00      	nop
 8007f38:	200085c8 	.word	0x200085c8

08007f3c <__malloc_unlock>:
 8007f3c:	4801      	ldr	r0, [pc, #4]	; (8007f44 <__malloc_unlock+0x8>)
 8007f3e:	f000 b80c 	b.w	8007f5a <__retarget_lock_release_recursive>
 8007f42:	bf00      	nop
 8007f44:	200085c8 	.word	0x200085c8

08007f48 <_malloc_usable_size_r>:
 8007f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f4c:	1f18      	subs	r0, r3, #4
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	bfbc      	itt	lt
 8007f52:	580b      	ldrlt	r3, [r1, r0]
 8007f54:	18c0      	addlt	r0, r0, r3
 8007f56:	4770      	bx	lr

08007f58 <__retarget_lock_acquire_recursive>:
 8007f58:	4770      	bx	lr

08007f5a <__retarget_lock_release_recursive>:
 8007f5a:	4770      	bx	lr

08007f5c <_init>:
 8007f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f5e:	bf00      	nop
 8007f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f62:	bc08      	pop	{r3}
 8007f64:	469e      	mov	lr, r3
 8007f66:	4770      	bx	lr

08007f68 <_fini>:
 8007f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f6a:	bf00      	nop
 8007f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f6e:	bc08      	pop	{r3}
 8007f70:	469e      	mov	lr, r3
 8007f72:	4770      	bx	lr
