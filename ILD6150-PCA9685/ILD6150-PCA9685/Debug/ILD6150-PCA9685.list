
ILD6150-PCA9685.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ee4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08007074  08007074  00017074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007144  08007144  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007144  08007144  00017144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800714c  0800714c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800714c  0800714c  0001714c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007150  08007150  00017150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af8  20000014  08007168  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b0c  08007168  00021b0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000213e1  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039f7  00000000  00000000  00041425  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ae8  00000000  00000000  00044e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001940  00000000  00000000  00046908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000042de  00000000  00000000  00048248  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001554a  00000000  00000000  0004c526  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7b15  00000000  00000000  00061a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00139585  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007260  00000000  00000000  00139600  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800705c 	.word	0x0800705c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800705c 	.word	0x0800705c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fd2b 	bl	8000f2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f82c 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f966 	bl	80007ac <MX_GPIO_Init>
  MX_DMA_Init();
 80004e0:	f000 f93e 	bl	8000760 <MX_DMA_Init>
  MX_I2C1_Init();
 80004e4:	f000 f8cc 	bl	8000680 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f908 	bl	80006fc <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80004ec:	f000 f894 	bl	8000618 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f0:	f004 f842 	bl	8004578 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f4:	4a09      	ldr	r2, [pc, #36]	; (800051c <main+0x4c>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	4809      	ldr	r0, [pc, #36]	; (8000520 <main+0x50>)
 80004fa:	f004 f8a7 	bl	800464c <osThreadNew>
 80004fe:	4602      	mov	r2, r0
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <main+0x54>)
 8000502:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  comUsartTaskHandle = osThreadNew(ComUsartTask, NULL, &comUsartTask_attributes);
 8000504:	4a08      	ldr	r2, [pc, #32]	; (8000528 <main+0x58>)
 8000506:	2100      	movs	r1, #0
 8000508:	4808      	ldr	r0, [pc, #32]	; (800052c <main+0x5c>)
 800050a:	f004 f89f 	bl	800464c <osThreadNew>
 800050e:	4602      	mov	r2, r0
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <main+0x60>)
 8000512:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000514:	f004 f864 	bl	80045e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000518:	e7fe      	b.n	8000518 <main+0x48>
 800051a:	bf00      	nop
 800051c:	080070b4 	.word	0x080070b4
 8000520:	08000a85 	.word	0x08000a85
 8000524:	200018f0 	.word	0x200018f0
 8000528:	080070d8 	.word	0x080070d8
 800052c:	080009f9 	.word	0x080009f9
 8000530:	20001a78 	.word	0x20001a78

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b0ac      	sub	sp, #176	; 0xb0
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800053e:	2244      	movs	r2, #68	; 0x44
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f006 fd81 	bl	800704a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2254      	movs	r2, #84	; 0x54
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f006 fd73 	bl	800704a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000564:	f001 fe1e 	bl	80021a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000568:	4b2a      	ldr	r3, [pc, #168]	; (8000614 <SystemClock_Config+0xe0>)
 800056a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800056e:	4a29      	ldr	r2, [pc, #164]	; (8000614 <SystemClock_Config+0xe0>)
 8000570:	f023 0318 	bic.w	r3, r3, #24
 8000574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000578:	2314      	movs	r3, #20
 800057a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800058c:	2360      	movs	r3, #96	; 0x60
 800058e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000592:	2300      	movs	r3, #0
 8000594:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800059c:	4618      	mov	r0, r3
 800059e:	f001 fe75 	bl	800228c <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005a8:	f000 fa88 	bl	8000abc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005b0:	2300      	movs	r3, #0
 80005b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 fa80 	bl	8002acc <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005d2:	f000 fa73 	bl	8000abc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80005d6:	2342      	movs	r3, #66	; 0x42
 80005d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80005da:	2304      	movs	r3, #4
 80005dc:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005de:	2300      	movs	r3, #0
 80005e0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 fca5 	bl	8002f34 <HAL_RCCEx_PeriphCLKConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005f0:	f000 fa64 	bl	8000abc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f8:	f001 fdf2 	bl	80021e0 <HAL_PWREx_ControlVoltageScaling>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000602:	f000 fa5b 	bl	8000abc <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000606:	f002 fe87 	bl	8003318 <HAL_RCCEx_EnableMSIPLLMode>
}
 800060a:	bf00      	nop
 800060c:	37b0      	adds	r7, #176	; 0xb0
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000

08000618 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800061c:	4b16      	ldr	r3, [pc, #88]	; (8000678 <MX_CAN1_Init+0x60>)
 800061e:	4a17      	ldr	r2, [pc, #92]	; (800067c <MX_CAN1_Init+0x64>)
 8000620:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_CAN1_Init+0x60>)
 8000624:	2210      	movs	r2, #16
 8000626:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MX_CAN1_Init+0x60>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <MX_CAN1_Init+0x60>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000634:	4b10      	ldr	r3, [pc, #64]	; (8000678 <MX_CAN1_Init+0x60>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_CAN1_Init+0x60>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000640:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <MX_CAN1_Init+0x60>)
 8000642:	2200      	movs	r2, #0
 8000644:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_CAN1_Init+0x60>)
 8000648:	2200      	movs	r2, #0
 800064a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <MX_CAN1_Init+0x60>)
 800064e:	2200      	movs	r2, #0
 8000650:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_CAN1_Init+0x60>)
 8000654:	2200      	movs	r2, #0
 8000656:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000658:	4b07      	ldr	r3, [pc, #28]	; (8000678 <MX_CAN1_Init+0x60>)
 800065a:	2200      	movs	r2, #0
 800065c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_CAN1_Init+0x60>)
 8000660:	2200      	movs	r2, #0
 8000662:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <MX_CAN1_Init+0x60>)
 8000666:	f000 fc9b 	bl	8000fa0 <HAL_CAN_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000670:	f000 fa24 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20001a50 	.word	0x20001a50
 800067c:	40006400 	.word	0x40006400

08000680 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_I2C1_Init+0x74>)
 8000686:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <MX_I2C1_Init+0x78>)
 8000688:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800068a:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_I2C1_Init+0x74>)
 800068c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000690:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <MX_I2C1_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_I2C1_Init+0x74>)
 800069a:	2201      	movs	r2, #1
 800069c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006bc:	480d      	ldr	r0, [pc, #52]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006be:	f001 f9e1 	bl	8001a84 <HAL_I2C_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c8:	f000 f9f8 	bl	8000abc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006cc:	2100      	movs	r1, #0
 80006ce:	4809      	ldr	r0, [pc, #36]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006d0:	f001 fcd0 	bl	8002074 <HAL_I2CEx_ConfigAnalogFilter>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006da:	f000 f9ef 	bl	8000abc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006de:	2100      	movs	r1, #0
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006e2:	f001 fd12 	bl	800210a <HAL_I2CEx_ConfigDigitalFilter>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006ec:	f000 f9e6 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	2000193c 	.word	0x2000193c
 80006f8:	40005400 	.word	0x40005400

080006fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000702:	4a16      	ldr	r2, [pc, #88]	; (800075c <MX_USART2_UART_Init+0x60>)
 8000704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000714:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000716:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800071a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 800071e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000744:	f003 f968 	bl	8003a18 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 800074e:	f000 f9b5 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200019d0 	.word	0x200019d0
 800075c:	40004400 	.word	0x40004400

08000760 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_DMA_Init+0x48>)
 8000768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800076a:	4a0f      	ldr	r2, [pc, #60]	; (80007a8 <MX_DMA_Init+0x48>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6493      	str	r3, [r2, #72]	; 0x48
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <MX_DMA_Init+0x48>)
 8000774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2105      	movs	r1, #5
 8000782:	2010      	movs	r0, #16
 8000784:	f000 fdc0 	bl	8001308 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000788:	2010      	movs	r0, #16
 800078a:	f000 fdd9 	bl	8001340 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2105      	movs	r1, #5
 8000792:	2011      	movs	r0, #17
 8000794:	f000 fdb8 	bl	8001308 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000798:	2011      	movs	r0, #17
 800079a:	f000 fdd1 	bl	8001340 <HAL_NVIC_EnableIRQ>

}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a16      	ldr	r2, [pc, #88]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	4a10      	ldr	r2, [pc, #64]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_GPIO_Init+0x8c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2108      	movs	r1, #8
 800080e:	480b      	ldr	r0, [pc, #44]	; (800083c <MX_GPIO_Init+0x90>)
 8000810:	f001 f906 	bl	8001a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000814:	2308      	movs	r3, #8
 8000816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	4619      	mov	r1, r3
 800082a:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_GPIO_Init+0x90>)
 800082c:	f000 ff8e 	bl	800174c <HAL_GPIO_Init>

}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40021000 	.word	0x40021000
 800083c:	48000400 	.word	0x48000400

08000840 <pca9685_init>:
	HAL_I2C_Master_Receive(hi2c,address,res,1,1);
	return res;
}

void pca9685_init(I2C_HandleTypeDef *hi2c, uint8_t address)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af02      	add	r7, sp, #8
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	460b      	mov	r3, r1
 800084a:	70fb      	strb	r3, [r7, #3]
 #define PCA9685_MODE1 0x00
 uint8_t initStruct[2];
 uint8_t prescale = 0x03; // hardcoded
 800084c:	2303      	movs	r3, #3
 800084e:	73fb      	strb	r3, [r7, #15]
 HAL_I2C_Master_Transmit(hi2c, address, PCA9685_MODE1, 1, 1);
 8000850:	78fb      	ldrb	r3, [r7, #3]
 8000852:	b299      	uxth	r1, r3
 8000854:	2301      	movs	r3, #1
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	2301      	movs	r3, #1
 800085a:	2200      	movs	r2, #0
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f001 f9a1 	bl	8001ba4 <HAL_I2C_Master_Transmit>
 uint8_t oldmode = 0x00; // hardcoded
 8000862:	2300      	movs	r3, #0
 8000864:	73bb      	strb	r3, [r7, #14]
 //uint8_t oldmode = PCA9685_read(hi2c,address,PCA9685_MODE1);
 // HAL_I2C_Master_Receive(hi2c, address, &oldmode, 1, 1);
 uint8_t newmode = ((oldmode & 0x7F) | 0x10);
 8000866:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800086a:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800086e:	b25b      	sxtb	r3, r3
 8000870:	f043 0310 	orr.w	r3, r3, #16
 8000874:	b25b      	sxtb	r3, r3
 8000876:	737b      	strb	r3, [r7, #13]
 initStruct[0] = PCA9685_MODE1;
 8000878:	2300      	movs	r3, #0
 800087a:	723b      	strb	r3, [r7, #8]
 initStruct[1] = newmode;
 800087c:	7b7b      	ldrb	r3, [r7, #13]
 800087e:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(hi2c, address, initStruct, 2, 1);
 8000880:	78fb      	ldrb	r3, [r7, #3]
 8000882:	b299      	uxth	r1, r3
 8000884:	f107 0208 	add.w	r2, r7, #8
 8000888:	2301      	movs	r3, #1
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	2302      	movs	r3, #2
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f001 f988 	bl	8001ba4 <HAL_I2C_Master_Transmit>
 //initStruct[0] = 0xFE;
 initStruct[1] = prescale;
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(hi2c, address, initStruct, 2, 1);
 8000898:	78fb      	ldrb	r3, [r7, #3]
 800089a:	b299      	uxth	r1, r3
 800089c:	f107 0208 	add.w	r2, r7, #8
 80008a0:	2301      	movs	r3, #1
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2302      	movs	r3, #2
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f001 f97c 	bl	8001ba4 <HAL_I2C_Master_Transmit>
 //initStruct[0] = PCA9685_MODE1;
 initStruct[1] = oldmode;
 80008ac:	7bbb      	ldrb	r3, [r7, #14]
 80008ae:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(hi2c, address, initStruct, 2, 1);
 80008b0:	78fb      	ldrb	r3, [r7, #3]
 80008b2:	b299      	uxth	r1, r3
 80008b4:	f107 0208 	add.w	r2, r7, #8
 80008b8:	2301      	movs	r3, #1
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2302      	movs	r3, #2
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f001 f970 	bl	8001ba4 <HAL_I2C_Master_Transmit>
 osDelay(5);
 80008c4:	2005      	movs	r0, #5
 80008c6:	f003 ff67 	bl	8004798 <osDelay>
 initStruct[1] = (oldmode | 0xA1);
 80008ca:	7bbb      	ldrb	r3, [r7, #14]
 80008cc:	f063 035e 	orn	r3, r3, #94	; 0x5e
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(hi2c, address, initStruct, 2, 1);
 80008d4:	78fb      	ldrb	r3, [r7, #3]
 80008d6:	b299      	uxth	r1, r3
 80008d8:	f107 0208 	add.w	r2, r7, #8
 80008dc:	2301      	movs	r3, #1
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	2302      	movs	r3, #2
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f001 f95e 	bl	8001ba4 <HAL_I2C_Master_Transmit>

}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <pca9685_all_pwm>:
	uint8_t outputBuffer[] = {0x06 + 4*num, on, (on >> 8), off, (off >> 8)};
	HAL_I2C_Master_Transmit(hi2c, address, outputBuffer, sizeof(outputBuffer), 1);
}

HAL_StatusTypeDef pca9685_all_pwm(I2C_HandleTypeDef *hi2c, uint8_t address, uint16_t on, uint16_t off)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af02      	add	r7, sp, #8
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	4608      	mov	r0, r1
 80008fa:	4611      	mov	r1, r2
 80008fc:	461a      	mov	r2, r3
 80008fe:	4603      	mov	r3, r0
 8000900:	72fb      	strb	r3, [r7, #11]
 8000902:	460b      	mov	r3, r1
 8000904:	813b      	strh	r3, [r7, #8]
 8000906:	4613      	mov	r3, r2
 8000908:	80fb      	strh	r3, [r7, #6]
	uint8_t ALL_LED_ON = 0xFA;
 800090a:	23fa      	movs	r3, #250	; 0xfa
 800090c:	75fb      	strb	r3, [r7, #23]
	uint8_t outputBuffer[] = {ALL_LED_ON, on, (on >> 8), off, (off >> 8)};
 800090e:	7dfb      	ldrb	r3, [r7, #23]
 8000910:	743b      	strb	r3, [r7, #16]
 8000912:	893b      	ldrh	r3, [r7, #8]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	747b      	strb	r3, [r7, #17]
 8000918:	893b      	ldrh	r3, [r7, #8]
 800091a:	0a1b      	lsrs	r3, r3, #8
 800091c:	b29b      	uxth	r3, r3
 800091e:	b2db      	uxtb	r3, r3
 8000920:	74bb      	strb	r3, [r7, #18]
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	74fb      	strb	r3, [r7, #19]
 8000928:	88fb      	ldrh	r3, [r7, #6]
 800092a:	0a1b      	lsrs	r3, r3, #8
 800092c:	b29b      	uxth	r3, r3
 800092e:	b2db      	uxtb	r3, r3
 8000930:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(hi2c, address, outputBuffer, sizeof(outputBuffer), 1);
 8000932:	7afb      	ldrb	r3, [r7, #11]
 8000934:	b299      	uxth	r1, r3
 8000936:	f107 0210 	add.w	r2, r7, #16
 800093a:	2301      	movs	r3, #1
 800093c:	9300      	str	r3, [sp, #0]
 800093e:	2305      	movs	r3, #5
 8000940:	68f8      	ldr	r0, [r7, #12]
 8000942:	f001 f92f 	bl	8001ba4 <HAL_I2C_Master_Transmit>
 8000946:	4603      	mov	r3, r0
 8000948:	75bb      	strb	r3, [r7, #22]
	return status;
 800094a:	7dbb      	ldrb	r3, [r7, #22]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3718      	adds	r7, #24
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <scenario1>:

void scenario1(){
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
	 uint8_t I2C_address = 0x80;
 800095a:	2380      	movs	r3, #128	; 0x80
 800095c:	71fb      	strb	r3, [r7, #7]
	 pca9685_init(&hi2c1, I2C_address);
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	4619      	mov	r1, r3
 8000962:	4823      	ldr	r0, [pc, #140]	; (80009f0 <scenario1+0x9c>)
 8000964:	f7ff ff6c 	bl	8000840 <pca9685_init>
	 //pca9685_pwm(&hi2c1, I2C_address, 0, 0, 4095);
	 /* Infinite loop */
	 for(;;)
	 {
		 for(int i=0; i<4096/sharedvar; i++){
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	e015      	b.n	800099a <scenario1+0x46>
			pca9685_all_pwm(&hi2c1, I2C_address, 0, 4095-(sharedvar*i));
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	b29a      	uxth	r2, r3
 8000972:	4b20      	ldr	r3, [pc, #128]	; (80009f4 <scenario1+0xa0>)
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	fb12 f303 	smulbb	r3, r2, r3
 800097a:	b29b      	uxth	r3, r3
 800097c:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8000980:	330f      	adds	r3, #15
 8000982:	b29b      	uxth	r3, r3
 8000984:	79f9      	ldrb	r1, [r7, #7]
 8000986:	2200      	movs	r2, #0
 8000988:	4819      	ldr	r0, [pc, #100]	; (80009f0 <scenario1+0x9c>)
 800098a:	f7ff ffb1 	bl	80008f0 <pca9685_all_pwm>
			osDelay(5);
 800098e:	2005      	movs	r0, #5
 8000990:	f003 ff02 	bl	8004798 <osDelay>
		 for(int i=0; i<4096/sharedvar; i++){
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	3301      	adds	r3, #1
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <scenario1+0xa0>)
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	461a      	mov	r2, r3
 80009a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80009a8:	68fa      	ldr	r2, [r7, #12]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	dbdf      	blt.n	800096e <scenario1+0x1a>
		 }

	 	 for(int i=0; i<4096/sharedvar; i++){
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	e011      	b.n	80009d8 <scenario1+0x84>
	 		 pca9685_all_pwm(&hi2c1, I2C_address, 0, (sharedvar*i));
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <scenario1+0xa0>)
 80009ba:	881b      	ldrh	r3, [r3, #0]
 80009bc:	fb12 f303 	smulbb	r3, r2, r3
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	79f9      	ldrb	r1, [r7, #7]
 80009c4:	2200      	movs	r2, #0
 80009c6:	480a      	ldr	r0, [pc, #40]	; (80009f0 <scenario1+0x9c>)
 80009c8:	f7ff ff92 	bl	80008f0 <pca9685_all_pwm>
	 		 osDelay(5);
 80009cc:	2005      	movs	r0, #5
 80009ce:	f003 fee3 	bl	8004798 <osDelay>
	 	 for(int i=0; i<4096/sharedvar; i++){
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	3301      	adds	r3, #1
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <scenario1+0xa0>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	dbe3      	blt.n	80009b4 <scenario1+0x60>
		 for(int i=0; i<4096/sharedvar; i++){
 80009ec:	e7bc      	b.n	8000968 <scenario1+0x14>
 80009ee:	bf00      	nop
 80009f0:	2000193c 	.word	0x2000193c
 80009f4:	20000000 	.word	0x20000000

080009f8 <ComUsartTask>:
	 	 }

	 }
}

void ComUsartTask(void *argument){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	uint8_t outputBuffer[] = {'M','D','M','m','1','Q','1','4','P','r'};
 8000a00:	4a1c      	ldr	r2, [pc, #112]	; (8000a74 <ComUsartTask+0x7c>)
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a08:	c303      	stmia	r3!, {r0, r1}
 8000a0a:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, &outputBuffer[1], 1,500);
		HAL_UART_Transmit(&huart2, &outputBuffer[2], 1,500);
		HAL_UART_Transmit(&huart2, &outputBuffer[3], 1,500);
		*/

		while (HAL_UART_Receive_DMA(&huart2, rxBuffer, sizeof(rxBuffer)) != HAL_OK)
 8000a0c:	e006      	b.n	8000a1c <ComUsartTask+0x24>
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000a0e:	2108      	movs	r1, #8
 8000a10:	4819      	ldr	r0, [pc, #100]	; (8000a78 <ComUsartTask+0x80>)
 8000a12:	f001 f81d 	bl	8001a50 <HAL_GPIO_TogglePin>
			osDelay(5);
 8000a16:	2005      	movs	r0, #5
 8000a18:	f003 febe 	bl	8004798 <osDelay>
		while (HAL_UART_Receive_DMA(&huart2, rxBuffer, sizeof(rxBuffer)) != HAL_OK)
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	2208      	movs	r2, #8
 8000a22:	4619      	mov	r1, r3
 8000a24:	4815      	ldr	r0, [pc, #84]	; (8000a7c <ComUsartTask+0x84>)
 8000a26:	f003 f8d9 	bl	8003bdc <HAL_UART_Receive_DMA>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d1ee      	bne.n	8000a0e <ComUsartTask+0x16>

		}
		osDelay(5);
 8000a30:	2005      	movs	r0, #5
 8000a32:	f003 feb1 	bl	8004798 <osDelay>
		if(rxBuffer[0]==0x4D){
 8000a36:	7b3b      	ldrb	r3, [r7, #12]
 8000a38:	2b4d      	cmp	r3, #77	; 0x4d
 8000a3a:	d10b      	bne.n	8000a54 <ComUsartTask+0x5c>
			HAL_UART_Transmit(&huart2,&rxBuffer[1], 1,500);
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	1c59      	adds	r1, r3, #1
 8000a42:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a46:	2201      	movs	r2, #1
 8000a48:	480c      	ldr	r0, [pc, #48]	; (8000a7c <ComUsartTask+0x84>)
 8000a4a:	f003 f833 	bl	8003ab4 <HAL_UART_Transmit>
			sharedvar = 8;
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <ComUsartTask+0x88>)
 8000a50:	2208      	movs	r2, #8
 8000a52:	801a      	strh	r2, [r3, #0]
			//sharedvar = (uint16_t) atoi(rxBuffer[5]);
		}
		if(rxBuffer[0]==0x44){
 8000a54:	7b3b      	ldrb	r3, [r7, #12]
 8000a56:	2b44      	cmp	r3, #68	; 0x44
 8000a58:	d1e0      	bne.n	8000a1c <ComUsartTask+0x24>
			HAL_UART_Transmit(&huart2,&rxBuffer[1], 1,500);
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	1c59      	adds	r1, r3, #1
 8000a60:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a64:	2201      	movs	r2, #1
 8000a66:	4805      	ldr	r0, [pc, #20]	; (8000a7c <ComUsartTask+0x84>)
 8000a68:	f003 f824 	bl	8003ab4 <HAL_UART_Transmit>
			sharedvar = 16;
 8000a6c:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <ComUsartTask+0x88>)
 8000a6e:	2210      	movs	r2, #16
 8000a70:	801a      	strh	r2, [r3, #0]
		while (HAL_UART_Receive_DMA(&huart2, rxBuffer, sizeof(rxBuffer)) != HAL_OK)
 8000a72:	e7d3      	b.n	8000a1c <ComUsartTask+0x24>
 8000a74:	08007090 	.word	0x08007090
 8000a78:	48000400 	.word	0x48000400
 8000a7c:	200019d0 	.word	0x200019d0
 8000a80:	20000000 	.word	0x20000000

08000a84 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	scenario1();
 8000a8c:	f7ff ff62 	bl	8000954 <scenario1>
  /* USER CODE END 5 */
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d101      	bne.n	8000aae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aaa:	f000 fa59 	bl	8000f60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40001000 	.word	0x40001000

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <Error_Handler+0x6>

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <HAL_MspInit+0x4c>)
 8000acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ace:	4a10      	ldr	r2, [pc, #64]	; (8000b10 <HAL_MspInit+0x4c>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <HAL_MspInit+0x4c>)
 8000ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <HAL_MspInit+0x4c>)
 8000ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <HAL_MspInit+0x4c>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6593      	str	r3, [r2, #88]	; 0x58
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <HAL_MspInit+0x4c>)
 8000af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	210f      	movs	r1, #15
 8000afe:	f06f 0001 	mvn.w	r0, #1
 8000b02:	f000 fc01 	bl	8001308 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40021000 	.word	0x40021000

08000b14 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a18      	ldr	r2, [pc, #96]	; (8000b94 <HAL_CAN_MspInit+0x80>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d129      	bne.n	8000b8a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <HAL_CAN_MspInit+0x84>)
 8000b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3a:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <HAL_CAN_MspInit+0x84>)
 8000b3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b40:	6593      	str	r3, [r2, #88]	; 0x58
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <HAL_CAN_MspInit+0x84>)
 8000b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_CAN_MspInit+0x84>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	4a11      	ldr	r2, [pc, #68]	; (8000b98 <HAL_CAN_MspInit+0x84>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <HAL_CAN_MspInit+0x84>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b78:	2309      	movs	r3, #9
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b86:	f000 fde1 	bl	800174c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000b8a:	bf00      	nop
 8000b8c:	3728      	adds	r7, #40	; 0x28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40006400 	.word	0x40006400
 8000b98:	40021000 	.word	0x40021000

08000b9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <HAL_I2C_MspInit+0x7c>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d127      	bne.n	8000c0e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <HAL_I2C_MspInit+0x80>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4a16      	ldr	r2, [pc, #88]	; (8000c1c <HAL_I2C_MspInit+0x80>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <HAL_I2C_MspInit+0x80>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bd6:	23c0      	movs	r3, #192	; 0xc0
 8000bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bda:	2312      	movs	r3, #18
 8000bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be6:	2304      	movs	r3, #4
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480b      	ldr	r0, [pc, #44]	; (8000c20 <HAL_I2C_MspInit+0x84>)
 8000bf2:	f000 fdab 	bl	800174c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_I2C_MspInit+0x80>)
 8000bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfa:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <HAL_I2C_MspInit+0x80>)
 8000bfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c00:	6593      	str	r3, [r2, #88]	; 0x58
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_I2C_MspInit+0x80>)
 8000c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c0e:	bf00      	nop
 8000c10:	3728      	adds	r7, #40	; 0x28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40005400 	.word	0x40005400
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	48000400 	.word	0x48000400

08000c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a40      	ldr	r2, [pc, #256]	; (8000d44 <HAL_UART_MspInit+0x120>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d17a      	bne.n	8000d3c <HAL_UART_MspInit+0x118>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c46:	4b40      	ldr	r3, [pc, #256]	; (8000d48 <HAL_UART_MspInit+0x124>)
 8000c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4a:	4a3f      	ldr	r2, [pc, #252]	; (8000d48 <HAL_UART_MspInit+0x124>)
 8000c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c50:	6593      	str	r3, [r2, #88]	; 0x58
 8000c52:	4b3d      	ldr	r3, [pc, #244]	; (8000d48 <HAL_UART_MspInit+0x124>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	4b3a      	ldr	r3, [pc, #232]	; (8000d48 <HAL_UART_MspInit+0x124>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	4a39      	ldr	r2, [pc, #228]	; (8000d48 <HAL_UART_MspInit+0x124>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6a:	4b37      	ldr	r3, [pc, #220]	; (8000d48 <HAL_UART_MspInit+0x124>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c76:	230c      	movs	r3, #12
 8000c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c86:	2307      	movs	r3, #7
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c94:	f000 fd5a 	bl	800174c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000c98:	4b2c      	ldr	r3, [pc, #176]	; (8000d4c <HAL_UART_MspInit+0x128>)
 8000c9a:	4a2d      	ldr	r2, [pc, #180]	; (8000d50 <HAL_UART_MspInit+0x12c>)
 8000c9c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000c9e:	4b2b      	ldr	r3, [pc, #172]	; (8000d4c <HAL_UART_MspInit+0x128>)
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ca4:	4b29      	ldr	r3, [pc, #164]	; (8000d4c <HAL_UART_MspInit+0x128>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000caa:	4b28      	ldr	r3, [pc, #160]	; (8000d4c <HAL_UART_MspInit+0x128>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cb0:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <HAL_UART_MspInit+0x128>)
 8000cb2:	2280      	movs	r2, #128	; 0x80
 8000cb4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cb6:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <HAL_UART_MspInit+0x128>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cbc:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <HAL_UART_MspInit+0x128>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000cc2:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <HAL_UART_MspInit+0x128>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cc8:	4b20      	ldr	r3, [pc, #128]	; (8000d4c <HAL_UART_MspInit+0x128>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000cce:	481f      	ldr	r0, [pc, #124]	; (8000d4c <HAL_UART_MspInit+0x128>)
 8000cd0:	f000 fb44 	bl	800135c <HAL_DMA_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 8000cda:	f7ff feef 	bl	8000abc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a1a      	ldr	r2, [pc, #104]	; (8000d4c <HAL_UART_MspInit+0x128>)
 8000ce2:	66da      	str	r2, [r3, #108]	; 0x6c
 8000ce4:	4a19      	ldr	r2, [pc, #100]	; (8000d4c <HAL_UART_MspInit+0x128>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000cea:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <HAL_UART_MspInit+0x130>)
 8000cec:	4a1a      	ldr	r2, [pc, #104]	; (8000d58 <HAL_UART_MspInit+0x134>)
 8000cee:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000cf0:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <HAL_UART_MspInit+0x130>)
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cf6:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <HAL_UART_MspInit+0x130>)
 8000cf8:	2210      	movs	r2, #16
 8000cfa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cfc:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <HAL_UART_MspInit+0x130>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d02:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <HAL_UART_MspInit+0x130>)
 8000d04:	2280      	movs	r2, #128	; 0x80
 8000d06:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <HAL_UART_MspInit+0x130>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <HAL_UART_MspInit+0x130>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <HAL_UART_MspInit+0x130>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_UART_MspInit+0x130>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000d20:	480c      	ldr	r0, [pc, #48]	; (8000d54 <HAL_UART_MspInit+0x130>)
 8000d22:	f000 fb1b 	bl	800135c <HAL_DMA_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8000d2c:	f7ff fec6 	bl	8000abc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <HAL_UART_MspInit+0x130>)
 8000d34:	669a      	str	r2, [r3, #104]	; 0x68
 8000d36:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <HAL_UART_MspInit+0x130>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d3c:	bf00      	nop
 8000d3e:	3728      	adds	r7, #40	; 0x28
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40004400 	.word	0x40004400
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	200018f4 	.word	0x200018f4
 8000d50:	4002006c 	.word	0x4002006c
 8000d54:	20001988 	.word	0x20001988
 8000d58:	40020080 	.word	0x40020080

08000d5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08c      	sub	sp, #48	; 0x30
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	2036      	movs	r0, #54	; 0x36
 8000d72:	f000 fac9 	bl	8001308 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d76:	2036      	movs	r0, #54	; 0x36
 8000d78:	f000 fae2 	bl	8001340 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d7c:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <HAL_InitTick+0x9c>)
 8000d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d80:	4a1d      	ldr	r2, [pc, #116]	; (8000df8 <HAL_InitTick+0x9c>)
 8000d82:	f043 0310 	orr.w	r3, r3, #16
 8000d86:	6593      	str	r3, [r2, #88]	; 0x58
 8000d88:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <HAL_InitTick+0x9c>)
 8000d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8c:	f003 0310 	and.w	r3, r3, #16
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d94:	f107 0210 	add.w	r2, r7, #16
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f002 f836 	bl	8002e10 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000da4:	f002 f808 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 8000da8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dac:	4a13      	ldr	r2, [pc, #76]	; (8000dfc <HAL_InitTick+0xa0>)
 8000dae:	fba2 2303 	umull	r2, r3, r2, r3
 8000db2:	0c9b      	lsrs	r3, r3, #18
 8000db4:	3b01      	subs	r3, #1
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <HAL_InitTick+0xa4>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <HAL_InitTick+0xa8>)
 8000dbc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <HAL_InitTick+0xa4>)
 8000dc0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dc4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dc6:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <HAL_InitTick+0xa4>)
 8000dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <HAL_InitTick+0xa4>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <HAL_InitTick+0xa4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000dd8:	4809      	ldr	r0, [pc, #36]	; (8000e00 <HAL_InitTick+0xa4>)
 8000dda:	f002 fb9d 	bl	8003518 <HAL_TIM_Base_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d104      	bne.n	8000dee <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000de4:	4806      	ldr	r0, [pc, #24]	; (8000e00 <HAL_InitTick+0xa4>)
 8000de6:	f002 fbf9 	bl	80035dc <HAL_TIM_Base_Start_IT>
 8000dea:	4603      	mov	r3, r0
 8000dec:	e000      	b.n	8000df0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3730      	adds	r7, #48	; 0x30
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	431bde83 	.word	0x431bde83
 8000e00:	20001a7c 	.word	0x20001a7c
 8000e04:	40001000 	.word	0x40001000

08000e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <NMI_Handler+0x4>

08000e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <HardFault_Handler+0x4>

08000e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <MemManage_Handler+0x4>

08000e1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <BusFault_Handler+0x4>

08000e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <UsageFault_Handler+0x4>

08000e26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e38:	4802      	ldr	r0, [pc, #8]	; (8000e44 <DMA1_Channel6_IRQHandler+0x10>)
 8000e3a:	f000 fba7 	bl	800158c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200018f4 	.word	0x200018f4

08000e48 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <DMA1_Channel7_IRQHandler+0x10>)
 8000e4e:	f000 fb9d 	bl	800158c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20001988 	.word	0x20001988

08000e5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e60:	4802      	ldr	r0, [pc, #8]	; (8000e6c <TIM6_DAC_IRQHandler+0x10>)
 8000e62:	f002 fc0f 	bl	8003684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20001a7c 	.word	0x20001a7c

08000e70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e74:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <SystemInit+0x64>)
 8000e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e7a:	4a16      	ldr	r2, [pc, #88]	; (8000ed4 <SystemInit+0x64>)
 8000e7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <SystemInit+0x68>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a13      	ldr	r2, [pc, #76]	; (8000ed8 <SystemInit+0x68>)
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <SystemInit+0x68>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <SystemInit+0x68>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a0f      	ldr	r2, [pc, #60]	; (8000ed8 <SystemInit+0x68>)
 8000e9c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ea0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ea4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <SystemInit+0x68>)
 8000ea8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <SystemInit+0x68>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a09      	ldr	r2, [pc, #36]	; (8000ed8 <SystemInit+0x68>)
 8000eb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000eba:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <SystemInit+0x68>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <SystemInit+0x64>)
 8000ec2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ec6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00
 8000ed8:	40021000 	.word	0x40021000

08000edc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000edc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ee0:	f7ff ffc6 	bl	8000e70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ee4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ee6:	e003      	b.n	8000ef0 <LoopCopyDataInit>

08000ee8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000eea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000eec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000eee:	3104      	adds	r1, #4

08000ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ef0:	480a      	ldr	r0, [pc, #40]	; (8000f1c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ef4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ef6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ef8:	d3f6      	bcc.n	8000ee8 <CopyDataInit>
	ldr	r2, =_sbss
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000efc:	e002      	b.n	8000f04 <LoopFillZerobss>

08000efe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000efe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f00:	f842 3b04 	str.w	r3, [r2], #4

08000f04 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <LoopForever+0x16>)
	cmp	r2, r3
 8000f06:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f08:	d3f9      	bcc.n	8000efe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f0a:	f006 f86f 	bl	8006fec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f0e:	f7ff fadf 	bl	80004d0 <main>

08000f12 <LoopForever>:

LoopForever:
    b LoopForever
 8000f12:	e7fe      	b.n	8000f12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f14:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000f18:	08007154 	.word	0x08007154
	ldr	r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f20:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8000f24:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8000f28:	20001b0c 	.word	0x20001b0c

08000f2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f2c:	e7fe      	b.n	8000f2c <ADC1_IRQHandler>

08000f2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f38:	2003      	movs	r0, #3
 8000f3a:	f000 f9da 	bl	80012f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f7ff ff0c 	bl	8000d5c <HAL_InitTick>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d002      	beq.n	8000f50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	71fb      	strb	r3, [r7, #7]
 8000f4e:	e001      	b.n	8000f54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f50:	f7ff fdb8 	bl	8000ac4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x20>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x24>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <HAL_IncTick+0x24>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	2000000c 	.word	0x2000000c
 8000f84:	20001ac8 	.word	0x20001ac8

08000f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <HAL_GetTick+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20001ac8 	.word	0x20001ac8

08000fa0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e0ed      	b.n	800118e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d102      	bne.n	8000fc4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff fda8 	bl	8000b14 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 0202 	bic.w	r2, r2, #2
 8000fd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fd4:	f7ff ffd8 	bl	8000f88 <HAL_GetTick>
 8000fd8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fda:	e012      	b.n	8001002 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fdc:	f7ff ffd4 	bl	8000f88 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b0a      	cmp	r3, #10
 8000fe8:	d90b      	bls.n	8001002 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2205      	movs	r2, #5
 8000ffa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e0c5      	b.n	800118e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1e5      	bne.n	8000fdc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f042 0201 	orr.w	r2, r2, #1
 800101e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001020:	f7ff ffb2 	bl	8000f88 <HAL_GetTick>
 8001024:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001026:	e012      	b.n	800104e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001028:	f7ff ffae 	bl	8000f88 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b0a      	cmp	r3, #10
 8001034:	d90b      	bls.n	800104e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2205      	movs	r2, #5
 8001046:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e09f      	b.n	800118e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0e5      	beq.n	8001028 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	7e1b      	ldrb	r3, [r3, #24]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d108      	bne.n	8001076 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	e007      	b.n	8001086 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001084:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	7e5b      	ldrb	r3, [r3, #25]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d108      	bne.n	80010a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	e007      	b.n	80010b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	7e9b      	ldrb	r3, [r3, #26]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d108      	bne.n	80010ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f042 0220 	orr.w	r2, r2, #32
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	e007      	b.n	80010da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 0220 	bic.w	r2, r2, #32
 80010d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	7edb      	ldrb	r3, [r3, #27]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d108      	bne.n	80010f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f022 0210 	bic.w	r2, r2, #16
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	e007      	b.n	8001104 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 0210 	orr.w	r2, r2, #16
 8001102:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	7f1b      	ldrb	r3, [r3, #28]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d108      	bne.n	800111e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 0208 	orr.w	r2, r2, #8
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	e007      	b.n	800112e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 0208 	bic.w	r2, r2, #8
 800112c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	7f5b      	ldrb	r3, [r3, #29]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d108      	bne.n	8001148 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f042 0204 	orr.w	r2, r2, #4
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	e007      	b.n	8001158 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0204 	bic.w	r2, r2, #4
 8001156:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	431a      	orrs	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	431a      	orrs	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	ea42 0103 	orr.w	r1, r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	1e5a      	subs	r2, r3, #1
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	430a      	orrs	r2, r1
 800117c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b4:	4013      	ands	r3, r2
 80011b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ca:	4a04      	ldr	r2, [pc, #16]	; (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	60d3      	str	r3, [r2, #12]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <__NVIC_GetPriorityGrouping+0x18>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	f003 0307 	and.w	r3, r3, #7
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	2b00      	cmp	r3, #0
 800120c:	db0b      	blt.n	8001226 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	f003 021f 	and.w	r2, r3, #31
 8001214:	4907      	ldr	r1, [pc, #28]	; (8001234 <__NVIC_EnableIRQ+0x38>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	095b      	lsrs	r3, r3, #5
 800121c:	2001      	movs	r0, #1
 800121e:	fa00 f202 	lsl.w	r2, r0, r2
 8001222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000e100 	.word	0xe000e100

08001238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001248:	2b00      	cmp	r3, #0
 800124a:	db0a      	blt.n	8001262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	b2da      	uxtb	r2, r3
 8001250:	490c      	ldr	r1, [pc, #48]	; (8001284 <__NVIC_SetPriority+0x4c>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	0112      	lsls	r2, r2, #4
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	440b      	add	r3, r1
 800125c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001260:	e00a      	b.n	8001278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4908      	ldr	r1, [pc, #32]	; (8001288 <__NVIC_SetPriority+0x50>)
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	3b04      	subs	r3, #4
 8001270:	0112      	lsls	r2, r2, #4
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	440b      	add	r3, r1
 8001276:	761a      	strb	r2, [r3, #24]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000e100 	.word	0xe000e100
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800128c:	b480      	push	{r7}
 800128e:	b089      	sub	sp, #36	; 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f1c3 0307 	rsb	r3, r3, #7
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	bf28      	it	cs
 80012aa:	2304      	movcs	r3, #4
 80012ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3304      	adds	r3, #4
 80012b2:	2b06      	cmp	r3, #6
 80012b4:	d902      	bls.n	80012bc <NVIC_EncodePriority+0x30>
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3b03      	subs	r3, #3
 80012ba:	e000      	b.n	80012be <NVIC_EncodePriority+0x32>
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	f04f 32ff 	mov.w	r2, #4294967295
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43da      	mvns	r2, r3
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	401a      	ands	r2, r3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d4:	f04f 31ff 	mov.w	r1, #4294967295
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	fa01 f303 	lsl.w	r3, r1, r3
 80012de:	43d9      	mvns	r1, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	4313      	orrs	r3, r2
         );
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3724      	adds	r7, #36	; 0x24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ff4c 	bl	8001198 <__NVIC_SetPriorityGrouping>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
 8001314:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800131a:	f7ff ff61 	bl	80011e0 <__NVIC_GetPriorityGrouping>
 800131e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	68b9      	ldr	r1, [r7, #8]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ffb1 	bl	800128c <NVIC_EncodePriority>
 800132a:	4602      	mov	r2, r0
 800132c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001330:	4611      	mov	r1, r2
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff ff80 	bl	8001238 <__NVIC_SetPriority>
}
 8001338:	bf00      	nop
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ff54 	bl	80011fc <__NVIC_EnableIRQ>
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e098      	b.n	80014a0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	4b4d      	ldr	r3, [pc, #308]	; (80014ac <HAL_DMA_Init+0x150>)
 8001376:	429a      	cmp	r2, r3
 8001378:	d80f      	bhi.n	800139a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	4b4b      	ldr	r3, [pc, #300]	; (80014b0 <HAL_DMA_Init+0x154>)
 8001382:	4413      	add	r3, r2
 8001384:	4a4b      	ldr	r2, [pc, #300]	; (80014b4 <HAL_DMA_Init+0x158>)
 8001386:	fba2 2303 	umull	r2, r3, r2, r3
 800138a:	091b      	lsrs	r3, r3, #4
 800138c:	009a      	lsls	r2, r3, #2
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a48      	ldr	r2, [pc, #288]	; (80014b8 <HAL_DMA_Init+0x15c>)
 8001396:	641a      	str	r2, [r3, #64]	; 0x40
 8001398:	e00e      	b.n	80013b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	4b46      	ldr	r3, [pc, #280]	; (80014bc <HAL_DMA_Init+0x160>)
 80013a2:	4413      	add	r3, r2
 80013a4:	4a43      	ldr	r2, [pc, #268]	; (80014b4 <HAL_DMA_Init+0x158>)
 80013a6:	fba2 2303 	umull	r2, r3, r2, r3
 80013aa:	091b      	lsrs	r3, r3, #4
 80013ac:	009a      	lsls	r2, r3, #2
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a42      	ldr	r2, [pc, #264]	; (80014c0 <HAL_DMA_Init+0x164>)
 80013b6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2202      	movs	r2, #2
 80013bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80013ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80013dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	4313      	orrs	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001412:	d039      	beq.n	8001488 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	4a27      	ldr	r2, [pc, #156]	; (80014b8 <HAL_DMA_Init+0x15c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d11a      	bne.n	8001454 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800141e:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <HAL_DMA_Init+0x168>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f003 031c 	and.w	r3, r3, #28
 800142a:	210f      	movs	r1, #15
 800142c:	fa01 f303 	lsl.w	r3, r1, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	4924      	ldr	r1, [pc, #144]	; (80014c4 <HAL_DMA_Init+0x168>)
 8001434:	4013      	ands	r3, r2
 8001436:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001438:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <HAL_DMA_Init+0x168>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6859      	ldr	r1, [r3, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001444:	f003 031c 	and.w	r3, r3, #28
 8001448:	fa01 f303 	lsl.w	r3, r1, r3
 800144c:	491d      	ldr	r1, [pc, #116]	; (80014c4 <HAL_DMA_Init+0x168>)
 800144e:	4313      	orrs	r3, r2
 8001450:	600b      	str	r3, [r1, #0]
 8001452:	e019      	b.n	8001488 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001454:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <HAL_DMA_Init+0x16c>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145c:	f003 031c 	and.w	r3, r3, #28
 8001460:	210f      	movs	r1, #15
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	4917      	ldr	r1, [pc, #92]	; (80014c8 <HAL_DMA_Init+0x16c>)
 800146a:	4013      	ands	r3, r2
 800146c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800146e:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <HAL_DMA_Init+0x16c>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6859      	ldr	r1, [r3, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	f003 031c 	and.w	r3, r3, #28
 800147e:	fa01 f303 	lsl.w	r3, r1, r3
 8001482:	4911      	ldr	r1, [pc, #68]	; (80014c8 <HAL_DMA_Init+0x16c>)
 8001484:	4313      	orrs	r3, r2
 8001486:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2201      	movs	r2, #1
 8001492:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	40020407 	.word	0x40020407
 80014b0:	bffdfff8 	.word	0xbffdfff8
 80014b4:	cccccccd 	.word	0xcccccccd
 80014b8:	40020000 	.word	0x40020000
 80014bc:	bffdfbf8 	.word	0xbffdfbf8
 80014c0:	40020400 	.word	0x40020400
 80014c4:	400200a8 	.word	0x400200a8
 80014c8:	400204a8 	.word	0x400204a8

080014cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
 80014d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d101      	bne.n	80014ec <HAL_DMA_Start_IT+0x20>
 80014e8:	2302      	movs	r3, #2
 80014ea:	e04b      	b.n	8001584 <HAL_DMA_Start_IT+0xb8>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d13a      	bne.n	8001576 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2202      	movs	r2, #2
 8001504:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2200      	movs	r2, #0
 800150c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 0201 	bic.w	r2, r2, #1
 800151c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	68b9      	ldr	r1, [r7, #8]
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f000 f8e0 	bl	80016ea <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	2b00      	cmp	r3, #0
 8001530:	d008      	beq.n	8001544 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f042 020e 	orr.w	r2, r2, #14
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	e00f      	b.n	8001564 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0204 	bic.w	r2, r2, #4
 8001552:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 020a 	orr.w	r2, r2, #10
 8001562:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 0201 	orr.w	r2, r2, #1
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	e005      	b.n	8001582 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800157e:	2302      	movs	r3, #2
 8001580:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001582:	7dfb      	ldrb	r3, [r7, #23]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a8:	f003 031c 	and.w	r3, r3, #28
 80015ac:	2204      	movs	r2, #4
 80015ae:	409a      	lsls	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4013      	ands	r3, r2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d026      	beq.n	8001606 <HAL_DMA_IRQHandler+0x7a>
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d021      	beq.n	8001606 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0320 	and.w	r3, r3, #32
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d107      	bne.n	80015e0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0204 	bic.w	r2, r2, #4
 80015de:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e4:	f003 021c 	and.w	r2, r3, #28
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	2104      	movs	r1, #4
 80015ee:	fa01 f202 	lsl.w	r2, r1, r2
 80015f2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d071      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001604:	e06c      	b.n	80016e0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	f003 031c 	and.w	r3, r3, #28
 800160e:	2202      	movs	r2, #2
 8001610:	409a      	lsls	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4013      	ands	r3, r2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d02e      	beq.n	8001678 <HAL_DMA_IRQHandler+0xec>
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d029      	beq.n	8001678 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0320 	and.w	r3, r3, #32
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10b      	bne.n	800164a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 020a 	bic.w	r2, r2, #10
 8001640:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	f003 021c 	and.w	r2, r3, #28
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	2102      	movs	r1, #2
 8001658:	fa01 f202 	lsl.w	r2, r1, r2
 800165c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166a:	2b00      	cmp	r3, #0
 800166c:	d038      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001676:	e033      	b.n	80016e0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167c:	f003 031c 	and.w	r3, r3, #28
 8001680:	2208      	movs	r2, #8
 8001682:	409a      	lsls	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4013      	ands	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d02a      	beq.n	80016e2 <HAL_DMA_IRQHandler+0x156>
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	2b00      	cmp	r3, #0
 8001694:	d025      	beq.n	80016e2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 020e 	bic.w	r2, r2, #14
 80016a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f003 021c 	and.w	r2, r3, #28
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	2101      	movs	r1, #1
 80016b4:	fa01 f202 	lsl.w	r2, r1, r2
 80016b8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d004      	beq.n	80016e2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
}
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b085      	sub	sp, #20
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fc:	f003 021c 	and.w	r2, r3, #28
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	2101      	movs	r1, #1
 8001706:	fa01 f202 	lsl.w	r2, r1, r2
 800170a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2b10      	cmp	r3, #16
 800171a:	d108      	bne.n	800172e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68ba      	ldr	r2, [r7, #8]
 800172a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800172c:	e007      	b.n	800173e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	60da      	str	r2, [r3, #12]
}
 800173e:	bf00      	nop
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800174c:	b480      	push	{r7}
 800174e:	b087      	sub	sp, #28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800175a:	e148      	b.n	80019ee <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	2101      	movs	r1, #1
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	fa01 f303 	lsl.w	r3, r1, r3
 8001768:	4013      	ands	r3, r2
 800176a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 813a 	beq.w	80019e8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d00b      	beq.n	8001794 <HAL_GPIO_Init+0x48>
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d007      	beq.n	8001794 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001788:	2b11      	cmp	r3, #17
 800178a:	d003      	beq.n	8001794 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b12      	cmp	r3, #18
 8001792:	d130      	bne.n	80017f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	2203      	movs	r2, #3
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4013      	ands	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017ca:	2201      	movs	r2, #1
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4013      	ands	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	091b      	lsrs	r3, r3, #4
 80017e0:	f003 0201 	and.w	r2, r3, #1
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	2203      	movs	r2, #3
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0xea>
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b12      	cmp	r3, #18
 8001834:	d123      	bne.n	800187e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	08da      	lsrs	r2, r3, #3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3208      	adds	r2, #8
 800183e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001842:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	220f      	movs	r2, #15
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	691a      	ldr	r2, [r3, #16]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	08da      	lsrs	r2, r3, #3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3208      	adds	r2, #8
 8001878:	6939      	ldr	r1, [r7, #16]
 800187a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	2203      	movs	r2, #3
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 0203 	and.w	r2, r3, #3
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 8094 	beq.w	80019e8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c0:	4b52      	ldr	r3, [pc, #328]	; (8001a0c <HAL_GPIO_Init+0x2c0>)
 80018c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c4:	4a51      	ldr	r2, [pc, #324]	; (8001a0c <HAL_GPIO_Init+0x2c0>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6613      	str	r3, [r2, #96]	; 0x60
 80018cc:	4b4f      	ldr	r3, [pc, #316]	; (8001a0c <HAL_GPIO_Init+0x2c0>)
 80018ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018d8:	4a4d      	ldr	r2, [pc, #308]	; (8001a10 <HAL_GPIO_Init+0x2c4>)
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	089b      	lsrs	r3, r3, #2
 80018de:	3302      	adds	r3, #2
 80018e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	220f      	movs	r2, #15
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4013      	ands	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001902:	d00d      	beq.n	8001920 <HAL_GPIO_Init+0x1d4>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a43      	ldr	r2, [pc, #268]	; (8001a14 <HAL_GPIO_Init+0x2c8>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d007      	beq.n	800191c <HAL_GPIO_Init+0x1d0>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a42      	ldr	r2, [pc, #264]	; (8001a18 <HAL_GPIO_Init+0x2cc>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d101      	bne.n	8001918 <HAL_GPIO_Init+0x1cc>
 8001914:	2302      	movs	r3, #2
 8001916:	e004      	b.n	8001922 <HAL_GPIO_Init+0x1d6>
 8001918:	2307      	movs	r3, #7
 800191a:	e002      	b.n	8001922 <HAL_GPIO_Init+0x1d6>
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <HAL_GPIO_Init+0x1d6>
 8001920:	2300      	movs	r3, #0
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	f002 0203 	and.w	r2, r2, #3
 8001928:	0092      	lsls	r2, r2, #2
 800192a:	4093      	lsls	r3, r2
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4313      	orrs	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001932:	4937      	ldr	r1, [pc, #220]	; (8001a10 <HAL_GPIO_Init+0x2c4>)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	089b      	lsrs	r3, r3, #2
 8001938:	3302      	adds	r3, #2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001940:	4b36      	ldr	r3, [pc, #216]	; (8001a1c <HAL_GPIO_Init+0x2d0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	43db      	mvns	r3, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001964:	4a2d      	ldr	r2, [pc, #180]	; (8001a1c <HAL_GPIO_Init+0x2d0>)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800196a:	4b2c      	ldr	r3, [pc, #176]	; (8001a1c <HAL_GPIO_Init+0x2d0>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	43db      	mvns	r3, r3
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4013      	ands	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800198e:	4a23      	ldr	r2, [pc, #140]	; (8001a1c <HAL_GPIO_Init+0x2d0>)
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001994:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <HAL_GPIO_Init+0x2d0>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	43db      	mvns	r3, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019b8:	4a18      	ldr	r2, [pc, #96]	; (8001a1c <HAL_GPIO_Init+0x2d0>)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019be:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <HAL_GPIO_Init+0x2d0>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019e2:	4a0e      	ldr	r2, [pc, #56]	; (8001a1c <HAL_GPIO_Init+0x2d0>)
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	3301      	adds	r3, #1
 80019ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	fa22 f303 	lsr.w	r3, r2, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f47f aeaf 	bne.w	800175c <HAL_GPIO_Init+0x10>
  }
}
 80019fe:	bf00      	nop
 8001a00:	371c      	adds	r7, #28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40010000 	.word	0x40010000
 8001a14:	48000400 	.word	0x48000400
 8001a18:	48000800 	.word	0x48000800
 8001a1c:	40010400 	.word	0x40010400

08001a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	807b      	strh	r3, [r7, #2]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a30:	787b      	ldrb	r3, [r7, #1]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a36:	887a      	ldrh	r2, [r7, #2]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a3c:	e002      	b.n	8001a44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a3e:	887a      	ldrh	r2, [r7, #2]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a62:	887a      	ldrh	r2, [r7, #2]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4013      	ands	r3, r2
 8001a68:	041a      	lsls	r2, r3, #16
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	43d9      	mvns	r1, r3
 8001a6e:	887b      	ldrh	r3, [r7, #2]
 8001a70:	400b      	ands	r3, r1
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	619a      	str	r2, [r3, #24]
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e081      	b.n	8001b9a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d106      	bne.n	8001ab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff f876 	bl	8000b9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2224      	movs	r2, #36	; 0x24
 8001ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0201 	bic.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ad4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ae4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d107      	bne.n	8001afe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	e006      	b.n	8001b0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d104      	bne.n	8001b1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691a      	ldr	r2, [r3, #16]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	ea42 0103 	orr.w	r1, r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	021a      	lsls	r2, r3, #8
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69d9      	ldr	r1, [r3, #28]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1a      	ldr	r2, [r3, #32]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0201 	orr.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2220      	movs	r2, #32
 8001b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af02      	add	r7, sp, #8
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	607a      	str	r2, [r7, #4]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	817b      	strh	r3, [r7, #10]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b20      	cmp	r3, #32
 8001bc2:	f040 80da 	bne.w	8001d7a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_I2C_Master_Transmit+0x30>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e0d3      	b.n	8001d7c <HAL_I2C_Master_Transmit+0x1d8>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bdc:	f7ff f9d4 	bl	8000f88 <HAL_GetTick>
 8001be0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	2319      	movs	r3, #25
 8001be8:	2201      	movs	r2, #1
 8001bea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 f8f0 	bl	8001dd4 <I2C_WaitOnFlagUntilTimeout>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e0be      	b.n	8001d7c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2221      	movs	r2, #33	; 0x21
 8001c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2210      	movs	r2, #16
 8001c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	893a      	ldrh	r2, [r7, #8]
 8001c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	2bff      	cmp	r3, #255	; 0xff
 8001c2e:	d90e      	bls.n	8001c4e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	22ff      	movs	r2, #255	; 0xff
 8001c34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	8979      	ldrh	r1, [r7, #10]
 8001c3e:	4b51      	ldr	r3, [pc, #324]	; (8001d84 <HAL_I2C_Master_Transmit+0x1e0>)
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 f9e6 	bl	8002018 <I2C_TransferConfig>
 8001c4c:	e06c      	b.n	8001d28 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	8979      	ldrh	r1, [r7, #10]
 8001c60:	4b48      	ldr	r3, [pc, #288]	; (8001d84 <HAL_I2C_Master_Transmit+0x1e0>)
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f000 f9d5 	bl	8002018 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001c6e:	e05b      	b.n	8001d28 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	6a39      	ldr	r1, [r7, #32]
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f000 f8ed 	bl	8001e54 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e07b      	b.n	8001d7c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	781a      	ldrb	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	1c5a      	adds	r2, r3, #1
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cac:	3b01      	subs	r3, #1
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d034      	beq.n	8001d28 <HAL_I2C_Master_Transmit+0x184>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d130      	bne.n	8001d28 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2180      	movs	r1, #128	; 0x80
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f000 f87f 	bl	8001dd4 <I2C_WaitOnFlagUntilTimeout>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e04d      	b.n	8001d7c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	2bff      	cmp	r3, #255	; 0xff
 8001ce8:	d90e      	bls.n	8001d08 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	22ff      	movs	r2, #255	; 0xff
 8001cee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	8979      	ldrh	r1, [r7, #10]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 f989 	bl	8002018 <I2C_TransferConfig>
 8001d06:	e00f      	b.n	8001d28 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	8979      	ldrh	r1, [r7, #10]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 f978 	bl	8002018 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d19e      	bne.n	8001c70 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	6a39      	ldr	r1, [r7, #32]
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 f8cc 	bl	8001ed4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e01a      	b.n	8001d7c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6859      	ldr	r1, [r3, #4]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <HAL_I2C_Master_Transmit+0x1e4>)
 8001d5a:	400b      	ands	r3, r1
 8001d5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2220      	movs	r2, #32
 8001d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e000      	b.n	8001d7c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001d7a:	2302      	movs	r3, #2
  }
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	80002000 	.word	0x80002000
 8001d88:	fe00e800 	.word	0xfe00e800

08001d8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d103      	bne.n	8001daa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2200      	movs	r2, #0
 8001da8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d007      	beq.n	8001dc8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	699a      	ldr	r2, [r3, #24]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	619a      	str	r2, [r3, #24]
  }
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	4613      	mov	r3, r2
 8001de2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001de4:	e022      	b.n	8001e2c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dec:	d01e      	beq.n	8001e2c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dee:	f7ff f8cb 	bl	8000f88 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d302      	bcc.n	8001e04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d113      	bne.n	8001e2c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e08:	f043 0220 	orr.w	r2, r3, #32
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2220      	movs	r2, #32
 8001e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e00f      	b.n	8001e4c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699a      	ldr	r2, [r3, #24]
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	4013      	ands	r3, r2
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	bf0c      	ite	eq
 8001e3c:	2301      	moveq	r3, #1
 8001e3e:	2300      	movne	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	461a      	mov	r2, r3
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d0cd      	beq.n	8001de6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e60:	e02c      	b.n	8001ebc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 f870 	bl	8001f4c <I2C_IsAcknowledgeFailed>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e02a      	b.n	8001ecc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7c:	d01e      	beq.n	8001ebc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e7e:	f7ff f883 	bl	8000f88 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d302      	bcc.n	8001e94 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d113      	bne.n	8001ebc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e98:	f043 0220 	orr.w	r2, r3, #32
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e007      	b.n	8001ecc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d1cb      	bne.n	8001e62 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ee0:	e028      	b.n	8001f34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 f830 	bl	8001f4c <I2C_IsAcknowledgeFailed>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e026      	b.n	8001f44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ef6:	f7ff f847 	bl	8000f88 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d302      	bcc.n	8001f0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d113      	bne.n	8001f34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f10:	f043 0220 	orr.w	r2, r3, #32
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e007      	b.n	8001f44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f003 0320 	and.w	r3, r3, #32
 8001f3e:	2b20      	cmp	r3, #32
 8001f40:	d1cf      	bne.n	8001ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	f003 0310 	and.w	r3, r3, #16
 8001f62:	2b10      	cmp	r3, #16
 8001f64:	d151      	bne.n	800200a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f66:	e022      	b.n	8001fae <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6e:	d01e      	beq.n	8001fae <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f70:	f7ff f80a 	bl	8000f88 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d302      	bcc.n	8001f86 <I2C_IsAcknowledgeFailed+0x3a>
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d113      	bne.n	8001fae <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	f043 0220 	orr.w	r2, r3, #32
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2220      	movs	r2, #32
 8001f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e02e      	b.n	800200c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f003 0320 	and.w	r3, r3, #32
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	d1d5      	bne.n	8001f68 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2210      	movs	r2, #16
 8001fc2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f7ff fedd 	bl	8001d8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6859      	ldr	r1, [r3, #4]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <I2C_IsAcknowledgeFailed+0xc8>)
 8001fde:	400b      	ands	r3, r1
 8001fe0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	f043 0204 	orr.w	r2, r3, #4
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	fe00e800 	.word	0xfe00e800

08002018 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	460b      	mov	r3, r1
 8002024:	817b      	strh	r3, [r7, #10]
 8002026:	4613      	mov	r3, r2
 8002028:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	0d5b      	lsrs	r3, r3, #21
 8002034:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002038:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <I2C_TransferConfig+0x58>)
 800203a:	430b      	orrs	r3, r1
 800203c:	43db      	mvns	r3, r3
 800203e:	ea02 0103 	and.w	r1, r2, r3
 8002042:	897b      	ldrh	r3, [r7, #10]
 8002044:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002048:	7a7b      	ldrb	r3, [r7, #9]
 800204a:	041b      	lsls	r3, r3, #16
 800204c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002050:	431a      	orrs	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	431a      	orrs	r2, r3
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	431a      	orrs	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	03ff63ff 	.word	0x03ff63ff

08002074 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b20      	cmp	r3, #32
 8002088:	d138      	bne.n	80020fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002094:	2302      	movs	r3, #2
 8002096:	e032      	b.n	80020fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2224      	movs	r2, #36	; 0x24
 80020a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0201 	bic.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6819      	ldr	r1, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0201 	orr.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2220      	movs	r2, #32
 80020ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	e000      	b.n	80020fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020fc:	2302      	movs	r3, #2
  }
}
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800210a:	b480      	push	{r7}
 800210c:	b085      	sub	sp, #20
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b20      	cmp	r3, #32
 800211e:	d139      	bne.n	8002194 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800212a:	2302      	movs	r3, #2
 800212c:	e033      	b.n	8002196 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2224      	movs	r2, #36	; 0x24
 800213a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0201 	bic.w	r2, r2, #1
 800214c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800215c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4313      	orrs	r3, r2
 8002166:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0201 	orr.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2220      	movs	r2, #32
 8002184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002190:	2300      	movs	r3, #0
 8002192:	e000      	b.n	8002196 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002194:	2302      	movs	r3, #2
  }
}
 8002196:	4618      	mov	r0, r3
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
	...

080021a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b2:	6013      	str	r3, [r2, #0]
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40007000 	.word	0x40007000

080021c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021c8:	4b04      	ldr	r3, [pc, #16]	; (80021dc <HAL_PWREx_GetVoltageRange+0x18>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40007000 	.word	0x40007000

080021e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021ee:	d130      	bne.n	8002252 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021f0:	4b23      	ldr	r3, [pc, #140]	; (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021fc:	d038      	beq.n	8002270 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021fe:	4b20      	ldr	r3, [pc, #128]	; (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002206:	4a1e      	ldr	r2, [pc, #120]	; (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002208:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800220c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800220e:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2232      	movs	r2, #50	; 0x32
 8002214:	fb02 f303 	mul.w	r3, r2, r3
 8002218:	4a1b      	ldr	r2, [pc, #108]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	0c9b      	lsrs	r3, r3, #18
 8002220:	3301      	adds	r3, #1
 8002222:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002224:	e002      	b.n	800222c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	3b01      	subs	r3, #1
 800222a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800222c:	4b14      	ldr	r3, [pc, #80]	; (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002238:	d102      	bne.n	8002240 <HAL_PWREx_ControlVoltageScaling+0x60>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1f2      	bne.n	8002226 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002240:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800224c:	d110      	bne.n	8002270 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e00f      	b.n	8002272 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002252:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800225a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800225e:	d007      	beq.n	8002270 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002260:	4b07      	ldr	r3, [pc, #28]	; (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002268:	4a05      	ldr	r2, [pc, #20]	; (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800226e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40007000 	.word	0x40007000
 8002284:	20000004 	.word	0x20000004
 8002288:	431bde83 	.word	0x431bde83

0800228c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d102      	bne.n	80022a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	f000 bc11 	b.w	8002ac2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022a0:	4ba0      	ldr	r3, [pc, #640]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022aa:	4b9e      	ldr	r3, [pc, #632]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0310 	and.w	r3, r3, #16
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 80e4 	beq.w	800248a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d007      	beq.n	80022d8 <HAL_RCC_OscConfig+0x4c>
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	2b0c      	cmp	r3, #12
 80022cc:	f040 808b 	bne.w	80023e6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	f040 8087 	bne.w	80023e6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022d8:	4b92      	ldr	r3, [pc, #584]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <HAL_RCC_OscConfig+0x64>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e3e8      	b.n	8002ac2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1a      	ldr	r2, [r3, #32]
 80022f4:	4b8b      	ldr	r3, [pc, #556]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d004      	beq.n	800230a <HAL_RCC_OscConfig+0x7e>
 8002300:	4b88      	ldr	r3, [pc, #544]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002308:	e005      	b.n	8002316 <HAL_RCC_OscConfig+0x8a>
 800230a:	4b86      	ldr	r3, [pc, #536]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 800230c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002316:	4293      	cmp	r3, r2
 8002318:	d223      	bcs.n	8002362 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	4618      	mov	r0, r3
 8002320:	f000 fda8 	bl	8002e74 <RCC_SetFlashLatencyFromMSIRange>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e3c9      	b.n	8002ac2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800232e:	4b7d      	ldr	r3, [pc, #500]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a7c      	ldr	r2, [pc, #496]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002334:	f043 0308 	orr.w	r3, r3, #8
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	4b7a      	ldr	r3, [pc, #488]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	4977      	ldr	r1, [pc, #476]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002348:	4313      	orrs	r3, r2
 800234a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800234c:	4b75      	ldr	r3, [pc, #468]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	021b      	lsls	r3, r3, #8
 800235a:	4972      	ldr	r1, [pc, #456]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 800235c:	4313      	orrs	r3, r2
 800235e:	604b      	str	r3, [r1, #4]
 8002360:	e025      	b.n	80023ae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002362:	4b70      	ldr	r3, [pc, #448]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a6f      	ldr	r2, [pc, #444]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002368:	f043 0308 	orr.w	r3, r3, #8
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	4b6d      	ldr	r3, [pc, #436]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	496a      	ldr	r1, [pc, #424]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 800237c:	4313      	orrs	r3, r2
 800237e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002380:	4b68      	ldr	r3, [pc, #416]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	021b      	lsls	r3, r3, #8
 800238e:	4965      	ldr	r1, [pc, #404]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002390:	4313      	orrs	r3, r2
 8002392:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 fd68 	bl	8002e74 <RCC_SetFlashLatencyFromMSIRange>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e389      	b.n	8002ac2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023ae:	f000 fc6f 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 80023b2:	4601      	mov	r1, r0
 80023b4:	4b5b      	ldr	r3, [pc, #364]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	4a5a      	ldr	r2, [pc, #360]	; (8002528 <HAL_RCC_OscConfig+0x29c>)
 80023c0:	5cd3      	ldrb	r3, [r2, r3]
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	fa21 f303 	lsr.w	r3, r1, r3
 80023ca:	4a58      	ldr	r2, [pc, #352]	; (800252c <HAL_RCC_OscConfig+0x2a0>)
 80023cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023ce:	4b58      	ldr	r3, [pc, #352]	; (8002530 <HAL_RCC_OscConfig+0x2a4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe fcc2 	bl	8000d5c <HAL_InitTick>
 80023d8:	4603      	mov	r3, r0
 80023da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d052      	beq.n	8002488 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	e36d      	b.n	8002ac2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d032      	beq.n	8002454 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023ee:	4b4d      	ldr	r3, [pc, #308]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a4c      	ldr	r2, [pc, #304]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023fa:	f7fe fdc5 	bl	8000f88 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002402:	f7fe fdc1 	bl	8000f88 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e356      	b.n	8002ac2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002414:	4b43      	ldr	r3, [pc, #268]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0f0      	beq.n	8002402 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002420:	4b40      	ldr	r3, [pc, #256]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a3f      	ldr	r2, [pc, #252]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002426:	f043 0308 	orr.w	r3, r3, #8
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	4b3d      	ldr	r3, [pc, #244]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	493a      	ldr	r1, [pc, #232]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800243e:	4b39      	ldr	r3, [pc, #228]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	021b      	lsls	r3, r3, #8
 800244c:	4935      	ldr	r1, [pc, #212]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 800244e:	4313      	orrs	r3, r2
 8002450:	604b      	str	r3, [r1, #4]
 8002452:	e01a      	b.n	800248a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002454:	4b33      	ldr	r3, [pc, #204]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a32      	ldr	r2, [pc, #200]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 800245a:	f023 0301 	bic.w	r3, r3, #1
 800245e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002460:	f7fe fd92 	bl	8000f88 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002468:	f7fe fd8e 	bl	8000f88 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e323      	b.n	8002ac2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800247a:	4b2a      	ldr	r3, [pc, #168]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x1dc>
 8002486:	e000      	b.n	800248a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002488:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d073      	beq.n	800257e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	2b08      	cmp	r3, #8
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_OscConfig+0x21c>
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	2b0c      	cmp	r3, #12
 80024a0:	d10e      	bne.n	80024c0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d10b      	bne.n	80024c0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a8:	4b1e      	ldr	r3, [pc, #120]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d063      	beq.n	800257c <HAL_RCC_OscConfig+0x2f0>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d15f      	bne.n	800257c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e300      	b.n	8002ac2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c8:	d106      	bne.n	80024d8 <HAL_RCC_OscConfig+0x24c>
 80024ca:	4b16      	ldr	r3, [pc, #88]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a15      	ldr	r2, [pc, #84]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80024d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e01d      	b.n	8002514 <HAL_RCC_OscConfig+0x288>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024e0:	d10c      	bne.n	80024fc <HAL_RCC_OscConfig+0x270>
 80024e2:	4b10      	ldr	r3, [pc, #64]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a0f      	ldr	r2, [pc, #60]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80024e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a0c      	ldr	r2, [pc, #48]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80024f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	e00b      	b.n	8002514 <HAL_RCC_OscConfig+0x288>
 80024fc:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a08      	ldr	r2, [pc, #32]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 8002502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a05      	ldr	r2, [pc, #20]	; (8002524 <HAL_RCC_OscConfig+0x298>)
 800250e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d01b      	beq.n	8002554 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251c:	f7fe fd34 	bl	8000f88 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002522:	e010      	b.n	8002546 <HAL_RCC_OscConfig+0x2ba>
 8002524:	40021000 	.word	0x40021000
 8002528:	080070fc 	.word	0x080070fc
 800252c:	20000004 	.word	0x20000004
 8002530:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002534:	f7fe fd28 	bl	8000f88 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b64      	cmp	r3, #100	; 0x64
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e2bd      	b.n	8002ac2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002546:	4baf      	ldr	r3, [pc, #700]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x2a8>
 8002552:	e014      	b.n	800257e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002554:	f7fe fd18 	bl	8000f88 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800255c:	f7fe fd14 	bl	8000f88 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b64      	cmp	r3, #100	; 0x64
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e2a9      	b.n	8002ac2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800256e:	4ba5      	ldr	r3, [pc, #660]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x2d0>
 800257a:	e000      	b.n	800257e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800257c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d060      	beq.n	800264c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	2b04      	cmp	r3, #4
 800258e:	d005      	beq.n	800259c <HAL_RCC_OscConfig+0x310>
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	2b0c      	cmp	r3, #12
 8002594:	d119      	bne.n	80025ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d116      	bne.n	80025ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800259c:	4b99      	ldr	r3, [pc, #612]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <HAL_RCC_OscConfig+0x328>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e286      	b.n	8002ac2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b4:	4b93      	ldr	r3, [pc, #588]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	061b      	lsls	r3, r3, #24
 80025c2:	4990      	ldr	r1, [pc, #576]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025c8:	e040      	b.n	800264c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d023      	beq.n	800261a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d2:	4b8c      	ldr	r3, [pc, #560]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a8b      	ldr	r2, [pc, #556]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 80025d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025de:	f7fe fcd3 	bl	8000f88 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e6:	f7fe fccf 	bl	8000f88 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e264      	b.n	8002ac2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025f8:	4b82      	ldr	r3, [pc, #520]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002604:	4b7f      	ldr	r3, [pc, #508]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	061b      	lsls	r3, r3, #24
 8002612:	497c      	ldr	r1, [pc, #496]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]
 8002618:	e018      	b.n	800264c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800261a:	4b7a      	ldr	r3, [pc, #488]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a79      	ldr	r2, [pc, #484]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 8002620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002626:	f7fe fcaf 	bl	8000f88 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800262e:	f7fe fcab 	bl	8000f88 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e240      	b.n	8002ac2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002640:	4b70      	ldr	r3, [pc, #448]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1f0      	bne.n	800262e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d03c      	beq.n	80026d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d01c      	beq.n	800269a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002660:	4b68      	ldr	r3, [pc, #416]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 8002662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002666:	4a67      	ldr	r2, [pc, #412]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002670:	f7fe fc8a 	bl	8000f88 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002678:	f7fe fc86 	bl	8000f88 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e21b      	b.n	8002ac2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800268a:	4b5e      	ldr	r3, [pc, #376]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 800268c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0ef      	beq.n	8002678 <HAL_RCC_OscConfig+0x3ec>
 8002698:	e01b      	b.n	80026d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800269a:	4b5a      	ldr	r3, [pc, #360]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 800269c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a0:	4a58      	ldr	r2, [pc, #352]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 80026a2:	f023 0301 	bic.w	r3, r3, #1
 80026a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026aa:	f7fe fc6d 	bl	8000f88 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b2:	f7fe fc69 	bl	8000f88 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e1fe      	b.n	8002ac2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026c4:	4b4f      	ldr	r3, [pc, #316]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 80026c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1ef      	bne.n	80026b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 80a6 	beq.w	800282c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e0:	2300      	movs	r3, #0
 80026e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026e4:	4b47      	ldr	r3, [pc, #284]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10d      	bne.n	800270c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f0:	4b44      	ldr	r3, [pc, #272]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 80026f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f4:	4a43      	ldr	r2, [pc, #268]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 80026f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fa:	6593      	str	r3, [r2, #88]	; 0x58
 80026fc:	4b41      	ldr	r3, [pc, #260]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 80026fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002708:	2301      	movs	r3, #1
 800270a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800270c:	4b3e      	ldr	r3, [pc, #248]	; (8002808 <HAL_RCC_OscConfig+0x57c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002714:	2b00      	cmp	r3, #0
 8002716:	d118      	bne.n	800274a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002718:	4b3b      	ldr	r3, [pc, #236]	; (8002808 <HAL_RCC_OscConfig+0x57c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a3a      	ldr	r2, [pc, #232]	; (8002808 <HAL_RCC_OscConfig+0x57c>)
 800271e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002722:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002724:	f7fe fc30 	bl	8000f88 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800272c:	f7fe fc2c 	bl	8000f88 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e1c1      	b.n	8002ac2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800273e:	4b32      	ldr	r3, [pc, #200]	; (8002808 <HAL_RCC_OscConfig+0x57c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d108      	bne.n	8002764 <HAL_RCC_OscConfig+0x4d8>
 8002752:	4b2c      	ldr	r3, [pc, #176]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 8002754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002758:	4a2a      	ldr	r2, [pc, #168]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002762:	e024      	b.n	80027ae <HAL_RCC_OscConfig+0x522>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b05      	cmp	r3, #5
 800276a:	d110      	bne.n	800278e <HAL_RCC_OscConfig+0x502>
 800276c:	4b25      	ldr	r3, [pc, #148]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 800276e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002772:	4a24      	ldr	r2, [pc, #144]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 8002774:	f043 0304 	orr.w	r3, r3, #4
 8002778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800277c:	4b21      	ldr	r3, [pc, #132]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 800277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002782:	4a20      	ldr	r2, [pc, #128]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800278c:	e00f      	b.n	80027ae <HAL_RCC_OscConfig+0x522>
 800278e:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 8002790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002794:	4a1b      	ldr	r2, [pc, #108]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 8002796:	f023 0301 	bic.w	r3, r3, #1
 800279a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800279e:	4b19      	ldr	r3, [pc, #100]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 80027a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a4:	4a17      	ldr	r2, [pc, #92]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 80027a6:	f023 0304 	bic.w	r3, r3, #4
 80027aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d016      	beq.n	80027e4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b6:	f7fe fbe7 	bl	8000f88 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027bc:	e00a      	b.n	80027d4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027be:	f7fe fbe3 	bl	8000f88 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e176      	b.n	8002ac2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_RCC_OscConfig+0x578>)
 80027d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0ed      	beq.n	80027be <HAL_RCC_OscConfig+0x532>
 80027e2:	e01a      	b.n	800281a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e4:	f7fe fbd0 	bl	8000f88 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027ea:	e00f      	b.n	800280c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ec:	f7fe fbcc 	bl	8000f88 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d906      	bls.n	800280c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e15f      	b.n	8002ac2 <HAL_RCC_OscConfig+0x836>
 8002802:	bf00      	nop
 8002804:	40021000 	.word	0x40021000
 8002808:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800280c:	4baa      	ldr	r3, [pc, #680]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1e8      	bne.n	80027ec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800281a:	7ffb      	ldrb	r3, [r7, #31]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d105      	bne.n	800282c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002820:	4ba5      	ldr	r3, [pc, #660]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 8002822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002824:	4aa4      	ldr	r2, [pc, #656]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 8002826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800282a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0320 	and.w	r3, r3, #32
 8002834:	2b00      	cmp	r3, #0
 8002836:	d03c      	beq.n	80028b2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	2b00      	cmp	r3, #0
 800283e:	d01c      	beq.n	800287a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002840:	4b9d      	ldr	r3, [pc, #628]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 8002842:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002846:	4a9c      	ldr	r2, [pc, #624]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002850:	f7fe fb9a 	bl	8000f88 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002858:	f7fe fb96 	bl	8000f88 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e12b      	b.n	8002ac2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800286a:	4b93      	ldr	r3, [pc, #588]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 800286c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0ef      	beq.n	8002858 <HAL_RCC_OscConfig+0x5cc>
 8002878:	e01b      	b.n	80028b2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800287a:	4b8f      	ldr	r3, [pc, #572]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 800287c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002880:	4a8d      	ldr	r2, [pc, #564]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 8002882:	f023 0301 	bic.w	r3, r3, #1
 8002886:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288a:	f7fe fb7d 	bl	8000f88 <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002892:	f7fe fb79 	bl	8000f88 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e10e      	b.n	8002ac2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028a4:	4b84      	ldr	r3, [pc, #528]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 80028a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1ef      	bne.n	8002892 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 8102 	beq.w	8002ac0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	f040 80c5 	bne.w	8002a50 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80028c6:	4b7c      	ldr	r3, [pc, #496]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f003 0203 	and.w	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d12c      	bne.n	8002934 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	3b01      	subs	r3, #1
 80028e6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d123      	bne.n	8002934 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d11b      	bne.n	8002934 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002906:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002908:	429a      	cmp	r2, r3
 800290a:	d113      	bne.n	8002934 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002916:	085b      	lsrs	r3, r3, #1
 8002918:	3b01      	subs	r3, #1
 800291a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800291c:	429a      	cmp	r2, r3
 800291e:	d109      	bne.n	8002934 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	085b      	lsrs	r3, r3, #1
 800292c:	3b01      	subs	r3, #1
 800292e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d067      	beq.n	8002a04 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	2b0c      	cmp	r3, #12
 8002938:	d062      	beq.n	8002a00 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800293a:	4b5f      	ldr	r3, [pc, #380]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e0bb      	b.n	8002ac2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800294a:	4b5b      	ldr	r3, [pc, #364]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a5a      	ldr	r2, [pc, #360]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 8002950:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002954:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002956:	f7fe fb17 	bl	8000f88 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295e:	f7fe fb13 	bl	8000f88 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e0a8      	b.n	8002ac2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002970:	4b51      	ldr	r3, [pc, #324]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1f0      	bne.n	800295e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800297c:	4b4e      	ldr	r3, [pc, #312]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	4b4e      	ldr	r3, [pc, #312]	; (8002abc <HAL_RCC_OscConfig+0x830>)
 8002982:	4013      	ands	r3, r2
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800298c:	3a01      	subs	r2, #1
 800298e:	0112      	lsls	r2, r2, #4
 8002990:	4311      	orrs	r1, r2
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002996:	0212      	lsls	r2, r2, #8
 8002998:	4311      	orrs	r1, r2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800299e:	0852      	lsrs	r2, r2, #1
 80029a0:	3a01      	subs	r2, #1
 80029a2:	0552      	lsls	r2, r2, #21
 80029a4:	4311      	orrs	r1, r2
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029aa:	0852      	lsrs	r2, r2, #1
 80029ac:	3a01      	subs	r2, #1
 80029ae:	0652      	lsls	r2, r2, #25
 80029b0:	4311      	orrs	r1, r2
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029b6:	06d2      	lsls	r2, r2, #27
 80029b8:	430a      	orrs	r2, r1
 80029ba:	493f      	ldr	r1, [pc, #252]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80029c0:	4b3d      	ldr	r3, [pc, #244]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a3c      	ldr	r2, [pc, #240]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 80029c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029cc:	4b3a      	ldr	r3, [pc, #232]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	4a39      	ldr	r2, [pc, #228]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 80029d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029d8:	f7fe fad6 	bl	8000f88 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e0:	f7fe fad2 	bl	8000f88 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e067      	b.n	8002ac2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029f2:	4b31      	ldr	r3, [pc, #196]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0f0      	beq.n	80029e0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029fe:	e05f      	b.n	8002ac0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e05e      	b.n	8002ac2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a04:	4b2c      	ldr	r3, [pc, #176]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d157      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a10:	4b29      	ldr	r3, [pc, #164]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a28      	ldr	r2, [pc, #160]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 8002a16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a1c:	4b26      	ldr	r3, [pc, #152]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	4a25      	ldr	r2, [pc, #148]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 8002a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a28:	f7fe faae 	bl	8000f88 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a30:	f7fe faaa 	bl	8000f88 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e03f      	b.n	8002ac2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a42:	4b1d      	ldr	r3, [pc, #116]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCC_OscConfig+0x7a4>
 8002a4e:	e037      	b.n	8002ac0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	2b0c      	cmp	r3, #12
 8002a54:	d02d      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a56:	4b18      	ldr	r3, [pc, #96]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a17      	ldr	r2, [pc, #92]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 8002a5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a60:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a62:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d105      	bne.n	8002a7a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002a6e:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	4a11      	ldr	r2, [pc, #68]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 8002a74:	f023 0303 	bic.w	r3, r3, #3
 8002a78:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002a7a:	4b0f      	ldr	r3, [pc, #60]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	4a0e      	ldr	r2, [pc, #56]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 8002a80:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a88:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8a:	f7fe fa7d 	bl	8000f88 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a92:	f7fe fa79 	bl	8000f88 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e00e      	b.n	8002ac2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aa4:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <HAL_RCC_OscConfig+0x82c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1f0      	bne.n	8002a92 <HAL_RCC_OscConfig+0x806>
 8002ab0:	e006      	b.n	8002ac0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e005      	b.n	8002ac2 <HAL_RCC_OscConfig+0x836>
 8002ab6:	bf00      	nop
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3720      	adds	r7, #32
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop

08002acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0c8      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b66      	ldr	r3, [pc, #408]	; (8002c7c <HAL_RCC_ClockConfig+0x1b0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d910      	bls.n	8002b10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b63      	ldr	r3, [pc, #396]	; (8002c7c <HAL_RCC_ClockConfig+0x1b0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f023 0207 	bic.w	r2, r3, #7
 8002af6:	4961      	ldr	r1, [pc, #388]	; (8002c7c <HAL_RCC_ClockConfig+0x1b0>)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afe:	4b5f      	ldr	r3, [pc, #380]	; (8002c7c <HAL_RCC_ClockConfig+0x1b0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0b0      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d04c      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d107      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b24:	4b56      	ldr	r3, [pc, #344]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d121      	bne.n	8002b74 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e09e      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d107      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b3c:	4b50      	ldr	r3, [pc, #320]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d115      	bne.n	8002b74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e092      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d107      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b54:	4b4a      	ldr	r3, [pc, #296]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d109      	bne.n	8002b74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e086      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b64:	4b46      	ldr	r3, [pc, #280]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e07e      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b74:	4b42      	ldr	r3, [pc, #264]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f023 0203 	bic.w	r2, r3, #3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	493f      	ldr	r1, [pc, #252]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b86:	f7fe f9ff 	bl	8000f88 <HAL_GetTick>
 8002b8a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8c:	e00a      	b.n	8002ba4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8e:	f7fe f9fb 	bl	8000f88 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e066      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba4:	4b36      	ldr	r3, [pc, #216]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 020c 	and.w	r2, r3, #12
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d1eb      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d008      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc2:	4b2f      	ldr	r3, [pc, #188]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	492c      	ldr	r1, [pc, #176]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd4:	4b29      	ldr	r3, [pc, #164]	; (8002c7c <HAL_RCC_ClockConfig+0x1b0>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d210      	bcs.n	8002c04 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be2:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <HAL_RCC_ClockConfig+0x1b0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 0207 	bic.w	r2, r3, #7
 8002bea:	4924      	ldr	r1, [pc, #144]	; (8002c7c <HAL_RCC_ClockConfig+0x1b0>)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf2:	4b22      	ldr	r3, [pc, #136]	; (8002c7c <HAL_RCC_ClockConfig+0x1b0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e036      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c10:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	4918      	ldr	r1, [pc, #96]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d009      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c2e:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4910      	ldr	r1, [pc, #64]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c42:	f000 f825 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8002c46:	4601      	mov	r1, r0
 8002c48:	4b0d      	ldr	r3, [pc, #52]	; (8002c80 <HAL_RCC_ClockConfig+0x1b4>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	4a0c      	ldr	r2, [pc, #48]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002c54:	5cd3      	ldrb	r3, [r2, r3]
 8002c56:	f003 031f 	and.w	r3, r3, #31
 8002c5a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c5e:	4a0a      	ldr	r2, [pc, #40]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c62:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <HAL_RCC_ClockConfig+0x1c0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe f878 	bl	8000d5c <HAL_InitTick>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c70:	7afb      	ldrb	r3, [r7, #11]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40022000 	.word	0x40022000
 8002c80:	40021000 	.word	0x40021000
 8002c84:	080070fc 	.word	0x080070fc
 8002c88:	20000004 	.word	0x20000004
 8002c8c:	20000008 	.word	0x20000008

08002c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b089      	sub	sp, #36	; 0x24
 8002c94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c9e:	4b3d      	ldr	r3, [pc, #244]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ca8:	4b3a      	ldr	r3, [pc, #232]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x34>
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	2b0c      	cmp	r3, #12
 8002cbc:	d121      	bne.n	8002d02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d11e      	bne.n	8002d02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cc4:	4b33      	ldr	r3, [pc, #204]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d107      	bne.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cd0:	4b30      	ldr	r3, [pc, #192]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd6:	0a1b      	lsrs	r3, r3, #8
 8002cd8:	f003 030f 	and.w	r3, r3, #15
 8002cdc:	61fb      	str	r3, [r7, #28]
 8002cde:	e005      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ce0:	4b2c      	ldr	r3, [pc, #176]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	091b      	lsrs	r3, r3, #4
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002cec:	4a2a      	ldr	r2, [pc, #168]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10d      	bne.n	8002d18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d00:	e00a      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d102      	bne.n	8002d0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d08:	4b24      	ldr	r3, [pc, #144]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d0a:	61bb      	str	r3, [r7, #24]
 8002d0c:	e004      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d14:	4b21      	ldr	r3, [pc, #132]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	2b0c      	cmp	r3, #12
 8002d1c:	d133      	bne.n	8002d86 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d1e:	4b1d      	ldr	r3, [pc, #116]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d002      	beq.n	8002d34 <HAL_RCC_GetSysClockFreq+0xa4>
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d003      	beq.n	8002d3a <HAL_RCC_GetSysClockFreq+0xaa>
 8002d32:	e005      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d34:	4b19      	ldr	r3, [pc, #100]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d36:	617b      	str	r3, [r7, #20]
      break;
 8002d38:	e005      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d3a:	4b18      	ldr	r3, [pc, #96]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d3c:	617b      	str	r3, [r7, #20]
      break;
 8002d3e:	e002      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	617b      	str	r3, [r7, #20]
      break;
 8002d44:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d46:	4b13      	ldr	r3, [pc, #76]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	091b      	lsrs	r3, r3, #4
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	3301      	adds	r3, #1
 8002d52:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d54:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	0a1b      	lsrs	r3, r3, #8
 8002d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	fb02 f203 	mul.w	r2, r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d6c:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	0e5b      	lsrs	r3, r3, #25
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	3301      	adds	r3, #1
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d84:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d86:	69bb      	ldr	r3, [r7, #24]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3724      	adds	r7, #36	; 0x24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	40021000 	.word	0x40021000
 8002d98:	08007114 	.word	0x08007114
 8002d9c:	00f42400 	.word	0x00f42400

08002da0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da4:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002da6:	681b      	ldr	r3, [r3, #0]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	20000004 	.word	0x20000004

08002db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002dbc:	f7ff fff0 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002dc0:	4601      	mov	r1, r0
 8002dc2:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	0a1b      	lsrs	r3, r3, #8
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	4a04      	ldr	r2, [pc, #16]	; (8002de0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dce:	5cd3      	ldrb	r3, [r2, r3]
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	0800710c 	.word	0x0800710c

08002de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002de8:	f7ff ffda 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002dec:	4601      	mov	r1, r0
 8002dee:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	0adb      	lsrs	r3, r3, #11
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	4a04      	ldr	r2, [pc, #16]	; (8002e0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dfa:	5cd3      	ldrb	r3, [r2, r3]
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	0800710c 	.word	0x0800710c

08002e10 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	220f      	movs	r2, #15
 8002e1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002e20:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <HAL_RCC_GetClockConfig+0x5c>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0203 	and.w	r2, r3, #3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002e2c:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <HAL_RCC_GetClockConfig+0x5c>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <HAL_RCC_GetClockConfig+0x5c>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002e44:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <HAL_RCC_GetClockConfig+0x5c>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	08db      	lsrs	r3, r3, #3
 8002e4a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002e52:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <HAL_RCC_GetClockConfig+0x60>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0207 	and.w	r2, r3, #7
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	601a      	str	r2, [r3, #0]
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	40022000 	.word	0x40022000

08002e74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e80:	4b2a      	ldr	r3, [pc, #168]	; (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e8c:	f7ff f99a 	bl	80021c4 <HAL_PWREx_GetVoltageRange>
 8002e90:	6178      	str	r0, [r7, #20]
 8002e92:	e014      	b.n	8002ebe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e94:	4b25      	ldr	r3, [pc, #148]	; (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e98:	4a24      	ldr	r2, [pc, #144]	; (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	6593      	str	r3, [r2, #88]	; 0x58
 8002ea0:	4b22      	ldr	r3, [pc, #136]	; (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002eac:	f7ff f98a 	bl	80021c4 <HAL_PWREx_GetVoltageRange>
 8002eb0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002eb2:	4b1e      	ldr	r3, [pc, #120]	; (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb6:	4a1d      	ldr	r2, [pc, #116]	; (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ebc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ec4:	d10b      	bne.n	8002ede <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b80      	cmp	r3, #128	; 0x80
 8002eca:	d919      	bls.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2ba0      	cmp	r3, #160	; 0xa0
 8002ed0:	d902      	bls.n	8002ed8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	e013      	b.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ed8:	2301      	movs	r3, #1
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	e010      	b.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b80      	cmp	r3, #128	; 0x80
 8002ee2:	d902      	bls.n	8002eea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	e00a      	b.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b80      	cmp	r3, #128	; 0x80
 8002eee:	d102      	bne.n	8002ef6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	e004      	b.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b70      	cmp	r3, #112	; 0x70
 8002efa:	d101      	bne.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002efc:	2301      	movs	r3, #1
 8002efe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f00:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f023 0207 	bic.w	r2, r3, #7
 8002f08:	4909      	ldr	r1, [pc, #36]	; (8002f30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f10:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d001      	beq.n	8002f22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3718      	adds	r7, #24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40022000 	.word	0x40022000

08002f34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f40:	2300      	movs	r3, #0
 8002f42:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d02f      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f58:	d005      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002f5a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f5e:	d015      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d007      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002f64:	e00f      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002f66:	4bac      	ldr	r3, [pc, #688]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	4aab      	ldr	r2, [pc, #684]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f70:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f72:	e00c      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3304      	adds	r3, #4
 8002f78:	2100      	movs	r1, #0
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 f9dc 	bl	8003338 <RCCEx_PLLSAI1_Config>
 8002f80:	4603      	mov	r3, r0
 8002f82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f84:	e003      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	74fb      	strb	r3, [r7, #19]
      break;
 8002f8a:	e000      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002f8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f8e:	7cfb      	ldrb	r3, [r7, #19]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10b      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f94:	4ba0      	ldr	r3, [pc, #640]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa2:	499d      	ldr	r1, [pc, #628]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002faa:	e001      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fac:	7cfb      	ldrb	r3, [r7, #19]
 8002fae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 8099 	beq.w	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fc2:	4b95      	ldr	r3, [pc, #596]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00d      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd8:	4b8f      	ldr	r3, [pc, #572]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fdc:	4a8e      	ldr	r2, [pc, #568]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8002fe4:	4b8c      	ldr	r3, [pc, #560]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ff4:	4b89      	ldr	r3, [pc, #548]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a88      	ldr	r2, [pc, #544]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ffe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003000:	f7fd ffc2 	bl	8000f88 <HAL_GetTick>
 8003004:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003006:	e009      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003008:	f7fd ffbe 	bl	8000f88 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d902      	bls.n	800301c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	74fb      	strb	r3, [r7, #19]
        break;
 800301a:	e005      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800301c:	4b7f      	ldr	r3, [pc, #508]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0ef      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8003028:	7cfb      	ldrb	r3, [r7, #19]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d155      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800302e:	4b7a      	ldr	r3, [pc, #488]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003038:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01e      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	429a      	cmp	r2, r3
 8003048:	d019      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800304a:	4b73      	ldr	r3, [pc, #460]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800304c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003054:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003056:	4b70      	ldr	r3, [pc, #448]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	4a6e      	ldr	r2, [pc, #440]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800305e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003066:	4b6c      	ldr	r3, [pc, #432]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306c:	4a6a      	ldr	r2, [pc, #424]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800306e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003072:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003076:	4a68      	ldr	r2, [pc, #416]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	d016      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fd ff7e 	bl	8000f88 <HAL_GetTick>
 800308c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800308e:	e00b      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003090:	f7fd ff7a 	bl	8000f88 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	; 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d902      	bls.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	74fb      	strb	r3, [r7, #19]
            break;
 80030a6:	e006      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a8:	4b5b      	ldr	r3, [pc, #364]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0ec      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80030b6:	7cfb      	ldrb	r3, [r7, #19]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10b      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030bc:	4b56      	ldr	r3, [pc, #344]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ca:	4953      	ldr	r1, [pc, #332]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030d2:	e004      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030d4:	7cfb      	ldrb	r3, [r7, #19]
 80030d6:	74bb      	strb	r3, [r7, #18]
 80030d8:	e001      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030da:	7cfb      	ldrb	r3, [r7, #19]
 80030dc:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030de:	7c7b      	ldrb	r3, [r7, #17]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d105      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e4:	4b4c      	ldr	r3, [pc, #304]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e8:	4a4b      	ldr	r2, [pc, #300]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030fc:	4b46      	ldr	r3, [pc, #280]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003102:	f023 0203 	bic.w	r2, r3, #3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	4943      	ldr	r1, [pc, #268]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800311e:	4b3e      	ldr	r3, [pc, #248]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003124:	f023 020c 	bic.w	r2, r3, #12
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	493a      	ldr	r1, [pc, #232]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0320 	and.w	r3, r3, #32
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003140:	4b35      	ldr	r3, [pc, #212]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003146:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314e:	4932      	ldr	r1, [pc, #200]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003162:	4b2d      	ldr	r3, [pc, #180]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003168:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003170:	4929      	ldr	r1, [pc, #164]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003172:	4313      	orrs	r3, r2
 8003174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00a      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003184:	4b24      	ldr	r3, [pc, #144]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003192:	4921      	ldr	r1, [pc, #132]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031a6:	4b1c      	ldr	r3, [pc, #112]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	4918      	ldr	r1, [pc, #96]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031c8:	4b13      	ldr	r3, [pc, #76]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	4910      	ldr	r1, [pc, #64]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d02c      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031ea:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	4907      	ldr	r1, [pc, #28]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003208:	d10a      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800320a:	4b03      	ldr	r3, [pc, #12]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	4a02      	ldr	r2, [pc, #8]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003210:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003214:	60d3      	str	r3, [r2, #12]
 8003216:	e015      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003218:	40021000 	.word	0x40021000
 800321c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003228:	d10c      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3304      	adds	r3, #4
 800322e:	2101      	movs	r1, #1
 8003230:	4618      	mov	r0, r3
 8003232:	f000 f881 	bl	8003338 <RCCEx_PLLSAI1_Config>
 8003236:	4603      	mov	r3, r0
 8003238:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800323a:	7cfb      	ldrb	r3, [r7, #19]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8003240:	7cfb      	ldrb	r3, [r7, #19]
 8003242:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d028      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003250:	4b30      	ldr	r3, [pc, #192]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003256:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	492d      	ldr	r1, [pc, #180]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800326e:	d106      	bne.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003270:	4b28      	ldr	r3, [pc, #160]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	4a27      	ldr	r2, [pc, #156]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003276:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800327a:	60d3      	str	r3, [r2, #12]
 800327c:	e011      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003286:	d10c      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3304      	adds	r3, #4
 800328c:	2101      	movs	r1, #1
 800328e:	4618      	mov	r0, r3
 8003290:	f000 f852 	bl	8003338 <RCCEx_PLLSAI1_Config>
 8003294:	4603      	mov	r3, r0
 8003296:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003298:	7cfb      	ldrb	r3, [r7, #19]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 800329e:	7cfb      	ldrb	r3, [r7, #19]
 80032a0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d01c      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032ae:	4b19      	ldr	r3, [pc, #100]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032bc:	4915      	ldr	r1, [pc, #84]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032cc:	d10c      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3304      	adds	r3, #4
 80032d2:	2102      	movs	r1, #2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 f82f 	bl	8003338 <RCCEx_PLLSAI1_Config>
 80032da:	4603      	mov	r3, r0
 80032dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032de:	7cfb      	ldrb	r3, [r7, #19]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 80032e4:	7cfb      	ldrb	r3, [r7, #19]
 80032e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032f4:	4b07      	ldr	r3, [pc, #28]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003302:	4904      	ldr	r1, [pc, #16]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800330a:	7cbb      	ldrb	r3, [r7, #18]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3718      	adds	r7, #24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40021000 	.word	0x40021000

08003318 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800331c:	4b05      	ldr	r3, [pc, #20]	; (8003334 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a04      	ldr	r2, [pc, #16]	; (8003334 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003322:	f043 0304 	orr.w	r3, r3, #4
 8003326:	6013      	str	r3, [r2, #0]
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40021000 	.word	0x40021000

08003338 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003346:	4b73      	ldr	r3, [pc, #460]	; (8003514 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d018      	beq.n	8003384 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003352:	4b70      	ldr	r3, [pc, #448]	; (8003514 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f003 0203 	and.w	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d10d      	bne.n	800337e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
       ||
 8003366:	2b00      	cmp	r3, #0
 8003368:	d009      	beq.n	800337e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800336a:	4b6a      	ldr	r3, [pc, #424]	; (8003514 <RCCEx_PLLSAI1_Config+0x1dc>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	091b      	lsrs	r3, r3, #4
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
       ||
 800337a:	429a      	cmp	r2, r3
 800337c:	d044      	beq.n	8003408 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	73fb      	strb	r3, [r7, #15]
 8003382:	e041      	b.n	8003408 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b02      	cmp	r3, #2
 800338a:	d00c      	beq.n	80033a6 <RCCEx_PLLSAI1_Config+0x6e>
 800338c:	2b03      	cmp	r3, #3
 800338e:	d013      	beq.n	80033b8 <RCCEx_PLLSAI1_Config+0x80>
 8003390:	2b01      	cmp	r3, #1
 8003392:	d120      	bne.n	80033d6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003394:	4b5f      	ldr	r3, [pc, #380]	; (8003514 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d11d      	bne.n	80033dc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033a4:	e01a      	b.n	80033dc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033a6:	4b5b      	ldr	r3, [pc, #364]	; (8003514 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d116      	bne.n	80033e0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033b6:	e013      	b.n	80033e0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033b8:	4b56      	ldr	r3, [pc, #344]	; (8003514 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10f      	bne.n	80033e4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033c4:	4b53      	ldr	r3, [pc, #332]	; (8003514 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d109      	bne.n	80033e4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033d4:	e006      	b.n	80033e4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	73fb      	strb	r3, [r7, #15]
      break;
 80033da:	e004      	b.n	80033e6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80033dc:	bf00      	nop
 80033de:	e002      	b.n	80033e6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80033e0:	bf00      	nop
 80033e2:	e000      	b.n	80033e6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80033e4:	bf00      	nop
    }

    if(status == HAL_OK)
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10d      	bne.n	8003408 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033ec:	4b49      	ldr	r3, [pc, #292]	; (8003514 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6819      	ldr	r1, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	3b01      	subs	r3, #1
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	430b      	orrs	r3, r1
 8003402:	4944      	ldr	r1, [pc, #272]	; (8003514 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003404:	4313      	orrs	r3, r2
 8003406:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003408:	7bfb      	ldrb	r3, [r7, #15]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d17c      	bne.n	8003508 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800340e:	4b41      	ldr	r3, [pc, #260]	; (8003514 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a40      	ldr	r2, [pc, #256]	; (8003514 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003414:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003418:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800341a:	f7fd fdb5 	bl	8000f88 <HAL_GetTick>
 800341e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003420:	e009      	b.n	8003436 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003422:	f7fd fdb1 	bl	8000f88 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d902      	bls.n	8003436 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	73fb      	strb	r3, [r7, #15]
        break;
 8003434:	e005      	b.n	8003442 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003436:	4b37      	ldr	r3, [pc, #220]	; (8003514 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1ef      	bne.n	8003422 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003442:	7bfb      	ldrb	r3, [r7, #15]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d15f      	bne.n	8003508 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d110      	bne.n	8003470 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800344e:	4b31      	ldr	r3, [pc, #196]	; (8003514 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003456:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6892      	ldr	r2, [r2, #8]
 800345e:	0211      	lsls	r1, r2, #8
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	68d2      	ldr	r2, [r2, #12]
 8003464:	06d2      	lsls	r2, r2, #27
 8003466:	430a      	orrs	r2, r1
 8003468:	492a      	ldr	r1, [pc, #168]	; (8003514 <RCCEx_PLLSAI1_Config+0x1dc>)
 800346a:	4313      	orrs	r3, r2
 800346c:	610b      	str	r3, [r1, #16]
 800346e:	e027      	b.n	80034c0 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d112      	bne.n	800349c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003476:	4b27      	ldr	r3, [pc, #156]	; (8003514 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800347e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6892      	ldr	r2, [r2, #8]
 8003486:	0211      	lsls	r1, r2, #8
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6912      	ldr	r2, [r2, #16]
 800348c:	0852      	lsrs	r2, r2, #1
 800348e:	3a01      	subs	r2, #1
 8003490:	0552      	lsls	r2, r2, #21
 8003492:	430a      	orrs	r2, r1
 8003494:	491f      	ldr	r1, [pc, #124]	; (8003514 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003496:	4313      	orrs	r3, r2
 8003498:	610b      	str	r3, [r1, #16]
 800349a:	e011      	b.n	80034c0 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800349c:	4b1d      	ldr	r3, [pc, #116]	; (8003514 <RCCEx_PLLSAI1_Config+0x1dc>)
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80034a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6892      	ldr	r2, [r2, #8]
 80034ac:	0211      	lsls	r1, r2, #8
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6952      	ldr	r2, [r2, #20]
 80034b2:	0852      	lsrs	r2, r2, #1
 80034b4:	3a01      	subs	r2, #1
 80034b6:	0652      	lsls	r2, r2, #25
 80034b8:	430a      	orrs	r2, r1
 80034ba:	4916      	ldr	r1, [pc, #88]	; (8003514 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80034c0:	4b14      	ldr	r3, [pc, #80]	; (8003514 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a13      	ldr	r2, [pc, #76]	; (8003514 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034cc:	f7fd fd5c 	bl	8000f88 <HAL_GetTick>
 80034d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034d2:	e009      	b.n	80034e8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034d4:	f7fd fd58 	bl	8000f88 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d902      	bls.n	80034e8 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	73fb      	strb	r3, [r7, #15]
          break;
 80034e6:	e005      	b.n	80034f4 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034e8:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0ef      	beq.n	80034d4 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d106      	bne.n	8003508 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034fa:	4b06      	ldr	r3, [pc, #24]	; (8003514 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	4904      	ldr	r1, [pc, #16]	; (8003514 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003504:	4313      	orrs	r3, r2
 8003506:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003508:	7bfb      	ldrb	r3, [r7, #15]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40021000 	.word	0x40021000

08003518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e049      	b.n	80035be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d106      	bne.n	8003544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f841 	bl	80035c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3304      	adds	r3, #4
 8003554:	4619      	mov	r1, r3
 8003556:	4610      	mov	r0, r2
 8003558:	f000 f9dc 	bl	8003914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
	...

080035dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d001      	beq.n	80035f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e03b      	b.n	800366c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a19      	ldr	r2, [pc, #100]	; (8003678 <HAL_TIM_Base_Start_IT+0x9c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d009      	beq.n	800362a <HAL_TIM_Base_Start_IT+0x4e>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800361e:	d004      	beq.n	800362a <HAL_TIM_Base_Start_IT+0x4e>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a15      	ldr	r2, [pc, #84]	; (800367c <HAL_TIM_Base_Start_IT+0xa0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d115      	bne.n	8003656 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	4b13      	ldr	r3, [pc, #76]	; (8003680 <HAL_TIM_Base_Start_IT+0xa4>)
 8003632:	4013      	ands	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b06      	cmp	r3, #6
 800363a:	d015      	beq.n	8003668 <HAL_TIM_Base_Start_IT+0x8c>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003642:	d011      	beq.n	8003668 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003654:	e008      	b.n	8003668 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 0201 	orr.w	r2, r2, #1
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	e000      	b.n	800366a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003668:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	40012c00 	.word	0x40012c00
 800367c:	40014000 	.word	0x40014000
 8003680:	00010007 	.word	0x00010007

08003684 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b02      	cmp	r3, #2
 8003698:	d122      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d11b      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f06f 0202 	mvn.w	r2, #2
 80036b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f905 	bl	80038d6 <HAL_TIM_IC_CaptureCallback>
 80036cc:	e005      	b.n	80036da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f8f7 	bl	80038c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f908 	bl	80038ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d122      	bne.n	8003734 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d11b      	bne.n	8003734 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f06f 0204 	mvn.w	r2, #4
 8003704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2202      	movs	r2, #2
 800370a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f8db 	bl	80038d6 <HAL_TIM_IC_CaptureCallback>
 8003720:	e005      	b.n	800372e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f8cd 	bl	80038c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f8de 	bl	80038ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b08      	cmp	r3, #8
 8003740:	d122      	bne.n	8003788 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b08      	cmp	r3, #8
 800374e:	d11b      	bne.n	8003788 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f06f 0208 	mvn.w	r2, #8
 8003758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2204      	movs	r2, #4
 800375e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f8b1 	bl	80038d6 <HAL_TIM_IC_CaptureCallback>
 8003774:	e005      	b.n	8003782 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f8a3 	bl	80038c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f8b4 	bl	80038ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f003 0310 	and.w	r3, r3, #16
 8003792:	2b10      	cmp	r3, #16
 8003794:	d122      	bne.n	80037dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b10      	cmp	r3, #16
 80037a2:	d11b      	bne.n	80037dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f06f 0210 	mvn.w	r2, #16
 80037ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2208      	movs	r2, #8
 80037b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f887 	bl	80038d6 <HAL_TIM_IC_CaptureCallback>
 80037c8:	e005      	b.n	80037d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f879 	bl	80038c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f88a 	bl	80038ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d10e      	bne.n	8003808 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d107      	bne.n	8003808 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0201 	mvn.w	r2, #1
 8003800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fd f948 	bl	8000a98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003812:	2b80      	cmp	r3, #128	; 0x80
 8003814:	d10e      	bne.n	8003834 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003820:	2b80      	cmp	r3, #128	; 0x80
 8003822:	d107      	bne.n	8003834 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800382c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f8de 	bl	80039f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003842:	d10e      	bne.n	8003862 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384e:	2b80      	cmp	r3, #128	; 0x80
 8003850:	d107      	bne.n	8003862 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800385a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f8d1 	bl	8003a04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386c:	2b40      	cmp	r3, #64	; 0x40
 800386e:	d10e      	bne.n	800388e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387a:	2b40      	cmp	r3, #64	; 0x40
 800387c:	d107      	bne.n	800388e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f838 	bl	80038fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	f003 0320 	and.w	r3, r3, #32
 8003898:	2b20      	cmp	r3, #32
 800389a:	d10e      	bne.n	80038ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f003 0320 	and.w	r3, r3, #32
 80038a6:	2b20      	cmp	r3, #32
 80038a8:	d107      	bne.n	80038ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f06f 0220 	mvn.w	r2, #32
 80038b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f891 	bl	80039dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr

080038ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038ea:	b480      	push	{r7}
 80038ec:	b083      	sub	sp, #12
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a2a      	ldr	r2, [pc, #168]	; (80039d0 <TIM_Base_SetConfig+0xbc>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d003      	beq.n	8003934 <TIM_Base_SetConfig+0x20>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003932:	d108      	bne.n	8003946 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a21      	ldr	r2, [pc, #132]	; (80039d0 <TIM_Base_SetConfig+0xbc>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00b      	beq.n	8003966 <TIM_Base_SetConfig+0x52>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003954:	d007      	beq.n	8003966 <TIM_Base_SetConfig+0x52>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a1e      	ldr	r2, [pc, #120]	; (80039d4 <TIM_Base_SetConfig+0xc0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d003      	beq.n	8003966 <TIM_Base_SetConfig+0x52>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a1d      	ldr	r2, [pc, #116]	; (80039d8 <TIM_Base_SetConfig+0xc4>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d108      	bne.n	8003978 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800396c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	4313      	orrs	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a0c      	ldr	r2, [pc, #48]	; (80039d0 <TIM_Base_SetConfig+0xbc>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d007      	beq.n	80039b4 <TIM_Base_SetConfig+0xa0>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a0b      	ldr	r2, [pc, #44]	; (80039d4 <TIM_Base_SetConfig+0xc0>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d003      	beq.n	80039b4 <TIM_Base_SetConfig+0xa0>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a0a      	ldr	r2, [pc, #40]	; (80039d8 <TIM_Base_SetConfig+0xc4>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d103      	bne.n	80039bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	615a      	str	r2, [r3, #20]
}
 80039c2:	bf00      	nop
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	40012c00 	.word	0x40012c00
 80039d4:	40014000 	.word	0x40014000
 80039d8:	40014400 	.word	0x40014400

080039dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e040      	b.n	8003aac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d106      	bne.n	8003a40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7fd f8f2 	bl	8000c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2224      	movs	r2, #36	; 0x24
 8003a44:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0201 	bic.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f962 	bl	8003d20 <UART_SetConfig>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e022      	b.n	8003aac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fb66 	bl	8004140 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0201 	orr.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fbed 	bl	8004284 <UART_CheckIdleState>
 8003aaa:	4603      	mov	r3, r0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08a      	sub	sp, #40	; 0x28
 8003ab8:	af02      	add	r7, sp, #8
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	f040 8081 	bne.w	8003bd0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <HAL_UART_Transmit+0x26>
 8003ad4:	88fb      	ldrh	r3, [r7, #6]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e079      	b.n	8003bd2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_UART_Transmit+0x38>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e072      	b.n	8003bd2 <HAL_UART_Transmit+0x11e>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2221      	movs	r2, #33	; 0x21
 8003afe:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003b00:	f7fd fa42 	bl	8000f88 <HAL_GetTick>
 8003b04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	88fa      	ldrh	r2, [r7, #6]
 8003b0a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	88fa      	ldrh	r2, [r7, #6]
 8003b12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b1e:	d108      	bne.n	8003b32 <HAL_UART_Transmit+0x7e>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d104      	bne.n	8003b32 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	61bb      	str	r3, [r7, #24]
 8003b30:	e003      	b.n	8003b3a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003b42:	e02d      	b.n	8003ba0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	2180      	movs	r1, #128	; 0x80
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 fbdd 	bl	800430e <UART_WaitOnFlagUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e039      	b.n	8003bd2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10b      	bne.n	8003b7c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	881a      	ldrh	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b70:	b292      	uxth	r2, r2
 8003b72:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	3302      	adds	r3, #2
 8003b78:	61bb      	str	r3, [r7, #24]
 8003b7a:	e008      	b.n	8003b8e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	781a      	ldrb	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	b292      	uxth	r2, r2
 8003b86:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1cb      	bne.n	8003b44 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2140      	movs	r1, #64	; 0x40
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 fba9 	bl	800430e <UART_WaitOnFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e005      	b.n	8003bd2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	e000      	b.n	8003bd2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003bd0:	2302      	movs	r3, #2
  }
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3720      	adds	r7, #32
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	4613      	mov	r3, r2
 8003be8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bee:	2b20      	cmp	r3, #32
 8003bf0:	d16c      	bne.n	8003ccc <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <HAL_UART_Receive_DMA+0x22>
 8003bf8:	88fb      	ldrh	r3, [r7, #6]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e065      	b.n	8003cce <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_UART_Receive_DMA+0x34>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e05e      	b.n	8003cce <HAL_UART_Receive_DMA+0xf2>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	88fa      	ldrh	r2, [r7, #6]
 8003c22:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2222      	movs	r2, #34	; 0x22
 8003c30:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d02a      	beq.n	8003c90 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c3e:	4a26      	ldr	r2, [pc, #152]	; (8003cd8 <HAL_UART_Receive_DMA+0xfc>)
 8003c40:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c46:	4a25      	ldr	r2, [pc, #148]	; (8003cdc <HAL_UART_Receive_DMA+0x100>)
 8003c48:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c4e:	4a24      	ldr	r2, [pc, #144]	; (8003ce0 <HAL_UART_Receive_DMA+0x104>)
 8003c50:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c56:	2200      	movs	r2, #0
 8003c58:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3324      	adds	r3, #36	; 0x24
 8003c64:	4619      	mov	r1, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	88fb      	ldrh	r3, [r7, #6]
 8003c6e:	f7fd fc2d 	bl	80014cc <HAL_DMA_Start_IT>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00b      	beq.n	8003c90 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2210      	movs	r2, #16
 8003c7c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e01e      	b.n	8003cce <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ca6:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cc6:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	e000      	b.n	8003cce <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8003ccc:	2302      	movs	r3, #2
  }
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	0800446f 	.word	0x0800446f
 8003cdc:	080044d7 	.word	0x080044d7
 8003ce0:	080044f3 	.word	0x080044f3

08003ce4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d20:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003d24:	b088      	sub	sp, #32
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	4bb0      	ldr	r3, [pc, #704]	; (8004010 <UART_SetConfig+0x2f0>)
 8003d4e:	4013      	ands	r3, r2
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6812      	ldr	r2, [r2, #0]
 8003d54:	69f9      	ldr	r1, [r7, #28]
 8003d56:	430b      	orrs	r3, r1
 8003d58:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4aa6      	ldr	r2, [pc, #664]	; (8004014 <UART_SetConfig+0x2f4>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d004      	beq.n	8003d8a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	69fa      	ldr	r2, [r7, #28]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	69fa      	ldr	r2, [r7, #28]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a9d      	ldr	r2, [pc, #628]	; (8004018 <UART_SetConfig+0x2f8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d121      	bne.n	8003dec <UART_SetConfig+0xcc>
 8003da8:	4b9c      	ldr	r3, [pc, #624]	; (800401c <UART_SetConfig+0x2fc>)
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d816      	bhi.n	8003de4 <UART_SetConfig+0xc4>
 8003db6:	a201      	add	r2, pc, #4	; (adr r2, 8003dbc <UART_SetConfig+0x9c>)
 8003db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbc:	08003dcd 	.word	0x08003dcd
 8003dc0:	08003dd9 	.word	0x08003dd9
 8003dc4:	08003dd3 	.word	0x08003dd3
 8003dc8:	08003ddf 	.word	0x08003ddf
 8003dcc:	2301      	movs	r3, #1
 8003dce:	76fb      	strb	r3, [r7, #27]
 8003dd0:	e072      	b.n	8003eb8 <UART_SetConfig+0x198>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	76fb      	strb	r3, [r7, #27]
 8003dd6:	e06f      	b.n	8003eb8 <UART_SetConfig+0x198>
 8003dd8:	2304      	movs	r3, #4
 8003dda:	76fb      	strb	r3, [r7, #27]
 8003ddc:	e06c      	b.n	8003eb8 <UART_SetConfig+0x198>
 8003dde:	2308      	movs	r3, #8
 8003de0:	76fb      	strb	r3, [r7, #27]
 8003de2:	e069      	b.n	8003eb8 <UART_SetConfig+0x198>
 8003de4:	2310      	movs	r3, #16
 8003de6:	76fb      	strb	r3, [r7, #27]
 8003de8:	bf00      	nop
 8003dea:	e065      	b.n	8003eb8 <UART_SetConfig+0x198>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a8b      	ldr	r2, [pc, #556]	; (8004020 <UART_SetConfig+0x300>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d134      	bne.n	8003e60 <UART_SetConfig+0x140>
 8003df6:	4b89      	ldr	r3, [pc, #548]	; (800401c <UART_SetConfig+0x2fc>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfc:	f003 030c 	and.w	r3, r3, #12
 8003e00:	2b0c      	cmp	r3, #12
 8003e02:	d829      	bhi.n	8003e58 <UART_SetConfig+0x138>
 8003e04:	a201      	add	r2, pc, #4	; (adr r2, 8003e0c <UART_SetConfig+0xec>)
 8003e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0a:	bf00      	nop
 8003e0c:	08003e41 	.word	0x08003e41
 8003e10:	08003e59 	.word	0x08003e59
 8003e14:	08003e59 	.word	0x08003e59
 8003e18:	08003e59 	.word	0x08003e59
 8003e1c:	08003e4d 	.word	0x08003e4d
 8003e20:	08003e59 	.word	0x08003e59
 8003e24:	08003e59 	.word	0x08003e59
 8003e28:	08003e59 	.word	0x08003e59
 8003e2c:	08003e47 	.word	0x08003e47
 8003e30:	08003e59 	.word	0x08003e59
 8003e34:	08003e59 	.word	0x08003e59
 8003e38:	08003e59 	.word	0x08003e59
 8003e3c:	08003e53 	.word	0x08003e53
 8003e40:	2300      	movs	r3, #0
 8003e42:	76fb      	strb	r3, [r7, #27]
 8003e44:	e038      	b.n	8003eb8 <UART_SetConfig+0x198>
 8003e46:	2302      	movs	r3, #2
 8003e48:	76fb      	strb	r3, [r7, #27]
 8003e4a:	e035      	b.n	8003eb8 <UART_SetConfig+0x198>
 8003e4c:	2304      	movs	r3, #4
 8003e4e:	76fb      	strb	r3, [r7, #27]
 8003e50:	e032      	b.n	8003eb8 <UART_SetConfig+0x198>
 8003e52:	2308      	movs	r3, #8
 8003e54:	76fb      	strb	r3, [r7, #27]
 8003e56:	e02f      	b.n	8003eb8 <UART_SetConfig+0x198>
 8003e58:	2310      	movs	r3, #16
 8003e5a:	76fb      	strb	r3, [r7, #27]
 8003e5c:	bf00      	nop
 8003e5e:	e02b      	b.n	8003eb8 <UART_SetConfig+0x198>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a6b      	ldr	r2, [pc, #428]	; (8004014 <UART_SetConfig+0x2f4>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d124      	bne.n	8003eb4 <UART_SetConfig+0x194>
 8003e6a:	4b6c      	ldr	r3, [pc, #432]	; (800401c <UART_SetConfig+0x2fc>)
 8003e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e78:	d012      	beq.n	8003ea0 <UART_SetConfig+0x180>
 8003e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e7e:	d802      	bhi.n	8003e86 <UART_SetConfig+0x166>
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d007      	beq.n	8003e94 <UART_SetConfig+0x174>
 8003e84:	e012      	b.n	8003eac <UART_SetConfig+0x18c>
 8003e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e8a:	d006      	beq.n	8003e9a <UART_SetConfig+0x17a>
 8003e8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e90:	d009      	beq.n	8003ea6 <UART_SetConfig+0x186>
 8003e92:	e00b      	b.n	8003eac <UART_SetConfig+0x18c>
 8003e94:	2300      	movs	r3, #0
 8003e96:	76fb      	strb	r3, [r7, #27]
 8003e98:	e00e      	b.n	8003eb8 <UART_SetConfig+0x198>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	76fb      	strb	r3, [r7, #27]
 8003e9e:	e00b      	b.n	8003eb8 <UART_SetConfig+0x198>
 8003ea0:	2304      	movs	r3, #4
 8003ea2:	76fb      	strb	r3, [r7, #27]
 8003ea4:	e008      	b.n	8003eb8 <UART_SetConfig+0x198>
 8003ea6:	2308      	movs	r3, #8
 8003ea8:	76fb      	strb	r3, [r7, #27]
 8003eaa:	e005      	b.n	8003eb8 <UART_SetConfig+0x198>
 8003eac:	2310      	movs	r3, #16
 8003eae:	76fb      	strb	r3, [r7, #27]
 8003eb0:	bf00      	nop
 8003eb2:	e001      	b.n	8003eb8 <UART_SetConfig+0x198>
 8003eb4:	2310      	movs	r3, #16
 8003eb6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a55      	ldr	r2, [pc, #340]	; (8004014 <UART_SetConfig+0x2f4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d174      	bne.n	8003fac <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ec2:	7efb      	ldrb	r3, [r7, #27]
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d824      	bhi.n	8003f12 <UART_SetConfig+0x1f2>
 8003ec8:	a201      	add	r2, pc, #4	; (adr r2, 8003ed0 <UART_SetConfig+0x1b0>)
 8003eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ece:	bf00      	nop
 8003ed0:	08003ef5 	.word	0x08003ef5
 8003ed4:	08003f13 	.word	0x08003f13
 8003ed8:	08003efd 	.word	0x08003efd
 8003edc:	08003f13 	.word	0x08003f13
 8003ee0:	08003f03 	.word	0x08003f03
 8003ee4:	08003f13 	.word	0x08003f13
 8003ee8:	08003f13 	.word	0x08003f13
 8003eec:	08003f13 	.word	0x08003f13
 8003ef0:	08003f0b 	.word	0x08003f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ef4:	f7fe ff60 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 8003ef8:	6178      	str	r0, [r7, #20]
        break;
 8003efa:	e00f      	b.n	8003f1c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003efc:	4b49      	ldr	r3, [pc, #292]	; (8004024 <UART_SetConfig+0x304>)
 8003efe:	617b      	str	r3, [r7, #20]
        break;
 8003f00:	e00c      	b.n	8003f1c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f02:	f7fe fec5 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8003f06:	6178      	str	r0, [r7, #20]
        break;
 8003f08:	e008      	b.n	8003f1c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f0e:	617b      	str	r3, [r7, #20]
        break;
 8003f10:	e004      	b.n	8003f1c <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	76bb      	strb	r3, [r7, #26]
        break;
 8003f1a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 8100 	beq.w	8004124 <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	4413      	add	r3, r2
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d305      	bcc.n	8003f40 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d902      	bls.n	8003f46 <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	76bb      	strb	r3, [r7, #26]
 8003f44:	e0ee      	b.n	8004124 <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	4619      	mov	r1, r3
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	f04f 0400 	mov.w	r4, #0
 8003f56:	0214      	lsls	r4, r2, #8
 8003f58:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003f5c:	020b      	lsls	r3, r1, #8
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6852      	ldr	r2, [r2, #4]
 8003f62:	0852      	lsrs	r2, r2, #1
 8003f64:	4611      	mov	r1, r2
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	eb13 0b01 	adds.w	fp, r3, r1
 8003f6e:	eb44 0c02 	adc.w	ip, r4, r2
 8003f72:	4658      	mov	r0, fp
 8003f74:	4661      	mov	r1, ip
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f04f 0400 	mov.w	r4, #0
 8003f7e:	461a      	mov	r2, r3
 8003f80:	4623      	mov	r3, r4
 8003f82:	f7fc f925 	bl	80001d0 <__aeabi_uldivmod>
 8003f86:	4603      	mov	r3, r0
 8003f88:	460c      	mov	r4, r1
 8003f8a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f92:	d308      	bcc.n	8003fa6 <UART_SetConfig+0x286>
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f9a:	d204      	bcs.n	8003fa6 <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	60da      	str	r2, [r3, #12]
 8003fa4:	e0be      	b.n	8004124 <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	76bb      	strb	r3, [r7, #26]
 8003faa:	e0bb      	b.n	8004124 <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fb4:	d169      	bne.n	800408a <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 8003fb6:	7efb      	ldrb	r3, [r7, #27]
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d835      	bhi.n	8004028 <UART_SetConfig+0x308>
 8003fbc:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <UART_SetConfig+0x2a4>)
 8003fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc2:	bf00      	nop
 8003fc4:	08003fe9 	.word	0x08003fe9
 8003fc8:	08003ff1 	.word	0x08003ff1
 8003fcc:	08003ff9 	.word	0x08003ff9
 8003fd0:	08004029 	.word	0x08004029
 8003fd4:	08003fff 	.word	0x08003fff
 8003fd8:	08004029 	.word	0x08004029
 8003fdc:	08004029 	.word	0x08004029
 8003fe0:	08004029 	.word	0x08004029
 8003fe4:	08004007 	.word	0x08004007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fe8:	f7fe fee6 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 8003fec:	6178      	str	r0, [r7, #20]
        break;
 8003fee:	e020      	b.n	8004032 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ff0:	f7fe fef8 	bl	8002de4 <HAL_RCC_GetPCLK2Freq>
 8003ff4:	6178      	str	r0, [r7, #20]
        break;
 8003ff6:	e01c      	b.n	8004032 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ff8:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <UART_SetConfig+0x304>)
 8003ffa:	617b      	str	r3, [r7, #20]
        break;
 8003ffc:	e019      	b.n	8004032 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ffe:	f7fe fe47 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8004002:	6178      	str	r0, [r7, #20]
        break;
 8004004:	e015      	b.n	8004032 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800400a:	617b      	str	r3, [r7, #20]
        break;
 800400c:	e011      	b.n	8004032 <UART_SetConfig+0x312>
 800400e:	bf00      	nop
 8004010:	efff69f3 	.word	0xefff69f3
 8004014:	40008000 	.word	0x40008000
 8004018:	40013800 	.word	0x40013800
 800401c:	40021000 	.word	0x40021000
 8004020:	40004400 	.word	0x40004400
 8004024:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	76bb      	strb	r3, [r7, #26]
        break;
 8004030:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d075      	beq.n	8004124 <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	005a      	lsls	r2, r3, #1
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	085b      	lsrs	r3, r3, #1
 8004042:	441a      	add	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	fbb2 f3f3 	udiv	r3, r2, r3
 800404c:	b29b      	uxth	r3, r3
 800404e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	2b0f      	cmp	r3, #15
 8004054:	d916      	bls.n	8004084 <UART_SetConfig+0x364>
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800405c:	d212      	bcs.n	8004084 <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	b29b      	uxth	r3, r3
 8004062:	f023 030f 	bic.w	r3, r3, #15
 8004066:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	085b      	lsrs	r3, r3, #1
 800406c:	b29b      	uxth	r3, r3
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	b29a      	uxth	r2, r3
 8004074:	89fb      	ldrh	r3, [r7, #14]
 8004076:	4313      	orrs	r3, r2
 8004078:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	89fa      	ldrh	r2, [r7, #14]
 8004080:	60da      	str	r2, [r3, #12]
 8004082:	e04f      	b.n	8004124 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	76bb      	strb	r3, [r7, #26]
 8004088:	e04c      	b.n	8004124 <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 800408a:	7efb      	ldrb	r3, [r7, #27]
 800408c:	2b08      	cmp	r3, #8
 800408e:	d828      	bhi.n	80040e2 <UART_SetConfig+0x3c2>
 8004090:	a201      	add	r2, pc, #4	; (adr r2, 8004098 <UART_SetConfig+0x378>)
 8004092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004096:	bf00      	nop
 8004098:	080040bd 	.word	0x080040bd
 800409c:	080040c5 	.word	0x080040c5
 80040a0:	080040cd 	.word	0x080040cd
 80040a4:	080040e3 	.word	0x080040e3
 80040a8:	080040d3 	.word	0x080040d3
 80040ac:	080040e3 	.word	0x080040e3
 80040b0:	080040e3 	.word	0x080040e3
 80040b4:	080040e3 	.word	0x080040e3
 80040b8:	080040db 	.word	0x080040db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040bc:	f7fe fe7c 	bl	8002db8 <HAL_RCC_GetPCLK1Freq>
 80040c0:	6178      	str	r0, [r7, #20]
        break;
 80040c2:	e013      	b.n	80040ec <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040c4:	f7fe fe8e 	bl	8002de4 <HAL_RCC_GetPCLK2Freq>
 80040c8:	6178      	str	r0, [r7, #20]
        break;
 80040ca:	e00f      	b.n	80040ec <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040cc:	4b1b      	ldr	r3, [pc, #108]	; (800413c <UART_SetConfig+0x41c>)
 80040ce:	617b      	str	r3, [r7, #20]
        break;
 80040d0:	e00c      	b.n	80040ec <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040d2:	f7fe fddd 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 80040d6:	6178      	str	r0, [r7, #20]
        break;
 80040d8:	e008      	b.n	80040ec <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040de:	617b      	str	r3, [r7, #20]
        break;
 80040e0:	e004      	b.n	80040ec <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	76bb      	strb	r3, [r7, #26]
        break;
 80040ea:	bf00      	nop
    }

    if (pclk != 0U)
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d018      	beq.n	8004124 <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	085a      	lsrs	r2, r3, #1
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	441a      	add	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	fbb2 f3f3 	udiv	r3, r2, r3
 8004104:	b29b      	uxth	r3, r3
 8004106:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	2b0f      	cmp	r3, #15
 800410c:	d908      	bls.n	8004120 <UART_SetConfig+0x400>
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004114:	d204      	bcs.n	8004120 <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	60da      	str	r2, [r3, #12]
 800411e:	e001      	b.n	8004124 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004130:	7ebb      	ldrb	r3, [r7, #26]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3720      	adds	r7, #32
 8004136:	46bd      	mov	sp, r7
 8004138:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800413c:	00f42400 	.word	0x00f42400

08004140 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01a      	beq.n	8004256 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800423e:	d10a      	bne.n	8004256 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	605a      	str	r2, [r3, #4]
  }
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af02      	add	r7, sp, #8
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004292:	f7fc fe79 	bl	8000f88 <HAL_GetTick>
 8004296:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d10e      	bne.n	80042c4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f82a 	bl	800430e <UART_WaitOnFlagUntilTimeout>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e020      	b.n	8004306 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d10e      	bne.n	80042f0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f814 	bl	800430e <UART_WaitOnFlagUntilTimeout>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e00a      	b.n	8004306 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2220      	movs	r2, #32
 80042fa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b084      	sub	sp, #16
 8004312:	af00      	add	r7, sp, #0
 8004314:	60f8      	str	r0, [r7, #12]
 8004316:	60b9      	str	r1, [r7, #8]
 8004318:	603b      	str	r3, [r7, #0]
 800431a:	4613      	mov	r3, r2
 800431c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800431e:	e05d      	b.n	80043dc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004326:	d059      	beq.n	80043dc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004328:	f7fc fe2e 	bl	8000f88 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	429a      	cmp	r2, r3
 8004336:	d302      	bcc.n	800433e <UART_WaitOnFlagUntilTimeout+0x30>
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d11b      	bne.n	8004376 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800434c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0201 	bic.w	r2, r2, #1
 800435c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2220      	movs	r2, #32
 8004362:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2220      	movs	r2, #32
 8004368:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e042      	b.n	80043fc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	d02b      	beq.n	80043dc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800438e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004392:	d123      	bne.n	80043dc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800439c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043ac:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0201 	bic.w	r2, r2, #1
 80043bc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2220      	movs	r2, #32
 80043c2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2220      	movs	r2, #32
 80043ce:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e00f      	b.n	80043fc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	69da      	ldr	r2, [r3, #28]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	4013      	ands	r3, r2
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	bf0c      	ite	eq
 80043ec:	2301      	moveq	r3, #1
 80043ee:	2300      	movne	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	461a      	mov	r2, r3
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d092      	beq.n	8004320 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800441a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2220      	movs	r2, #32
 8004420:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800442e:	b480      	push	{r7}
 8004430:	b083      	sub	sp, #12
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004444:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0201 	bic.w	r2, r2, #1
 8004454:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2220      	movs	r2, #32
 800445a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b084      	sub	sp, #16
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b00      	cmp	r3, #0
 8004488:	d11e      	bne.n	80044c8 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044a0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0201 	bic.w	r2, r2, #1
 80044b0:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044c0:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2220      	movs	r2, #32
 80044c6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f7ff fc0b 	bl	8003ce4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044ce:	bf00      	nop
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b084      	sub	sp, #16
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f7ff fc07 	bl	8003cf8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044ea:	bf00      	nop
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b086      	sub	sp, #24
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004504:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800450a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004516:	2b80      	cmp	r3, #128	; 0x80
 8004518:	d109      	bne.n	800452e <UART_DMAError+0x3c>
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	2b21      	cmp	r3, #33	; 0x21
 800451e:	d106      	bne.n	800452e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2200      	movs	r2, #0
 8004524:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004528:	6978      	ldr	r0, [r7, #20]
 800452a:	f7ff ff6b 	bl	8004404 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b40      	cmp	r3, #64	; 0x40
 800453a:	d109      	bne.n	8004550 <UART_DMAError+0x5e>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2b22      	cmp	r3, #34	; 0x22
 8004540:	d106      	bne.n	8004550 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2200      	movs	r2, #0
 8004546:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800454a:	6978      	ldr	r0, [r7, #20]
 800454c:	f7ff ff6f 	bl	800442e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004554:	f043 0210 	orr.w	r2, r3, #16
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800455c:	6978      	ldr	r0, [r7, #20]
 800455e:	f7ff fbd5 	bl	8003d0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004562:	bf00      	nop
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800456a:	b480      	push	{r7}
 800456c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800456e:	bf00      	nop
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800457e:	f3ef 8305 	mrs	r3, IPSR
 8004582:	60bb      	str	r3, [r7, #8]
  return(result);
 8004584:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10f      	bne.n	80045aa <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800458a:	f3ef 8310 	mrs	r3, PRIMASK
 800458e:	607b      	str	r3, [r7, #4]
  return(result);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d105      	bne.n	80045a2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004596:	f3ef 8311 	mrs	r3, BASEPRI
 800459a:	603b      	str	r3, [r7, #0]
  return(result);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d007      	beq.n	80045b2 <osKernelInitialize+0x3a>
 80045a2:	4b0e      	ldr	r3, [pc, #56]	; (80045dc <osKernelInitialize+0x64>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d103      	bne.n	80045b2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80045aa:	f06f 0305 	mvn.w	r3, #5
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	e00c      	b.n	80045cc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80045b2:	4b0a      	ldr	r3, [pc, #40]	; (80045dc <osKernelInitialize+0x64>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d105      	bne.n	80045c6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80045ba:	4b08      	ldr	r3, [pc, #32]	; (80045dc <osKernelInitialize+0x64>)
 80045bc:	2201      	movs	r2, #1
 80045be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	e002      	b.n	80045cc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80045c6:	f04f 33ff 	mov.w	r3, #4294967295
 80045ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80045cc:	68fb      	ldr	r3, [r7, #12]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	20000030 	.word	0x20000030

080045e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045e6:	f3ef 8305 	mrs	r3, IPSR
 80045ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80045ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10f      	bne.n	8004612 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045f2:	f3ef 8310 	mrs	r3, PRIMASK
 80045f6:	607b      	str	r3, [r7, #4]
  return(result);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d105      	bne.n	800460a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045fe:	f3ef 8311 	mrs	r3, BASEPRI
 8004602:	603b      	str	r3, [r7, #0]
  return(result);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d007      	beq.n	800461a <osKernelStart+0x3a>
 800460a:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <osKernelStart+0x68>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d103      	bne.n	800461a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004612:	f06f 0305 	mvn.w	r3, #5
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	e010      	b.n	800463c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800461a:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <osKernelStart+0x68>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d109      	bne.n	8004636 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004622:	f7ff ffa2 	bl	800456a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004626:	4b08      	ldr	r3, [pc, #32]	; (8004648 <osKernelStart+0x68>)
 8004628:	2202      	movs	r2, #2
 800462a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800462c:	f001 f870 	bl	8005710 <vTaskStartScheduler>
      stat = osOK;
 8004630:	2300      	movs	r3, #0
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	e002      	b.n	800463c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004636:	f04f 33ff 	mov.w	r3, #4294967295
 800463a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800463c:	68fb      	ldr	r3, [r7, #12]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	20000030 	.word	0x20000030

0800464c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800464c:	b580      	push	{r7, lr}
 800464e:	b090      	sub	sp, #64	; 0x40
 8004650:	af04      	add	r7, sp, #16
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004658:	2300      	movs	r3, #0
 800465a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800465c:	f3ef 8305 	mrs	r3, IPSR
 8004660:	61fb      	str	r3, [r7, #28]
  return(result);
 8004662:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004664:	2b00      	cmp	r3, #0
 8004666:	f040 808f 	bne.w	8004788 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800466a:	f3ef 8310 	mrs	r3, PRIMASK
 800466e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d105      	bne.n	8004682 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004676:	f3ef 8311 	mrs	r3, BASEPRI
 800467a:	617b      	str	r3, [r7, #20]
  return(result);
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <osThreadNew+0x3e>
 8004682:	4b44      	ldr	r3, [pc, #272]	; (8004794 <osThreadNew+0x148>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b02      	cmp	r3, #2
 8004688:	d07e      	beq.n	8004788 <osThreadNew+0x13c>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d07b      	beq.n	8004788 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004690:	2380      	movs	r3, #128	; 0x80
 8004692:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004694:	2318      	movs	r3, #24
 8004696:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004698:	2300      	movs	r3, #0
 800469a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800469c:	f04f 33ff 	mov.w	r3, #4294967295
 80046a0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d045      	beq.n	8004734 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d002      	beq.n	80046b6 <osThreadNew+0x6a>
        name = attr->name;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d008      	beq.n	80046dc <osThreadNew+0x90>
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	2b38      	cmp	r3, #56	; 0x38
 80046ce:	d805      	bhi.n	80046dc <osThreadNew+0x90>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <osThreadNew+0x94>
        return (NULL);
 80046dc:	2300      	movs	r3, #0
 80046de:	e054      	b.n	800478a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	089b      	lsrs	r3, r3, #2
 80046ee:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00e      	beq.n	8004716 <osThreadNew+0xca>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	2b5b      	cmp	r3, #91	; 0x5b
 80046fe:	d90a      	bls.n	8004716 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004704:	2b00      	cmp	r3, #0
 8004706:	d006      	beq.n	8004716 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <osThreadNew+0xca>
        mem = 1;
 8004710:	2301      	movs	r3, #1
 8004712:	623b      	str	r3, [r7, #32]
 8004714:	e010      	b.n	8004738 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10c      	bne.n	8004738 <osThreadNew+0xec>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d108      	bne.n	8004738 <osThreadNew+0xec>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d104      	bne.n	8004738 <osThreadNew+0xec>
          mem = 0;
 800472e:	2300      	movs	r3, #0
 8004730:	623b      	str	r3, [r7, #32]
 8004732:	e001      	b.n	8004738 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004734:	2300      	movs	r3, #0
 8004736:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d110      	bne.n	8004760 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004746:	9202      	str	r2, [sp, #8]
 8004748:	9301      	str	r3, [sp, #4]
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004752:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 fe09 	bl	800536c <xTaskCreateStatic>
 800475a:	4603      	mov	r3, r0
 800475c:	613b      	str	r3, [r7, #16]
 800475e:	e013      	b.n	8004788 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d110      	bne.n	8004788 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004768:	b29a      	uxth	r2, r3
 800476a:	f107 0310 	add.w	r3, r7, #16
 800476e:	9301      	str	r3, [sp, #4]
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f000 fe51 	bl	8005420 <xTaskCreate>
 800477e:	4603      	mov	r3, r0
 8004780:	2b01      	cmp	r3, #1
 8004782:	d001      	beq.n	8004788 <osThreadNew+0x13c>
          hTask = NULL;
 8004784:	2300      	movs	r3, #0
 8004786:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004788:	693b      	ldr	r3, [r7, #16]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3730      	adds	r7, #48	; 0x30
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	20000030 	.word	0x20000030

08004798 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047a0:	f3ef 8305 	mrs	r3, IPSR
 80047a4:	613b      	str	r3, [r7, #16]
  return(result);
 80047a6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10f      	bne.n	80047cc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ac:	f3ef 8310 	mrs	r3, PRIMASK
 80047b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d105      	bne.n	80047c4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047b8:	f3ef 8311 	mrs	r3, BASEPRI
 80047bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d007      	beq.n	80047d4 <osDelay+0x3c>
 80047c4:	4b0a      	ldr	r3, [pc, #40]	; (80047f0 <osDelay+0x58>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d103      	bne.n	80047d4 <osDelay+0x3c>
    stat = osErrorISR;
 80047cc:	f06f 0305 	mvn.w	r3, #5
 80047d0:	617b      	str	r3, [r7, #20]
 80047d2:	e007      	b.n	80047e4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 ff62 	bl	80056a8 <vTaskDelay>
    }
  }

  return (stat);
 80047e4:	697b      	ldr	r3, [r7, #20]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	20000030 	.word	0x20000030

080047f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4a07      	ldr	r2, [pc, #28]	; (8004820 <vApplicationGetIdleTaskMemory+0x2c>)
 8004804:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	4a06      	ldr	r2, [pc, #24]	; (8004824 <vApplicationGetIdleTaskMemory+0x30>)
 800480a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2280      	movs	r2, #128	; 0x80
 8004810:	601a      	str	r2, [r3, #0]
}
 8004812:	bf00      	nop
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	20000034 	.word	0x20000034
 8004824:	20000090 	.word	0x20000090

08004828 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4a07      	ldr	r2, [pc, #28]	; (8004854 <vApplicationGetTimerTaskMemory+0x2c>)
 8004838:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	4a06      	ldr	r2, [pc, #24]	; (8004858 <vApplicationGetTimerTaskMemory+0x30>)
 800483e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004846:	601a      	str	r2, [r3, #0]
}
 8004848:	bf00      	nop
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	20000290 	.word	0x20000290
 8004858:	200002ec 	.word	0x200002ec

0800485c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f103 0208 	add.w	r2, r3, #8
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f04f 32ff 	mov.w	r2, #4294967295
 8004874:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f103 0208 	add.w	r2, r3, #8
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f103 0208 	add.w	r2, r3, #8
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048b6:	b480      	push	{r7}
 80048b8:	b085      	sub	sp, #20
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	601a      	str	r2, [r3, #0]
}
 80048f2:	bf00      	nop
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048fe:	b480      	push	{r7}
 8004900:	b085      	sub	sp, #20
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
 8004906:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004914:	d103      	bne.n	800491e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	e00c      	b.n	8004938 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	3308      	adds	r3, #8
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	e002      	b.n	800492c <vListInsert+0x2e>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	429a      	cmp	r2, r3
 8004936:	d2f6      	bcs.n	8004926 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	601a      	str	r2, [r3, #0]
}
 8004964:	bf00      	nop
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6892      	ldr	r2, [r2, #8]
 8004986:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6852      	ldr	r2, [r2, #4]
 8004990:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	429a      	cmp	r2, r3
 800499a:	d103      	bne.n	80049a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	1e5a      	subs	r2, r3, #1
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d109      	bne.n	80049ec <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80049d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	60bb      	str	r3, [r7, #8]
 80049ea:	e7fe      	b.n	80049ea <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80049ec:	f002 f80e 	bl	8006a0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f8:	68f9      	ldr	r1, [r7, #12]
 80049fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049fc:	fb01 f303 	mul.w	r3, r1, r3
 8004a00:	441a      	add	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	68f9      	ldr	r1, [r7, #12]
 8004a20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a22:	fb01 f303 	mul.w	r3, r1, r3
 8004a26:	441a      	add	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	22ff      	movs	r2, #255	; 0xff
 8004a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	22ff      	movs	r2, #255	; 0xff
 8004a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d114      	bne.n	8004a6c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d01a      	beq.n	8004a80 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	3310      	adds	r3, #16
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f001 f8de 	bl	8005c10 <xTaskRemoveFromEventList>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d012      	beq.n	8004a80 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a5a:	4b0d      	ldr	r3, [pc, #52]	; (8004a90 <xQueueGenericReset+0xcc>)
 8004a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	e009      	b.n	8004a80 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	3310      	adds	r3, #16
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7ff fef3 	bl	800485c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	3324      	adds	r3, #36	; 0x24
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7ff feee 	bl	800485c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a80:	f001 fff2 	bl	8006a68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a84:	2301      	movs	r3, #1
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	e000ed04 	.word	0xe000ed04

08004a94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b08e      	sub	sp, #56	; 0x38
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
 8004aa0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d109      	bne.n	8004abc <xQueueGenericCreateStatic+0x28>
 8004aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aba:	e7fe      	b.n	8004aba <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d109      	bne.n	8004ad6 <xQueueGenericCreateStatic+0x42>
 8004ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac6:	f383 8811 	msr	BASEPRI, r3
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad4:	e7fe      	b.n	8004ad4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <xQueueGenericCreateStatic+0x4e>
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <xQueueGenericCreateStatic+0x52>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <xQueueGenericCreateStatic+0x54>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d109      	bne.n	8004b00 <xQueueGenericCreateStatic+0x6c>
 8004aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	623b      	str	r3, [r7, #32]
 8004afe:	e7fe      	b.n	8004afe <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d102      	bne.n	8004b0c <xQueueGenericCreateStatic+0x78>
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <xQueueGenericCreateStatic+0x7c>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e000      	b.n	8004b12 <xQueueGenericCreateStatic+0x7e>
 8004b10:	2300      	movs	r3, #0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d109      	bne.n	8004b2a <xQueueGenericCreateStatic+0x96>
 8004b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1a:	f383 8811 	msr	BASEPRI, r3
 8004b1e:	f3bf 8f6f 	isb	sy
 8004b22:	f3bf 8f4f 	dsb	sy
 8004b26:	61fb      	str	r3, [r7, #28]
 8004b28:	e7fe      	b.n	8004b28 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b2a:	2350      	movs	r3, #80	; 0x50
 8004b2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b50      	cmp	r3, #80	; 0x50
 8004b32:	d009      	beq.n	8004b48 <xQueueGenericCreateStatic+0xb4>
 8004b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b38:	f383 8811 	msr	BASEPRI, r3
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	61bb      	str	r3, [r7, #24]
 8004b46:	e7fe      	b.n	8004b46 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b48:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00d      	beq.n	8004b70 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b5c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	4613      	mov	r3, r2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	68b9      	ldr	r1, [r7, #8]
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 f805 	bl	8004b7a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3730      	adds	r7, #48	; 0x30
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	60f8      	str	r0, [r7, #12]
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	607a      	str	r2, [r7, #4]
 8004b86:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d103      	bne.n	8004b96 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	e002      	b.n	8004b9c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ba8:	2101      	movs	r1, #1
 8004baa:	69b8      	ldr	r0, [r7, #24]
 8004bac:	f7ff ff0a 	bl	80049c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	78fa      	ldrb	r2, [r7, #3]
 8004bb4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004bb8:	bf00      	nop
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b08e      	sub	sp, #56	; 0x38
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
 8004bcc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d109      	bne.n	8004bf0 <xQueueGenericSend+0x30>
 8004bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bee:	e7fe      	b.n	8004bee <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d103      	bne.n	8004bfe <xQueueGenericSend+0x3e>
 8004bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <xQueueGenericSend+0x42>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e000      	b.n	8004c04 <xQueueGenericSend+0x44>
 8004c02:	2300      	movs	r3, #0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d109      	bne.n	8004c1c <xQueueGenericSend+0x5c>
 8004c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
 8004c1a:	e7fe      	b.n	8004c1a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d103      	bne.n	8004c2a <xQueueGenericSend+0x6a>
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <xQueueGenericSend+0x6e>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e000      	b.n	8004c30 <xQueueGenericSend+0x70>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d109      	bne.n	8004c48 <xQueueGenericSend+0x88>
 8004c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	623b      	str	r3, [r7, #32]
 8004c46:	e7fe      	b.n	8004c46 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c48:	f001 f998 	bl	8005f7c <xTaskGetSchedulerState>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d102      	bne.n	8004c58 <xQueueGenericSend+0x98>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <xQueueGenericSend+0x9c>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e000      	b.n	8004c5e <xQueueGenericSend+0x9e>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d109      	bne.n	8004c76 <xQueueGenericSend+0xb6>
 8004c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c66:	f383 8811 	msr	BASEPRI, r3
 8004c6a:	f3bf 8f6f 	isb	sy
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	61fb      	str	r3, [r7, #28]
 8004c74:	e7fe      	b.n	8004c74 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c76:	f001 fec9 	bl	8006a0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d302      	bcc.n	8004c8c <xQueueGenericSend+0xcc>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d129      	bne.n	8004ce0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	68b9      	ldr	r1, [r7, #8]
 8004c90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c92:	f000 f9ff 	bl	8005094 <prvCopyDataToQueue>
 8004c96:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d010      	beq.n	8004cc2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca2:	3324      	adds	r3, #36	; 0x24
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 ffb3 	bl	8005c10 <xTaskRemoveFromEventList>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d013      	beq.n	8004cd8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004cb0:	4b3f      	ldr	r3, [pc, #252]	; (8004db0 <xQueueGenericSend+0x1f0>)
 8004cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	f3bf 8f6f 	isb	sy
 8004cc0:	e00a      	b.n	8004cd8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d007      	beq.n	8004cd8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004cc8:	4b39      	ldr	r3, [pc, #228]	; (8004db0 <xQueueGenericSend+0x1f0>)
 8004cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	f3bf 8f4f 	dsb	sy
 8004cd4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004cd8:	f001 fec6 	bl	8006a68 <vPortExitCritical>
				return pdPASS;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e063      	b.n	8004da8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d103      	bne.n	8004cee <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ce6:	f001 febf 	bl	8006a68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	e05c      	b.n	8004da8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d106      	bne.n	8004d02 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cf4:	f107 0314 	add.w	r3, r7, #20
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 ffeb 	bl	8005cd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d02:	f001 feb1 	bl	8006a68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d06:	f000 fd67 	bl	80057d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d0a:	f001 fe7f 	bl	8006a0c <vPortEnterCritical>
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d14:	b25b      	sxtb	r3, r3
 8004d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1a:	d103      	bne.n	8004d24 <xQueueGenericSend+0x164>
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d2a:	b25b      	sxtb	r3, r3
 8004d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d30:	d103      	bne.n	8004d3a <xQueueGenericSend+0x17a>
 8004d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d3a:	f001 fe95 	bl	8006a68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d3e:	1d3a      	adds	r2, r7, #4
 8004d40:	f107 0314 	add.w	r3, r7, #20
 8004d44:	4611      	mov	r1, r2
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 ffda 	bl	8005d00 <xTaskCheckForTimeOut>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d124      	bne.n	8004d9c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d54:	f000 fa96 	bl	8005284 <prvIsQueueFull>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d018      	beq.n	8004d90 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d60:	3310      	adds	r3, #16
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	4611      	mov	r1, r2
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 ff04 	bl	8005b74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d6e:	f000 fa21 	bl	80051b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d72:	f000 fd3f 	bl	80057f4 <xTaskResumeAll>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f47f af7c 	bne.w	8004c76 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004d7e:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <xQueueGenericSend+0x1f0>)
 8004d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	e772      	b.n	8004c76 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d92:	f000 fa0f 	bl	80051b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d96:	f000 fd2d 	bl	80057f4 <xTaskResumeAll>
 8004d9a:	e76c      	b.n	8004c76 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d9e:	f000 fa09 	bl	80051b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004da2:	f000 fd27 	bl	80057f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004da6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3738      	adds	r7, #56	; 0x38
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	e000ed04 	.word	0xe000ed04

08004db4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b08e      	sub	sp, #56	; 0x38
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
 8004dc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d109      	bne.n	8004de0 <xQueueGenericSendFromISR+0x2c>
 8004dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8004dde:	e7fe      	b.n	8004dde <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d103      	bne.n	8004dee <xQueueGenericSendFromISR+0x3a>
 8004de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <xQueueGenericSendFromISR+0x3e>
 8004dee:	2301      	movs	r3, #1
 8004df0:	e000      	b.n	8004df4 <xQueueGenericSendFromISR+0x40>
 8004df2:	2300      	movs	r3, #0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d109      	bne.n	8004e0c <xQueueGenericSendFromISR+0x58>
 8004df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	623b      	str	r3, [r7, #32]
 8004e0a:	e7fe      	b.n	8004e0a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d103      	bne.n	8004e1a <xQueueGenericSendFromISR+0x66>
 8004e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <xQueueGenericSendFromISR+0x6a>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e000      	b.n	8004e20 <xQueueGenericSendFromISR+0x6c>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d109      	bne.n	8004e38 <xQueueGenericSendFromISR+0x84>
 8004e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	61fb      	str	r3, [r7, #28]
 8004e36:	e7fe      	b.n	8004e36 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e38:	f001 fec4 	bl	8006bc4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e3c:	f3ef 8211 	mrs	r2, BASEPRI
 8004e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	61ba      	str	r2, [r7, #24]
 8004e52:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e54:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e56:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d302      	bcc.n	8004e6a <xQueueGenericSendFromISR+0xb6>
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d12c      	bne.n	8004ec4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	68b9      	ldr	r1, [r7, #8]
 8004e78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e7a:	f000 f90b 	bl	8005094 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e7e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e86:	d112      	bne.n	8004eae <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d016      	beq.n	8004ebe <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e92:	3324      	adds	r3, #36	; 0x24
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 febb 	bl	8005c10 <xTaskRemoveFromEventList>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00e      	beq.n	8004ebe <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00b      	beq.n	8004ebe <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	e007      	b.n	8004ebe <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004eae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	b25a      	sxtb	r2, r3
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004ec2:	e001      	b.n	8004ec8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eca:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3738      	adds	r7, #56	; 0x38
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08c      	sub	sp, #48	; 0x30
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d109      	bne.n	8004f0a <xQueueReceive+0x2e>
	__asm volatile
 8004ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efa:	f383 8811 	msr	BASEPRI, r3
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	f3bf 8f4f 	dsb	sy
 8004f06:	623b      	str	r3, [r7, #32]
 8004f08:	e7fe      	b.n	8004f08 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d103      	bne.n	8004f18 <xQueueReceive+0x3c>
 8004f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <xQueueReceive+0x40>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e000      	b.n	8004f1e <xQueueReceive+0x42>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d109      	bne.n	8004f36 <xQueueReceive+0x5a>
 8004f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	61fb      	str	r3, [r7, #28]
 8004f34:	e7fe      	b.n	8004f34 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f36:	f001 f821 	bl	8005f7c <xTaskGetSchedulerState>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d102      	bne.n	8004f46 <xQueueReceive+0x6a>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <xQueueReceive+0x6e>
 8004f46:	2301      	movs	r3, #1
 8004f48:	e000      	b.n	8004f4c <xQueueReceive+0x70>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d109      	bne.n	8004f64 <xQueueReceive+0x88>
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	61bb      	str	r3, [r7, #24]
 8004f62:	e7fe      	b.n	8004f62 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f64:	f001 fd52 	bl	8006a0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d01f      	beq.n	8004fb4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f74:	68b9      	ldr	r1, [r7, #8]
 8004f76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f78:	f000 f8f6 	bl	8005168 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	1e5a      	subs	r2, r3, #1
 8004f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f82:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00f      	beq.n	8004fac <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8e:	3310      	adds	r3, #16
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 fe3d 	bl	8005c10 <xTaskRemoveFromEventList>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d007      	beq.n	8004fac <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f9c:	4b3c      	ldr	r3, [pc, #240]	; (8005090 <xQueueReceive+0x1b4>)
 8004f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004fac:	f001 fd5c 	bl	8006a68 <vPortExitCritical>
				return pdPASS;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e069      	b.n	8005088 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d103      	bne.n	8004fc2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fba:	f001 fd55 	bl	8006a68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	e062      	b.n	8005088 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d106      	bne.n	8004fd6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fc8:	f107 0310 	add.w	r3, r7, #16
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 fe81 	bl	8005cd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fd6:	f001 fd47 	bl	8006a68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fda:	f000 fbfd 	bl	80057d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fde:	f001 fd15 	bl	8006a0c <vPortEnterCritical>
 8004fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fe8:	b25b      	sxtb	r3, r3
 8004fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fee:	d103      	bne.n	8004ff8 <xQueueReceive+0x11c>
 8004ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ffe:	b25b      	sxtb	r3, r3
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005004:	d103      	bne.n	800500e <xQueueReceive+0x132>
 8005006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800500e:	f001 fd2b 	bl	8006a68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005012:	1d3a      	adds	r2, r7, #4
 8005014:	f107 0310 	add.w	r3, r7, #16
 8005018:	4611      	mov	r1, r2
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fe70 	bl	8005d00 <xTaskCheckForTimeOut>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d123      	bne.n	800506e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005028:	f000 f916 	bl	8005258 <prvIsQueueEmpty>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d017      	beq.n	8005062 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005034:	3324      	adds	r3, #36	; 0x24
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	4611      	mov	r1, r2
 800503a:	4618      	mov	r0, r3
 800503c:	f000 fd9a 	bl	8005b74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005042:	f000 f8b7 	bl	80051b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005046:	f000 fbd5 	bl	80057f4 <xTaskResumeAll>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d189      	bne.n	8004f64 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005050:	4b0f      	ldr	r3, [pc, #60]	; (8005090 <xQueueReceive+0x1b4>)
 8005052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	e780      	b.n	8004f64 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005064:	f000 f8a6 	bl	80051b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005068:	f000 fbc4 	bl	80057f4 <xTaskResumeAll>
 800506c:	e77a      	b.n	8004f64 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800506e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005070:	f000 f8a0 	bl	80051b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005074:	f000 fbbe 	bl	80057f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800507a:	f000 f8ed 	bl	8005258 <prvIsQueueEmpty>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	f43f af6f 	beq.w	8004f64 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005086:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005088:	4618      	mov	r0, r3
 800508a:	3730      	adds	r7, #48	; 0x30
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	e000ed04 	.word	0xe000ed04

08005094 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80050a0:	2300      	movs	r3, #0
 80050a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10d      	bne.n	80050ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d14d      	bne.n	8005156 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 ff7a 	bl	8005fb8 <xTaskPriorityDisinherit>
 80050c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	609a      	str	r2, [r3, #8]
 80050cc:	e043      	b.n	8005156 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d119      	bne.n	8005108 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6858      	ldr	r0, [r3, #4]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050dc:	461a      	mov	r2, r3
 80050de:	68b9      	ldr	r1, [r7, #8]
 80050e0:	f001 ffa8 	bl	8007034 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ec:	441a      	add	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d32b      	bcc.n	8005156 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	605a      	str	r2, [r3, #4]
 8005106:	e026      	b.n	8005156 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	68d8      	ldr	r0, [r3, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005110:	461a      	mov	r2, r3
 8005112:	68b9      	ldr	r1, [r7, #8]
 8005114:	f001 ff8e 	bl	8007034 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	425b      	negs	r3, r3
 8005122:	441a      	add	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	68da      	ldr	r2, [r3, #12]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d207      	bcs.n	8005144 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513c:	425b      	negs	r3, r3
 800513e:	441a      	add	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d105      	bne.n	8005156 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	3b01      	subs	r3, #1
 8005154:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1c5a      	adds	r2, r3, #1
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800515e:	697b      	ldr	r3, [r7, #20]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	2b00      	cmp	r3, #0
 8005178:	d018      	beq.n	80051ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	441a      	add	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	429a      	cmp	r2, r3
 8005192:	d303      	bcc.n	800519c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68d9      	ldr	r1, [r3, #12]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a4:	461a      	mov	r2, r3
 80051a6:	6838      	ldr	r0, [r7, #0]
 80051a8:	f001 ff44 	bl	8007034 <memcpy>
	}
}
 80051ac:	bf00      	nop
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80051bc:	f001 fc26 	bl	8006a0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051c8:	e011      	b.n	80051ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d012      	beq.n	80051f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	3324      	adds	r3, #36	; 0x24
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 fd1a 	bl	8005c10 <xTaskRemoveFromEventList>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80051e2:	f000 fded 	bl	8005dc0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	dce9      	bgt.n	80051ca <prvUnlockQueue+0x16>
 80051f6:	e000      	b.n	80051fa <prvUnlockQueue+0x46>
					break;
 80051f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	22ff      	movs	r2, #255	; 0xff
 80051fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005202:	f001 fc31 	bl	8006a68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005206:	f001 fc01 	bl	8006a0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005210:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005212:	e011      	b.n	8005238 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d012      	beq.n	8005242 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3310      	adds	r3, #16
 8005220:	4618      	mov	r0, r3
 8005222:	f000 fcf5 	bl	8005c10 <xTaskRemoveFromEventList>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800522c:	f000 fdc8 	bl	8005dc0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005230:	7bbb      	ldrb	r3, [r7, #14]
 8005232:	3b01      	subs	r3, #1
 8005234:	b2db      	uxtb	r3, r3
 8005236:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005238:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800523c:	2b00      	cmp	r3, #0
 800523e:	dce9      	bgt.n	8005214 <prvUnlockQueue+0x60>
 8005240:	e000      	b.n	8005244 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005242:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	22ff      	movs	r2, #255	; 0xff
 8005248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800524c:	f001 fc0c 	bl	8006a68 <vPortExitCritical>
}
 8005250:	bf00      	nop
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005260:	f001 fbd4 	bl	8006a0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005268:	2b00      	cmp	r3, #0
 800526a:	d102      	bne.n	8005272 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800526c:	2301      	movs	r3, #1
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	e001      	b.n	8005276 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005276:	f001 fbf7 	bl	8006a68 <vPortExitCritical>

	return xReturn;
 800527a:	68fb      	ldr	r3, [r7, #12]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800528c:	f001 fbbe 	bl	8006a0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005298:	429a      	cmp	r2, r3
 800529a:	d102      	bne.n	80052a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800529c:	2301      	movs	r3, #1
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	e001      	b.n	80052a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052a6:	f001 fbdf 	bl	8006a68 <vPortExitCritical>

	return xReturn;
 80052aa:	68fb      	ldr	r3, [r7, #12]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	e014      	b.n	80052ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80052c4:	4a0e      	ldr	r2, [pc, #56]	; (8005300 <vQueueAddToRegistry+0x4c>)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10b      	bne.n	80052e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80052d0:	490b      	ldr	r1, [pc, #44]	; (8005300 <vQueueAddToRegistry+0x4c>)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80052da:	4a09      	ldr	r2, [pc, #36]	; (8005300 <vQueueAddToRegistry+0x4c>)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	4413      	add	r3, r2
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80052e6:	e005      	b.n	80052f4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	3301      	adds	r3, #1
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2b07      	cmp	r3, #7
 80052f2:	d9e7      	bls.n	80052c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80052f4:	bf00      	nop
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	20001acc 	.word	0x20001acc

08005304 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005314:	f001 fb7a 	bl	8006a0c <vPortEnterCritical>
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800531e:	b25b      	sxtb	r3, r3
 8005320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005324:	d103      	bne.n	800532e <vQueueWaitForMessageRestricted+0x2a>
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005334:	b25b      	sxtb	r3, r3
 8005336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533a:	d103      	bne.n	8005344 <vQueueWaitForMessageRestricted+0x40>
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005344:	f001 fb90 	bl	8006a68 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534c:	2b00      	cmp	r3, #0
 800534e:	d106      	bne.n	800535e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	3324      	adds	r3, #36	; 0x24
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	68b9      	ldr	r1, [r7, #8]
 8005358:	4618      	mov	r0, r3
 800535a:	f000 fc2f 	bl	8005bbc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800535e:	6978      	ldr	r0, [r7, #20]
 8005360:	f7ff ff28 	bl	80051b4 <prvUnlockQueue>
	}
 8005364:	bf00      	nop
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08e      	sub	sp, #56	; 0x38
 8005370:	af04      	add	r7, sp, #16
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800537a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800537c:	2b00      	cmp	r3, #0
 800537e:	d109      	bne.n	8005394 <xTaskCreateStatic+0x28>
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	623b      	str	r3, [r7, #32]
 8005392:	e7fe      	b.n	8005392 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005396:	2b00      	cmp	r3, #0
 8005398:	d109      	bne.n	80053ae <xTaskCreateStatic+0x42>
 800539a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	61fb      	str	r3, [r7, #28]
 80053ac:	e7fe      	b.n	80053ac <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053ae:	235c      	movs	r3, #92	; 0x5c
 80053b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	2b5c      	cmp	r3, #92	; 0x5c
 80053b6:	d009      	beq.n	80053cc <xTaskCreateStatic+0x60>
 80053b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053bc:	f383 8811 	msr	BASEPRI, r3
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	61bb      	str	r3, [r7, #24]
 80053ca:	e7fe      	b.n	80053ca <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80053cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d01e      	beq.n	8005412 <xTaskCreateStatic+0xa6>
 80053d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d01b      	beq.n	8005412 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053dc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053e2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053ec:	2300      	movs	r3, #0
 80053ee:	9303      	str	r3, [sp, #12]
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	9302      	str	r3, [sp, #8]
 80053f4:	f107 0314 	add.w	r3, r7, #20
 80053f8:	9301      	str	r3, [sp, #4]
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	68b9      	ldr	r1, [r7, #8]
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 f850 	bl	80054aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800540a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800540c:	f000 f8dc 	bl	80055c8 <prvAddNewTaskToReadyList>
 8005410:	e001      	b.n	8005416 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005412:	2300      	movs	r3, #0
 8005414:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005416:	697b      	ldr	r3, [r7, #20]
	}
 8005418:	4618      	mov	r0, r3
 800541a:	3728      	adds	r7, #40	; 0x28
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08c      	sub	sp, #48	; 0x30
 8005424:	af04      	add	r7, sp, #16
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	603b      	str	r3, [r7, #0]
 800542c:	4613      	mov	r3, r2
 800542e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005430:	88fb      	ldrh	r3, [r7, #6]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4618      	mov	r0, r3
 8005436:	f001 fc03 	bl	8006c40 <pvPortMalloc>
 800543a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00e      	beq.n	8005460 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005442:	205c      	movs	r0, #92	; 0x5c
 8005444:	f001 fbfc 	bl	8006c40 <pvPortMalloc>
 8005448:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	631a      	str	r2, [r3, #48]	; 0x30
 8005456:	e005      	b.n	8005464 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005458:	6978      	ldr	r0, [r7, #20]
 800545a:	f001 fcb3 	bl	8006dc4 <vPortFree>
 800545e:	e001      	b.n	8005464 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005460:	2300      	movs	r3, #0
 8005462:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d017      	beq.n	800549a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005472:	88fa      	ldrh	r2, [r7, #6]
 8005474:	2300      	movs	r3, #0
 8005476:	9303      	str	r3, [sp, #12]
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	9302      	str	r3, [sp, #8]
 800547c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547e:	9301      	str	r3, [sp, #4]
 8005480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	68b9      	ldr	r1, [r7, #8]
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 f80e 	bl	80054aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800548e:	69f8      	ldr	r0, [r7, #28]
 8005490:	f000 f89a 	bl	80055c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005494:	2301      	movs	r3, #1
 8005496:	61bb      	str	r3, [r7, #24]
 8005498:	e002      	b.n	80054a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800549a:	f04f 33ff 	mov.w	r3, #4294967295
 800549e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054a0:	69bb      	ldr	r3, [r7, #24]
	}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3720      	adds	r7, #32
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b088      	sub	sp, #32
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	60f8      	str	r0, [r7, #12]
 80054b2:	60b9      	str	r1, [r7, #8]
 80054b4:	607a      	str	r2, [r7, #4]
 80054b6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	461a      	mov	r2, r3
 80054c2:	21a5      	movs	r1, #165	; 0xa5
 80054c4:	f001 fdc1 	bl	800704a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054d2:	3b01      	subs	r3, #1
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	f023 0307 	bic.w	r3, r3, #7
 80054e0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d009      	beq.n	8005500 <prvInitialiseNewTask+0x56>
 80054ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	617b      	str	r3, [r7, #20]
 80054fe:	e7fe      	b.n	80054fe <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d01f      	beq.n	8005546 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005506:	2300      	movs	r3, #0
 8005508:	61fb      	str	r3, [r7, #28]
 800550a:	e012      	b.n	8005532 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	4413      	add	r3, r2
 8005512:	7819      	ldrb	r1, [r3, #0]
 8005514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	4413      	add	r3, r2
 800551a:	3334      	adds	r3, #52	; 0x34
 800551c:	460a      	mov	r2, r1
 800551e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	4413      	add	r3, r2
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d006      	beq.n	800553a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	3301      	adds	r3, #1
 8005530:	61fb      	str	r3, [r7, #28]
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	2b0f      	cmp	r3, #15
 8005536:	d9e9      	bls.n	800550c <prvInitialiseNewTask+0x62>
 8005538:	e000      	b.n	800553c <prvInitialiseNewTask+0x92>
			{
				break;
 800553a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800553c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005544:	e003      	b.n	800554e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800554e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005550:	2b37      	cmp	r3, #55	; 0x37
 8005552:	d901      	bls.n	8005558 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005554:	2337      	movs	r3, #55	; 0x37
 8005556:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800555c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800555e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005562:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005566:	2200      	movs	r2, #0
 8005568:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	3304      	adds	r3, #4
 800556e:	4618      	mov	r0, r3
 8005570:	f7ff f994 	bl	800489c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005576:	3318      	adds	r3, #24
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff f98f 	bl	800489c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800557e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005582:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005586:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800558a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005592:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005596:	2200      	movs	r2, #0
 8005598:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	68f9      	ldr	r1, [r7, #12]
 80055a6:	69b8      	ldr	r0, [r7, #24]
 80055a8:	f001 f90c 	bl	80067c4 <pxPortInitialiseStack>
 80055ac:	4602      	mov	r2, r0
 80055ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055be:	bf00      	nop
 80055c0:	3720      	adds	r7, #32
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
	...

080055c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055d0:	f001 fa1c 	bl	8006a0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055d4:	4b2d      	ldr	r3, [pc, #180]	; (800568c <prvAddNewTaskToReadyList+0xc4>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3301      	adds	r3, #1
 80055da:	4a2c      	ldr	r2, [pc, #176]	; (800568c <prvAddNewTaskToReadyList+0xc4>)
 80055dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055de:	4b2c      	ldr	r3, [pc, #176]	; (8005690 <prvAddNewTaskToReadyList+0xc8>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d109      	bne.n	80055fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055e6:	4a2a      	ldr	r2, [pc, #168]	; (8005690 <prvAddNewTaskToReadyList+0xc8>)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055ec:	4b27      	ldr	r3, [pc, #156]	; (800568c <prvAddNewTaskToReadyList+0xc4>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d110      	bne.n	8005616 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80055f4:	f000 fc08 	bl	8005e08 <prvInitialiseTaskLists>
 80055f8:	e00d      	b.n	8005616 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80055fa:	4b26      	ldr	r3, [pc, #152]	; (8005694 <prvAddNewTaskToReadyList+0xcc>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d109      	bne.n	8005616 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005602:	4b23      	ldr	r3, [pc, #140]	; (8005690 <prvAddNewTaskToReadyList+0xc8>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560c:	429a      	cmp	r2, r3
 800560e:	d802      	bhi.n	8005616 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005610:	4a1f      	ldr	r2, [pc, #124]	; (8005690 <prvAddNewTaskToReadyList+0xc8>)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005616:	4b20      	ldr	r3, [pc, #128]	; (8005698 <prvAddNewTaskToReadyList+0xd0>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3301      	adds	r3, #1
 800561c:	4a1e      	ldr	r2, [pc, #120]	; (8005698 <prvAddNewTaskToReadyList+0xd0>)
 800561e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005620:	4b1d      	ldr	r3, [pc, #116]	; (8005698 <prvAddNewTaskToReadyList+0xd0>)
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562c:	4b1b      	ldr	r3, [pc, #108]	; (800569c <prvAddNewTaskToReadyList+0xd4>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	429a      	cmp	r2, r3
 8005632:	d903      	bls.n	800563c <prvAddNewTaskToReadyList+0x74>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005638:	4a18      	ldr	r2, [pc, #96]	; (800569c <prvAddNewTaskToReadyList+0xd4>)
 800563a:	6013      	str	r3, [r2, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005640:	4613      	mov	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4a15      	ldr	r2, [pc, #84]	; (80056a0 <prvAddNewTaskToReadyList+0xd8>)
 800564a:	441a      	add	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3304      	adds	r3, #4
 8005650:	4619      	mov	r1, r3
 8005652:	4610      	mov	r0, r2
 8005654:	f7ff f92f 	bl	80048b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005658:	f001 fa06 	bl	8006a68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800565c:	4b0d      	ldr	r3, [pc, #52]	; (8005694 <prvAddNewTaskToReadyList+0xcc>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00e      	beq.n	8005682 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005664:	4b0a      	ldr	r3, [pc, #40]	; (8005690 <prvAddNewTaskToReadyList+0xc8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566e:	429a      	cmp	r2, r3
 8005670:	d207      	bcs.n	8005682 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005672:	4b0c      	ldr	r3, [pc, #48]	; (80056a4 <prvAddNewTaskToReadyList+0xdc>)
 8005674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005682:	bf00      	nop
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20000bc0 	.word	0x20000bc0
 8005690:	200006ec 	.word	0x200006ec
 8005694:	20000bcc 	.word	0x20000bcc
 8005698:	20000bdc 	.word	0x20000bdc
 800569c:	20000bc8 	.word	0x20000bc8
 80056a0:	200006f0 	.word	0x200006f0
 80056a4:	e000ed04 	.word	0xe000ed04

080056a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056b0:	2300      	movs	r3, #0
 80056b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d016      	beq.n	80056e8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056ba:	4b13      	ldr	r3, [pc, #76]	; (8005708 <vTaskDelay+0x60>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d009      	beq.n	80056d6 <vTaskDelay+0x2e>
 80056c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	60bb      	str	r3, [r7, #8]
 80056d4:	e7fe      	b.n	80056d4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80056d6:	f000 f87f 	bl	80057d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80056da:	2100      	movs	r1, #0
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fcd7 	bl	8006090 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80056e2:	f000 f887 	bl	80057f4 <xTaskResumeAll>
 80056e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d107      	bne.n	80056fe <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80056ee:	4b07      	ldr	r3, [pc, #28]	; (800570c <vTaskDelay+0x64>)
 80056f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056fe:	bf00      	nop
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20000be8 	.word	0x20000be8
 800570c:	e000ed04 	.word	0xe000ed04

08005710 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b08a      	sub	sp, #40	; 0x28
 8005714:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005716:	2300      	movs	r3, #0
 8005718:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800571a:	2300      	movs	r3, #0
 800571c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800571e:	463a      	mov	r2, r7
 8005720:	1d39      	adds	r1, r7, #4
 8005722:	f107 0308 	add.w	r3, r7, #8
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff f864 	bl	80047f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800572c:	6839      	ldr	r1, [r7, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	9202      	str	r2, [sp, #8]
 8005734:	9301      	str	r3, [sp, #4]
 8005736:	2300      	movs	r3, #0
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	2300      	movs	r3, #0
 800573c:	460a      	mov	r2, r1
 800573e:	4920      	ldr	r1, [pc, #128]	; (80057c0 <vTaskStartScheduler+0xb0>)
 8005740:	4820      	ldr	r0, [pc, #128]	; (80057c4 <vTaskStartScheduler+0xb4>)
 8005742:	f7ff fe13 	bl	800536c <xTaskCreateStatic>
 8005746:	4602      	mov	r2, r0
 8005748:	4b1f      	ldr	r3, [pc, #124]	; (80057c8 <vTaskStartScheduler+0xb8>)
 800574a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800574c:	4b1e      	ldr	r3, [pc, #120]	; (80057c8 <vTaskStartScheduler+0xb8>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005754:	2301      	movs	r3, #1
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	e001      	b.n	800575e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800575a:	2300      	movs	r3, #0
 800575c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d102      	bne.n	800576a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005764:	f000 fce8 	bl	8006138 <xTimerCreateTimerTask>
 8005768:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d115      	bne.n	800579c <vTaskStartScheduler+0x8c>
 8005770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005782:	4b12      	ldr	r3, [pc, #72]	; (80057cc <vTaskStartScheduler+0xbc>)
 8005784:	f04f 32ff 	mov.w	r2, #4294967295
 8005788:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800578a:	4b11      	ldr	r3, [pc, #68]	; (80057d0 <vTaskStartScheduler+0xc0>)
 800578c:	2201      	movs	r2, #1
 800578e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005790:	4b10      	ldr	r3, [pc, #64]	; (80057d4 <vTaskStartScheduler+0xc4>)
 8005792:	2200      	movs	r2, #0
 8005794:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005796:	f001 f89b 	bl	80068d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800579a:	e00d      	b.n	80057b8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a2:	d109      	bne.n	80057b8 <vTaskStartScheduler+0xa8>
 80057a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	e7fe      	b.n	80057b6 <vTaskStartScheduler+0xa6>
}
 80057b8:	bf00      	nop
 80057ba:	3718      	adds	r7, #24
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	0800709c 	.word	0x0800709c
 80057c4:	08005dd9 	.word	0x08005dd9
 80057c8:	20000be4 	.word	0x20000be4
 80057cc:	20000be0 	.word	0x20000be0
 80057d0:	20000bcc 	.word	0x20000bcc
 80057d4:	20000bc4 	.word	0x20000bc4

080057d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057d8:	b480      	push	{r7}
 80057da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80057dc:	4b04      	ldr	r3, [pc, #16]	; (80057f0 <vTaskSuspendAll+0x18>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3301      	adds	r3, #1
 80057e2:	4a03      	ldr	r2, [pc, #12]	; (80057f0 <vTaskSuspendAll+0x18>)
 80057e4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80057e6:	bf00      	nop
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	20000be8 	.word	0x20000be8

080057f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80057fa:	2300      	movs	r3, #0
 80057fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80057fe:	2300      	movs	r3, #0
 8005800:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005802:	4b41      	ldr	r3, [pc, #260]	; (8005908 <xTaskResumeAll+0x114>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d109      	bne.n	800581e <xTaskResumeAll+0x2a>
 800580a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	603b      	str	r3, [r7, #0]
 800581c:	e7fe      	b.n	800581c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800581e:	f001 f8f5 	bl	8006a0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005822:	4b39      	ldr	r3, [pc, #228]	; (8005908 <xTaskResumeAll+0x114>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3b01      	subs	r3, #1
 8005828:	4a37      	ldr	r2, [pc, #220]	; (8005908 <xTaskResumeAll+0x114>)
 800582a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800582c:	4b36      	ldr	r3, [pc, #216]	; (8005908 <xTaskResumeAll+0x114>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d162      	bne.n	80058fa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005834:	4b35      	ldr	r3, [pc, #212]	; (800590c <xTaskResumeAll+0x118>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d05e      	beq.n	80058fa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800583c:	e02f      	b.n	800589e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800583e:	4b34      	ldr	r3, [pc, #208]	; (8005910 <xTaskResumeAll+0x11c>)
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3318      	adds	r3, #24
 800584a:	4618      	mov	r0, r3
 800584c:	f7ff f890 	bl	8004970 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	3304      	adds	r3, #4
 8005854:	4618      	mov	r0, r3
 8005856:	f7ff f88b 	bl	8004970 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585e:	4b2d      	ldr	r3, [pc, #180]	; (8005914 <xTaskResumeAll+0x120>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	d903      	bls.n	800586e <xTaskResumeAll+0x7a>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586a:	4a2a      	ldr	r2, [pc, #168]	; (8005914 <xTaskResumeAll+0x120>)
 800586c:	6013      	str	r3, [r2, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005872:	4613      	mov	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4413      	add	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4a27      	ldr	r2, [pc, #156]	; (8005918 <xTaskResumeAll+0x124>)
 800587c:	441a      	add	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	3304      	adds	r3, #4
 8005882:	4619      	mov	r1, r3
 8005884:	4610      	mov	r0, r2
 8005886:	f7ff f816 	bl	80048b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588e:	4b23      	ldr	r3, [pc, #140]	; (800591c <xTaskResumeAll+0x128>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005894:	429a      	cmp	r2, r3
 8005896:	d302      	bcc.n	800589e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005898:	4b21      	ldr	r3, [pc, #132]	; (8005920 <xTaskResumeAll+0x12c>)
 800589a:	2201      	movs	r2, #1
 800589c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800589e:	4b1c      	ldr	r3, [pc, #112]	; (8005910 <xTaskResumeAll+0x11c>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1cb      	bne.n	800583e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d001      	beq.n	80058b0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058ac:	f000 fb46 	bl	8005f3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80058b0:	4b1c      	ldr	r3, [pc, #112]	; (8005924 <xTaskResumeAll+0x130>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d010      	beq.n	80058de <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058bc:	f000 f846 	bl	800594c <xTaskIncrementTick>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d002      	beq.n	80058cc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80058c6:	4b16      	ldr	r3, [pc, #88]	; (8005920 <xTaskResumeAll+0x12c>)
 80058c8:	2201      	movs	r2, #1
 80058ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3b01      	subs	r3, #1
 80058d0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1f1      	bne.n	80058bc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80058d8:	4b12      	ldr	r3, [pc, #72]	; (8005924 <xTaskResumeAll+0x130>)
 80058da:	2200      	movs	r2, #0
 80058dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058de:	4b10      	ldr	r3, [pc, #64]	; (8005920 <xTaskResumeAll+0x12c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d009      	beq.n	80058fa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058e6:	2301      	movs	r3, #1
 80058e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80058ea:	4b0f      	ldr	r3, [pc, #60]	; (8005928 <xTaskResumeAll+0x134>)
 80058ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058fa:	f001 f8b5 	bl	8006a68 <vPortExitCritical>

	return xAlreadyYielded;
 80058fe:	68bb      	ldr	r3, [r7, #8]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	20000be8 	.word	0x20000be8
 800590c:	20000bc0 	.word	0x20000bc0
 8005910:	20000b80 	.word	0x20000b80
 8005914:	20000bc8 	.word	0x20000bc8
 8005918:	200006f0 	.word	0x200006f0
 800591c:	200006ec 	.word	0x200006ec
 8005920:	20000bd4 	.word	0x20000bd4
 8005924:	20000bd0 	.word	0x20000bd0
 8005928:	e000ed04 	.word	0xe000ed04

0800592c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005932:	4b05      	ldr	r3, [pc, #20]	; (8005948 <xTaskGetTickCount+0x1c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005938:	687b      	ldr	r3, [r7, #4]
}
 800593a:	4618      	mov	r0, r3
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	20000bc4 	.word	0x20000bc4

0800594c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005952:	2300      	movs	r3, #0
 8005954:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005956:	4b4e      	ldr	r3, [pc, #312]	; (8005a90 <xTaskIncrementTick+0x144>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	f040 8088 	bne.w	8005a70 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005960:	4b4c      	ldr	r3, [pc, #304]	; (8005a94 <xTaskIncrementTick+0x148>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3301      	adds	r3, #1
 8005966:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005968:	4a4a      	ldr	r2, [pc, #296]	; (8005a94 <xTaskIncrementTick+0x148>)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d11f      	bne.n	80059b4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005974:	4b48      	ldr	r3, [pc, #288]	; (8005a98 <xTaskIncrementTick+0x14c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d009      	beq.n	8005992 <xTaskIncrementTick+0x46>
 800597e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	603b      	str	r3, [r7, #0]
 8005990:	e7fe      	b.n	8005990 <xTaskIncrementTick+0x44>
 8005992:	4b41      	ldr	r3, [pc, #260]	; (8005a98 <xTaskIncrementTick+0x14c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	4b40      	ldr	r3, [pc, #256]	; (8005a9c <xTaskIncrementTick+0x150>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a3e      	ldr	r2, [pc, #248]	; (8005a98 <xTaskIncrementTick+0x14c>)
 800599e:	6013      	str	r3, [r2, #0]
 80059a0:	4a3e      	ldr	r2, [pc, #248]	; (8005a9c <xTaskIncrementTick+0x150>)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	4b3e      	ldr	r3, [pc, #248]	; (8005aa0 <xTaskIncrementTick+0x154>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	3301      	adds	r3, #1
 80059ac:	4a3c      	ldr	r2, [pc, #240]	; (8005aa0 <xTaskIncrementTick+0x154>)
 80059ae:	6013      	str	r3, [r2, #0]
 80059b0:	f000 fac4 	bl	8005f3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059b4:	4b3b      	ldr	r3, [pc, #236]	; (8005aa4 <xTaskIncrementTick+0x158>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d349      	bcc.n	8005a52 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059be:	4b36      	ldr	r3, [pc, #216]	; (8005a98 <xTaskIncrementTick+0x14c>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d104      	bne.n	80059d2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059c8:	4b36      	ldr	r3, [pc, #216]	; (8005aa4 <xTaskIncrementTick+0x158>)
 80059ca:	f04f 32ff 	mov.w	r2, #4294967295
 80059ce:	601a      	str	r2, [r3, #0]
					break;
 80059d0:	e03f      	b.n	8005a52 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059d2:	4b31      	ldr	r3, [pc, #196]	; (8005a98 <xTaskIncrementTick+0x14c>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d203      	bcs.n	80059f2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80059ea:	4a2e      	ldr	r2, [pc, #184]	; (8005aa4 <xTaskIncrementTick+0x158>)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80059f0:	e02f      	b.n	8005a52 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	3304      	adds	r3, #4
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fe ffba 	bl	8004970 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d004      	beq.n	8005a0e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	3318      	adds	r3, #24
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7fe ffb1 	bl	8004970 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a12:	4b25      	ldr	r3, [pc, #148]	; (8005aa8 <xTaskIncrementTick+0x15c>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d903      	bls.n	8005a22 <xTaskIncrementTick+0xd6>
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1e:	4a22      	ldr	r2, [pc, #136]	; (8005aa8 <xTaskIncrementTick+0x15c>)
 8005a20:	6013      	str	r3, [r2, #0]
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a26:	4613      	mov	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4413      	add	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4a1f      	ldr	r2, [pc, #124]	; (8005aac <xTaskIncrementTick+0x160>)
 8005a30:	441a      	add	r2, r3
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	3304      	adds	r3, #4
 8005a36:	4619      	mov	r1, r3
 8005a38:	4610      	mov	r0, r2
 8005a3a:	f7fe ff3c 	bl	80048b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a42:	4b1b      	ldr	r3, [pc, #108]	; (8005ab0 <xTaskIncrementTick+0x164>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d3b8      	bcc.n	80059be <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a50:	e7b5      	b.n	80059be <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a52:	4b17      	ldr	r3, [pc, #92]	; (8005ab0 <xTaskIncrementTick+0x164>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a58:	4914      	ldr	r1, [pc, #80]	; (8005aac <xTaskIncrementTick+0x160>)
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	440b      	add	r3, r1
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d907      	bls.n	8005a7a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	617b      	str	r3, [r7, #20]
 8005a6e:	e004      	b.n	8005a7a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005a70:	4b10      	ldr	r3, [pc, #64]	; (8005ab4 <xTaskIncrementTick+0x168>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3301      	adds	r3, #1
 8005a76:	4a0f      	ldr	r2, [pc, #60]	; (8005ab4 <xTaskIncrementTick+0x168>)
 8005a78:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005a7a:	4b0f      	ldr	r3, [pc, #60]	; (8005ab8 <xTaskIncrementTick+0x16c>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005a82:	2301      	movs	r3, #1
 8005a84:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005a86:	697b      	ldr	r3, [r7, #20]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3718      	adds	r7, #24
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	20000be8 	.word	0x20000be8
 8005a94:	20000bc4 	.word	0x20000bc4
 8005a98:	20000b78 	.word	0x20000b78
 8005a9c:	20000b7c 	.word	0x20000b7c
 8005aa0:	20000bd8 	.word	0x20000bd8
 8005aa4:	20000be0 	.word	0x20000be0
 8005aa8:	20000bc8 	.word	0x20000bc8
 8005aac:	200006f0 	.word	0x200006f0
 8005ab0:	200006ec 	.word	0x200006ec
 8005ab4:	20000bd0 	.word	0x20000bd0
 8005ab8:	20000bd4 	.word	0x20000bd4

08005abc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ac2:	4b27      	ldr	r3, [pc, #156]	; (8005b60 <vTaskSwitchContext+0xa4>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005aca:	4b26      	ldr	r3, [pc, #152]	; (8005b64 <vTaskSwitchContext+0xa8>)
 8005acc:	2201      	movs	r2, #1
 8005ace:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ad0:	e040      	b.n	8005b54 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005ad2:	4b24      	ldr	r3, [pc, #144]	; (8005b64 <vTaskSwitchContext+0xa8>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ad8:	4b23      	ldr	r3, [pc, #140]	; (8005b68 <vTaskSwitchContext+0xac>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	e00f      	b.n	8005b00 <vTaskSwitchContext+0x44>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d109      	bne.n	8005afa <vTaskSwitchContext+0x3e>
 8005ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	607b      	str	r3, [r7, #4]
 8005af8:	e7fe      	b.n	8005af8 <vTaskSwitchContext+0x3c>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	491a      	ldr	r1, [pc, #104]	; (8005b6c <vTaskSwitchContext+0xb0>)
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4613      	mov	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	440b      	add	r3, r1
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0e5      	beq.n	8005ae0 <vTaskSwitchContext+0x24>
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	4613      	mov	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4a13      	ldr	r2, [pc, #76]	; (8005b6c <vTaskSwitchContext+0xb0>)
 8005b20:	4413      	add	r3, r2
 8005b22:	60bb      	str	r3, [r7, #8]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	605a      	str	r2, [r3, #4]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	3308      	adds	r3, #8
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d104      	bne.n	8005b44 <vTaskSwitchContext+0x88>
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	605a      	str	r2, [r3, #4]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	4a09      	ldr	r2, [pc, #36]	; (8005b70 <vTaskSwitchContext+0xb4>)
 8005b4c:	6013      	str	r3, [r2, #0]
 8005b4e:	4a06      	ldr	r2, [pc, #24]	; (8005b68 <vTaskSwitchContext+0xac>)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6013      	str	r3, [r2, #0]
}
 8005b54:	bf00      	nop
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	20000be8 	.word	0x20000be8
 8005b64:	20000bd4 	.word	0x20000bd4
 8005b68:	20000bc8 	.word	0x20000bc8
 8005b6c:	200006f0 	.word	0x200006f0
 8005b70:	200006ec 	.word	0x200006ec

08005b74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d109      	bne.n	8005b98 <vTaskPlaceOnEventList+0x24>
 8005b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b88:	f383 8811 	msr	BASEPRI, r3
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	60fb      	str	r3, [r7, #12]
 8005b96:	e7fe      	b.n	8005b96 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b98:	4b07      	ldr	r3, [pc, #28]	; (8005bb8 <vTaskPlaceOnEventList+0x44>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	3318      	adds	r3, #24
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f7fe feac 	bl	80048fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ba6:	2101      	movs	r1, #1
 8005ba8:	6838      	ldr	r0, [r7, #0]
 8005baa:	f000 fa71 	bl	8006090 <prvAddCurrentTaskToDelayedList>
}
 8005bae:	bf00      	nop
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	200006ec 	.word	0x200006ec

08005bbc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d109      	bne.n	8005be2 <vTaskPlaceOnEventListRestricted+0x26>
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	617b      	str	r3, [r7, #20]
 8005be0:	e7fe      	b.n	8005be0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005be2:	4b0a      	ldr	r3, [pc, #40]	; (8005c0c <vTaskPlaceOnEventListRestricted+0x50>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3318      	adds	r3, #24
 8005be8:	4619      	mov	r1, r3
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f7fe fe63 	bl	80048b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d002      	beq.n	8005bfc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bfa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005bfc:	6879      	ldr	r1, [r7, #4]
 8005bfe:	68b8      	ldr	r0, [r7, #8]
 8005c00:	f000 fa46 	bl	8006090 <prvAddCurrentTaskToDelayedList>
	}
 8005c04:	bf00      	nop
 8005c06:	3718      	adds	r7, #24
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	200006ec 	.word	0x200006ec

08005c10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d109      	bne.n	8005c3a <xTaskRemoveFromEventList+0x2a>
 8005c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	60fb      	str	r3, [r7, #12]
 8005c38:	e7fe      	b.n	8005c38 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	3318      	adds	r3, #24
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fe fe96 	bl	8004970 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c44:	4b1d      	ldr	r3, [pc, #116]	; (8005cbc <xTaskRemoveFromEventList+0xac>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d11d      	bne.n	8005c88 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	3304      	adds	r3, #4
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7fe fe8d 	bl	8004970 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c5a:	4b19      	ldr	r3, [pc, #100]	; (8005cc0 <xTaskRemoveFromEventList+0xb0>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d903      	bls.n	8005c6a <xTaskRemoveFromEventList+0x5a>
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c66:	4a16      	ldr	r2, [pc, #88]	; (8005cc0 <xTaskRemoveFromEventList+0xb0>)
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c6e:	4613      	mov	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4a13      	ldr	r2, [pc, #76]	; (8005cc4 <xTaskRemoveFromEventList+0xb4>)
 8005c78:	441a      	add	r2, r3
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	3304      	adds	r3, #4
 8005c7e:	4619      	mov	r1, r3
 8005c80:	4610      	mov	r0, r2
 8005c82:	f7fe fe18 	bl	80048b6 <vListInsertEnd>
 8005c86:	e005      	b.n	8005c94 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	3318      	adds	r3, #24
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	480e      	ldr	r0, [pc, #56]	; (8005cc8 <xTaskRemoveFromEventList+0xb8>)
 8005c90:	f7fe fe11 	bl	80048b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c98:	4b0c      	ldr	r3, [pc, #48]	; (8005ccc <xTaskRemoveFromEventList+0xbc>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d905      	bls.n	8005cae <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ca6:	4b0a      	ldr	r3, [pc, #40]	; (8005cd0 <xTaskRemoveFromEventList+0xc0>)
 8005ca8:	2201      	movs	r2, #1
 8005caa:	601a      	str	r2, [r3, #0]
 8005cac:	e001      	b.n	8005cb2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005cb2:	697b      	ldr	r3, [r7, #20]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3718      	adds	r7, #24
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	20000be8 	.word	0x20000be8
 8005cc0:	20000bc8 	.word	0x20000bc8
 8005cc4:	200006f0 	.word	0x200006f0
 8005cc8:	20000b80 	.word	0x20000b80
 8005ccc:	200006ec 	.word	0x200006ec
 8005cd0:	20000bd4 	.word	0x20000bd4

08005cd4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005cdc:	4b06      	ldr	r3, [pc, #24]	; (8005cf8 <vTaskInternalSetTimeOutState+0x24>)
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ce4:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <vTaskInternalSetTimeOutState+0x28>)
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	605a      	str	r2, [r3, #4]
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	20000bd8 	.word	0x20000bd8
 8005cfc:	20000bc4 	.word	0x20000bc4

08005d00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b088      	sub	sp, #32
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d109      	bne.n	8005d24 <xTaskCheckForTimeOut+0x24>
 8005d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	613b      	str	r3, [r7, #16]
 8005d22:	e7fe      	b.n	8005d22 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d109      	bne.n	8005d3e <xTaskCheckForTimeOut+0x3e>
 8005d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	e7fe      	b.n	8005d3c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005d3e:	f000 fe65 	bl	8006a0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d42:	4b1d      	ldr	r3, [pc, #116]	; (8005db8 <xTaskCheckForTimeOut+0xb8>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5a:	d102      	bne.n	8005d62 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	61fb      	str	r3, [r7, #28]
 8005d60:	e023      	b.n	8005daa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	4b15      	ldr	r3, [pc, #84]	; (8005dbc <xTaskCheckForTimeOut+0xbc>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d007      	beq.n	8005d7e <xTaskCheckForTimeOut+0x7e>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d302      	bcc.n	8005d7e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	61fb      	str	r3, [r7, #28]
 8005d7c:	e015      	b.n	8005daa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d20b      	bcs.n	8005da0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	1ad2      	subs	r2, r2, r3
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f7ff ff9d 	bl	8005cd4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	61fb      	str	r3, [r7, #28]
 8005d9e:	e004      	b.n	8005daa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	2200      	movs	r2, #0
 8005da4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005da6:	2301      	movs	r3, #1
 8005da8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005daa:	f000 fe5d 	bl	8006a68 <vPortExitCritical>

	return xReturn;
 8005dae:	69fb      	ldr	r3, [r7, #28]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3720      	adds	r7, #32
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	20000bc4 	.word	0x20000bc4
 8005dbc:	20000bd8 	.word	0x20000bd8

08005dc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005dc4:	4b03      	ldr	r3, [pc, #12]	; (8005dd4 <vTaskMissedYield+0x14>)
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	601a      	str	r2, [r3, #0]
}
 8005dca:	bf00      	nop
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	20000bd4 	.word	0x20000bd4

08005dd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005de0:	f000 f852 	bl	8005e88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005de4:	4b06      	ldr	r3, [pc, #24]	; (8005e00 <prvIdleTask+0x28>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d9f9      	bls.n	8005de0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005dec:	4b05      	ldr	r3, [pc, #20]	; (8005e04 <prvIdleTask+0x2c>)
 8005dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005dfc:	e7f0      	b.n	8005de0 <prvIdleTask+0x8>
 8005dfe:	bf00      	nop
 8005e00:	200006f0 	.word	0x200006f0
 8005e04:	e000ed04 	.word	0xe000ed04

08005e08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e0e:	2300      	movs	r3, #0
 8005e10:	607b      	str	r3, [r7, #4]
 8005e12:	e00c      	b.n	8005e2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	4613      	mov	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4a12      	ldr	r2, [pc, #72]	; (8005e68 <prvInitialiseTaskLists+0x60>)
 8005e20:	4413      	add	r3, r2
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fe fd1a 	bl	800485c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	607b      	str	r3, [r7, #4]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b37      	cmp	r3, #55	; 0x37
 8005e32:	d9ef      	bls.n	8005e14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e34:	480d      	ldr	r0, [pc, #52]	; (8005e6c <prvInitialiseTaskLists+0x64>)
 8005e36:	f7fe fd11 	bl	800485c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e3a:	480d      	ldr	r0, [pc, #52]	; (8005e70 <prvInitialiseTaskLists+0x68>)
 8005e3c:	f7fe fd0e 	bl	800485c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e40:	480c      	ldr	r0, [pc, #48]	; (8005e74 <prvInitialiseTaskLists+0x6c>)
 8005e42:	f7fe fd0b 	bl	800485c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e46:	480c      	ldr	r0, [pc, #48]	; (8005e78 <prvInitialiseTaskLists+0x70>)
 8005e48:	f7fe fd08 	bl	800485c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e4c:	480b      	ldr	r0, [pc, #44]	; (8005e7c <prvInitialiseTaskLists+0x74>)
 8005e4e:	f7fe fd05 	bl	800485c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e52:	4b0b      	ldr	r3, [pc, #44]	; (8005e80 <prvInitialiseTaskLists+0x78>)
 8005e54:	4a05      	ldr	r2, [pc, #20]	; (8005e6c <prvInitialiseTaskLists+0x64>)
 8005e56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e58:	4b0a      	ldr	r3, [pc, #40]	; (8005e84 <prvInitialiseTaskLists+0x7c>)
 8005e5a:	4a05      	ldr	r2, [pc, #20]	; (8005e70 <prvInitialiseTaskLists+0x68>)
 8005e5c:	601a      	str	r2, [r3, #0]
}
 8005e5e:	bf00      	nop
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	200006f0 	.word	0x200006f0
 8005e6c:	20000b50 	.word	0x20000b50
 8005e70:	20000b64 	.word	0x20000b64
 8005e74:	20000b80 	.word	0x20000b80
 8005e78:	20000b94 	.word	0x20000b94
 8005e7c:	20000bac 	.word	0x20000bac
 8005e80:	20000b78 	.word	0x20000b78
 8005e84:	20000b7c 	.word	0x20000b7c

08005e88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e8e:	e019      	b.n	8005ec4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e90:	f000 fdbc 	bl	8006a0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e94:	4b0f      	ldr	r3, [pc, #60]	; (8005ed4 <prvCheckTasksWaitingTermination+0x4c>)
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fe fd65 	bl	8004970 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ea6:	4b0c      	ldr	r3, [pc, #48]	; (8005ed8 <prvCheckTasksWaitingTermination+0x50>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	4a0a      	ldr	r2, [pc, #40]	; (8005ed8 <prvCheckTasksWaitingTermination+0x50>)
 8005eae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005eb0:	4b0a      	ldr	r3, [pc, #40]	; (8005edc <prvCheckTasksWaitingTermination+0x54>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	4a09      	ldr	r2, [pc, #36]	; (8005edc <prvCheckTasksWaitingTermination+0x54>)
 8005eb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005eba:	f000 fdd5 	bl	8006a68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f80e 	bl	8005ee0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ec4:	4b05      	ldr	r3, [pc, #20]	; (8005edc <prvCheckTasksWaitingTermination+0x54>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1e1      	bne.n	8005e90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ecc:	bf00      	nop
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	20000b94 	.word	0x20000b94
 8005ed8:	20000bc0 	.word	0x20000bc0
 8005edc:	20000ba8 	.word	0x20000ba8

08005ee0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d108      	bne.n	8005f04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 ff64 	bl	8006dc4 <vPortFree>
				vPortFree( pxTCB );
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 ff61 	bl	8006dc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f02:	e017      	b.n	8005f34 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d103      	bne.n	8005f16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 ff58 	bl	8006dc4 <vPortFree>
	}
 8005f14:	e00e      	b.n	8005f34 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d009      	beq.n	8005f34 <prvDeleteTCB+0x54>
 8005f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f24:	f383 8811 	msr	BASEPRI, r3
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	60fb      	str	r3, [r7, #12]
 8005f32:	e7fe      	b.n	8005f32 <prvDeleteTCB+0x52>
	}
 8005f34:	bf00      	nop
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f42:	4b0c      	ldr	r3, [pc, #48]	; (8005f74 <prvResetNextTaskUnblockTime+0x38>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d104      	bne.n	8005f56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f4c:	4b0a      	ldr	r3, [pc, #40]	; (8005f78 <prvResetNextTaskUnblockTime+0x3c>)
 8005f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f54:	e008      	b.n	8005f68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f56:	4b07      	ldr	r3, [pc, #28]	; (8005f74 <prvResetNextTaskUnblockTime+0x38>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	4a04      	ldr	r2, [pc, #16]	; (8005f78 <prvResetNextTaskUnblockTime+0x3c>)
 8005f66:	6013      	str	r3, [r2, #0]
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	20000b78 	.word	0x20000b78
 8005f78:	20000be0 	.word	0x20000be0

08005f7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f82:	4b0b      	ldr	r3, [pc, #44]	; (8005fb0 <xTaskGetSchedulerState+0x34>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d102      	bne.n	8005f90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	607b      	str	r3, [r7, #4]
 8005f8e:	e008      	b.n	8005fa2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f90:	4b08      	ldr	r3, [pc, #32]	; (8005fb4 <xTaskGetSchedulerState+0x38>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d102      	bne.n	8005f9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f98:	2302      	movs	r3, #2
 8005f9a:	607b      	str	r3, [r7, #4]
 8005f9c:	e001      	b.n	8005fa2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005fa2:	687b      	ldr	r3, [r7, #4]
	}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	20000bcc 	.word	0x20000bcc
 8005fb4:	20000be8 	.word	0x20000be8

08005fb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d054      	beq.n	8006078 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005fce:	4b2d      	ldr	r3, [pc, #180]	; (8006084 <xTaskPriorityDisinherit+0xcc>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d009      	beq.n	8005fec <xTaskPriorityDisinherit+0x34>
 8005fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fdc:	f383 8811 	msr	BASEPRI, r3
 8005fe0:	f3bf 8f6f 	isb	sy
 8005fe4:	f3bf 8f4f 	dsb	sy
 8005fe8:	60fb      	str	r3, [r7, #12]
 8005fea:	e7fe      	b.n	8005fea <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d109      	bne.n	8006008 <xTaskPriorityDisinherit+0x50>
 8005ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff8:	f383 8811 	msr	BASEPRI, r3
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	60bb      	str	r3, [r7, #8]
 8006006:	e7fe      	b.n	8006006 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800600c:	1e5a      	subs	r2, r3, #1
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800601a:	429a      	cmp	r2, r3
 800601c:	d02c      	beq.n	8006078 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006022:	2b00      	cmp	r3, #0
 8006024:	d128      	bne.n	8006078 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	3304      	adds	r3, #4
 800602a:	4618      	mov	r0, r3
 800602c:	f7fe fca0 	bl	8004970 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006048:	4b0f      	ldr	r3, [pc, #60]	; (8006088 <xTaskPriorityDisinherit+0xd0>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	429a      	cmp	r2, r3
 800604e:	d903      	bls.n	8006058 <xTaskPriorityDisinherit+0xa0>
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	4a0c      	ldr	r2, [pc, #48]	; (8006088 <xTaskPriorityDisinherit+0xd0>)
 8006056:	6013      	str	r3, [r2, #0]
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605c:	4613      	mov	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4a09      	ldr	r2, [pc, #36]	; (800608c <xTaskPriorityDisinherit+0xd4>)
 8006066:	441a      	add	r2, r3
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	3304      	adds	r3, #4
 800606c:	4619      	mov	r1, r3
 800606e:	4610      	mov	r0, r2
 8006070:	f7fe fc21 	bl	80048b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006074:	2301      	movs	r3, #1
 8006076:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006078:	697b      	ldr	r3, [r7, #20]
	}
 800607a:	4618      	mov	r0, r3
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	200006ec 	.word	0x200006ec
 8006088:	20000bc8 	.word	0x20000bc8
 800608c:	200006f0 	.word	0x200006f0

08006090 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800609a:	4b21      	ldr	r3, [pc, #132]	; (8006120 <prvAddCurrentTaskToDelayedList+0x90>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060a0:	4b20      	ldr	r3, [pc, #128]	; (8006124 <prvAddCurrentTaskToDelayedList+0x94>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3304      	adds	r3, #4
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fe fc62 	bl	8004970 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b2:	d10a      	bne.n	80060ca <prvAddCurrentTaskToDelayedList+0x3a>
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d007      	beq.n	80060ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060ba:	4b1a      	ldr	r3, [pc, #104]	; (8006124 <prvAddCurrentTaskToDelayedList+0x94>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3304      	adds	r3, #4
 80060c0:	4619      	mov	r1, r3
 80060c2:	4819      	ldr	r0, [pc, #100]	; (8006128 <prvAddCurrentTaskToDelayedList+0x98>)
 80060c4:	f7fe fbf7 	bl	80048b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060c8:	e026      	b.n	8006118 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4413      	add	r3, r2
 80060d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060d2:	4b14      	ldr	r3, [pc, #80]	; (8006124 <prvAddCurrentTaskToDelayedList+0x94>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d209      	bcs.n	80060f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060e2:	4b12      	ldr	r3, [pc, #72]	; (800612c <prvAddCurrentTaskToDelayedList+0x9c>)
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	4b0f      	ldr	r3, [pc, #60]	; (8006124 <prvAddCurrentTaskToDelayedList+0x94>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3304      	adds	r3, #4
 80060ec:	4619      	mov	r1, r3
 80060ee:	4610      	mov	r0, r2
 80060f0:	f7fe fc05 	bl	80048fe <vListInsert>
}
 80060f4:	e010      	b.n	8006118 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060f6:	4b0e      	ldr	r3, [pc, #56]	; (8006130 <prvAddCurrentTaskToDelayedList+0xa0>)
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	4b0a      	ldr	r3, [pc, #40]	; (8006124 <prvAddCurrentTaskToDelayedList+0x94>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3304      	adds	r3, #4
 8006100:	4619      	mov	r1, r3
 8006102:	4610      	mov	r0, r2
 8006104:	f7fe fbfb 	bl	80048fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006108:	4b0a      	ldr	r3, [pc, #40]	; (8006134 <prvAddCurrentTaskToDelayedList+0xa4>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	429a      	cmp	r2, r3
 8006110:	d202      	bcs.n	8006118 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006112:	4a08      	ldr	r2, [pc, #32]	; (8006134 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	6013      	str	r3, [r2, #0]
}
 8006118:	bf00      	nop
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	20000bc4 	.word	0x20000bc4
 8006124:	200006ec 	.word	0x200006ec
 8006128:	20000bac 	.word	0x20000bac
 800612c:	20000b7c 	.word	0x20000b7c
 8006130:	20000b78 	.word	0x20000b78
 8006134:	20000be0 	.word	0x20000be0

08006138 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b08a      	sub	sp, #40	; 0x28
 800613c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800613e:	2300      	movs	r3, #0
 8006140:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006142:	f000 faff 	bl	8006744 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006146:	4b1c      	ldr	r3, [pc, #112]	; (80061b8 <xTimerCreateTimerTask+0x80>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d021      	beq.n	8006192 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800614e:	2300      	movs	r3, #0
 8006150:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006152:	2300      	movs	r3, #0
 8006154:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006156:	1d3a      	adds	r2, r7, #4
 8006158:	f107 0108 	add.w	r1, r7, #8
 800615c:	f107 030c 	add.w	r3, r7, #12
 8006160:	4618      	mov	r0, r3
 8006162:	f7fe fb61 	bl	8004828 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006166:	6879      	ldr	r1, [r7, #4]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	9202      	str	r2, [sp, #8]
 800616e:	9301      	str	r3, [sp, #4]
 8006170:	2302      	movs	r3, #2
 8006172:	9300      	str	r3, [sp, #0]
 8006174:	2300      	movs	r3, #0
 8006176:	460a      	mov	r2, r1
 8006178:	4910      	ldr	r1, [pc, #64]	; (80061bc <xTimerCreateTimerTask+0x84>)
 800617a:	4811      	ldr	r0, [pc, #68]	; (80061c0 <xTimerCreateTimerTask+0x88>)
 800617c:	f7ff f8f6 	bl	800536c <xTaskCreateStatic>
 8006180:	4602      	mov	r2, r0
 8006182:	4b10      	ldr	r3, [pc, #64]	; (80061c4 <xTimerCreateTimerTask+0x8c>)
 8006184:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006186:	4b0f      	ldr	r3, [pc, #60]	; (80061c4 <xTimerCreateTimerTask+0x8c>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800618e:	2301      	movs	r3, #1
 8006190:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d109      	bne.n	80061ac <xTimerCreateTimerTask+0x74>
 8006198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619c:	f383 8811 	msr	BASEPRI, r3
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	613b      	str	r3, [r7, #16]
 80061aa:	e7fe      	b.n	80061aa <xTimerCreateTimerTask+0x72>
	return xReturn;
 80061ac:	697b      	ldr	r3, [r7, #20]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20000c1c 	.word	0x20000c1c
 80061bc:	080070a4 	.word	0x080070a4
 80061c0:	080062f9 	.word	0x080062f9
 80061c4:	20000c20 	.word	0x20000c20

080061c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b08a      	sub	sp, #40	; 0x28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
 80061d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80061d6:	2300      	movs	r3, #0
 80061d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d109      	bne.n	80061f4 <xTimerGenericCommand+0x2c>
 80061e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	623b      	str	r3, [r7, #32]
 80061f2:	e7fe      	b.n	80061f2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80061f4:	4b19      	ldr	r3, [pc, #100]	; (800625c <xTimerGenericCommand+0x94>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d02a      	beq.n	8006252 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2b05      	cmp	r3, #5
 800620c:	dc18      	bgt.n	8006240 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800620e:	f7ff feb5 	bl	8005f7c <xTaskGetSchedulerState>
 8006212:	4603      	mov	r3, r0
 8006214:	2b02      	cmp	r3, #2
 8006216:	d109      	bne.n	800622c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006218:	4b10      	ldr	r3, [pc, #64]	; (800625c <xTimerGenericCommand+0x94>)
 800621a:	6818      	ldr	r0, [r3, #0]
 800621c:	f107 0110 	add.w	r1, r7, #16
 8006220:	2300      	movs	r3, #0
 8006222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006224:	f7fe fccc 	bl	8004bc0 <xQueueGenericSend>
 8006228:	6278      	str	r0, [r7, #36]	; 0x24
 800622a:	e012      	b.n	8006252 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800622c:	4b0b      	ldr	r3, [pc, #44]	; (800625c <xTimerGenericCommand+0x94>)
 800622e:	6818      	ldr	r0, [r3, #0]
 8006230:	f107 0110 	add.w	r1, r7, #16
 8006234:	2300      	movs	r3, #0
 8006236:	2200      	movs	r2, #0
 8006238:	f7fe fcc2 	bl	8004bc0 <xQueueGenericSend>
 800623c:	6278      	str	r0, [r7, #36]	; 0x24
 800623e:	e008      	b.n	8006252 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006240:	4b06      	ldr	r3, [pc, #24]	; (800625c <xTimerGenericCommand+0x94>)
 8006242:	6818      	ldr	r0, [r3, #0]
 8006244:	f107 0110 	add.w	r1, r7, #16
 8006248:	2300      	movs	r3, #0
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	f7fe fdb2 	bl	8004db4 <xQueueGenericSendFromISR>
 8006250:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006254:	4618      	mov	r0, r3
 8006256:	3728      	adds	r7, #40	; 0x28
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	20000c1c 	.word	0x20000c1c

08006260 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b088      	sub	sp, #32
 8006264:	af02      	add	r7, sp, #8
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800626a:	4b22      	ldr	r3, [pc, #136]	; (80062f4 <prvProcessExpiredTimer+0x94>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	3304      	adds	r3, #4
 8006278:	4618      	mov	r0, r3
 800627a:	f7fe fb79 	bl	8004970 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006284:	f003 0304 	and.w	r3, r3, #4
 8006288:	2b00      	cmp	r3, #0
 800628a:	d021      	beq.n	80062d0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	699a      	ldr	r2, [r3, #24]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	18d1      	adds	r1, r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	683a      	ldr	r2, [r7, #0]
 8006298:	6978      	ldr	r0, [r7, #20]
 800629a:	f000 f8d1 	bl	8006440 <prvInsertTimerInActiveList>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d01e      	beq.n	80062e2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062a4:	2300      	movs	r3, #0
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	2300      	movs	r3, #0
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	2100      	movs	r1, #0
 80062ae:	6978      	ldr	r0, [r7, #20]
 80062b0:	f7ff ff8a 	bl	80061c8 <xTimerGenericCommand>
 80062b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d112      	bne.n	80062e2 <prvProcessExpiredTimer+0x82>
 80062bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c0:	f383 8811 	msr	BASEPRI, r3
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	60fb      	str	r3, [r7, #12]
 80062ce:	e7fe      	b.n	80062ce <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062d6:	f023 0301 	bic.w	r3, r3, #1
 80062da:	b2da      	uxtb	r2, r3
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	6978      	ldr	r0, [r7, #20]
 80062e8:	4798      	blx	r3
}
 80062ea:	bf00      	nop
 80062ec:	3718      	adds	r7, #24
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	20000c14 	.word	0x20000c14

080062f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006300:	f107 0308 	add.w	r3, r7, #8
 8006304:	4618      	mov	r0, r3
 8006306:	f000 f857 	bl	80063b8 <prvGetNextExpireTime>
 800630a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	4619      	mov	r1, r3
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 f803 	bl	800631c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006316:	f000 f8d5 	bl	80064c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800631a:	e7f1      	b.n	8006300 <prvTimerTask+0x8>

0800631c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006326:	f7ff fa57 	bl	80057d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800632a:	f107 0308 	add.w	r3, r7, #8
 800632e:	4618      	mov	r0, r3
 8006330:	f000 f866 	bl	8006400 <prvSampleTimeNow>
 8006334:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d130      	bne.n	800639e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10a      	bne.n	8006358 <prvProcessTimerOrBlockTask+0x3c>
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	429a      	cmp	r2, r3
 8006348:	d806      	bhi.n	8006358 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800634a:	f7ff fa53 	bl	80057f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800634e:	68f9      	ldr	r1, [r7, #12]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7ff ff85 	bl	8006260 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006356:	e024      	b.n	80063a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d008      	beq.n	8006370 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800635e:	4b13      	ldr	r3, [pc, #76]	; (80063ac <prvProcessTimerOrBlockTask+0x90>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <prvProcessTimerOrBlockTask+0x50>
 8006368:	2301      	movs	r3, #1
 800636a:	e000      	b.n	800636e <prvProcessTimerOrBlockTask+0x52>
 800636c:	2300      	movs	r3, #0
 800636e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006370:	4b0f      	ldr	r3, [pc, #60]	; (80063b0 <prvProcessTimerOrBlockTask+0x94>)
 8006372:	6818      	ldr	r0, [r3, #0]
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	4619      	mov	r1, r3
 800637e:	f7fe ffc1 	bl	8005304 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006382:	f7ff fa37 	bl	80057f4 <xTaskResumeAll>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10a      	bne.n	80063a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800638c:	4b09      	ldr	r3, [pc, #36]	; (80063b4 <prvProcessTimerOrBlockTask+0x98>)
 800638e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	f3bf 8f6f 	isb	sy
}
 800639c:	e001      	b.n	80063a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800639e:	f7ff fa29 	bl	80057f4 <xTaskResumeAll>
}
 80063a2:	bf00      	nop
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	20000c18 	.word	0x20000c18
 80063b0:	20000c1c 	.word	0x20000c1c
 80063b4:	e000ed04 	.word	0xe000ed04

080063b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80063c0:	4b0e      	ldr	r3, [pc, #56]	; (80063fc <prvGetNextExpireTime+0x44>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <prvGetNextExpireTime+0x16>
 80063ca:	2201      	movs	r2, #1
 80063cc:	e000      	b.n	80063d0 <prvGetNextExpireTime+0x18>
 80063ce:	2200      	movs	r2, #0
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d105      	bne.n	80063e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063dc:	4b07      	ldr	r3, [pc, #28]	; (80063fc <prvGetNextExpireTime+0x44>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	60fb      	str	r3, [r7, #12]
 80063e6:	e001      	b.n	80063ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80063ec:	68fb      	ldr	r3, [r7, #12]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	20000c14 	.word	0x20000c14

08006400 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006408:	f7ff fa90 	bl	800592c <xTaskGetTickCount>
 800640c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800640e:	4b0b      	ldr	r3, [pc, #44]	; (800643c <prvSampleTimeNow+0x3c>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	429a      	cmp	r2, r3
 8006416:	d205      	bcs.n	8006424 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006418:	f000 f930 	bl	800667c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	601a      	str	r2, [r3, #0]
 8006422:	e002      	b.n	800642a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800642a:	4a04      	ldr	r2, [pc, #16]	; (800643c <prvSampleTimeNow+0x3c>)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006430:	68fb      	ldr	r3, [r7, #12]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	20000c24 	.word	0x20000c24

08006440 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
 800644c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800644e:	2300      	movs	r3, #0
 8006450:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	429a      	cmp	r2, r3
 8006464:	d812      	bhi.n	800648c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	1ad2      	subs	r2, r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	429a      	cmp	r2, r3
 8006472:	d302      	bcc.n	800647a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006474:	2301      	movs	r3, #1
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	e01b      	b.n	80064b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800647a:	4b10      	ldr	r3, [pc, #64]	; (80064bc <prvInsertTimerInActiveList+0x7c>)
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	3304      	adds	r3, #4
 8006482:	4619      	mov	r1, r3
 8006484:	4610      	mov	r0, r2
 8006486:	f7fe fa3a 	bl	80048fe <vListInsert>
 800648a:	e012      	b.n	80064b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	429a      	cmp	r2, r3
 8006492:	d206      	bcs.n	80064a2 <prvInsertTimerInActiveList+0x62>
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	429a      	cmp	r2, r3
 800649a:	d302      	bcc.n	80064a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800649c:	2301      	movs	r3, #1
 800649e:	617b      	str	r3, [r7, #20]
 80064a0:	e007      	b.n	80064b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064a2:	4b07      	ldr	r3, [pc, #28]	; (80064c0 <prvInsertTimerInActiveList+0x80>)
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	3304      	adds	r3, #4
 80064aa:	4619      	mov	r1, r3
 80064ac:	4610      	mov	r0, r2
 80064ae:	f7fe fa26 	bl	80048fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 80064b2:	697b      	ldr	r3, [r7, #20]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3718      	adds	r7, #24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	20000c18 	.word	0x20000c18
 80064c0:	20000c14 	.word	0x20000c14

080064c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b08e      	sub	sp, #56	; 0x38
 80064c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064ca:	e0c6      	b.n	800665a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	da17      	bge.n	8006502 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80064d2:	1d3b      	adds	r3, r7, #4
 80064d4:	3304      	adds	r3, #4
 80064d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80064d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d109      	bne.n	80064f2 <prvProcessReceivedCommands+0x2e>
 80064de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	61fb      	str	r3, [r7, #28]
 80064f0:	e7fe      	b.n	80064f0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80064f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064f8:	6850      	ldr	r0, [r2, #4]
 80064fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064fc:	6892      	ldr	r2, [r2, #8]
 80064fe:	4611      	mov	r1, r2
 8006500:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	f2c0 80a7 	blt.w	8006658 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800650e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d004      	beq.n	8006520 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006518:	3304      	adds	r3, #4
 800651a:	4618      	mov	r0, r3
 800651c:	f7fe fa28 	bl	8004970 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006520:	463b      	mov	r3, r7
 8006522:	4618      	mov	r0, r3
 8006524:	f7ff ff6c 	bl	8006400 <prvSampleTimeNow>
 8006528:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b09      	cmp	r3, #9
 800652e:	f200 8094 	bhi.w	800665a <prvProcessReceivedCommands+0x196>
 8006532:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <prvProcessReceivedCommands+0x74>)
 8006534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006538:	08006561 	.word	0x08006561
 800653c:	08006561 	.word	0x08006561
 8006540:	08006561 	.word	0x08006561
 8006544:	080065d3 	.word	0x080065d3
 8006548:	080065e7 	.word	0x080065e7
 800654c:	0800662f 	.word	0x0800662f
 8006550:	08006561 	.word	0x08006561
 8006554:	08006561 	.word	0x08006561
 8006558:	080065d3 	.word	0x080065d3
 800655c:	080065e7 	.word	0x080065e7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006562:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006566:	f043 0301 	orr.w	r3, r3, #1
 800656a:	b2da      	uxtb	r2, r3
 800656c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	18d1      	adds	r1, r2, r3
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800657e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006580:	f7ff ff5e 	bl	8006440 <prvInsertTimerInActiveList>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d067      	beq.n	800665a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800658a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006590:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006594:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006598:	f003 0304 	and.w	r3, r3, #4
 800659c:	2b00      	cmp	r3, #0
 800659e:	d05c      	beq.n	800665a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	441a      	add	r2, r3
 80065a8:	2300      	movs	r3, #0
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	2300      	movs	r3, #0
 80065ae:	2100      	movs	r1, #0
 80065b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065b2:	f7ff fe09 	bl	80061c8 <xTimerGenericCommand>
 80065b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d14d      	bne.n	800665a <prvProcessReceivedCommands+0x196>
 80065be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	61bb      	str	r3, [r7, #24]
 80065d0:	e7fe      	b.n	80065d0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065d8:	f023 0301 	bic.w	r3, r3, #1
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80065e4:	e039      	b.n	800665a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065ec:	f043 0301 	orr.w	r3, r3, #1
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80065fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d109      	bne.n	800661a <prvProcessReceivedCommands+0x156>
 8006606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660a:	f383 8811 	msr	BASEPRI, r3
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	617b      	str	r3, [r7, #20]
 8006618:	e7fe      	b.n	8006618 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800661a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661c:	699a      	ldr	r2, [r3, #24]
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	18d1      	adds	r1, r2, r3
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006628:	f7ff ff0a 	bl	8006440 <prvInsertTimerInActiveList>
					break;
 800662c:	e015      	b.n	800665a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800662e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006630:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b00      	cmp	r3, #0
 800663a:	d103      	bne.n	8006644 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800663c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800663e:	f000 fbc1 	bl	8006dc4 <vPortFree>
 8006642:	e00a      	b.n	800665a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800664a:	f023 0301 	bic.w	r3, r3, #1
 800664e:	b2da      	uxtb	r2, r3
 8006650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006652:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006656:	e000      	b.n	800665a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006658:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800665a:	4b07      	ldr	r3, [pc, #28]	; (8006678 <prvProcessReceivedCommands+0x1b4>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	1d39      	adds	r1, r7, #4
 8006660:	2200      	movs	r2, #0
 8006662:	4618      	mov	r0, r3
 8006664:	f7fe fc3a 	bl	8004edc <xQueueReceive>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	f47f af2e 	bne.w	80064cc <prvProcessReceivedCommands+0x8>
	}
}
 8006670:	bf00      	nop
 8006672:	3730      	adds	r7, #48	; 0x30
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	20000c1c 	.word	0x20000c1c

0800667c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b088      	sub	sp, #32
 8006680:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006682:	e047      	b.n	8006714 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006684:	4b2d      	ldr	r3, [pc, #180]	; (800673c <prvSwitchTimerLists+0xc0>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800668e:	4b2b      	ldr	r3, [pc, #172]	; (800673c <prvSwitchTimerLists+0xc0>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3304      	adds	r3, #4
 800669c:	4618      	mov	r0, r3
 800669e:	f7fe f967 	bl	8004970 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066b0:	f003 0304 	and.w	r3, r3, #4
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d02d      	beq.n	8006714 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	4413      	add	r3, r2
 80066c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d90e      	bls.n	80066e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066d6:	4b19      	ldr	r3, [pc, #100]	; (800673c <prvSwitchTimerLists+0xc0>)
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	3304      	adds	r3, #4
 80066de:	4619      	mov	r1, r3
 80066e0:	4610      	mov	r0, r2
 80066e2:	f7fe f90c 	bl	80048fe <vListInsert>
 80066e6:	e015      	b.n	8006714 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066e8:	2300      	movs	r3, #0
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	2300      	movs	r3, #0
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	2100      	movs	r1, #0
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f7ff fd68 	bl	80061c8 <xTimerGenericCommand>
 80066f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d109      	bne.n	8006714 <prvSwitchTimerLists+0x98>
 8006700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	603b      	str	r3, [r7, #0]
 8006712:	e7fe      	b.n	8006712 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006714:	4b09      	ldr	r3, [pc, #36]	; (800673c <prvSwitchTimerLists+0xc0>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1b2      	bne.n	8006684 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800671e:	4b07      	ldr	r3, [pc, #28]	; (800673c <prvSwitchTimerLists+0xc0>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006724:	4b06      	ldr	r3, [pc, #24]	; (8006740 <prvSwitchTimerLists+0xc4>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a04      	ldr	r2, [pc, #16]	; (800673c <prvSwitchTimerLists+0xc0>)
 800672a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800672c:	4a04      	ldr	r2, [pc, #16]	; (8006740 <prvSwitchTimerLists+0xc4>)
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	6013      	str	r3, [r2, #0]
}
 8006732:	bf00      	nop
 8006734:	3718      	adds	r7, #24
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	20000c14 	.word	0x20000c14
 8006740:	20000c18 	.word	0x20000c18

08006744 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800674a:	f000 f95f 	bl	8006a0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800674e:	4b15      	ldr	r3, [pc, #84]	; (80067a4 <prvCheckForValidListAndQueue+0x60>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d120      	bne.n	8006798 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006756:	4814      	ldr	r0, [pc, #80]	; (80067a8 <prvCheckForValidListAndQueue+0x64>)
 8006758:	f7fe f880 	bl	800485c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800675c:	4813      	ldr	r0, [pc, #76]	; (80067ac <prvCheckForValidListAndQueue+0x68>)
 800675e:	f7fe f87d 	bl	800485c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006762:	4b13      	ldr	r3, [pc, #76]	; (80067b0 <prvCheckForValidListAndQueue+0x6c>)
 8006764:	4a10      	ldr	r2, [pc, #64]	; (80067a8 <prvCheckForValidListAndQueue+0x64>)
 8006766:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006768:	4b12      	ldr	r3, [pc, #72]	; (80067b4 <prvCheckForValidListAndQueue+0x70>)
 800676a:	4a10      	ldr	r2, [pc, #64]	; (80067ac <prvCheckForValidListAndQueue+0x68>)
 800676c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800676e:	2300      	movs	r3, #0
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	4b11      	ldr	r3, [pc, #68]	; (80067b8 <prvCheckForValidListAndQueue+0x74>)
 8006774:	4a11      	ldr	r2, [pc, #68]	; (80067bc <prvCheckForValidListAndQueue+0x78>)
 8006776:	2110      	movs	r1, #16
 8006778:	200a      	movs	r0, #10
 800677a:	f7fe f98b 	bl	8004a94 <xQueueGenericCreateStatic>
 800677e:	4602      	mov	r2, r0
 8006780:	4b08      	ldr	r3, [pc, #32]	; (80067a4 <prvCheckForValidListAndQueue+0x60>)
 8006782:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006784:	4b07      	ldr	r3, [pc, #28]	; (80067a4 <prvCheckForValidListAndQueue+0x60>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d005      	beq.n	8006798 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800678c:	4b05      	ldr	r3, [pc, #20]	; (80067a4 <prvCheckForValidListAndQueue+0x60>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	490b      	ldr	r1, [pc, #44]	; (80067c0 <prvCheckForValidListAndQueue+0x7c>)
 8006792:	4618      	mov	r0, r3
 8006794:	f7fe fd8e 	bl	80052b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006798:	f000 f966 	bl	8006a68 <vPortExitCritical>
}
 800679c:	bf00      	nop
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	20000c1c 	.word	0x20000c1c
 80067a8:	20000bec 	.word	0x20000bec
 80067ac:	20000c00 	.word	0x20000c00
 80067b0:	20000c14 	.word	0x20000c14
 80067b4:	20000c18 	.word	0x20000c18
 80067b8:	20000cc8 	.word	0x20000cc8
 80067bc:	20000c28 	.word	0x20000c28
 80067c0:	080070ac 	.word	0x080070ac

080067c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	3b04      	subs	r3, #4
 80067d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80067dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	3b04      	subs	r3, #4
 80067e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f023 0201 	bic.w	r2, r3, #1
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	3b04      	subs	r3, #4
 80067f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067f4:	4a0c      	ldr	r2, [pc, #48]	; (8006828 <pxPortInitialiseStack+0x64>)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	3b14      	subs	r3, #20
 80067fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	3b04      	subs	r3, #4
 800680a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f06f 0202 	mvn.w	r2, #2
 8006812:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	3b20      	subs	r3, #32
 8006818:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800681a:	68fb      	ldr	r3, [r7, #12]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	0800682d 	.word	0x0800682d

0800682c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006832:	2300      	movs	r3, #0
 8006834:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006836:	4b11      	ldr	r3, [pc, #68]	; (800687c <prvTaskExitError+0x50>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683e:	d009      	beq.n	8006854 <prvTaskExitError+0x28>
 8006840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006844:	f383 8811 	msr	BASEPRI, r3
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	60fb      	str	r3, [r7, #12]
 8006852:	e7fe      	b.n	8006852 <prvTaskExitError+0x26>
 8006854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006858:	f383 8811 	msr	BASEPRI, r3
 800685c:	f3bf 8f6f 	isb	sy
 8006860:	f3bf 8f4f 	dsb	sy
 8006864:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006866:	bf00      	nop
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d0fc      	beq.n	8006868 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800686e:	bf00      	nop
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	20000010 	.word	0x20000010

08006880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006880:	4b07      	ldr	r3, [pc, #28]	; (80068a0 <pxCurrentTCBConst2>)
 8006882:	6819      	ldr	r1, [r3, #0]
 8006884:	6808      	ldr	r0, [r1, #0]
 8006886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800688a:	f380 8809 	msr	PSP, r0
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f04f 0000 	mov.w	r0, #0
 8006896:	f380 8811 	msr	BASEPRI, r0
 800689a:	4770      	bx	lr
 800689c:	f3af 8000 	nop.w

080068a0 <pxCurrentTCBConst2>:
 80068a0:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop

080068a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80068a8:	4808      	ldr	r0, [pc, #32]	; (80068cc <prvPortStartFirstTask+0x24>)
 80068aa:	6800      	ldr	r0, [r0, #0]
 80068ac:	6800      	ldr	r0, [r0, #0]
 80068ae:	f380 8808 	msr	MSP, r0
 80068b2:	f04f 0000 	mov.w	r0, #0
 80068b6:	f380 8814 	msr	CONTROL, r0
 80068ba:	b662      	cpsie	i
 80068bc:	b661      	cpsie	f
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	df00      	svc	0
 80068c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80068ca:	bf00      	nop
 80068cc:	e000ed08 	.word	0xe000ed08

080068d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80068d6:	4b44      	ldr	r3, [pc, #272]	; (80069e8 <xPortStartScheduler+0x118>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a44      	ldr	r2, [pc, #272]	; (80069ec <xPortStartScheduler+0x11c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d109      	bne.n	80068f4 <xPortStartScheduler+0x24>
 80068e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	613b      	str	r3, [r7, #16]
 80068f2:	e7fe      	b.n	80068f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80068f4:	4b3c      	ldr	r3, [pc, #240]	; (80069e8 <xPortStartScheduler+0x118>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a3d      	ldr	r2, [pc, #244]	; (80069f0 <xPortStartScheduler+0x120>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d109      	bne.n	8006912 <xPortStartScheduler+0x42>
 80068fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	60fb      	str	r3, [r7, #12]
 8006910:	e7fe      	b.n	8006910 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006912:	4b38      	ldr	r3, [pc, #224]	; (80069f4 <xPortStartScheduler+0x124>)
 8006914:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	b2db      	uxtb	r3, r3
 800691c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	22ff      	movs	r2, #255	; 0xff
 8006922:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	b2db      	uxtb	r3, r3
 800692a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800692c:	78fb      	ldrb	r3, [r7, #3]
 800692e:	b2db      	uxtb	r3, r3
 8006930:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006934:	b2da      	uxtb	r2, r3
 8006936:	4b30      	ldr	r3, [pc, #192]	; (80069f8 <xPortStartScheduler+0x128>)
 8006938:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800693a:	4b30      	ldr	r3, [pc, #192]	; (80069fc <xPortStartScheduler+0x12c>)
 800693c:	2207      	movs	r2, #7
 800693e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006940:	e009      	b.n	8006956 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006942:	4b2e      	ldr	r3, [pc, #184]	; (80069fc <xPortStartScheduler+0x12c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	3b01      	subs	r3, #1
 8006948:	4a2c      	ldr	r2, [pc, #176]	; (80069fc <xPortStartScheduler+0x12c>)
 800694a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800694c:	78fb      	ldrb	r3, [r7, #3]
 800694e:	b2db      	uxtb	r3, r3
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	b2db      	uxtb	r3, r3
 8006954:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006956:	78fb      	ldrb	r3, [r7, #3]
 8006958:	b2db      	uxtb	r3, r3
 800695a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800695e:	2b80      	cmp	r3, #128	; 0x80
 8006960:	d0ef      	beq.n	8006942 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006962:	4b26      	ldr	r3, [pc, #152]	; (80069fc <xPortStartScheduler+0x12c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f1c3 0307 	rsb	r3, r3, #7
 800696a:	2b04      	cmp	r3, #4
 800696c:	d009      	beq.n	8006982 <xPortStartScheduler+0xb2>
 800696e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	60bb      	str	r3, [r7, #8]
 8006980:	e7fe      	b.n	8006980 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006982:	4b1e      	ldr	r3, [pc, #120]	; (80069fc <xPortStartScheduler+0x12c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	021b      	lsls	r3, r3, #8
 8006988:	4a1c      	ldr	r2, [pc, #112]	; (80069fc <xPortStartScheduler+0x12c>)
 800698a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800698c:	4b1b      	ldr	r3, [pc, #108]	; (80069fc <xPortStartScheduler+0x12c>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006994:	4a19      	ldr	r2, [pc, #100]	; (80069fc <xPortStartScheduler+0x12c>)
 8006996:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	b2da      	uxtb	r2, r3
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80069a0:	4b17      	ldr	r3, [pc, #92]	; (8006a00 <xPortStartScheduler+0x130>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a16      	ldr	r2, [pc, #88]	; (8006a00 <xPortStartScheduler+0x130>)
 80069a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80069ac:	4b14      	ldr	r3, [pc, #80]	; (8006a00 <xPortStartScheduler+0x130>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a13      	ldr	r2, [pc, #76]	; (8006a00 <xPortStartScheduler+0x130>)
 80069b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80069b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80069b8:	f000 f8d6 	bl	8006b68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80069bc:	4b11      	ldr	r3, [pc, #68]	; (8006a04 <xPortStartScheduler+0x134>)
 80069be:	2200      	movs	r2, #0
 80069c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80069c2:	f000 f8f5 	bl	8006bb0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80069c6:	4b10      	ldr	r3, [pc, #64]	; (8006a08 <xPortStartScheduler+0x138>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a0f      	ldr	r2, [pc, #60]	; (8006a08 <xPortStartScheduler+0x138>)
 80069cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80069d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80069d2:	f7ff ff69 	bl	80068a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80069d6:	f7ff f871 	bl	8005abc <vTaskSwitchContext>
	prvTaskExitError();
 80069da:	f7ff ff27 	bl	800682c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3718      	adds	r7, #24
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	e000ed00 	.word	0xe000ed00
 80069ec:	410fc271 	.word	0x410fc271
 80069f0:	410fc270 	.word	0x410fc270
 80069f4:	e000e400 	.word	0xe000e400
 80069f8:	20000d18 	.word	0x20000d18
 80069fc:	20000d1c 	.word	0x20000d1c
 8006a00:	e000ed20 	.word	0xe000ed20
 8006a04:	20000010 	.word	0x20000010
 8006a08:	e000ef34 	.word	0xe000ef34

08006a0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a24:	4b0e      	ldr	r3, [pc, #56]	; (8006a60 <vPortEnterCritical+0x54>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	4a0d      	ldr	r2, [pc, #52]	; (8006a60 <vPortEnterCritical+0x54>)
 8006a2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a2e:	4b0c      	ldr	r3, [pc, #48]	; (8006a60 <vPortEnterCritical+0x54>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d10e      	bne.n	8006a54 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a36:	4b0b      	ldr	r3, [pc, #44]	; (8006a64 <vPortEnterCritical+0x58>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d009      	beq.n	8006a54 <vPortEnterCritical+0x48>
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	603b      	str	r3, [r7, #0]
 8006a52:	e7fe      	b.n	8006a52 <vPortEnterCritical+0x46>
	}
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	20000010 	.word	0x20000010
 8006a64:	e000ed04 	.word	0xe000ed04

08006a68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a6e:	4b11      	ldr	r3, [pc, #68]	; (8006ab4 <vPortExitCritical+0x4c>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d109      	bne.n	8006a8a <vPortExitCritical+0x22>
 8006a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7a:	f383 8811 	msr	BASEPRI, r3
 8006a7e:	f3bf 8f6f 	isb	sy
 8006a82:	f3bf 8f4f 	dsb	sy
 8006a86:	607b      	str	r3, [r7, #4]
 8006a88:	e7fe      	b.n	8006a88 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006a8a:	4b0a      	ldr	r3, [pc, #40]	; (8006ab4 <vPortExitCritical+0x4c>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	4a08      	ldr	r2, [pc, #32]	; (8006ab4 <vPortExitCritical+0x4c>)
 8006a92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a94:	4b07      	ldr	r3, [pc, #28]	; (8006ab4 <vPortExitCritical+0x4c>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d104      	bne.n	8006aa6 <vPortExitCritical+0x3e>
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006aa6:	bf00      	nop
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	20000010 	.word	0x20000010
	...

08006ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ac0:	f3ef 8009 	mrs	r0, PSP
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	4b15      	ldr	r3, [pc, #84]	; (8006b20 <pxCurrentTCBConst>)
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	f01e 0f10 	tst.w	lr, #16
 8006ad0:	bf08      	it	eq
 8006ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ada:	6010      	str	r0, [r2, #0]
 8006adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ae0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ae4:	f380 8811 	msr	BASEPRI, r0
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f7fe ffe4 	bl	8005abc <vTaskSwitchContext>
 8006af4:	f04f 0000 	mov.w	r0, #0
 8006af8:	f380 8811 	msr	BASEPRI, r0
 8006afc:	bc09      	pop	{r0, r3}
 8006afe:	6819      	ldr	r1, [r3, #0]
 8006b00:	6808      	ldr	r0, [r1, #0]
 8006b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b06:	f01e 0f10 	tst.w	lr, #16
 8006b0a:	bf08      	it	eq
 8006b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b10:	f380 8809 	msr	PSP, r0
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	f3af 8000 	nop.w

08006b20 <pxCurrentTCBConst>:
 8006b20:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b24:	bf00      	nop
 8006b26:	bf00      	nop

08006b28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b40:	f7fe ff04 	bl	800594c <xTaskIncrementTick>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d003      	beq.n	8006b52 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b4a:	4b06      	ldr	r3, [pc, #24]	; (8006b64 <SysTick_Handler+0x3c>)
 8006b4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	2300      	movs	r3, #0
 8006b54:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b5c:	bf00      	nop
 8006b5e:	3708      	adds	r7, #8
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	e000ed04 	.word	0xe000ed04

08006b68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b68:	b480      	push	{r7}
 8006b6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b6c:	4b0b      	ldr	r3, [pc, #44]	; (8006b9c <vPortSetupTimerInterrupt+0x34>)
 8006b6e:	2200      	movs	r2, #0
 8006b70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b72:	4b0b      	ldr	r3, [pc, #44]	; (8006ba0 <vPortSetupTimerInterrupt+0x38>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b78:	4b0a      	ldr	r3, [pc, #40]	; (8006ba4 <vPortSetupTimerInterrupt+0x3c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a0a      	ldr	r2, [pc, #40]	; (8006ba8 <vPortSetupTimerInterrupt+0x40>)
 8006b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b82:	099b      	lsrs	r3, r3, #6
 8006b84:	4a09      	ldr	r2, [pc, #36]	; (8006bac <vPortSetupTimerInterrupt+0x44>)
 8006b86:	3b01      	subs	r3, #1
 8006b88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b8a:	4b04      	ldr	r3, [pc, #16]	; (8006b9c <vPortSetupTimerInterrupt+0x34>)
 8006b8c:	2207      	movs	r2, #7
 8006b8e:	601a      	str	r2, [r3, #0]
}
 8006b90:	bf00      	nop
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	e000e010 	.word	0xe000e010
 8006ba0:	e000e018 	.word	0xe000e018
 8006ba4:	20000004 	.word	0x20000004
 8006ba8:	10624dd3 	.word	0x10624dd3
 8006bac:	e000e014 	.word	0xe000e014

08006bb0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006bb0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006bc0 <vPortEnableVFP+0x10>
 8006bb4:	6801      	ldr	r1, [r0, #0]
 8006bb6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006bba:	6001      	str	r1, [r0, #0]
 8006bbc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006bbe:	bf00      	nop
 8006bc0:	e000ed88 	.word	0xe000ed88

08006bc4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006bca:	f3ef 8305 	mrs	r3, IPSR
 8006bce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2b0f      	cmp	r3, #15
 8006bd4:	d913      	bls.n	8006bfe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006bd6:	4a16      	ldr	r2, [pc, #88]	; (8006c30 <vPortValidateInterruptPriority+0x6c>)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4413      	add	r3, r2
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006be0:	4b14      	ldr	r3, [pc, #80]	; (8006c34 <vPortValidateInterruptPriority+0x70>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	7afa      	ldrb	r2, [r7, #11]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d209      	bcs.n	8006bfe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	607b      	str	r3, [r7, #4]
 8006bfc:	e7fe      	b.n	8006bfc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006bfe:	4b0e      	ldr	r3, [pc, #56]	; (8006c38 <vPortValidateInterruptPriority+0x74>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c06:	4b0d      	ldr	r3, [pc, #52]	; (8006c3c <vPortValidateInterruptPriority+0x78>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d909      	bls.n	8006c22 <vPortValidateInterruptPriority+0x5e>
 8006c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	603b      	str	r3, [r7, #0]
 8006c20:	e7fe      	b.n	8006c20 <vPortValidateInterruptPriority+0x5c>
	}
 8006c22:	bf00      	nop
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	e000e3f0 	.word	0xe000e3f0
 8006c34:	20000d18 	.word	0x20000d18
 8006c38:	e000ed0c 	.word	0xe000ed0c
 8006c3c:	20000d1c 	.word	0x20000d1c

08006c40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b08a      	sub	sp, #40	; 0x28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c4c:	f7fe fdc4 	bl	80057d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c50:	4b57      	ldr	r3, [pc, #348]	; (8006db0 <pvPortMalloc+0x170>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c58:	f000 f90c 	bl	8006e74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c5c:	4b55      	ldr	r3, [pc, #340]	; (8006db4 <pvPortMalloc+0x174>)
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4013      	ands	r3, r2
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f040 808c 	bne.w	8006d82 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d01c      	beq.n	8006caa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006c70:	2208      	movs	r2, #8
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4413      	add	r3, r2
 8006c76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f003 0307 	and.w	r3, r3, #7
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d013      	beq.n	8006caa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f023 0307 	bic.w	r3, r3, #7
 8006c88:	3308      	adds	r3, #8
 8006c8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f003 0307 	and.w	r3, r3, #7
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d009      	beq.n	8006caa <pvPortMalloc+0x6a>
 8006c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	617b      	str	r3, [r7, #20]
 8006ca8:	e7fe      	b.n	8006ca8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d068      	beq.n	8006d82 <pvPortMalloc+0x142>
 8006cb0:	4b41      	ldr	r3, [pc, #260]	; (8006db8 <pvPortMalloc+0x178>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d863      	bhi.n	8006d82 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006cba:	4b40      	ldr	r3, [pc, #256]	; (8006dbc <pvPortMalloc+0x17c>)
 8006cbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006cbe:	4b3f      	ldr	r3, [pc, #252]	; (8006dbc <pvPortMalloc+0x17c>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cc4:	e004      	b.n	8006cd0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d903      	bls.n	8006ce2 <pvPortMalloc+0xa2>
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1f1      	bne.n	8006cc6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ce2:	4b33      	ldr	r3, [pc, #204]	; (8006db0 <pvPortMalloc+0x170>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d04a      	beq.n	8006d82 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006cec:	6a3b      	ldr	r3, [r7, #32]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2208      	movs	r2, #8
 8006cf2:	4413      	add	r3, r2
 8006cf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	6a3b      	ldr	r3, [r7, #32]
 8006cfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	1ad2      	subs	r2, r2, r3
 8006d06:	2308      	movs	r3, #8
 8006d08:	005b      	lsls	r3, r3, #1
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d91e      	bls.n	8006d4c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4413      	add	r3, r2
 8006d14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	f003 0307 	and.w	r3, r3, #7
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d009      	beq.n	8006d34 <pvPortMalloc+0xf4>
 8006d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d24:	f383 8811 	msr	BASEPRI, r3
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	613b      	str	r3, [r7, #16]
 8006d32:	e7fe      	b.n	8006d32 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	1ad2      	subs	r2, r2, r3
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d46:	69b8      	ldr	r0, [r7, #24]
 8006d48:	f000 f8f6 	bl	8006f38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d4c:	4b1a      	ldr	r3, [pc, #104]	; (8006db8 <pvPortMalloc+0x178>)
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	4a18      	ldr	r2, [pc, #96]	; (8006db8 <pvPortMalloc+0x178>)
 8006d58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d5a:	4b17      	ldr	r3, [pc, #92]	; (8006db8 <pvPortMalloc+0x178>)
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	4b18      	ldr	r3, [pc, #96]	; (8006dc0 <pvPortMalloc+0x180>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d203      	bcs.n	8006d6e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d66:	4b14      	ldr	r3, [pc, #80]	; (8006db8 <pvPortMalloc+0x178>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a15      	ldr	r2, [pc, #84]	; (8006dc0 <pvPortMalloc+0x180>)
 8006d6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d70:	685a      	ldr	r2, [r3, #4]
 8006d72:	4b10      	ldr	r3, [pc, #64]	; (8006db4 <pvPortMalloc+0x174>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	431a      	orrs	r2, r3
 8006d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	2200      	movs	r2, #0
 8006d80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d82:	f7fe fd37 	bl	80057f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	f003 0307 	and.w	r3, r3, #7
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d009      	beq.n	8006da4 <pvPortMalloc+0x164>
 8006d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	60fb      	str	r3, [r7, #12]
 8006da2:	e7fe      	b.n	8006da2 <pvPortMalloc+0x162>
	return pvReturn;
 8006da4:	69fb      	ldr	r3, [r7, #28]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3728      	adds	r7, #40	; 0x28
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	200018e0 	.word	0x200018e0
 8006db4:	200018ec 	.word	0x200018ec
 8006db8:	200018e4 	.word	0x200018e4
 8006dbc:	200018d8 	.word	0x200018d8
 8006dc0:	200018e8 	.word	0x200018e8

08006dc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d046      	beq.n	8006e64 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006dd6:	2308      	movs	r3, #8
 8006dd8:	425b      	negs	r3, r3
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	4413      	add	r3, r2
 8006dde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	685a      	ldr	r2, [r3, #4]
 8006de8:	4b20      	ldr	r3, [pc, #128]	; (8006e6c <vPortFree+0xa8>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4013      	ands	r3, r2
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d109      	bne.n	8006e06 <vPortFree+0x42>
 8006df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	e7fe      	b.n	8006e04 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d009      	beq.n	8006e22 <vPortFree+0x5e>
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	60bb      	str	r3, [r7, #8]
 8006e20:	e7fe      	b.n	8006e20 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	4b11      	ldr	r3, [pc, #68]	; (8006e6c <vPortFree+0xa8>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d019      	beq.n	8006e64 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d115      	bne.n	8006e64 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	4b0b      	ldr	r3, [pc, #44]	; (8006e6c <vPortFree+0xa8>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	43db      	mvns	r3, r3
 8006e42:	401a      	ands	r2, r3
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e48:	f7fe fcc6 	bl	80057d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <vPortFree+0xac>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4413      	add	r3, r2
 8006e56:	4a06      	ldr	r2, [pc, #24]	; (8006e70 <vPortFree+0xac>)
 8006e58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e5a:	6938      	ldr	r0, [r7, #16]
 8006e5c:	f000 f86c 	bl	8006f38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006e60:	f7fe fcc8 	bl	80057f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e64:	bf00      	nop
 8006e66:	3718      	adds	r7, #24
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	200018ec 	.word	0x200018ec
 8006e70:	200018e4 	.word	0x200018e4

08006e74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e7a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006e7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e80:	4b27      	ldr	r3, [pc, #156]	; (8006f20 <prvHeapInit+0xac>)
 8006e82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f003 0307 	and.w	r3, r3, #7
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00c      	beq.n	8006ea8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3307      	adds	r3, #7
 8006e92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f023 0307 	bic.w	r3, r3, #7
 8006e9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	4a1f      	ldr	r2, [pc, #124]	; (8006f20 <prvHeapInit+0xac>)
 8006ea4:	4413      	add	r3, r2
 8006ea6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006eac:	4a1d      	ldr	r2, [pc, #116]	; (8006f24 <prvHeapInit+0xb0>)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006eb2:	4b1c      	ldr	r3, [pc, #112]	; (8006f24 <prvHeapInit+0xb0>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ec0:	2208      	movs	r2, #8
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	1a9b      	subs	r3, r3, r2
 8006ec6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f023 0307 	bic.w	r3, r3, #7
 8006ece:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4a15      	ldr	r2, [pc, #84]	; (8006f28 <prvHeapInit+0xb4>)
 8006ed4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ed6:	4b14      	ldr	r3, [pc, #80]	; (8006f28 <prvHeapInit+0xb4>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2200      	movs	r2, #0
 8006edc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ede:	4b12      	ldr	r3, [pc, #72]	; (8006f28 <prvHeapInit+0xb4>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	1ad2      	subs	r2, r2, r3
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ef4:	4b0c      	ldr	r3, [pc, #48]	; (8006f28 <prvHeapInit+0xb4>)
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	4a0a      	ldr	r2, [pc, #40]	; (8006f2c <prvHeapInit+0xb8>)
 8006f02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	4a09      	ldr	r2, [pc, #36]	; (8006f30 <prvHeapInit+0xbc>)
 8006f0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f0c:	4b09      	ldr	r3, [pc, #36]	; (8006f34 <prvHeapInit+0xc0>)
 8006f0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f12:	601a      	str	r2, [r3, #0]
}
 8006f14:	bf00      	nop
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	20000d20 	.word	0x20000d20
 8006f24:	200018d8 	.word	0x200018d8
 8006f28:	200018e0 	.word	0x200018e0
 8006f2c:	200018e8 	.word	0x200018e8
 8006f30:	200018e4 	.word	0x200018e4
 8006f34:	200018ec 	.word	0x200018ec

08006f38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f40:	4b28      	ldr	r3, [pc, #160]	; (8006fe4 <prvInsertBlockIntoFreeList+0xac>)
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	e002      	b.n	8006f4c <prvInsertBlockIntoFreeList+0x14>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	60fb      	str	r3, [r7, #12]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d8f7      	bhi.n	8006f46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	4413      	add	r3, r2
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d108      	bne.n	8006f7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	441a      	add	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	441a      	add	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d118      	bne.n	8006fc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	4b15      	ldr	r3, [pc, #84]	; (8006fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d00d      	beq.n	8006fb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	441a      	add	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	e008      	b.n	8006fc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006fb6:	4b0c      	ldr	r3, [pc, #48]	; (8006fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	e003      	b.n	8006fc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d002      	beq.n	8006fd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fd6:	bf00      	nop
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	200018d8 	.word	0x200018d8
 8006fe8:	200018e0 	.word	0x200018e0

08006fec <__libc_init_array>:
 8006fec:	b570      	push	{r4, r5, r6, lr}
 8006fee:	4e0d      	ldr	r6, [pc, #52]	; (8007024 <__libc_init_array+0x38>)
 8006ff0:	4c0d      	ldr	r4, [pc, #52]	; (8007028 <__libc_init_array+0x3c>)
 8006ff2:	1ba4      	subs	r4, r4, r6
 8006ff4:	10a4      	asrs	r4, r4, #2
 8006ff6:	2500      	movs	r5, #0
 8006ff8:	42a5      	cmp	r5, r4
 8006ffa:	d109      	bne.n	8007010 <__libc_init_array+0x24>
 8006ffc:	4e0b      	ldr	r6, [pc, #44]	; (800702c <__libc_init_array+0x40>)
 8006ffe:	4c0c      	ldr	r4, [pc, #48]	; (8007030 <__libc_init_array+0x44>)
 8007000:	f000 f82c 	bl	800705c <_init>
 8007004:	1ba4      	subs	r4, r4, r6
 8007006:	10a4      	asrs	r4, r4, #2
 8007008:	2500      	movs	r5, #0
 800700a:	42a5      	cmp	r5, r4
 800700c:	d105      	bne.n	800701a <__libc_init_array+0x2e>
 800700e:	bd70      	pop	{r4, r5, r6, pc}
 8007010:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007014:	4798      	blx	r3
 8007016:	3501      	adds	r5, #1
 8007018:	e7ee      	b.n	8006ff8 <__libc_init_array+0xc>
 800701a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800701e:	4798      	blx	r3
 8007020:	3501      	adds	r5, #1
 8007022:	e7f2      	b.n	800700a <__libc_init_array+0x1e>
 8007024:	0800714c 	.word	0x0800714c
 8007028:	0800714c 	.word	0x0800714c
 800702c:	0800714c 	.word	0x0800714c
 8007030:	08007150 	.word	0x08007150

08007034 <memcpy>:
 8007034:	b510      	push	{r4, lr}
 8007036:	1e43      	subs	r3, r0, #1
 8007038:	440a      	add	r2, r1
 800703a:	4291      	cmp	r1, r2
 800703c:	d100      	bne.n	8007040 <memcpy+0xc>
 800703e:	bd10      	pop	{r4, pc}
 8007040:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007044:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007048:	e7f7      	b.n	800703a <memcpy+0x6>

0800704a <memset>:
 800704a:	4402      	add	r2, r0
 800704c:	4603      	mov	r3, r0
 800704e:	4293      	cmp	r3, r2
 8007050:	d100      	bne.n	8007054 <memset+0xa>
 8007052:	4770      	bx	lr
 8007054:	f803 1b01 	strb.w	r1, [r3], #1
 8007058:	e7f9      	b.n	800704e <memset+0x4>
	...

0800705c <_init>:
 800705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705e:	bf00      	nop
 8007060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007062:	bc08      	pop	{r3}
 8007064:	469e      	mov	lr, r3
 8007066:	4770      	bx	lr

08007068 <_fini>:
 8007068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706a:	bf00      	nop
 800706c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800706e:	bc08      	pop	{r3}
 8007070:	469e      	mov	lr, r3
 8007072:	4770      	bx	lr
