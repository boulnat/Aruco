
ILD6150-PCA9685.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08007114  08007114  00017114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071d8  080071d8  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080071d8  080071d8  000171d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071e0  080071e0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071e0  080071e0  000171e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071e4  080071e4  000171e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080071e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af8  20000018  08007200  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b10  08007200  00021b10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020e4b  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003993  00000000  00000000  00040e93  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b08  00000000  00000000  00044828  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001960  00000000  00000000  00046330  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003b26  00000000  00000000  00047c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000154f1  00000000  00000000  0004b7b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7b9e  00000000  00000000  00060ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00138845  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072f0  00000000  00000000  001388c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080070fc 	.word	0x080070fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	080070fc 	.word	0x080070fc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fd77 	bl	8000fc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f82c 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f966 	bl	80007ac <MX_GPIO_Init>
  MX_DMA_Init();
 80004e0:	f000 f93e 	bl	8000760 <MX_DMA_Init>
  MX_I2C1_Init();
 80004e4:	f000 f8cc 	bl	8000680 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f908 	bl	80006fc <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80004ec:	f000 f894 	bl	8000618 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f0:	f004 f88e 	bl	8004610 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f4:	4a09      	ldr	r2, [pc, #36]	; (800051c <main+0x4c>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	4809      	ldr	r0, [pc, #36]	; (8000520 <main+0x50>)
 80004fa:	f004 f8f3 	bl	80046e4 <osThreadNew>
 80004fe:	4602      	mov	r2, r0
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <main+0x54>)
 8000502:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  comUsartTaskHandle = osThreadNew(ComUsartTask, NULL, &comUsartTask_attributes);
 8000504:	4a08      	ldr	r2, [pc, #32]	; (8000528 <main+0x58>)
 8000506:	2100      	movs	r1, #0
 8000508:	4808      	ldr	r0, [pc, #32]	; (800052c <main+0x5c>)
 800050a:	f004 f8eb 	bl	80046e4 <osThreadNew>
 800050e:	4602      	mov	r2, r0
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <main+0x60>)
 8000512:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000514:	f004 f8b0 	bl	8004678 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000518:	e7fe      	b.n	8000518 <main+0x48>
 800051a:	bf00      	nop
 800051c:	08007148 	.word	0x08007148
 8000520:	08000b1d 	.word	0x08000b1d
 8000524:	200018f4 	.word	0x200018f4
 8000528:	0800716c 	.word	0x0800716c
 800052c:	08000a7d 	.word	0x08000a7d
 8000530:	20001a7c 	.word	0x20001a7c

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b0ac      	sub	sp, #176	; 0xb0
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800053e:	2244      	movs	r2, #68	; 0x44
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f006 fdd1 	bl	80070ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2254      	movs	r2, #84	; 0x54
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f006 fdc3 	bl	80070ea <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000564:	f001 fe6a 	bl	800223c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000568:	4b2a      	ldr	r3, [pc, #168]	; (8000614 <SystemClock_Config+0xe0>)
 800056a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800056e:	4a29      	ldr	r2, [pc, #164]	; (8000614 <SystemClock_Config+0xe0>)
 8000570:	f023 0318 	bic.w	r3, r3, #24
 8000574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000578:	2314      	movs	r3, #20
 800057a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800058c:	2360      	movs	r3, #96	; 0x60
 800058e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000592:	2300      	movs	r3, #0
 8000594:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800059c:	4618      	mov	r0, r3
 800059e:	f001 fec1 	bl	8002324 <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005a8:	f000 fad4 	bl	8000b54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005b0:	2300      	movs	r3, #0
 80005b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 facc 	bl	8002b64 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005d2:	f000 fabf 	bl	8000b54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80005d6:	2342      	movs	r3, #66	; 0x42
 80005d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80005da:	2304      	movs	r3, #4
 80005dc:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005de:	2300      	movs	r3, #0
 80005e0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 fcf1 	bl	8002fcc <HAL_RCCEx_PeriphCLKConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005f0:	f000 fab0 	bl	8000b54 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f8:	f001 fe3e 	bl	8002278 <HAL_PWREx_ControlVoltageScaling>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000602:	f000 faa7 	bl	8000b54 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000606:	f002 fed3 	bl	80033b0 <HAL_RCCEx_EnableMSIPLLMode>
}
 800060a:	bf00      	nop
 800060c:	37b0      	adds	r7, #176	; 0xb0
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000

08000618 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800061c:	4b16      	ldr	r3, [pc, #88]	; (8000678 <MX_CAN1_Init+0x60>)
 800061e:	4a17      	ldr	r2, [pc, #92]	; (800067c <MX_CAN1_Init+0x64>)
 8000620:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_CAN1_Init+0x60>)
 8000624:	2210      	movs	r2, #16
 8000626:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MX_CAN1_Init+0x60>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <MX_CAN1_Init+0x60>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000634:	4b10      	ldr	r3, [pc, #64]	; (8000678 <MX_CAN1_Init+0x60>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_CAN1_Init+0x60>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000640:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <MX_CAN1_Init+0x60>)
 8000642:	2200      	movs	r2, #0
 8000644:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_CAN1_Init+0x60>)
 8000648:	2200      	movs	r2, #0
 800064a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <MX_CAN1_Init+0x60>)
 800064e:	2200      	movs	r2, #0
 8000650:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_CAN1_Init+0x60>)
 8000654:	2200      	movs	r2, #0
 8000656:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000658:	4b07      	ldr	r3, [pc, #28]	; (8000678 <MX_CAN1_Init+0x60>)
 800065a:	2200      	movs	r2, #0
 800065c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_CAN1_Init+0x60>)
 8000660:	2200      	movs	r2, #0
 8000662:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <MX_CAN1_Init+0x60>)
 8000666:	f000 fce7 	bl	8001038 <HAL_CAN_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000670:	f000 fa70 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20001a54 	.word	0x20001a54
 800067c:	40006400 	.word	0x40006400

08000680 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_I2C1_Init+0x74>)
 8000686:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <MX_I2C1_Init+0x78>)
 8000688:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800068a:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_I2C1_Init+0x74>)
 800068c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000690:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <MX_I2C1_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_I2C1_Init+0x74>)
 800069a:	2201      	movs	r2, #1
 800069c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006bc:	480d      	ldr	r0, [pc, #52]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006be:	f001 fa2d 	bl	8001b1c <HAL_I2C_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c8:	f000 fa44 	bl	8000b54 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006cc:	2100      	movs	r1, #0
 80006ce:	4809      	ldr	r0, [pc, #36]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006d0:	f001 fd1c 	bl	800210c <HAL_I2CEx_ConfigAnalogFilter>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006da:	f000 fa3b 	bl	8000b54 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006de:	2100      	movs	r1, #0
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_I2C1_Init+0x74>)
 80006e2:	f001 fd5e 	bl	80021a2 <HAL_I2CEx_ConfigDigitalFilter>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006ec:	f000 fa32 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20001940 	.word	0x20001940
 80006f8:	40005400 	.word	0x40005400

080006fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000702:	4a16      	ldr	r2, [pc, #88]	; (800075c <MX_USART2_UART_Init+0x60>)
 8000704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000714:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000716:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800071a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 800071e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000744:	f003 f9b4 	bl	8003ab0 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 800074e:	f000 fa01 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200019d4 	.word	0x200019d4
 800075c:	40004400 	.word	0x40004400

08000760 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_DMA_Init+0x48>)
 8000768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800076a:	4a0f      	ldr	r2, [pc, #60]	; (80007a8 <MX_DMA_Init+0x48>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6493      	str	r3, [r2, #72]	; 0x48
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <MX_DMA_Init+0x48>)
 8000774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2105      	movs	r1, #5
 8000782:	2010      	movs	r0, #16
 8000784:	f000 fe0c 	bl	80013a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000788:	2010      	movs	r0, #16
 800078a:	f000 fe25 	bl	80013d8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2105      	movs	r1, #5
 8000792:	2011      	movs	r0, #17
 8000794:	f000 fe04 	bl	80013a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000798:	2011      	movs	r0, #17
 800079a:	f000 fe1d 	bl	80013d8 <HAL_NVIC_EnableIRQ>

}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a16      	ldr	r2, [pc, #88]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	4a10      	ldr	r2, [pc, #64]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_GPIO_Init+0x8c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2108      	movs	r1, #8
 800080e:	480b      	ldr	r0, [pc, #44]	; (800083c <MX_GPIO_Init+0x90>)
 8000810:	f001 f952 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000814:	2308      	movs	r3, #8
 8000816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	4619      	mov	r1, r3
 800082a:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_GPIO_Init+0x90>)
 800082c:	f000 ffda 	bl	80017e4 <HAL_GPIO_Init>

}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40021000 	.word	0x40021000
 800083c:	48000400 	.word	0x48000400

08000840 <pca9685_init>:
	//HAL_I2C_Master_Receive(hi2c,address,res,1,1);
	return res;
}

void pca9685_init(I2C_HandleTypeDef *hi2c, uint8_t address)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af02      	add	r7, sp, #8
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	460b      	mov	r3, r1
 800084a:	70fb      	strb	r3, [r7, #3]
 #define PCA9685_MODE1 0x00
 uint8_t initStruct[2];
 uint8_t prescale = 0x03; // hardcoded
 800084c:	2303      	movs	r3, #3
 800084e:	73fb      	strb	r3, [r7, #15]
 HAL_I2C_Master_Transmit(hi2c, address, PCA9685_MODE1, 1, 1);
 8000850:	78fb      	ldrb	r3, [r7, #3]
 8000852:	b299      	uxth	r1, r3
 8000854:	2301      	movs	r3, #1
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	2301      	movs	r3, #1
 800085a:	2200      	movs	r2, #0
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f001 f9ed 	bl	8001c3c <HAL_I2C_Master_Transmit>
 uint8_t oldmode = 0x00; // hardcoded
 8000862:	2300      	movs	r3, #0
 8000864:	73bb      	strb	r3, [r7, #14]
 //uint8_t oldmode = PCA9685_read(hi2c,address,PCA9685_MODE1);
 // HAL_I2C_Master_Receive(hi2c, address, &oldmode, 1, 1);
 uint8_t newmode = ((oldmode & 0x7F) | 0x10);
 8000866:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800086a:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800086e:	b25b      	sxtb	r3, r3
 8000870:	f043 0310 	orr.w	r3, r3, #16
 8000874:	b25b      	sxtb	r3, r3
 8000876:	737b      	strb	r3, [r7, #13]
 initStruct[0] = PCA9685_MODE1;
 8000878:	2300      	movs	r3, #0
 800087a:	723b      	strb	r3, [r7, #8]
 initStruct[1] = newmode;
 800087c:	7b7b      	ldrb	r3, [r7, #13]
 800087e:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(hi2c, address, initStruct, 2, 1);
 8000880:	78fb      	ldrb	r3, [r7, #3]
 8000882:	b299      	uxth	r1, r3
 8000884:	f107 0208 	add.w	r2, r7, #8
 8000888:	2301      	movs	r3, #1
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	2302      	movs	r3, #2
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f001 f9d4 	bl	8001c3c <HAL_I2C_Master_Transmit>
 //initStruct[0] = 0xFE;
 initStruct[1] = prescale;
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(hi2c, address, initStruct, 2, 1);
 8000898:	78fb      	ldrb	r3, [r7, #3]
 800089a:	b299      	uxth	r1, r3
 800089c:	f107 0208 	add.w	r2, r7, #8
 80008a0:	2301      	movs	r3, #1
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2302      	movs	r3, #2
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f001 f9c8 	bl	8001c3c <HAL_I2C_Master_Transmit>
 //initStruct[0] = PCA9685_MODE1;
 initStruct[1] = oldmode;
 80008ac:	7bbb      	ldrb	r3, [r7, #14]
 80008ae:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(hi2c, address, initStruct, 2, 1);
 80008b0:	78fb      	ldrb	r3, [r7, #3]
 80008b2:	b299      	uxth	r1, r3
 80008b4:	f107 0208 	add.w	r2, r7, #8
 80008b8:	2301      	movs	r3, #1
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2302      	movs	r3, #2
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f001 f9bc 	bl	8001c3c <HAL_I2C_Master_Transmit>
 osDelay(5);
 80008c4:	2005      	movs	r0, #5
 80008c6:	f003 ffb3 	bl	8004830 <osDelay>
 initStruct[1] = (oldmode | 0xA1);
 80008ca:	7bbb      	ldrb	r3, [r7, #14]
 80008cc:	f063 035e 	orn	r3, r3, #94	; 0x5e
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	727b      	strb	r3, [r7, #9]
 HAL_I2C_Master_Transmit(hi2c, address, initStruct, 2, 1);
 80008d4:	78fb      	ldrb	r3, [r7, #3]
 80008d6:	b299      	uxth	r1, r3
 80008d8:	f107 0208 	add.w	r2, r7, #8
 80008dc:	2301      	movs	r3, #1
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	2302      	movs	r3, #2
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f001 f9aa 	bl	8001c3c <HAL_I2C_Master_Transmit>
}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <pca9685_mult_pwm>:
	uint8_t outputBuffer[] = {0x06 + 4*num, on, (on >> 8), off, (off >> 8)};
	HAL_I2C_Master_Transmit(hi2c, address, outputBuffer, sizeof(outputBuffer), 1);
}

void pca9685_mult_pwm(I2C_HandleTypeDef *hi2c, uint8_t address, uint16_t num, uint16_t on, uint16_t off)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	; 0x30
 80008f4:	af02      	add	r7, sp, #8
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	4608      	mov	r0, r1
 80008fa:	4611      	mov	r1, r2
 80008fc:	461a      	mov	r2, r3
 80008fe:	4603      	mov	r3, r0
 8000900:	72fb      	strb	r3, [r7, #11]
 8000902:	460b      	mov	r3, r1
 8000904:	813b      	strh	r3, [r7, #8]
 8000906:	4613      	mov	r3, r2
 8000908:	80fb      	strh	r3, [r7, #6]
	int i, iter;

	for (i=1, iter=1; i<65535; i<<=1, iter++)
 800090a:	2301      	movs	r3, #1
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
 800090e:	2301      	movs	r3, #1
 8000910:	623b      	str	r3, [r7, #32]
 8000912:	e047      	b.n	80009a4 <pca9685_mult_pwm+0xb4>
	{
		if (num & i)
 8000914:	893a      	ldrh	r2, [r7, #8]
 8000916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000918:	4013      	ands	r3, r2
 800091a:	2b00      	cmp	r3, #0
 800091c:	d022      	beq.n	8000964 <pca9685_mult_pwm+0x74>
		{
			uint8_t outputBuffer[] = {0x06 + 4*((iter)-1), on, (on >> 8), off, (off >> 8)};
 800091e:	6a3b      	ldr	r3, [r7, #32]
 8000920:	3b01      	subs	r3, #1
 8000922:	b2db      	uxtb	r3, r3
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	b2db      	uxtb	r3, r3
 8000928:	3306      	adds	r3, #6
 800092a:	b2db      	uxtb	r3, r3
 800092c:	763b      	strb	r3, [r7, #24]
 800092e:	88fb      	ldrh	r3, [r7, #6]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	767b      	strb	r3, [r7, #25]
 8000934:	88fb      	ldrh	r3, [r7, #6]
 8000936:	0a1b      	lsrs	r3, r3, #8
 8000938:	b29b      	uxth	r3, r3
 800093a:	b2db      	uxtb	r3, r3
 800093c:	76bb      	strb	r3, [r7, #26]
 800093e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000940:	b2db      	uxtb	r3, r3
 8000942:	76fb      	strb	r3, [r7, #27]
 8000944:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000946:	0a1b      	lsrs	r3, r3, #8
 8000948:	b29b      	uxth	r3, r3
 800094a:	b2db      	uxtb	r3, r3
 800094c:	773b      	strb	r3, [r7, #28]
			HAL_I2C_Master_Transmit(hi2c, address, outputBuffer, sizeof(outputBuffer), 1);
 800094e:	7afb      	ldrb	r3, [r7, #11]
 8000950:	b299      	uxth	r1, r3
 8000952:	f107 0218 	add.w	r2, r7, #24
 8000956:	2301      	movs	r3, #1
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	2305      	movs	r3, #5
 800095c:	68f8      	ldr	r0, [r7, #12]
 800095e:	f001 f96d 	bl	8001c3c <HAL_I2C_Master_Transmit>
 8000962:	e019      	b.n	8000998 <pca9685_mult_pwm+0xa8>
		}
		else
		{
			uint8_t outputBuffer[] = {0x06 + 4*((iter)-1), 0, (0 >> 8), 4096, (4096 >> 8)};
 8000964:	6a3b      	ldr	r3, [r7, #32]
 8000966:	3b01      	subs	r3, #1
 8000968:	b2db      	uxtb	r3, r3
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	b2db      	uxtb	r3, r3
 800096e:	3306      	adds	r3, #6
 8000970:	b2db      	uxtb	r3, r3
 8000972:	743b      	strb	r3, [r7, #16]
 8000974:	2300      	movs	r3, #0
 8000976:	747b      	strb	r3, [r7, #17]
 8000978:	2300      	movs	r3, #0
 800097a:	74bb      	strb	r3, [r7, #18]
 800097c:	2300      	movs	r3, #0
 800097e:	74fb      	strb	r3, [r7, #19]
 8000980:	2310      	movs	r3, #16
 8000982:	753b      	strb	r3, [r7, #20]
			HAL_I2C_Master_Transmit(hi2c, address, outputBuffer, sizeof(outputBuffer), 1);
 8000984:	7afb      	ldrb	r3, [r7, #11]
 8000986:	b299      	uxth	r1, r3
 8000988:	f107 0210 	add.w	r2, r7, #16
 800098c:	2301      	movs	r3, #1
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2305      	movs	r3, #5
 8000992:	68f8      	ldr	r0, [r7, #12]
 8000994:	f001 f952 	bl	8001c3c <HAL_I2C_Master_Transmit>
	for (i=1, iter=1; i<65535; i<<=1, iter++)
 8000998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
 800099e:	6a3b      	ldr	r3, [r7, #32]
 80009a0:	3301      	adds	r3, #1
 80009a2:	623b      	str	r3, [r7, #32]
 80009a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80009aa:	4293      	cmp	r3, r2
 80009ac:	ddb2      	ble.n	8000914 <pca9685_mult_pwm+0x24>
	{
		uint8_t outputBuffer[] = {0x06 + 4*((num & 0b00000010)-1), on, (on >> 8), off, (off >> 8)};
		HAL_I2C_Master_Transmit(hi2c, address, outputBuffer, sizeof(outputBuffer), 1);
	}
	*/
}
 80009ae:	bf00      	nop
 80009b0:	3728      	adds	r7, #40	; 0x28
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <scenario2>:
	 		 osDelay(5);
	 	 }
	 }
}

void scenario2(){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af02      	add	r7, sp, #8
	 uint8_t I2C_address = 0x80;
 80009be:	2380      	movs	r3, #128	; 0x80
 80009c0:	71fb      	strb	r3, [r7, #7]
	 pca9685_init(&hi2c1, I2C_address);
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	4619      	mov	r1, r3
 80009c6:	4829      	ldr	r0, [pc, #164]	; (8000a6c <scenario2+0xb4>)
 80009c8:	f7ff ff3a 	bl	8000840 <pca9685_init>
	 //uint16_t channel = sharedchannel;

	 /* Infinite loop */
	 for(;;)
	 {
		 for(int i=0; i<4096/sharedvar; i++){
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	e01b      	b.n	8000a0a <scenario2+0x52>
			pca9685_mult_pwm(&hi2c1, I2C_address, sharedchannel, 0, 4095-(sharedvar*i));
 80009d2:	4b27      	ldr	r3, [pc, #156]	; (8000a70 <scenario2+0xb8>)
 80009d4:	8818      	ldrh	r0, [r3, #0]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	b29a      	uxth	r2, r3
 80009da:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <scenario2+0xbc>)
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	fb12 f303 	smulbb	r3, r2, r3
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 80009e8:	330f      	adds	r3, #15
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	79f9      	ldrb	r1, [r7, #7]
 80009ee:	9300      	str	r3, [sp, #0]
 80009f0:	2300      	movs	r3, #0
 80009f2:	4602      	mov	r2, r0
 80009f4:	481d      	ldr	r0, [pc, #116]	; (8000a6c <scenario2+0xb4>)
 80009f6:	f7ff ff7b 	bl	80008f0 <pca9685_mult_pwm>
			//pca9685_pwm(&hi2c1, I2C_address, 15, 0, 4095-(sharedvar*i));
			osDelay(shareddelay);
 80009fa:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <scenario2+0xc0>)
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f003 ff16 	bl	8004830 <osDelay>
		 for(int i=0; i<4096/sharedvar; i++){
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	3301      	adds	r3, #1
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <scenario2+0xbc>)
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a14:	fb93 f3f2 	sdiv	r3, r3, r2
 8000a18:	68fa      	ldr	r2, [r7, #12]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	dbd9      	blt.n	80009d2 <scenario2+0x1a>
		 }

	 	 for(int i=0; i<4096/sharedvar; i++){
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	e017      	b.n	8000a54 <scenario2+0x9c>
	 		pca9685_mult_pwm(&hi2c1, I2C_address, sharedchannel, 0, (sharedvar*i));
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <scenario2+0xb8>)
 8000a26:	8818      	ldrh	r0, [r3, #0]
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <scenario2+0xbc>)
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	fb12 f303 	smulbb	r3, r2, r3
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	79f9      	ldrb	r1, [r7, #7]
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	480b      	ldr	r0, [pc, #44]	; (8000a6c <scenario2+0xb4>)
 8000a40:	f7ff ff56 	bl	80008f0 <pca9685_mult_pwm>
	 		//pca9685_pwm(&hi2c1, I2C_address, 15 ,0, 4095-(sharedvar*i));
	 		osDelay(shareddelay);
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <scenario2+0xc0>)
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f003 fef1 	bl	8004830 <osDelay>
	 	 for(int i=0; i<4096/sharedvar; i++){
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	3301      	adds	r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <scenario2+0xbc>)
 8000a56:	881b      	ldrh	r3, [r3, #0]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	dbdd      	blt.n	8000a24 <scenario2+0x6c>
		 for(int i=0; i<4096/sharedvar; i++){
 8000a68:	e7b0      	b.n	80009cc <scenario2+0x14>
 8000a6a:	bf00      	nop
 8000a6c:	20001940 	.word	0x20001940
 8000a70:	20000002 	.word	0x20000002
 8000a74:	20000000 	.word	0x20000000
 8000a78:	20000004 	.word	0x20000004

08000a7c <ComUsartTask>:
		}
	}

}

void ComUsartTask(void *argument){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	uint8_t rxBuffer[8];
	for(;;)
	{
		while (HAL_UART_Receive_DMA(&huart2, rxBuffer, sizeof(rxBuffer)) != HAL_OK)
 8000a84:	e006      	b.n	8000a94 <ComUsartTask+0x18>
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000a86:	2108      	movs	r1, #8
 8000a88:	481f      	ldr	r0, [pc, #124]	; (8000b08 <ComUsartTask+0x8c>)
 8000a8a:	f001 f82d 	bl	8001ae8 <HAL_GPIO_TogglePin>
			osDelay(5);
 8000a8e:	2005      	movs	r0, #5
 8000a90:	f003 fece 	bl	8004830 <osDelay>
		while (HAL_UART_Receive_DMA(&huart2, rxBuffer, sizeof(rxBuffer)) != HAL_OK)
 8000a94:	f107 0308 	add.w	r3, r7, #8
 8000a98:	2208      	movs	r2, #8
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	481b      	ldr	r0, [pc, #108]	; (8000b0c <ComUsartTask+0x90>)
 8000a9e:	f003 f8e9 	bl	8003c74 <HAL_UART_Receive_DMA>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d1ee      	bne.n	8000a86 <ComUsartTask+0xa>
		}
		osDelay(5);
 8000aa8:	2005      	movs	r0, #5
 8000aaa:	f003 fec1 	bl	8004830 <osDelay>
		if(rxBuffer[0]==0x4D){
 8000aae:	7a3b      	ldrb	r3, [r7, #8]
 8000ab0:	2b4d      	cmp	r3, #77	; 0x4d
 8000ab2:	d112      	bne.n	8000ada <ComUsartTask+0x5e>
			HAL_UART_Transmit(&huart2,&rxBuffer[1], 1,500);
 8000ab4:	f107 0308 	add.w	r3, r7, #8
 8000ab8:	1c59      	adds	r1, r3, #1
 8000aba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4812      	ldr	r0, [pc, #72]	; (8000b0c <ComUsartTask+0x90>)
 8000ac2:	f003 f843 	bl	8003b4c <HAL_UART_Transmit>
			sharedvar = 16;
 8000ac6:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <ComUsartTask+0x94>)
 8000ac8:	2210      	movs	r2, #16
 8000aca:	801a      	strh	r2, [r3, #0]
			sharedchannel = 0x9395;
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <ComUsartTask+0x98>)
 8000ace:	f249 3295 	movw	r2, #37781	; 0x9395
 8000ad2:	801a      	strh	r2, [r3, #0]
			shareddelay = 5;
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <ComUsartTask+0x9c>)
 8000ad6:	2205      	movs	r2, #5
 8000ad8:	801a      	strh	r2, [r3, #0]
			//sharedvar = (uint16_t) atoi(rxBuffer[5]);
		}
		if(rxBuffer[0]==0x44){
 8000ada:	7a3b      	ldrb	r3, [r7, #8]
 8000adc:	2b44      	cmp	r3, #68	; 0x44
 8000ade:	d1d9      	bne.n	8000a94 <ComUsartTask+0x18>
			HAL_UART_Transmit(&huart2,&rxBuffer[1], 1,500);
 8000ae0:	f107 0308 	add.w	r3, r7, #8
 8000ae4:	1c59      	adds	r1, r3, #1
 8000ae6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000aea:	2201      	movs	r2, #1
 8000aec:	4807      	ldr	r0, [pc, #28]	; (8000b0c <ComUsartTask+0x90>)
 8000aee:	f003 f82d 	bl	8003b4c <HAL_UART_Transmit>
			sharedvar = 16;
 8000af2:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <ComUsartTask+0x94>)
 8000af4:	2210      	movs	r2, #16
 8000af6:	801a      	strh	r2, [r3, #0]
			sharedchannel = 0x0F05;
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <ComUsartTask+0x98>)
 8000afa:	f640 7205 	movw	r2, #3845	; 0xf05
 8000afe:	801a      	strh	r2, [r3, #0]
			shareddelay = 1;
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <ComUsartTask+0x9c>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	801a      	strh	r2, [r3, #0]
		while (HAL_UART_Receive_DMA(&huart2, rxBuffer, sizeof(rxBuffer)) != HAL_OK)
 8000b06:	e7c5      	b.n	8000a94 <ComUsartTask+0x18>
 8000b08:	48000400 	.word	0x48000400
 8000b0c:	200019d4 	.word	0x200019d4
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000002 	.word	0x20000002
 8000b18:	20000004 	.word	0x20000004

08000b1c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//scenario1();
	scenario2();
 8000b24:	f7ff ff48 	bl	80009b8 <scenario2>
  /* USER CODE END 5 */
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d101      	bne.n	8000b46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b42:	f000 fa59 	bl	8000ff8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40001000 	.word	0x40001000

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b58:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <Error_Handler+0x6>

08000b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b66:	4a10      	ldr	r2, [pc, #64]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6593      	str	r3, [r2, #88]	; 0x58
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	210f      	movs	r1, #15
 8000b96:	f06f 0001 	mvn.w	r0, #1
 8000b9a:	f000 fc01 	bl	80013a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000

08000bac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <HAL_CAN_MspInit+0x80>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d129      	bne.n	8000c22 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <HAL_CAN_MspInit+0x84>)
 8000bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd2:	4a17      	ldr	r2, [pc, #92]	; (8000c30 <HAL_CAN_MspInit+0x84>)
 8000bd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <HAL_CAN_MspInit+0x84>)
 8000bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <HAL_CAN_MspInit+0x84>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bea:	4a11      	ldr	r2, [pc, #68]	; (8000c30 <HAL_CAN_MspInit+0x84>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <HAL_CAN_MspInit+0x84>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000bfe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c10:	2309      	movs	r3, #9
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1e:	f000 fde1 	bl	80017e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c22:	bf00      	nop
 8000c24:	3728      	adds	r7, #40	; 0x28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40006400 	.word	0x40006400
 8000c30:	40021000 	.word	0x40021000

08000c34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a17      	ldr	r2, [pc, #92]	; (8000cb0 <HAL_I2C_MspInit+0x7c>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d127      	bne.n	8000ca6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c56:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <HAL_I2C_MspInit+0x80>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	4a16      	ldr	r2, [pc, #88]	; (8000cb4 <HAL_I2C_MspInit+0x80>)
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <HAL_I2C_MspInit+0x80>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c6e:	23c0      	movs	r3, #192	; 0xc0
 8000c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c72:	2312      	movs	r3, #18
 8000c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c7e:	2304      	movs	r3, #4
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	480b      	ldr	r0, [pc, #44]	; (8000cb8 <HAL_I2C_MspInit+0x84>)
 8000c8a:	f000 fdab 	bl	80017e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <HAL_I2C_MspInit+0x80>)
 8000c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c92:	4a08      	ldr	r2, [pc, #32]	; (8000cb4 <HAL_I2C_MspInit+0x80>)
 8000c94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c98:	6593      	str	r3, [r2, #88]	; 0x58
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_I2C_MspInit+0x80>)
 8000c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	; 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40005400 	.word	0x40005400
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	48000400 	.word	0x48000400

08000cbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a40      	ldr	r2, [pc, #256]	; (8000ddc <HAL_UART_MspInit+0x120>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d17a      	bne.n	8000dd4 <HAL_UART_MspInit+0x118>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cde:	4b40      	ldr	r3, [pc, #256]	; (8000de0 <HAL_UART_MspInit+0x124>)
 8000ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce2:	4a3f      	ldr	r2, [pc, #252]	; (8000de0 <HAL_UART_MspInit+0x124>)
 8000ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cea:	4b3d      	ldr	r3, [pc, #244]	; (8000de0 <HAL_UART_MspInit+0x124>)
 8000cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	4b3a      	ldr	r3, [pc, #232]	; (8000de0 <HAL_UART_MspInit+0x124>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	4a39      	ldr	r2, [pc, #228]	; (8000de0 <HAL_UART_MspInit+0x124>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d02:	4b37      	ldr	r3, [pc, #220]	; (8000de0 <HAL_UART_MspInit+0x124>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d0e:	230c      	movs	r3, #12
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d1e:	2307      	movs	r3, #7
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2c:	f000 fd5a 	bl	80017e4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000d30:	4b2c      	ldr	r3, [pc, #176]	; (8000de4 <HAL_UART_MspInit+0x128>)
 8000d32:	4a2d      	ldr	r2, [pc, #180]	; (8000de8 <HAL_UART_MspInit+0x12c>)
 8000d34:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000d36:	4b2b      	ldr	r3, [pc, #172]	; (8000de4 <HAL_UART_MspInit+0x128>)
 8000d38:	2202      	movs	r2, #2
 8000d3a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d3c:	4b29      	ldr	r3, [pc, #164]	; (8000de4 <HAL_UART_MspInit+0x128>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d42:	4b28      	ldr	r3, [pc, #160]	; (8000de4 <HAL_UART_MspInit+0x128>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d48:	4b26      	ldr	r3, [pc, #152]	; (8000de4 <HAL_UART_MspInit+0x128>)
 8000d4a:	2280      	movs	r2, #128	; 0x80
 8000d4c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d4e:	4b25      	ldr	r3, [pc, #148]	; (8000de4 <HAL_UART_MspInit+0x128>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d54:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <HAL_UART_MspInit+0x128>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000d5a:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <HAL_UART_MspInit+0x128>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d60:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <HAL_UART_MspInit+0x128>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d66:	481f      	ldr	r0, [pc, #124]	; (8000de4 <HAL_UART_MspInit+0x128>)
 8000d68:	f000 fb44 	bl	80013f4 <HAL_DMA_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 8000d72:	f7ff feef 	bl	8000b54 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a1a      	ldr	r2, [pc, #104]	; (8000de4 <HAL_UART_MspInit+0x128>)
 8000d7a:	66da      	str	r2, [r3, #108]	; 0x6c
 8000d7c:	4a19      	ldr	r2, [pc, #100]	; (8000de4 <HAL_UART_MspInit+0x128>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <HAL_UART_MspInit+0x130>)
 8000d84:	4a1a      	ldr	r2, [pc, #104]	; (8000df0 <HAL_UART_MspInit+0x134>)
 8000d86:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <HAL_UART_MspInit+0x130>)
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d8e:	4b17      	ldr	r3, [pc, #92]	; (8000dec <HAL_UART_MspInit+0x130>)
 8000d90:	2210      	movs	r2, #16
 8000d92:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d94:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HAL_UART_MspInit+0x130>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d9a:	4b14      	ldr	r3, [pc, #80]	; (8000dec <HAL_UART_MspInit+0x130>)
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_UART_MspInit+0x130>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <HAL_UART_MspInit+0x130>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <HAL_UART_MspInit+0x130>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <HAL_UART_MspInit+0x130>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000db8:	480c      	ldr	r0, [pc, #48]	; (8000dec <HAL_UART_MspInit+0x130>)
 8000dba:	f000 fb1b 	bl	80013f4 <HAL_DMA_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8000dc4:	f7ff fec6 	bl	8000b54 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a08      	ldr	r2, [pc, #32]	; (8000dec <HAL_UART_MspInit+0x130>)
 8000dcc:	669a      	str	r2, [r3, #104]	; 0x68
 8000dce:	4a07      	ldr	r2, [pc, #28]	; (8000dec <HAL_UART_MspInit+0x130>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dd4:	bf00      	nop
 8000dd6:	3728      	adds	r7, #40	; 0x28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40004400 	.word	0x40004400
 8000de0:	40021000 	.word	0x40021000
 8000de4:	200018f8 	.word	0x200018f8
 8000de8:	4002006c 	.word	0x4002006c
 8000dec:	2000198c 	.word	0x2000198c
 8000df0:	40020080 	.word	0x40020080

08000df4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08c      	sub	sp, #48	; 0x30
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	2036      	movs	r0, #54	; 0x36
 8000e0a:	f000 fac9 	bl	80013a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e0e:	2036      	movs	r0, #54	; 0x36
 8000e10:	f000 fae2 	bl	80013d8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e14:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <HAL_InitTick+0x9c>)
 8000e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e18:	4a1d      	ldr	r2, [pc, #116]	; (8000e90 <HAL_InitTick+0x9c>)
 8000e1a:	f043 0310 	orr.w	r3, r3, #16
 8000e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8000e20:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <HAL_InitTick+0x9c>)
 8000e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e24:	f003 0310 	and.w	r3, r3, #16
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e2c:	f107 0210 	add.w	r2, r7, #16
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f002 f836 	bl	8002ea8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e3c:	f002 f808 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 8000e40:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e44:	4a13      	ldr	r2, [pc, #76]	; (8000e94 <HAL_InitTick+0xa0>)
 8000e46:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4a:	0c9b      	lsrs	r3, r3, #18
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <HAL_InitTick+0xa4>)
 8000e52:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <HAL_InitTick+0xa8>)
 8000e54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <HAL_InitTick+0xa4>)
 8000e58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e5c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e5e:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <HAL_InitTick+0xa4>)
 8000e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e62:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <HAL_InitTick+0xa4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <HAL_InitTick+0xa4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e70:	4809      	ldr	r0, [pc, #36]	; (8000e98 <HAL_InitTick+0xa4>)
 8000e72:	f002 fb9d 	bl	80035b0 <HAL_TIM_Base_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d104      	bne.n	8000e86 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e7c:	4806      	ldr	r0, [pc, #24]	; (8000e98 <HAL_InitTick+0xa4>)
 8000e7e:	f002 fbf9 	bl	8003674 <HAL_TIM_Base_Start_IT>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e000      	b.n	8000e88 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3730      	adds	r7, #48	; 0x30
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40021000 	.word	0x40021000
 8000e94:	431bde83 	.word	0x431bde83
 8000e98:	20001a80 	.word	0x20001a80
 8000e9c:	40001000 	.word	0x40001000

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <NMI_Handler+0x4>

08000ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <HardFault_Handler+0x4>

08000eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <MemManage_Handler+0x4>

08000eb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ebe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <DMA1_Channel6_IRQHandler+0x10>)
 8000ed2:	f000 fba7 	bl	8001624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200018f8 	.word	0x200018f8

08000ee0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <DMA1_Channel7_IRQHandler+0x10>)
 8000ee6:	f000 fb9d 	bl	8001624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	2000198c 	.word	0x2000198c

08000ef4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <TIM6_DAC_IRQHandler+0x10>)
 8000efa:	f002 fc0f 	bl	800371c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20001a80 	.word	0x20001a80

08000f08 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <SystemInit+0x64>)
 8000f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f12:	4a16      	ldr	r2, [pc, #88]	; (8000f6c <SystemInit+0x64>)
 8000f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <SystemInit+0x68>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a13      	ldr	r2, [pc, #76]	; (8000f70 <SystemInit+0x68>)
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <SystemInit+0x68>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <SystemInit+0x68>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a0f      	ldr	r2, [pc, #60]	; (8000f70 <SystemInit+0x68>)
 8000f34:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f38:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f3c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <SystemInit+0x68>)
 8000f40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f44:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <SystemInit+0x68>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a09      	ldr	r2, [pc, #36]	; (8000f70 <SystemInit+0x68>)
 8000f4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f50:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f52:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <SystemInit+0x68>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <SystemInit+0x64>)
 8000f5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f5e:	609a      	str	r2, [r3, #8]
#endif
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000ed00 	.word	0xe000ed00
 8000f70:	40021000 	.word	0x40021000

08000f74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f78:	f7ff ffc6 	bl	8000f08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f7c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f7e:	e003      	b.n	8000f88 <LoopCopyDataInit>

08000f80 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f82:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f84:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f86:	3104      	adds	r1, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f88:	480a      	ldr	r0, [pc, #40]	; (8000fb4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f8c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f8e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f90:	d3f6      	bcc.n	8000f80 <CopyDataInit>
	ldr	r2, =_sbss
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f94:	e002      	b.n	8000f9c <LoopFillZerobss>

08000f96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f96:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f98:	f842 3b04 	str.w	r3, [r2], #4

08000f9c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <LoopForever+0x16>)
	cmp	r2, r3
 8000f9e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fa0:	d3f9      	bcc.n	8000f96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fa2:	f006 f873 	bl	800708c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fa6:	f7ff fa93 	bl	80004d0 <main>

08000faa <LoopForever>:

LoopForever:
    b LoopForever
 8000faa:	e7fe      	b.n	8000faa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fac:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000fb0:	080071e8 	.word	0x080071e8
	ldr	r0, =_sdata
 8000fb4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000fb8:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8000fbc:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8000fc0:	20001b10 	.word	0x20001b10

08000fc4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fc4:	e7fe      	b.n	8000fc4 <ADC1_IRQHandler>

08000fc6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 f9da 	bl	800138a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f7ff ff0c 	bl	8000df4 <HAL_InitTick>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d002      	beq.n	8000fe8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	71fb      	strb	r3, [r7, #7]
 8000fe6:	e001      	b.n	8000fec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fe8:	f7ff fdb8 	bl	8000b5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fec:	79fb      	ldrb	r3, [r7, #7]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_IncTick+0x20>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x24>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <HAL_IncTick+0x24>)
 800100a:	6013      	str	r3, [r2, #0]
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000010 	.word	0x20000010
 800101c:	20001acc 	.word	0x20001acc

08001020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <HAL_GetTick+0x14>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20001acc 	.word	0x20001acc

08001038 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e0ed      	b.n	8001226 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d102      	bne.n	800105c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff fda8 	bl	8000bac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 0202 	bic.w	r2, r2, #2
 800106a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800106c:	f7ff ffd8 	bl	8001020 <HAL_GetTick>
 8001070:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001072:	e012      	b.n	800109a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001074:	f7ff ffd4 	bl	8001020 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b0a      	cmp	r3, #10
 8001080:	d90b      	bls.n	800109a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001086:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2205      	movs	r2, #5
 8001092:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e0c5      	b.n	8001226 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d1e5      	bne.n	8001074 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 0201 	orr.w	r2, r2, #1
 80010b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010b8:	f7ff ffb2 	bl	8001020 <HAL_GetTick>
 80010bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010be:	e012      	b.n	80010e6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010c0:	f7ff ffae 	bl	8001020 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b0a      	cmp	r3, #10
 80010cc:	d90b      	bls.n	80010e6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2205      	movs	r2, #5
 80010de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e09f      	b.n	8001226 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0e5      	beq.n	80010c0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	7e1b      	ldrb	r3, [r3, #24]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d108      	bne.n	800110e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	e007      	b.n	800111e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800111c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7e5b      	ldrb	r3, [r3, #25]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d108      	bne.n	8001138 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	e007      	b.n	8001148 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001146:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	7e9b      	ldrb	r3, [r3, #26]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d108      	bne.n	8001162 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0220 	orr.w	r2, r2, #32
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	e007      	b.n	8001172 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0220 	bic.w	r2, r2, #32
 8001170:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	7edb      	ldrb	r3, [r3, #27]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d108      	bne.n	800118c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0210 	bic.w	r2, r2, #16
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	e007      	b.n	800119c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f042 0210 	orr.w	r2, r2, #16
 800119a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	7f1b      	ldrb	r3, [r3, #28]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d108      	bne.n	80011b6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f042 0208 	orr.w	r2, r2, #8
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	e007      	b.n	80011c6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f022 0208 	bic.w	r2, r2, #8
 80011c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7f5b      	ldrb	r3, [r3, #29]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d108      	bne.n	80011e0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f042 0204 	orr.w	r2, r2, #4
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	e007      	b.n	80011f0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 0204 	bic.w	r2, r2, #4
 80011ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	431a      	orrs	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	431a      	orrs	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	ea42 0103 	orr.w	r1, r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	1e5a      	subs	r2, r3, #1
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	430a      	orrs	r2, r1
 8001214:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2201      	movs	r2, #1
 8001220:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800124c:	4013      	ands	r3, r2
 800124e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800125c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001262:	4a04      	ldr	r2, [pc, #16]	; (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	60d3      	str	r3, [r2, #12]
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <__NVIC_GetPriorityGrouping+0x18>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	0a1b      	lsrs	r3, r3, #8
 8001282:	f003 0307 	and.w	r3, r3, #7
}
 8001286:	4618      	mov	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	db0b      	blt.n	80012be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	f003 021f 	and.w	r2, r3, #31
 80012ac:	4907      	ldr	r1, [pc, #28]	; (80012cc <__NVIC_EnableIRQ+0x38>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	095b      	lsrs	r3, r3, #5
 80012b4:	2001      	movs	r0, #1
 80012b6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000e100 	.word	0xe000e100

080012d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	db0a      	blt.n	80012fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	490c      	ldr	r1, [pc, #48]	; (800131c <__NVIC_SetPriority+0x4c>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	0112      	lsls	r2, r2, #4
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	440b      	add	r3, r1
 80012f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f8:	e00a      	b.n	8001310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4908      	ldr	r1, [pc, #32]	; (8001320 <__NVIC_SetPriority+0x50>)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	3b04      	subs	r3, #4
 8001308:	0112      	lsls	r2, r2, #4
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	440b      	add	r3, r1
 800130e:	761a      	strb	r2, [r3, #24]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000e100 	.word	0xe000e100
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f1c3 0307 	rsb	r3, r3, #7
 800133e:	2b04      	cmp	r3, #4
 8001340:	bf28      	it	cs
 8001342:	2304      	movcs	r3, #4
 8001344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3304      	adds	r3, #4
 800134a:	2b06      	cmp	r3, #6
 800134c:	d902      	bls.n	8001354 <NVIC_EncodePriority+0x30>
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3b03      	subs	r3, #3
 8001352:	e000      	b.n	8001356 <NVIC_EncodePriority+0x32>
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	f04f 32ff 	mov.w	r2, #4294967295
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43da      	mvns	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	401a      	ands	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800136c:	f04f 31ff 	mov.w	r1, #4294967295
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	43d9      	mvns	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	4313      	orrs	r3, r2
         );
}
 800137e:	4618      	mov	r0, r3
 8001380:	3724      	adds	r7, #36	; 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ff4c 	bl	8001230 <__NVIC_SetPriorityGrouping>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
 80013ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013b2:	f7ff ff61 	bl	8001278 <__NVIC_GetPriorityGrouping>
 80013b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	68b9      	ldr	r1, [r7, #8]
 80013bc:	6978      	ldr	r0, [r7, #20]
 80013be:	f7ff ffb1 	bl	8001324 <NVIC_EncodePriority>
 80013c2:	4602      	mov	r2, r0
 80013c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff ff80 	bl	80012d0 <__NVIC_SetPriority>
}
 80013d0:	bf00      	nop
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ff54 	bl	8001294 <__NVIC_EnableIRQ>
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e098      	b.n	8001538 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	4b4d      	ldr	r3, [pc, #308]	; (8001544 <HAL_DMA_Init+0x150>)
 800140e:	429a      	cmp	r2, r3
 8001410:	d80f      	bhi.n	8001432 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	4b4b      	ldr	r3, [pc, #300]	; (8001548 <HAL_DMA_Init+0x154>)
 800141a:	4413      	add	r3, r2
 800141c:	4a4b      	ldr	r2, [pc, #300]	; (800154c <HAL_DMA_Init+0x158>)
 800141e:	fba2 2303 	umull	r2, r3, r2, r3
 8001422:	091b      	lsrs	r3, r3, #4
 8001424:	009a      	lsls	r2, r3, #2
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a48      	ldr	r2, [pc, #288]	; (8001550 <HAL_DMA_Init+0x15c>)
 800142e:	641a      	str	r2, [r3, #64]	; 0x40
 8001430:	e00e      	b.n	8001450 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	4b46      	ldr	r3, [pc, #280]	; (8001554 <HAL_DMA_Init+0x160>)
 800143a:	4413      	add	r3, r2
 800143c:	4a43      	ldr	r2, [pc, #268]	; (800154c <HAL_DMA_Init+0x158>)
 800143e:	fba2 2303 	umull	r2, r3, r2, r3
 8001442:	091b      	lsrs	r3, r3, #4
 8001444:	009a      	lsls	r2, r3, #2
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a42      	ldr	r2, [pc, #264]	; (8001558 <HAL_DMA_Init+0x164>)
 800144e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2202      	movs	r2, #2
 8001454:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800146a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001474:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001480:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800148c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	4313      	orrs	r3, r2
 8001498:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014aa:	d039      	beq.n	8001520 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	4a27      	ldr	r2, [pc, #156]	; (8001550 <HAL_DMA_Init+0x15c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d11a      	bne.n	80014ec <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80014b6:	4b29      	ldr	r3, [pc, #164]	; (800155c <HAL_DMA_Init+0x168>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f003 031c 	and.w	r3, r3, #28
 80014c2:	210f      	movs	r1, #15
 80014c4:	fa01 f303 	lsl.w	r3, r1, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	4924      	ldr	r1, [pc, #144]	; (800155c <HAL_DMA_Init+0x168>)
 80014cc:	4013      	ands	r3, r2
 80014ce:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80014d0:	4b22      	ldr	r3, [pc, #136]	; (800155c <HAL_DMA_Init+0x168>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6859      	ldr	r1, [r3, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014dc:	f003 031c 	and.w	r3, r3, #28
 80014e0:	fa01 f303 	lsl.w	r3, r1, r3
 80014e4:	491d      	ldr	r1, [pc, #116]	; (800155c <HAL_DMA_Init+0x168>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	600b      	str	r3, [r1, #0]
 80014ea:	e019      	b.n	8001520 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80014ec:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <HAL_DMA_Init+0x16c>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f4:	f003 031c 	and.w	r3, r3, #28
 80014f8:	210f      	movs	r1, #15
 80014fa:	fa01 f303 	lsl.w	r3, r1, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	4917      	ldr	r1, [pc, #92]	; (8001560 <HAL_DMA_Init+0x16c>)
 8001502:	4013      	ands	r3, r2
 8001504:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <HAL_DMA_Init+0x16c>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6859      	ldr	r1, [r3, #4]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	f003 031c 	and.w	r3, r3, #28
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
 800151a:	4911      	ldr	r1, [pc, #68]	; (8001560 <HAL_DMA_Init+0x16c>)
 800151c:	4313      	orrs	r3, r2
 800151e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	40020407 	.word	0x40020407
 8001548:	bffdfff8 	.word	0xbffdfff8
 800154c:	cccccccd 	.word	0xcccccccd
 8001550:	40020000 	.word	0x40020000
 8001554:	bffdfbf8 	.word	0xbffdfbf8
 8001558:	40020400 	.word	0x40020400
 800155c:	400200a8 	.word	0x400200a8
 8001560:	400204a8 	.word	0x400204a8

08001564 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
 8001570:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800157c:	2b01      	cmp	r3, #1
 800157e:	d101      	bne.n	8001584 <HAL_DMA_Start_IT+0x20>
 8001580:	2302      	movs	r3, #2
 8001582:	e04b      	b.n	800161c <HAL_DMA_Start_IT+0xb8>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b01      	cmp	r3, #1
 8001596:	d13a      	bne.n	800160e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2202      	movs	r2, #2
 800159c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 0201 	bic.w	r2, r2, #1
 80015b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	68b9      	ldr	r1, [r7, #8]
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f000 f8e0 	bl	8001782 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d008      	beq.n	80015dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f042 020e 	orr.w	r2, r2, #14
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	e00f      	b.n	80015fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 0204 	bic.w	r2, r2, #4
 80015ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 020a 	orr.w	r2, r2, #10
 80015fa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0201 	orr.w	r2, r2, #1
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	e005      	b.n	800161a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001616:	2302      	movs	r3, #2
 8001618:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800161a:	7dfb      	ldrb	r3, [r7, #23]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001640:	f003 031c 	and.w	r3, r3, #28
 8001644:	2204      	movs	r2, #4
 8001646:	409a      	lsls	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4013      	ands	r3, r2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d026      	beq.n	800169e <HAL_DMA_IRQHandler+0x7a>
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	2b00      	cmp	r3, #0
 8001658:	d021      	beq.n	800169e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0320 	and.w	r3, r3, #32
 8001664:	2b00      	cmp	r3, #0
 8001666:	d107      	bne.n	8001678 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0204 	bic.w	r2, r2, #4
 8001676:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167c:	f003 021c 	and.w	r2, r3, #28
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	2104      	movs	r1, #4
 8001686:	fa01 f202 	lsl.w	r2, r1, r2
 800168a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	2b00      	cmp	r3, #0
 8001692:	d071      	beq.n	8001778 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800169c:	e06c      	b.n	8001778 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	f003 031c 	and.w	r3, r3, #28
 80016a6:	2202      	movs	r2, #2
 80016a8:	409a      	lsls	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4013      	ands	r3, r2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d02e      	beq.n	8001710 <HAL_DMA_IRQHandler+0xec>
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d029      	beq.n	8001710 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0320 	and.w	r3, r3, #32
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10b      	bne.n	80016e2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 020a 	bic.w	r2, r2, #10
 80016d8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f003 021c 	and.w	r2, r3, #28
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	2102      	movs	r1, #2
 80016f0:	fa01 f202 	lsl.w	r2, r1, r2
 80016f4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001702:	2b00      	cmp	r3, #0
 8001704:	d038      	beq.n	8001778 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800170e:	e033      	b.n	8001778 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001714:	f003 031c 	and.w	r3, r3, #28
 8001718:	2208      	movs	r2, #8
 800171a:	409a      	lsls	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4013      	ands	r3, r2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d02a      	beq.n	800177a <HAL_DMA_IRQHandler+0x156>
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d025      	beq.n	800177a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 020e 	bic.w	r2, r2, #14
 800173c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	f003 021c 	and.w	r2, r3, #28
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	2101      	movs	r1, #1
 800174c:	fa01 f202 	lsl.w	r2, r1, r2
 8001750:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176c:	2b00      	cmp	r3, #0
 800176e:	d004      	beq.n	800177a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001778:	bf00      	nop
 800177a:	bf00      	nop
}
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001782:	b480      	push	{r7}
 8001784:	b085      	sub	sp, #20
 8001786:	af00      	add	r7, sp, #0
 8001788:	60f8      	str	r0, [r7, #12]
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001794:	f003 021c 	and.w	r2, r3, #28
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	2101      	movs	r1, #1
 800179e:	fa01 f202 	lsl.w	r2, r1, r2
 80017a2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b10      	cmp	r3, #16
 80017b2:	d108      	bne.n	80017c6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017c4:	e007      	b.n	80017d6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	60da      	str	r2, [r3, #12]
}
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f2:	e148      	b.n	8001a86 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	2101      	movs	r1, #1
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001800:	4013      	ands	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 813a 	beq.w	8001a80 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d00b      	beq.n	800182c <HAL_GPIO_Init+0x48>
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d007      	beq.n	800182c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001820:	2b11      	cmp	r3, #17
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b12      	cmp	r3, #18
 800182a:	d130      	bne.n	800188e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	2203      	movs	r2, #3
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4013      	ands	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001862:	2201      	movs	r2, #1
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4013      	ands	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	091b      	lsrs	r3, r3, #4
 8001878:	f003 0201 	and.w	r2, r3, #1
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4313      	orrs	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	2203      	movs	r2, #3
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4013      	ands	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0xea>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b12      	cmp	r3, #18
 80018cc:	d123      	bne.n	8001916 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	08da      	lsrs	r2, r3, #3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3208      	adds	r2, #8
 80018d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	220f      	movs	r2, #15
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	691a      	ldr	r2, [r3, #16]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	08da      	lsrs	r2, r3, #3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3208      	adds	r2, #8
 8001910:	6939      	ldr	r1, [r7, #16]
 8001912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	2203      	movs	r2, #3
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 0203 	and.w	r2, r3, #3
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 8094 	beq.w	8001a80 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001958:	4b52      	ldr	r3, [pc, #328]	; (8001aa4 <HAL_GPIO_Init+0x2c0>)
 800195a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195c:	4a51      	ldr	r2, [pc, #324]	; (8001aa4 <HAL_GPIO_Init+0x2c0>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	6613      	str	r3, [r2, #96]	; 0x60
 8001964:	4b4f      	ldr	r3, [pc, #316]	; (8001aa4 <HAL_GPIO_Init+0x2c0>)
 8001966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001970:	4a4d      	ldr	r2, [pc, #308]	; (8001aa8 <HAL_GPIO_Init+0x2c4>)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	089b      	lsrs	r3, r3, #2
 8001976:	3302      	adds	r3, #2
 8001978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	220f      	movs	r2, #15
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800199a:	d00d      	beq.n	80019b8 <HAL_GPIO_Init+0x1d4>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a43      	ldr	r2, [pc, #268]	; (8001aac <HAL_GPIO_Init+0x2c8>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d007      	beq.n	80019b4 <HAL_GPIO_Init+0x1d0>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a42      	ldr	r2, [pc, #264]	; (8001ab0 <HAL_GPIO_Init+0x2cc>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d101      	bne.n	80019b0 <HAL_GPIO_Init+0x1cc>
 80019ac:	2302      	movs	r3, #2
 80019ae:	e004      	b.n	80019ba <HAL_GPIO_Init+0x1d6>
 80019b0:	2307      	movs	r3, #7
 80019b2:	e002      	b.n	80019ba <HAL_GPIO_Init+0x1d6>
 80019b4:	2301      	movs	r3, #1
 80019b6:	e000      	b.n	80019ba <HAL_GPIO_Init+0x1d6>
 80019b8:	2300      	movs	r3, #0
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	f002 0203 	and.w	r2, r2, #3
 80019c0:	0092      	lsls	r2, r2, #2
 80019c2:	4093      	lsls	r3, r2
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019ca:	4937      	ldr	r1, [pc, #220]	; (8001aa8 <HAL_GPIO_Init+0x2c4>)
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	089b      	lsrs	r3, r3, #2
 80019d0:	3302      	adds	r3, #2
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019d8:	4b36      	ldr	r3, [pc, #216]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019fc:	4a2d      	ldr	r2, [pc, #180]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a02:	4b2c      	ldr	r3, [pc, #176]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a26:	4a23      	ldr	r2, [pc, #140]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a2c:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a50:	4a18      	ldr	r2, [pc, #96]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a56:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a7a:	4a0e      	ldr	r2, [pc, #56]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	3301      	adds	r3, #1
 8001a84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f47f aeaf 	bne.w	80017f4 <HAL_GPIO_Init+0x10>
  }
}
 8001a96:	bf00      	nop
 8001a98:	371c      	adds	r7, #28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010000 	.word	0x40010000
 8001aac:	48000400 	.word	0x48000400
 8001ab0:	48000800 	.word	0x48000800
 8001ab4:	40010400 	.word	0x40010400

08001ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac8:	787b      	ldrb	r3, [r7, #1]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ad4:	e002      	b.n	8001adc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ad6:	887a      	ldrh	r2, [r7, #2]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001afa:	887a      	ldrh	r2, [r7, #2]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4013      	ands	r3, r2
 8001b00:	041a      	lsls	r2, r3, #16
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	43d9      	mvns	r1, r3
 8001b06:	887b      	ldrh	r3, [r7, #2]
 8001b08:	400b      	ands	r3, r1
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	619a      	str	r2, [r3, #24]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e081      	b.n	8001c32 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d106      	bne.n	8001b48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff f876 	bl	8000c34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2224      	movs	r2, #36	; 0x24
 8001b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0201 	bic.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d107      	bne.n	8001b96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	e006      	b.n	8001ba4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ba2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d104      	bne.n	8001bb6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bb4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bc8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bd8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691a      	ldr	r2, [r3, #16]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	ea42 0103 	orr.w	r1, r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	021a      	lsls	r2, r3, #8
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69d9      	ldr	r1, [r3, #28]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a1a      	ldr	r2, [r3, #32]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af02      	add	r7, sp, #8
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	607a      	str	r2, [r7, #4]
 8001c46:	461a      	mov	r2, r3
 8001c48:	460b      	mov	r3, r1
 8001c4a:	817b      	strh	r3, [r7, #10]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b20      	cmp	r3, #32
 8001c5a:	f040 80da 	bne.w	8001e12 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d101      	bne.n	8001c6c <HAL_I2C_Master_Transmit+0x30>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	e0d3      	b.n	8001e14 <HAL_I2C_Master_Transmit+0x1d8>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c74:	f7ff f9d4 	bl	8001020 <HAL_GetTick>
 8001c78:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	2319      	movs	r3, #25
 8001c80:	2201      	movs	r2, #1
 8001c82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 f8f0 	bl	8001e6c <I2C_WaitOnFlagUntilTimeout>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e0be      	b.n	8001e14 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2221      	movs	r2, #33	; 0x21
 8001c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2210      	movs	r2, #16
 8001ca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	893a      	ldrh	r2, [r7, #8]
 8001cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	2bff      	cmp	r3, #255	; 0xff
 8001cc6:	d90e      	bls.n	8001ce6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	22ff      	movs	r2, #255	; 0xff
 8001ccc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	8979      	ldrh	r1, [r7, #10]
 8001cd6:	4b51      	ldr	r3, [pc, #324]	; (8001e1c <HAL_I2C_Master_Transmit+0x1e0>)
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 f9e6 	bl	80020b0 <I2C_TransferConfig>
 8001ce4:	e06c      	b.n	8001dc0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	8979      	ldrh	r1, [r7, #10]
 8001cf8:	4b48      	ldr	r3, [pc, #288]	; (8001e1c <HAL_I2C_Master_Transmit+0x1e0>)
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 f9d5 	bl	80020b0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001d06:	e05b      	b.n	8001dc0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	6a39      	ldr	r1, [r7, #32]
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 f8ed 	bl	8001eec <I2C_WaitOnTXISFlagUntilTimeout>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e07b      	b.n	8001e14 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	781a      	ldrb	r2, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d034      	beq.n	8001dc0 <HAL_I2C_Master_Transmit+0x184>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d130      	bne.n	8001dc0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	6a3b      	ldr	r3, [r7, #32]
 8001d64:	2200      	movs	r2, #0
 8001d66:	2180      	movs	r1, #128	; 0x80
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f000 f87f 	bl	8001e6c <I2C_WaitOnFlagUntilTimeout>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e04d      	b.n	8001e14 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	2bff      	cmp	r3, #255	; 0xff
 8001d80:	d90e      	bls.n	8001da0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	22ff      	movs	r2, #255	; 0xff
 8001d86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	8979      	ldrh	r1, [r7, #10]
 8001d90:	2300      	movs	r3, #0
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f000 f989 	bl	80020b0 <I2C_TransferConfig>
 8001d9e:	e00f      	b.n	8001dc0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	8979      	ldrh	r1, [r7, #10]
 8001db2:	2300      	movs	r3, #0
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f000 f978 	bl	80020b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d19e      	bne.n	8001d08 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	6a39      	ldr	r1, [r7, #32]
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 f8cc 	bl	8001f6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e01a      	b.n	8001e14 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2220      	movs	r2, #32
 8001de4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6859      	ldr	r1, [r3, #4]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <HAL_I2C_Master_Transmit+0x1e4>)
 8001df2:	400b      	ands	r3, r1
 8001df4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2220      	movs	r2, #32
 8001dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e000      	b.n	8001e14 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001e12:	2302      	movs	r3, #2
  }
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	80002000 	.word	0x80002000
 8001e20:	fe00e800 	.word	0xfe00e800

08001e24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d103      	bne.n	8001e42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d007      	beq.n	8001e60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	699a      	ldr	r2, [r3, #24]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 0201 	orr.w	r2, r2, #1
 8001e5e:	619a      	str	r2, [r3, #24]
  }
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e7c:	e022      	b.n	8001ec4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e84:	d01e      	beq.n	8001ec4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e86:	f7ff f8cb 	bl	8001020 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d302      	bcc.n	8001e9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d113      	bne.n	8001ec4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea0:	f043 0220 	orr.w	r2, r3, #32
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e00f      	b.n	8001ee4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	699a      	ldr	r2, [r3, #24]
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2301      	moveq	r3, #1
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	461a      	mov	r2, r3
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d0cd      	beq.n	8001e7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ef8:	e02c      	b.n	8001f54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f000 f870 	bl	8001fe4 <I2C_IsAcknowledgeFailed>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e02a      	b.n	8001f64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f14:	d01e      	beq.n	8001f54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f16:	f7ff f883 	bl	8001020 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d302      	bcc.n	8001f2c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d113      	bne.n	8001f54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f30:	f043 0220 	orr.w	r2, r3, #32
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e007      	b.n	8001f64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d1cb      	bne.n	8001efa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f78:	e028      	b.n	8001fcc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f000 f830 	bl	8001fe4 <I2C_IsAcknowledgeFailed>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e026      	b.n	8001fdc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f8e:	f7ff f847 	bl	8001020 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	68ba      	ldr	r2, [r7, #8]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d302      	bcc.n	8001fa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d113      	bne.n	8001fcc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa8:	f043 0220 	orr.w	r2, r3, #32
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e007      	b.n	8001fdc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	f003 0320 	and.w	r3, r3, #32
 8001fd6:	2b20      	cmp	r3, #32
 8001fd8:	d1cf      	bne.n	8001f7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	2b10      	cmp	r3, #16
 8001ffc:	d151      	bne.n	80020a2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ffe:	e022      	b.n	8002046 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002006:	d01e      	beq.n	8002046 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002008:	f7ff f80a 	bl	8001020 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	429a      	cmp	r2, r3
 8002016:	d302      	bcc.n	800201e <I2C_IsAcknowledgeFailed+0x3a>
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d113      	bne.n	8002046 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f043 0220 	orr.w	r2, r3, #32
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2220      	movs	r2, #32
 800202e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e02e      	b.n	80020a4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	f003 0320 	and.w	r3, r3, #32
 8002050:	2b20      	cmp	r3, #32
 8002052:	d1d5      	bne.n	8002000 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2210      	movs	r2, #16
 800205a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2220      	movs	r2, #32
 8002062:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f7ff fedd 	bl	8001e24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6859      	ldr	r1, [r3, #4]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <I2C_IsAcknowledgeFailed+0xc8>)
 8002076:	400b      	ands	r3, r1
 8002078:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	f043 0204 	orr.w	r2, r3, #4
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2220      	movs	r2, #32
 800208a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	fe00e800 	.word	0xfe00e800

080020b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	460b      	mov	r3, r1
 80020bc:	817b      	strh	r3, [r7, #10]
 80020be:	4613      	mov	r3, r2
 80020c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	0d5b      	lsrs	r3, r3, #21
 80020cc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80020d0:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <I2C_TransferConfig+0x58>)
 80020d2:	430b      	orrs	r3, r1
 80020d4:	43db      	mvns	r3, r3
 80020d6:	ea02 0103 	and.w	r1, r2, r3
 80020da:	897b      	ldrh	r3, [r7, #10]
 80020dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020e0:	7a7b      	ldrb	r3, [r7, #9]
 80020e2:	041b      	lsls	r3, r3, #16
 80020e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	431a      	orrs	r2, r3
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	431a      	orrs	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	03ff63ff 	.word	0x03ff63ff

0800210c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b20      	cmp	r3, #32
 8002120:	d138      	bne.n	8002194 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800212c:	2302      	movs	r3, #2
 800212e:	e032      	b.n	8002196 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2224      	movs	r2, #36	; 0x24
 800213c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800215e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6819      	ldr	r1, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0201 	orr.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2220      	movs	r2, #32
 8002184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002190:	2300      	movs	r3, #0
 8002192:	e000      	b.n	8002196 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002194:	2302      	movs	r3, #2
  }
}
 8002196:	4618      	mov	r0, r3
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b085      	sub	sp, #20
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b20      	cmp	r3, #32
 80021b6:	d139      	bne.n	800222c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d101      	bne.n	80021c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e033      	b.n	800222e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2224      	movs	r2, #36	; 0x24
 80021d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0201 	bic.w	r2, r2, #1
 80021e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	021b      	lsls	r3, r3, #8
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2220      	movs	r2, #32
 800221c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	e000      	b.n	800222e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800222c:	2302      	movs	r3, #2
  }
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a04      	ldr	r2, [pc, #16]	; (8002258 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224a:	6013      	str	r3, [r2, #0]
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40007000 	.word	0x40007000

0800225c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <HAL_PWREx_GetVoltageRange+0x18>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002268:	4618      	mov	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40007000 	.word	0x40007000

08002278 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002286:	d130      	bne.n	80022ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002288:	4b23      	ldr	r3, [pc, #140]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002294:	d038      	beq.n	8002308 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002296:	4b20      	ldr	r3, [pc, #128]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800229e:	4a1e      	ldr	r2, [pc, #120]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022a6:	4b1d      	ldr	r3, [pc, #116]	; (800231c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2232      	movs	r2, #50	; 0x32
 80022ac:	fb02 f303 	mul.w	r3, r2, r3
 80022b0:	4a1b      	ldr	r2, [pc, #108]	; (8002320 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	0c9b      	lsrs	r3, r3, #18
 80022b8:	3301      	adds	r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022bc:	e002      	b.n	80022c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	3b01      	subs	r3, #1
 80022c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022c4:	4b14      	ldr	r3, [pc, #80]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d0:	d102      	bne.n	80022d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1f2      	bne.n	80022be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e4:	d110      	bne.n	8002308 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e00f      	b.n	800230a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022ea:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f6:	d007      	beq.n	8002308 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022f8:	4b07      	ldr	r3, [pc, #28]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002300:	4a05      	ldr	r2, [pc, #20]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002302:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002306:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40007000 	.word	0x40007000
 800231c:	20000008 	.word	0x20000008
 8002320:	431bde83 	.word	0x431bde83

08002324 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d102      	bne.n	8002338 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	f000 bc11 	b.w	8002b5a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002338:	4ba0      	ldr	r3, [pc, #640]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 030c 	and.w	r3, r3, #12
 8002340:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002342:	4b9e      	ldr	r3, [pc, #632]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80e4 	beq.w	8002522 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d007      	beq.n	8002370 <HAL_RCC_OscConfig+0x4c>
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	2b0c      	cmp	r3, #12
 8002364:	f040 808b 	bne.w	800247e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2b01      	cmp	r3, #1
 800236c:	f040 8087 	bne.w	800247e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002370:	4b92      	ldr	r3, [pc, #584]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <HAL_RCC_OscConfig+0x64>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e3e8      	b.n	8002b5a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a1a      	ldr	r2, [r3, #32]
 800238c:	4b8b      	ldr	r3, [pc, #556]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d004      	beq.n	80023a2 <HAL_RCC_OscConfig+0x7e>
 8002398:	4b88      	ldr	r3, [pc, #544]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023a0:	e005      	b.n	80023ae <HAL_RCC_OscConfig+0x8a>
 80023a2:	4b86      	ldr	r3, [pc, #536]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 80023a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023a8:	091b      	lsrs	r3, r3, #4
 80023aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d223      	bcs.n	80023fa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 fda8 	bl	8002f0c <RCC_SetFlashLatencyFromMSIRange>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e3c9      	b.n	8002b5a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023c6:	4b7d      	ldr	r3, [pc, #500]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a7c      	ldr	r2, [pc, #496]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 80023cc:	f043 0308 	orr.w	r3, r3, #8
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	4b7a      	ldr	r3, [pc, #488]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	4977      	ldr	r1, [pc, #476]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023e4:	4b75      	ldr	r3, [pc, #468]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	021b      	lsls	r3, r3, #8
 80023f2:	4972      	ldr	r1, [pc, #456]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	604b      	str	r3, [r1, #4]
 80023f8:	e025      	b.n	8002446 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023fa:	4b70      	ldr	r3, [pc, #448]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a6f      	ldr	r2, [pc, #444]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 8002400:	f043 0308 	orr.w	r3, r3, #8
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	4b6d      	ldr	r3, [pc, #436]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	496a      	ldr	r1, [pc, #424]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 8002414:	4313      	orrs	r3, r2
 8002416:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002418:	4b68      	ldr	r3, [pc, #416]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	021b      	lsls	r3, r3, #8
 8002426:	4965      	ldr	r1, [pc, #404]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	4618      	mov	r0, r3
 8002438:	f000 fd68 	bl	8002f0c <RCC_SetFlashLatencyFromMSIRange>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e389      	b.n	8002b5a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002446:	f000 fc6f 	bl	8002d28 <HAL_RCC_GetSysClockFreq>
 800244a:	4601      	mov	r1, r0
 800244c:	4b5b      	ldr	r3, [pc, #364]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	091b      	lsrs	r3, r3, #4
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	4a5a      	ldr	r2, [pc, #360]	; (80025c0 <HAL_RCC_OscConfig+0x29c>)
 8002458:	5cd3      	ldrb	r3, [r2, r3]
 800245a:	f003 031f 	and.w	r3, r3, #31
 800245e:	fa21 f303 	lsr.w	r3, r1, r3
 8002462:	4a58      	ldr	r2, [pc, #352]	; (80025c4 <HAL_RCC_OscConfig+0x2a0>)
 8002464:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002466:	4b58      	ldr	r3, [pc, #352]	; (80025c8 <HAL_RCC_OscConfig+0x2a4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe fcc2 	bl	8000df4 <HAL_InitTick>
 8002470:	4603      	mov	r3, r0
 8002472:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d052      	beq.n	8002520 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	e36d      	b.n	8002b5a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d032      	beq.n	80024ec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002486:	4b4d      	ldr	r3, [pc, #308]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a4c      	ldr	r2, [pc, #304]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002492:	f7fe fdc5 	bl	8001020 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800249a:	f7fe fdc1 	bl	8001020 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e356      	b.n	8002b5a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024ac:	4b43      	ldr	r3, [pc, #268]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024b8:	4b40      	ldr	r3, [pc, #256]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a3f      	ldr	r2, [pc, #252]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 80024be:	f043 0308 	orr.w	r3, r3, #8
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	4b3d      	ldr	r3, [pc, #244]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	493a      	ldr	r1, [pc, #232]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024d6:	4b39      	ldr	r3, [pc, #228]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	021b      	lsls	r3, r3, #8
 80024e4:	4935      	ldr	r1, [pc, #212]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	604b      	str	r3, [r1, #4]
 80024ea:	e01a      	b.n	8002522 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024ec:	4b33      	ldr	r3, [pc, #204]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a32      	ldr	r2, [pc, #200]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 80024f2:	f023 0301 	bic.w	r3, r3, #1
 80024f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024f8:	f7fe fd92 	bl	8001020 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002500:	f7fe fd8e 	bl	8001020 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e323      	b.n	8002b5a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002512:	4b2a      	ldr	r3, [pc, #168]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x1dc>
 800251e:	e000      	b.n	8002522 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002520:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d073      	beq.n	8002616 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	2b08      	cmp	r3, #8
 8002532:	d005      	beq.n	8002540 <HAL_RCC_OscConfig+0x21c>
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	2b0c      	cmp	r3, #12
 8002538:	d10e      	bne.n	8002558 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2b03      	cmp	r3, #3
 800253e:	d10b      	bne.n	8002558 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002540:	4b1e      	ldr	r3, [pc, #120]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d063      	beq.n	8002614 <HAL_RCC_OscConfig+0x2f0>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d15f      	bne.n	8002614 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e300      	b.n	8002b5a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002560:	d106      	bne.n	8002570 <HAL_RCC_OscConfig+0x24c>
 8002562:	4b16      	ldr	r3, [pc, #88]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a15      	ldr	r2, [pc, #84]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 8002568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	e01d      	b.n	80025ac <HAL_RCC_OscConfig+0x288>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002578:	d10c      	bne.n	8002594 <HAL_RCC_OscConfig+0x270>
 800257a:	4b10      	ldr	r3, [pc, #64]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a0f      	ldr	r2, [pc, #60]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 8002580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a0c      	ldr	r2, [pc, #48]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 800258c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e00b      	b.n	80025ac <HAL_RCC_OscConfig+0x288>
 8002594:	4b09      	ldr	r3, [pc, #36]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a08      	ldr	r2, [pc, #32]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 800259a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a05      	ldr	r2, [pc, #20]	; (80025bc <HAL_RCC_OscConfig+0x298>)
 80025a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d01b      	beq.n	80025ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7fe fd34 	bl	8001020 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ba:	e010      	b.n	80025de <HAL_RCC_OscConfig+0x2ba>
 80025bc:	40021000 	.word	0x40021000
 80025c0:	08007190 	.word	0x08007190
 80025c4:	20000008 	.word	0x20000008
 80025c8:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025cc:	f7fe fd28 	bl	8001020 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	; 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e2bd      	b.n	8002b5a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025de:	4baf      	ldr	r3, [pc, #700]	; (800289c <HAL_RCC_OscConfig+0x578>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0x2a8>
 80025ea:	e014      	b.n	8002616 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe fd18 	bl	8001020 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f4:	f7fe fd14 	bl	8001020 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b64      	cmp	r3, #100	; 0x64
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e2a9      	b.n	8002b5a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002606:	4ba5      	ldr	r3, [pc, #660]	; (800289c <HAL_RCC_OscConfig+0x578>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x2d0>
 8002612:	e000      	b.n	8002616 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d060      	beq.n	80026e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	2b04      	cmp	r3, #4
 8002626:	d005      	beq.n	8002634 <HAL_RCC_OscConfig+0x310>
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	2b0c      	cmp	r3, #12
 800262c:	d119      	bne.n	8002662 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2b02      	cmp	r3, #2
 8002632:	d116      	bne.n	8002662 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002634:	4b99      	ldr	r3, [pc, #612]	; (800289c <HAL_RCC_OscConfig+0x578>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_RCC_OscConfig+0x328>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e286      	b.n	8002b5a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264c:	4b93      	ldr	r3, [pc, #588]	; (800289c <HAL_RCC_OscConfig+0x578>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	061b      	lsls	r3, r3, #24
 800265a:	4990      	ldr	r1, [pc, #576]	; (800289c <HAL_RCC_OscConfig+0x578>)
 800265c:	4313      	orrs	r3, r2
 800265e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002660:	e040      	b.n	80026e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d023      	beq.n	80026b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800266a:	4b8c      	ldr	r3, [pc, #560]	; (800289c <HAL_RCC_OscConfig+0x578>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a8b      	ldr	r2, [pc, #556]	; (800289c <HAL_RCC_OscConfig+0x578>)
 8002670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002676:	f7fe fcd3 	bl	8001020 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800267e:	f7fe fccf 	bl	8001020 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e264      	b.n	8002b5a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002690:	4b82      	ldr	r3, [pc, #520]	; (800289c <HAL_RCC_OscConfig+0x578>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0f0      	beq.n	800267e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269c:	4b7f      	ldr	r3, [pc, #508]	; (800289c <HAL_RCC_OscConfig+0x578>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	061b      	lsls	r3, r3, #24
 80026aa:	497c      	ldr	r1, [pc, #496]	; (800289c <HAL_RCC_OscConfig+0x578>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	604b      	str	r3, [r1, #4]
 80026b0:	e018      	b.n	80026e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026b2:	4b7a      	ldr	r3, [pc, #488]	; (800289c <HAL_RCC_OscConfig+0x578>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a79      	ldr	r2, [pc, #484]	; (800289c <HAL_RCC_OscConfig+0x578>)
 80026b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026be:	f7fe fcaf 	bl	8001020 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c6:	f7fe fcab 	bl	8001020 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e240      	b.n	8002b5a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026d8:	4b70      	ldr	r3, [pc, #448]	; (800289c <HAL_RCC_OscConfig+0x578>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1f0      	bne.n	80026c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d03c      	beq.n	800276a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d01c      	beq.n	8002732 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f8:	4b68      	ldr	r3, [pc, #416]	; (800289c <HAL_RCC_OscConfig+0x578>)
 80026fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026fe:	4a67      	ldr	r2, [pc, #412]	; (800289c <HAL_RCC_OscConfig+0x578>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002708:	f7fe fc8a 	bl	8001020 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002710:	f7fe fc86 	bl	8001020 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e21b      	b.n	8002b5a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002722:	4b5e      	ldr	r3, [pc, #376]	; (800289c <HAL_RCC_OscConfig+0x578>)
 8002724:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0ef      	beq.n	8002710 <HAL_RCC_OscConfig+0x3ec>
 8002730:	e01b      	b.n	800276a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002732:	4b5a      	ldr	r3, [pc, #360]	; (800289c <HAL_RCC_OscConfig+0x578>)
 8002734:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002738:	4a58      	ldr	r2, [pc, #352]	; (800289c <HAL_RCC_OscConfig+0x578>)
 800273a:	f023 0301 	bic.w	r3, r3, #1
 800273e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002742:	f7fe fc6d 	bl	8001020 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800274a:	f7fe fc69 	bl	8001020 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e1fe      	b.n	8002b5a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800275c:	4b4f      	ldr	r3, [pc, #316]	; (800289c <HAL_RCC_OscConfig+0x578>)
 800275e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1ef      	bne.n	800274a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 80a6 	beq.w	80028c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002778:	2300      	movs	r3, #0
 800277a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800277c:	4b47      	ldr	r3, [pc, #284]	; (800289c <HAL_RCC_OscConfig+0x578>)
 800277e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10d      	bne.n	80027a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002788:	4b44      	ldr	r3, [pc, #272]	; (800289c <HAL_RCC_OscConfig+0x578>)
 800278a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278c:	4a43      	ldr	r2, [pc, #268]	; (800289c <HAL_RCC_OscConfig+0x578>)
 800278e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002792:	6593      	str	r3, [r2, #88]	; 0x58
 8002794:	4b41      	ldr	r3, [pc, #260]	; (800289c <HAL_RCC_OscConfig+0x578>)
 8002796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027a0:	2301      	movs	r3, #1
 80027a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027a4:	4b3e      	ldr	r3, [pc, #248]	; (80028a0 <HAL_RCC_OscConfig+0x57c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d118      	bne.n	80027e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027b0:	4b3b      	ldr	r3, [pc, #236]	; (80028a0 <HAL_RCC_OscConfig+0x57c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a3a      	ldr	r2, [pc, #232]	; (80028a0 <HAL_RCC_OscConfig+0x57c>)
 80027b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027bc:	f7fe fc30 	bl	8001020 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c4:	f7fe fc2c 	bl	8001020 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e1c1      	b.n	8002b5a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d6:	4b32      	ldr	r3, [pc, #200]	; (80028a0 <HAL_RCC_OscConfig+0x57c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d108      	bne.n	80027fc <HAL_RCC_OscConfig+0x4d8>
 80027ea:	4b2c      	ldr	r3, [pc, #176]	; (800289c <HAL_RCC_OscConfig+0x578>)
 80027ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f0:	4a2a      	ldr	r2, [pc, #168]	; (800289c <HAL_RCC_OscConfig+0x578>)
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027fa:	e024      	b.n	8002846 <HAL_RCC_OscConfig+0x522>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b05      	cmp	r3, #5
 8002802:	d110      	bne.n	8002826 <HAL_RCC_OscConfig+0x502>
 8002804:	4b25      	ldr	r3, [pc, #148]	; (800289c <HAL_RCC_OscConfig+0x578>)
 8002806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280a:	4a24      	ldr	r2, [pc, #144]	; (800289c <HAL_RCC_OscConfig+0x578>)
 800280c:	f043 0304 	orr.w	r3, r3, #4
 8002810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002814:	4b21      	ldr	r3, [pc, #132]	; (800289c <HAL_RCC_OscConfig+0x578>)
 8002816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281a:	4a20      	ldr	r2, [pc, #128]	; (800289c <HAL_RCC_OscConfig+0x578>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002824:	e00f      	b.n	8002846 <HAL_RCC_OscConfig+0x522>
 8002826:	4b1d      	ldr	r3, [pc, #116]	; (800289c <HAL_RCC_OscConfig+0x578>)
 8002828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282c:	4a1b      	ldr	r2, [pc, #108]	; (800289c <HAL_RCC_OscConfig+0x578>)
 800282e:	f023 0301 	bic.w	r3, r3, #1
 8002832:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002836:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_RCC_OscConfig+0x578>)
 8002838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283c:	4a17      	ldr	r2, [pc, #92]	; (800289c <HAL_RCC_OscConfig+0x578>)
 800283e:	f023 0304 	bic.w	r3, r3, #4
 8002842:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d016      	beq.n	800287c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284e:	f7fe fbe7 	bl	8001020 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002854:	e00a      	b.n	800286c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002856:	f7fe fbe3 	bl	8001020 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	f241 3288 	movw	r2, #5000	; 0x1388
 8002864:	4293      	cmp	r3, r2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e176      	b.n	8002b5a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <HAL_RCC_OscConfig+0x578>)
 800286e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0ed      	beq.n	8002856 <HAL_RCC_OscConfig+0x532>
 800287a:	e01a      	b.n	80028b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287c:	f7fe fbd0 	bl	8001020 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002882:	e00f      	b.n	80028a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002884:	f7fe fbcc 	bl	8001020 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002892:	4293      	cmp	r3, r2
 8002894:	d906      	bls.n	80028a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e15f      	b.n	8002b5a <HAL_RCC_OscConfig+0x836>
 800289a:	bf00      	nop
 800289c:	40021000 	.word	0x40021000
 80028a0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028a4:	4baa      	ldr	r3, [pc, #680]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1e8      	bne.n	8002884 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028b2:	7ffb      	ldrb	r3, [r7, #31]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d105      	bne.n	80028c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b8:	4ba5      	ldr	r3, [pc, #660]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 80028ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028bc:	4aa4      	ldr	r2, [pc, #656]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 80028be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0320 	and.w	r3, r3, #32
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d03c      	beq.n	800294a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d01c      	beq.n	8002912 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028d8:	4b9d      	ldr	r3, [pc, #628]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 80028da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028de:	4a9c      	ldr	r2, [pc, #624]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e8:	f7fe fb9a 	bl	8001020 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028f0:	f7fe fb96 	bl	8001020 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e12b      	b.n	8002b5a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002902:	4b93      	ldr	r3, [pc, #588]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 8002904:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0ef      	beq.n	80028f0 <HAL_RCC_OscConfig+0x5cc>
 8002910:	e01b      	b.n	800294a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002912:	4b8f      	ldr	r3, [pc, #572]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 8002914:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002918:	4a8d      	ldr	r2, [pc, #564]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 800291a:	f023 0301 	bic.w	r3, r3, #1
 800291e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002922:	f7fe fb7d 	bl	8001020 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800292a:	f7fe fb79 	bl	8001020 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e10e      	b.n	8002b5a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800293c:	4b84      	ldr	r3, [pc, #528]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 800293e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1ef      	bne.n	800292a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 8102 	beq.w	8002b58 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	2b02      	cmp	r3, #2
 800295a:	f040 80c5 	bne.w	8002ae8 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800295e:	4b7c      	ldr	r3, [pc, #496]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f003 0203 	and.w	r2, r3, #3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296e:	429a      	cmp	r2, r3
 8002970:	d12c      	bne.n	80029cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	3b01      	subs	r3, #1
 800297e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002980:	429a      	cmp	r2, r3
 8002982:	d123      	bne.n	80029cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002990:	429a      	cmp	r2, r3
 8002992:	d11b      	bne.n	80029cc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d113      	bne.n	80029cc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ae:	085b      	lsrs	r3, r3, #1
 80029b0:	3b01      	subs	r3, #1
 80029b2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d109      	bne.n	80029cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	085b      	lsrs	r3, r3, #1
 80029c4:	3b01      	subs	r3, #1
 80029c6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d067      	beq.n	8002a9c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	2b0c      	cmp	r3, #12
 80029d0:	d062      	beq.n	8002a98 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029d2:	4b5f      	ldr	r3, [pc, #380]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e0bb      	b.n	8002b5a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029e2:	4b5b      	ldr	r3, [pc, #364]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a5a      	ldr	r2, [pc, #360]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 80029e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029ec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029ee:	f7fe fb17 	bl	8001020 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f6:	f7fe fb13 	bl	8001020 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e0a8      	b.n	8002b5a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a08:	4b51      	ldr	r3, [pc, #324]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1f0      	bne.n	80029f6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a14:	4b4e      	ldr	r3, [pc, #312]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	4b4e      	ldr	r3, [pc, #312]	; (8002b54 <HAL_RCC_OscConfig+0x830>)
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a24:	3a01      	subs	r2, #1
 8002a26:	0112      	lsls	r2, r2, #4
 8002a28:	4311      	orrs	r1, r2
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a2e:	0212      	lsls	r2, r2, #8
 8002a30:	4311      	orrs	r1, r2
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a36:	0852      	lsrs	r2, r2, #1
 8002a38:	3a01      	subs	r2, #1
 8002a3a:	0552      	lsls	r2, r2, #21
 8002a3c:	4311      	orrs	r1, r2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a42:	0852      	lsrs	r2, r2, #1
 8002a44:	3a01      	subs	r2, #1
 8002a46:	0652      	lsls	r2, r2, #25
 8002a48:	4311      	orrs	r1, r2
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a4e:	06d2      	lsls	r2, r2, #27
 8002a50:	430a      	orrs	r2, r1
 8002a52:	493f      	ldr	r1, [pc, #252]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a58:	4b3d      	ldr	r3, [pc, #244]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a3c      	ldr	r2, [pc, #240]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 8002a5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a64:	4b3a      	ldr	r3, [pc, #232]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	4a39      	ldr	r2, [pc, #228]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 8002a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a70:	f7fe fad6 	bl	8001020 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a78:	f7fe fad2 	bl	8001020 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e067      	b.n	8002b5a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a8a:	4b31      	ldr	r3, [pc, #196]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a96:	e05f      	b.n	8002b58 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e05e      	b.n	8002b5a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a9c:	4b2c      	ldr	r3, [pc, #176]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d157      	bne.n	8002b58 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002aa8:	4b29      	ldr	r3, [pc, #164]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a28      	ldr	r2, [pc, #160]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 8002aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ab2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ab4:	4b26      	ldr	r3, [pc, #152]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4a25      	ldr	r2, [pc, #148]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 8002aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002abe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ac0:	f7fe faae 	bl	8001020 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac8:	f7fe faaa 	bl	8001020 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e03f      	b.n	8002b5a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ada:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x7a4>
 8002ae6:	e037      	b.n	8002b58 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	2b0c      	cmp	r3, #12
 8002aec:	d02d      	beq.n	8002b4a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aee:	4b18      	ldr	r3, [pc, #96]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a17      	ldr	r2, [pc, #92]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 8002af4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002af8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002afa:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d105      	bne.n	8002b12 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002b06:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	4a11      	ldr	r2, [pc, #68]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 8002b0c:	f023 0303 	bic.w	r3, r3, #3
 8002b10:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002b12:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	4a0e      	ldr	r2, [pc, #56]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 8002b18:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b20:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b22:	f7fe fa7d 	bl	8001020 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2a:	f7fe fa79 	bl	8001020 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e00e      	b.n	8002b5a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b3c:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <HAL_RCC_OscConfig+0x82c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1f0      	bne.n	8002b2a <HAL_RCC_OscConfig+0x806>
 8002b48:	e006      	b.n	8002b58 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e005      	b.n	8002b5a <HAL_RCC_OscConfig+0x836>
 8002b4e:	bf00      	nop
 8002b50:	40021000 	.word	0x40021000
 8002b54:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3720      	adds	r7, #32
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop

08002b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0c8      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b78:	4b66      	ldr	r3, [pc, #408]	; (8002d14 <HAL_RCC_ClockConfig+0x1b0>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d910      	bls.n	8002ba8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b63      	ldr	r3, [pc, #396]	; (8002d14 <HAL_RCC_ClockConfig+0x1b0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 0207 	bic.w	r2, r3, #7
 8002b8e:	4961      	ldr	r1, [pc, #388]	; (8002d14 <HAL_RCC_ClockConfig+0x1b0>)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b96:	4b5f      	ldr	r3, [pc, #380]	; (8002d14 <HAL_RCC_ClockConfig+0x1b0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0b0      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d04c      	beq.n	8002c4e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d107      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bbc:	4b56      	ldr	r3, [pc, #344]	; (8002d18 <HAL_RCC_ClockConfig+0x1b4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d121      	bne.n	8002c0c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e09e      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d107      	bne.n	8002be4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bd4:	4b50      	ldr	r3, [pc, #320]	; (8002d18 <HAL_RCC_ClockConfig+0x1b4>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d115      	bne.n	8002c0c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e092      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d107      	bne.n	8002bfc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bec:	4b4a      	ldr	r3, [pc, #296]	; (8002d18 <HAL_RCC_ClockConfig+0x1b4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d109      	bne.n	8002c0c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e086      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bfc:	4b46      	ldr	r3, [pc, #280]	; (8002d18 <HAL_RCC_ClockConfig+0x1b4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e07e      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c0c:	4b42      	ldr	r3, [pc, #264]	; (8002d18 <HAL_RCC_ClockConfig+0x1b4>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f023 0203 	bic.w	r2, r3, #3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	493f      	ldr	r1, [pc, #252]	; (8002d18 <HAL_RCC_ClockConfig+0x1b4>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c1e:	f7fe f9ff 	bl	8001020 <HAL_GetTick>
 8002c22:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c24:	e00a      	b.n	8002c3c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c26:	f7fe f9fb 	bl	8001020 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e066      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3c:	4b36      	ldr	r3, [pc, #216]	; (8002d18 <HAL_RCC_ClockConfig+0x1b4>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 020c 	and.w	r2, r3, #12
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d1eb      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d008      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c5a:	4b2f      	ldr	r3, [pc, #188]	; (8002d18 <HAL_RCC_ClockConfig+0x1b4>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	492c      	ldr	r1, [pc, #176]	; (8002d18 <HAL_RCC_ClockConfig+0x1b4>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c6c:	4b29      	ldr	r3, [pc, #164]	; (8002d14 <HAL_RCC_ClockConfig+0x1b0>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d210      	bcs.n	8002c9c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7a:	4b26      	ldr	r3, [pc, #152]	; (8002d14 <HAL_RCC_ClockConfig+0x1b0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f023 0207 	bic.w	r2, r3, #7
 8002c82:	4924      	ldr	r1, [pc, #144]	; (8002d14 <HAL_RCC_ClockConfig+0x1b0>)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8a:	4b22      	ldr	r3, [pc, #136]	; (8002d14 <HAL_RCC_ClockConfig+0x1b0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e036      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca8:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <HAL_RCC_ClockConfig+0x1b4>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	4918      	ldr	r1, [pc, #96]	; (8002d18 <HAL_RCC_ClockConfig+0x1b4>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d009      	beq.n	8002cda <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cc6:	4b14      	ldr	r3, [pc, #80]	; (8002d18 <HAL_RCC_ClockConfig+0x1b4>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	4910      	ldr	r1, [pc, #64]	; (8002d18 <HAL_RCC_ClockConfig+0x1b4>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cda:	f000 f825 	bl	8002d28 <HAL_RCC_GetSysClockFreq>
 8002cde:	4601      	mov	r1, r0
 8002ce0:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <HAL_RCC_ClockConfig+0x1b4>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	091b      	lsrs	r3, r3, #4
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	4a0c      	ldr	r2, [pc, #48]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002cec:	5cd3      	ldrb	r3, [r2, r3]
 8002cee:	f003 031f 	and.w	r3, r3, #31
 8002cf2:	fa21 f303 	lsr.w	r3, r1, r3
 8002cf6:	4a0a      	ldr	r2, [pc, #40]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe f878 	bl	8000df4 <HAL_InitTick>
 8002d04:	4603      	mov	r3, r0
 8002d06:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d08:	7afb      	ldrb	r3, [r7, #11]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40022000 	.word	0x40022000
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	08007190 	.word	0x08007190
 8002d20:	20000008 	.word	0x20000008
 8002d24:	2000000c 	.word	0x2000000c

08002d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b089      	sub	sp, #36	; 0x24
 8002d2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
 8002d32:	2300      	movs	r3, #0
 8002d34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d36:	4b3d      	ldr	r3, [pc, #244]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x104>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
 8002d3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d40:	4b3a      	ldr	r3, [pc, #232]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x104>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f003 0303 	and.w	r3, r3, #3
 8002d48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_RCC_GetSysClockFreq+0x34>
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	2b0c      	cmp	r3, #12
 8002d54:	d121      	bne.n	8002d9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d11e      	bne.n	8002d9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d5c:	4b33      	ldr	r3, [pc, #204]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x104>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d107      	bne.n	8002d78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d68:	4b30      	ldr	r3, [pc, #192]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x104>)
 8002d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d6e:	0a1b      	lsrs	r3, r3, #8
 8002d70:	f003 030f 	and.w	r3, r3, #15
 8002d74:	61fb      	str	r3, [r7, #28]
 8002d76:	e005      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d78:	4b2c      	ldr	r3, [pc, #176]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x104>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d84:	4a2a      	ldr	r2, [pc, #168]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10d      	bne.n	8002db0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d98:	e00a      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d102      	bne.n	8002da6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002da0:	4b24      	ldr	r3, [pc, #144]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002da2:	61bb      	str	r3, [r7, #24]
 8002da4:	e004      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d101      	bne.n	8002db0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002dac:	4b21      	ldr	r3, [pc, #132]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	2b0c      	cmp	r3, #12
 8002db4:	d133      	bne.n	8002e1e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002db6:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x104>)
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d002      	beq.n	8002dcc <HAL_RCC_GetSysClockFreq+0xa4>
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d003      	beq.n	8002dd2 <HAL_RCC_GetSysClockFreq+0xaa>
 8002dca:	e005      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002dcc:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dce:	617b      	str	r3, [r7, #20]
      break;
 8002dd0:	e005      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002dd2:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dd4:	617b      	str	r3, [r7, #20]
      break;
 8002dd6:	e002      	b.n	8002dde <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	617b      	str	r3, [r7, #20]
      break;
 8002ddc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dde:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x104>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	091b      	lsrs	r3, r3, #4
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	3301      	adds	r3, #1
 8002dea:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002dec:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x104>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	0a1b      	lsrs	r3, r3, #8
 8002df2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	fb02 f203 	mul.w	r2, r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e02:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e04:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x104>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	0e5b      	lsrs	r3, r3, #25
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	3301      	adds	r3, #1
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e1e:	69bb      	ldr	r3, [r7, #24]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3724      	adds	r7, #36	; 0x24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	080071a8 	.word	0x080071a8
 8002e34:	00f42400 	.word	0x00f42400

08002e38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e3c:	4b03      	ldr	r3, [pc, #12]	; (8002e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	20000008 	.word	0x20000008

08002e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e54:	f7ff fff0 	bl	8002e38 <HAL_RCC_GetHCLKFreq>
 8002e58:	4601      	mov	r1, r0
 8002e5a:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	0a1b      	lsrs	r3, r3, #8
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	4a04      	ldr	r2, [pc, #16]	; (8002e78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e66:	5cd3      	ldrb	r3, [r2, r3]
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40021000 	.word	0x40021000
 8002e78:	080071a0 	.word	0x080071a0

08002e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e80:	f7ff ffda 	bl	8002e38 <HAL_RCC_GetHCLKFreq>
 8002e84:	4601      	mov	r1, r0
 8002e86:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	0adb      	lsrs	r3, r3, #11
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	4a04      	ldr	r2, [pc, #16]	; (8002ea4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e92:	5cd3      	ldrb	r3, [r2, r3]
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	080071a0 	.word	0x080071a0

08002ea8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	220f      	movs	r2, #15
 8002eb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002eb8:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <HAL_RCC_GetClockConfig+0x5c>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 0203 	and.w	r2, r3, #3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002ec4:	4b0f      	ldr	r3, [pc, #60]	; (8002f04 <HAL_RCC_GetClockConfig+0x5c>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <HAL_RCC_GetClockConfig+0x5c>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002edc:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <HAL_RCC_GetClockConfig+0x5c>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	08db      	lsrs	r3, r3, #3
 8002ee2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002eea:	4b07      	ldr	r3, [pc, #28]	; (8002f08 <HAL_RCC_GetClockConfig+0x60>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0207 	and.w	r2, r3, #7
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	601a      	str	r2, [r3, #0]
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40022000 	.word	0x40022000

08002f0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f14:	2300      	movs	r3, #0
 8002f16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f18:	4b2a      	ldr	r3, [pc, #168]	; (8002fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f24:	f7ff f99a 	bl	800225c <HAL_PWREx_GetVoltageRange>
 8002f28:	6178      	str	r0, [r7, #20]
 8002f2a:	e014      	b.n	8002f56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f2c:	4b25      	ldr	r3, [pc, #148]	; (8002fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f30:	4a24      	ldr	r2, [pc, #144]	; (8002fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f36:	6593      	str	r3, [r2, #88]	; 0x58
 8002f38:	4b22      	ldr	r3, [pc, #136]	; (8002fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f44:	f7ff f98a 	bl	800225c <HAL_PWREx_GetVoltageRange>
 8002f48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f4a:	4b1e      	ldr	r3, [pc, #120]	; (8002fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4e:	4a1d      	ldr	r2, [pc, #116]	; (8002fc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f54:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f5c:	d10b      	bne.n	8002f76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b80      	cmp	r3, #128	; 0x80
 8002f62:	d919      	bls.n	8002f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2ba0      	cmp	r3, #160	; 0xa0
 8002f68:	d902      	bls.n	8002f70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	e013      	b.n	8002f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f70:	2301      	movs	r3, #1
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	e010      	b.n	8002f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b80      	cmp	r3, #128	; 0x80
 8002f7a:	d902      	bls.n	8002f82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	613b      	str	r3, [r7, #16]
 8002f80:	e00a      	b.n	8002f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b80      	cmp	r3, #128	; 0x80
 8002f86:	d102      	bne.n	8002f8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f88:	2302      	movs	r3, #2
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	e004      	b.n	8002f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b70      	cmp	r3, #112	; 0x70
 8002f92:	d101      	bne.n	8002f98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f94:	2301      	movs	r3, #1
 8002f96:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f98:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f023 0207 	bic.w	r2, r3, #7
 8002fa0:	4909      	ldr	r1, [pc, #36]	; (8002fc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fa8:	4b07      	ldr	r3, [pc, #28]	; (8002fc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d001      	beq.n	8002fba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40022000 	.word	0x40022000

08002fcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fd8:	2300      	movs	r3, #0
 8002fda:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d02f      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ff0:	d005      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002ff2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ff6:	d015      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d007      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002ffc:	e00f      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002ffe:	4bac      	ldr	r3, [pc, #688]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	4aab      	ldr	r2, [pc, #684]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003008:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800300a:	e00c      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3304      	adds	r3, #4
 8003010:	2100      	movs	r1, #0
 8003012:	4618      	mov	r0, r3
 8003014:	f000 f9dc 	bl	80033d0 <RCCEx_PLLSAI1_Config>
 8003018:	4603      	mov	r3, r0
 800301a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800301c:	e003      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	74fb      	strb	r3, [r7, #19]
      break;
 8003022:	e000      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8003024:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003026:	7cfb      	ldrb	r3, [r7, #19]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10b      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800302c:	4ba0      	ldr	r3, [pc, #640]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800302e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003032:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303a:	499d      	ldr	r1, [pc, #628]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003042:	e001      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003044:	7cfb      	ldrb	r3, [r7, #19]
 8003046:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 8099 	beq.w	8003188 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003056:	2300      	movs	r3, #0
 8003058:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800305a:	4b95      	ldr	r3, [pc, #596]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800305c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800306a:	2300      	movs	r3, #0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00d      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003070:	4b8f      	ldr	r3, [pc, #572]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003074:	4a8e      	ldr	r2, [pc, #568]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800307a:	6593      	str	r3, [r2, #88]	; 0x58
 800307c:	4b8c      	ldr	r3, [pc, #560]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800307e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003084:	60bb      	str	r3, [r7, #8]
 8003086:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003088:	2301      	movs	r3, #1
 800308a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800308c:	4b89      	ldr	r3, [pc, #548]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a88      	ldr	r2, [pc, #544]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003096:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003098:	f7fd ffc2 	bl	8001020 <HAL_GetTick>
 800309c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800309e:	e009      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a0:	f7fd ffbe 	bl	8001020 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d902      	bls.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	74fb      	strb	r3, [r7, #19]
        break;
 80030b2:	e005      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030b4:	4b7f      	ldr	r3, [pc, #508]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0ef      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80030c0:	7cfb      	ldrb	r3, [r7, #19]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d155      	bne.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030c6:	4b7a      	ldr	r3, [pc, #488]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d01e      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d019      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030e2:	4b73      	ldr	r3, [pc, #460]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030ee:	4b70      	ldr	r3, [pc, #448]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f4:	4a6e      	ldr	r2, [pc, #440]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80030f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030fe:	4b6c      	ldr	r3, [pc, #432]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003104:	4a6a      	ldr	r2, [pc, #424]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800310e:	4a68      	ldr	r2, [pc, #416]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d016      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7fd ff7e 	bl	8001020 <HAL_GetTick>
 8003124:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003126:	e00b      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003128:	f7fd ff7a 	bl	8001020 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f241 3288 	movw	r2, #5000	; 0x1388
 8003136:	4293      	cmp	r3, r2
 8003138:	d902      	bls.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	74fb      	strb	r3, [r7, #19]
            break;
 800313e:	e006      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003140:	4b5b      	ldr	r3, [pc, #364]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0ec      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800314e:	7cfb      	ldrb	r3, [r7, #19]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10b      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003154:	4b56      	ldr	r3, [pc, #344]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003162:	4953      	ldr	r1, [pc, #332]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003164:	4313      	orrs	r3, r2
 8003166:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800316a:	e004      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800316c:	7cfb      	ldrb	r3, [r7, #19]
 800316e:	74bb      	strb	r3, [r7, #18]
 8003170:	e001      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003172:	7cfb      	ldrb	r3, [r7, #19]
 8003174:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003176:	7c7b      	ldrb	r3, [r7, #17]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d105      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317c:	4b4c      	ldr	r3, [pc, #304]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800317e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003180:	4a4b      	ldr	r2, [pc, #300]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003186:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00a      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003194:	4b46      	ldr	r3, [pc, #280]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319a:	f023 0203 	bic.w	r2, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	4943      	ldr	r1, [pc, #268]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031b6:	4b3e      	ldr	r3, [pc, #248]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031bc:	f023 020c 	bic.w	r2, r3, #12
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	493a      	ldr	r1, [pc, #232]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0320 	and.w	r3, r3, #32
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031d8:	4b35      	ldr	r3, [pc, #212]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e6:	4932      	ldr	r1, [pc, #200]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031fa:	4b2d      	ldr	r3, [pc, #180]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80031fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003200:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003208:	4929      	ldr	r1, [pc, #164]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800321c:	4b24      	ldr	r3, [pc, #144]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003222:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322a:	4921      	ldr	r1, [pc, #132]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800323e:	4b1c      	ldr	r3, [pc, #112]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003244:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	4918      	ldr	r1, [pc, #96]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003260:	4b13      	ldr	r3, [pc, #76]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003266:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	4910      	ldr	r1, [pc, #64]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d02c      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003282:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003288:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	4907      	ldr	r1, [pc, #28]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032a0:	d10a      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032a2:	4b03      	ldr	r3, [pc, #12]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	4a02      	ldr	r2, [pc, #8]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80032a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032ac:	60d3      	str	r3, [r2, #12]
 80032ae:	e015      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80032b0:	40021000 	.word	0x40021000
 80032b4:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032c0:	d10c      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3304      	adds	r3, #4
 80032c6:	2101      	movs	r1, #1
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 f881 	bl	80033d0 <RCCEx_PLLSAI1_Config>
 80032ce:	4603      	mov	r3, r0
 80032d0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032d2:	7cfb      	ldrb	r3, [r7, #19]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 80032d8:	7cfb      	ldrb	r3, [r7, #19]
 80032da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d028      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032e8:	4b30      	ldr	r3, [pc, #192]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	492d      	ldr	r1, [pc, #180]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003306:	d106      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003308:	4b28      	ldr	r3, [pc, #160]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4a27      	ldr	r2, [pc, #156]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800330e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003312:	60d3      	str	r3, [r2, #12]
 8003314:	e011      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800331e:	d10c      	bne.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3304      	adds	r3, #4
 8003324:	2101      	movs	r1, #1
 8003326:	4618      	mov	r0, r3
 8003328:	f000 f852 	bl	80033d0 <RCCEx_PLLSAI1_Config>
 800332c:	4603      	mov	r3, r0
 800332e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003330:	7cfb      	ldrb	r3, [r7, #19]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8003336:	7cfb      	ldrb	r3, [r7, #19]
 8003338:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d01c      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003346:	4b19      	ldr	r3, [pc, #100]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003354:	4915      	ldr	r1, [pc, #84]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003356:	4313      	orrs	r3, r2
 8003358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003360:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003364:	d10c      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3304      	adds	r3, #4
 800336a:	2102      	movs	r1, #2
 800336c:	4618      	mov	r0, r3
 800336e:	f000 f82f 	bl	80033d0 <RCCEx_PLLSAI1_Config>
 8003372:	4603      	mov	r3, r0
 8003374:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003376:	7cfb      	ldrb	r3, [r7, #19]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 800337c:	7cfb      	ldrb	r3, [r7, #19]
 800337e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800338c:	4b07      	ldr	r3, [pc, #28]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800338e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003392:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800339a:	4904      	ldr	r1, [pc, #16]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40021000 	.word	0x40021000

080033b0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80033b4:	4b05      	ldr	r3, [pc, #20]	; (80033cc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a04      	ldr	r2, [pc, #16]	; (80033cc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80033ba:	f043 0304 	orr.w	r3, r3, #4
 80033be:	6013      	str	r3, [r2, #0]
}
 80033c0:	bf00      	nop
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40021000 	.word	0x40021000

080033d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033de:	4b73      	ldr	r3, [pc, #460]	; (80035ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d018      	beq.n	800341c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033ea:	4b70      	ldr	r3, [pc, #448]	; (80035ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f003 0203 	and.w	r2, r3, #3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d10d      	bne.n	8003416 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
       ||
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d009      	beq.n	8003416 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003402:	4b6a      	ldr	r3, [pc, #424]	; (80035ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	091b      	lsrs	r3, r3, #4
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
       ||
 8003412:	429a      	cmp	r2, r3
 8003414:	d044      	beq.n	80034a0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	73fb      	strb	r3, [r7, #15]
 800341a:	e041      	b.n	80034a0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b02      	cmp	r3, #2
 8003422:	d00c      	beq.n	800343e <RCCEx_PLLSAI1_Config+0x6e>
 8003424:	2b03      	cmp	r3, #3
 8003426:	d013      	beq.n	8003450 <RCCEx_PLLSAI1_Config+0x80>
 8003428:	2b01      	cmp	r3, #1
 800342a:	d120      	bne.n	800346e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800342c:	4b5f      	ldr	r3, [pc, #380]	; (80035ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d11d      	bne.n	8003474 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800343c:	e01a      	b.n	8003474 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800343e:	4b5b      	ldr	r3, [pc, #364]	; (80035ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003446:	2b00      	cmp	r3, #0
 8003448:	d116      	bne.n	8003478 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800344e:	e013      	b.n	8003478 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003450:	4b56      	ldr	r3, [pc, #344]	; (80035ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10f      	bne.n	800347c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800345c:	4b53      	ldr	r3, [pc, #332]	; (80035ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d109      	bne.n	800347c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800346c:	e006      	b.n	800347c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	73fb      	strb	r3, [r7, #15]
      break;
 8003472:	e004      	b.n	800347e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003474:	bf00      	nop
 8003476:	e002      	b.n	800347e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003478:	bf00      	nop
 800347a:	e000      	b.n	800347e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800347c:	bf00      	nop
    }

    if(status == HAL_OK)
 800347e:	7bfb      	ldrb	r3, [r7, #15]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10d      	bne.n	80034a0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003484:	4b49      	ldr	r3, [pc, #292]	; (80035ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6819      	ldr	r1, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	3b01      	subs	r3, #1
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	430b      	orrs	r3, r1
 800349a:	4944      	ldr	r1, [pc, #272]	; (80035ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800349c:	4313      	orrs	r3, r2
 800349e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d17c      	bne.n	80035a0 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034a6:	4b41      	ldr	r3, [pc, #260]	; (80035ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a40      	ldr	r2, [pc, #256]	; (80035ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80034ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b2:	f7fd fdb5 	bl	8001020 <HAL_GetTick>
 80034b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034b8:	e009      	b.n	80034ce <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034ba:	f7fd fdb1 	bl	8001020 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d902      	bls.n	80034ce <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	73fb      	strb	r3, [r7, #15]
        break;
 80034cc:	e005      	b.n	80034da <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034ce:	4b37      	ldr	r3, [pc, #220]	; (80035ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1ef      	bne.n	80034ba <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d15f      	bne.n	80035a0 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d110      	bne.n	8003508 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034e6:	4b31      	ldr	r3, [pc, #196]	; (80035ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80034ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6892      	ldr	r2, [r2, #8]
 80034f6:	0211      	lsls	r1, r2, #8
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	68d2      	ldr	r2, [r2, #12]
 80034fc:	06d2      	lsls	r2, r2, #27
 80034fe:	430a      	orrs	r2, r1
 8003500:	492a      	ldr	r1, [pc, #168]	; (80035ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003502:	4313      	orrs	r3, r2
 8003504:	610b      	str	r3, [r1, #16]
 8003506:	e027      	b.n	8003558 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d112      	bne.n	8003534 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800350e:	4b27      	ldr	r3, [pc, #156]	; (80035ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003516:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6892      	ldr	r2, [r2, #8]
 800351e:	0211      	lsls	r1, r2, #8
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6912      	ldr	r2, [r2, #16]
 8003524:	0852      	lsrs	r2, r2, #1
 8003526:	3a01      	subs	r2, #1
 8003528:	0552      	lsls	r2, r2, #21
 800352a:	430a      	orrs	r2, r1
 800352c:	491f      	ldr	r1, [pc, #124]	; (80035ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800352e:	4313      	orrs	r3, r2
 8003530:	610b      	str	r3, [r1, #16]
 8003532:	e011      	b.n	8003558 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003534:	4b1d      	ldr	r3, [pc, #116]	; (80035ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800353c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6892      	ldr	r2, [r2, #8]
 8003544:	0211      	lsls	r1, r2, #8
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6952      	ldr	r2, [r2, #20]
 800354a:	0852      	lsrs	r2, r2, #1
 800354c:	3a01      	subs	r2, #1
 800354e:	0652      	lsls	r2, r2, #25
 8003550:	430a      	orrs	r2, r1
 8003552:	4916      	ldr	r1, [pc, #88]	; (80035ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003554:	4313      	orrs	r3, r2
 8003556:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003558:	4b14      	ldr	r3, [pc, #80]	; (80035ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a13      	ldr	r2, [pc, #76]	; (80035ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800355e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003562:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003564:	f7fd fd5c 	bl	8001020 <HAL_GetTick>
 8003568:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800356a:	e009      	b.n	8003580 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800356c:	f7fd fd58 	bl	8001020 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d902      	bls.n	8003580 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	73fb      	strb	r3, [r7, #15]
          break;
 800357e:	e005      	b.n	800358c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003580:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0ef      	beq.n	800356c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003592:	4b06      	ldr	r3, [pc, #24]	; (80035ac <RCCEx_PLLSAI1_Config+0x1dc>)
 8003594:	691a      	ldr	r2, [r3, #16]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	4904      	ldr	r1, [pc, #16]	; (80035ac <RCCEx_PLLSAI1_Config+0x1dc>)
 800359c:	4313      	orrs	r3, r2
 800359e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40021000 	.word	0x40021000

080035b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e049      	b.n	8003656 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f841 	bl	800365e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3304      	adds	r3, #4
 80035ec:	4619      	mov	r1, r3
 80035ee:	4610      	mov	r0, r2
 80035f0:	f000 f9dc 	bl	80039ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
	...

08003674 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b01      	cmp	r3, #1
 8003686:	d001      	beq.n	800368c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e03b      	b.n	8003704 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a19      	ldr	r2, [pc, #100]	; (8003710 <HAL_TIM_Base_Start_IT+0x9c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d009      	beq.n	80036c2 <HAL_TIM_Base_Start_IT+0x4e>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b6:	d004      	beq.n	80036c2 <HAL_TIM_Base_Start_IT+0x4e>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a15      	ldr	r2, [pc, #84]	; (8003714 <HAL_TIM_Base_Start_IT+0xa0>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d115      	bne.n	80036ee <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	4b13      	ldr	r3, [pc, #76]	; (8003718 <HAL_TIM_Base_Start_IT+0xa4>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2b06      	cmp	r3, #6
 80036d2:	d015      	beq.n	8003700 <HAL_TIM_Base_Start_IT+0x8c>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036da:	d011      	beq.n	8003700 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ec:	e008      	b.n	8003700 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f042 0201 	orr.w	r2, r2, #1
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	e000      	b.n	8003702 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003700:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	40012c00 	.word	0x40012c00
 8003714:	40014000 	.word	0x40014000
 8003718:	00010007 	.word	0x00010007

0800371c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b02      	cmp	r3, #2
 8003730:	d122      	bne.n	8003778 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b02      	cmp	r3, #2
 800373e:	d11b      	bne.n	8003778 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f06f 0202 	mvn.w	r2, #2
 8003748:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f905 	bl	800396e <HAL_TIM_IC_CaptureCallback>
 8003764:	e005      	b.n	8003772 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f8f7 	bl	800395a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f908 	bl	8003982 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0304 	and.w	r3, r3, #4
 8003782:	2b04      	cmp	r3, #4
 8003784:	d122      	bne.n	80037cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b04      	cmp	r3, #4
 8003792:	d11b      	bne.n	80037cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0204 	mvn.w	r2, #4
 800379c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2202      	movs	r2, #2
 80037a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f8db 	bl	800396e <HAL_TIM_IC_CaptureCallback>
 80037b8:	e005      	b.n	80037c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f8cd 	bl	800395a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f8de 	bl	8003982 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d122      	bne.n	8003820 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d11b      	bne.n	8003820 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0208 	mvn.w	r2, #8
 80037f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2204      	movs	r2, #4
 80037f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f8b1 	bl	800396e <HAL_TIM_IC_CaptureCallback>
 800380c:	e005      	b.n	800381a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f8a3 	bl	800395a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f8b4 	bl	8003982 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b10      	cmp	r3, #16
 800382c:	d122      	bne.n	8003874 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f003 0310 	and.w	r3, r3, #16
 8003838:	2b10      	cmp	r3, #16
 800383a:	d11b      	bne.n	8003874 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f06f 0210 	mvn.w	r2, #16
 8003844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2208      	movs	r2, #8
 800384a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f887 	bl	800396e <HAL_TIM_IC_CaptureCallback>
 8003860:	e005      	b.n	800386e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f879 	bl	800395a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f88a 	bl	8003982 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b01      	cmp	r3, #1
 8003880:	d10e      	bne.n	80038a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b01      	cmp	r3, #1
 800388e:	d107      	bne.n	80038a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f06f 0201 	mvn.w	r2, #1
 8003898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7fd f948 	bl	8000b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038aa:	2b80      	cmp	r3, #128	; 0x80
 80038ac:	d10e      	bne.n	80038cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b8:	2b80      	cmp	r3, #128	; 0x80
 80038ba:	d107      	bne.n	80038cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f8de 	bl	8003a88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038da:	d10e      	bne.n	80038fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e6:	2b80      	cmp	r3, #128	; 0x80
 80038e8:	d107      	bne.n	80038fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f8d1 	bl	8003a9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003904:	2b40      	cmp	r3, #64	; 0x40
 8003906:	d10e      	bne.n	8003926 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003912:	2b40      	cmp	r3, #64	; 0x40
 8003914:	d107      	bne.n	8003926 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800391e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f838 	bl	8003996 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b20      	cmp	r3, #32
 8003932:	d10e      	bne.n	8003952 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f003 0320 	and.w	r3, r3, #32
 800393e:	2b20      	cmp	r3, #32
 8003940:	d107      	bne.n	8003952 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f06f 0220 	mvn.w	r2, #32
 800394a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f891 	bl	8003a74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
	...

080039ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a2a      	ldr	r2, [pc, #168]	; (8003a68 <TIM_Base_SetConfig+0xbc>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d003      	beq.n	80039cc <TIM_Base_SetConfig+0x20>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ca:	d108      	bne.n	80039de <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a21      	ldr	r2, [pc, #132]	; (8003a68 <TIM_Base_SetConfig+0xbc>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d00b      	beq.n	80039fe <TIM_Base_SetConfig+0x52>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ec:	d007      	beq.n	80039fe <TIM_Base_SetConfig+0x52>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a1e      	ldr	r2, [pc, #120]	; (8003a6c <TIM_Base_SetConfig+0xc0>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d003      	beq.n	80039fe <TIM_Base_SetConfig+0x52>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a1d      	ldr	r2, [pc, #116]	; (8003a70 <TIM_Base_SetConfig+0xc4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d108      	bne.n	8003a10 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a0c      	ldr	r2, [pc, #48]	; (8003a68 <TIM_Base_SetConfig+0xbc>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d007      	beq.n	8003a4c <TIM_Base_SetConfig+0xa0>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a0b      	ldr	r2, [pc, #44]	; (8003a6c <TIM_Base_SetConfig+0xc0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d003      	beq.n	8003a4c <TIM_Base_SetConfig+0xa0>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a0a      	ldr	r2, [pc, #40]	; (8003a70 <TIM_Base_SetConfig+0xc4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d103      	bne.n	8003a54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	615a      	str	r2, [r3, #20]
}
 8003a5a:	bf00      	nop
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	40012c00 	.word	0x40012c00
 8003a6c:	40014000 	.word	0x40014000
 8003a70:	40014400 	.word	0x40014400

08003a74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e040      	b.n	8003b44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d106      	bne.n	8003ad8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7fd f8f2 	bl	8000cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2224      	movs	r2, #36	; 0x24
 8003adc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0201 	bic.w	r2, r2, #1
 8003aec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f962 	bl	8003db8 <UART_SetConfig>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d101      	bne.n	8003afe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e022      	b.n	8003b44 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fb66 	bl	80041d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 fbed 	bl	800431c <UART_CheckIdleState>
 8003b42:	4603      	mov	r3, r0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	; 0x28
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	f040 8081 	bne.w	8003c68 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <HAL_UART_Transmit+0x26>
 8003b6c:	88fb      	ldrh	r3, [r7, #6]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e079      	b.n	8003c6a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <HAL_UART_Transmit+0x38>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e072      	b.n	8003c6a <HAL_UART_Transmit+0x11e>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2221      	movs	r2, #33	; 0x21
 8003b96:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003b98:	f7fd fa42 	bl	8001020 <HAL_GetTick>
 8003b9c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	88fa      	ldrh	r2, [r7, #6]
 8003ba2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	88fa      	ldrh	r2, [r7, #6]
 8003baa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb6:	d108      	bne.n	8003bca <HAL_UART_Transmit+0x7e>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d104      	bne.n	8003bca <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	61bb      	str	r3, [r7, #24]
 8003bc8:	e003      	b.n	8003bd2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003bda:	e02d      	b.n	8003c38 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2200      	movs	r2, #0
 8003be4:	2180      	movs	r1, #128	; 0x80
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 fbdd 	bl	80043a6 <UART_WaitOnFlagUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e039      	b.n	8003c6a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10b      	bne.n	8003c14 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	881a      	ldrh	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c08:	b292      	uxth	r2, r2
 8003c0a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	3302      	adds	r3, #2
 8003c10:	61bb      	str	r3, [r7, #24]
 8003c12:	e008      	b.n	8003c26 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	781a      	ldrb	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	b292      	uxth	r2, r2
 8003c1e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	3301      	adds	r3, #1
 8003c24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1cb      	bne.n	8003bdc <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	2140      	movs	r1, #64	; 0x40
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 fba9 	bl	80043a6 <UART_WaitOnFlagUntilTimeout>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e005      	b.n	8003c6a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2220      	movs	r2, #32
 8003c62:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	e000      	b.n	8003c6a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003c68:	2302      	movs	r3, #2
  }
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3720      	adds	r7, #32
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c86:	2b20      	cmp	r3, #32
 8003c88:	d16c      	bne.n	8003d64 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <HAL_UART_Receive_DMA+0x22>
 8003c90:	88fb      	ldrh	r3, [r7, #6]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e065      	b.n	8003d66 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_UART_Receive_DMA+0x34>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e05e      	b.n	8003d66 <HAL_UART_Receive_DMA+0xf2>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	88fa      	ldrh	r2, [r7, #6]
 8003cba:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2222      	movs	r2, #34	; 0x22
 8003cc8:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d02a      	beq.n	8003d28 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cd6:	4a26      	ldr	r2, [pc, #152]	; (8003d70 <HAL_UART_Receive_DMA+0xfc>)
 8003cd8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cde:	4a25      	ldr	r2, [pc, #148]	; (8003d74 <HAL_UART_Receive_DMA+0x100>)
 8003ce0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ce6:	4a24      	ldr	r2, [pc, #144]	; (8003d78 <HAL_UART_Receive_DMA+0x104>)
 8003ce8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cee:	2200      	movs	r2, #0
 8003cf0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3324      	adds	r3, #36	; 0x24
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d02:	461a      	mov	r2, r3
 8003d04:	88fb      	ldrh	r3, [r7, #6]
 8003d06:	f7fd fc2d 	bl	8001564 <HAL_DMA_Start_IT>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00b      	beq.n	8003d28 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2210      	movs	r2, #16
 8003d14:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2220      	movs	r2, #32
 8003d22:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e01e      	b.n	8003d66 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d3e:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0201 	orr.w	r2, r2, #1
 8003d4e:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d5e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	e000      	b.n	8003d66 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8003d64:	2302      	movs	r3, #2
  }
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	08004507 	.word	0x08004507
 8003d74:	0800456f 	.word	0x0800456f
 8003d78:	0800458b 	.word	0x0800458b

08003d7c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003db8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003dbc:	b088      	sub	sp, #32
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	4bb0      	ldr	r3, [pc, #704]	; (80040a8 <UART_SetConfig+0x2f0>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	69f9      	ldr	r1, [r7, #28]
 8003dee:	430b      	orrs	r3, r1
 8003df0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4aa6      	ldr	r2, [pc, #664]	; (80040ac <UART_SetConfig+0x2f4>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d004      	beq.n	8003e22 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	69fa      	ldr	r2, [r7, #28]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	69fa      	ldr	r2, [r7, #28]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a9d      	ldr	r2, [pc, #628]	; (80040b0 <UART_SetConfig+0x2f8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d121      	bne.n	8003e84 <UART_SetConfig+0xcc>
 8003e40:	4b9c      	ldr	r3, [pc, #624]	; (80040b4 <UART_SetConfig+0x2fc>)
 8003e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	d816      	bhi.n	8003e7c <UART_SetConfig+0xc4>
 8003e4e:	a201      	add	r2, pc, #4	; (adr r2, 8003e54 <UART_SetConfig+0x9c>)
 8003e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e54:	08003e65 	.word	0x08003e65
 8003e58:	08003e71 	.word	0x08003e71
 8003e5c:	08003e6b 	.word	0x08003e6b
 8003e60:	08003e77 	.word	0x08003e77
 8003e64:	2301      	movs	r3, #1
 8003e66:	76fb      	strb	r3, [r7, #27]
 8003e68:	e072      	b.n	8003f50 <UART_SetConfig+0x198>
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	76fb      	strb	r3, [r7, #27]
 8003e6e:	e06f      	b.n	8003f50 <UART_SetConfig+0x198>
 8003e70:	2304      	movs	r3, #4
 8003e72:	76fb      	strb	r3, [r7, #27]
 8003e74:	e06c      	b.n	8003f50 <UART_SetConfig+0x198>
 8003e76:	2308      	movs	r3, #8
 8003e78:	76fb      	strb	r3, [r7, #27]
 8003e7a:	e069      	b.n	8003f50 <UART_SetConfig+0x198>
 8003e7c:	2310      	movs	r3, #16
 8003e7e:	76fb      	strb	r3, [r7, #27]
 8003e80:	bf00      	nop
 8003e82:	e065      	b.n	8003f50 <UART_SetConfig+0x198>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a8b      	ldr	r2, [pc, #556]	; (80040b8 <UART_SetConfig+0x300>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d134      	bne.n	8003ef8 <UART_SetConfig+0x140>
 8003e8e:	4b89      	ldr	r3, [pc, #548]	; (80040b4 <UART_SetConfig+0x2fc>)
 8003e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e94:	f003 030c 	and.w	r3, r3, #12
 8003e98:	2b0c      	cmp	r3, #12
 8003e9a:	d829      	bhi.n	8003ef0 <UART_SetConfig+0x138>
 8003e9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ea4 <UART_SetConfig+0xec>)
 8003e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea2:	bf00      	nop
 8003ea4:	08003ed9 	.word	0x08003ed9
 8003ea8:	08003ef1 	.word	0x08003ef1
 8003eac:	08003ef1 	.word	0x08003ef1
 8003eb0:	08003ef1 	.word	0x08003ef1
 8003eb4:	08003ee5 	.word	0x08003ee5
 8003eb8:	08003ef1 	.word	0x08003ef1
 8003ebc:	08003ef1 	.word	0x08003ef1
 8003ec0:	08003ef1 	.word	0x08003ef1
 8003ec4:	08003edf 	.word	0x08003edf
 8003ec8:	08003ef1 	.word	0x08003ef1
 8003ecc:	08003ef1 	.word	0x08003ef1
 8003ed0:	08003ef1 	.word	0x08003ef1
 8003ed4:	08003eeb 	.word	0x08003eeb
 8003ed8:	2300      	movs	r3, #0
 8003eda:	76fb      	strb	r3, [r7, #27]
 8003edc:	e038      	b.n	8003f50 <UART_SetConfig+0x198>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	76fb      	strb	r3, [r7, #27]
 8003ee2:	e035      	b.n	8003f50 <UART_SetConfig+0x198>
 8003ee4:	2304      	movs	r3, #4
 8003ee6:	76fb      	strb	r3, [r7, #27]
 8003ee8:	e032      	b.n	8003f50 <UART_SetConfig+0x198>
 8003eea:	2308      	movs	r3, #8
 8003eec:	76fb      	strb	r3, [r7, #27]
 8003eee:	e02f      	b.n	8003f50 <UART_SetConfig+0x198>
 8003ef0:	2310      	movs	r3, #16
 8003ef2:	76fb      	strb	r3, [r7, #27]
 8003ef4:	bf00      	nop
 8003ef6:	e02b      	b.n	8003f50 <UART_SetConfig+0x198>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a6b      	ldr	r2, [pc, #428]	; (80040ac <UART_SetConfig+0x2f4>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d124      	bne.n	8003f4c <UART_SetConfig+0x194>
 8003f02:	4b6c      	ldr	r3, [pc, #432]	; (80040b4 <UART_SetConfig+0x2fc>)
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f10:	d012      	beq.n	8003f38 <UART_SetConfig+0x180>
 8003f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f16:	d802      	bhi.n	8003f1e <UART_SetConfig+0x166>
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d007      	beq.n	8003f2c <UART_SetConfig+0x174>
 8003f1c:	e012      	b.n	8003f44 <UART_SetConfig+0x18c>
 8003f1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f22:	d006      	beq.n	8003f32 <UART_SetConfig+0x17a>
 8003f24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f28:	d009      	beq.n	8003f3e <UART_SetConfig+0x186>
 8003f2a:	e00b      	b.n	8003f44 <UART_SetConfig+0x18c>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	76fb      	strb	r3, [r7, #27]
 8003f30:	e00e      	b.n	8003f50 <UART_SetConfig+0x198>
 8003f32:	2302      	movs	r3, #2
 8003f34:	76fb      	strb	r3, [r7, #27]
 8003f36:	e00b      	b.n	8003f50 <UART_SetConfig+0x198>
 8003f38:	2304      	movs	r3, #4
 8003f3a:	76fb      	strb	r3, [r7, #27]
 8003f3c:	e008      	b.n	8003f50 <UART_SetConfig+0x198>
 8003f3e:	2308      	movs	r3, #8
 8003f40:	76fb      	strb	r3, [r7, #27]
 8003f42:	e005      	b.n	8003f50 <UART_SetConfig+0x198>
 8003f44:	2310      	movs	r3, #16
 8003f46:	76fb      	strb	r3, [r7, #27]
 8003f48:	bf00      	nop
 8003f4a:	e001      	b.n	8003f50 <UART_SetConfig+0x198>
 8003f4c:	2310      	movs	r3, #16
 8003f4e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a55      	ldr	r2, [pc, #340]	; (80040ac <UART_SetConfig+0x2f4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d174      	bne.n	8004044 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f5a:	7efb      	ldrb	r3, [r7, #27]
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d824      	bhi.n	8003faa <UART_SetConfig+0x1f2>
 8003f60:	a201      	add	r2, pc, #4	; (adr r2, 8003f68 <UART_SetConfig+0x1b0>)
 8003f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f66:	bf00      	nop
 8003f68:	08003f8d 	.word	0x08003f8d
 8003f6c:	08003fab 	.word	0x08003fab
 8003f70:	08003f95 	.word	0x08003f95
 8003f74:	08003fab 	.word	0x08003fab
 8003f78:	08003f9b 	.word	0x08003f9b
 8003f7c:	08003fab 	.word	0x08003fab
 8003f80:	08003fab 	.word	0x08003fab
 8003f84:	08003fab 	.word	0x08003fab
 8003f88:	08003fa3 	.word	0x08003fa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f8c:	f7fe ff60 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 8003f90:	6178      	str	r0, [r7, #20]
        break;
 8003f92:	e00f      	b.n	8003fb4 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f94:	4b49      	ldr	r3, [pc, #292]	; (80040bc <UART_SetConfig+0x304>)
 8003f96:	617b      	str	r3, [r7, #20]
        break;
 8003f98:	e00c      	b.n	8003fb4 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f9a:	f7fe fec5 	bl	8002d28 <HAL_RCC_GetSysClockFreq>
 8003f9e:	6178      	str	r0, [r7, #20]
        break;
 8003fa0:	e008      	b.n	8003fb4 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fa6:	617b      	str	r3, [r7, #20]
        break;
 8003fa8:	e004      	b.n	8003fb4 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	76bb      	strb	r3, [r7, #26]
        break;
 8003fb2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 8100 	beq.w	80041bc <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	4413      	add	r3, r2
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d305      	bcc.n	8003fd8 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d902      	bls.n	8003fde <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	76bb      	strb	r3, [r7, #26]
 8003fdc:	e0ee      	b.n	80041bc <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	f04f 0400 	mov.w	r4, #0
 8003fee:	0214      	lsls	r4, r2, #8
 8003ff0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003ff4:	020b      	lsls	r3, r1, #8
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6852      	ldr	r2, [r2, #4]
 8003ffa:	0852      	lsrs	r2, r2, #1
 8003ffc:	4611      	mov	r1, r2
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	eb13 0b01 	adds.w	fp, r3, r1
 8004006:	eb44 0c02 	adc.w	ip, r4, r2
 800400a:	4658      	mov	r0, fp
 800400c:	4661      	mov	r1, ip
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f04f 0400 	mov.w	r4, #0
 8004016:	461a      	mov	r2, r3
 8004018:	4623      	mov	r3, r4
 800401a:	f7fc f8d9 	bl	80001d0 <__aeabi_uldivmod>
 800401e:	4603      	mov	r3, r0
 8004020:	460c      	mov	r4, r1
 8004022:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800402a:	d308      	bcc.n	800403e <UART_SetConfig+0x286>
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004032:	d204      	bcs.n	800403e <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	60da      	str	r2, [r3, #12]
 800403c:	e0be      	b.n	80041bc <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	76bb      	strb	r3, [r7, #26]
 8004042:	e0bb      	b.n	80041bc <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800404c:	d169      	bne.n	8004122 <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 800404e:	7efb      	ldrb	r3, [r7, #27]
 8004050:	2b08      	cmp	r3, #8
 8004052:	d835      	bhi.n	80040c0 <UART_SetConfig+0x308>
 8004054:	a201      	add	r2, pc, #4	; (adr r2, 800405c <UART_SetConfig+0x2a4>)
 8004056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405a:	bf00      	nop
 800405c:	08004081 	.word	0x08004081
 8004060:	08004089 	.word	0x08004089
 8004064:	08004091 	.word	0x08004091
 8004068:	080040c1 	.word	0x080040c1
 800406c:	08004097 	.word	0x08004097
 8004070:	080040c1 	.word	0x080040c1
 8004074:	080040c1 	.word	0x080040c1
 8004078:	080040c1 	.word	0x080040c1
 800407c:	0800409f 	.word	0x0800409f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004080:	f7fe fee6 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 8004084:	6178      	str	r0, [r7, #20]
        break;
 8004086:	e020      	b.n	80040ca <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004088:	f7fe fef8 	bl	8002e7c <HAL_RCC_GetPCLK2Freq>
 800408c:	6178      	str	r0, [r7, #20]
        break;
 800408e:	e01c      	b.n	80040ca <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004090:	4b0a      	ldr	r3, [pc, #40]	; (80040bc <UART_SetConfig+0x304>)
 8004092:	617b      	str	r3, [r7, #20]
        break;
 8004094:	e019      	b.n	80040ca <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004096:	f7fe fe47 	bl	8002d28 <HAL_RCC_GetSysClockFreq>
 800409a:	6178      	str	r0, [r7, #20]
        break;
 800409c:	e015      	b.n	80040ca <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800409e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040a2:	617b      	str	r3, [r7, #20]
        break;
 80040a4:	e011      	b.n	80040ca <UART_SetConfig+0x312>
 80040a6:	bf00      	nop
 80040a8:	efff69f3 	.word	0xefff69f3
 80040ac:	40008000 	.word	0x40008000
 80040b0:	40013800 	.word	0x40013800
 80040b4:	40021000 	.word	0x40021000
 80040b8:	40004400 	.word	0x40004400
 80040bc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	76bb      	strb	r3, [r7, #26]
        break;
 80040c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d075      	beq.n	80041bc <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	005a      	lsls	r2, r3, #1
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	085b      	lsrs	r3, r3, #1
 80040da:	441a      	add	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	2b0f      	cmp	r3, #15
 80040ec:	d916      	bls.n	800411c <UART_SetConfig+0x364>
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f4:	d212      	bcs.n	800411c <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	f023 030f 	bic.w	r3, r3, #15
 80040fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	085b      	lsrs	r3, r3, #1
 8004104:	b29b      	uxth	r3, r3
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	b29a      	uxth	r2, r3
 800410c:	89fb      	ldrh	r3, [r7, #14]
 800410e:	4313      	orrs	r3, r2
 8004110:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	89fa      	ldrh	r2, [r7, #14]
 8004118:	60da      	str	r2, [r3, #12]
 800411a:	e04f      	b.n	80041bc <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	76bb      	strb	r3, [r7, #26]
 8004120:	e04c      	b.n	80041bc <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004122:	7efb      	ldrb	r3, [r7, #27]
 8004124:	2b08      	cmp	r3, #8
 8004126:	d828      	bhi.n	800417a <UART_SetConfig+0x3c2>
 8004128:	a201      	add	r2, pc, #4	; (adr r2, 8004130 <UART_SetConfig+0x378>)
 800412a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412e:	bf00      	nop
 8004130:	08004155 	.word	0x08004155
 8004134:	0800415d 	.word	0x0800415d
 8004138:	08004165 	.word	0x08004165
 800413c:	0800417b 	.word	0x0800417b
 8004140:	0800416b 	.word	0x0800416b
 8004144:	0800417b 	.word	0x0800417b
 8004148:	0800417b 	.word	0x0800417b
 800414c:	0800417b 	.word	0x0800417b
 8004150:	08004173 	.word	0x08004173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004154:	f7fe fe7c 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 8004158:	6178      	str	r0, [r7, #20]
        break;
 800415a:	e013      	b.n	8004184 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800415c:	f7fe fe8e 	bl	8002e7c <HAL_RCC_GetPCLK2Freq>
 8004160:	6178      	str	r0, [r7, #20]
        break;
 8004162:	e00f      	b.n	8004184 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004164:	4b1b      	ldr	r3, [pc, #108]	; (80041d4 <UART_SetConfig+0x41c>)
 8004166:	617b      	str	r3, [r7, #20]
        break;
 8004168:	e00c      	b.n	8004184 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800416a:	f7fe fddd 	bl	8002d28 <HAL_RCC_GetSysClockFreq>
 800416e:	6178      	str	r0, [r7, #20]
        break;
 8004170:	e008      	b.n	8004184 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004176:	617b      	str	r3, [r7, #20]
        break;
 8004178:	e004      	b.n	8004184 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	76bb      	strb	r3, [r7, #26]
        break;
 8004182:	bf00      	nop
    }

    if (pclk != 0U)
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d018      	beq.n	80041bc <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	085a      	lsrs	r2, r3, #1
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	441a      	add	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	fbb2 f3f3 	udiv	r3, r2, r3
 800419c:	b29b      	uxth	r3, r3
 800419e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	2b0f      	cmp	r3, #15
 80041a4:	d908      	bls.n	80041b8 <UART_SetConfig+0x400>
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ac:	d204      	bcs.n	80041b8 <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	60da      	str	r2, [r3, #12]
 80041b6:	e001      	b.n	80041bc <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80041c8:	7ebb      	ldrb	r3, [r7, #26]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3720      	adds	r7, #32
 80041ce:	46bd      	mov	sp, r7
 80041d0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80041d4:	00f42400 	.word	0x00f42400

080041d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00a      	beq.n	800428a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	f003 0320 	and.w	r3, r3, #32
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d01a      	beq.n	80042ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042d6:	d10a      	bne.n	80042ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	605a      	str	r2, [r3, #4]
  }
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af02      	add	r7, sp, #8
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800432a:	f7fc fe79 	bl	8001020 <HAL_GetTick>
 800432e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b08      	cmp	r3, #8
 800433c:	d10e      	bne.n	800435c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800433e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f82a 	bl	80043a6 <UART_WaitOnFlagUntilTimeout>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e020      	b.n	800439e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	2b04      	cmp	r3, #4
 8004368:	d10e      	bne.n	8004388 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800436a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f814 	bl	80043a6 <UART_WaitOnFlagUntilTimeout>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e00a      	b.n	800439e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2220      	movs	r2, #32
 800438c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2220      	movs	r2, #32
 8004392:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b084      	sub	sp, #16
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	603b      	str	r3, [r7, #0]
 80043b2:	4613      	mov	r3, r2
 80043b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b6:	e05d      	b.n	8004474 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043be:	d059      	beq.n	8004474 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c0:	f7fc fe2e 	bl	8001020 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d302      	bcc.n	80043d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d11b      	bne.n	800440e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043e4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0201 	bic.w	r2, r2, #1
 80043f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2220      	movs	r2, #32
 80043fa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e042      	b.n	8004494 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	d02b      	beq.n	8004474 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004426:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800442a:	d123      	bne.n	8004474 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004434:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004444:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0201 	bic.w	r2, r2, #1
 8004454:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2220      	movs	r2, #32
 800445a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2220      	movs	r2, #32
 8004460:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2220      	movs	r2, #32
 8004466:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e00f      	b.n	8004494 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	69da      	ldr	r2, [r3, #28]
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	4013      	ands	r3, r2
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	429a      	cmp	r2, r3
 8004482:	bf0c      	ite	eq
 8004484:	2301      	moveq	r3, #1
 8004486:	2300      	movne	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	461a      	mov	r2, r3
 800448c:	79fb      	ldrb	r3, [r7, #7]
 800448e:	429a      	cmp	r2, r3
 8004490:	d092      	beq.n	80043b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80044b2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80044dc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0201 	bic.w	r2, r2, #1
 80044ec:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2220      	movs	r2, #32
 80044f2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	661a      	str	r2, [r3, #96]	; 0x60
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b084      	sub	sp, #16
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004512:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0320 	and.w	r3, r3, #32
 800451e:	2b00      	cmp	r3, #0
 8004520:	d11e      	bne.n	8004560 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004538:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0201 	bic.w	r2, r2, #1
 8004548:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004558:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2220      	movs	r2, #32
 800455e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f7ff fc0b 	bl	8003d7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004566:	bf00      	nop
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b084      	sub	sp, #16
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f7ff fc07 	bl	8003d90 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004582:	bf00      	nop
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b086      	sub	sp, #24
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004596:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ae:	2b80      	cmp	r3, #128	; 0x80
 80045b0:	d109      	bne.n	80045c6 <UART_DMAError+0x3c>
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	2b21      	cmp	r3, #33	; 0x21
 80045b6:	d106      	bne.n	80045c6 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80045c0:	6978      	ldr	r0, [r7, #20]
 80045c2:	f7ff ff6b 	bl	800449c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d0:	2b40      	cmp	r3, #64	; 0x40
 80045d2:	d109      	bne.n	80045e8 <UART_DMAError+0x5e>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b22      	cmp	r3, #34	; 0x22
 80045d8:	d106      	bne.n	80045e8 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2200      	movs	r2, #0
 80045de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80045e2:	6978      	ldr	r0, [r7, #20]
 80045e4:	f7ff ff6f 	bl	80044c6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045ec:	f043 0210 	orr.w	r2, r3, #16
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045f4:	6978      	ldr	r0, [r7, #20]
 80045f6:	f7ff fbd5 	bl	8003da4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045fa:	bf00      	nop
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004602:	b480      	push	{r7}
 8004604:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004606:	bf00      	nop
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004616:	f3ef 8305 	mrs	r3, IPSR
 800461a:	60bb      	str	r3, [r7, #8]
  return(result);
 800461c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10f      	bne.n	8004642 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004622:	f3ef 8310 	mrs	r3, PRIMASK
 8004626:	607b      	str	r3, [r7, #4]
  return(result);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d105      	bne.n	800463a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800462e:	f3ef 8311 	mrs	r3, BASEPRI
 8004632:	603b      	str	r3, [r7, #0]
  return(result);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d007      	beq.n	800464a <osKernelInitialize+0x3a>
 800463a:	4b0e      	ldr	r3, [pc, #56]	; (8004674 <osKernelInitialize+0x64>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d103      	bne.n	800464a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004642:	f06f 0305 	mvn.w	r3, #5
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	e00c      	b.n	8004664 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800464a:	4b0a      	ldr	r3, [pc, #40]	; (8004674 <osKernelInitialize+0x64>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d105      	bne.n	800465e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004652:	4b08      	ldr	r3, [pc, #32]	; (8004674 <osKernelInitialize+0x64>)
 8004654:	2201      	movs	r2, #1
 8004656:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004658:	2300      	movs	r3, #0
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	e002      	b.n	8004664 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800465e:	f04f 33ff 	mov.w	r3, #4294967295
 8004662:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004664:	68fb      	ldr	r3, [r7, #12]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	20000034 	.word	0x20000034

08004678 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800467e:	f3ef 8305 	mrs	r3, IPSR
 8004682:	60bb      	str	r3, [r7, #8]
  return(result);
 8004684:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10f      	bne.n	80046aa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800468a:	f3ef 8310 	mrs	r3, PRIMASK
 800468e:	607b      	str	r3, [r7, #4]
  return(result);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d105      	bne.n	80046a2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004696:	f3ef 8311 	mrs	r3, BASEPRI
 800469a:	603b      	str	r3, [r7, #0]
  return(result);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d007      	beq.n	80046b2 <osKernelStart+0x3a>
 80046a2:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <osKernelStart+0x68>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d103      	bne.n	80046b2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80046aa:	f06f 0305 	mvn.w	r3, #5
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	e010      	b.n	80046d4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80046b2:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <osKernelStart+0x68>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d109      	bne.n	80046ce <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80046ba:	f7ff ffa2 	bl	8004602 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80046be:	4b08      	ldr	r3, [pc, #32]	; (80046e0 <osKernelStart+0x68>)
 80046c0:	2202      	movs	r2, #2
 80046c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80046c4:	f001 f870 	bl	80057a8 <vTaskStartScheduler>
      stat = osOK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	e002      	b.n	80046d4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80046ce:	f04f 33ff 	mov.w	r3, #4294967295
 80046d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80046d4:	68fb      	ldr	r3, [r7, #12]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	20000034 	.word	0x20000034

080046e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b090      	sub	sp, #64	; 0x40
 80046e8:	af04      	add	r7, sp, #16
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80046f0:	2300      	movs	r3, #0
 80046f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046f4:	f3ef 8305 	mrs	r3, IPSR
 80046f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80046fa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f040 808f 	bne.w	8004820 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004702:	f3ef 8310 	mrs	r3, PRIMASK
 8004706:	61bb      	str	r3, [r7, #24]
  return(result);
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d105      	bne.n	800471a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800470e:	f3ef 8311 	mrs	r3, BASEPRI
 8004712:	617b      	str	r3, [r7, #20]
  return(result);
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <osThreadNew+0x3e>
 800471a:	4b44      	ldr	r3, [pc, #272]	; (800482c <osThreadNew+0x148>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b02      	cmp	r3, #2
 8004720:	d07e      	beq.n	8004820 <osThreadNew+0x13c>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d07b      	beq.n	8004820 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004728:	2380      	movs	r3, #128	; 0x80
 800472a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800472c:	2318      	movs	r3, #24
 800472e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004730:	2300      	movs	r3, #0
 8004732:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004734:	f04f 33ff 	mov.w	r3, #4294967295
 8004738:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d045      	beq.n	80047cc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <osThreadNew+0x6a>
        name = attr->name;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	2b00      	cmp	r3, #0
 8004760:	d008      	beq.n	8004774 <osThreadNew+0x90>
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	2b38      	cmp	r3, #56	; 0x38
 8004766:	d805      	bhi.n	8004774 <osThreadNew+0x90>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <osThreadNew+0x94>
        return (NULL);
 8004774:	2300      	movs	r3, #0
 8004776:	e054      	b.n	8004822 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	089b      	lsrs	r3, r3, #2
 8004786:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00e      	beq.n	80047ae <osThreadNew+0xca>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	2b5b      	cmp	r3, #91	; 0x5b
 8004796:	d90a      	bls.n	80047ae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800479c:	2b00      	cmp	r3, #0
 800479e:	d006      	beq.n	80047ae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <osThreadNew+0xca>
        mem = 1;
 80047a8:	2301      	movs	r3, #1
 80047aa:	623b      	str	r3, [r7, #32]
 80047ac:	e010      	b.n	80047d0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10c      	bne.n	80047d0 <osThreadNew+0xec>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d108      	bne.n	80047d0 <osThreadNew+0xec>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d104      	bne.n	80047d0 <osThreadNew+0xec>
          mem = 0;
 80047c6:	2300      	movs	r3, #0
 80047c8:	623b      	str	r3, [r7, #32]
 80047ca:	e001      	b.n	80047d0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80047cc:	2300      	movs	r3, #0
 80047ce:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d110      	bne.n	80047f8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047de:	9202      	str	r2, [sp, #8]
 80047e0:	9301      	str	r3, [sp, #4]
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 fe09 	bl	8005404 <xTaskCreateStatic>
 80047f2:	4603      	mov	r3, r0
 80047f4:	613b      	str	r3, [r7, #16]
 80047f6:	e013      	b.n	8004820 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d110      	bne.n	8004820 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80047fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004800:	b29a      	uxth	r2, r3
 8004802:	f107 0310 	add.w	r3, r7, #16
 8004806:	9301      	str	r3, [sp, #4]
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 fe51 	bl	80054b8 <xTaskCreate>
 8004816:	4603      	mov	r3, r0
 8004818:	2b01      	cmp	r3, #1
 800481a:	d001      	beq.n	8004820 <osThreadNew+0x13c>
          hTask = NULL;
 800481c:	2300      	movs	r3, #0
 800481e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004820:	693b      	ldr	r3, [r7, #16]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3730      	adds	r7, #48	; 0x30
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	20000034 	.word	0x20000034

08004830 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004838:	f3ef 8305 	mrs	r3, IPSR
 800483c:	613b      	str	r3, [r7, #16]
  return(result);
 800483e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10f      	bne.n	8004864 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004844:	f3ef 8310 	mrs	r3, PRIMASK
 8004848:	60fb      	str	r3, [r7, #12]
  return(result);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d105      	bne.n	800485c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004850:	f3ef 8311 	mrs	r3, BASEPRI
 8004854:	60bb      	str	r3, [r7, #8]
  return(result);
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d007      	beq.n	800486c <osDelay+0x3c>
 800485c:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <osDelay+0x58>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b02      	cmp	r3, #2
 8004862:	d103      	bne.n	800486c <osDelay+0x3c>
    stat = osErrorISR;
 8004864:	f06f 0305 	mvn.w	r3, #5
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	e007      	b.n	800487c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 ff62 	bl	8005740 <vTaskDelay>
    }
  }

  return (stat);
 800487c:	697b      	ldr	r3, [r7, #20]
}
 800487e:	4618      	mov	r0, r3
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20000034 	.word	0x20000034

0800488c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4a07      	ldr	r2, [pc, #28]	; (80048b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800489c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	4a06      	ldr	r2, [pc, #24]	; (80048bc <vApplicationGetIdleTaskMemory+0x30>)
 80048a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2280      	movs	r2, #128	; 0x80
 80048a8:	601a      	str	r2, [r3, #0]
}
 80048aa:	bf00      	nop
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	20000038 	.word	0x20000038
 80048bc:	20000094 	.word	0x20000094

080048c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4a07      	ldr	r2, [pc, #28]	; (80048ec <vApplicationGetTimerTaskMemory+0x2c>)
 80048d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	4a06      	ldr	r2, [pc, #24]	; (80048f0 <vApplicationGetTimerTaskMemory+0x30>)
 80048d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048de:	601a      	str	r2, [r3, #0]
}
 80048e0:	bf00      	nop
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	20000294 	.word	0x20000294
 80048f0:	200002f0 	.word	0x200002f0

080048f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f103 0208 	add.w	r2, r3, #8
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f04f 32ff 	mov.w	r2, #4294967295
 800490c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f103 0208 	add.w	r2, r3, #8
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f103 0208 	add.w	r2, r3, #8
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800494e:	b480      	push	{r7}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	601a      	str	r2, [r3, #0]
}
 800498a:	bf00      	nop
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004996:	b480      	push	{r7}
 8004998:	b085      	sub	sp, #20
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
 800499e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ac:	d103      	bne.n	80049b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	e00c      	b.n	80049d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3308      	adds	r3, #8
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	e002      	b.n	80049c4 <vListInsert+0x2e>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d2f6      	bcs.n	80049be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	601a      	str	r2, [r3, #0]
}
 80049fc:	bf00      	nop
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6892      	ldr	r2, [r2, #8]
 8004a1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	6852      	ldr	r2, [r2, #4]
 8004a28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d103      	bne.n	8004a3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	1e5a      	subs	r2, r3, #1
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d109      	bne.n	8004a84 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	60bb      	str	r3, [r7, #8]
 8004a82:	e7fe      	b.n	8004a82 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004a84:	f002 f812 	bl	8006aac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a90:	68f9      	ldr	r1, [r7, #12]
 8004a92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a94:	fb01 f303 	mul.w	r3, r1, r3
 8004a98:	441a      	add	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	68f9      	ldr	r1, [r7, #12]
 8004ab8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004aba:	fb01 f303 	mul.w	r3, r1, r3
 8004abe:	441a      	add	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	22ff      	movs	r2, #255	; 0xff
 8004ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	22ff      	movs	r2, #255	; 0xff
 8004ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d114      	bne.n	8004b04 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d01a      	beq.n	8004b18 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	3310      	adds	r3, #16
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f001 f8de 	bl	8005ca8 <xTaskRemoveFromEventList>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d012      	beq.n	8004b18 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004af2:	4b0d      	ldr	r3, [pc, #52]	; (8004b28 <xQueueGenericReset+0xcc>)
 8004af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	f3bf 8f6f 	isb	sy
 8004b02:	e009      	b.n	8004b18 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	3310      	adds	r3, #16
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7ff fef3 	bl	80048f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3324      	adds	r3, #36	; 0x24
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7ff feee 	bl	80048f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b18:	f001 fff6 	bl	8006b08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b1c:	2301      	movs	r3, #1
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	e000ed04 	.word	0xe000ed04

08004b2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08e      	sub	sp, #56	; 0x38
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
 8004b38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d109      	bne.n	8004b54 <xQueueGenericCreateStatic+0x28>
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b52:	e7fe      	b.n	8004b52 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d109      	bne.n	8004b6e <xQueueGenericCreateStatic+0x42>
 8004b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b6c:	e7fe      	b.n	8004b6c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <xQueueGenericCreateStatic+0x4e>
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <xQueueGenericCreateStatic+0x52>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e000      	b.n	8004b80 <xQueueGenericCreateStatic+0x54>
 8004b7e:	2300      	movs	r3, #0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d109      	bne.n	8004b98 <xQueueGenericCreateStatic+0x6c>
 8004b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	623b      	str	r3, [r7, #32]
 8004b96:	e7fe      	b.n	8004b96 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d102      	bne.n	8004ba4 <xQueueGenericCreateStatic+0x78>
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <xQueueGenericCreateStatic+0x7c>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e000      	b.n	8004baa <xQueueGenericCreateStatic+0x7e>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d109      	bne.n	8004bc2 <xQueueGenericCreateStatic+0x96>
 8004bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	61fb      	str	r3, [r7, #28]
 8004bc0:	e7fe      	b.n	8004bc0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004bc2:	2350      	movs	r3, #80	; 0x50
 8004bc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2b50      	cmp	r3, #80	; 0x50
 8004bca:	d009      	beq.n	8004be0 <xQueueGenericCreateStatic+0xb4>
 8004bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	61bb      	str	r3, [r7, #24]
 8004bde:	e7fe      	b.n	8004bde <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004be0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00d      	beq.n	8004c08 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004bf4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	68b9      	ldr	r1, [r7, #8]
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 f805 	bl	8004c12 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3730      	adds	r7, #48	; 0x30
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	60b9      	str	r1, [r7, #8]
 8004c1c:	607a      	str	r2, [r7, #4]
 8004c1e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d103      	bne.n	8004c2e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	e002      	b.n	8004c34 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c40:	2101      	movs	r1, #1
 8004c42:	69b8      	ldr	r0, [r7, #24]
 8004c44:	f7ff ff0a 	bl	8004a5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	78fa      	ldrb	r2, [r7, #3]
 8004c4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08e      	sub	sp, #56	; 0x38
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
 8004c64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c66:	2300      	movs	r3, #0
 8004c68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d109      	bne.n	8004c88 <xQueueGenericSend+0x30>
 8004c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c86:	e7fe      	b.n	8004c86 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d103      	bne.n	8004c96 <xQueueGenericSend+0x3e>
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <xQueueGenericSend+0x42>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <xQueueGenericSend+0x44>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d109      	bne.n	8004cb4 <xQueueGenericSend+0x5c>
 8004ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb2:	e7fe      	b.n	8004cb2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d103      	bne.n	8004cc2 <xQueueGenericSend+0x6a>
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <xQueueGenericSend+0x6e>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e000      	b.n	8004cc8 <xQueueGenericSend+0x70>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d109      	bne.n	8004ce0 <xQueueGenericSend+0x88>
 8004ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	623b      	str	r3, [r7, #32]
 8004cde:	e7fe      	b.n	8004cde <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ce0:	f001 f998 	bl	8006014 <xTaskGetSchedulerState>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d102      	bne.n	8004cf0 <xQueueGenericSend+0x98>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <xQueueGenericSend+0x9c>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e000      	b.n	8004cf6 <xQueueGenericSend+0x9e>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d109      	bne.n	8004d0e <xQueueGenericSend+0xb6>
 8004cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	61fb      	str	r3, [r7, #28]
 8004d0c:	e7fe      	b.n	8004d0c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d0e:	f001 fecd 	bl	8006aac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d302      	bcc.n	8004d24 <xQueueGenericSend+0xcc>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d129      	bne.n	8004d78 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	68b9      	ldr	r1, [r7, #8]
 8004d28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d2a:	f000 f9ff 	bl	800512c <prvCopyDataToQueue>
 8004d2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d010      	beq.n	8004d5a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3a:	3324      	adds	r3, #36	; 0x24
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 ffb3 	bl	8005ca8 <xTaskRemoveFromEventList>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d013      	beq.n	8004d70 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d48:	4b3f      	ldr	r3, [pc, #252]	; (8004e48 <xQueueGenericSend+0x1f0>)
 8004d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	e00a      	b.n	8004d70 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d007      	beq.n	8004d70 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d60:	4b39      	ldr	r3, [pc, #228]	; (8004e48 <xQueueGenericSend+0x1f0>)
 8004d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d70:	f001 feca 	bl	8006b08 <vPortExitCritical>
				return pdPASS;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e063      	b.n	8004e40 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d103      	bne.n	8004d86 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d7e:	f001 fec3 	bl	8006b08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d82:	2300      	movs	r3, #0
 8004d84:	e05c      	b.n	8004e40 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d106      	bne.n	8004d9a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d8c:	f107 0314 	add.w	r3, r7, #20
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 ffeb 	bl	8005d6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d96:	2301      	movs	r3, #1
 8004d98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d9a:	f001 feb5 	bl	8006b08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d9e:	f000 fd67 	bl	8005870 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004da2:	f001 fe83 	bl	8006aac <vPortEnterCritical>
 8004da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dac:	b25b      	sxtb	r3, r3
 8004dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db2:	d103      	bne.n	8004dbc <xQueueGenericSend+0x164>
 8004db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dc2:	b25b      	sxtb	r3, r3
 8004dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc8:	d103      	bne.n	8004dd2 <xQueueGenericSend+0x17a>
 8004dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dd2:	f001 fe99 	bl	8006b08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004dd6:	1d3a      	adds	r2, r7, #4
 8004dd8:	f107 0314 	add.w	r3, r7, #20
 8004ddc:	4611      	mov	r1, r2
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 ffda 	bl	8005d98 <xTaskCheckForTimeOut>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d124      	bne.n	8004e34 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004dea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dec:	f000 fa96 	bl	800531c <prvIsQueueFull>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d018      	beq.n	8004e28 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df8:	3310      	adds	r3, #16
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	4611      	mov	r1, r2
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 ff04 	bl	8005c0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e06:	f000 fa21 	bl	800524c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e0a:	f000 fd3f 	bl	800588c <xTaskResumeAll>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f47f af7c 	bne.w	8004d0e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004e16:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <xQueueGenericSend+0x1f0>)
 8004e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	e772      	b.n	8004d0e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e2a:	f000 fa0f 	bl	800524c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e2e:	f000 fd2d 	bl	800588c <xTaskResumeAll>
 8004e32:	e76c      	b.n	8004d0e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e36:	f000 fa09 	bl	800524c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e3a:	f000 fd27 	bl	800588c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3738      	adds	r7, #56	; 0x38
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	e000ed04 	.word	0xe000ed04

08004e4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08e      	sub	sp, #56	; 0x38
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d109      	bne.n	8004e78 <xQueueGenericSendFromISR+0x2c>
 8004e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	627b      	str	r3, [r7, #36]	; 0x24
 8004e76:	e7fe      	b.n	8004e76 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d103      	bne.n	8004e86 <xQueueGenericSendFromISR+0x3a>
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <xQueueGenericSendFromISR+0x3e>
 8004e86:	2301      	movs	r3, #1
 8004e88:	e000      	b.n	8004e8c <xQueueGenericSendFromISR+0x40>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d109      	bne.n	8004ea4 <xQueueGenericSendFromISR+0x58>
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	623b      	str	r3, [r7, #32]
 8004ea2:	e7fe      	b.n	8004ea2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d103      	bne.n	8004eb2 <xQueueGenericSendFromISR+0x66>
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <xQueueGenericSendFromISR+0x6a>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e000      	b.n	8004eb8 <xQueueGenericSendFromISR+0x6c>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d109      	bne.n	8004ed0 <xQueueGenericSendFromISR+0x84>
 8004ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec0:	f383 8811 	msr	BASEPRI, r3
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	61fb      	str	r3, [r7, #28]
 8004ece:	e7fe      	b.n	8004ece <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ed0:	f001 fec8 	bl	8006c64 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004ed4:	f3ef 8211 	mrs	r2, BASEPRI
 8004ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004edc:	f383 8811 	msr	BASEPRI, r3
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	61ba      	str	r2, [r7, #24]
 8004eea:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004eec:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004eee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d302      	bcc.n	8004f02 <xQueueGenericSendFromISR+0xb6>
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d12c      	bne.n	8004f5c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	68b9      	ldr	r1, [r7, #8]
 8004f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f12:	f000 f90b 	bl	800512c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f16:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1e:	d112      	bne.n	8004f46 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d016      	beq.n	8004f56 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2a:	3324      	adds	r3, #36	; 0x24
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 febb 	bl	8005ca8 <xTaskRemoveFromEventList>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00e      	beq.n	8004f56 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00b      	beq.n	8004f56 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	e007      	b.n	8004f56 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	b25a      	sxtb	r2, r3
 8004f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004f56:	2301      	movs	r3, #1
 8004f58:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004f5a:	e001      	b.n	8004f60 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f62:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3738      	adds	r7, #56	; 0x38
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08c      	sub	sp, #48	; 0x30
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f80:	2300      	movs	r3, #0
 8004f82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d109      	bne.n	8004fa2 <xQueueReceive+0x2e>
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	623b      	str	r3, [r7, #32]
 8004fa0:	e7fe      	b.n	8004fa0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d103      	bne.n	8004fb0 <xQueueReceive+0x3c>
 8004fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <xQueueReceive+0x40>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e000      	b.n	8004fb6 <xQueueReceive+0x42>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d109      	bne.n	8004fce <xQueueReceive+0x5a>
 8004fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbe:	f383 8811 	msr	BASEPRI, r3
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	e7fe      	b.n	8004fcc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fce:	f001 f821 	bl	8006014 <xTaskGetSchedulerState>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d102      	bne.n	8004fde <xQueueReceive+0x6a>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <xQueueReceive+0x6e>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e000      	b.n	8004fe4 <xQueueReceive+0x70>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d109      	bne.n	8004ffc <xQueueReceive+0x88>
 8004fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	61bb      	str	r3, [r7, #24]
 8004ffa:	e7fe      	b.n	8004ffa <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ffc:	f001 fd56 	bl	8006aac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005004:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	2b00      	cmp	r3, #0
 800500a:	d01f      	beq.n	800504c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800500c:	68b9      	ldr	r1, [r7, #8]
 800500e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005010:	f000 f8f6 	bl	8005200 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	1e5a      	subs	r2, r3, #1
 8005018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800501c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00f      	beq.n	8005044 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005026:	3310      	adds	r3, #16
 8005028:	4618      	mov	r0, r3
 800502a:	f000 fe3d 	bl	8005ca8 <xTaskRemoveFromEventList>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d007      	beq.n	8005044 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005034:	4b3c      	ldr	r3, [pc, #240]	; (8005128 <xQueueReceive+0x1b4>)
 8005036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005044:	f001 fd60 	bl	8006b08 <vPortExitCritical>
				return pdPASS;
 8005048:	2301      	movs	r3, #1
 800504a:	e069      	b.n	8005120 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d103      	bne.n	800505a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005052:	f001 fd59 	bl	8006b08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005056:	2300      	movs	r3, #0
 8005058:	e062      	b.n	8005120 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800505a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505c:	2b00      	cmp	r3, #0
 800505e:	d106      	bne.n	800506e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005060:	f107 0310 	add.w	r3, r7, #16
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fe81 	bl	8005d6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800506a:	2301      	movs	r3, #1
 800506c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800506e:	f001 fd4b 	bl	8006b08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005072:	f000 fbfd 	bl	8005870 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005076:	f001 fd19 	bl	8006aac <vPortEnterCritical>
 800507a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005080:	b25b      	sxtb	r3, r3
 8005082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005086:	d103      	bne.n	8005090 <xQueueReceive+0x11c>
 8005088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508a:	2200      	movs	r2, #0
 800508c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005092:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005096:	b25b      	sxtb	r3, r3
 8005098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509c:	d103      	bne.n	80050a6 <xQueueReceive+0x132>
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050a6:	f001 fd2f 	bl	8006b08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050aa:	1d3a      	adds	r2, r7, #4
 80050ac:	f107 0310 	add.w	r3, r7, #16
 80050b0:	4611      	mov	r1, r2
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fe70 	bl	8005d98 <xTaskCheckForTimeOut>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d123      	bne.n	8005106 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050c0:	f000 f916 	bl	80052f0 <prvIsQueueEmpty>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d017      	beq.n	80050fa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050cc:	3324      	adds	r3, #36	; 0x24
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	4611      	mov	r1, r2
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fd9a 	bl	8005c0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80050d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050da:	f000 f8b7 	bl	800524c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80050de:	f000 fbd5 	bl	800588c <xTaskResumeAll>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d189      	bne.n	8004ffc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80050e8:	4b0f      	ldr	r3, [pc, #60]	; (8005128 <xQueueReceive+0x1b4>)
 80050ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	e780      	b.n	8004ffc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80050fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050fc:	f000 f8a6 	bl	800524c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005100:	f000 fbc4 	bl	800588c <xTaskResumeAll>
 8005104:	e77a      	b.n	8004ffc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005108:	f000 f8a0 	bl	800524c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800510c:	f000 fbbe 	bl	800588c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005112:	f000 f8ed 	bl	80052f0 <prvIsQueueEmpty>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	f43f af6f 	beq.w	8004ffc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800511e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005120:	4618      	mov	r0, r3
 8005122:	3730      	adds	r7, #48	; 0x30
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	e000ed04 	.word	0xe000ed04

0800512c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005138:	2300      	movs	r3, #0
 800513a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005140:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10d      	bne.n	8005166 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d14d      	bne.n	80051ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	4618      	mov	r0, r3
 8005158:	f000 ff7a 	bl	8006050 <xTaskPriorityDisinherit>
 800515c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	609a      	str	r2, [r3, #8]
 8005164:	e043      	b.n	80051ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d119      	bne.n	80051a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6858      	ldr	r0, [r3, #4]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005174:	461a      	mov	r2, r3
 8005176:	68b9      	ldr	r1, [r7, #8]
 8005178:	f001 ffac 	bl	80070d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005184:	441a      	add	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	429a      	cmp	r2, r3
 8005194:	d32b      	bcc.n	80051ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	605a      	str	r2, [r3, #4]
 800519e:	e026      	b.n	80051ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	68d8      	ldr	r0, [r3, #12]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a8:	461a      	mov	r2, r3
 80051aa:	68b9      	ldr	r1, [r7, #8]
 80051ac:	f001 ff92 	bl	80070d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b8:	425b      	negs	r3, r3
 80051ba:	441a      	add	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	68da      	ldr	r2, [r3, #12]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d207      	bcs.n	80051dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d4:	425b      	negs	r3, r3
 80051d6:	441a      	add	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d105      	bne.n	80051ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80051f6:	697b      	ldr	r3, [r7, #20]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3718      	adds	r7, #24
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	2b00      	cmp	r3, #0
 8005210:	d018      	beq.n	8005244 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	441a      	add	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68da      	ldr	r2, [r3, #12]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	429a      	cmp	r2, r3
 800522a:	d303      	bcc.n	8005234 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68d9      	ldr	r1, [r3, #12]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523c:	461a      	mov	r2, r3
 800523e:	6838      	ldr	r0, [r7, #0]
 8005240:	f001 ff48 	bl	80070d4 <memcpy>
	}
}
 8005244:	bf00      	nop
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005254:	f001 fc2a 	bl	8006aac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800525e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005260:	e011      	b.n	8005286 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	2b00      	cmp	r3, #0
 8005268:	d012      	beq.n	8005290 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	3324      	adds	r3, #36	; 0x24
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fd1a 	bl	8005ca8 <xTaskRemoveFromEventList>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800527a:	f000 fded 	bl	8005e58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800527e:	7bfb      	ldrb	r3, [r7, #15]
 8005280:	3b01      	subs	r3, #1
 8005282:	b2db      	uxtb	r3, r3
 8005284:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800528a:	2b00      	cmp	r3, #0
 800528c:	dce9      	bgt.n	8005262 <prvUnlockQueue+0x16>
 800528e:	e000      	b.n	8005292 <prvUnlockQueue+0x46>
					break;
 8005290:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	22ff      	movs	r2, #255	; 0xff
 8005296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800529a:	f001 fc35 	bl	8006b08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800529e:	f001 fc05 	bl	8006aac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052aa:	e011      	b.n	80052d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d012      	beq.n	80052da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3310      	adds	r3, #16
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fcf5 	bl	8005ca8 <xTaskRemoveFromEventList>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80052c4:	f000 fdc8 	bl	8005e58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80052c8:	7bbb      	ldrb	r3, [r7, #14]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	dce9      	bgt.n	80052ac <prvUnlockQueue+0x60>
 80052d8:	e000      	b.n	80052dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80052da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	22ff      	movs	r2, #255	; 0xff
 80052e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80052e4:	f001 fc10 	bl	8006b08 <vPortExitCritical>
}
 80052e8:	bf00      	nop
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052f8:	f001 fbd8 	bl	8006aac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005300:	2b00      	cmp	r3, #0
 8005302:	d102      	bne.n	800530a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005304:	2301      	movs	r3, #1
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	e001      	b.n	800530e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800530a:	2300      	movs	r3, #0
 800530c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800530e:	f001 fbfb 	bl	8006b08 <vPortExitCritical>

	return xReturn;
 8005312:	68fb      	ldr	r3, [r7, #12]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005324:	f001 fbc2 	bl	8006aac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005330:	429a      	cmp	r2, r3
 8005332:	d102      	bne.n	800533a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005334:	2301      	movs	r3, #1
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	e001      	b.n	800533e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800533e:	f001 fbe3 	bl	8006b08 <vPortExitCritical>

	return xReturn;
 8005342:	68fb      	ldr	r3, [r7, #12]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005356:	2300      	movs	r3, #0
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	e014      	b.n	8005386 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800535c:	4a0e      	ldr	r2, [pc, #56]	; (8005398 <vQueueAddToRegistry+0x4c>)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10b      	bne.n	8005380 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005368:	490b      	ldr	r1, [pc, #44]	; (8005398 <vQueueAddToRegistry+0x4c>)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005372:	4a09      	ldr	r2, [pc, #36]	; (8005398 <vQueueAddToRegistry+0x4c>)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	4413      	add	r3, r2
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800537e:	e005      	b.n	800538c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	3301      	adds	r3, #1
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2b07      	cmp	r3, #7
 800538a:	d9e7      	bls.n	800535c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800538c:	bf00      	nop
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	20001ad0 	.word	0x20001ad0

0800539c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80053ac:	f001 fb7e 	bl	8006aac <vPortEnterCritical>
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053b6:	b25b      	sxtb	r3, r3
 80053b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053bc:	d103      	bne.n	80053c6 <vQueueWaitForMessageRestricted+0x2a>
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053cc:	b25b      	sxtb	r3, r3
 80053ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d2:	d103      	bne.n	80053dc <vQueueWaitForMessageRestricted+0x40>
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053dc:	f001 fb94 	bl	8006b08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d106      	bne.n	80053f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	3324      	adds	r3, #36	; 0x24
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	68b9      	ldr	r1, [r7, #8]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 fc2f 	bl	8005c54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80053f6:	6978      	ldr	r0, [r7, #20]
 80053f8:	f7ff ff28 	bl	800524c <prvUnlockQueue>
	}
 80053fc:	bf00      	nop
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005404:	b580      	push	{r7, lr}
 8005406:	b08e      	sub	sp, #56	; 0x38
 8005408:	af04      	add	r7, sp, #16
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
 8005410:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005414:	2b00      	cmp	r3, #0
 8005416:	d109      	bne.n	800542c <xTaskCreateStatic+0x28>
 8005418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	623b      	str	r3, [r7, #32]
 800542a:	e7fe      	b.n	800542a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800542c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542e:	2b00      	cmp	r3, #0
 8005430:	d109      	bne.n	8005446 <xTaskCreateStatic+0x42>
 8005432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	61fb      	str	r3, [r7, #28]
 8005444:	e7fe      	b.n	8005444 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005446:	235c      	movs	r3, #92	; 0x5c
 8005448:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	2b5c      	cmp	r3, #92	; 0x5c
 800544e:	d009      	beq.n	8005464 <xTaskCreateStatic+0x60>
 8005450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	61bb      	str	r3, [r7, #24]
 8005462:	e7fe      	b.n	8005462 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005464:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005468:	2b00      	cmp	r3, #0
 800546a:	d01e      	beq.n	80054aa <xTaskCreateStatic+0xa6>
 800546c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546e:	2b00      	cmp	r3, #0
 8005470:	d01b      	beq.n	80054aa <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005474:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800547a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	2202      	movs	r2, #2
 8005480:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005484:	2300      	movs	r3, #0
 8005486:	9303      	str	r3, [sp, #12]
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	9302      	str	r3, [sp, #8]
 800548c:	f107 0314 	add.w	r3, r7, #20
 8005490:	9301      	str	r3, [sp, #4]
 8005492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	68b9      	ldr	r1, [r7, #8]
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 f850 	bl	8005542 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054a4:	f000 f8dc 	bl	8005660 <prvAddNewTaskToReadyList>
 80054a8:	e001      	b.n	80054ae <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80054aa:	2300      	movs	r3, #0
 80054ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80054ae:	697b      	ldr	r3, [r7, #20]
	}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3728      	adds	r7, #40	; 0x28
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08c      	sub	sp, #48	; 0x30
 80054bc:	af04      	add	r7, sp, #16
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	603b      	str	r3, [r7, #0]
 80054c4:	4613      	mov	r3, r2
 80054c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80054c8:	88fb      	ldrh	r3, [r7, #6]
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4618      	mov	r0, r3
 80054ce:	f001 fc07 	bl	8006ce0 <pvPortMalloc>
 80054d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00e      	beq.n	80054f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80054da:	205c      	movs	r0, #92	; 0x5c
 80054dc:	f001 fc00 	bl	8006ce0 <pvPortMalloc>
 80054e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	631a      	str	r2, [r3, #48]	; 0x30
 80054ee:	e005      	b.n	80054fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80054f0:	6978      	ldr	r0, [r7, #20]
 80054f2:	f001 fcb7 	bl	8006e64 <vPortFree>
 80054f6:	e001      	b.n	80054fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80054f8:	2300      	movs	r3, #0
 80054fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d017      	beq.n	8005532 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800550a:	88fa      	ldrh	r2, [r7, #6]
 800550c:	2300      	movs	r3, #0
 800550e:	9303      	str	r3, [sp, #12]
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	9302      	str	r3, [sp, #8]
 8005514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005516:	9301      	str	r3, [sp, #4]
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	68b9      	ldr	r1, [r7, #8]
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f000 f80e 	bl	8005542 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005526:	69f8      	ldr	r0, [r7, #28]
 8005528:	f000 f89a 	bl	8005660 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800552c:	2301      	movs	r3, #1
 800552e:	61bb      	str	r3, [r7, #24]
 8005530:	e002      	b.n	8005538 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005532:	f04f 33ff 	mov.w	r3, #4294967295
 8005536:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005538:	69bb      	ldr	r3, [r7, #24]
	}
 800553a:	4618      	mov	r0, r3
 800553c:	3720      	adds	r7, #32
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b088      	sub	sp, #32
 8005546:	af00      	add	r7, sp, #0
 8005548:	60f8      	str	r0, [r7, #12]
 800554a:	60b9      	str	r1, [r7, #8]
 800554c:	607a      	str	r2, [r7, #4]
 800554e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005552:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	461a      	mov	r2, r3
 800555a:	21a5      	movs	r1, #165	; 0xa5
 800555c:	f001 fdc5 	bl	80070ea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800556a:	3b01      	subs	r3, #1
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	f023 0307 	bic.w	r3, r3, #7
 8005578:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	2b00      	cmp	r3, #0
 8005582:	d009      	beq.n	8005598 <prvInitialiseNewTask+0x56>
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	617b      	str	r3, [r7, #20]
 8005596:	e7fe      	b.n	8005596 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d01f      	beq.n	80055de <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800559e:	2300      	movs	r3, #0
 80055a0:	61fb      	str	r3, [r7, #28]
 80055a2:	e012      	b.n	80055ca <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	4413      	add	r3, r2
 80055aa:	7819      	ldrb	r1, [r3, #0]
 80055ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	4413      	add	r3, r2
 80055b2:	3334      	adds	r3, #52	; 0x34
 80055b4:	460a      	mov	r2, r1
 80055b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	4413      	add	r3, r2
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d006      	beq.n	80055d2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	3301      	adds	r3, #1
 80055c8:	61fb      	str	r3, [r7, #28]
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	2b0f      	cmp	r3, #15
 80055ce:	d9e9      	bls.n	80055a4 <prvInitialiseNewTask+0x62>
 80055d0:	e000      	b.n	80055d4 <prvInitialiseNewTask+0x92>
			{
				break;
 80055d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055dc:	e003      	b.n	80055e6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80055e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e8:	2b37      	cmp	r3, #55	; 0x37
 80055ea:	d901      	bls.n	80055f0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80055ec:	2337      	movs	r3, #55	; 0x37
 80055ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80055f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80055f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80055fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fe:	2200      	movs	r2, #0
 8005600:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	3304      	adds	r3, #4
 8005606:	4618      	mov	r0, r3
 8005608:	f7ff f994 	bl	8004934 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800560c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560e:	3318      	adds	r3, #24
 8005610:	4618      	mov	r0, r3
 8005612:	f7ff f98f 	bl	8004934 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800561a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005624:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800562a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800562c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562e:	2200      	movs	r2, #0
 8005630:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	68f9      	ldr	r1, [r7, #12]
 800563e:	69b8      	ldr	r0, [r7, #24]
 8005640:	f001 f90c 	bl	800685c <pxPortInitialiseStack>
 8005644:	4602      	mov	r2, r0
 8005646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005648:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800564a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005654:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005656:	bf00      	nop
 8005658:	3720      	adds	r7, #32
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005668:	f001 fa20 	bl	8006aac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800566c:	4b2d      	ldr	r3, [pc, #180]	; (8005724 <prvAddNewTaskToReadyList+0xc4>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	3301      	adds	r3, #1
 8005672:	4a2c      	ldr	r2, [pc, #176]	; (8005724 <prvAddNewTaskToReadyList+0xc4>)
 8005674:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005676:	4b2c      	ldr	r3, [pc, #176]	; (8005728 <prvAddNewTaskToReadyList+0xc8>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d109      	bne.n	8005692 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800567e:	4a2a      	ldr	r2, [pc, #168]	; (8005728 <prvAddNewTaskToReadyList+0xc8>)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005684:	4b27      	ldr	r3, [pc, #156]	; (8005724 <prvAddNewTaskToReadyList+0xc4>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d110      	bne.n	80056ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800568c:	f000 fc08 	bl	8005ea0 <prvInitialiseTaskLists>
 8005690:	e00d      	b.n	80056ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005692:	4b26      	ldr	r3, [pc, #152]	; (800572c <prvAddNewTaskToReadyList+0xcc>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d109      	bne.n	80056ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800569a:	4b23      	ldr	r3, [pc, #140]	; (8005728 <prvAddNewTaskToReadyList+0xc8>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d802      	bhi.n	80056ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80056a8:	4a1f      	ldr	r2, [pc, #124]	; (8005728 <prvAddNewTaskToReadyList+0xc8>)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80056ae:	4b20      	ldr	r3, [pc, #128]	; (8005730 <prvAddNewTaskToReadyList+0xd0>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3301      	adds	r3, #1
 80056b4:	4a1e      	ldr	r2, [pc, #120]	; (8005730 <prvAddNewTaskToReadyList+0xd0>)
 80056b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80056b8:	4b1d      	ldr	r3, [pc, #116]	; (8005730 <prvAddNewTaskToReadyList+0xd0>)
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c4:	4b1b      	ldr	r3, [pc, #108]	; (8005734 <prvAddNewTaskToReadyList+0xd4>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d903      	bls.n	80056d4 <prvAddNewTaskToReadyList+0x74>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d0:	4a18      	ldr	r2, [pc, #96]	; (8005734 <prvAddNewTaskToReadyList+0xd4>)
 80056d2:	6013      	str	r3, [r2, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d8:	4613      	mov	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4a15      	ldr	r2, [pc, #84]	; (8005738 <prvAddNewTaskToReadyList+0xd8>)
 80056e2:	441a      	add	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3304      	adds	r3, #4
 80056e8:	4619      	mov	r1, r3
 80056ea:	4610      	mov	r0, r2
 80056ec:	f7ff f92f 	bl	800494e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80056f0:	f001 fa0a 	bl	8006b08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80056f4:	4b0d      	ldr	r3, [pc, #52]	; (800572c <prvAddNewTaskToReadyList+0xcc>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00e      	beq.n	800571a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80056fc:	4b0a      	ldr	r3, [pc, #40]	; (8005728 <prvAddNewTaskToReadyList+0xc8>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005706:	429a      	cmp	r2, r3
 8005708:	d207      	bcs.n	800571a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800570a:	4b0c      	ldr	r3, [pc, #48]	; (800573c <prvAddNewTaskToReadyList+0xdc>)
 800570c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800571a:	bf00      	nop
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	20000bc4 	.word	0x20000bc4
 8005728:	200006f0 	.word	0x200006f0
 800572c:	20000bd0 	.word	0x20000bd0
 8005730:	20000be0 	.word	0x20000be0
 8005734:	20000bcc 	.word	0x20000bcc
 8005738:	200006f4 	.word	0x200006f4
 800573c:	e000ed04 	.word	0xe000ed04

08005740 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005748:	2300      	movs	r3, #0
 800574a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d016      	beq.n	8005780 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005752:	4b13      	ldr	r3, [pc, #76]	; (80057a0 <vTaskDelay+0x60>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d009      	beq.n	800576e <vTaskDelay+0x2e>
 800575a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	60bb      	str	r3, [r7, #8]
 800576c:	e7fe      	b.n	800576c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800576e:	f000 f87f 	bl	8005870 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005772:	2100      	movs	r1, #0
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 fcd7 	bl	8006128 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800577a:	f000 f887 	bl	800588c <xTaskResumeAll>
 800577e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d107      	bne.n	8005796 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005786:	4b07      	ldr	r3, [pc, #28]	; (80057a4 <vTaskDelay+0x64>)
 8005788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005796:	bf00      	nop
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	20000bec 	.word	0x20000bec
 80057a4:	e000ed04 	.word	0xe000ed04

080057a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08a      	sub	sp, #40	; 0x28
 80057ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80057ae:	2300      	movs	r3, #0
 80057b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80057b2:	2300      	movs	r3, #0
 80057b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80057b6:	463a      	mov	r2, r7
 80057b8:	1d39      	adds	r1, r7, #4
 80057ba:	f107 0308 	add.w	r3, r7, #8
 80057be:	4618      	mov	r0, r3
 80057c0:	f7ff f864 	bl	800488c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80057c4:	6839      	ldr	r1, [r7, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	9202      	str	r2, [sp, #8]
 80057cc:	9301      	str	r3, [sp, #4]
 80057ce:	2300      	movs	r3, #0
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	2300      	movs	r3, #0
 80057d4:	460a      	mov	r2, r1
 80057d6:	4920      	ldr	r1, [pc, #128]	; (8005858 <vTaskStartScheduler+0xb0>)
 80057d8:	4820      	ldr	r0, [pc, #128]	; (800585c <vTaskStartScheduler+0xb4>)
 80057da:	f7ff fe13 	bl	8005404 <xTaskCreateStatic>
 80057de:	4602      	mov	r2, r0
 80057e0:	4b1f      	ldr	r3, [pc, #124]	; (8005860 <vTaskStartScheduler+0xb8>)
 80057e2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80057e4:	4b1e      	ldr	r3, [pc, #120]	; (8005860 <vTaskStartScheduler+0xb8>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80057ec:	2301      	movs	r3, #1
 80057ee:	617b      	str	r3, [r7, #20]
 80057f0:	e001      	b.n	80057f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80057f2:	2300      	movs	r3, #0
 80057f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d102      	bne.n	8005802 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80057fc:	f000 fce8 	bl	80061d0 <xTimerCreateTimerTask>
 8005800:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d115      	bne.n	8005834 <vTaskStartScheduler+0x8c>
 8005808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580c:	f383 8811 	msr	BASEPRI, r3
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800581a:	4b12      	ldr	r3, [pc, #72]	; (8005864 <vTaskStartScheduler+0xbc>)
 800581c:	f04f 32ff 	mov.w	r2, #4294967295
 8005820:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005822:	4b11      	ldr	r3, [pc, #68]	; (8005868 <vTaskStartScheduler+0xc0>)
 8005824:	2201      	movs	r2, #1
 8005826:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005828:	4b10      	ldr	r3, [pc, #64]	; (800586c <vTaskStartScheduler+0xc4>)
 800582a:	2200      	movs	r2, #0
 800582c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800582e:	f001 f89f 	bl	8006970 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005832:	e00d      	b.n	8005850 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583a:	d109      	bne.n	8005850 <vTaskStartScheduler+0xa8>
 800583c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005840:	f383 8811 	msr	BASEPRI, r3
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	60fb      	str	r3, [r7, #12]
 800584e:	e7fe      	b.n	800584e <vTaskStartScheduler+0xa6>
}
 8005850:	bf00      	nop
 8005852:	3718      	adds	r7, #24
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	08007130 	.word	0x08007130
 800585c:	08005e71 	.word	0x08005e71
 8005860:	20000be8 	.word	0x20000be8
 8005864:	20000be4 	.word	0x20000be4
 8005868:	20000bd0 	.word	0x20000bd0
 800586c:	20000bc8 	.word	0x20000bc8

08005870 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005870:	b480      	push	{r7}
 8005872:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005874:	4b04      	ldr	r3, [pc, #16]	; (8005888 <vTaskSuspendAll+0x18>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	3301      	adds	r3, #1
 800587a:	4a03      	ldr	r2, [pc, #12]	; (8005888 <vTaskSuspendAll+0x18>)
 800587c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800587e:	bf00      	nop
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	20000bec 	.word	0x20000bec

0800588c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005892:	2300      	movs	r3, #0
 8005894:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005896:	2300      	movs	r3, #0
 8005898:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800589a:	4b41      	ldr	r3, [pc, #260]	; (80059a0 <xTaskResumeAll+0x114>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d109      	bne.n	80058b6 <xTaskResumeAll+0x2a>
 80058a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	603b      	str	r3, [r7, #0]
 80058b4:	e7fe      	b.n	80058b4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80058b6:	f001 f8f9 	bl	8006aac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80058ba:	4b39      	ldr	r3, [pc, #228]	; (80059a0 <xTaskResumeAll+0x114>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	3b01      	subs	r3, #1
 80058c0:	4a37      	ldr	r2, [pc, #220]	; (80059a0 <xTaskResumeAll+0x114>)
 80058c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058c4:	4b36      	ldr	r3, [pc, #216]	; (80059a0 <xTaskResumeAll+0x114>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d162      	bne.n	8005992 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80058cc:	4b35      	ldr	r3, [pc, #212]	; (80059a4 <xTaskResumeAll+0x118>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d05e      	beq.n	8005992 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058d4:	e02f      	b.n	8005936 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058d6:	4b34      	ldr	r3, [pc, #208]	; (80059a8 <xTaskResumeAll+0x11c>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3318      	adds	r3, #24
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7ff f890 	bl	8004a08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	3304      	adds	r3, #4
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7ff f88b 	bl	8004a08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f6:	4b2d      	ldr	r3, [pc, #180]	; (80059ac <xTaskResumeAll+0x120>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d903      	bls.n	8005906 <xTaskResumeAll+0x7a>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005902:	4a2a      	ldr	r2, [pc, #168]	; (80059ac <xTaskResumeAll+0x120>)
 8005904:	6013      	str	r3, [r2, #0]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800590a:	4613      	mov	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4413      	add	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4a27      	ldr	r2, [pc, #156]	; (80059b0 <xTaskResumeAll+0x124>)
 8005914:	441a      	add	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	3304      	adds	r3, #4
 800591a:	4619      	mov	r1, r3
 800591c:	4610      	mov	r0, r2
 800591e:	f7ff f816 	bl	800494e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005926:	4b23      	ldr	r3, [pc, #140]	; (80059b4 <xTaskResumeAll+0x128>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592c:	429a      	cmp	r2, r3
 800592e:	d302      	bcc.n	8005936 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005930:	4b21      	ldr	r3, [pc, #132]	; (80059b8 <xTaskResumeAll+0x12c>)
 8005932:	2201      	movs	r2, #1
 8005934:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005936:	4b1c      	ldr	r3, [pc, #112]	; (80059a8 <xTaskResumeAll+0x11c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1cb      	bne.n	80058d6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005944:	f000 fb46 	bl	8005fd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005948:	4b1c      	ldr	r3, [pc, #112]	; (80059bc <xTaskResumeAll+0x130>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d010      	beq.n	8005976 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005954:	f000 f846 	bl	80059e4 <xTaskIncrementTick>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800595e:	4b16      	ldr	r3, [pc, #88]	; (80059b8 <xTaskResumeAll+0x12c>)
 8005960:	2201      	movs	r2, #1
 8005962:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3b01      	subs	r3, #1
 8005968:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1f1      	bne.n	8005954 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005970:	4b12      	ldr	r3, [pc, #72]	; (80059bc <xTaskResumeAll+0x130>)
 8005972:	2200      	movs	r2, #0
 8005974:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005976:	4b10      	ldr	r3, [pc, #64]	; (80059b8 <xTaskResumeAll+0x12c>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d009      	beq.n	8005992 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800597e:	2301      	movs	r3, #1
 8005980:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005982:	4b0f      	ldr	r3, [pc, #60]	; (80059c0 <xTaskResumeAll+0x134>)
 8005984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005992:	f001 f8b9 	bl	8006b08 <vPortExitCritical>

	return xAlreadyYielded;
 8005996:	68bb      	ldr	r3, [r7, #8]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	20000bec 	.word	0x20000bec
 80059a4:	20000bc4 	.word	0x20000bc4
 80059a8:	20000b84 	.word	0x20000b84
 80059ac:	20000bcc 	.word	0x20000bcc
 80059b0:	200006f4 	.word	0x200006f4
 80059b4:	200006f0 	.word	0x200006f0
 80059b8:	20000bd8 	.word	0x20000bd8
 80059bc:	20000bd4 	.word	0x20000bd4
 80059c0:	e000ed04 	.word	0xe000ed04

080059c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80059ca:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <xTaskGetTickCount+0x1c>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80059d0:	687b      	ldr	r3, [r7, #4]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	20000bc8 	.word	0x20000bc8

080059e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80059ea:	2300      	movs	r3, #0
 80059ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059ee:	4b4e      	ldr	r3, [pc, #312]	; (8005b28 <xTaskIncrementTick+0x144>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f040 8088 	bne.w	8005b08 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059f8:	4b4c      	ldr	r3, [pc, #304]	; (8005b2c <xTaskIncrementTick+0x148>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3301      	adds	r3, #1
 80059fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a00:	4a4a      	ldr	r2, [pc, #296]	; (8005b2c <xTaskIncrementTick+0x148>)
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d11f      	bne.n	8005a4c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a0c:	4b48      	ldr	r3, [pc, #288]	; (8005b30 <xTaskIncrementTick+0x14c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d009      	beq.n	8005a2a <xTaskIncrementTick+0x46>
 8005a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	603b      	str	r3, [r7, #0]
 8005a28:	e7fe      	b.n	8005a28 <xTaskIncrementTick+0x44>
 8005a2a:	4b41      	ldr	r3, [pc, #260]	; (8005b30 <xTaskIncrementTick+0x14c>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	4b40      	ldr	r3, [pc, #256]	; (8005b34 <xTaskIncrementTick+0x150>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a3e      	ldr	r2, [pc, #248]	; (8005b30 <xTaskIncrementTick+0x14c>)
 8005a36:	6013      	str	r3, [r2, #0]
 8005a38:	4a3e      	ldr	r2, [pc, #248]	; (8005b34 <xTaskIncrementTick+0x150>)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6013      	str	r3, [r2, #0]
 8005a3e:	4b3e      	ldr	r3, [pc, #248]	; (8005b38 <xTaskIncrementTick+0x154>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3301      	adds	r3, #1
 8005a44:	4a3c      	ldr	r2, [pc, #240]	; (8005b38 <xTaskIncrementTick+0x154>)
 8005a46:	6013      	str	r3, [r2, #0]
 8005a48:	f000 fac4 	bl	8005fd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a4c:	4b3b      	ldr	r3, [pc, #236]	; (8005b3c <xTaskIncrementTick+0x158>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d349      	bcc.n	8005aea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a56:	4b36      	ldr	r3, [pc, #216]	; (8005b30 <xTaskIncrementTick+0x14c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d104      	bne.n	8005a6a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a60:	4b36      	ldr	r3, [pc, #216]	; (8005b3c <xTaskIncrementTick+0x158>)
 8005a62:	f04f 32ff 	mov.w	r2, #4294967295
 8005a66:	601a      	str	r2, [r3, #0]
					break;
 8005a68:	e03f      	b.n	8005aea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a6a:	4b31      	ldr	r3, [pc, #196]	; (8005b30 <xTaskIncrementTick+0x14c>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d203      	bcs.n	8005a8a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a82:	4a2e      	ldr	r2, [pc, #184]	; (8005b3c <xTaskIncrementTick+0x158>)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a88:	e02f      	b.n	8005aea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fe ffba 	bl	8004a08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d004      	beq.n	8005aa6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	3318      	adds	r3, #24
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fe ffb1 	bl	8004a08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aaa:	4b25      	ldr	r3, [pc, #148]	; (8005b40 <xTaskIncrementTick+0x15c>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d903      	bls.n	8005aba <xTaskIncrementTick+0xd6>
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab6:	4a22      	ldr	r2, [pc, #136]	; (8005b40 <xTaskIncrementTick+0x15c>)
 8005ab8:	6013      	str	r3, [r2, #0]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005abe:	4613      	mov	r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	4413      	add	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4a1f      	ldr	r2, [pc, #124]	; (8005b44 <xTaskIncrementTick+0x160>)
 8005ac8:	441a      	add	r2, r3
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	3304      	adds	r3, #4
 8005ace:	4619      	mov	r1, r3
 8005ad0:	4610      	mov	r0, r2
 8005ad2:	f7fe ff3c 	bl	800494e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ada:	4b1b      	ldr	r3, [pc, #108]	; (8005b48 <xTaskIncrementTick+0x164>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d3b8      	bcc.n	8005a56 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ae8:	e7b5      	b.n	8005a56 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005aea:	4b17      	ldr	r3, [pc, #92]	; (8005b48 <xTaskIncrementTick+0x164>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af0:	4914      	ldr	r1, [pc, #80]	; (8005b44 <xTaskIncrementTick+0x160>)
 8005af2:	4613      	mov	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	440b      	add	r3, r1
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d907      	bls.n	8005b12 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005b02:	2301      	movs	r3, #1
 8005b04:	617b      	str	r3, [r7, #20]
 8005b06:	e004      	b.n	8005b12 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005b08:	4b10      	ldr	r3, [pc, #64]	; (8005b4c <xTaskIncrementTick+0x168>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	4a0f      	ldr	r2, [pc, #60]	; (8005b4c <xTaskIncrementTick+0x168>)
 8005b10:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005b12:	4b0f      	ldr	r3, [pc, #60]	; (8005b50 <xTaskIncrementTick+0x16c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005b1e:	697b      	ldr	r3, [r7, #20]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	20000bec 	.word	0x20000bec
 8005b2c:	20000bc8 	.word	0x20000bc8
 8005b30:	20000b7c 	.word	0x20000b7c
 8005b34:	20000b80 	.word	0x20000b80
 8005b38:	20000bdc 	.word	0x20000bdc
 8005b3c:	20000be4 	.word	0x20000be4
 8005b40:	20000bcc 	.word	0x20000bcc
 8005b44:	200006f4 	.word	0x200006f4
 8005b48:	200006f0 	.word	0x200006f0
 8005b4c:	20000bd4 	.word	0x20000bd4
 8005b50:	20000bd8 	.word	0x20000bd8

08005b54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b5a:	4b27      	ldr	r3, [pc, #156]	; (8005bf8 <vTaskSwitchContext+0xa4>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b62:	4b26      	ldr	r3, [pc, #152]	; (8005bfc <vTaskSwitchContext+0xa8>)
 8005b64:	2201      	movs	r2, #1
 8005b66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b68:	e040      	b.n	8005bec <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005b6a:	4b24      	ldr	r3, [pc, #144]	; (8005bfc <vTaskSwitchContext+0xa8>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b70:	4b23      	ldr	r3, [pc, #140]	; (8005c00 <vTaskSwitchContext+0xac>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	60fb      	str	r3, [r7, #12]
 8005b76:	e00f      	b.n	8005b98 <vTaskSwitchContext+0x44>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d109      	bne.n	8005b92 <vTaskSwitchContext+0x3e>
 8005b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	607b      	str	r3, [r7, #4]
 8005b90:	e7fe      	b.n	8005b90 <vTaskSwitchContext+0x3c>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	3b01      	subs	r3, #1
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	491a      	ldr	r1, [pc, #104]	; (8005c04 <vTaskSwitchContext+0xb0>)
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d0e5      	beq.n	8005b78 <vTaskSwitchContext+0x24>
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4a13      	ldr	r2, [pc, #76]	; (8005c04 <vTaskSwitchContext+0xb0>)
 8005bb8:	4413      	add	r3, r2
 8005bba:	60bb      	str	r3, [r7, #8]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	605a      	str	r2, [r3, #4]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	3308      	adds	r3, #8
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d104      	bne.n	8005bdc <vTaskSwitchContext+0x88>
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	605a      	str	r2, [r3, #4]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	4a09      	ldr	r2, [pc, #36]	; (8005c08 <vTaskSwitchContext+0xb4>)
 8005be4:	6013      	str	r3, [r2, #0]
 8005be6:	4a06      	ldr	r2, [pc, #24]	; (8005c00 <vTaskSwitchContext+0xac>)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6013      	str	r3, [r2, #0]
}
 8005bec:	bf00      	nop
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	20000bec 	.word	0x20000bec
 8005bfc:	20000bd8 	.word	0x20000bd8
 8005c00:	20000bcc 	.word	0x20000bcc
 8005c04:	200006f4 	.word	0x200006f4
 8005c08:	200006f0 	.word	0x200006f0

08005c0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d109      	bne.n	8005c30 <vTaskPlaceOnEventList+0x24>
 8005c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c20:	f383 8811 	msr	BASEPRI, r3
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	e7fe      	b.n	8005c2e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c30:	4b07      	ldr	r3, [pc, #28]	; (8005c50 <vTaskPlaceOnEventList+0x44>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3318      	adds	r3, #24
 8005c36:	4619      	mov	r1, r3
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7fe feac 	bl	8004996 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c3e:	2101      	movs	r1, #1
 8005c40:	6838      	ldr	r0, [r7, #0]
 8005c42:	f000 fa71 	bl	8006128 <prvAddCurrentTaskToDelayedList>
}
 8005c46:	bf00      	nop
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	200006f0 	.word	0x200006f0

08005c54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d109      	bne.n	8005c7a <vTaskPlaceOnEventListRestricted+0x26>
 8005c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	617b      	str	r3, [r7, #20]
 8005c78:	e7fe      	b.n	8005c78 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c7a:	4b0a      	ldr	r3, [pc, #40]	; (8005ca4 <vTaskPlaceOnEventListRestricted+0x50>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3318      	adds	r3, #24
 8005c80:	4619      	mov	r1, r3
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f7fe fe63 	bl	800494e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d002      	beq.n	8005c94 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c92:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	68b8      	ldr	r0, [r7, #8]
 8005c98:	f000 fa46 	bl	8006128 <prvAddCurrentTaskToDelayedList>
	}
 8005c9c:	bf00      	nop
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	200006f0 	.word	0x200006f0

08005ca8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d109      	bne.n	8005cd2 <xTaskRemoveFromEventList+0x2a>
 8005cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	60fb      	str	r3, [r7, #12]
 8005cd0:	e7fe      	b.n	8005cd0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	3318      	adds	r3, #24
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fe fe96 	bl	8004a08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cdc:	4b1d      	ldr	r3, [pc, #116]	; (8005d54 <xTaskRemoveFromEventList+0xac>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d11d      	bne.n	8005d20 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fe fe8d 	bl	8004a08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf2:	4b19      	ldr	r3, [pc, #100]	; (8005d58 <xTaskRemoveFromEventList+0xb0>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d903      	bls.n	8005d02 <xTaskRemoveFromEventList+0x5a>
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfe:	4a16      	ldr	r2, [pc, #88]	; (8005d58 <xTaskRemoveFromEventList+0xb0>)
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d06:	4613      	mov	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4a13      	ldr	r2, [pc, #76]	; (8005d5c <xTaskRemoveFromEventList+0xb4>)
 8005d10:	441a      	add	r2, r3
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	3304      	adds	r3, #4
 8005d16:	4619      	mov	r1, r3
 8005d18:	4610      	mov	r0, r2
 8005d1a:	f7fe fe18 	bl	800494e <vListInsertEnd>
 8005d1e:	e005      	b.n	8005d2c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	3318      	adds	r3, #24
 8005d24:	4619      	mov	r1, r3
 8005d26:	480e      	ldr	r0, [pc, #56]	; (8005d60 <xTaskRemoveFromEventList+0xb8>)
 8005d28:	f7fe fe11 	bl	800494e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d30:	4b0c      	ldr	r3, [pc, #48]	; (8005d64 <xTaskRemoveFromEventList+0xbc>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d905      	bls.n	8005d46 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d3e:	4b0a      	ldr	r3, [pc, #40]	; (8005d68 <xTaskRemoveFromEventList+0xc0>)
 8005d40:	2201      	movs	r2, #1
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	e001      	b.n	8005d4a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005d46:	2300      	movs	r3, #0
 8005d48:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d4a:	697b      	ldr	r3, [r7, #20]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3718      	adds	r7, #24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	20000bec 	.word	0x20000bec
 8005d58:	20000bcc 	.word	0x20000bcc
 8005d5c:	200006f4 	.word	0x200006f4
 8005d60:	20000b84 	.word	0x20000b84
 8005d64:	200006f0 	.word	0x200006f0
 8005d68:	20000bd8 	.word	0x20000bd8

08005d6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d74:	4b06      	ldr	r3, [pc, #24]	; (8005d90 <vTaskInternalSetTimeOutState+0x24>)
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d7c:	4b05      	ldr	r3, [pc, #20]	; (8005d94 <vTaskInternalSetTimeOutState+0x28>)
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	605a      	str	r2, [r3, #4]
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	20000bdc 	.word	0x20000bdc
 8005d94:	20000bc8 	.word	0x20000bc8

08005d98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b088      	sub	sp, #32
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d109      	bne.n	8005dbc <xTaskCheckForTimeOut+0x24>
 8005da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	613b      	str	r3, [r7, #16]
 8005dba:	e7fe      	b.n	8005dba <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d109      	bne.n	8005dd6 <xTaskCheckForTimeOut+0x3e>
 8005dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	60fb      	str	r3, [r7, #12]
 8005dd4:	e7fe      	b.n	8005dd4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005dd6:	f000 fe69 	bl	8006aac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005dda:	4b1d      	ldr	r3, [pc, #116]	; (8005e50 <xTaskCheckForTimeOut+0xb8>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df2:	d102      	bne.n	8005dfa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005df4:	2300      	movs	r3, #0
 8005df6:	61fb      	str	r3, [r7, #28]
 8005df8:	e023      	b.n	8005e42 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	4b15      	ldr	r3, [pc, #84]	; (8005e54 <xTaskCheckForTimeOut+0xbc>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d007      	beq.n	8005e16 <xTaskCheckForTimeOut+0x7e>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d302      	bcc.n	8005e16 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e10:	2301      	movs	r3, #1
 8005e12:	61fb      	str	r3, [r7, #28]
 8005e14:	e015      	b.n	8005e42 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d20b      	bcs.n	8005e38 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	1ad2      	subs	r2, r2, r3
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f7ff ff9d 	bl	8005d6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e32:	2300      	movs	r3, #0
 8005e34:	61fb      	str	r3, [r7, #28]
 8005e36:	e004      	b.n	8005e42 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e42:	f000 fe61 	bl	8006b08 <vPortExitCritical>

	return xReturn;
 8005e46:	69fb      	ldr	r3, [r7, #28]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3720      	adds	r7, #32
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	20000bc8 	.word	0x20000bc8
 8005e54:	20000bdc 	.word	0x20000bdc

08005e58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e58:	b480      	push	{r7}
 8005e5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e5c:	4b03      	ldr	r3, [pc, #12]	; (8005e6c <vTaskMissedYield+0x14>)
 8005e5e:	2201      	movs	r2, #1
 8005e60:	601a      	str	r2, [r3, #0]
}
 8005e62:	bf00      	nop
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	20000bd8 	.word	0x20000bd8

08005e70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e78:	f000 f852 	bl	8005f20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e7c:	4b06      	ldr	r3, [pc, #24]	; (8005e98 <prvIdleTask+0x28>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d9f9      	bls.n	8005e78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e84:	4b05      	ldr	r3, [pc, #20]	; (8005e9c <prvIdleTask+0x2c>)
 8005e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e94:	e7f0      	b.n	8005e78 <prvIdleTask+0x8>
 8005e96:	bf00      	nop
 8005e98:	200006f4 	.word	0x200006f4
 8005e9c:	e000ed04 	.word	0xe000ed04

08005ea0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	607b      	str	r3, [r7, #4]
 8005eaa:	e00c      	b.n	8005ec6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4a12      	ldr	r2, [pc, #72]	; (8005f00 <prvInitialiseTaskLists+0x60>)
 8005eb8:	4413      	add	r3, r2
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fe fd1a 	bl	80048f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	607b      	str	r3, [r7, #4]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b37      	cmp	r3, #55	; 0x37
 8005eca:	d9ef      	bls.n	8005eac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ecc:	480d      	ldr	r0, [pc, #52]	; (8005f04 <prvInitialiseTaskLists+0x64>)
 8005ece:	f7fe fd11 	bl	80048f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ed2:	480d      	ldr	r0, [pc, #52]	; (8005f08 <prvInitialiseTaskLists+0x68>)
 8005ed4:	f7fe fd0e 	bl	80048f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ed8:	480c      	ldr	r0, [pc, #48]	; (8005f0c <prvInitialiseTaskLists+0x6c>)
 8005eda:	f7fe fd0b 	bl	80048f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ede:	480c      	ldr	r0, [pc, #48]	; (8005f10 <prvInitialiseTaskLists+0x70>)
 8005ee0:	f7fe fd08 	bl	80048f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ee4:	480b      	ldr	r0, [pc, #44]	; (8005f14 <prvInitialiseTaskLists+0x74>)
 8005ee6:	f7fe fd05 	bl	80048f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005eea:	4b0b      	ldr	r3, [pc, #44]	; (8005f18 <prvInitialiseTaskLists+0x78>)
 8005eec:	4a05      	ldr	r2, [pc, #20]	; (8005f04 <prvInitialiseTaskLists+0x64>)
 8005eee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ef0:	4b0a      	ldr	r3, [pc, #40]	; (8005f1c <prvInitialiseTaskLists+0x7c>)
 8005ef2:	4a05      	ldr	r2, [pc, #20]	; (8005f08 <prvInitialiseTaskLists+0x68>)
 8005ef4:	601a      	str	r2, [r3, #0]
}
 8005ef6:	bf00      	nop
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	200006f4 	.word	0x200006f4
 8005f04:	20000b54 	.word	0x20000b54
 8005f08:	20000b68 	.word	0x20000b68
 8005f0c:	20000b84 	.word	0x20000b84
 8005f10:	20000b98 	.word	0x20000b98
 8005f14:	20000bb0 	.word	0x20000bb0
 8005f18:	20000b7c 	.word	0x20000b7c
 8005f1c:	20000b80 	.word	0x20000b80

08005f20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f26:	e019      	b.n	8005f5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f28:	f000 fdc0 	bl	8006aac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f2c:	4b0f      	ldr	r3, [pc, #60]	; (8005f6c <prvCheckTasksWaitingTermination+0x4c>)
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	3304      	adds	r3, #4
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fe fd65 	bl	8004a08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f3e:	4b0c      	ldr	r3, [pc, #48]	; (8005f70 <prvCheckTasksWaitingTermination+0x50>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	4a0a      	ldr	r2, [pc, #40]	; (8005f70 <prvCheckTasksWaitingTermination+0x50>)
 8005f46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f48:	4b0a      	ldr	r3, [pc, #40]	; (8005f74 <prvCheckTasksWaitingTermination+0x54>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	4a09      	ldr	r2, [pc, #36]	; (8005f74 <prvCheckTasksWaitingTermination+0x54>)
 8005f50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f52:	f000 fdd9 	bl	8006b08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f80e 	bl	8005f78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f5c:	4b05      	ldr	r3, [pc, #20]	; (8005f74 <prvCheckTasksWaitingTermination+0x54>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1e1      	bne.n	8005f28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f64:	bf00      	nop
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	20000b98 	.word	0x20000b98
 8005f70:	20000bc4 	.word	0x20000bc4
 8005f74:	20000bac 	.word	0x20000bac

08005f78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d108      	bne.n	8005f9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 ff68 	bl	8006e64 <vPortFree>
				vPortFree( pxTCB );
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 ff65 	bl	8006e64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f9a:	e017      	b.n	8005fcc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d103      	bne.n	8005fae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 ff5c 	bl	8006e64 <vPortFree>
	}
 8005fac:	e00e      	b.n	8005fcc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d009      	beq.n	8005fcc <prvDeleteTCB+0x54>
 8005fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	e7fe      	b.n	8005fca <prvDeleteTCB+0x52>
	}
 8005fcc:	bf00      	nop
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fda:	4b0c      	ldr	r3, [pc, #48]	; (800600c <prvResetNextTaskUnblockTime+0x38>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d104      	bne.n	8005fee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fe4:	4b0a      	ldr	r3, [pc, #40]	; (8006010 <prvResetNextTaskUnblockTime+0x3c>)
 8005fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8005fea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005fec:	e008      	b.n	8006000 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fee:	4b07      	ldr	r3, [pc, #28]	; (800600c <prvResetNextTaskUnblockTime+0x38>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	4a04      	ldr	r2, [pc, #16]	; (8006010 <prvResetNextTaskUnblockTime+0x3c>)
 8005ffe:	6013      	str	r3, [r2, #0]
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	20000b7c 	.word	0x20000b7c
 8006010:	20000be4 	.word	0x20000be4

08006014 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800601a:	4b0b      	ldr	r3, [pc, #44]	; (8006048 <xTaskGetSchedulerState+0x34>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d102      	bne.n	8006028 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006022:	2301      	movs	r3, #1
 8006024:	607b      	str	r3, [r7, #4]
 8006026:	e008      	b.n	800603a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006028:	4b08      	ldr	r3, [pc, #32]	; (800604c <xTaskGetSchedulerState+0x38>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d102      	bne.n	8006036 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006030:	2302      	movs	r3, #2
 8006032:	607b      	str	r3, [r7, #4]
 8006034:	e001      	b.n	800603a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006036:	2300      	movs	r3, #0
 8006038:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800603a:	687b      	ldr	r3, [r7, #4]
	}
 800603c:	4618      	mov	r0, r3
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	20000bd0 	.word	0x20000bd0
 800604c:	20000bec 	.word	0x20000bec

08006050 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800605c:	2300      	movs	r3, #0
 800605e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d054      	beq.n	8006110 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006066:	4b2d      	ldr	r3, [pc, #180]	; (800611c <xTaskPriorityDisinherit+0xcc>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	429a      	cmp	r2, r3
 800606e:	d009      	beq.n	8006084 <xTaskPriorityDisinherit+0x34>
 8006070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006074:	f383 8811 	msr	BASEPRI, r3
 8006078:	f3bf 8f6f 	isb	sy
 800607c:	f3bf 8f4f 	dsb	sy
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	e7fe      	b.n	8006082 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006088:	2b00      	cmp	r3, #0
 800608a:	d109      	bne.n	80060a0 <xTaskPriorityDisinherit+0x50>
 800608c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006090:	f383 8811 	msr	BASEPRI, r3
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	60bb      	str	r3, [r7, #8]
 800609e:	e7fe      	b.n	800609e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a4:	1e5a      	subs	r2, r3, #1
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d02c      	beq.n	8006110 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d128      	bne.n	8006110 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	3304      	adds	r3, #4
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fe fca0 	bl	8004a08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e0:	4b0f      	ldr	r3, [pc, #60]	; (8006120 <xTaskPriorityDisinherit+0xd0>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d903      	bls.n	80060f0 <xTaskPriorityDisinherit+0xa0>
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	4a0c      	ldr	r2, [pc, #48]	; (8006120 <xTaskPriorityDisinherit+0xd0>)
 80060ee:	6013      	str	r3, [r2, #0]
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f4:	4613      	mov	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4a09      	ldr	r2, [pc, #36]	; (8006124 <xTaskPriorityDisinherit+0xd4>)
 80060fe:	441a      	add	r2, r3
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	3304      	adds	r3, #4
 8006104:	4619      	mov	r1, r3
 8006106:	4610      	mov	r0, r2
 8006108:	f7fe fc21 	bl	800494e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800610c:	2301      	movs	r3, #1
 800610e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006110:	697b      	ldr	r3, [r7, #20]
	}
 8006112:	4618      	mov	r0, r3
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	200006f0 	.word	0x200006f0
 8006120:	20000bcc 	.word	0x20000bcc
 8006124:	200006f4 	.word	0x200006f4

08006128 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006132:	4b21      	ldr	r3, [pc, #132]	; (80061b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006138:	4b20      	ldr	r3, [pc, #128]	; (80061bc <prvAddCurrentTaskToDelayedList+0x94>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3304      	adds	r3, #4
 800613e:	4618      	mov	r0, r3
 8006140:	f7fe fc62 	bl	8004a08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614a:	d10a      	bne.n	8006162 <prvAddCurrentTaskToDelayedList+0x3a>
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d007      	beq.n	8006162 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006152:	4b1a      	ldr	r3, [pc, #104]	; (80061bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3304      	adds	r3, #4
 8006158:	4619      	mov	r1, r3
 800615a:	4819      	ldr	r0, [pc, #100]	; (80061c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800615c:	f7fe fbf7 	bl	800494e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006160:	e026      	b.n	80061b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4413      	add	r3, r2
 8006168:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800616a:	4b14      	ldr	r3, [pc, #80]	; (80061bc <prvAddCurrentTaskToDelayedList+0x94>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	429a      	cmp	r2, r3
 8006178:	d209      	bcs.n	800618e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800617a:	4b12      	ldr	r3, [pc, #72]	; (80061c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	4b0f      	ldr	r3, [pc, #60]	; (80061bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3304      	adds	r3, #4
 8006184:	4619      	mov	r1, r3
 8006186:	4610      	mov	r0, r2
 8006188:	f7fe fc05 	bl	8004996 <vListInsert>
}
 800618c:	e010      	b.n	80061b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800618e:	4b0e      	ldr	r3, [pc, #56]	; (80061c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	4b0a      	ldr	r3, [pc, #40]	; (80061bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3304      	adds	r3, #4
 8006198:	4619      	mov	r1, r3
 800619a:	4610      	mov	r0, r2
 800619c:	f7fe fbfb 	bl	8004996 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061a0:	4b0a      	ldr	r3, [pc, #40]	; (80061cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d202      	bcs.n	80061b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80061aa:	4a08      	ldr	r2, [pc, #32]	; (80061cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	6013      	str	r3, [r2, #0]
}
 80061b0:	bf00      	nop
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	20000bc8 	.word	0x20000bc8
 80061bc:	200006f0 	.word	0x200006f0
 80061c0:	20000bb0 	.word	0x20000bb0
 80061c4:	20000b80 	.word	0x20000b80
 80061c8:	20000b7c 	.word	0x20000b7c
 80061cc:	20000be4 	.word	0x20000be4

080061d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b08a      	sub	sp, #40	; 0x28
 80061d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80061d6:	2300      	movs	r3, #0
 80061d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80061da:	f000 faff 	bl	80067dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80061de:	4b1c      	ldr	r3, [pc, #112]	; (8006250 <xTimerCreateTimerTask+0x80>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d021      	beq.n	800622a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80061e6:	2300      	movs	r3, #0
 80061e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80061ea:	2300      	movs	r3, #0
 80061ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80061ee:	1d3a      	adds	r2, r7, #4
 80061f0:	f107 0108 	add.w	r1, r7, #8
 80061f4:	f107 030c 	add.w	r3, r7, #12
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fe fb61 	bl	80048c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80061fe:	6879      	ldr	r1, [r7, #4]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	9202      	str	r2, [sp, #8]
 8006206:	9301      	str	r3, [sp, #4]
 8006208:	2302      	movs	r3, #2
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	2300      	movs	r3, #0
 800620e:	460a      	mov	r2, r1
 8006210:	4910      	ldr	r1, [pc, #64]	; (8006254 <xTimerCreateTimerTask+0x84>)
 8006212:	4811      	ldr	r0, [pc, #68]	; (8006258 <xTimerCreateTimerTask+0x88>)
 8006214:	f7ff f8f6 	bl	8005404 <xTaskCreateStatic>
 8006218:	4602      	mov	r2, r0
 800621a:	4b10      	ldr	r3, [pc, #64]	; (800625c <xTimerCreateTimerTask+0x8c>)
 800621c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800621e:	4b0f      	ldr	r3, [pc, #60]	; (800625c <xTimerCreateTimerTask+0x8c>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006226:	2301      	movs	r3, #1
 8006228:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d109      	bne.n	8006244 <xTimerCreateTimerTask+0x74>
 8006230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006234:	f383 8811 	msr	BASEPRI, r3
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	613b      	str	r3, [r7, #16]
 8006242:	e7fe      	b.n	8006242 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006244:	697b      	ldr	r3, [r7, #20]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20000c20 	.word	0x20000c20
 8006254:	08007138 	.word	0x08007138
 8006258:	08006391 	.word	0x08006391
 800625c:	20000c24 	.word	0x20000c24

08006260 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b08a      	sub	sp, #40	; 0x28
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
 800626c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800626e:	2300      	movs	r3, #0
 8006270:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d109      	bne.n	800628c <xTimerGenericCommand+0x2c>
 8006278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	623b      	str	r3, [r7, #32]
 800628a:	e7fe      	b.n	800628a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800628c:	4b19      	ldr	r3, [pc, #100]	; (80062f4 <xTimerGenericCommand+0x94>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d02a      	beq.n	80062ea <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	2b05      	cmp	r3, #5
 80062a4:	dc18      	bgt.n	80062d8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80062a6:	f7ff feb5 	bl	8006014 <xTaskGetSchedulerState>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d109      	bne.n	80062c4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80062b0:	4b10      	ldr	r3, [pc, #64]	; (80062f4 <xTimerGenericCommand+0x94>)
 80062b2:	6818      	ldr	r0, [r3, #0]
 80062b4:	f107 0110 	add.w	r1, r7, #16
 80062b8:	2300      	movs	r3, #0
 80062ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062bc:	f7fe fccc 	bl	8004c58 <xQueueGenericSend>
 80062c0:	6278      	str	r0, [r7, #36]	; 0x24
 80062c2:	e012      	b.n	80062ea <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80062c4:	4b0b      	ldr	r3, [pc, #44]	; (80062f4 <xTimerGenericCommand+0x94>)
 80062c6:	6818      	ldr	r0, [r3, #0]
 80062c8:	f107 0110 	add.w	r1, r7, #16
 80062cc:	2300      	movs	r3, #0
 80062ce:	2200      	movs	r2, #0
 80062d0:	f7fe fcc2 	bl	8004c58 <xQueueGenericSend>
 80062d4:	6278      	str	r0, [r7, #36]	; 0x24
 80062d6:	e008      	b.n	80062ea <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80062d8:	4b06      	ldr	r3, [pc, #24]	; (80062f4 <xTimerGenericCommand+0x94>)
 80062da:	6818      	ldr	r0, [r3, #0]
 80062dc:	f107 0110 	add.w	r1, r7, #16
 80062e0:	2300      	movs	r3, #0
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	f7fe fdb2 	bl	8004e4c <xQueueGenericSendFromISR>
 80062e8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3728      	adds	r7, #40	; 0x28
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	20000c20 	.word	0x20000c20

080062f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b088      	sub	sp, #32
 80062fc:	af02      	add	r7, sp, #8
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006302:	4b22      	ldr	r3, [pc, #136]	; (800638c <prvProcessExpiredTimer+0x94>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	3304      	adds	r3, #4
 8006310:	4618      	mov	r0, r3
 8006312:	f7fe fb79 	bl	8004a08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	d021      	beq.n	8006368 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	699a      	ldr	r2, [r3, #24]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	18d1      	adds	r1, r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	6978      	ldr	r0, [r7, #20]
 8006332:	f000 f8d1 	bl	80064d8 <prvInsertTimerInActiveList>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d01e      	beq.n	800637a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800633c:	2300      	movs	r3, #0
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	2300      	movs	r3, #0
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	2100      	movs	r1, #0
 8006346:	6978      	ldr	r0, [r7, #20]
 8006348:	f7ff ff8a 	bl	8006260 <xTimerGenericCommand>
 800634c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d112      	bne.n	800637a <prvProcessExpiredTimer+0x82>
 8006354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006358:	f383 8811 	msr	BASEPRI, r3
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	60fb      	str	r3, [r7, #12]
 8006366:	e7fe      	b.n	8006366 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800636e:	f023 0301 	bic.w	r3, r3, #1
 8006372:	b2da      	uxtb	r2, r3
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	6978      	ldr	r0, [r7, #20]
 8006380:	4798      	blx	r3
}
 8006382:	bf00      	nop
 8006384:	3718      	adds	r7, #24
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	20000c18 	.word	0x20000c18

08006390 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006398:	f107 0308 	add.w	r3, r7, #8
 800639c:	4618      	mov	r0, r3
 800639e:	f000 f857 	bl	8006450 <prvGetNextExpireTime>
 80063a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	4619      	mov	r1, r3
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f000 f803 	bl	80063b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80063ae:	f000 f8d5 	bl	800655c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063b2:	e7f1      	b.n	8006398 <prvTimerTask+0x8>

080063b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80063be:	f7ff fa57 	bl	8005870 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063c2:	f107 0308 	add.w	r3, r7, #8
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 f866 	bl	8006498 <prvSampleTimeNow>
 80063cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d130      	bne.n	8006436 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10a      	bne.n	80063f0 <prvProcessTimerOrBlockTask+0x3c>
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d806      	bhi.n	80063f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80063e2:	f7ff fa53 	bl	800588c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80063e6:	68f9      	ldr	r1, [r7, #12]
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f7ff ff85 	bl	80062f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80063ee:	e024      	b.n	800643a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d008      	beq.n	8006408 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80063f6:	4b13      	ldr	r3, [pc, #76]	; (8006444 <prvProcessTimerOrBlockTask+0x90>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <prvProcessTimerOrBlockTask+0x50>
 8006400:	2301      	movs	r3, #1
 8006402:	e000      	b.n	8006406 <prvProcessTimerOrBlockTask+0x52>
 8006404:	2300      	movs	r3, #0
 8006406:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006408:	4b0f      	ldr	r3, [pc, #60]	; (8006448 <prvProcessTimerOrBlockTask+0x94>)
 800640a:	6818      	ldr	r0, [r3, #0]
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	683a      	ldr	r2, [r7, #0]
 8006414:	4619      	mov	r1, r3
 8006416:	f7fe ffc1 	bl	800539c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800641a:	f7ff fa37 	bl	800588c <xTaskResumeAll>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10a      	bne.n	800643a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006424:	4b09      	ldr	r3, [pc, #36]	; (800644c <prvProcessTimerOrBlockTask+0x98>)
 8006426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800642a:	601a      	str	r2, [r3, #0]
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	f3bf 8f6f 	isb	sy
}
 8006434:	e001      	b.n	800643a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006436:	f7ff fa29 	bl	800588c <xTaskResumeAll>
}
 800643a:	bf00      	nop
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	20000c1c 	.word	0x20000c1c
 8006448:	20000c20 	.word	0x20000c20
 800644c:	e000ed04 	.word	0xe000ed04

08006450 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006458:	4b0e      	ldr	r3, [pc, #56]	; (8006494 <prvGetNextExpireTime+0x44>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <prvGetNextExpireTime+0x16>
 8006462:	2201      	movs	r2, #1
 8006464:	e000      	b.n	8006468 <prvGetNextExpireTime+0x18>
 8006466:	2200      	movs	r2, #0
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d105      	bne.n	8006480 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006474:	4b07      	ldr	r3, [pc, #28]	; (8006494 <prvGetNextExpireTime+0x44>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	60fb      	str	r3, [r7, #12]
 800647e:	e001      	b.n	8006484 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006480:	2300      	movs	r3, #0
 8006482:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006484:	68fb      	ldr	r3, [r7, #12]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	20000c18 	.word	0x20000c18

08006498 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80064a0:	f7ff fa90 	bl	80059c4 <xTaskGetTickCount>
 80064a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80064a6:	4b0b      	ldr	r3, [pc, #44]	; (80064d4 <prvSampleTimeNow+0x3c>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d205      	bcs.n	80064bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80064b0:	f000 f930 	bl	8006714 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	e002      	b.n	80064c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80064c2:	4a04      	ldr	r2, [pc, #16]	; (80064d4 <prvSampleTimeNow+0x3c>)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80064c8:	68fb      	ldr	r3, [r7, #12]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20000c28 	.word	0x20000c28

080064d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
 80064e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80064e6:	2300      	movs	r3, #0
 80064e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d812      	bhi.n	8006524 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	1ad2      	subs	r2, r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	429a      	cmp	r2, r3
 800650a:	d302      	bcc.n	8006512 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800650c:	2301      	movs	r3, #1
 800650e:	617b      	str	r3, [r7, #20]
 8006510:	e01b      	b.n	800654a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006512:	4b10      	ldr	r3, [pc, #64]	; (8006554 <prvInsertTimerInActiveList+0x7c>)
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	3304      	adds	r3, #4
 800651a:	4619      	mov	r1, r3
 800651c:	4610      	mov	r0, r2
 800651e:	f7fe fa3a 	bl	8004996 <vListInsert>
 8006522:	e012      	b.n	800654a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	429a      	cmp	r2, r3
 800652a:	d206      	bcs.n	800653a <prvInsertTimerInActiveList+0x62>
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	429a      	cmp	r2, r3
 8006532:	d302      	bcc.n	800653a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006534:	2301      	movs	r3, #1
 8006536:	617b      	str	r3, [r7, #20]
 8006538:	e007      	b.n	800654a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800653a:	4b07      	ldr	r3, [pc, #28]	; (8006558 <prvInsertTimerInActiveList+0x80>)
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	3304      	adds	r3, #4
 8006542:	4619      	mov	r1, r3
 8006544:	4610      	mov	r0, r2
 8006546:	f7fe fa26 	bl	8004996 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800654a:	697b      	ldr	r3, [r7, #20]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3718      	adds	r7, #24
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	20000c1c 	.word	0x20000c1c
 8006558:	20000c18 	.word	0x20000c18

0800655c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b08e      	sub	sp, #56	; 0x38
 8006560:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006562:	e0c6      	b.n	80066f2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	da17      	bge.n	800659a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800656a:	1d3b      	adds	r3, r7, #4
 800656c:	3304      	adds	r3, #4
 800656e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006572:	2b00      	cmp	r3, #0
 8006574:	d109      	bne.n	800658a <prvProcessReceivedCommands+0x2e>
 8006576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657a:	f383 8811 	msr	BASEPRI, r3
 800657e:	f3bf 8f6f 	isb	sy
 8006582:	f3bf 8f4f 	dsb	sy
 8006586:	61fb      	str	r3, [r7, #28]
 8006588:	e7fe      	b.n	8006588 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800658a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006590:	6850      	ldr	r0, [r2, #4]
 8006592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006594:	6892      	ldr	r2, [r2, #8]
 8006596:	4611      	mov	r1, r2
 8006598:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	f2c0 80a7 	blt.w	80066f0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80065a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d004      	beq.n	80065b8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b0:	3304      	adds	r3, #4
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7fe fa28 	bl	8004a08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065b8:	463b      	mov	r3, r7
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7ff ff6c 	bl	8006498 <prvSampleTimeNow>
 80065c0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b09      	cmp	r3, #9
 80065c6:	f200 8094 	bhi.w	80066f2 <prvProcessReceivedCommands+0x196>
 80065ca:	a201      	add	r2, pc, #4	; (adr r2, 80065d0 <prvProcessReceivedCommands+0x74>)
 80065cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d0:	080065f9 	.word	0x080065f9
 80065d4:	080065f9 	.word	0x080065f9
 80065d8:	080065f9 	.word	0x080065f9
 80065dc:	0800666b 	.word	0x0800666b
 80065e0:	0800667f 	.word	0x0800667f
 80065e4:	080066c7 	.word	0x080066c7
 80065e8:	080065f9 	.word	0x080065f9
 80065ec:	080065f9 	.word	0x080065f9
 80065f0:	0800666b 	.word	0x0800666b
 80065f4:	0800667f 	.word	0x0800667f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065fe:	f043 0301 	orr.w	r3, r3, #1
 8006602:	b2da      	uxtb	r2, r3
 8006604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006606:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	18d1      	adds	r1, r2, r3
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006618:	f7ff ff5e 	bl	80064d8 <prvInsertTimerInActiveList>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d067      	beq.n	80066f2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006628:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800662a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006630:	f003 0304 	and.w	r3, r3, #4
 8006634:	2b00      	cmp	r3, #0
 8006636:	d05c      	beq.n	80066f2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	441a      	add	r2, r3
 8006640:	2300      	movs	r3, #0
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	2300      	movs	r3, #0
 8006646:	2100      	movs	r1, #0
 8006648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800664a:	f7ff fe09 	bl	8006260 <xTimerGenericCommand>
 800664e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d14d      	bne.n	80066f2 <prvProcessReceivedCommands+0x196>
 8006656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	61bb      	str	r3, [r7, #24]
 8006668:	e7fe      	b.n	8006668 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800666a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006670:	f023 0301 	bic.w	r3, r3, #1
 8006674:	b2da      	uxtb	r2, r3
 8006676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006678:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800667c:	e039      	b.n	80066f2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800667e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006684:	f043 0301 	orr.w	r3, r3, #1
 8006688:	b2da      	uxtb	r2, r3
 800668a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006694:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d109      	bne.n	80066b2 <prvProcessReceivedCommands+0x156>
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	617b      	str	r3, [r7, #20]
 80066b0:	e7fe      	b.n	80066b0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80066b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b4:	699a      	ldr	r2, [r3, #24]
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	18d1      	adds	r1, r2, r3
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066c0:	f7ff ff0a 	bl	80064d8 <prvInsertTimerInActiveList>
					break;
 80066c4:	e015      	b.n	80066f2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80066c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d103      	bne.n	80066dc <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80066d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066d6:	f000 fbc5 	bl	8006e64 <vPortFree>
 80066da:	e00a      	b.n	80066f2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066e2:	f023 0301 	bic.w	r3, r3, #1
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80066ee:	e000      	b.n	80066f2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80066f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066f2:	4b07      	ldr	r3, [pc, #28]	; (8006710 <prvProcessReceivedCommands+0x1b4>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	1d39      	adds	r1, r7, #4
 80066f8:	2200      	movs	r2, #0
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7fe fc3a 	bl	8004f74 <xQueueReceive>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	f47f af2e 	bne.w	8006564 <prvProcessReceivedCommands+0x8>
	}
}
 8006708:	bf00      	nop
 800670a:	3730      	adds	r7, #48	; 0x30
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	20000c20 	.word	0x20000c20

08006714 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b088      	sub	sp, #32
 8006718:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800671a:	e047      	b.n	80067ac <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800671c:	4b2d      	ldr	r3, [pc, #180]	; (80067d4 <prvSwitchTimerLists+0xc0>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006726:	4b2b      	ldr	r3, [pc, #172]	; (80067d4 <prvSwitchTimerLists+0xc0>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	3304      	adds	r3, #4
 8006734:	4618      	mov	r0, r3
 8006736:	f7fe f967 	bl	8004a08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006748:	f003 0304 	and.w	r3, r3, #4
 800674c:	2b00      	cmp	r3, #0
 800674e:	d02d      	beq.n	80067ac <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	4413      	add	r3, r2
 8006758:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	429a      	cmp	r2, r3
 8006760:	d90e      	bls.n	8006780 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800676e:	4b19      	ldr	r3, [pc, #100]	; (80067d4 <prvSwitchTimerLists+0xc0>)
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	3304      	adds	r3, #4
 8006776:	4619      	mov	r1, r3
 8006778:	4610      	mov	r0, r2
 800677a:	f7fe f90c 	bl	8004996 <vListInsert>
 800677e:	e015      	b.n	80067ac <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006780:	2300      	movs	r3, #0
 8006782:	9300      	str	r3, [sp, #0]
 8006784:	2300      	movs	r3, #0
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	2100      	movs	r1, #0
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f7ff fd68 	bl	8006260 <xTimerGenericCommand>
 8006790:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d109      	bne.n	80067ac <prvSwitchTimerLists+0x98>
 8006798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	603b      	str	r3, [r7, #0]
 80067aa:	e7fe      	b.n	80067aa <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067ac:	4b09      	ldr	r3, [pc, #36]	; (80067d4 <prvSwitchTimerLists+0xc0>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1b2      	bne.n	800671c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80067b6:	4b07      	ldr	r3, [pc, #28]	; (80067d4 <prvSwitchTimerLists+0xc0>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80067bc:	4b06      	ldr	r3, [pc, #24]	; (80067d8 <prvSwitchTimerLists+0xc4>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a04      	ldr	r2, [pc, #16]	; (80067d4 <prvSwitchTimerLists+0xc0>)
 80067c2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80067c4:	4a04      	ldr	r2, [pc, #16]	; (80067d8 <prvSwitchTimerLists+0xc4>)
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	6013      	str	r3, [r2, #0]
}
 80067ca:	bf00      	nop
 80067cc:	3718      	adds	r7, #24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	20000c18 	.word	0x20000c18
 80067d8:	20000c1c 	.word	0x20000c1c

080067dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80067e2:	f000 f963 	bl	8006aac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80067e6:	4b15      	ldr	r3, [pc, #84]	; (800683c <prvCheckForValidListAndQueue+0x60>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d120      	bne.n	8006830 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80067ee:	4814      	ldr	r0, [pc, #80]	; (8006840 <prvCheckForValidListAndQueue+0x64>)
 80067f0:	f7fe f880 	bl	80048f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80067f4:	4813      	ldr	r0, [pc, #76]	; (8006844 <prvCheckForValidListAndQueue+0x68>)
 80067f6:	f7fe f87d 	bl	80048f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80067fa:	4b13      	ldr	r3, [pc, #76]	; (8006848 <prvCheckForValidListAndQueue+0x6c>)
 80067fc:	4a10      	ldr	r2, [pc, #64]	; (8006840 <prvCheckForValidListAndQueue+0x64>)
 80067fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006800:	4b12      	ldr	r3, [pc, #72]	; (800684c <prvCheckForValidListAndQueue+0x70>)
 8006802:	4a10      	ldr	r2, [pc, #64]	; (8006844 <prvCheckForValidListAndQueue+0x68>)
 8006804:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006806:	2300      	movs	r3, #0
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	4b11      	ldr	r3, [pc, #68]	; (8006850 <prvCheckForValidListAndQueue+0x74>)
 800680c:	4a11      	ldr	r2, [pc, #68]	; (8006854 <prvCheckForValidListAndQueue+0x78>)
 800680e:	2110      	movs	r1, #16
 8006810:	200a      	movs	r0, #10
 8006812:	f7fe f98b 	bl	8004b2c <xQueueGenericCreateStatic>
 8006816:	4602      	mov	r2, r0
 8006818:	4b08      	ldr	r3, [pc, #32]	; (800683c <prvCheckForValidListAndQueue+0x60>)
 800681a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800681c:	4b07      	ldr	r3, [pc, #28]	; (800683c <prvCheckForValidListAndQueue+0x60>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d005      	beq.n	8006830 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006824:	4b05      	ldr	r3, [pc, #20]	; (800683c <prvCheckForValidListAndQueue+0x60>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	490b      	ldr	r1, [pc, #44]	; (8006858 <prvCheckForValidListAndQueue+0x7c>)
 800682a:	4618      	mov	r0, r3
 800682c:	f7fe fd8e 	bl	800534c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006830:	f000 f96a 	bl	8006b08 <vPortExitCritical>
}
 8006834:	bf00      	nop
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	20000c20 	.word	0x20000c20
 8006840:	20000bf0 	.word	0x20000bf0
 8006844:	20000c04 	.word	0x20000c04
 8006848:	20000c18 	.word	0x20000c18
 800684c:	20000c1c 	.word	0x20000c1c
 8006850:	20000ccc 	.word	0x20000ccc
 8006854:	20000c2c 	.word	0x20000c2c
 8006858:	08007140 	.word	0x08007140

0800685c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	3b04      	subs	r3, #4
 800686c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006874:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	3b04      	subs	r3, #4
 800687a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	f023 0201 	bic.w	r2, r3, #1
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	3b04      	subs	r3, #4
 800688a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800688c:	4a0c      	ldr	r2, [pc, #48]	; (80068c0 <pxPortInitialiseStack+0x64>)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	3b14      	subs	r3, #20
 8006896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	3b04      	subs	r3, #4
 80068a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f06f 0202 	mvn.w	r2, #2
 80068aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	3b20      	subs	r3, #32
 80068b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80068b2:	68fb      	ldr	r3, [r7, #12]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	080068c5 	.word	0x080068c5

080068c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80068ca:	2300      	movs	r3, #0
 80068cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80068ce:	4b11      	ldr	r3, [pc, #68]	; (8006914 <prvTaskExitError+0x50>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d6:	d009      	beq.n	80068ec <prvTaskExitError+0x28>
 80068d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068dc:	f383 8811 	msr	BASEPRI, r3
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	60fb      	str	r3, [r7, #12]
 80068ea:	e7fe      	b.n	80068ea <prvTaskExitError+0x26>
 80068ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80068fe:	bf00      	nop
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0fc      	beq.n	8006900 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006906:	bf00      	nop
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	20000014 	.word	0x20000014
	...

08006920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006920:	4b07      	ldr	r3, [pc, #28]	; (8006940 <pxCurrentTCBConst2>)
 8006922:	6819      	ldr	r1, [r3, #0]
 8006924:	6808      	ldr	r0, [r1, #0]
 8006926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692a:	f380 8809 	msr	PSP, r0
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	f04f 0000 	mov.w	r0, #0
 8006936:	f380 8811 	msr	BASEPRI, r0
 800693a:	4770      	bx	lr
 800693c:	f3af 8000 	nop.w

08006940 <pxCurrentTCBConst2>:
 8006940:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006944:	bf00      	nop
 8006946:	bf00      	nop

08006948 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006948:	4808      	ldr	r0, [pc, #32]	; (800696c <prvPortStartFirstTask+0x24>)
 800694a:	6800      	ldr	r0, [r0, #0]
 800694c:	6800      	ldr	r0, [r0, #0]
 800694e:	f380 8808 	msr	MSP, r0
 8006952:	f04f 0000 	mov.w	r0, #0
 8006956:	f380 8814 	msr	CONTROL, r0
 800695a:	b662      	cpsie	i
 800695c:	b661      	cpsie	f
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	df00      	svc	0
 8006968:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800696a:	bf00      	nop
 800696c:	e000ed08 	.word	0xe000ed08

08006970 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006976:	4b44      	ldr	r3, [pc, #272]	; (8006a88 <xPortStartScheduler+0x118>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a44      	ldr	r2, [pc, #272]	; (8006a8c <xPortStartScheduler+0x11c>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d109      	bne.n	8006994 <xPortStartScheduler+0x24>
 8006980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	613b      	str	r3, [r7, #16]
 8006992:	e7fe      	b.n	8006992 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006994:	4b3c      	ldr	r3, [pc, #240]	; (8006a88 <xPortStartScheduler+0x118>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a3d      	ldr	r2, [pc, #244]	; (8006a90 <xPortStartScheduler+0x120>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d109      	bne.n	80069b2 <xPortStartScheduler+0x42>
 800699e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	60fb      	str	r3, [r7, #12]
 80069b0:	e7fe      	b.n	80069b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80069b2:	4b38      	ldr	r3, [pc, #224]	; (8006a94 <xPortStartScheduler+0x124>)
 80069b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	22ff      	movs	r2, #255	; 0xff
 80069c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80069cc:	78fb      	ldrb	r3, [r7, #3]
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	4b30      	ldr	r3, [pc, #192]	; (8006a98 <xPortStartScheduler+0x128>)
 80069d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069da:	4b30      	ldr	r3, [pc, #192]	; (8006a9c <xPortStartScheduler+0x12c>)
 80069dc:	2207      	movs	r2, #7
 80069de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069e0:	e009      	b.n	80069f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80069e2:	4b2e      	ldr	r3, [pc, #184]	; (8006a9c <xPortStartScheduler+0x12c>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	3b01      	subs	r3, #1
 80069e8:	4a2c      	ldr	r2, [pc, #176]	; (8006a9c <xPortStartScheduler+0x12c>)
 80069ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069ec:	78fb      	ldrb	r3, [r7, #3]
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	005b      	lsls	r3, r3, #1
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069f6:	78fb      	ldrb	r3, [r7, #3]
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069fe:	2b80      	cmp	r3, #128	; 0x80
 8006a00:	d0ef      	beq.n	80069e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a02:	4b26      	ldr	r3, [pc, #152]	; (8006a9c <xPortStartScheduler+0x12c>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f1c3 0307 	rsb	r3, r3, #7
 8006a0a:	2b04      	cmp	r3, #4
 8006a0c:	d009      	beq.n	8006a22 <xPortStartScheduler+0xb2>
 8006a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	60bb      	str	r3, [r7, #8]
 8006a20:	e7fe      	b.n	8006a20 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a22:	4b1e      	ldr	r3, [pc, #120]	; (8006a9c <xPortStartScheduler+0x12c>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	021b      	lsls	r3, r3, #8
 8006a28:	4a1c      	ldr	r2, [pc, #112]	; (8006a9c <xPortStartScheduler+0x12c>)
 8006a2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a2c:	4b1b      	ldr	r3, [pc, #108]	; (8006a9c <xPortStartScheduler+0x12c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a34:	4a19      	ldr	r2, [pc, #100]	; (8006a9c <xPortStartScheduler+0x12c>)
 8006a36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a40:	4b17      	ldr	r3, [pc, #92]	; (8006aa0 <xPortStartScheduler+0x130>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a16      	ldr	r2, [pc, #88]	; (8006aa0 <xPortStartScheduler+0x130>)
 8006a46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a4c:	4b14      	ldr	r3, [pc, #80]	; (8006aa0 <xPortStartScheduler+0x130>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a13      	ldr	r2, [pc, #76]	; (8006aa0 <xPortStartScheduler+0x130>)
 8006a52:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a58:	f000 f8d6 	bl	8006c08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a5c:	4b11      	ldr	r3, [pc, #68]	; (8006aa4 <xPortStartScheduler+0x134>)
 8006a5e:	2200      	movs	r2, #0
 8006a60:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a62:	f000 f8f5 	bl	8006c50 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a66:	4b10      	ldr	r3, [pc, #64]	; (8006aa8 <xPortStartScheduler+0x138>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a0f      	ldr	r2, [pc, #60]	; (8006aa8 <xPortStartScheduler+0x138>)
 8006a6c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a70:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a72:	f7ff ff69 	bl	8006948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a76:	f7ff f86d 	bl	8005b54 <vTaskSwitchContext>
	prvTaskExitError();
 8006a7a:	f7ff ff23 	bl	80068c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3718      	adds	r7, #24
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	e000ed00 	.word	0xe000ed00
 8006a8c:	410fc271 	.word	0x410fc271
 8006a90:	410fc270 	.word	0x410fc270
 8006a94:	e000e400 	.word	0xe000e400
 8006a98:	20000d1c 	.word	0x20000d1c
 8006a9c:	20000d20 	.word	0x20000d20
 8006aa0:	e000ed20 	.word	0xe000ed20
 8006aa4:	20000014 	.word	0x20000014
 8006aa8:	e000ef34 	.word	0xe000ef34

08006aac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ac4:	4b0e      	ldr	r3, [pc, #56]	; (8006b00 <vPortEnterCritical+0x54>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	4a0d      	ldr	r2, [pc, #52]	; (8006b00 <vPortEnterCritical+0x54>)
 8006acc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ace:	4b0c      	ldr	r3, [pc, #48]	; (8006b00 <vPortEnterCritical+0x54>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d10e      	bne.n	8006af4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ad6:	4b0b      	ldr	r3, [pc, #44]	; (8006b04 <vPortEnterCritical+0x58>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d009      	beq.n	8006af4 <vPortEnterCritical+0x48>
 8006ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae4:	f383 8811 	msr	BASEPRI, r3
 8006ae8:	f3bf 8f6f 	isb	sy
 8006aec:	f3bf 8f4f 	dsb	sy
 8006af0:	603b      	str	r3, [r7, #0]
 8006af2:	e7fe      	b.n	8006af2 <vPortEnterCritical+0x46>
	}
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	20000014 	.word	0x20000014
 8006b04:	e000ed04 	.word	0xe000ed04

08006b08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b0e:	4b11      	ldr	r3, [pc, #68]	; (8006b54 <vPortExitCritical+0x4c>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d109      	bne.n	8006b2a <vPortExitCritical+0x22>
 8006b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1a:	f383 8811 	msr	BASEPRI, r3
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f3bf 8f4f 	dsb	sy
 8006b26:	607b      	str	r3, [r7, #4]
 8006b28:	e7fe      	b.n	8006b28 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006b2a:	4b0a      	ldr	r3, [pc, #40]	; (8006b54 <vPortExitCritical+0x4c>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	4a08      	ldr	r2, [pc, #32]	; (8006b54 <vPortExitCritical+0x4c>)
 8006b32:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b34:	4b07      	ldr	r3, [pc, #28]	; (8006b54 <vPortExitCritical+0x4c>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d104      	bne.n	8006b46 <vPortExitCritical+0x3e>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b46:	bf00      	nop
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	20000014 	.word	0x20000014
	...

08006b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b60:	f3ef 8009 	mrs	r0, PSP
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	4b15      	ldr	r3, [pc, #84]	; (8006bc0 <pxCurrentTCBConst>)
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	f01e 0f10 	tst.w	lr, #16
 8006b70:	bf08      	it	eq
 8006b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b7a:	6010      	str	r0, [r2, #0]
 8006b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b84:	f380 8811 	msr	BASEPRI, r0
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f7fe ffe0 	bl	8005b54 <vTaskSwitchContext>
 8006b94:	f04f 0000 	mov.w	r0, #0
 8006b98:	f380 8811 	msr	BASEPRI, r0
 8006b9c:	bc09      	pop	{r0, r3}
 8006b9e:	6819      	ldr	r1, [r3, #0]
 8006ba0:	6808      	ldr	r0, [r1, #0]
 8006ba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba6:	f01e 0f10 	tst.w	lr, #16
 8006baa:	bf08      	it	eq
 8006bac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006bb0:	f380 8809 	msr	PSP, r0
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	f3af 8000 	nop.w

08006bc0 <pxCurrentTCBConst>:
 8006bc0:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006bc4:	bf00      	nop
 8006bc6:	bf00      	nop

08006bc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006be0:	f7fe ff00 	bl	80059e4 <xTaskIncrementTick>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bea:	4b06      	ldr	r3, [pc, #24]	; (8006c04 <SysTick_Handler+0x3c>)
 8006bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006bfc:	bf00      	nop
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	e000ed04 	.word	0xe000ed04

08006c08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c08:	b480      	push	{r7}
 8006c0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c0c:	4b0b      	ldr	r3, [pc, #44]	; (8006c3c <vPortSetupTimerInterrupt+0x34>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c12:	4b0b      	ldr	r3, [pc, #44]	; (8006c40 <vPortSetupTimerInterrupt+0x38>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c18:	4b0a      	ldr	r3, [pc, #40]	; (8006c44 <vPortSetupTimerInterrupt+0x3c>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a0a      	ldr	r2, [pc, #40]	; (8006c48 <vPortSetupTimerInterrupt+0x40>)
 8006c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c22:	099b      	lsrs	r3, r3, #6
 8006c24:	4a09      	ldr	r2, [pc, #36]	; (8006c4c <vPortSetupTimerInterrupt+0x44>)
 8006c26:	3b01      	subs	r3, #1
 8006c28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c2a:	4b04      	ldr	r3, [pc, #16]	; (8006c3c <vPortSetupTimerInterrupt+0x34>)
 8006c2c:	2207      	movs	r2, #7
 8006c2e:	601a      	str	r2, [r3, #0]
}
 8006c30:	bf00      	nop
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	e000e010 	.word	0xe000e010
 8006c40:	e000e018 	.word	0xe000e018
 8006c44:	20000008 	.word	0x20000008
 8006c48:	10624dd3 	.word	0x10624dd3
 8006c4c:	e000e014 	.word	0xe000e014

08006c50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006c60 <vPortEnableVFP+0x10>
 8006c54:	6801      	ldr	r1, [r0, #0]
 8006c56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006c5a:	6001      	str	r1, [r0, #0]
 8006c5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c5e:	bf00      	nop
 8006c60:	e000ed88 	.word	0xe000ed88

08006c64 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c6a:	f3ef 8305 	mrs	r3, IPSR
 8006c6e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2b0f      	cmp	r3, #15
 8006c74:	d913      	bls.n	8006c9e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c76:	4a16      	ldr	r2, [pc, #88]	; (8006cd0 <vPortValidateInterruptPriority+0x6c>)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c80:	4b14      	ldr	r3, [pc, #80]	; (8006cd4 <vPortValidateInterruptPriority+0x70>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	7afa      	ldrb	r2, [r7, #11]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d209      	bcs.n	8006c9e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8e:	f383 8811 	msr	BASEPRI, r3
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	f3bf 8f4f 	dsb	sy
 8006c9a:	607b      	str	r3, [r7, #4]
 8006c9c:	e7fe      	b.n	8006c9c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c9e:	4b0e      	ldr	r3, [pc, #56]	; (8006cd8 <vPortValidateInterruptPriority+0x74>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ca6:	4b0d      	ldr	r3, [pc, #52]	; (8006cdc <vPortValidateInterruptPriority+0x78>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d909      	bls.n	8006cc2 <vPortValidateInterruptPriority+0x5e>
 8006cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	603b      	str	r3, [r7, #0]
 8006cc0:	e7fe      	b.n	8006cc0 <vPortValidateInterruptPriority+0x5c>
	}
 8006cc2:	bf00      	nop
 8006cc4:	3714      	adds	r7, #20
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	e000e3f0 	.word	0xe000e3f0
 8006cd4:	20000d1c 	.word	0x20000d1c
 8006cd8:	e000ed0c 	.word	0xe000ed0c
 8006cdc:	20000d20 	.word	0x20000d20

08006ce0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b08a      	sub	sp, #40	; 0x28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006cec:	f7fe fdc0 	bl	8005870 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006cf0:	4b57      	ldr	r3, [pc, #348]	; (8006e50 <pvPortMalloc+0x170>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d101      	bne.n	8006cfc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006cf8:	f000 f90c 	bl	8006f14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006cfc:	4b55      	ldr	r3, [pc, #340]	; (8006e54 <pvPortMalloc+0x174>)
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4013      	ands	r3, r2
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f040 808c 	bne.w	8006e22 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d01c      	beq.n	8006d4a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006d10:	2208      	movs	r2, #8
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4413      	add	r3, r2
 8006d16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f003 0307 	and.w	r3, r3, #7
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d013      	beq.n	8006d4a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f023 0307 	bic.w	r3, r3, #7
 8006d28:	3308      	adds	r3, #8
 8006d2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d009      	beq.n	8006d4a <pvPortMalloc+0x6a>
 8006d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	617b      	str	r3, [r7, #20]
 8006d48:	e7fe      	b.n	8006d48 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d068      	beq.n	8006e22 <pvPortMalloc+0x142>
 8006d50:	4b41      	ldr	r3, [pc, #260]	; (8006e58 <pvPortMalloc+0x178>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d863      	bhi.n	8006e22 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d5a:	4b40      	ldr	r3, [pc, #256]	; (8006e5c <pvPortMalloc+0x17c>)
 8006d5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d5e:	4b3f      	ldr	r3, [pc, #252]	; (8006e5c <pvPortMalloc+0x17c>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d64:	e004      	b.n	8006d70 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d903      	bls.n	8006d82 <pvPortMalloc+0xa2>
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1f1      	bne.n	8006d66 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d82:	4b33      	ldr	r3, [pc, #204]	; (8006e50 <pvPortMalloc+0x170>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d04a      	beq.n	8006e22 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d8c:	6a3b      	ldr	r3, [r7, #32]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2208      	movs	r2, #8
 8006d92:	4413      	add	r3, r2
 8006d94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	6a3b      	ldr	r3, [r7, #32]
 8006d9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	1ad2      	subs	r2, r2, r3
 8006da6:	2308      	movs	r3, #8
 8006da8:	005b      	lsls	r3, r3, #1
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d91e      	bls.n	8006dec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4413      	add	r3, r2
 8006db4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	f003 0307 	and.w	r3, r3, #7
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d009      	beq.n	8006dd4 <pvPortMalloc+0xf4>
 8006dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	613b      	str	r3, [r7, #16]
 8006dd2:	e7fe      	b.n	8006dd2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	685a      	ldr	r2, [r3, #4]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	1ad2      	subs	r2, r2, r3
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006de6:	69b8      	ldr	r0, [r7, #24]
 8006de8:	f000 f8f6 	bl	8006fd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006dec:	4b1a      	ldr	r3, [pc, #104]	; (8006e58 <pvPortMalloc+0x178>)
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	4a18      	ldr	r2, [pc, #96]	; (8006e58 <pvPortMalloc+0x178>)
 8006df8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006dfa:	4b17      	ldr	r3, [pc, #92]	; (8006e58 <pvPortMalloc+0x178>)
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	4b18      	ldr	r3, [pc, #96]	; (8006e60 <pvPortMalloc+0x180>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d203      	bcs.n	8006e0e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e06:	4b14      	ldr	r3, [pc, #80]	; (8006e58 <pvPortMalloc+0x178>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a15      	ldr	r2, [pc, #84]	; (8006e60 <pvPortMalloc+0x180>)
 8006e0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	4b10      	ldr	r3, [pc, #64]	; (8006e54 <pvPortMalloc+0x174>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	431a      	orrs	r2, r3
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	2200      	movs	r2, #0
 8006e20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e22:	f7fe fd33 	bl	800588c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	f003 0307 	and.w	r3, r3, #7
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d009      	beq.n	8006e44 <pvPortMalloc+0x164>
 8006e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	60fb      	str	r3, [r7, #12]
 8006e42:	e7fe      	b.n	8006e42 <pvPortMalloc+0x162>
	return pvReturn;
 8006e44:	69fb      	ldr	r3, [r7, #28]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3728      	adds	r7, #40	; 0x28
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	200018e4 	.word	0x200018e4
 8006e54:	200018f0 	.word	0x200018f0
 8006e58:	200018e8 	.word	0x200018e8
 8006e5c:	200018dc 	.word	0x200018dc
 8006e60:	200018ec 	.word	0x200018ec

08006e64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d046      	beq.n	8006f04 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e76:	2308      	movs	r3, #8
 8006e78:	425b      	negs	r3, r3
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	685a      	ldr	r2, [r3, #4]
 8006e88:	4b20      	ldr	r3, [pc, #128]	; (8006f0c <vPortFree+0xa8>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d109      	bne.n	8006ea6 <vPortFree+0x42>
 8006e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	60fb      	str	r3, [r7, #12]
 8006ea4:	e7fe      	b.n	8006ea4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d009      	beq.n	8006ec2 <vPortFree+0x5e>
 8006eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb2:	f383 8811 	msr	BASEPRI, r3
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	60bb      	str	r3, [r7, #8]
 8006ec0:	e7fe      	b.n	8006ec0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	4b11      	ldr	r3, [pc, #68]	; (8006f0c <vPortFree+0xa8>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4013      	ands	r3, r2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d019      	beq.n	8006f04 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d115      	bne.n	8006f04 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	4b0b      	ldr	r3, [pc, #44]	; (8006f0c <vPortFree+0xa8>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	43db      	mvns	r3, r3
 8006ee2:	401a      	ands	r2, r3
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ee8:	f7fe fcc2 	bl	8005870 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	685a      	ldr	r2, [r3, #4]
 8006ef0:	4b07      	ldr	r3, [pc, #28]	; (8006f10 <vPortFree+0xac>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	4a06      	ldr	r2, [pc, #24]	; (8006f10 <vPortFree+0xac>)
 8006ef8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006efa:	6938      	ldr	r0, [r7, #16]
 8006efc:	f000 f86c 	bl	8006fd8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006f00:	f7fe fcc4 	bl	800588c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f04:	bf00      	nop
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	200018f0 	.word	0x200018f0
 8006f10:	200018e8 	.word	0x200018e8

08006f14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f1a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006f1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f20:	4b27      	ldr	r3, [pc, #156]	; (8006fc0 <prvHeapInit+0xac>)
 8006f22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f003 0307 	and.w	r3, r3, #7
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00c      	beq.n	8006f48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	3307      	adds	r3, #7
 8006f32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f023 0307 	bic.w	r3, r3, #7
 8006f3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	4a1f      	ldr	r2, [pc, #124]	; (8006fc0 <prvHeapInit+0xac>)
 8006f44:	4413      	add	r3, r2
 8006f46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f4c:	4a1d      	ldr	r2, [pc, #116]	; (8006fc4 <prvHeapInit+0xb0>)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f52:	4b1c      	ldr	r3, [pc, #112]	; (8006fc4 <prvHeapInit+0xb0>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f60:	2208      	movs	r2, #8
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	1a9b      	subs	r3, r3, r2
 8006f66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f023 0307 	bic.w	r3, r3, #7
 8006f6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4a15      	ldr	r2, [pc, #84]	; (8006fc8 <prvHeapInit+0xb4>)
 8006f74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f76:	4b14      	ldr	r3, [pc, #80]	; (8006fc8 <prvHeapInit+0xb4>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f7e:	4b12      	ldr	r3, [pc, #72]	; (8006fc8 <prvHeapInit+0xb4>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2200      	movs	r2, #0
 8006f84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	1ad2      	subs	r2, r2, r3
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f94:	4b0c      	ldr	r3, [pc, #48]	; (8006fc8 <prvHeapInit+0xb4>)
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	4a0a      	ldr	r2, [pc, #40]	; (8006fcc <prvHeapInit+0xb8>)
 8006fa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	4a09      	ldr	r2, [pc, #36]	; (8006fd0 <prvHeapInit+0xbc>)
 8006faa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006fac:	4b09      	ldr	r3, [pc, #36]	; (8006fd4 <prvHeapInit+0xc0>)
 8006fae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006fb2:	601a      	str	r2, [r3, #0]
}
 8006fb4:	bf00      	nop
 8006fb6:	3714      	adds	r7, #20
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr
 8006fc0:	20000d24 	.word	0x20000d24
 8006fc4:	200018dc 	.word	0x200018dc
 8006fc8:	200018e4 	.word	0x200018e4
 8006fcc:	200018ec 	.word	0x200018ec
 8006fd0:	200018e8 	.word	0x200018e8
 8006fd4:	200018f0 	.word	0x200018f0

08006fd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006fe0:	4b28      	ldr	r3, [pc, #160]	; (8007084 <prvInsertBlockIntoFreeList+0xac>)
 8006fe2:	60fb      	str	r3, [r7, #12]
 8006fe4:	e002      	b.n	8006fec <prvInsertBlockIntoFreeList+0x14>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d8f7      	bhi.n	8006fe6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	68ba      	ldr	r2, [r7, #8]
 8007000:	4413      	add	r3, r2
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	429a      	cmp	r2, r3
 8007006:	d108      	bne.n	800701a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	441a      	add	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	441a      	add	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	429a      	cmp	r2, r3
 800702c:	d118      	bne.n	8007060 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	4b15      	ldr	r3, [pc, #84]	; (8007088 <prvInsertBlockIntoFreeList+0xb0>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	429a      	cmp	r2, r3
 8007038:	d00d      	beq.n	8007056 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685a      	ldr	r2, [r3, #4]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	441a      	add	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	601a      	str	r2, [r3, #0]
 8007054:	e008      	b.n	8007068 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007056:	4b0c      	ldr	r3, [pc, #48]	; (8007088 <prvInsertBlockIntoFreeList+0xb0>)
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	e003      	b.n	8007068 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	429a      	cmp	r2, r3
 800706e:	d002      	beq.n	8007076 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007076:	bf00      	nop
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	200018dc 	.word	0x200018dc
 8007088:	200018e4 	.word	0x200018e4

0800708c <__libc_init_array>:
 800708c:	b570      	push	{r4, r5, r6, lr}
 800708e:	4e0d      	ldr	r6, [pc, #52]	; (80070c4 <__libc_init_array+0x38>)
 8007090:	4c0d      	ldr	r4, [pc, #52]	; (80070c8 <__libc_init_array+0x3c>)
 8007092:	1ba4      	subs	r4, r4, r6
 8007094:	10a4      	asrs	r4, r4, #2
 8007096:	2500      	movs	r5, #0
 8007098:	42a5      	cmp	r5, r4
 800709a:	d109      	bne.n	80070b0 <__libc_init_array+0x24>
 800709c:	4e0b      	ldr	r6, [pc, #44]	; (80070cc <__libc_init_array+0x40>)
 800709e:	4c0c      	ldr	r4, [pc, #48]	; (80070d0 <__libc_init_array+0x44>)
 80070a0:	f000 f82c 	bl	80070fc <_init>
 80070a4:	1ba4      	subs	r4, r4, r6
 80070a6:	10a4      	asrs	r4, r4, #2
 80070a8:	2500      	movs	r5, #0
 80070aa:	42a5      	cmp	r5, r4
 80070ac:	d105      	bne.n	80070ba <__libc_init_array+0x2e>
 80070ae:	bd70      	pop	{r4, r5, r6, pc}
 80070b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070b4:	4798      	blx	r3
 80070b6:	3501      	adds	r5, #1
 80070b8:	e7ee      	b.n	8007098 <__libc_init_array+0xc>
 80070ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070be:	4798      	blx	r3
 80070c0:	3501      	adds	r5, #1
 80070c2:	e7f2      	b.n	80070aa <__libc_init_array+0x1e>
 80070c4:	080071e0 	.word	0x080071e0
 80070c8:	080071e0 	.word	0x080071e0
 80070cc:	080071e0 	.word	0x080071e0
 80070d0:	080071e4 	.word	0x080071e4

080070d4 <memcpy>:
 80070d4:	b510      	push	{r4, lr}
 80070d6:	1e43      	subs	r3, r0, #1
 80070d8:	440a      	add	r2, r1
 80070da:	4291      	cmp	r1, r2
 80070dc:	d100      	bne.n	80070e0 <memcpy+0xc>
 80070de:	bd10      	pop	{r4, pc}
 80070e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070e8:	e7f7      	b.n	80070da <memcpy+0x6>

080070ea <memset>:
 80070ea:	4402      	add	r2, r0
 80070ec:	4603      	mov	r3, r0
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d100      	bne.n	80070f4 <memset+0xa>
 80070f2:	4770      	bx	lr
 80070f4:	f803 1b01 	strb.w	r1, [r3], #1
 80070f8:	e7f9      	b.n	80070ee <memset+0x4>
	...

080070fc <_init>:
 80070fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fe:	bf00      	nop
 8007100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007102:	bc08      	pop	{r3}
 8007104:	469e      	mov	lr, r3
 8007106:	4770      	bx	lr

08007108 <_fini>:
 8007108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710a:	bf00      	nop
 800710c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800710e:	bc08      	pop	{r3}
 8007110:	469e      	mov	lr, r3
 8007112:	4770      	bx	lr
